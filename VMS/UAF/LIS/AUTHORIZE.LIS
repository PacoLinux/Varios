
; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 1
; Digital Equipment Corporation
;
;	0001	MODULE AUTHORIZE ( MAIN=START,
;	0002			IDENT = '01'
;	0003			) =
;	0004	BEGIN
;	0005	
;	0006	!
;	0007	! COPYRIGHT (C) 1977
;	0008	! DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS 01754
;	0009	!
;	0010	! THIS SOFTWARE IS FURNISHED  UNDER A LICENSE FOR USE ONLY ON A SINGLE
;	0011	! COMPUTER  SYSTEM AND  MAY BE  COPIED ONLY WITH  THE INCLUSION OF THE
;	0012	! ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,
;	0013	! MAY NOT BE PROVIDED OR  OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
;	0014	! EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE
;	0015	! TERMS.  TITLE TO AND  OWNERSHIP OF THE  SOFTWARE  SHALL AT ALL TIMES
;	0016	! REMAIN IN DEC.
;	0017	!
;	0018	! THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE
;	0019	! AND SHOULD  NOT BE CONSTRUED  AS A COMMITMENT  BY DIGITAL  EQUIPMENT
;	0020	! CORPORATION.
;	0021	!
;	0022	! DEC ASSUMES  NO  RESPONSIBILITY  FOR  THE USE OR  RELIABILITY OF ITS
;	0023	! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
;	0024	
;	0025	!++
;	0026	! FACILITY: System Management Utility Program
;	0027	!
;	0028	! ABSTRACT:
;	0029	!
;	0030	!	This program allows the system manager to maintain the user
;	0031	!	authorization file which contains usernames, passwords, quotas,
;	0032	!	and defaults.  The following functions are provided:
;	0033	!
;	0034	!		ADD - add a new user record to the authorization file (UAF)
;	0035	!		DEFAULT - change a default value
;	0036	!		EXIT - exit program and update file
;	0037	!		LIST - complete list of records to file
;	0038	!		REMOVE - remove a user record
;	0039	!		SHOW - display the values from a user record
;	0040	!		MODIFY - change one or more values for a user
;	0041	!		HELP - ask for explanation
;	0042	!
;	0043	! ENVIRONMENT:
;	0044	!
;	0045	! AUTHOR: Henry M. Levy	, CREATION DATE: 1-June-1977
;	0046	!
;	0047	! MODIFIED BY:
;	0048	!
;	0049	! 	, : VERSION
;	0050	!
;	0051	! 01 - H.M.L.  20-December-1977	Rework user interface, handle privilege
;	0052	!				names with external routine
;	0053	!--

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 2
; Digital Equipment Corporation
;
;	0054	!
;	0055	! TABLE OF CONTENTS:
;	0056	!
;	0057	
;	0058	FORWARD ROUTINE
;	0059		ACC$EXIT,		! exit and cleanup routine
;	0060		ADD,			! insert new user record
;	0061		ASK,			! prompt terminal for input
;	0062		BUILD_INI_RECS,		! build initial file records for defaults and
;	0063					! system manager
;	0064		CVTNUM,			! convert decimal ascii to binary
;	0065		DEFAULT,		! change default record
;	0066		EXIT,			! normal exit routine
;	0067		FAOOUT,			! output formatted message
;	0068		FIND_VAL,		! lookup string in table
;	0069		FMT_SYS_MSG ,		! output message from system message file
;	0070		GET_CMD_LINE ,		! input user command line
;	0071		GETACCOUNT ,		! get account name
;	0072		GETASTLM ,		! get AST limit
;	0073		GETBIOLM ,		! get buffered I/O limit
;	0074		GETBYTLM ,		! get BIO byte count limit
;	0075		GETCLI,			! get CLI name
;	0076	!	GETCPUTIM ,		! get cpu time quota
;	0077		GETDEVICE ,		! get default device name
;	0078		GETDIOLM ,		! get direct I/O limit
;	0079		GETDIRECTORY,		! get default directory
;	0080		GETFILLM,		! get open file limit
;	0081		GETFLAGS,		! get flag bits
;	0082		GETLGICMD,		! get login command file name
;	0083		GETPASSWORD,		! get user password
;	0084		GETPGFLQUOTA,		! get paging file quota
;	0085		GETPRCCNT,		! get subprocess limit
;	0086		GETPRIORITY,		! get process base priority
;	0087		GETPRIV,		! get process privileges
;	0088		GETOWNER,		! get owner's name
;	0089		GETSTRING,		! get string from input
;	0090		GETTOKEN,		! pull off input token
;	0091		GETTQCNT,		! get time queue entry limit
;	0092		GETUIC,			! get user identification code
;	0093		GET_USER_RECORD,	! get username from input and lookup record
;	0094		GETVAL,			! get numeric value from user
;	0095		GETDFWSCNT,		! get default working size
;	0096		GETWSQUOTA,		! get working set size quota
;	0097		HELP,			! help routine
;	0098		LIST ,			! list file routine
;	0099		LOCATE_USER,		! lookup user record in UAF
;	0100		MODIFY,			! update a user record
;	0101		PARSE_UIC,		! validate UIC and return group and member
;	0102		PRINT_PRIV,		! print privilege bits
;	0103		REMOVE,			! remove username from file
;	0104		SETUP,			! open initial files and build temp file
;	0105		SHOWUSER ,		! display user record
;	0106		START ,			! controlling code
;	0107		UPDATE_RECORD ;		! prompt user for replacement values to all fields
;	0108	

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 2-1
; Digital Equipment Corporation
;
;	0109	!
;	0110	! INCLUDE FILES:
;	0111	!
;	0112	
;	0113	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0114	
;	0115	!
;	0116	! MACROS:
;	0117	!
;	0118	
;	0119	MACRO
;	0120	
;	0121	    CSTRING[] = (UPLIT BYTE(%CHARCOUNT(%STRING(%REMAINING)),
;     M 0122			%STRING(%REMAINING)) )%,
;	0123	
;	0124	    FATAL[] = ( FMT_SYS_MSG(%REMAINING) ; ACC$EXIT() )%,
;	0125	
;	0126	!
;	0127	! Macro to build table for command string search.  Table contains
;	0128	! for each string:
;	0129	!	1) an associated value (not neg.)
;	0130	!	2) the minimum characters for a unique match
;	0131	!	3) the counted ascii string
;	0132	!
;	0133	
;	0134	
;	0135	    NAME_ENTRY( NAME , MIN , VALUE )[] = LONG(VALUE) , BYTE(MIN) ,
;     M 0136			%ASCIC NAME , NAME_ENTRY(%REMAINING) %,
;	0137	    NAMETABLE[] = (UPLIT BYTE ( NAME_ENTRY(%REMAINING) , LONG(-1) , LONG(-1) ) )%,
;	0138	
;	0139	
;	0140	!
;	0141	! Rewind file to start
;	0142	!
;	0143	
;	0144	    REWIND( RABNAM ) = ( $REWIND(RAB=RABNAM) ) %,
;	0145	
;	0146	!
;	0147	! Macros to check for success or failure from RMS
;	0148	!
;	0149	
;	0150	    RMSBAD(STRING) = (NOT(RMSERR = STRING)) %,
;	0151	    RMSOK(STRING) = (RMSERR = STRING) %;
;	0152	
;	0153	!
;	0154	! EQUATED SYMBOLS:
;	0155	!
;	0156	
;	0157	LITERAL
;	0158		FALSE = 0 ,			! logical false
;	0159		TRUE = 1 ,			! logical true
;	0160	
;	0161		BYTE_LENGTH = 8 ,		! bits per byte
;	0162		WORD_LENGTH = 16 ,		! bits per word
;	0163		LONG_LENGTH = 32 ,		! bits per longword

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 2-2
; Digital Equipment Corporation
;
;	0164	
;	0165		BLANK = ' ',			!  delimiters
;	0166		COLON = ':',
;	0167		COMMA = ',',
;	0168		CR = 13,
;	0169		DOUBLE_QUOTE = '"' ,
;	0170		EQUALS = '=',
;	0171		LF = 10,
;	0172		LPAREN = '(' ,
;	0173		RPAREN = ')' ,
;	0174		SINGLE_QUOTE = '''' ,
;	0175		SLASH = '/',
;	0176		TAB = '	',
;	0177		ZERO = 0,
;	0178	
;	0179		CMDBUFLEN = 1024 ,		! size of user command buffer
;	0180	
;	0181		COUNTED_STRING = 1,		! counted string type indicator
;	0182		FILLED_STRING = 2,		! filled string type indicator
;	0183	
;	0184		SYMNOTFND = -2 ,		! error codes for FIND_VAL
;	0185		SYMNOTUNQ = -4 ;
;	0186	
;	0187	!
;	0188	! Define the default delimiter string used by GETTOKEN to find
;	0189	! the end of the next input token.
;	0190	!
;	0191	
;	0192	BIND
;	0193		DELIMSTR = CSTRING(
;     P 0194				%CHAR( BLANK ) ,
;     P 0195				%CHAR( TAB ) ,
;     P 0196				%CHAR( COMMA ) ,
;     P 0197				%CHAR( SLASH ) ,
;     P 0198				%CHAR( EQUALS ) ,
;     P 0199				%CHAR( COLON ) ,
;     P 0200				%CHAR( ZERO ) ,
;     P 0201				%CHAR( CR ) ,
;     P 0202				%CHAR( LF ) ,
;     P 0203				%CHAR( RPAREN ) ,
;     P 0204				) ,
;	0205	
;	0206	!
;	0207	! Default values for authorization file record.  These values are
;	0208	! only used when a new authorization file is created.  If the file
;	0209	! already exists, the default values are read from the first file
;	0210	! record.
;	0211	!
;	0212	
;	0213	    DEFUSER = CSTRING('DEFAULT'),	! default username
;	0214	    DEFPASS = CSTRING('USER'),		! default password
;	0215	    DEFACT = CSTRING('        '),	! default account name
;	0216	    DEFCLI = CSTRING('DCL') ,		! default command interpreter
;	0217	    DEFOWNER = CSTRING(' ') ,		! owner's name
;	0218	    DEFLGICMD = CSTRING('') ,		! default login command file

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 2-3
; Digital Equipment Corporation
;
;	0219	    DEFGRP = %O'200' ,			! default group
;	0220	    DEFMEM = %O'200' ,			! default member
;	0221	    DEFDIR = CSTRING('[USER]'),		! default directory name
;	0222	    DEFDEV = CSTRING(''),		! default device name
;	0223	    DEFBIOLM = 6 ,			! default buffered I/O limit
;	0224	    DEFBYTLM = 4096 ,			! default buffered I/O buffer space
;	0225	    DEFDIOLM = 6 ,			! default direct I/O limit
;	0226	    DEFFILLM = 20 ,			! default open file limit
;	0227	    DEFFLAGS = 0 ,				! default flag bits
;	0228	    DEFTQCNT = 10 ,			! default time queue entries
;	0229	    DEFPRCCNT = 8 ,			! default subprocess count
;	0230	    DEFPRI = 4 ,			! default process priority
;	0231	    DEFWSQUOTA = 200 ,			! default working set limit
;	0232	    DEFDFWSCNT = 150 ,			! "default" working set default size
;	0233	    DEFCPUTIM = 0 ,			! default CPU time quota
;	0234	    DEFASTLM = 10 ,			! default AST queue limit
;	0235	    DEFPGFLQUOTA = 40 ,			! default paging file limit
;	0236						! ...(256 page clusters)
;	0237	    DEFPRIV = UPLIT(			! default privilege vector
;	0238		(
;	0239		( 1 ^ $BITPOSITION(PRV$V_GROUP) )  OR
;	0240		( 1 ^ $BITPOSITION(PRV$V_PRMMBX) ) OR
;	0241		( 1 ^ $BITPOSITION(PRV$V_TMPMBX) )
;	0242		) , 0 ) ,
;	0243	
;	0244	!
;	0245	! The following are the default values for the SYSTEM user.  When
;	0246	! a new file is created, a system manager record is created.
;	0247	!
;	0248	
;	0249	    SYSUSER = CSTRING('SYSTEM'),
;	0250	    SYSPASS = CSTRING('MANAGER'),
;	0251	    SYSACT = CSTRING('        '),
;	0252	    SYSCLI = CSTRING('DCL') ,
;	0253	    SYSOWNER = CSTRING('SYSTEM MANAGER'),
;	0254	    SYSLGICMD = CSTRING('') ,
;	0255	    SYSGRP = %O'1' ,
;	0256	    SYSMEM = %O'4' ,
;	0257	    SYSDIR = CSTRING('[SYSMGR]'),
;	0258	    SYSDEV = CSTRING(''),
;	0259	    SYSBIOLM = 6 ,
;	0260	    SYSBYTLM = 20480 ,
;	0261	    SYSDIOLM = 12 ,
;	0262	    SYSFILLM = 20 ,
;	0263	    SYSFLAGS = 0 ,
;	0264	    SYSTQCNT = 20 ,
;	0265	    SYSPRCCNT = 10 ,
;	0266	    SYSPRI = 4 ,
;	0267	    SYSWSQUOTA = 1024 ,
;	0268	    SYSDFWSCNT = 150 ,
;	0269	    SYSCPUTIM = 0 ,
;	0270	    SYSASTLM = 20,
;	0271	    SYSPGFLQUOTA = 40 ,
;	0272	    SYSPRIV = UPLIT(REP 2 OF (%X'FFFFFFFF')) ;
;	0273	!

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 2-4
; Digital Equipment Corporation
;
;	0274	! OWN STORAGE:
;	0275	!
;	0276	
;	0277	OWN
;	0278	
;	0279	!
;	0280	! Buffer to read in user command line.  This buffer must be long
;	0281	! enough to hold multi-line commands.
;	0282	!
;	0283	
;	0284	    CMDBUF: VECTOR[CMDBUFLEN,BYTE] ,
;	0285	
;	0286	!
;	0287	! Default record.  The first record from the UAF file which contains
;	0288	! default values is read into this space.
;	0289	!
;	0290	
;	0291	    DEFAULT_RECORD: BLOCK[UAF$C_LENGTH,BYTE],
;	0292	
;	0293	!
;	0294	! Global to contain number of characters read on terminal input.
;	0295	!
;	0296	
;	0297	    INSIZE: LONG ,
;	0298	
;	0299	!
;	0300	! Modify flag indicates if the file has been changed.  If no change
;	0301	! is made, exit will not rename the file.
;	0302	!
;	0303	
;	0304	    MODIFY_FLAG: LONG ,
;	0305	
;	0306	!
;	0307	! Pointer to the address of the delimiter following the last
;	0308	! token processed in the input command line.
;	0309	!
;	0310	
;	0311	    NEXTTOKEN: LONG ,
;	0312	
;	0313	!
;	0314	! Pointer to the start of the option name to be used in error reporting.
;	0315	!
;	0316	
;	0317	    OPTIONPTR: LONG ,
;	0318	
;	0319	!
;	0320	! Address of terminator to option name to be used
;	0321	! if processing routine wishes to rescan value with
;	0322	! different terminators.
;	0323	!
;	0324	
;	0325	    OPTIONEND: LONG ,
;	0326	
;	0327	!
;	0328	! Record buffer for file I/O.  Records are generally read into RECBUF,

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 2-5
; Digital Equipment Corporation
;
;	0329	! modified, and output.
;	0330	!
;	0331	
;	0332	    RECBUF: BLOCK[UAF$C_LENGTH,BYTE] ,
;	0333	
;	0334	!
;	0335	! Location to store RMS error codes.
;	0336	!
;	0337	
;	0338	    RMSERR: LONG ,
;	0339	
;	0340	!
;	0341	! Address and length of the current token being processed from the
;	0342	! input command line.
;	0343	!
;	0344	
;	0345	    TOKENLEN: LONG ,
;	0346	    TOKENPTR: LONG ,
;	0347	
;	0348	!
;	0349	! Space for terminal channel number
;	0350	!
;	0351	
;	0352	    TTCHAN: WORD ,
;	0353	
;	0354	!
;	0355	! Data structures for RMS
;	0356	!
;	0357	
;	0358	    TMPXAB: $XABPRO (			! XAB for file protection
;     P 0359		PRO=(RWED,RWED,RWE,)		! deny world access
;     P 0360		),
;	0361	
;	0362	    TMPFAB: $FAB (			! FAB for work file
;     P 0363		FAC = (GET,PUT,DEL,UPD),	! access types
;     P 0364		FNA = UPLIT BYTE('SYSUAF.TMP'), ! temporary file name
;     P 0365		FNS = %CHARCOUNT('SYSUAF.TMP'),
;     P 0366		SHR = NIL ,			! temporary fix
;     P 0367		ORG = SEQ ,			! sequential operations
;     P 0368		RFM = FIX ,
;     P 0369		ALQ = 10 ,			! initial allocation
;     P 0370		DEQ = 10 ,			! extend size
;     P 0371		XAB = TMPXAB ,			! file protection XAB
;     P 0372		MRS = UAF$C_LENGTH		! fixed length record size
;     P 0373		),
;	0374	
;	0375	    TMPRAB: $RAB (			! RAB for temporary file
;     P 0376		RAC=SEQ ,			! sequential access
;     P 0377		UBF=RECBUF ,
;     P 0378		USZ=UAF$C_LENGTH ,
;     P 0379		RBF=RECBUF ,
;     P 0380		RSZ=UAF$C_LENGTH ,
;     P 0381		MBC = 10 ,			! multi-block count
;     P 0382		FAB=TMPFAB
;     P 0383		),

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 2-6
; Digital Equipment Corporation
;
;	0384	
;	0385	    UAFFAB: $FAB (			! FAB for current UAF file
;     P 0386		FAC = GET,			! read only
;     P 0387		FNA = UPLIT BYTE('SYSUAF.DAT'),
;     P 0388		FNS = %CHARCOUNT('SYSUAF.DAT')
;     P 0389		),
;	0390	
;	0391	    UAFRAB: $RAB (			! RAB for current UAF
;     P 0392		RAC = SEQ ,
;     P 0393		UBF = RECBUF ,
;     P 0394		USZ = UAF$C_LENGTH ,
;     P 0395		MBC = 10 ,
;     P 0396		FAB = UAFFAB
;     P 0397		) ,
;	0398	
;	0399	!
;	0400	! FAB and RAB for terminal I/O
;	0401	!
;	0402	
;	0403	    INFAB:	$FAB(
;     P 0404		FAC = (GET,PUT),
;     P 0405		RAT=CR,
;     P 0406		FNA=UPLIT BYTE('SYS$INPUT'),
;     P 0407		FNS=%CHARCOUNT('SYS$INPUT')
;     P 0408		),
;	0409	    INRAB:	$RAB(
;     P 0410		RAC=SEQ,
;     P 0411		ROP=(PMT,CVT),			! convert all input to upper case
;     P 0412		FAB=INFAB
;     P 0413		),
;	0414	
;	0415	    OUTFAB:	$FAB(
;     P 0416		FAC=(PUT),
;     P 0417		RAT=CR,
;     P 0418		FNA=UPLIT BYTE('SYS$OUTPUT'),
;     P 0419		FNS=%CHARCOUNT('SYS$OUTPUT')
;     P 0420		),
;	0421	    OUTRAB:	$RAB(
;     P 0422		RAC=SEQ,
;     P 0423		FAB=OUTFAB
;     P 0424		) ,
;	0425	
;	0426	!
;	0427	! RMS structures for LIST command
;	0428	!
;	0429	
;	0430	    LSTFAB: $FAB (
;     P 0431		FAC = PUT ,
;     P 0432		RAT = CR ,
;     P 0433		FNA = UPLIT BYTE('SYSUAF.LIS'),
;     P 0434		FNS = %CHARCOUNT('SYSUAF.LIS'),
;     P 0435		SHR = NIL ,
;     P 0436		ORG = SEQ ,
;     P 0437		RFM = FIX ,
;     P 0438		MRS = 130

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 2-7
; Digital Equipment Corporation
;
;     P 0439		),
;	0440	
;	0441	    LSTRAB: $RAB (
;     P 0442		RAC = SEQ ,
;     P 0443		FAB = LSTFAB
;     P 0444		) ;
;	0445	
;	0446	
;	0447	!
;	0448	! The definition table for command strings.
;	0449	! For each command there is an ascii command string, a count
;	0450	! of the minimum number of characters needed to specify the command,
;	0451	! and the address of the routine to call.
;	0452	!
;	0453	
;	0454	BIND 
;	0455	
;	0456	    COMMAND_TABLE = NAMETABLE(
;     P 0457	
;     P 0458		'ADD'		, 1 ,	ADD ,
;     P 0459		'DEFAULT'	, 1 ,	DEFAULT ,
;     P 0460		'EXIT'		, 1 ,	EXIT ,
;     P 0461		'HELP'		, 1 ,	HELP ,
;     P 0462		'LIST'		, 1 ,	LIST ,
;     P 0463		'MODIFY'	, 1 ,	MODIFY ,
;     P 0464		'REMOVE'	, 1 ,	REMOVE ,
;     P 0465		'SHOW'		, 1 ,	SHOWUSER 
;     P 0466		),
;	0467	
;	0468	!
;	0469	! The definition table for flag bits for UAF$B_FLAGS.
;	0470	!
;	0471	
;	0472	    FLAG_TABLE = NAMETABLE(
;     P 0473	
;     P 0474		'DISCTLY'	, 2 ,	$BITPOSITION(UAF$V_DISCTLY) ,
;     P 0475		'DEFCLI'	, 2 ,	$BITPOSITION(UAF$V_DEFCLI)
;     P 0476		),
;	0477	
;	0478	!
;	0479	! ASCII numbers from '0' through hex 'F'
;	0480	!
;	0481	
;	0482	    NUMBERS = UPLIT BYTE('0123456789ABCDEF'),
;	0483	
;	0484	
;	0485	!
;	0486	! The definition table for keyword argument names.  Each possible value
;	0487	! which can be supplied as an option on a command line has an ASCII
;	0488	! keyword name plus the minimum required characters.  With
;	0489	! each keyword is the address of a routine to call to process
;	0490	! the value supplied.
;	0491	!
;	0492	
;	0493	   OPTION_TABLE = NAMETABLE(

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 2-8
; Digital Equipment Corporation
;
;     P 0494		'ACCOUNT'	, 3 ,	GETACCOUNT ,
;     P 0495		'ASTLM'		, 3 ,	GETASTLM ,
;     P 0496		'BIOLM'		, 3 ,	GETBIOLM ,
;     P 0497		'BYTLM'		, 3 ,	GETBYTLM ,
;     P 0498		'CLI' 		, 3 ,	GETCLI ,
;     P 0499	!	'CPUTIM'	, 3 ,	GETCPUTIM ,
;     P 0500		'DEVICE'	, 3 ,	GETDEVICE ,
;     P 0501		'DIOLM'		, 3 ,	GETDIOLM ,
;     P 0502		'DIRECTORY'	, 3 ,	GETDIRECTORY ,
;     P 0503		'FILLM'		, 3 ,	GETFILLM ,
;     P 0504		'FLAGS'		, 3 ,	GETFLAGS ,
;     P 0505		'LGICMD'	, 3 ,	GETLGICMD ,
;     P 0506		'OWNER'		, 3 ,	GETOWNER ,
;     P 0507		'PASSWORD'	, 3 , 	GETPASSWORD ,
;     P 0508		'PGFLQUOTA'	, 3 ,	GETPGFLQUOTA ,
;     P 0509		'PRCLM'		, 3 ,	GETPRCCNT ,
;     P 0510		'PRIORITY'	, 4 , 	GETPRIORITY ,
;     P 0511		'PRIVILEGES'	, 4 ,	GETPRIV ,
;     P 0512		'TQELM'		, 3 ,	GETTQCNT ,
;     P 0513		'UIC'		, 3 ,	GETUIC ,
;     P 0514		'WSDEFAULT'	, 3 ,	GETDFWSCNT ,
;     P 0515		'WSQUOTA'	, 3 ,	GETWSQUOTA 
;     P 0516		) ,
;	0517	
;	0518	
;	0519	!
;	0520	! Message strings.
;	0521	!
;	0522	
;	0523	ACCPRMPT = CSTRING(%CHAR(LF),'UAF>'),
;	0524	ACCPRMPT2 = CSTRING(%CHAR(LF),'_'),
;	0525	ADDERR = CSTRING('unable to add user record'),
;	0526	ADDMSG = CSTRING('user record successfully added'),
;	0527	BADUSR = CSTRING('username does not exist \!AD\'),
;	0528	BADVALUE = CSTRING('error in value specification \!AD\'),
;	0529	CONERR = CSTRING('connect error'),
;	0530	CREERR = CSTRING('unable to create temporary UAF'),
;	0531	DIRCVTSTR = CSTRING('[!3OW,!3OW]'),
;	0532	DONEMSG = CSTRING('UAF updates completed'),
;	0533	GETERR = CSTRING('get error'),
;	0534	HELPMSG1 = CSTRING('!/Commands are:!/!/',
;     P 0535		'	ADD username [/options]	!! define new user'),
;	0536	HELPMSG2 = CSTRING(
;     P 0537		'	DEFAULT /options	!! change default record!/',
;     P 0538		'	EXIT			!! exit program!/',
;     P 0539		'	HELP			!! type this message'),
;	0540	HELPMSG3 = CSTRING(
;     P 0541		'	LIST			!! produce ascii file of usernames!/',
;     P 0542		'	MODIFY username /options  !! update a user''s record'),
;	0543	HELPMSG4 = CSTRING(
;     P 0544		'	REMOVE username		!! delete a user''s record!/',
;     P 0545		'	SHOW username		!! display values in a user record'),
;	0546	HELPMSG5 = CSTRING(
;     P 0547		'!/Options are:!/!/',
;     P 0548		'	/ACCOUNT , /ASTLM , /BIOLM , /BYTLM , /CLI ,!/',

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 2-9
; Digital Equipment Corporation
;
;     P 0549		'	/DEVICE , /DIOLM , /DIRECTORY , /FILLM , /FLAGS ,'),
;	0550	HELPMSG6 = CSTRING(
;     P 0551		'	/LGICMD , /OWNER , /PASSWORD , /PGFLQUOTA , /PRCLM ,!/',
;     P 0552		'	/PRIORITY , /PRIVILEGES , /TQELM , /UIC , /WSDEFAULT ,!/',
;     P 0553		'	/WSQUOTA!/'),
;	0554	INVCMD = CSTRING('invalid command'),
;	0555	INVDEV = CSTRING('device name too long to add trailing ":"!/',
;     P 0556		'\!AD\'),
;	0557	INVRSP = CSTRING('invalid response'),
;	0558	INVSTR = CSTRING('string too long for field \!AD\'),
;	0559	KEYNOTFND = CSTRING('invalid option name \!AD\'),
;	0560	KEYNOTUNQ = CSTRING('option name not unique \!AD\'),
;	0561	LSTERR = CSTRING('error creating listing file'),
;	0562	LSTMSG1 = CSTRING('writing listing file'),
;	0563	LSTMSG2 = CSTRING('listing file SYSUAF.LIS complete'),
;	0564	LSTNOPRV = CSTRING('NOPRIV'),
;	0565	LSTPRV = CSTRING('PRIV'),
;	0566	LSTSTR1 = CSTRING('     OWNER             USERNAME        UIC      ACCOUNT    PRIV ',
;     P 0567		'  PRI  DEFAULT DIR!/'),
;	0568	LSTSTR2 = CSTRING(' !22AD!14AD[!3OW,!3OW]  !10AD!8AC!3UL  !AC!AC'),
;	0569	MDFYERR = CSTRING('unable to update record'),
;	0570	MDFYMSG = CSTRING('user record updated'),
;	0571	NAMETOOBIG = CSTRING('username too long'),
;	0572	NEWMSG10 = CSTRING('unable to open SYSUAF.DAT'),
;	0573	NEWMSG20 = CSTRING(%CHAR(LF),'Do you want to create a new file? '),
;	0574	NOARG = CSTRING('missing argument for option \!AD\'),
;	0575	NOQUOTE = CSTRING('quoted string missing end quote \!AD\'),
;	0576	NOUSERNAME = CSTRING('missing username'),
;	0577	NOMODS = CSTRING('no modifications made'),
;	0578	NOTUNQ = CSTRING('command is not unique'),
;	0579	PRVNOTFND = CSTRING('invalid privilege name \!AD\'),
;	0580	PRVNOTUNQ = CSTRING('privilege name not unique \!AD\'),
;	0581	PRVSTR1 = CSTRING('PRIVILEGES: '),
;	0582	PUTERR = CSTRING('put error'),
;	0583	REMDEF = CSTRING('The default record may not be removed'),
;	0584	REMERR = CSTRING('unable to delete record'),
;	0585	REMMSG = CSTRING('user record removed'),
;	0586	REMSYS = CSTRING('The SYSTEM record may not be removed'),
;	0587	RENERR = CSTRING(' **** ERROR RENAMING TEMPORARY FILE'),
;	0588	SHOWMSG1 = CSTRING('!/USERNAME: !12AD	OWNER: !AD!/',
;     P 0589			'ACCOUNT: !8AD	UIC: [!3OW,!3OW]'),
;	0590	SHOWMSG2 = CSTRING('DIRECTORY: !AC	DEVICE: !AC'),
;	0591	SHOWMSG3 = CSTRING('LOGIN COMMAND FILE: !AC    LOGIN FLAGS: !AC !AC'),
;	0592	SHOWMSG5 = CSTRING('CLI:  !9AD  PRCLM: !7UL  PRIO: !10UL!/',
;     P 0593			'ASTLM: !8UL  BIOLM: !7UL  BYTLM: !9UL'),
;	0594	SHOWMSG6 = CSTRING('DIOLM: !8UL  FILLM: !7UL  TQELM: !9UL'),
;	0595	SHOWMSG7 = CSTRING('WSDEFAULT: !4UL  WSQUOTA: !5UL  PGFLQUOTA: !5UL'),
;	0596	SYSMSG1 = CSTRING('!AS'),
;	0597	SYSMSG2 = CSTRING('ERROR CODE %X''!XL'''),
;	0598	UAEERR = CSTRING('invalid username, username already exists'),
;	0599	UICERR = CSTRING('error in UIC specification \!AD\'),
;	0600	VALTOOBIG = CSTRING('value too large for field \!AD\') ;
;	0601	
;	0602	!
;	0603	! EXTERNAL REFERENCES:

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 2-10
; Digital Equipment Corporation
;
;	0604	!
;	0605	
;	0606	
;	0607	EXTERNAL LITERAL
;	0608	
;	0609	    PRV$_NOTUNQ ,
;	0610	    PRV$_INVNAM ;
;	0611	
;	0612	
;	0613	EXTERNAL ROUTINE
;	0614		LGI$HPWD ,			! hash password routine
;	0615		PRV$SETPRIV ;			! set privilege bits based on
;	0616						! privilege names
;	0617	EXTERNAL
;	0618		PRV$AB_NAMES ;			! address of privilege name table

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 3
; Digital Equipment Corporation
;
;	0619	ROUTINE START =
;	0620	BEGIN
;	0621	
;	0622	!++
;	0623	!
;	0624	! FUNCTIONAL DESCRIPTION:
;	0625	!
;	0626	!	Main program to ACCOUNTS.  Call SETUP to initialize
;	0627	!	all needed files.  Prompt the user for the functions which
;	0628	!	he wants, and call the proper function service routine.
;	0629	!
;	0630	! INPUTS:
;	0631	!
;	0632	!	none
;	0633	!
;	0634	! IMPLICIT INPUTS:
;	0635	!
;	0636	!	none
;	0637	!
;	0638	! OUTPUTS:
;	0639	!
;	0640	!	None
;	0641	!
;	0642	! IMPLICIT OUTPUTS:
;	0643	!
;	0644	!	none
;	0645	!
;	0646	! ROUTINE VALUE:
;	0647	!
;	0648	!	none
;	0649	!
;	0650	! SIDE EFFECTS:
;	0651	!
;	0652	!	none
;	0653	!--
;	0654	
;	0655	LOCAL
;	0656		COMMAND ;
;	0657	
;	0658	MODIFY_FLAG = FALSE ;					! note no modifications
;	0659	
;	0660	!
;	0661	! Set up terminal I/O
;	0662	!
;	0663	
;	0664	$OPEN( FAB=INFAB ) ;
;	0665	$CONNECT( RAB=INRAB ) ;
;	0666	$OPEN( FAB=OUTFAB ) ;
;	0667	$CONNECT( RAB=OUTRAB ) ;
;	0668	
;	0669	SETUP() ;
;	0670	
;	0671	!
;	0672	! Files have been initialized.  Prompt user for command line
;	0673	! and perform requested function.

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 3-1
; Digital Equipment Corporation
;
;	0674	!
;	0675	
;	0676	WHILE TRUE
;	0677	DO
;	0678	    BEGIN
;	0679	
;	0680	    !
;	0681	    ! Input the command line, taking care of continuations.  Pull off
;	0682	    ! the first token, assuming it is the command name, and look it up
;	0683	    ! in the table of commands.
;	0684	    !
;	0685	
;	0686	    GET_CMD_LINE() ;
;	0687	    GETTOKEN( CMDBUF[0] , TOKENPTR , NEXTTOKEN , TOKENLEN , DELIMSTR ) ;
;	0688	    COMMAND = FIND_VAL( .TOKENLEN , .TOKENPTR , COMMAND_TABLE ) ;
;	0689	    SELECTONE .COMMAND OF
;	0690	    SET
;	0691	
;	0692	    [SYMNOTFND]:
;	0693		!
;	0694		! Command was not found.  Report error.
;	0695		!
;	0696	
;	0697		FAOOUT( INVCMD ) ;
;	0698	
;	0699	    [SYMNOTUNQ]:
;	0700		!
;	0701		! A match was found but not enough characters were supplied.
;	0702		!
;	0703	
;	0704		FAOOUT( NOTUNQ ) ;
;	0705	
;	0706	    [OTHERWISE]:
;	0707		!
;	0708		! Value returned was address of the service routine to call.
;	0709		!
;	0710	
;	0711		(.COMMAND)() ;
;	0712	
;	0713	    TES;
;	0714	    END;
;	0715	END;


							    .TITLE  AUTHORIZE
							    .IDENT  \01\

							    .PSECT  $PLIT$,NOWRT,NOEXE,2

					      00000 P.AAA:  .BYTE   10							      ;
					      00001 	    .ASCII  \ \<9>\,/=:\<0><13><10>\)\				      ;
					      0000B	    .BLKB   1
					      0000C P.AAB:  .BYTE   7							      ;
					      0000D 	    .ASCII  \DEFAULT\						      ;
					      00014 P.AAC:  .BYTE   4							      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 3-2
; Digital Equipment Corporation
;
					      00015 	    .ASCII  \USER\						      ;
					      00019	    .BLKB   3
					      0001C P.AAD:  .BYTE   8							      ;
					      0001D 	    .ASCII  \        \						      ;
					      00025	    .BLKB   3
					      00028 P.AAE:  .BYTE   3							      ;
					      00029 	    .ASCII  \DCL\						      ;
					      0002C P.AAF:  .BYTE   1							      ;
					      0002D 	    .ASCII  \ \							      ;
					      0002E	    .BLKB   2
					      00030 P.AAG:  .BYTE   0							      ;
					      00030 	    .BLKB   0							      ;
					      00031	    .BLKB   3
					      00034 P.AAH:  .BYTE   6							      ;
					      00035 	    .ASCII  \[USER]\						      ;
					      0003B	    .BLKB   1
					      0003C P.AAI:  .BYTE   0							      ;
					      0003C 	    .BLKB   0							      ;
					      0003D	    .BLKB   3
					      00040 P.AAJ:  .LONG   35072, 0						      ;
					      00048 P.AAK:  .BYTE   6							      ;
					      00049 	    .ASCII  \SYSTEM\						      ;
					      0004F	    .BLKB   1
					      00050 P.AAL:  .BYTE   7							      ;
					      00051 	    .ASCII  \MANAGER\						      ;
					      00058 P.AAM:  .BYTE   8							      ;
					      00059 	    .ASCII  \        \						      ;
					      00061	    .BLKB   3
					      00064 P.AAN:  .BYTE   3							      ;
					      00065 	    .ASCII  \DCL\						      ;
					      00068 P.AAO:  .BYTE   14							      ;
					      00069 	    .ASCII  \SYSTEM MANAGER\					      ;
					      00077	    .BLKB   1
					      00078 P.AAP:  .BYTE   0							      ;
					      00078 	    .BLKB   0							      ;
					      00079	    .BLKB   3
					      0007C P.AAQ:  .BYTE   8							      ;
					      0007D 	    .ASCII  \[SYSMGR]\						      ;
					      00085	    .BLKB   3
					      00088 P.AAR:  .BYTE   0							      ;
					      00088 	    .BLKB   0							      ;
					      00089	    .BLKB   3
					      0008C P.AAS:  .LONG   -1, -1						      ;
					      00094 P.AAT:  .ASCII  \SYSUAF.TMP\					      ;
					      0009E	    .BLKB   2
					      000A0 P.AAU:  .ASCII  \SYSUAF.DAT\					      ;
					      000AA	    .BLKB   2
					      000AC P.AAV:  .ASCII  \SYS$INPUT\						      ;
					      000B5	    .BLKB   3
					      000B8 P.AAW:  .ASCII  \SYS$OUTPUT\					      ;
					      000C2	    .BLKB   2
					      000C4 P.AAX:  .ASCII  \SYSUAF.LIS\					      ;
					      000CE	    .BLKB   2
					      000D0 P.AAY:  .ADDRESS  ADD						      ;
					      000D4 	    .BYTE   1							      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 3-3
; Digital Equipment Corporation
;
					      000D5 	    .ASCII  <3>\ADD\						      ;
					      000D9 	    .ADDRESS  DEFAULT						      ;
					      000DD 	    .BYTE   1							      ;
					      000DE 	    .ASCII  <7>\DEFAULT\					      ;
					      000E6 	    .ADDRESS  EXIT						      ;
					      000EA 	    .BYTE   1							      ;
					      000EB 	    .ASCII  <4>\EXIT\						      ;
					      000F0 	    .ADDRESS  HELP						      ;
					      000F4 	    .BYTE   1							      ;
					      000F5 	    .ASCII  <4>\HELP\						      ;
					      000FA 	    .ADDRESS  LIST						      ;
					      000FE 	    .BYTE   1							      ;
					      000FF 	    .ASCII  <4>\LIST\						      ;
					      00104 	    .ADDRESS  MODIFY						      ;
					      00108 	    .BYTE   1							      ;
					      00109 	    .ASCII  <6>\MODIFY\						      ;
					      00110 	    .ADDRESS  REMOVE						      ;
					      00114 	    .BYTE   1							      ;
					      00115 	    .ASCII  <6>\REMOVE\						      ;
					      0011C 	    .ADDRESS  SHOWUSER						      ;
					      00120 	    .BYTE   1							      ;
					      00121 	    .ASCII  <4>\SHOW\						      ;
					      00126 	    .BYTE   0							      ;
					      00127 	    .LONG   -1							      ;
					      0012B 	    .LONG   -1							      ;
					      0012F	    .BLKB   1
					      00130 P.AAZ:  .LONG   0							      ;
					      00134 	    .BYTE   2							      ;
					      00135 	    .ASCII  <7>\DISCTLY\					      ;
					      0013D 	    .LONG   1							      ;
					      00141 	    .BYTE   2							      ;
					      00142 	    .ASCII  <6>\DEFCLI\						      ;
					      00149 	    .BYTE   0							      ;
					      0014A 	    .LONG   -1							      ;
					      0014E 	    .LONG   -1							      ;
					      00152	    .BLKB   2
					      00154 P.ABA:  .ASCII  \0123456789ABCDEF\					      ;
					      00164 P.ABB:  .ADDRESS  GETACCOUNT					      ;
					      00168 	    .BYTE   3							      ;
					      00169 	    .ASCII  <7>\ACCOUNT\					      ;
					      00171 	    .ADDRESS  GETASTLM						      ;
					      00175 	    .BYTE   3							      ;
					      00176 	    .ASCII  <5>\ASTLM\						      ;
					      0017C 	    .ADDRESS  GETBIOLM						      ;
					      00180 	    .BYTE   3							      ;
					      00181 	    .ASCII  <5>\BIOLM\						      ;
					      00187 	    .ADDRESS  GETBYTLM						      ;
					      0018B 	    .BYTE   3							      ;
					      0018C 	    .ASCII  <5>\BYTLM\						      ;
					      00192 	    .ADDRESS  GETCLI						      ;
					      00196 	    .BYTE   3							      ;
					      00197 	    .ASCII  <3>\CLI\						      ;
					      0019B 	    .ADDRESS  GETDEVICE						      ;
					      0019F 	    .BYTE   3							      ;
					      001A0 	    .ASCII  <6>\DEVICE\						      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 3-4
; Digital Equipment Corporation
;
					      001A7 	    .ADDRESS  GETDIOLM						      ;
					      001AB 	    .BYTE   3							      ;
					      001AC 	    .ASCII  <5>\DIOLM\						      ;
					      001B2 	    .ADDRESS  GETDIRECTORY					      ;
					      001B6 	    .BYTE   3							      ;
					      001B7 	    .ASCII  <9>\DIRECTORY\					      ;
					      001C1 	    .ADDRESS  GETFILLM						      ;
					      001C5 	    .BYTE   3							      ;
					      001C6 	    .ASCII  <5>\FILLM\						      ;
					      001CC 	    .ADDRESS  GETFLAGS						      ;
					      001D0 	    .BYTE   3							      ;
					      001D1 	    .ASCII  <5>\FLAGS\						      ;
					      001D7 	    .ADDRESS  GETLGICMD						      ;
					      001DB 	    .BYTE   3							      ;
					      001DC 	    .ASCII  <6>\LGICMD\						      ;
					      001E3 	    .ADDRESS  GETOWNER						      ;
					      001E7 	    .BYTE   3							      ;
					      001E8 	    .ASCII  <5>\OWNER\						      ;
					      001EE 	    .ADDRESS  GETPASSWORD					      ;
					      001F2 	    .BYTE   3							      ;
					      001F3 	    .ASCII  <8>\PASSWORD\					      ;
					      001FC 	    .ADDRESS  GETPGFLQUOTA					      ;
					      00200 	    .BYTE   3							      ;
					      00201 	    .ASCII  <9>\PGFLQUOTA\					      ;
					      0020B 	    .ADDRESS  GETPRCCNT						      ;
					      0020F 	    .BYTE   3							      ;
					      00210 	    .ASCII  <5>\PRCLM\						      ;
					      00216 	    .ADDRESS  GETPRIORITY					      ;
					      0021A 	    .BYTE   4							      ;
					      0021B 	    .ASCII  <8>\PRIORITY\					      ;
					      00224 	    .ADDRESS  GETPRIV						      ;
					      00228 	    .BYTE   4							      ;
					      00229 	    .ASCII  <10>\PRIVILEGES\					      ;
					      00234 	    .ADDRESS  GETTQCNT						      ;
					      00238 	    .BYTE   3							      ;
					      00239 	    .ASCII  <5>\TQELM\						      ;
					      0023F 	    .ADDRESS  GETUIC						      ;
					      00243 	    .BYTE   3							      ;
					      00244 	    .ASCII  <3>\UIC\						      ;
					      00248 	    .ADDRESS  GETDFWSCNT					      ;
					      0024C 	    .BYTE   3							      ;
					      0024D 	    .ASCII  <9>\WSDEFAULT\					      ;
					      00257 	    .ADDRESS  GETWSQUOTA					      ;
					      0025B 	    .BYTE   3							      ;
					      0025C 	    .ASCII  <7>\WSQUOTA\					      ;
					      00264 	    .BYTE   0							      ;
					      00265 	    .LONG   -1							      ;
					      00269 	    .LONG   -1							      ;
					      0026D	    .BLKB   3
					      00270 P.ABC:  .BYTE   5							      ;
					      00271 	    .ASCII  <10>\UAF>\						      ;
					      00276	    .BLKB   2
					      00278 P.ABD:  .BYTE   2							      ;
					      00279 	    .ASCII  <10>\_\						      ;
					      0027B	    .BLKB   1

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 3-5
; Digital Equipment Corporation
;
					      0027C P.ABE:  .BYTE   25							      ;
					      0027D 	    .ASCII  \unable to add user record\				      ;
					      00296	    .BLKB   2
					      00298 P.ABF:  .BYTE   30							      ;
					      00299 	    .ASCII  \user record successfully added\			      ;
					      002B7	    .BLKB   1
					      002B8 P.ABG:  .BYTE   29							      ;
					      002B9 	    .ASCII  \username does not exist \<92>\!AD\<92>		      ;
					      002D6	    .BLKB   2
					      002D8 P.ABH:  .BYTE   34							      ;
					      002D9 	    .ASCII  \error in value specification \<92>\!AD\<92>	      ;
					      002FB	    .BLKB   1
					      002FC P.ABI:  .BYTE   13							      ;
					      002FD 	    .ASCII  \connect error\					      ;
					      0030A	    .BLKB   2
					      0030C P.ABJ:  .BYTE   30							      ;
					      0030D 	    .ASCII  \unable to create temporary UAF\			      ;
					      0032B	    .BLKB   1
					      0032C P.ABK:  .BYTE   11							      ;
					      0032D 	    .ASCII  \[!3OW,!3OW]\					      ;
					      00338 P.ABL:  .BYTE   21							      ;
					      00339 	    .ASCII  \UAF updates completed\				      ;
					      0034E	    .BLKB   2
					      00350 P.ABM:  .BYTE   9							      ;
					      00351 	    .ASCII  \get error\						      ;
					      0035A	    .BLKB   2
					      0035C P.ABN:  .BYTE   62							      ;
					      0035D 	    .ASCII  \!/Commands are:!/!/\<9>\ADD username [/options]\<9>      ;
					      00389 	    .ASCII  \!! define new user\				      ;
					      0039B	    .BLKB   1
					      0039C P.ABO:  .BYTE   97							      ;
					      0039D 	    .ASCII  <9>\DEFAULT /options\<9>\!! change default record!\       ;
					      003C8 	    .ASCII  \/\<9>\EXIT\<9><9><9>\!! exit program!/\<9>		      ;
					      003E3 	    .ASCII  \HELP\<9><9><9>\!! type this message\		      ;
					      003FE	    .BLKB   2
					      00400 P.ABP:  .BYTE   96							      ;
					      00401 	    .ASCII  <9>\LIST\<9><9><9>\!! produce ascii file of \	      ;
					      00422 	    .ASCII  \usernames!/\<9>\MODIFY username /options  !! update \    ;
					      00452 	    .ASCII  \a user's record\					      ;
					      00461	    .BLKB   3
					      00464 P.ABQ:  .BYTE   95							      ;
					      00465 	    .ASCII  <9>\REMOVE username\<9><9>\!! delete a user's r\	      ;
					      0048B 	    .ASCII  \ecord!/\<9>\SHOW username\<9><9>\!! display val\	      ;
					      004B0 	    .ASCII  \ues in a user record\				      ;
					      004C4 P.ABR:  .BYTE   115							      ;
					      004C5 	    .ASCII  \!/Options are:!/!/\<9>\/ACCOUNT , /ASTLM , /BIOLM , \    ;
					      004F5 	    .ASCII  \/BYTLM , /CLI ,!/\<9>\/DEVICE , /DIOLM , /DIRECTORY \    ;
					      00525 	    .ASCII  \, /FILLM , /FLAGS ,\				      ;
					      00538 P.ABS:  .BYTE   123							      ;
					      00539 	    .ASCII  <9>\/LGICMD , /OWNER , /PASSWORD , /PGFLQUOTA , /PRC\     ;
					      0056A 	    .ASCII  \LM ,!/\<9>\/PRIORITY , /PRIVILEGES , /TQELM , /UIC ,\    ;
					      0059A 	    .ASCII  \ /WSDEFAULT ,!/\<9>\/WSQUOTA!/\			      ;
					      005B4 P.ABT:  .BYTE   15							      ;
					      005B5 	    .ASCII  \invalid command\					      ;
					      005C4 P.ABU:  .BYTE   47							      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 3-6
; Digital Equipment Corporation
;
					      005C5 	    .ASCII  \device name too long to add trailing ":"!/\<92>\!AD\<92> ;
					      005F4 P.ABV:  .BYTE   16							      ;
					      005F5 	    .ASCII  \invalid response\					      ;
					      00605	    .BLKB   3
					      00608 P.ABW:  .BYTE   31							      ;
					      00609 	    .ASCII  \string too long for field \<92>\!AD\<92>		      ;
					      00628 P.ABX:  .BYTE   25							      ;
					      00629 	    .ASCII  \invalid option name \<92>\!AD\<92>			      ;
					      00642	    .BLKB   2
					      00644 P.ABY:  .BYTE   28							      ;
					      00645 	    .ASCII  \option name not unique \<92>\!AD\<92>		      ;
					      00661	    .BLKB   3
					      00664 P.ABZ:  .BYTE   27							      ;
					      00665 	    .ASCII  \error creating listing file\			      ;
					      00680 P.ACA:  .BYTE   20							      ;
					      00681 	    .ASCII  \writing listing file\				      ;
					      00695	    .BLKB   3
					      00698 P.ACB:  .BYTE   32							      ;
					      00699 	    .ASCII  \listing file SYSUAF.LIS complete\			      ;
					      006B9	    .BLKB   3
					      006BC P.ACC:  .BYTE   6							      ;
					      006BD 	    .ASCII  \NOPRIV\						      ;
					      006C3	    .BLKB   1
					      006C4 P.ACD:  .BYTE   4							      ;
					      006C5 	    .ASCII  \PRIV\						      ;
					      006C9	    .BLKB   3
					      006CC P.ACE:  .BYTE   84							      ;
					      006CD 	    .ASCII  \     OWNER             USERNAME        UIC      ACCOUN\  ;
					      00703 	    .ASCII  \T    PRIV   PRI  DEFAULT DIR!/\			      ;
					      00721	    .BLKB   3
					      00724 P.ACF:  .BYTE   45							      ;
					      00725 	    .ASCII  \ !22AD!14AD[!3OW,!3OW]  !10AD!8AC!3UL  !AC!AC\	      ;
					      00752	    .BLKB   2
					      00754 P.ACG:  .BYTE   23							      ;
					      00755 	    .ASCII  \unable to update record\				      ;
					      0076C P.ACH:  .BYTE   19							      ;
					      0076D 	    .ASCII  \user record updated\				      ;
					      00780 P.ACI:  .BYTE   17							      ;
					      00781 	    .ASCII  \username too long\					      ;
					      00792	    .BLKB   2
					      00794 P.ACJ:  .BYTE   25							      ;
					      00795 	    .ASCII  \unable to open SYSUAF.DAT\				      ;
					      007AE	    .BLKB   2
					      007B0 P.ACK:  .BYTE   35							      ;
					      007B1 	    .ASCII  <10>\Do you want to create a new file? \		      ;
					      007D4 P.ACL:  .BYTE   33							      ;
					      007D5 	    .ASCII  \missing argument for option \<92>\!AD\<92>		      ;
					      007F6	    .BLKB   2
					      007F8 P.ACM:  .BYTE   37							      ;
					      007F9 	    .ASCII  \quoted string missing end quote \<92>\!AD\<92>	      ;
					      0081E	    .BLKB   2
					      00820 P.ACN:  .BYTE   16							      ;
					      00821 	    .ASCII  \missing username\					      ;
					      00831	    .BLKB   3
					      00834 P.ACO:  .BYTE   21							      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 3-7
; Digital Equipment Corporation
;
					      00835 	    .ASCII  \no modifications made\				      ;
					      0084A	    .BLKB   2
					      0084C P.ACP:  .BYTE   21							      ;
					      0084D 	    .ASCII  \command is not unique\				      ;
					      00862	    .BLKB   2
					      00864 P.ACQ:  .BYTE   28							      ;
					      00865 	    .ASCII  \invalid privilege name \<92>\!AD\<92>		      ;
					      00881	    .BLKB   3
					      00884 P.ACR:  .BYTE   31							      ;
					      00885 	    .ASCII  \privilege name not unique \<92>\!AD\<92>		      ;
					      008A4 P.ACS:  .BYTE   12							      ;
					      008A5 	    .ASCII  \PRIVILEGES: \					      ;
					      008B1	    .BLKB   3
					      008B4 P.ACT:  .BYTE   9							      ;
					      008B5 	    .ASCII  \put error\						      ;
					      008BE	    .BLKB   2
					      008C0 P.ACU:  .BYTE   37							      ;
					      008C1 	    .ASCII  \The default record may not be removed\		      ;
					      008E6	    .BLKB   2
					      008E8 P.ACV:  .BYTE   23							      ;
					      008E9 	    .ASCII  \unable to delete record\				      ;
					      00900 P.ACW:  .BYTE   19							      ;
					      00901 	    .ASCII  \user record removed\				      ;
					      00914 P.ACX:  .BYTE   36							      ;
					      00915 	    .ASCII  \The SYSTEM record may not be removed\		      ;
					      00939	    .BLKB   3
					      0093C P.ACY:  .BYTE   35							      ;
					      0093D 	    .ASCII  \ **** ERROR RENAMING TEMPORARY FILE\		      ;
					      00960 P.ACZ:  .BYTE   60							      ;
					      00961 	    .ASCII  \!/USERNAME: !12AD\<9>\OWNER: !AD!/ACCOUNT: !8AD\<9>      ;
					      0098D 	    .ASCII  \UIC: [!3OW,!3OW]\					      ;
					      0099D	    .BLKB   3
					      009A0 P.ADA:  .BYTE   26							      ;
					      009A1 	    .ASCII  \DIRECTORY: !AC\<9>\DEVICE: !AC\			      ;
					      009BB	    .BLKB   1
					      009BC P.ADB:  .BYTE   47							      ;
					      009BD 	    .ASCII  \LOGIN COMMAND FILE: !AC    LOGIN FLAGS: !AC !AC\	      ;
					      009EC P.ADC:  .BYTE   75							      ;
					      009ED 	    .ASCII  \CLI:  !9AD  PRCLM: !7UL  PRIO: !10UL!/ASTLM: !8UL  BIO\  ;
					      00A23 	    .ASCII  \LM: !7UL  BYTLM: !9UL\				      ;
					      00A38 P.ADD:  .BYTE   37							      ;
					      00A39 	    .ASCII  \DIOLM: !8UL  FILLM: !7UL  TQELM: !9UL\		      ;
					      00A5E	    .BLKB   2
					      00A60 P.ADE:  .BYTE   47							      ;
					      00A61 	    .ASCII  \WSDEFAULT: !4UL  WSQUOTA: !5UL  PGFLQUOTA: !5UL\	      ;
					      00A90 P.ADF:  .BYTE   3							      ;
					      00A91 	    .ASCII  \!AS\						      ;
					      00A94 P.ADG:  .BYTE   18							      ;
					      00A95 	    .ASCII  \ERROR CODE %X'!XL'\				      ;
					      00AA7	    .BLKB   1
					      00AA8 P.ADH:  .BYTE   41							      ;
					      00AA9 	    .ASCII  \invalid username, username already exists\		      ;
					      00AD2	    .BLKB   2
					      00AD4 P.ADI:  .BYTE   32							      ;
					      00AD5 	    .ASCII  \error in UIC specification \<92>\!AD\<92>		      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 3-8
; Digital Equipment Corporation
;
					      00AF5	    .BLKB   3
					      00AF8 P.ADJ:  .BYTE   31							      ;
					      00AF9 	    .ASCII  \value too large for field \<92>\!AD\<92>		      ;

							    .PSECT  $OWN$,NOEXE,2

					      00000 CMDBUF: .BLKB   1024
					      00400 DEFAULT_RECORD:
							    .BLKB   184
					      004B8 INSIZE: .BLKB   4
					      004BC MODIFY_FLAG:
							    .BLKB   4
					      004C0 NEXTTOKEN:
							    .BLKB   4
					      004C4 OPTIONPTR:
							    .BLKB   4
					      004C8 OPTIONEND:
							    .BLKB   4
					      004CC RECBUF: .BLKB   184
					      00584 RMSERR: .BLKB   4
					      00588 TOKENLEN:
							    .BLKB   4
					      0058C TOKENPTR:
							    .BLKB   4
					      00590 TTCHAN: .BLKB   2
					      00592	    .BLKB   2
					      00594 TMPXAB: .BYTE   19							      ;
					      00595 	    .BYTE   16							      ;
					      00596 	    .WORD   0							      ;
					      00598 	    .LONG   0							      ;
					      0059C 	    .WORD   -2048						      ;
					      0059E 	    .WORD   0							      ;
					      005A0 	    .WORD   0, 0						      ;
					      005A4 TMPFAB: .BYTE   3							      ;
					      005A5 	    .BYTE   80							      ;
					      005A6 	    .WORD   0							      ;
					      005A8 	    .LONG   0							      ;
					      005AC 	    .LONG   0							      ;
					      005B0 	    .LONG   0							      ;
					      005B4 	    .LONG   10							      ;
					      005B8 	    .WORD   10							      ;
					      005BA 	    .BYTE   15							      ;
					      005BB 	    .BYTE   32							      ;
					      005BC 	    .LONG   0							      ;
					      005C0 	    .BYTE   0							      ;
					      005C1 	    .BYTE   0							      ;
					      005C2 	    .BYTE   0							      ;
					      005C3 	    .BYTE   1							      ;
					      005C4 	    .LONG   0							      ;
					      005C8 	    .ADDRESS  TMPXAB						      ;
					      005CC 	    .LONG   0							      ;
					      005D0 	    .ADDRESS  P.AAT						      ;
					      005D4 	    .LONG   0							      ;
					      005D8 	    .BYTE   10							      ;
					      005D9 	    .BYTE   0							      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 3-9
; Digital Equipment Corporation
;
					      005DA 	    .WORD   184							      ;
					      005DC 	    .LONG   0							      ;
					      005E0 	    .WORD   0							      ;
					      005E2 	    .BYTE   0							      ;
					      005E3 	    .BYTE   0							      ;
					      005E4 	    .LONG   0							      ;
					      005E8 	    .LONG   0							      ;
					      005EC 	    .LONG   0, 0						      ;
					      005F4 TMPRAB: .BYTE   1							      ;
					      005F5 	    .BYTE   68							      ;
					      005F6 	    .WORD   0							      ;
					      005F8 	    .LONG   0							      ;
					      005FC 	    .LONG   0							      ;
					      00600 	    .LONG   0							      ;
					      00604 	    .WORD   0, 0, 0						      ;
					      0060A 	    .WORD   0							      ;
					      0060C 	    .LONG   0							      ;
					      00610 	    .WORD   0							      ;
					      00612 	    .BYTE   0							      ;
					      00613 	    .BYTE   0							      ;
					      00614 	    .WORD   184							      ;
					      00616 	    .WORD   184							      ;
					      00618 	    .ADDRESS  RECBUF						      ;
					      0061C 	    .ADDRESS  RECBUF						      ;
					      00620 	    .LONG   0							      ;
					      00624 	    .LONG   0							      ;
					      00628 	    .BYTE   0							      ;
					      00629 	    .BYTE   0							      ;
					      0062A 	    .BYTE   0							      ;
					      0062B 	    .BYTE   10							      ;
					      0062C 	    .LONG   0							      ;
					      00630 	    .ADDRESS  TMPFAB						      ;
					      00634 	    .LONG   0							      ;
					      00638 UAFFAB: .BYTE   3							      ;
					      00639 	    .BYTE   80							      ;
					      0063A 	    .WORD   0							      ;
					      0063C 	    .LONG   0							      ;
					      00640 	    .LONG   0							      ;
					      00644 	    .LONG   0							      ;
					      00648 	    .LONG   0							      ;
					      0064C 	    .WORD   0							      ;
					      0064E 	    .BYTE   2							      ;
					      0064F 	    .BYTE   0							      ;
					      00650 	    .LONG   0							      ;
					      00654 	    .BYTE   0							      ;
					      00655 	    .BYTE   0							      ;
					      00656 	    .BYTE   0							      ;
					      00657 	    .BYTE   2							      ;
					      00658 	    .LONG   0							      ;
					      0065C 	    .LONG   0							      ;
					      00660 	    .LONG   0							      ;
					      00664 	    .ADDRESS  P.AAU						      ;
					      00668 	    .LONG   0							      ;
					      0066C 	    .BYTE   10							      ;
					      0066D 	    .BYTE   0							      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 3-10
; Digital Equipment Corporation
;
					      0066E 	    .WORD   0							      ;
					      00670 	    .LONG   0							      ;
					      00674 	    .WORD   0							      ;
					      00676 	    .BYTE   0							      ;
					      00677 	    .BYTE   0							      ;
					      00678 	    .LONG   0							      ;
					      0067C 	    .LONG   0							      ;
					      00680 	    .LONG   0, 0						      ;
					      00688 UAFRAB: .BYTE   1							      ;
					      00689 	    .BYTE   68							      ;
					      0068A 	    .WORD   0							      ;
					      0068C 	    .LONG   0							      ;
					      00690 	    .LONG   0							      ;
					      00694 	    .LONG   0							      ;
					      00698 	    .WORD   0, 0, 0						      ;
					      0069E 	    .WORD   0							      ;
					      006A0 	    .LONG   0							      ;
					      006A4 	    .WORD   0							      ;
					      006A6 	    .BYTE   0							      ;
					      006A7 	    .BYTE   0							      ;
					      006A8 	    .WORD   184							      ;
					      006AA 	    .WORD   0							      ;
					      006AC 	    .ADDRESS  RECBUF						      ;
					      006B0 	    .LONG   0							      ;
					      006B4 	    .LONG   0							      ;
					      006B8 	    .LONG   0							      ;
					      006BC 	    .BYTE   0							      ;
					      006BD 	    .BYTE   0							      ;
					      006BE 	    .BYTE   0							      ;
					      006BF 	    .BYTE   10							      ;
					      006C0 	    .LONG   0							      ;
					      006C4 	    .ADDRESS  UAFFAB						      ;
					      006C8 	    .LONG   0							      ;
					      006CC INFAB:  .BYTE   3							      ;
					      006CD 	    .BYTE   80							      ;
					      006CE 	    .WORD   0							      ;
					      006D0 	    .LONG   0							      ;
					      006D4 	    .LONG   0							      ;
					      006D8 	    .LONG   0							      ;
					      006DC 	    .LONG   0							      ;
					      006E0 	    .WORD   0							      ;
					      006E2 	    .BYTE   3							      ;
					      006E3 	    .BYTE   0							      ;
					      006E4 	    .LONG   0							      ;
					      006E8 	    .BYTE   0							      ;
					      006E9 	    .BYTE   0							      ;
					      006EA 	    .BYTE   2							      ;
					      006EB 	    .BYTE   2							      ;
					      006EC 	    .LONG   0							      ;
					      006F0 	    .LONG   0							      ;
					      006F4 	    .LONG   0							      ;
					      006F8 	    .ADDRESS  P.AAV						      ;
					      006FC 	    .LONG   0							      ;
					      00700 	    .BYTE   9							      ;
					      00701 	    .BYTE   0							      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 3-11
; Digital Equipment Corporation
;
					      00702 	    .WORD   0							      ;
					      00704 	    .LONG   0							      ;
					      00708 	    .WORD   0							      ;
					      0070A 	    .BYTE   0							      ;
					      0070B 	    .BYTE   0							      ;
					      0070C 	    .LONG   0							      ;
					      00710 	    .LONG   0							      ;
					      00714 	    .LONG   0, 0						      ;
					      0071C INRAB:  .BYTE   1							      ;
					      0071D 	    .BYTE   68							      ;
					      0071E 	    .WORD   0							      ;
					      00720 	    .LONG   1140850688						      ;
					      00724 	    .LONG   0							      ;
					      00728 	    .LONG   0							      ;
					      0072C 	    .WORD   0, 0, 0						      ;
					      00732 	    .WORD   0							      ;
					      00734 	    .LONG   0							      ;
					      00738 	    .WORD   0							      ;
					      0073A 	    .BYTE   0							      ;
					      0073B 	    .BYTE   0							      ;
					      0073C 	    .WORD   0							      ;
					      0073E 	    .WORD   0							      ;
					      00740 	    .LONG   0							      ;
					      00744 	    .LONG   0							      ;
					      00748 	    .LONG   0							      ;
					      0074C 	    .LONG   0							      ;
					      00750 	    .BYTE   0							      ;
					      00751 	    .BYTE   0							      ;
					      00752 	    .BYTE   0							      ;
					      00753 	    .BYTE   0							      ;
					      00754 	    .LONG   0							      ;
					      00758 	    .ADDRESS  INFAB						      ;
					      0075C 	    .LONG   0							      ;
					      00760 OUTFAB: .BYTE   3							      ;
					      00761 	    .BYTE   80							      ;
					      00762 	    .WORD   0							      ;
					      00764 	    .LONG   0							      ;
					      00768 	    .LONG   0							      ;
					      0076C 	    .LONG   0							      ;
					      00770 	    .LONG   0							      ;
					      00774 	    .WORD   0							      ;
					      00776 	    .BYTE   1							      ;
					      00777 	    .BYTE   0							      ;
					      00778 	    .LONG   0							      ;
					      0077C 	    .BYTE   0							      ;
					      0077D 	    .BYTE   0							      ;
					      0077E 	    .BYTE   2							      ;
					      0077F 	    .BYTE   2							      ;
					      00780 	    .LONG   0							      ;
					      00784 	    .LONG   0							      ;
					      00788 	    .LONG   0							      ;
					      0078C 	    .ADDRESS  P.AAW						      ;
					      00790 	    .LONG   0							      ;
					      00794 	    .BYTE   10							      ;
					      00795 	    .BYTE   0							      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 3-12
; Digital Equipment Corporation
;
					      00796 	    .WORD   0							      ;
					      00798 	    .LONG   0							      ;
					      0079C 	    .WORD   0							      ;
					      0079E 	    .BYTE   0							      ;
					      0079F 	    .BYTE   0							      ;
					      007A0 	    .LONG   0							      ;
					      007A4 	    .LONG   0							      ;
					      007A8 	    .LONG   0, 0						      ;
					      007B0 OUTRAB: .BYTE   1							      ;
					      007B1 	    .BYTE   68							      ;
					      007B2 	    .WORD   0							      ;
					      007B4 	    .LONG   0							      ;
					      007B8 	    .LONG   0							      ;
					      007BC 	    .LONG   0							      ;
					      007C0 	    .WORD   0, 0, 0						      ;
					      007C6 	    .WORD   0							      ;
					      007C8 	    .LONG   0							      ;
					      007CC 	    .WORD   0							      ;
					      007CE 	    .BYTE   0							      ;
					      007CF 	    .BYTE   0							      ;
					      007D0 	    .WORD   0							      ;
					      007D2 	    .WORD   0							      ;
					      007D4 	    .LONG   0							      ;
					      007D8 	    .LONG   0							      ;
					      007DC 	    .LONG   0							      ;
					      007E0 	    .LONG   0							      ;
					      007E4 	    .BYTE   0							      ;
					      007E5 	    .BYTE   0							      ;
					      007E6 	    .BYTE   0							      ;
					      007E7 	    .BYTE   0							      ;
					      007E8 	    .LONG   0							      ;
					      007EC 	    .ADDRESS  OUTFAB						      ;
					      007F0 	    .LONG   0							      ;
					      007F4 LSTFAB: .BYTE   3							      ;
					      007F5 	    .BYTE   80							      ;
					      007F6 	    .WORD   0							      ;
					      007F8 	    .LONG   0							      ;
					      007FC 	    .LONG   0							      ;
					      00800 	    .LONG   0							      ;
					      00804 	    .LONG   0							      ;
					      00808 	    .WORD   0							      ;
					      0080A 	    .BYTE   1							      ;
					      0080B 	    .BYTE   32							      ;
					      0080C 	    .LONG   0							      ;
					      00810 	    .BYTE   0							      ;
					      00811 	    .BYTE   0							      ;
					      00812 	    .BYTE   2							      ;
					      00813 	    .BYTE   1							      ;
					      00814 	    .LONG   0							      ;
					      00818 	    .LONG   0							      ;
					      0081C 	    .LONG   0							      ;
					      00820 	    .ADDRESS  P.AAX						      ;
					      00824 	    .LONG   0							      ;
					      00828 	    .BYTE   10							      ;
					      00829 	    .BYTE   0							      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 3-13
; Digital Equipment Corporation
;
					      0082A 	    .WORD   130							      ;
					      0082C 	    .LONG   0							      ;
					      00830 	    .WORD   0							      ;
					      00832 	    .BYTE   0							      ;
					      00833 	    .BYTE   0							      ;
					      00834 	    .LONG   0							      ;
					      00838 	    .LONG   0							      ;
					      0083C 	    .LONG   0, 0						      ;
					      00844 LSTRAB: .BYTE   1							      ;
					      00845 	    .BYTE   68							      ;
					      00846 	    .WORD   0							      ;
					      00848 	    .LONG   0							      ;
					      0084C 	    .LONG   0							      ;
					      00850 	    .LONG   0							      ;
					      00854 	    .WORD   0, 0, 0						      ;
					      0085A 	    .WORD   0							      ;
					      0085C 	    .LONG   0							      ;
					      00860 	    .WORD   0							      ;
					      00862 	    .BYTE   0							      ;
					      00863 	    .BYTE   0							      ;
					      00864 	    .WORD   0							      ;
					      00866 	    .WORD   0							      ;
					      00868 	    .LONG   0							      ;
					      0086C 	    .LONG   0							      ;
					      00870 	    .LONG   0							      ;
					      00874 	    .LONG   0							      ;
					      00878 	    .BYTE   0							      ;
					      00879 	    .BYTE   0							      ;
					      0087A 	    .BYTE   0							      ;
					      0087B 	    .BYTE   0							      ;
					      0087C 	    .LONG   0							      ;
					      00880 	    .ADDRESS  LSTFAB						      ;
					      00884 	    .LONG   0							      ;

						    DELIMSTR=		P.AAA
						    DEFUSER=		P.AAB
						    DEFPASS=		P.AAC
						    DEFACT=		P.AAD
						    DEFCLI=		P.AAE
						    DEFOWNER=		P.AAF
						    DEFLGICMD=		P.AAG
						    DEFGRP=		128
						    DEFMEM=		128
						    DEFDIR=		P.AAH
						    DEFDEV=		P.AAI
						    DEFBIOLM=		6
						    DEFBYTLM=		4096
						    DEFDIOLM=		6
						    DEFFILLM=		20
						    DEFFLAGS=		0
						    DEFTQCNT=		10
						    DEFPRCCNT=		8
						    DEFPRI=		4
						    DEFWSQUOTA=		200
						    DEFDFWSCNT=		150

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 3-14
; Digital Equipment Corporation
;
						    DEFCPUTIM=		0
						    DEFASTLM=		10
						    DEFPGFLQUOTA=	40
						    DEFPRIV=		P.AAJ
						    SYSUSER=		P.AAK
						    SYSPASS=		P.AAL
						    SYSACT=		P.AAM
						    SYSCLI=		P.AAN
						    SYSOWNER=		P.AAO
						    SYSLGICMD=		P.AAP
						    SYSGRP=		1
						    SYSMEM=		4
						    SYSDIR=		P.AAQ
						    SYSDEV=		P.AAR
						    SYSBIOLM=		6
						    SYSBYTLM=		20480
						    SYSDIOLM=		12
						    SYSFILLM=		20
						    SYSFLAGS=		0
						    SYSTQCNT=		20
						    SYSPRCCNT=		10
						    SYSPRI=		4
						    SYSWSQUOTA=		1024
						    SYSDFWSCNT=		150
						    SYSCPUTIM=		0
						    SYSASTLM=		20
						    SYSPGFLQUOTA=	40
						    SYSPRIV=		P.AAS
						    COMMAND_TABLE=	P.AAY
						    FLAG_TABLE=		P.AAZ
						    NUMBERS=		P.ABA
						    OPTION_TABLE=	P.ABB
						    ACCPRMPT=		P.ABC
						    ACCPRMPT2=		P.ABD
						    ADDERR=		P.ABE
						    ADDMSG=		P.ABF
						    BADUSR=		P.ABG
						    BADVALUE=		P.ABH
						    CONERR=		P.ABI
						    CREERR=		P.ABJ
						    DIRCVTSTR=		P.ABK
						    DONEMSG=		P.ABL
						    GETERR=		P.ABM
						    HELPMSG1=		P.ABN
						    HELPMSG2=		P.ABO
						    HELPMSG3=		P.ABP
						    HELPMSG4=		P.ABQ
						    HELPMSG5=		P.ABR
						    HELPMSG6=		P.ABS
						    INVCMD=		P.ABT
						    INVDEV=		P.ABU
						    INVRSP=		P.ABV
						    INVSTR=		P.ABW
						    KEYNOTFND=		P.ABX
						    KEYNOTUNQ=		P.ABY

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 3-15
; Digital Equipment Corporation
;
						    LSTERR=		P.ABZ
						    LSTMSG1=		P.ACA
						    LSTMSG2=		P.ACB
						    LSTNOPRV=		P.ACC
						    LSTPRV=		P.ACD
						    LSTSTR1=		P.ACE
						    LSTSTR2=		P.ACF
						    MDFYERR=		P.ACG
						    MDFYMSG=		P.ACH
						    NAMETOOBIG=		P.ACI
						    NEWMSG10=		P.ACJ
						    NEWMSG20=		P.ACK
						    NOARG=		P.ACL
						    NOQUOTE=		P.ACM
						    NOUSERNAME=		P.ACN
						    NOMODS=		P.ACO
						    NOTUNQ=		P.ACP
						    PRVNOTFND=		P.ACQ
						    PRVNOTUNQ=		P.ACR
						    PRVSTR1=		P.ACS
						    PUTERR=		P.ACT
						    REMDEF=		P.ACU
						    REMERR=		P.ACV
						    REMMSG=		P.ACW
						    REMSYS=		P.ACX
						    RENERR=		P.ACY
						    SHOWMSG1=		P.ACZ
						    SHOWMSG2=		P.ADA
						    SHOWMSG3=		P.ADB
						    SHOWMSG5=		P.ADC
						    SHOWMSG6=		P.ADD
						    SHOWMSG7=		P.ADE
						    SYSMSG1=		P.ADF
						    SYSMSG2=		P.ADG
						    UAEERR=		P.ADH
						    UICERR=		P.ADI
						    VALTOOBIG=		P.ADJ
							    .GLOBL  PRV$_NOTUNQ, PRV$_INVNAM, LGI$HPWD, PRV$SETPRIV
							    .GLOBL  PRV$AB_NAMES, SYS$OPEN, SYS$CONNECT

							    .PSECT  $CODE$,NOWRT,2

					 0C04 00000 START:  .WORD   Save R2,R10,R11					      ; 0619
		         5A 00000000G  9F  9E 00002 	    MOVAB   @#SYS$CONNECT, R10					      ;
		         5B 00000000G  9F  9E 00009 	    MOVAB   @#SYS$OPEN, R11					      ;
				0000'  CF  D4 00010 	    CLRL    MODIFY_FLAG						      ; 0658
				0000'  CF  9F 00014 	    PUSHAB  INFAB						      ; 0664
		         6B	       01  FB 00018 	    CALLS   #1, SYS$OPEN					      ;
				0000'  CF  9F 0001B 	    PUSHAB  INRAB						      ; 0665
		         6A	       01  FB 0001F 	    CALLS   #1, SYS$CONNECT					      ;
				0000'  CF  9F 00022 	    PUSHAB  OUTFAB						      ; 0666
		         6B	       01  FB 00026 	    CALLS   #1, SYS$OPEN					      ;
				0000'  CF  9F 00029 	    PUSHAB  OUTRAB						      ; 0667
		         6A	       01  FB 0002D 	    CALLS   #1, SYS$CONNECT					      ;
		  0000V  CF	       00  FB 00030 	    CALLS   #0, SETUP						      ; 0669

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 3-16
; Digital Equipment Corporation
;
		  0000V  CF	       00  FB 00035 1$:     CALLS   #0, GET_CMD_LINE					      ; 0686
				0000'  CF  9F 0003A 	    PUSHAB  DELIMSTR						      ; 0619
				0000'  CF  9F 0003E 	    PUSHAB  TOKENLEN						      ; 0687
				0000'  CF  9F 00042 	    PUSHAB  NEXTTOKEN						      ;
				0000'  CF  9F 00046 	    PUSHAB  TOKENPTR						      ;
				0000'  CF  9F 0004A 	    PUSHAB  CMDBUF						      ;
		  0000V  CF	       05  FB 0004E 	    CALLS   #5, GETTOKEN					      ;
				0000'  CF  9F 00053 	    PUSHAB  COMMAND_TABLE					      ; 0619
		         7E	0000'  CF  7D 00057 	    MOVQ    TOKENLEN, -(SP)					      ; 0688
		  0000V  CF	       03  FB 0005C 	    CALLS   #3, FIND_VAL					      ;
		         52	       50  D0 00061 	    MOVL    R0, COMMAND						      ;
	      FFFFFFFE   8F	       52  D1 00064 	    CMPL    COMMAND, #-2					      ; 0689
				       06  12 0006B 	    BNEQ    2$							      ;
				0000'  CF  9F 0006D 	    PUSHAB  INVCMD						      ; 0619
				       0D  11 00071 	    BRB     3$							      ; 0697
	      FFFFFFFC   8F	       52  D1 00073 2$:     CMPL    COMMAND, #-4					      ; 0689
				       0B  12 0007A 	    BNEQ    4$							      ;
				0000'  CF  9F 0007C 	    PUSHAB  NOTUNQ						      ; 0619
		  0000V  CF	       01  FB 00080 3$:     CALLS   #1, FAOOUT						      ; 0704
				       AE  11 00085 	    BRB     1$							      ; 0689
		         62	       00  FB 00087 4$:     CALLS   #0, (COMMAND)					      ; 0711
				       A9  11 0008A 	    BRB     1$							      ; 0676

; Routine Size:  140 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 4
; Digital Equipment Corporation
;
;	0716	ROUTINE GET_CMD_LINE =
;	0717	BEGIN
;	0718	
;	0719	!++
;	0720	!
;	0721	! FUNCTIONAL DESCRIPTION:
;	0722	!
;	0723	!	This routine reads in the command line from the user, 
;	0724	!	reading additional lines if continuation is specified by
;	0725	!	a '-' as the last character on the input line.
;	0726	!	A zero byte is inserted following the last input character read.
;	0727	!
;	0728	! INPUTS:
;	0729	!
;	0730	!	none
;	0731	!
;	0732	! IMPLICIT INPUTS:
;	0733	!
;	0734	!	CMDBUF - buffer to receive the user's command line
;	0735	!	CMDBUFLEN - literal length of CMDBUF
;	0736	!
;	0737	! OUTPUTS:
;	0738	!
;	0739	!	none
;	0740	!
;	0741	! IMPLICIT OUTPUTS:
;	0742	!
;	0743	!	CMDBUF is filled with command line
;	0744	!
;	0745	! ROUTINE VALUE:
;	0746	!
;	0747	!	none
;	0748	!
;	0749	! SIDE EFFECTS:
;	0750	!
;	0751	!	none
;	0752	!--
;	0753	
;	0754	LOCAL
;	0755		PTR,					! index into CMDBUF
;	0756		BUFLEN ;				! remaining buffer length
;	0757	
;	0758	!
;	0759	! Prompt with normal prompt string until some input is supplied.
;	0760	!
;	0761	
;	0762	DO
;	0763	    ASK( ACCPRMPT , CMDBUF[0] , CMDBUFLEN )
;	0764	UNTIL
;	0765	    .INSIZE NEQ 0 ;
;	0766	
;	0767	!
;	0768	! Now that line has been read, continue reading until
;	0769	! last character is not a '-'.
;	0770	!

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 4-1
; Digital Equipment Corporation
;
;	0771	
;	0772	PTR = .INSIZE - 1 ;				! index to last character read
;	0773	BUFLEN = CMDBUFLEN ;				! initial buffer size
;	0774	
;	0775	WHILE
;	0776	    .CMDBUF[.PTR] EQL '-'
;	0777	DO
;	0778	    BEGIN
;	0779	
;	0780	    !
;	0781	    ! Read starting at the position of the '-'. Then adjust the
;	0782	    ! index and remaining length to point to the last character
;	0783	    ! of the next input.
;	0784	    !
;	0785	
;	0786	    BUFLEN = .BUFLEN - ( .INSIZE + 1 ) ;
;	0787	    ASK( ACCPRMPT2 , CMDBUF[.PTR] , .BUFLEN ) ;
;	0788	    PTR = .PTR + .INSIZE - 1 ;
;	0789	    END;
;	0790	
;	0791	CMDBUF[.PTR+1] = 0 ;				! mark end of string
;	0792	END;





					 080C 0008C GET_CMD_LINE:
							    .WORD   Save R2,R3,R11					      ; 0716
		         5B	0000'  CF  9E 0008E 	    MOVAB   CMDBUF, R11						      ;
		         7E	0400   8F  3C 00093 1$:     MOVZWL  #1024, -(SP)					      ; 0763
				       5B  DD 00098 	    PUSHL   R11							      ;
				0000'  CF  9F 0009A 	    PUSHAB  ACCPRMPT						      ; 0716
		  0000V  CF	       03  FB 0009E 	    CALLS   #3, ASK						      ; 0763
		         50	04B8   CB  D0 000A3 	    MOVL    INSIZE, R0						      ; 0765
				       E9  13 000A8 	    BEQL    1$							      ;
	   52	         50	       01  C3 000AA 	    SUBL3   #1, R0, PTR						      ; 0772
		         53	0400   8F  3C 000AE 	    MOVZWL  #1024, BUFLEN					      ; 0773
		         2D	     6B42  91 000B3 2$:     CMPB    CMDBUF[PTR], #45					      ; 0776
				       24  12 000B7 	    BNEQ    3$							      ;
	   50	         53	04B8   CB  C3 000B9 	    SUBL3   INSIZE, BUFLEN, R0					      ; 0786
	   53	         50	       01  C3 000BF 	    SUBL3   #1, R0, BUFLEN					      ;
				       53  DD 000C3 	    PUSHL   BUFLEN						      ; 0787
				     6B42  9F 000C5 	    PUSHAB  CMDBUF[PTR]						      ;
				0000'  CF  9F 000C8 	    PUSHAB  ACCPRMPT2						      ; 0716
		  0000V  CF	       03  FB 000CC 	    CALLS   #3, ASK						      ; 0787
	   50	         52	04B8   CB  C1 000D1 	    ADDL3   INSIZE, PTR, R0					      ; 0788
	   52	         50	       01  C3 000D7 	    SUBL3   #1, R0, PTR						      ;
				       D6  11 000DB 	    BRB     2$							      ; 0775
				  01 AB42  94 000DD 3$:     CLRB    CMDBUF+1[PTR]					      ; 0791
				       50  D4 000E1 	    CLRL    R0							      ; 0716
					   04 000E3 	    RET     							      ;

; Routine Size:  88 bytes


; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 4-2
; Digital Equipment Corporation
;


; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 5
; Digital Equipment Corporation
;
;	0793	ROUTINE SETUP =
;	0794	BEGIN
;	0795	
;	0796	!++
;	0797	!
;	0798	! FUNCTIONAL DESCRIPTION:
;	0799	!
;	0800	!	This routine does all of the initial file manipulation for the
;	0801	!	program.  A temporary file is copied from the existing
;	0802	!	authorization file, and it is this file that is manipulated during
;	0803	!	the session.  When the user exits, the temporary file is renamed
;	0804	!	to make it the current authorization file.
;	0805	!
;	0806	! INPUTS:
;	0807	!
;	0808	!	none
;	0809	!
;	0810	! IMPLICIT INPUTS:
;	0811	!
;	0812	!	none
;	0813	!
;	0814	! OUTPUTS:
;	0815	!
;	0816	!	None
;	0817	!
;	0818	! IMPLICIT OUTPUTS:
;	0819	!
;	0820	!	none
;	0821	!
;	0822	! ROUTINE VALUE:
;	0823	!
;	0824	!	none
;	0825	!
;	0826	! SIDE EFFECTS:
;	0827	!
;	0828	!	none
;	0829	!--
;	0830	
;	0831	LOCAL
;	0832		NEWFILE ;				! indicates new file must
;	0833							! be created.
;	0834	
;	0835	NEWFILE = FALSE ;				! note no new file yet
;	0836	
;	0837	!
;	0838	! Open the current UAF file.  If UAF does not exist, see if
;	0839	! the user would like to create one.
;	0840	!
;	0841	
;	0842	IF RMSBAD( $OPEN( FAB = UAFFAB ) )
;	0843	THEN
;	0844	    WHILE TRUE 
;	0845	    DO
;	0846		BEGIN
;	0847		FMT_SYS_MSG( NEWMSG10 , .RMSERR ) ;	! report problem

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 5-1
; Digital Equipment Corporation
;
;	0848		ASK( NEWMSG20 , CMDBUF[0] , CMDBUFLEN ) ; ! want a new file?
;	0849		IF .CMDBUF[0] EQL 'Y'
;	0850		    THEN EXITLOOP NEWFILE = TRUE ;	! yes, set new file indicator
;	0851		IF .CMDBUF[0] EQL 'N'
;	0852		    THEN ACC$EXIT() ;			! no, exit program
;	0853		FAOOUT( INVRSP ) ;			! invalid response, report and
;	0854							! try again
;	0855		END ;
;	0856	
;	0857	!
;	0858	! Create the temporary work file
;	0859	!
;	0860	
;	0861	IF RMSBAD( $CREATE(FAB=TMPFAB) )
;	0862	THEN
;	0863	    FATAL( CREERR , .RMSERR ) ;			! report error
;	0864	
;	0865	!
;	0866	! Connect RAB to newly created work file
;	0867	!
;	0868	
;	0869	IF RMSBAD( $CONNECT(RAB=TMPRAB) )
;	0870	THEN
;	0871	    FATAL( CONERR , .RMSERR) ;			! report error and exit
;	0872	
;	0873	!
;	0874	! Check to see if there was no old file to copy.  If so , write a default
;	0875	! header record.
;	0876	!
;	0877	
;	0878	IF .NEWFILE
;	0879	THEN
;	0880	    BEGIN
;	0881	    MODIFY_FLAG = TRUE ;			! must rename when done
;	0882	    BUILD_INI_RECS() ;				! build default and system manager records
;	0883	    TMPRAB[RAB$L_RBF] = DEFAULT_RECORD ;	! insert default record address
;	0884	    TMPRAB[RAB$W_RSZ] = UAF$C_LENGTH ;		! insert default record size
;	0885	    IF RMSBAD( $PUT(RAB=TMPRAB) )
;	0886	    THEN
;	0887		FATAL( PUTERR , .RMSERR ) ;		! report error
;	0888	    TMPRAB[RAB$L_RBF] = RECBUF ;		! restore proper address ( and
;	0889							! address of system record)
;	0890	    IF RMSBAD( $PUT(RAB=TMPRAB) )		! output system record
;	0891	    THEN
;	0892		FATAL( PUTERR , .RMSERR ) ;
;	0893	    END
;	0894	ELSE
;	0895	    BEGIN
;	0896	
;	0897	    !
;	0898	    ! Copy the temporary work file from the open UAF file.
;	0899	    !
;	0900	
;	0901	    $CONNECT( RAB=UAFRAB ) ;
;	0902	    WHILE RMSOK( $GET(RAB=UAFRAB) )

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 5-2
; Digital Equipment Corporation
;
;	0903	    DO
;	0904	
;	0905		!
;	0906		! Copy record to temp file only if first longword of
;	0907		! username is not zero ( indicating deleted record )
;	0908		!
;	0909	
;	0910		IF .(RECBUF[UAF$T_USERNAME])<0,32> NEQ 0
;	0911		THEN
;	0912		    BEGIN
;	0913		    IF RMSBAD( $PUT(RAB=TMPRAB) )
;	0914		    THEN
;	0915			FATAL( PUTERR , .RMSERR ) ;
;	0916		    END;
;	0917	
;	0918	    !
;	0919	    ! Here, the GET from the original UAF file has failed, hopefully
;	0920	    ! because of end of file.
;	0921	    !
;	0922	
;	0923	    IF .RMSERR NEQ RMS$_EOF			! make sure we stopped for EOF
;	0924	    THEN
;	0925		FATAL( GETERR , .RMSERR ) ;
;	0926	
;	0927	    !
;	0928	    ! Close the original UAF file
;	0929	    !
;	0930	
;	0931	    $DISCONNECT( RAB=UAFRAB ) ;
;	0932	    $CLOSE( FAB=UAFFAB ) ;
;	0933	    END;
;	0934	
;	0935	!
;	0936	! Position the TEMP file back to the beginning
;	0937	! and read the default record into the default record buffer.
;	0938	! 
;	0939	
;	0940	REWIND( TMPRAB ) ;
;	0941	
;	0942	!
;	0943	! Read in the default record.
;	0944	!
;	0945	
;	0946	TMPRAB[RAB$L_UBF] = DEFAULT_RECORD ;
;	0947	TMPRAB[RAB$W_USZ] = UAF$C_LENGTH ;
;	0948	IF RMSBAD( $GET(RAB=TMPRAB) )
;	0949	THEN
;	0950	    FATAL( GETERR , .RMSERR ) ;
;	0951	
;	0952	TMPRAB[RAB$L_UBF] = RECBUF ;				! return proper record address
;	0953	END;



							    .GLOBL  SYS$CREATE, SYS$PUT, SYS$GET, SYS$DISCONNECT, SYS$CLOSE

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 5-3
; Digital Equipment Corporation
;
							    .GLOBL  SYS$REWIND

					 0FE4 000E4 SETUP:  .WORD   Save R2,R5,R6,R7,R8,R9,R10,R11			      ; 0793
		         55 00000000G  9F  9E 000E6 	    MOVAB   @#SYS$GET, R5					      ;
		         56 00000000G  9F  9E 000ED 	    MOVAB   @#SYS$CONNECT, R6					      ;
		         57 00000000G  9F  9E 000F4 	    MOVAB   @#SYS$PUT, R7					      ;
		         58	0000V  CF  9E 000FB 	    MOVAB   ACC$EXIT, R8					      ;
		         59	0000V  CF  9E 00100 	    MOVAB   FMT_SYS_MSG, R9					      ;
		         5A	0000'  CF  9E 00105 	    MOVAB   PUTERR, R10						      ;
		         5B	0000'  CF  9E 0010A 	    MOVAB   RMSERR, R11						      ;
				       52  D4 0010F 	    CLRL    NEWFILE						      ; 0835
				00B4   CB  9F 00111 	    PUSHAB  UAFFAB						      ; 0842
	      00000000G  9F	       01  FB 00115 	    CALLS   #1, @#SYS$OPEN					      ;
		         6B	       50  D0 0011C 	    MOVL    R0, RMSERR						      ;
		         3E	       50  E8 0011F 	    BLBS    R0, 4$						      ;
				       6B  DD 00122 1$:     PUSHL   RMSERR						      ; 0847
				FEE0   CA  9F 00124 	    PUSHAB  NEWMSG10						      ; 0793
		         69	       02  FB 00128 	    CALLS   #2, FMT_SYS_MSG					      ; 0847
		         7E	0400   8F  3C 0012B 	    MOVZWL  #1024, -(SP)					      ; 0848
				FA7C   CB  9F 00130 	    PUSHAB  CMDBUF						      ;
				FEFC   CA  9F 00134 	    PUSHAB  NEWMSG20						      ; 0793
		  0000V  CF	       03  FB 00138 	    CALLS   #3, ASK						      ; 0848
		    59   8F	FA7C   CB  91 0013D 	    CMPB    CMDBUF, #89						      ; 0849
				       05  12 00143 	    BNEQ    2$							      ;
		         52	       01  D0 00145 	    MOVL    #1, NEWFILE						      ; 0850
				       16  11 00148 	    BRB     4$							      ;
		    4E   8F	FA7C   CB  91 0014A 2$:     CMPB    CMDBUF, #78						      ; 0851
				       03  12 00150 	    BNEQ    3$							      ;
		         68	       00  FB 00152 	    CALLS   #0, ACC$EXIT					      ; 0852
				FD40   CA  9F 00155 3$:     PUSHAB  INVRSP						      ; 0793
		  0000V  CF	       01  FB 00159 	    CALLS   #1, FAOOUT						      ; 0853
				       C2  11 0015E 	    BRB     1$							      ; 0844
				  20   AB  9F 00160 4$:     PUSHAB  TMPFAB						      ; 0861
	      00000000G  9F	       01  FB 00163 	    CALLS   #1, @#SYS$CREATE					      ;
		         6B	       50  D0 0016A 	    MOVL    R0, RMSERR						      ;
		         0C	       50  E8 0016D 	    BLBS    R0, 5$						      ;
				       6B  DD 00170 	    PUSHL   RMSERR						      ; 0863
				FA58   CA  9F 00172 	    PUSHAB  CREERR						      ; 0793
		         69	       02  FB 00176 	    CALLS   #2, FMT_SYS_MSG					      ; 0863
		         68	       00  FB 00179 	    CALLS   #0, ACC$EXIT					      ;
				  70   AB  9F 0017C 5$:     PUSHAB  TMPRAB						      ; 0869
		         66	       01  FB 0017F 	    CALLS   #1, SYS$CONNECT					      ;
		         6B	       50  D0 00182 	    MOVL    R0, RMSERR						      ;
		         0C	       50  E8 00185 	    BLBS    R0, 6$						      ;
				       6B  DD 00188 	    PUSHL   RMSERR						      ; 0871
				FA48   CA  9F 0018A 	    PUSHAB  CONERR						      ; 0793
		         69	       02  FB 0018E 	    CALLS   #2, FMT_SYS_MSG					      ; 0871
		         68	       00  FB 00191 	    CALLS   #0, ACC$EXIT					      ;
		         4C	       52  E9 00194 6$:     BLBC    NEWFILE, 8$						      ; 0878
		  FF38   CB	       01  D0 00197 	    MOVL    #1, MODIFY_FLAG					      ; 0881
		  0000V  CF	       00  FB 0019C 	    CALLS   #0, BUILD_INI_RECS					      ; 0882
		  0098   CB	FE7C   CB  9E 001A1 	    MOVAB   DEFAULT_RECORD, TMPRAB+40				      ; 0883
		  0092   CB	  B8   8F  9B 001A8 	    MOVZBW  #184, TMPRAB+34					      ; 0884
				  70   AB  9F 001AE 	    PUSHAB  TMPRAB						      ; 0885
		         67	       01  FB 001B1 	    CALLS   #1, SYS$PUT						      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 5-4
; Digital Equipment Corporation
;
		         6B	       50  D0 001B4 	    MOVL    R0, RMSERR						      ;
		         0A	       50  E8 001B7 	    BLBS    R0, 7$						      ;
				       6B  DD 001BA 	    PUSHL   RMSERR						      ; 0887
				       5A  DD 001BC 	    PUSHL   R10							      ; 0793
		         69	       02  FB 001BE 	    CALLS   #2, FMT_SYS_MSG					      ; 0887
		         68	       00  FB 001C1 	    CALLS   #0, ACC$EXIT					      ;
		  0098   CB	FF48   CB  9E 001C4 7$:     MOVAB   RECBUF, TMPRAB+40					      ; 0888
				  70   AB  9F 001CB 	    PUSHAB  TMPRAB						      ; 0890
		         67	       01  FB 001CE 	    CALLS   #1, SYS$PUT						      ;
		         6B	       50  D0 001D1 	    MOVL    R0, RMSERR						      ;
		         69	       50  E8 001D4 	    BLBS    R0, 12$						      ;
				       6B  DD 001D7 	    PUSHL   RMSERR						      ; 0892
				       5A  DD 001D9 	    PUSHL   R10							      ; 0793
		         69	       02  FB 001DB 	    CALLS   #2, FMT_SYS_MSG					      ; 0892
		         68	       00  FB 001DE 	    CALLS   #0, ACC$EXIT					      ;
				       5D  11 001E1 	    BRB     12$							      ; 0878
				0104   CB  9F 001E3 8$:     PUSHAB  UAFRAB						      ; 0901
		         66	       01  FB 001E7 	    CALLS   #1, SYS$CONNECT					      ;
				0104   CB  9F 001EA 9$:     PUSHAB  UAFRAB						      ; 0902
		         65	       01  FB 001EE 	    CALLS   #1, SYS$GET						      ;
		         6B	       50  D0 001F1 	    MOVL    R0, RMSERR						      ;
		         1E	       50  E9 001F4 	    BLBC    R0, 10$						      ;
				FF48   CB  D5 001F7 	    TSTL    RECBUF						      ; 0910
				       ED  13 001FB 	    BEQL    9$							      ;
				  70   AB  9F 001FD 	    PUSHAB  TMPRAB						      ; 0913
		         67	       01  FB 00200 	    CALLS   #1, SYS$PUT						      ;
		         6B	       50  D0 00203 	    MOVL    R0, RMSERR						      ;
		         E1	       50  E8 00206 	    BLBS    R0, 9$						      ;
				       6B  DD 00209 	    PUSHL   RMSERR						      ; 0915
				       5A  DD 0020B 	    PUSHL   R10							      ; 0793
		         69	       02  FB 0020D 	    CALLS   #2, FMT_SYS_MSG					      ; 0915
		         68	       00  FB 00210 	    CALLS   #0, ACC$EXIT					      ;
				       D5  11 00213 	    BRB     9$							      ; 0910
	      0001827A   8F	       6B  D1 00215 10$:    CMPL    RMSERR, #98938					      ; 0923
				       0C  13 0021C 	    BEQL    11$							      ;
				       6B  DD 0021E 	    PUSHL   RMSERR						      ; 0925
				FA9C   CA  9F 00220 	    PUSHAB  GETERR						      ; 0793
		         69	       02  FB 00224 	    CALLS   #2, FMT_SYS_MSG					      ; 0925
		         68	       00  FB 00227 	    CALLS   #0, ACC$EXIT					      ;
				0104   CB  9F 0022A 11$:    PUSHAB  UAFRAB						      ; 0931
	      00000000G  9F	       01  FB 0022E 	    CALLS   #1, @#SYS$DISCONNECT				      ;
				00B4   CB  9F 00235 	    PUSHAB  UAFFAB						      ; 0932
	      00000000G  9F	       01  FB 00239 	    CALLS   #1, @#SYS$CLOSE					      ;
				  70   AB  9F 00240 12$:    PUSHAB  TMPRAB						      ; 0940
	      00000000G  9F	       01  FB 00243 	    CALLS   #1, @#SYS$REWIND					      ;
		  0094   CB	FE7C   CB  9E 0024A 	    MOVAB   DEFAULT_RECORD, TMPRAB+36				      ; 0946
		  0090   CB	  B8   8F  9B 00251 	    MOVZBW  #184, TMPRAB+32					      ; 0947
				  70   AB  9F 00257 	    PUSHAB  TMPRAB						      ; 0948
		         65	       01  FB 0025A 	    CALLS   #1, SYS$GET						      ;
		         6B	       50  D0 0025D 	    MOVL    R0, RMSERR						      ;
		         0C	       50  E8 00260 	    BLBS    R0, 13$						      ;
				       6B  DD 00263 	    PUSHL   RMSERR						      ; 0950
				FA9C   CA  9F 00265 	    PUSHAB  GETERR						      ; 0793
		         69	       02  FB 00269 	    CALLS   #2, FMT_SYS_MSG					      ; 0950
		         68	       00  FB 0026C 	    CALLS   #0, ACC$EXIT					      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 5-5
; Digital Equipment Corporation
;
		  0094   CB	FF48   CB  9E 0026F 13$:    MOVAB   RECBUF, TMPRAB+36					      ; 0952
				       50  D4 00276 	    CLRL    R0							      ; 0793
					   04 00278 	    RET     							      ;

; Routine Size:  405 bytes


;	0954	

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 6
; Digital Equipment Corporation
;
;	0955	ROUTINE FIND_VAL( SIZE , BUFFER , TABLE ) =
;	0956	BEGIN
;	0957	
;	0958	!++
;	0959	!
;	0960	! FUNCTIONAL DESCRIPTION:
;	0961	!
;	0962	!	The TABLE is scanned for the string in the supplied buffer, and
;	0963	!	the associated value from the table is returned.
;	0964	!
;	0965	! INPUTS:
;	0966	!
;	0967	!	SIZE - the number of characters in BUFFER
;	0968	!	BUFFER - the address of the buffer containing the search string
;	0969	!	TABLE - the address of a table containing the comparison strings with
;	0970	!		their minimum comparison lengths and associated values
;	0971	!
;	0972	! IMPLICIT INPUTS:
;	0973	!
;	0974	!	none
;	0975	!
;	0976	! OUTPUTS:
;	0977	!
;	0978	!	none
;	0979	!
;	0980	! IMPLICIT OUTPUTS:
;	0981	!
;	0982	!	none
;	0983	!
;	0984	! ROUTINE VALUE:
;	0985	!
;	0986	!	SYMNOTFND -> string not found
;	0987	!	SYMNOTUNQ -> string not unique
;	0988	!	positive value -> associated value for located string
;	0989	!
;	0990	! SIDE EFFECTS:
;	0991	!
;	0992	!	none
;	0993	!--
;	0994	
;	0995	
;	0996	LOCAL
;	0997		POINTER,			! pointer to current location
;	0998		SYMLEN,				! length of comparison string
;	0999		SYMMIN,				! minimum length for comparison
;	1000		SYMVAL;				! associated value
;	1001	
;	1002	IF .SIZE LEQ 0 THEN RETURN SYMNOTFND ;	! check for zero length input
;	1003	POINTER = .TABLE ;			! point to search table
;	1004	
;	1005	WHILE TRUE
;	1006	DO
;	1007	    BEGIN
;	1008	
;	1009	    !

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 6-1
; Digital Equipment Corporation
;
;	1010	    ! Scan the table, picking up the min comprison length and value
;	1011	    ! for each string and do the comparison.   A negative value
;	1012	    ! indicates that the table is finished and no match was found.  If
;	1013	    ! a match is found but fewer characters were supplied than SYMMIN, then
;	1014	    ! the command is not unique.
;	1015	    !
;	1016	
;	1017	    SYMVAL = .(.POINTER) ;			! pick up next symbol value
;	1018	    POINTER = .POINTER+4 ;			! advance ponter over value
;	1019	    IF .SYMVAL LSS 0				! check for end of table
;	1020	    THEN
;	1021		EXITLOOP SYMVAL = SYMNOTFND ;		! and return not found if end
;	1022	    SYMMIN = .(.POINTER)<0,8> ;			! get min characters
;	1023	    POINTER = .POINTER + 1 ;			! skip min length
;	1024	    SYMLEN = .(.POINTER)<0,8> ;			! get length of name string
;	1025	    POINTER = .POINTER + 1 ;			! skip of count byte
;	1026	    IF CH$EQL ( .SIZE , .BUFFER , .SIZE , .POINTER )
;	1027	    THEN
;	1028	
;	1029		!
;	1030		! We got a match.  Check to see if enough characters were supplied.
;	1031		!
;	1032	
;	1033		EXITLOOP				! exit in either case
;	1034		   ( IF .SIZE GEQ .SYMMIN
;	1035		     THEN TRUE				! exit with value in symval
;	1036		     ELSE SYMVAL = SYMNOTUNQ ) ;	! else "not unique"
;	1037	
;	1038	    POINTER = .POINTER + .SYMLEN ;		! skip comparison string
;	1039	    END;
;	1040	
;	1041	
;	1042	RETURN .SYMVAL ;				! return value or error indication
;	1043	END;





					 01FC 00279 FIND_VAL:
							    .WORD   Save R2,R3,R4,R5,R6,R7,R8				      ; 0955
		         56	  04   AC  D0 0027B 	    MOVL    SIZE, R6						      ; 1002
				       04  14 0027F 	    BGTR    1$							      ;
		         50	       02  CE 00281 	    MNEGL   #2, R0						      ;
					   04 00284 	    RET     							      ;
		         54	  0C   AC  D0 00285 1$:     MOVL    TABLE, POINTER					      ; 1003
		         55	       84  D0 00289 2$:     MOVL    (POINTER)+, SYMVAL					      ; 1017
				       05  18 0028C 	    BGEQ    3$							      ; 1019
		         55	       02  CE 0028E 	    MNEGL   #2, SYMVAL						      ; 1021
				       1C  11 00291 	    BRB     5$							      ;
		         58	       84  9A 00293 3$:     MOVZBL  (POINTER)+, SYMMIN					      ; 1022
		         57	       84  9A 00296 	    MOVZBL  (POINTER)+, SYMLEN					      ; 1024
	   64	    08   BC	       56  29 00299 	    CMPC3   R6, @BUFFER, (POINTER)				      ; 1026
				       0A  12 0029E 	    BNEQ    4$							      ;
		         58	       56  D1 002A0 	    CMPL    R6, SYMMIN						      ; 1034

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 6-2
; Digital Equipment Corporation
;
				       0A  18 002A3 	    BGEQ    5$							      ;
		         55	       04  CE 002A5 	    MNEGL   #4, SYMVAL						      ; 1036
				       05  11 002A8 	    BRB     5$							      ; 1033
		         54	       57  C0 002AA 4$:     ADDL2   SYMLEN, POINTER					      ; 1038
				       DA  11 002AD 	    BRB     2$							      ; 1005
		         50	       55  D0 002AF 5$:     MOVL    SYMVAL, R0						      ; 1042
					   04 002B2 	    RET     							      ; 0955

; Routine Size:  58 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 7
; Digital Equipment Corporation
;
;	1044	ROUTINE ADD =
;	1045	BEGIN
;	1046	
;	1047	!++
;	1048	!
;	1049	! FUNCTIONAL DESCRIPTION:
;	1050	!
;	1051	!	Routine to add new user to authorization file.
;	1052	!
;	1053	! INPUTS:
;	1054	!
;	1055	!	none
;	1056	!
;	1057	! IMPLICIT INPUTS:
;	1058	!
;	1059	!	none
;	1060	!
;	1061	! OUTPUTS:
;	1062	!
;	1063	!	none
;	1064	!
;	1065	! IMPLICIT OUTPUTS:
;	1066	!
;	1067	!	none
;	1068	!
;	1069	! ROUTINE VALUE:
;	1070	!
;	1071	!	none
;	1072	!
;	1073	! SIDE EFFECTS:
;	1074	!
;	1075	!	none
;	1076	!--
;	1077	
;	1078	!
;	1079	! Make sure a username was specified.
;	1080	!
;	1081	
;	1082	IF .(.NEXTTOKEN)<0,8> EQL ZERO 
;	1083	THEN
;	1084	    RETURN FAOOUT( NOUSERNAME ) ;
;	1085	
;	1086	!
;	1087	! Lookup the username and make sure that it doesn't already
;	1088	! exist.  ADD must check that the username supplied is not too long.
;	1089	!
;	1090	
;	1091	GETTOKEN( .NEXTTOKEN+1 , TOKENPTR , NEXTTOKEN , TOKENLEN , DELIMSTR ) ;
;	1092	
;	1093	IF .TOKENLEN EQL 0 
;	1094	THEN
;	1095	    RETURN FAOOUT(NOUSERNAME) ;
;	1096	
;	1097	IF .TOKENLEN GTR  UAF$S_USERNAME
;	1098	THEN

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 7-1
; Digital Equipment Corporation
;
;	1099	    RETURN
;	1100		FAOOUT( NAMETOOBIG ) ;
;	1101	
;	1102	IF LOCATE_USER( .TOKENLEN , .TOKENPTR )
;	1103	THEN
;	1104	    RETURN
;	1105		FAOOUT( UAEERR ) ;
;	1106	
;	1107	!
;	1108	! Move the default record to the current record buffer, so that
;	1109	! fields which are not entered will receive the default
;	1110	! value.  Then insert the username just entered.
;	1111	!
;	1112	
;	1113	CH$MOVE( UAF$C_LENGTH , DEFAULT_RECORD , RECBUF ) ;
;	1114	CH$COPY( .TOKENLEN , .TOKENPTR , ' ' , UAF$S_USERNAME , RECBUF[UAF$T_USERNAME] ) ;
;	1115	
;	1116	!
;	1117	! Call routine to fill in all supplied values.  Exit if any errors
;	1118	! were found.
;	1119	!
;	1120	
;	1121	 IF NOT UPDATE_RECORD() THEN RETURN ;
;	1122	
;	1123	!
;	1124	! Now output the new record.
;	1125	!
;	1126	
;	1127	IF RMSBAD( $PUT( RAB=TMPRAB ) ) 
;	1128	THEN
;	1129	    FMT_SYS_MSG( ADDERR , .RMSERR )
;	1130	ELSE
;	1131	    BEGIN
;	1132	
;	1133	    !
;	1134	    ! Tell user that addition was successful.  Note that file was changed.
;	1135	    !
;	1136	
;	1137	    FAOOUT( ADDMSG ) ;
;	1138	    MODIFY_FLAG = TRUE ;
;	1139	    END;
;	1140	END;





					 083C 002B3 ADD:    .WORD   Save R2,R3,R4,R5,R11				      ; 1044
		         5B	0000'  CF  9E 002B5 	    MOVAB   TOKENLEN, R11					      ;
				FF38   DB  95 002BA 	    TSTB    @NEXTTOKEN						      ; 1082
				       1C  13 002BE 	    BEQL    1$							      ;
				0000'  CF  9F 002C0 	    PUSHAB  DELIMSTR						      ; 1044
				       5B  DD 002C4 	    PUSHL   R11							      ; 1091
				FF38   CB  9F 002C6 	    PUSHAB  NEXTTOKEN						      ;
				  04   AB  9F 002CA 	    PUSHAB  TOKENPTR						      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 7-2
; Digital Equipment Corporation
;
	   7E	  FF38   CB	       01  C1 002CD 	    ADDL3   #1, NEXTTOKEN, -(SP)				      ;
		  0000V  CF	       05  FB 002D3 	    CALLS   #5, GETTOKEN					      ;
				       6B  D5 002D8 	    TSTL    TOKENLEN						      ; 1093
				       06  12 002DA 	    BNEQ    2$							      ;
				0000'  CF  9F 002DC 1$:     PUSHAB  NOUSERNAME						      ; 1044
				       1A  11 002E0 	    BRB     4$							      ; 1095
		         0C	       6B  D1 002E2 2$:     CMPL    TOKENLEN, #12					      ; 1097
				       06  15 002E5 	    BLEQ    3$							      ;
				0000'  CF  9F 002E7 	    PUSHAB  NAMETOOBIG						      ; 1044
				       0F  11 002EB 	    BRB     4$							      ; 1100
		         7E	       6B  7D 002ED 3$:     MOVQ    TOKENLEN, -(SP)					      ; 1102
		  0000V  CF	       02  FB 002F0 	    CALLS   #2, LOCATE_USER					      ;
		         0A	       50  E9 002F5 	    BLBC    R0, 5$						      ;
				0000'  CF  9F 002F8 	    PUSHAB  UAEERR						      ; 1044
		  0000V  CF	       01  FB 002FC 4$:     CALLS   #1, FAOOUT						      ; 1105
					   04 00301 	    RET     							      ; 1104
    FF44   CB	  FE78   CB	00B8   8F  28 00302 5$:     MOVC3   #184, DEFAULT_RECORD, RECBUF			      ; 1113
	   20	    04   BB	       6B  2C 0030C 	    MOVC5   TOKENLEN, @TOKENPTR, #32, #12, RECBUF		      ; 1114
		  FF44   CB	       0C     00311									      ;
		  0000V  CF	       00  FB 00315 	    CALLS   #0, UPDATE_RECORD					      ; 1121
		         2D	       50  E9 0031A 	    BLBC    R0, 7$						      ;
				  6C   AB  9F 0031D 	    PUSHAB  TMPRAB						      ; 1127
	      00000000G  9F	       01  FB 00320 	    CALLS   #1, @#SYS$PUT					      ;
		    FC   AB	       50  D0 00327 	    MOVL    R0, RMSERR						      ;
		         0E	       50  E8 0032B 	    BLBS    R0, 6$						      ;
				  FC   AB  DD 0032E 	    PUSHL   RMSERR						      ; 1129
				0000'  CF  9F 00331 	    PUSHAB  ADDERR						      ; 1044
		  0000V  CF	       02  FB 00335 	    CALLS   #2, FMT_SYS_MSG					      ; 1129
				       0E  11 0033A 	    BRB     7$							      ; 1127
				0000'  CF  9F 0033C 6$:     PUSHAB  ADDMSG						      ; 1044
		  0000V  CF	       01  FB 00340 	    CALLS   #1, FAOOUT						      ; 1137
		  FF34   CB	       01  D0 00345 	    MOVL    #1, MODIFY_FLAG					      ; 1138
				       50  D4 0034A 7$:     CLRL    R0							      ; 1044
					   04 0034C 	    RET     							      ;

; Routine Size:  154 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 8
; Digital Equipment Corporation
;
;	1141	ROUTINE MODIFY =
;	1142	BEGIN
;	1143	
;	1144	!++
;	1145	!
;	1146	! FUNCTIONAL DESCRIPTION:
;	1147	!
;	1148	!	Routine to modify any of the fields in a user record.
;	1149	!
;	1150	! INPUTS:
;	1151	!
;	1152	!	none
;	1153	!
;	1154	! IMPLICIT INPUTS:
;	1155	!
;	1156	!	none
;	1157	!
;	1158	! OUTPUTS:
;	1159	!
;	1160	!	none
;	1161	!
;	1162	! IMPLICIT OUTPUTS:
;	1163	!
;	1164	!	none
;	1165	!
;	1166	! SIDE EFFECTS:
;	1167	!
;	1168	!	none
;	1169	!
;	1170	! ROUTINE VALUE:
;	1171	!
;	1172	!	none
;	1173	!--
;	1174	
;	1175	
;	1176	!
;	1177	! Locate the user record and load it if found.
;	1178	!
;	1179	
;	1180	IF NOT GET_USER_RECORD() THEN RETURN ;
;	1181	
;	1182	!
;	1183	! User record has been located and loaded into RECBUF by
;	1184	! LOCATE_USER routine.  Update values and modify the record
;	1185	! if no errors were found.
;	1186	!
;	1187	
;	1188	IF NOT UPDATE_RECORD() THEN RETURN ;		
;	1189	
;	1190	IF NOT RMSOK( $UPDATE( RAB=TMPRAB ) )
;	1191	THEN
;	1192	    FMT_SYS_MSG( MDFYERR , .RMSERR )		! note error if any
;	1193	ELSE
;	1194	    BEGIN
;	1195	    MODIFY_FLAG = TRUE ;			! mark file as modified

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 8-1
; Digital Equipment Corporation
;
;	1196	    FAOOUT( MDFYMSG ) ;
;	1197	    END;
;	1198	END;



							    .GLOBL  SYS$UPDATE

					 0000 0034D MODIFY: .WORD   Save nothing					      ; 1141
		  0000V  CF	       00  FB 0034F 	    CALLS   #0, GET_USER_RECORD					      ; 1180
		         38	       50  E9 00354 	    BLBC    R0, 2$						      ;
		  0000V  CF	       00  FB 00357 	    CALLS   #0, UPDATE_RECORD					      ; 1188
		         30	       50  E9 0035C 	    BLBC    R0, 2$						      ;
				0000'  CF  9F 0035F 	    PUSHAB  TMPRAB						      ; 1190
	      00000000G  9F	       01  FB 00363 	    CALLS   #1, @#SYS$UPDATE					      ;
		  0000'  CF	       50  D0 0036A 	    MOVL    R0, RMSERR						      ;
		         0F	       50  E8 0036F 	    BLBS    R0, 1$						      ;
				0000'  CF  DD 00372 	    PUSHL   RMSERR						      ; 1192
				0000'  CF  9F 00376 	    PUSHAB  MDFYERR						      ; 1141
		  0000V  CF	       02  FB 0037A 	    CALLS   #2, FMT_SYS_MSG					      ; 1192
				       0E  11 0037F 	    BRB     2$							      ; 1190
		  0000'  CF	       01  D0 00381 1$:     MOVL    #1, MODIFY_FLAG					      ; 1195
				0000'  CF  9F 00386 	    PUSHAB  MDFYMSG						      ; 1141
		  0000V  CF	       01  FB 0038A 	    CALLS   #1, FAOOUT						      ; 1196
				       50  D4 0038F 2$:     CLRL    R0							      ; 1141
					   04 00391 	    RET     							      ;

; Routine Size:  69 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 9
; Digital Equipment Corporation
;
;	1199	ROUTINE SHOWUSER =
;	1200	BEGIN
;	1201	
;	1202	!++
;	1203	!
;	1204	! FUNCTIONAL DESCRIPTION:
;	1205	!
;	1206	!	Display the fields of a UAF record.
;	1207	!
;	1208	! INPUTS:
;	1209	!
;	1210	!	none
;	1211	!
;	1212	! IMPLICIT INPUTS:
;	1213	!
;	1214	!	none
;	1215	!
;	1216	! OUTPUTS:
;	1217	!
;	1218	!	none
;	1219	!
;	1220	! IMPLICIT OUTPUTS:
;	1221	!
;	1222	!	none
;	1223	!
;	1224	! ROUTINE VALUE:
;	1225	!
;	1226	!	none
;	1227	!
;	1228	! SIDE EFFECTS:
;	1229	!
;	1230	!	none
;	1231	!--
;	1232	
;	1233	!
;	1234	! Strings for login flag settings
;	1235	!
;	1236	
;	1237	BIND
;	1238		FLGSTR1 = CSTRING('DISCTLY'),
;	1239		FLGSTR2 = CSTRING('DEFCLI'),
;	1240		NULLSTR = CSTRING('');
;	1241	
;	1242	
;	1243	!
;	1244	! Look for username supplied and exit on error.
;	1245	!
;	1246	
;	1247	IF NOT GET_USER_RECORD() THEN RETURN ;
;	1248	
;	1249	
;	1250	FAOOUT( SHOWMSG1 ,
;	1251	    UAF$S_USERNAME ,
;	1252	    RECBUF[UAF$T_USERNAME] ,
;	1253	    UAF$S_OWNER ,

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 9-1
; Digital Equipment Corporation
;
;	1254	    RECBUF[UAF$T_OWNER] ,
;	1255	    UAF$S_ACCOUNT ,
;	1256	    RECBUF[UAF$T_ACCOUNT] ,
;	1257	    .RECBUF[UAF$W_GRP],
;	1258	    .RECBUF[UAF$W_MEM],
;	1259	    ) ;
;	1260	
;	1261	FAOOUT( SHOWMSG2 ,
;	1262	    RECBUF[UAF$T_DEFDIR] ,
;	1263	    RECBUF[UAF$T_DEFDEV]
;	1264	    );
;	1265	
;	1266	FAOOUT( SHOWMSG3 ,
;	1267		RECBUF[UAF$T_LGICMD] , 
;	1268		IF .RECBUF[UAF$V_DISCTLY] THEN FLGSTR1 ELSE NULLSTR ,
;	1269		IF .RECBUF[UAF$V_DEFCLI] THEN FLGSTR2 ELSE NULLSTR
;	1270		) ;
;	1271	
;	1272	FAOOUT( SHOWMSG5 ,
;	1273	    UAF$S_DEFCLI ,
;	1274	    RECBUF[UAF$T_DEFCLI] ,
;	1275	    .RECBUF[UAF$W_PRCCNT] ,
;	1276	    .RECBUF[UAF$B_PRI] ,
;	1277	    .RECBUF[UAF$W_ASTLM] ,
;	1278	    .RECBUF[UAF$W_BIOLM] ,
;	1279	    .RECBUF[UAF$W_BYTLM] 
;	1280	    );
;	1281	
;	1282	FAOOUT( SHOWMSG6 ,
;	1283	    .RECBUF[UAF$W_DIOLM] ,
;	1284	    .RECBUF[UAF$W_FILLM] ,
;	1285	    .RECBUF[UAF$W_TQCNT] 
;	1286	    ) ;
;	1287	
;	1288	FAOOUT( SHOWMSG7 ,
;	1289	    .RECBUF[UAF$W_DFWSCNT] ,
;	1290	    .RECBUF[UAF$W_WSQUOTA] ,
;	1291	    .RECBUF[UAF$W_PGFLQUOTA]
;	1292	    ) ;
;	1293	
;	1294	
;	1295	PRINT_PRIV( RECBUF[UAF$Q_PRIV] ) ;
;	1296	END;



							    .PSECT  $PLIT$,NOWRT,NOEXE,2

					      00B18 P.ADK:  .BYTE   7							      ;
					      00B19 	    .ASCII  \DISCTLY\						      ;
					      00B20 P.ADL:  .BYTE   6							      ;
					      00B21 	    .ASCII  \DEFCLI\						      ;
					      00B27	    .BLKB   1
					      00B28 P.ADM:  .BYTE   0							      ;
					      00B28 	    .BLKB   0							      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 9-2
; Digital Equipment Corporation
;
					      00B29	    .BLKB   3

						    FLGSTR1=		P.ADK
						    FLGSTR2=		P.ADL
						    NULLSTR=		P.ADM


							    .PSECT  $CODE$,NOWRT,2

					 0E00 00392 SHOWUSER:
							    .WORD   Save R9,R10,R11					      ; 1199
		         59	0000V  CF  9E 00394 	    MOVAB   FAOOUT, R9						      ;
		         5A	0000'  CF  9E 00399 	    MOVAB   NULLSTR, R10					      ;
		         5B	0000'  CF  9E 0039E 	    MOVAB   RECBUF+139, R11					      ;
		  0000V  CF	       00  FB 003A3 	    CALLS   #0, GET_USER_RECORD					      ; 1247
		         03	       50  E8 003A8 	    BLBS    R0, 1$						      ;
				     00A3  31 003AB 	    BRW     6$							      ;
				       7E  D4 003AE 1$:     CLRL    -(SP)						      ; 1250
		         7E	  8D   AB  3C 003B0 	    MOVZWL  RECBUF+24, -(SP)					      ;
		         7E	  8F   AB  3C 003B4 	    MOVZWL  RECBUF+26, -(SP)					      ;
				  85   AB  9F 003B8 	    PUSHAB  RECBUF+16						      ; 1256
				       08  DD 003BB 	    PUSHL   #8							      ; 1250
				  E9   AB  9F 003BD 	    PUSHAB  RECBUF+116						      ; 1254
				       14  DD 003C0 	    PUSHL   #20							      ; 1250
				FF75   CB  9F 003C2 	    PUSHAB  RECBUF						      ; 1252
				       0C  DD 003C6 	    PUSHL   #12							      ; 1250
				FE38   CA  9F 003C8 	    PUSHAB  SHOWMSG1						      ; 1199
		         69	       0A  FB 003CC 	    CALLS   #10, FAOOUT						      ; 1250
				  B1   AB  9F 003CF 	    PUSHAB  RECBUF+60						      ; 1263
				  91   AB  9F 003D2 	    PUSHAB  RECBUF+28						      ; 1262
				FE78   CA  9F 003D5 	    PUSHAB  SHOWMSG2						      ; 1199
		         69	       03  FB 003D9 	    CALLS   #3, FAOOUT						      ; 1261
	   06	         6B	       01  E1 003DC 	    BBC     #1, RECBUF+139, 2$					      ; 1269
		         50	  F8   AA  9E 003E0 	    MOVAB   FLGSTR2, R0						      ; 1199
				       03  11 003E4 	    BRB     3$							      ; 1269
		         50	       6A  9E 003E6 2$:     MOVAB   NULLSTR, R0						      ; 1199
				       50  DD 003E9 3$:     PUSHL   R0							      ; 1269
		         06	       6B  E9 003EB 	    BLBC    RECBUF+139, 4$					      ; 1268
		         50	  F0   AA  9E 003EE 	    MOVAB   FLGSTR1, R0						      ; 1199
				       03  11 003F2 	    BRB     5$							      ; 1268
		         50	       6A  9E 003F4 4$:     MOVAB   NULLSTR, R0						      ; 1199
				       50  DD 003F7 5$:     PUSHL   R0							      ; 1268
				  05   AB  9F 003F9 	    PUSHAB  RECBUF+144						      ; 1267
				FE94   CA  9F 003FC 	    PUSHAB  SHOWMSG3						      ; 1199
		         69	       04  FB 00400 	    CALLS   #4, FAOOUT						      ; 1266
		         7E	  D7   AB  3C 00403 	    MOVZWL  RECBUF+98, -(SP)					      ; 1272
		         7E	  D5   AB  3C 00407 	    MOVZWL  RECBUF+96, -(SP)					      ;
		         7E	  E5   AB  3C 0040B 	    MOVZWL  RECBUF+112, -(SP)					      ;
		         7E	  FF   AB  9A 0040F 	    MOVZBL  RECBUF+138, -(SP)					      ;
		         7E	  DF   AB  3C 00413 	    MOVZWL  RECBUF+106, -(SP)					      ;
				  C1   AB  9F 00417 	    PUSHAB  RECBUF+76						      ; 1274
				       08  DD 0041A 	    PUSHL   #8							      ; 1272
				FEC4   CA  9F 0041C 	    PUSHAB  SHOWMSG5						      ; 1199
		         69	       08  FB 00420 	    CALLS   #8, FAOOUT						      ; 1272
		         7E	  DD   AB  3C 00423 	    MOVZWL  RECBUF+104, -(SP)					      ; 1282

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 9-3
; Digital Equipment Corporation
;
		         7E	  DB   AB  3C 00427 	    MOVZWL  RECBUF+102, -(SP)					      ;
		         7E	  D9   AB  3C 0042B 	    MOVZWL  RECBUF+100, -(SP)					      ;
				FF10   CA  9F 0042F 	    PUSHAB  SHOWMSG6						      ; 1199
		         69	       04  FB 00433 	    CALLS   #4, FAOOUT						      ; 1282
		         7E	  E7   AB  3C 00436 	    MOVZWL  RECBUF+114, -(SP)					      ; 1288
		         7E	  E1   AB  3C 0043A 	    MOVZWL  RECBUF+108, -(SP)					      ;
		         7E	  E3   AB  3C 0043E 	    MOVZWL  RECBUF+110, -(SP)					      ;
				FF38   CA  9F 00442 	    PUSHAB  SHOWMSG7						      ; 1199
		         69	       04  FB 00446 	    CALLS   #4, FAOOUT						      ; 1288
				  CD   AB  9F 00449 	    PUSHAB  RECBUF+88						      ; 1295
		  0000V  CF	       01  FB 0044C 	    CALLS   #1, PRINT_PRIV					      ;
				       50  D4 00451 6$:     CLRL    R0							      ; 1199
					   04 00453 	    RET     							      ;

; Routine Size:  194 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 10
; Digital Equipment Corporation
;
;	1297	ROUTINE PRINT_PRIV( PRVADR ) =
;	1298	BEGIN
;	1299	
;	1300	!++
;	1301	!
;	1302	! FUNCTIONAL DESCRIPTION:
;	1303	!
;	1304	!	Routine to output the names of the privilege bits set
;	1305	!	in the privilege vector supplied.
;	1306	!
;	1307	! INPUTS:
;	1308	!
;	1309	!	PRVADR - the address of the privilege vector
;	1310	!
;	1311	! IMPLICIT INPUTS:
;	1312	!
;	1313	!	PRV$AB_NAMES - table of privilege names and bit numbers
;	1314	!
;	1315	! OUTPUTS:
;	1316	!
;	1317	!	none
;	1318	!
;	1319	! IMPLICIT OUTPUTS:
;	1320	!
;	1321	!	none
;	1322	!
;	1323	! ROUTINE VALUE:
;	1324	!
;	1325	!	none
;	1326	!
;	1327	! SIDE EFFECTS:
;	1328	!
;	1329	!	bit names are output to sysout
;	1330	!
;	1331	!--
;	1332	
;	1333	LOCAL
;	1334		POINTER,				! current location in PRV$AB_NAMES
;	1335		PRVBUF: VECTOR[100,BYTE],		! buffer to build counted cstring
;	1336		PRVCNT,					! number of names in buffer
;	1337		PRVPTR,					! index into PRVBUF
;	1338		SYMLEN,					! length of bit name string
;	1339		SYMMIN ,				! minimum symbol length
;	1340		SYMVAL ;				! value ( bit number )
;	1341	
;	1342	!
;	1343	! Output the privilege message and initialize the table.
;	1344	! The first byte of the buffer is left for the length, and the next
;	1345	! three are blank filled to cause some indentation.
;	1346	!
;	1347	
;	1348	FAOOUT( PRVSTR1 ) ;
;	1349	PRVCNT = 0 ;					! none in buffer now
;	1350	PRVBUF = '    ' ;				! insert blanks at start
;	1351	PRVPTR = 4 ;					! building cstring, start at second longword

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 10-1
; Digital Equipment Corporation
;
;	1352	POINTER = PRV$AB_NAMES ;			! point to symbol name table
;	1353	
;	1354	WHILE TRUE
;	1355	DO 
;	1356	    BEGIN
;	1357	
;	1358	    !
;	1359	    ! Pick up the next bit name and number.  If the bit is set, insert
;	1360	    ! the bit name into the buffer.   When seven names have been inerted
;	1361	    ! output them to the user.
;	1362	    !
;	1363	
;	1364	    SYMMIN = .(.POINTER)<0,8> ;			! pick up min symbol size
;	1365	    POINTER = .POINTER + 1;
;	1366	    IF .SYMMIN EQL 0 THEN EXITLOOP ;		! done if zero symbol min
;	1367	    SYMVAL = .(.POINTER)<0,8> ;			! get bit number
;	1368	    POINTER = .POINTER + 1 ;
;	1369	    SYMLEN = .(.POINTER)<0,8> ;			! get name string length
;	1370	    POINTER = .POINTER + 1 ;			! point to string
;	1371	    IF .(.PRVADR)<.SYMVAL,1>
;	1372	    THEN
;	1373	 	BEGIN
;	1374	
;	1375		!
;	1376		! bit is set.  see if there's room in the buffer
;	1377		! and insert it if so, else output the buffer and start from scratch.
;	1378		!
;	1379	
;	1380		IF .PRVCNT GTR 7
;	1381		THEN
;	1382		    BEGIN
;	1383		    PRVBUF[0] = .PRVPTR - 1 ;		! insert cstring length
;	1384		    FAOOUT( PRVBUF[0] ) ;		! output strings
;	1385		    PRVCNT = 0 ;			! reset pointers
;	1386		    PRVPTR = 4 ;
;	1387		    END ;
;	1388	
;	1389		CH$MOVE( .SYMLEN , .POINTER , PRVBUF[.PRVPTR] ) ;
;	1390		PRVPTR = .PRVPTR + .SYMLEN ;	! move pointer over symbol
;	1391		PRVBUF[.PRVPTR] = %CHAR(' ') ;	! insert blank character
;	1392		PRVPTR = .PRVPTR + 1 ;		! advance over blank
;	1393		PRVCNT = .PRVCNT + 1 ;		! one more name in buffer
;	1394		END;
;	1395	
;	1396	    POINTER = .POINTER + .SYMLEN ;		! update table pointer over name
;	1397	    END;
;	1398	
;	1399	!
;	1400	! Table used up.  If anything is in the buffer, print it.
;	1401	!
;	1402	
;	1403	IF .PRVCNT GTR 0
;	1404	THEN
;	1405	    BEGIN
;	1406	    PRVBUF[0] = .PRVPTR - 1 ;		! make into counted string

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 10-2
; Digital Equipment Corporation
;
;	1407	    FAOOUT( PRVBUF[0] ) ;
;	1408	    END;
;	1409	
;	1410	END;





					 0FFC 00454 PRINT_PRIV:
							    .WORD   Save R2,R3,R4,R5,R6,R7,R8,R9,R10,R11		      ; 1297
		         5E	  9C   AE  9E 00456 	    MOVAB   -100(SP), SP					      ;
				0000'  CF  9F 0045A 	    PUSHAB  PRVSTR1						      ;
		  0000V  CF	       01  FB 0045E 	    CALLS   #1, FAOOUT						      ; 1348
				       58  D4 00463 	    CLRL    PRVCNT						      ; 1349
		         6E 20202020   8F  D0 00465 	    MOVL    #538976288, PRVBUF					      ; 1350
		         56	       04  D0 0046C 	    MOVL    #4, PRVPTR						      ; 1351
		         57	0000G  CF  9E 0046F 	    MOVAB   PRV$AB_NAMES, POINTER				      ; 1352
		         5A	       87  9A 00474 1$:     MOVZBL  (POINTER)+, SYMMIN					      ; 1364
				       33  13 00477 	    BEQL    4$							      ; 1366
		         5B	       87  9A 00479 	    MOVZBL  (POINTER)+, SYMVAL					      ; 1367
		         59	       87  9A 0047C 	    MOVZBL  (POINTER)+, SYMLEN					      ; 1369
	   23	    04   BC	       5B  E1 0047F 	    BBC     SYMVAL, @PRVADR, 3$					      ; 1371
		         07	       58  D1 00484 	    CMPL    PRVCNT, #7						      ; 1380
				       10  15 00487 	    BLEQ    2$							      ;
	   6E	         56	       01  83 00489 	    SUBB3   #1, PRVPTR, PRVBUF					      ; 1383
				       5E  DD 0048D 	    PUSHL   SP							      ; 1384
		  0000V  CF	       01  FB 0048F 	    CALLS   #1, FAOOUT						      ;
				       58  D4 00494 	    CLRL    PRVCNT						      ; 1385
		         56	       04  D0 00496 	    MOVL    #4, PRVPTR						      ; 1386
	 6E46	         67	       59  28 00499 2$:     MOVC3   SYMLEN, (POINTER), PRVBUF[PRVPTR]			      ; 1389
		         56	       59  C0 0049E 	    ADDL2   SYMLEN, PRVPTR					      ; 1390
		       864E	       20  90 004A1 	    MOVB    #32, PRVBUF[PRVPTR]					      ; 1391
				       58  D6 004A5 	    INCL    PRVCNT						      ; 1393
		         57	       59  C0 004A7 3$:     ADDL2   SYMLEN, POINTER					      ; 1396
				       C8  11 004AA 	    BRB     1$							      ; 1354
				       58  D5 004AC 4$:     TSTL    PRVCNT						      ; 1403
				       0B  15 004AE 	    BLEQ    5$							      ;
	   6E	         56	       01  83 004B0 	    SUBB3   #1, PRVPTR, PRVBUF					      ; 1406
				       5E  DD 004B4 	    PUSHL   SP							      ; 1407
		  0000V  CF	       01  FB 004B6 	    CALLS   #1, FAOOUT						      ;
				       50  D4 004BB 5$:     CLRL    R0							      ; 1297
					   04 004BD 	    RET     							      ;

; Routine Size:  106 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 11
; Digital Equipment Corporation
;
;	1411	ROUTINE REMOVE =
;	1412	BEGIN
;	1413	
;	1414	!++
;	1415	!
;	1416	! FUNCTIONAL DESCRIPTION:
;	1417	!
;	1418	!	Routine to delete a user record from the UAF file.
;	1419	!
;	1420	! INPUTS:
;	1421	!
;	1422	!	none
;	1423	!
;	1424	! OUTPUTS:
;	1425	!
;	1426	!	The first longword of the username in the user record is
;	1427	!	zeroed.  The next time ACCOUNTS is run, this record
;	1428	!	will be physically removed when the file is copied.
;	1429	!
;	1430	! ROUTINE VALUE:
;	1431	!
;	1432	!	none
;	1433	!
;	1434	! SIDE EFFECTS:
;	1435	!
;	1436	!	none
;	1437	!--
;	1438	
;	1439	!
;	1440	! Look for the record specified by the user.  Make sure
;	1441	! the DEFAULT and SYSTEM records are not removed.
;	1442	!
;	1443	
;	1444	IF NOT GET_USER_RECORD() THEN RETURN ;
;	1445	IF CH$EQL( .DEFUSER<0,8> , DEFUSER+1 , 12 , RECBUF[UAF$T_USERNAME] , ' ' )
;	1446	THEN
;	1447	    RETURN
;	1448		FAOOUT( REMDEF ) ;
;	1449	
;	1450	IF CH$EQL( .SYSUSER<0,8> , SYSUSER+1 , 12 , RECBUF[UAF$T_USERNAME] , ' ' )
;	1451	THEN
;	1452	    RETURN
;	1453		FAOOUT( REMSYS ) ;
;	1454	
;	1455	!
;	1456	! User record has been found and read into RECBUF
;	1457	! Zero the username field and update the record in the file
;	1458	!
;	1459	
;	1460	(RECBUF[UAF$T_USERNAME])<0,32> = 0 ;
;	1461	
;	1462	IF NOT RMSOK( $UPDATE( RAB=TMPRAB ) )
;	1463	THEN
;	1464	    FMT_SYS_MSG( REMERR , .RMSERR ) 
;	1465	ELSE

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 11-1
; Digital Equipment Corporation
;
;	1466	    BEGIN
;	1467	    MODIFY_FLAG = TRUE ;				! mark file as modified
;	1468	    FAOOUT( REMMSG ) ;
;	1469	    END;
;	1470	END;





					 080C 004BE REMOVE: .WORD   Save R2,R3,R11					      ; 1411
		         5B	0000'  CF  9E 004C0 	    MOVAB   RECBUF, R11						      ;
		  0000V  CF	       00  FB 004C5 	    CALLS   #0, GET_USER_RECORD					      ; 1444
		         5F	       50  E9 004CA 	    BLBC    R0, 5$						      ;
		         50	0000'  CF  9A 004CD 	    MOVZBL  DEFUSER, R0						      ; 1445
	   20	  0000'  CF	       50  2D 004D2 	    CMPC5   R0, DEFUSER+1, #32, #12, RECBUF			      ;
		         6B	       0C     004D8									      ;
				       06  12 004DA 	    BNEQ    1$							      ;
				0000'  CF  9F 004DC 	    PUSHAB  REMDEF						      ; 1411
				       13  11 004E0 	    BRB     2$							      ; 1448
		         50	0000'  CF  9A 004E2 1$:     MOVZBL  SYSUSER, R0						      ; 1450
	   20	  0000'  CF	       50  2D 004E7 	    CMPC5   R0, SYSUSER+1, #32, #12, RECBUF			      ;
		         6B	       0C     004ED									      ;
				       0A  12 004EF 	    BNEQ    3$							      ;
				0000'  CF  9F 004F1 	    PUSHAB  REMSYS						      ; 1411
		  0000V  CF	       01  FB 004F5 2$:     CALLS   #1, FAOOUT						      ; 1453
					   04 004FA 	    RET     							      ; 1452
				       6B  D4 004FB 3$:     CLRL    RECBUF						      ; 1460
				0128   CB  9F 004FD 	    PUSHAB  TMPRAB						      ; 1462
	      00000000G  9F	       01  FB 00501 	    CALLS   #1, @#SYS$UPDATE					      ;
		  00B8   CB	       50  D0 00508 	    MOVL    R0, RMSERR						      ;
		         0F	       50  E8 0050D 	    BLBS    R0, 4$						      ;
				00B8   CB  DD 00510 	    PUSHL   RMSERR						      ; 1464
				0000'  CF  9F 00514 	    PUSHAB  REMERR						      ; 1411
		  0000V  CF	       02  FB 00518 	    CALLS   #2, FMT_SYS_MSG					      ; 1464
				       0D  11 0051D 	    BRB     5$							      ; 1462
		    F0   AB	       01  D0 0051F 4$:     MOVL    #1, MODIFY_FLAG					      ; 1467
				0000'  CF  9F 00523 	    PUSHAB  REMMSG						      ; 1411
		  0000V  CF	       01  FB 00527 	    CALLS   #1, FAOOUT						      ; 1468
				       50  D4 0052C 5$:     CLRL    R0							      ; 1411
					   04 0052E 	    RET     							      ;

; Routine Size:  113 bytes


;	1471	

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 12
; Digital Equipment Corporation
;
;	1472	ROUTINE DEFAULT =
;	1473	BEGIN
;	1474	
;	1475	!++
;	1476	!
;	1477	! FUNCTIONAL DESCRIPTION:
;	1478	!
;	1479	!	Change a default value in the default record.
;	1480	!
;	1481	! INPUTS:
;	1482	!
;	1483	!	none
;	1484	!
;	1485	! IMPLICIT INPUTS:
;	1486	!
;	1487	!	none
;	1488	!
;	1489	! OUTPUTS:
;	1490	!
;	1491	!	none
;	1492	!
;	1493	! IMPLICIT OUTPUTS:
;	1494	!
;	1495	!	none
;	1496	!
;	1497	! ROUTINE VALUE:
;	1498	!
;	1499	!	none
;	1500	!
;	1501	! SIDE EFFECTS:
;	1502	!
;	1503	!	none
;	1504	!--
;	1505	
;	1506	
;	1507	!
;	1508	! Locate default record and load it into RECBUF
;	1509	!
;	1510	
;	1511	LOCATE_USER( .DEFUSER<0,8> , DEFUSER+1 ) ;
;	1512	
;	1513	!
;	1514	! Update values supplied and exit if errors.
;	1515	!
;	1516	
;	1517	IF NOT UPDATE_RECORD() THEN RETURN ;
;	1518	
;	1519	!
;	1520	! Now write the modified record back into the DEFAULT_RECORD buffer.
;	1521	!
;	1522	
;	1523	CH$MOVE( UAF$C_LENGTH , RECBUF , DEFAULT_RECORD  ) ;
;	1524	
;	1525	!
;	1526	! Update the default record in the file.  Note that file has changed.

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 12-1
; Digital Equipment Corporation
;
;	1527	!
;	1528	
;	1529	IF NOT RMSOK( $UPDATE( RAB=TMPRAB ) )
;	1530	THEN
;	1531	    FMT_SYS_MSG( MDFYERR , .RMSERR )
;	1532	ELSE
;	1533	    BEGIN
;	1534	    MODIFY_FLAG = TRUE ;
;	1535	    FAOOUT( MDFYMSG ) ;
;	1536	    END;
;	1537	END;





					 003C 0052F DEFAULT:.WORD   Save R2,R3,R4,R5					      ; 1472
				0000'  CF  9F 00531 	    PUSHAB  DEFUSER+1						      ; 1511
		         7E	0000'  CF  9A 00535 	    MOVZBL  DEFUSER, -(SP)					      ;
		  0000V  CF	       02  FB 0053A 	    CALLS   #2, LOCATE_USER					      ;
		  0000V  CF	       00  FB 0053F 	    CALLS   #0, UPDATE_RECORD					      ; 1517
		         3A	       50  E9 00544 	    BLBC    R0, 2$						      ;
    0000'  CF	  0000'  CF	00B8   8F  28 00547 	    MOVC3   #184, RECBUF, DEFAULT_RECORD			      ; 1523
				0000'  CF  9F 00551 	    PUSHAB  TMPRAB						      ; 1529
	      00000000G  9F	       01  FB 00555 	    CALLS   #1, @#SYS$UPDATE					      ;
		  0000'  CF	       50  D0 0055C 	    MOVL    R0, RMSERR						      ;
		         0F	       50  E8 00561 	    BLBS    R0, 1$						      ;
				0000'  CF  DD 00564 	    PUSHL   RMSERR						      ; 1531
				0000'  CF  9F 00568 	    PUSHAB  MDFYERR						      ; 1472
		  0000V  CF	       02  FB 0056C 	    CALLS   #2, FMT_SYS_MSG					      ; 1531
				       0E  11 00571 	    BRB     2$							      ; 1529
		  0000'  CF	       01  D0 00573 1$:     MOVL    #1, MODIFY_FLAG					      ; 1534
				0000'  CF  9F 00578 	    PUSHAB  MDFYMSG						      ; 1472
		  0000V  CF	       01  FB 0057C 	    CALLS   #1, FAOOUT						      ; 1535
				       50  D4 00581 2$:     CLRL    R0							      ; 1472
					   04 00583 	    RET     							      ;

; Routine Size:  85 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 13
; Digital Equipment Corporation
;
;	1538	ROUTINE LIST =
;	1539	BEGIN
;	1540	
;	1541	!++
;	1542	!
;	1543	! FUNCTIONAL DESCRIPTION:
;	1544	!
;	1545	!	Provide an ASCII listing of the most important record information
;	1546	!	(username, owner, etc.) for each record of the file.  The information
;	1547	!	is output to file named 'SYSUAF.LST'.
;	1548	!
;	1549	! INPUTS:
;	1550	!
;	1551	!	none
;	1552	!
;	1553	! IMPLICIT INPUTS:
;	1554	!
;	1555	!	LSTFAB and LSTRAB - rms data structures for the file
;	1556	!
;	1557	! OUTPUTS:
;	1558	!
;	1559	!	none
;	1560	!
;	1561	! IMPLICIT OUTPUTS:
;	1562	!
;	1563	!	none
;	1564	!
;	1565	! ROUTINE VALUE:
;	1566	!
;	1567	!	None
;	1568	!
;	1569	! SIDE EFFECTS:
;	1570	!
;	1571	!	none
;	1572	!--
;	1573	
;	1574	LABEL
;	1575		MAINLOOP ;
;	1576	LOCAL
;	1577		FAODSC: VECTOR[2,LONG] ,			! fao input descriptor
;	1578		LSTBUF: VECTOR[130,LONG] ,			! output buffer
;	1579		LSTDSC: VECTOR[2,LONG] ;			! output buffer descriptor
;	1580	
;	1581	!
;	1582	! Open the output file and reset the UAF file to be read
;	1583	!
;	1584	
;	1585	 IF RMSBAD( $CREATE(FAB=LSTFAB) )
;	1586	THEN
;	1587	    RETURN FAOOUT( LSTERR , .RMSERR ) ;
;	1588	LSTRAB[RAB$L_RBF] = LSTBUF ;
;	1589	LSTRAB[RAB$W_RSZ] = 130 ;
;	1590	$CONNECT (RAB=LSTRAB) ;
;	1591	REWIND( TMPRAB ) ;
;	1592	

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 13-1
; Digital Equipment Corporation
;
;	1593	!
;	1594	! Output the header record for the file
;	1595	!
;	1596	
;	1597	FAODSC[0] = .LSTSTR1<0,8> ;
;	1598	FAODSC[1] = LSTSTR1 + 1 ;
;	1599	LSTDSC[0] = 130 ;
;	1600	LSTDSC[1] = LSTBUF ;
;	1601	
;	1602	FAOOUT( LSTMSG1 ) ;					! announce starting
;	1603	
;	1604	MAINLOOP:
;	1605	BEGIN
;	1606	
;	1607	WHILE TRUE 
;	1608	DO
;	1609	    BEGIN
;	1610	
;	1611	    !
;	1612	    ! Output each record.  Exit when file complete.
;	1613	    !
;	1614	
;	1615	    CH$FILL( ' ' , 130 , LSTBUF ) ;
;	1616	    $FAO( FAODSC , 0 , LSTDSC ,
;     P 1617		UAF$S_OWNER ,
;     P 1618		RECBUF[UAF$T_OWNER] ,
;     P 1619		UAF$S_USERNAME ,
;     P 1620		RECBUF[UAF$T_USERNAME] ,
;     P 1621		.RECBUF[UAF$W_GRP] ,
;     P 1622		.RECBUF[UAF$W_MEM] ,
;     P 1623		UAF$S_ACCOUNT ,
;     P 1624		RECBUF[UAF$T_ACCOUNT] ,
;     P 1625		( IF .(RECBUF[UAF$Q_PRIV]) < $BITPOSITION(PRV$V_CMKRNL) , 1 >
;     P 1626			THEN LSTPRV
;     P 1627			ELSE LSTNOPRV 
;     P 1628		 ) ,
;     P 1629		.RECBUF[UAF$B_PRI] ,
;     P 1630		RECBUF[UAF$T_DEFDEV] ,
;     P 1631		RECBUF[UAF$T_DEFDIR] 
;     P 1632		) ;
;	1633	
;	1634	    $PUT( RAB=LSTRAB ) ;
;	1635	
;	1636	    !
;	1637	    ! Check for deleted users while reading records.
;	1638	    !
;	1639	
;	1640	    DO
;	1641		IF RMSBAD( $GET(RAB=TMPRAB) ) THEN LEAVE MAINLOOP
;	1642	    UNTIL
;	1643		.(RECBUF[UAF$T_USERNAME])<0,32> NEQ 0 ;
;	1644	
;	1645	    FAODSC[0] = .LSTSTR2<0,8> ;
;	1646	    FAODSC[1] = LSTSTR2 + 1 ;
;	1647	    END;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 13-2
; Digital Equipment Corporation
;
;	1648	
;	1649	END;
;	1650	
;	1651	FAOOUT( LSTMSG2 ) ;
;	1652	$DISCONNECT( RAB=LSTRAB ) ;
;	1653	$CLOSE( FAB=LSTFAB ) ;
;	1654	END;



							    .GLOBL  SYS$FAO

					 0E3C 00584 LIST:   .WORD   Save R2,R3,R4,R5,R9,R10,R11				      ; 1538
		         59	0000V  CF  9E 00586 	    MOVAB   FAOOUT, R9						      ;
		         5A	0000'  CF  9E 0058B 	    MOVAB   LSTERR, R10						      ;
		         5B	0000'  CF  9E 00590 	    MOVAB   RMSERR, R11						      ;
		         5E	FDE8   CE  9E 00595 	    MOVAB   -536(SP), SP					      ;
				0270   CB  9F 0059A 	    PUSHAB  LSTFAB						      ; 1585
	      00000000G  9F	       01  FB 0059E 	    CALLS   #1, @#SYS$CREATE					      ;
		         6B	       50  D0 005A5 	    MOVL    R0, RMSERR						      ;
		         08	       50  E8 005A8 	    BLBS    R0, 1$						      ;
				       6B  DD 005AB 	    PUSHL   RMSERR						      ; 1587
				       5A  DD 005AD 	    PUSHL   R10							      ; 1538
		         69	       02  FB 005AF 	    CALLS   #2, FAOOUT						      ; 1587
					   04 005B2 	    RET     							      ;
		  02E8   CB	  08   AE  9E 005B3 1$:     MOVAB   LSTBUF, LSTRAB+40					      ; 1588
		  02E2   CB	  82   8F  9B 005B9 	    MOVZBW  #130, LSTRAB+34					      ; 1589
				02C0   CB  9F 005BF 	    PUSHAB  LSTRAB						      ; 1590
	      00000000G  9F	       01  FB 005C3 	    CALLS   #1, @#SYS$CONNECT					      ;
				  70   AB  9F 005CA 	    PUSHAB  TMPRAB						      ; 1591
	      00000000G  9F	       01  FB 005CD 	    CALLS   #1, @#SYS$REWIND					      ;
		    F8   AD	  68   AA  9A 005D4 	    MOVZBL  LSTSTR1, FAODSC					      ; 1597
		    FC   AD	  69   AA  9E 005D9 	    MOVAB   LSTSTR1+1, FAODSC+4					      ; 1598
		         6E	  82   8F  9A 005DE 	    MOVZBL  #130, LSTDSC					      ; 1599
		    04   AE	  08   AE  9E 005E2 	    MOVAB   LSTBUF, LSTDSC+4					      ; 1600
				  1C   AA  9F 005E7 	    PUSHAB  LSTMSG1						      ; 1538
		         69	       01  FB 005EA 	    CALLS   #1, FAOOUT						      ; 1602
	   20	         6E	       00  2C 005ED 2$:     MOVC5   #0, (SP), #32, #130, LSTBUF				      ; 1615
		    08   AE	0082   8F     005F1									      ;
				FF64   CB  9F 005F6 	    PUSHAB  RECBUF+28						      ; 1632
				  84   AB  9F 005FA 	    PUSHAB  RECBUF+60						      ;
		         7E	  D2   AB  9A 005FD 	    MOVZBL  RECBUF+138, -(SP)					      ;
		         06	  A0   AB  E9 00601 	    BLBC    RECBUF+88, 3$					      ;
		         50	  60   AA  9E 00605 	    MOVAB   LSTPRV, R0						      ; 1538
				       04  11 00609 	    BRB     4$							      ; 1632
		         50	  58   AA  9E 0060B 3$:     MOVAB   LSTNOPRV, R0					      ; 1538
				       50  DD 0060F 4$:     PUSHL   R0							      ; 1632
				FF58   CB  9F 00611 	    PUSHAB  RECBUF+16						      ;
				       08  DD 00615 	    PUSHL   #8							      ;
		         7E	FF60   CB  3C 00617 	    MOVZWL  RECBUF+24, -(SP)					      ;
		         7E	FF62   CB  3C 0061C 	    MOVZWL  RECBUF+26, -(SP)					      ;
				FF48   CB  9F 00621 	    PUSHAB  RECBUF						      ;
				       0C  DD 00625 	    PUSHL   #12							      ;
				  BC   AB  9F 00627 	    PUSHAB  RECBUF+116						      ;
				       14  DD 0062A 	    PUSHL   #20							      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 13-3
; Digital Equipment Corporation
;
				  30   AE  9F 0062C 	    PUSHAB  LSTDSC						      ;
				       7E  D4 0062F 	    CLRL    -(SP)						      ;
				  F8   AD  9F 00631 	    PUSHAB  FAODSC						      ;
	      00000000G  9F	       0F  FB 00634 	    CALLS   #15, @#SYS$FAO					      ;
				02C0   CB  9F 0063B 	    PUSHAB  LSTRAB						      ; 1634
	      00000000G  9F	       01  FB 0063F 	    CALLS   #1, @#SYS$PUT					      ;
				  70   AB  9F 00646 5$:     PUSHAB  TMPRAB						      ; 1641
	      00000000G  9F	       01  FB 00649 	    CALLS   #1, @#SYS$GET					      ;
		         6B	       50  D0 00650 	    MOVL    R0, RMSERR						      ;
		         14	       50  E9 00653 	    BLBC    R0, 6$						      ;
				FF48   CB  D5 00656 	    TSTL    RECBUF						      ; 1643
				       EA  13 0065A 	    BEQL    5$							      ;
		    F8   AD	00C0   CA  9A 0065C 	    MOVZBL  LSTSTR2, FAODSC					      ; 1645
		    FC   AD	00C1   CA  9E 00662 	    MOVAB   LSTSTR2+1, FAODSC+4					      ; 1646
				       83  11 00668 	    BRB     2$							      ; 1607
				  34   AA  9F 0066A 6$:     PUSHAB  LSTMSG2						      ; 1538
		         69	       01  FB 0066D 	    CALLS   #1, FAOOUT						      ; 1651
				02C0   CB  9F 00670 	    PUSHAB  LSTRAB						      ; 1652
	      00000000G  9F	       01  FB 00674 	    CALLS   #1, @#SYS$DISCONNECT				      ;
				0270   CB  9F 0067B 	    PUSHAB  LSTFAB						      ; 1653
	      00000000G  9F	       01  FB 0067F 	    CALLS   #1, @#SYS$CLOSE					      ;
				       50  D4 00686 	    CLRL    R0							      ; 1538
					   04 00688 	    RET     							      ;

; Routine Size:  261 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 14
; Digital Equipment Corporation
;
;	1655	ROUTINE LOCATE_USER( SIZE , BUFFER ) =
;	1656	BEGIN
;	1657	
;	1658	!++
;	1659	!
;	1660	! FUNCTIONAL DESCRIPTION:
;	1661	!
;	1662	!	Routine to locate a user record in the UAF file.
;	1663	!
;	1664	! INPUTS:
;	1665	!
;	1666	!	SIZE - size of the username string
;	1667	!	BUFFER - address of the username string
;	1668	!
;	1669	! IMPLICIT INPUTS:
;	1670	!
;	1671	!	none
;	1672	!
;	1673	! OUTPUTS:
;	1674	!
;	1675	!	none
;	1676	!
;	1677	! IMPLICIT OUTPUTS:
;	1678	!
;	1679	!	If record is found, RECBUF contains the located record.  If not
;	1680	!	found, the file is pointing to EOF.
;	1681	!
;	1682	! ROUTINE VALUE:
;	1683	!
;	1684	!	true -> record found
;	1685	!	false -> record not found
;	1686	!
;	1687	! SIDE EFFECTS:
;	1688	!
;	1689	!	none
;	1690	!--
;	1691	
;	1692	LOCAL
;	1693		FOUND ;					! record found indicator
;	1694	
;	1695	FOUND = TRUE ;					! assume record was found
;	1696	RECBUF = 0 ;					! clear buffer for first test
;	1697	REWIND( TMPRAB ) ;
;	1698	
;	1699	WHILE NOT CH$EQL( .SIZE , .BUFFER , UAF$S_USERNAME , RECBUF[UAF$T_USERNAME] ,' ' ) 
;	1700	DO
;	1701	    IF RMSBAD( $GET( RAB=TMPRAB ))
;	1702	    THEN
;	1703		IF .RMSERR EQL RMS$_EOF THEN EXITLOOP FOUND = FALSE 
;	1704		ELSE FATAL( GETERR , .RMSERR ) ;
;	1705	
;	1706	!
;	1707	! Reset RSZ (record size) field in RAB in case it got
;	1708	! wiped out by an EOF on the file.
;	1709	!

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 14-1
; Digital Equipment Corporation
;
;	1710	
;	1711	TMPRAB[RAB$W_RSZ] = UAF$C_LENGTH ;
;	1712	
;	1713	RETURN .FOUND ;					! return indicator
;	1714	END;





					 081C 00689 LOCATE_USER:
							    .WORD   Save R2,R3,R4,R11					      ; 1655
		         5B	0000'  CF  9E 0068B 	    MOVAB   RMSERR, R11						      ;
		         54	       01  D0 00690 	    MOVL    #1, FOUND						      ; 1695
				FF48   CB  D4 00693 	    CLRL    RECBUF						      ; 1696
				  70   AB  9F 00697 	    PUSHAB  TMPRAB						      ; 1697
	      00000000G  9F	       01  FB 0069A 	    CALLS   #1, @#SYS$REWIND					      ;
	   20	    08   BC	  04   AC  2D 006A1 1$:     CMPC5   SIZE, @BUFFER, #32, #12, RECBUF			      ; 1699
		  FF48   CB	       0C     006A7									      ;
				       2F  13 006AB 	    BEQL    3$							      ;
				  70   AB  9F 006AD 	    PUSHAB  TMPRAB						      ; 1701
	      00000000G  9F	       01  FB 006B0 	    CALLS   #1, @#SYS$GET					      ;
		         6B	       50  D0 006B7 	    MOVL    R0, RMSERR						      ;
		         E4	       50  E8 006BA 	    BLBS    R0, 1$						      ;
	      0001827A   8F	       6B  D1 006BD 	    CMPL    RMSERR, #98938					      ; 1703
				       04  12 006C4 	    BNEQ    2$							      ;
				       54  D4 006C6 	    CLRL    FOUND						      ;
				       12  11 006C8 	    BRB     3$							      ;
				       6B  DD 006CA 2$:     PUSHL   RMSERR						      ; 1704
				0000'  CF  9F 006CC 	    PUSHAB  GETERR						      ; 1655
		  0000V  CF	       02  FB 006D0 	    CALLS   #2, FMT_SYS_MSG					      ; 1704
		  0000V  CF	       00  FB 006D5 	    CALLS   #0, ACC$EXIT					      ;
				       C5  11 006DA 	    BRB     1$							      ; 1699
		  0092   CB	  B8   8F  9B 006DC 3$:     MOVZBW  #184, TMPRAB+34					      ; 1711
		         50	       54  D0 006E2 	    MOVL    FOUND, R0						      ; 1713
					   04 006E5 	    RET     							      ; 1655

; Routine Size:  93 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 15
; Digital Equipment Corporation
;
;	1715	ROUTINE BUILD_INI_RECS =
;	1716	BEGIN
;	1717	
;	1718	!++
;	1719	!
;	1720	! FUNCTIONAL DESCRIPTION:
;	1721	!
;	1722	!	Build the initial records for the creation of a new UAF file.
;	1723	!	The user default record is built in the DEFAULT_RECORD
;	1724	!	buffer and the system manager record is built in RECBUF.
;	1725	!
;	1726	! INPUTS:
;	1727	!
;	1728	!	none
;	1729	!
;	1730	! IMPLICIT INPUTS:
;	1731	!
;	1732	!	none
;	1733	!
;	1734	! OUTPUTS:
;	1735	!
;	1736	!	none
;	1737	!
;	1738	! IMPLICIT OUTPUTS:
;	1739	!
;	1740	!	default record is built in DEFAULT_RECORD
;	1741	!	system record is built in RECBUF
;	1742	!
;	1743	! ROUTINE VALUE:
;	1744	!
;	1745	!	none
;	1746	!
;	1747	! SIDE EFFECTS:
;	1748	!
;	1749	!	none
;	1750	!--
;	1751	
;	1752	LOCAL
;	1753		PWDDSC: VECTOR[2,LONG] ;		! descriptor for password
;	1754	
;	1755	!
;	1756	! username is blank filled
;	1757	!
;	1758	
;	1759	CH$COPY ( .DEFUSER<0,8> , DEFUSER+1 , %CHAR(' ') ,
;	1760			UAF$S_USERNAME , DEFAULT_RECORD[UAF$T_USERNAME] ) ;
;	1761	
;	1762	!
;	1763	! account name is blank filled
;	1764	!
;	1765	
;	1766	CH$COPY ( .DEFACT<0,8> , DEFACT+1 , %CHAR(' ') ,
;	1767			UAF$S_ACCOUNT , DEFAULT_RECORD[UAF$T_ACCOUNT] ) ;
;	1768	
;	1769	!

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 15-1
; Digital Equipment Corporation
;
;	1770	! quadword privilege mask
;	1771	!
;	1772	
;	1773	CH$MOVE( 8 , DEFPRIV , DEFAULT_RECORD[UAF$Q_PRIV] ) ;
;	1774	
;	1775	!
;	1776	! directory name is counted string
;	1777	!
;	1778	
;	1779	CH$COPY ( .DEFDIR<0,8> + 1 , DEFDIR , %CHAR(' ') ,
;	1780			UAF$S_DEFDIR , DEFAULT_RECORD[UAF$T_DEFDIR] ) ;
;	1781	
;	1782	!
;	1783	! device name is counted string
;	1784	!
;	1785	
;	1786	CH$COPY ( .DEFDEV<0,8> + 1 , DEFDEV , %CHAR(' ') ,
;	1787			UAF$S_DEFDEV , DEFAULT_RECORD[UAF$T_DEFDEV] ) ;
;	1788	
;	1789	!
;	1790	! CLI name is blank filled
;	1791	!
;	1792	
;	1793	CH$COPY ( .DEFCLI<0,8> , DEFCLI+1 , %CHAR(' ') ,
;	1794			UAF$S_DEFCLI , DEFAULT_RECORD[UAF$T_DEFCLI] ) ;
;	1795	
;	1796	!
;	1797	! owner name is blank filled
;	1798	!
;	1799	
;	1800	CH$COPY ( .DEFOWNER<0,8> , DEFOWNER+1 , %CHAR(' ') ,
;	1801			UAF$S_OWNER , DEFAULT_RECORD[UAF$T_OWNER] ) ;
;	1802	
;	1803	!
;	1804	! login command file name is counted string
;	1805	!
;	1806	
;	1807	CH$COPY( .DEFLGICMD<0,8>+1 , DEFLGICMD , %CHAR('') ,
;	1808			UAF$S_LGICMD , DEFAULT_RECORD[UAF$T_LGICMD] ) ;
;	1809	
;	1810	PWDDSC[0] = .DEFPASS<0,8> ;			! build password descriptor
;	1811	PWDDSC[1] = DEFPASS+1 ;
;	1812	DEFAULT_RECORD[UAF$L_PWD] = LGI$HPWD( PWDDSC ) ;
;	1813	
;	1814	DEFAULT_RECORD[UAF$W_GRP] = DEFGRP ;
;	1815	DEFAULT_RECORD[UAF$W_MEM] = DEFMEM ;
;	1816	DEFAULT_RECORD[UAF$W_BIOLM] = DEFBIOLM ;
;	1817	DEFAULT_RECORD[UAF$W_BYTLM] = DEFBYTLM ;
;	1818	DEFAULT_RECORD[UAF$W_DIOLM] = DEFDIOLM ;
;	1819	DEFAULT_RECORD[UAF$W_FILLM] = DEFFILLM ;
;	1820	DEFAULT_RECORD[UAF$B_FLAGS] = DEFFLAGS ;
;	1821	DEFAULT_RECORD[UAF$W_TQCNT] = DEFTQCNT ;
;	1822	DEFAULT_RECORD[UAF$W_PRCCNT] = DEFPRCCNT ;
;	1823	DEFAULT_RECORD[UAF$W_WSQUOTA] = DEFWSQUOTA ;
;	1824	DEFAULT_RECORD[UAF$W_DFWSCNT] = DEFDFWSCNT ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 15-2
; Digital Equipment Corporation
;
;	1825	DEFAULT_RECORD[UAF$W_ASTLM] = DEFASTLM ;
;	1826	DEFAULT_RECORD[UAF$W_PGFLQUOTA] = DEFPGFLQUOTA ;
;	1827	DEFAULT_RECORD[UAF$B_PRI] = DEFPRI ;
;	1828	
;	1829	
;	1830	
;	1831	CH$COPY( .SYSUSER<0,8> , SYSUSER+1 , %CHAR(' ') ,
;	1832			UAF$S_USERNAME , RECBUF[UAF$T_USERNAME] ) ;
;	1833	CH$COPY( .SYSACT<0,8> , SYSACT+1 , %CHAR(' ') ,
;	1834			UAF$S_ACCOUNT , RECBUF[UAF$T_ACCOUNT] ) ;
;	1835	CH$MOVE( 8 , SYSPRIV , RECBUF[UAF$Q_PRIV] ) ;
;	1836	CH$COPY ( .SYSDIR<0,8> + 1 , SYSDIR , %CHAR(' ') ,
;	1837			UAF$S_DEFDIR , RECBUF[UAF$T_DEFDIR] ) ;
;	1838	CH$COPY ( .SYSDEV<0,8> + 1 , SYSDEV , %CHAR(' ') ,
;	1839			UAF$S_DEFDEV , RECBUF[UAF$T_DEFDEV] ) ;
;	1840	CH$COPY ( .SYSCLI<0,8> , SYSCLI+1 , %CHAR(' ') ,
;	1841			UAF$S_DEFCLI , RECBUF[UAF$T_DEFCLI] ) ;
;	1842	CH$COPY( .SYSOWNER<0,8> , SYSOWNER+1 , %CHAR(' ') ,
;	1843			UAF$S_OWNER , RECBUF[UAF$T_OWNER] ) ;
;	1844	CH$COPY( .SYSLGICMD<0,8>+1 , DEFLGICMD , %CHAR('') , 
;	1845			UAF$S_LGICMD , RECBUF[UAF$T_LGICMD] ) ;
;	1846	
;	1847	PWDDSC[0] = .SYSPASS<0,8> ;
;	1848	PWDDSC[1] = SYSPASS+1 ;
;	1849	RECBUF[UAF$L_PWD] = LGI$HPWD( PWDDSC ) ;
;	1850	
;	1851	RECBUF[UAF$W_GRP] = SYSGRP ;
;	1852	RECBUF[UAF$W_MEM] = SYSMEM ;
;	1853	RECBUF[UAF$W_BIOLM] = SYSBIOLM ;
;	1854	RECBUF[UAF$W_BYTLM] = SYSBYTLM ;
;	1855	RECBUF[UAF$W_DIOLM] = SYSDIOLM ;
;	1856	RECBUF[UAF$W_FILLM] = SYSFILLM;
;	1857	RECBUF[UAF$B_FLAGS] = SYSFLAGS;
;	1858	RECBUF[UAF$W_TQCNT] = SYSTQCNT ;
;	1859	RECBUF[UAF$W_PRCCNT] = SYSPRCCNT ;
;	1860	RECBUF[UAF$W_WSQUOTA] = SYSWSQUOTA ;
;	1861	RECBUF[UAF$W_DFWSCNT] = SYSDFWSCNT ;
;	1862	RECBUF[UAF$W_ASTLM] = SYSASTLM ;
;	1863	RECBUF[UAF$W_PGFLQUOTA] = SYSPGFLQUOTA ;
;	1864	RECBUF[UAF$B_PRI] = SYSPRI ;
;	1865	END;





					 0C3C 006E6 BUILD_INI_RECS:
							    .WORD   Save R2,R3,R4,R5,R10,R11				      ; 1715
		         5A	0000'  CF  9E 006E8 	    MOVAB   DEFLGICMD, R10					      ;
		         5B	0000'  CF  9E 006ED 	    MOVAB   DEFAULT_RECORD, R11					      ;
		         5E	       08  C2 006F2 	    SUBL2   #8, SP						      ;
		         50	  DC   AA  9A 006F5 	    MOVZBL  DEFUSER, R0						      ; 1759
	   20	    DD   AA	       50  2C 006F9 	    MOVC5   R0, DEFUSER+1, #32, #12, DEFAULT_RECORD		      ;
		         6B	       0C     006FE									      ;
		         50	  EC   AA  9A 00700 	    MOVZBL  DEFACT, R0						      ; 1766

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 15-3
; Digital Equipment Corporation
;
	   20	    ED   AA	       50  2C 00704 	    MOVC5   R0, DEFACT+1, #32, #8, DEFAULT_RECORD+16		      ;
		    10   AB	       08     00709									      ;
      58   AB	    10   AA	       08  28 0070C 	    MOVC3   #8, DEFPRIV, DEFAULT_RECORD+88			      ; 1773
		         50	  04   AA  9A 00712 	    MOVZBL  DEFDIR, R0						      ; 1779
				       50  D6 00716 	    INCL    R0							      ;
	   20	    04   AA	       50  2C 00718 	    MOVC5   R0, DEFDIR, #32, #32, DEFAULT_RECORD+28		      ;
		    1C   AB	       20     0071D									      ;
		         50	  0C   AA  9A 00720 	    MOVZBL  DEFDEV, R0						      ; 1786
				       50  D6 00724 	    INCL    R0							      ;
	   20	    0C   AA	       50  2C 00726 	    MOVC5   R0, DEFDEV, #32, #16, DEFAULT_RECORD+60		      ;
		    3C   AB	       10     0072B									      ;
		         50	  F8   AA  9A 0072E 	    MOVZBL  DEFCLI, R0						      ; 1793
	   20	    F9   AA	       50  2C 00732 	    MOVC5   R0, DEFCLI+1, #32, #8, DEFAULT_RECORD+76		      ;
		    4C   AB	       08     00737									      ;
		         50	  FC   AA  9A 0073A 	    MOVZBL  DEFOWNER, R0					      ; 1800
	   20	    FD   AA	       50  2C 0073E 	    MOVC5   R0, DEFOWNER+1, #32, #20, DEFAULT_RECORD+116	      ;
		    74   AB	       14     00743									      ;
		         50	       6A  9A 00746 	    MOVZBL  DEFLGICMD, R0					      ; 1807
				       50  D6 00749 	    INCL    R0							      ;
	   00	         6A	       50  2C 0074B 	    MOVC5   R0, DEFLGICMD, #0, #20, DEFAULT_RECORD+144		      ;
		  0090   CB	       14     0074F									      ;
		         6E	  E4   AA  9A 00753 	    MOVZBL  DEFPASS, PWDDSC					      ; 1810
		    04   AE	  E5   AA  9E 00757 	    MOVAB   DEFPASS+1, PWDDSC+4					      ; 1811
				       5E  DD 0075C 	    PUSHL   SP							      ; 1812
		  0000G  CF	       01  FB 0075E 	    CALLS   #1, LGI$HPWD					      ;
		    0C   AB	       50  D0 00763 	    MOVL    R0, DEFAULT_RECORD+12				      ;
		    1A   AB	  80   8F  9B 00767 	    MOVZBW  #128, DEFAULT_RECORD+26				      ; 1814
		    18   AB	  80   8F  9B 0076C 	    MOVZBW  #128, DEFAULT_RECORD+24				      ; 1815
		    60   AB 10000006   8F  D0 00771 	    MOVL    #268435462, DEFAULT_RECORD+96			      ; 1816
		    64   AB 00140006   8F  D0 00779 	    MOVL    #1310726, DEFAULT_RECORD+100			      ; 1818
				008B   CB  94 00781 	    CLRB    DEFAULT_RECORD+139					      ; 1820
		    68   AB 0008000A   8F  D0 00785 	    MOVL    #524298, DEFAULT_RECORD+104				      ; 1821
		    6C   AB	  C8   8F  9B 0078D 	    MOVZBW  #200, DEFAULT_RECORD+108				      ; 1823
		    6E   AB	  96   8F  9B 00792 	    MOVZBW  #150, DEFAULT_RECORD+110				      ; 1824
		    70   AB 0028000A   8F  D0 00797 	    MOVL    #2621450, DEFAULT_RECORD+112			      ; 1825
		  008A   CB	       04  90 0079F 	    MOVB    #4, DEFAULT_RECORD+138				      ; 1827
		         50	  18   AA  9A 007A4 	    MOVZBL  SYSUSER, R0						      ; 1831
	   20	    19   AA	       50  2C 007A8 	    MOVC5   R0, SYSUSER+1, #32, #12, RECBUF			      ;
		  00CC   CB	       0C     007AD									      ;
		         50	  28   AA  9A 007B1 	    MOVZBL  SYSACT, R0						      ; 1833
	   20	    29   AA	       50  2C 007B5 	    MOVC5   R0, SYSACT+1, #32, #8, RECBUF+16			      ;
		  00DC   CB	       08     007BA									      ;
    0124   CB	    5C   AA	       08  28 007BE 	    MOVC3   #8, SYSPRIV, RECBUF+88				      ; 1835
		         50	  4C   AA  9A 007C5 	    MOVZBL  SYSDIR, R0						      ; 1836
				       50  D6 007C9 	    INCL    R0							      ;
	   20	    4C   AA	       50  2C 007CB 	    MOVC5   R0, SYSDIR, #32, #32, RECBUF+28			      ;
		  00E8   CB	       20     007D0									      ;
		         50	  58   AA  9A 007D4 	    MOVZBL  SYSDEV, R0						      ; 1838
				       50  D6 007D8 	    INCL    R0							      ;
	   20	    58   AA	       50  2C 007DA 	    MOVC5   R0, SYSDEV, #32, #16, RECBUF+60			      ;
		  0108   CB	       10     007DF									      ;
		         50	  34   AA  9A 007E3 	    MOVZBL  SYSCLI, R0						      ; 1840
	   20	    35   AA	       50  2C 007E7 	    MOVC5   R0, SYSCLI+1, #32, #8, RECBUF+76			      ;
		  0118   CB	       08     007EC									      ;
		         50	  38   AA  9A 007F0 	    MOVZBL  SYSOWNER, R0					      ; 1842

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 15-4
; Digital Equipment Corporation
;
	   20	    39   AA	       50  2C 007F4 	    MOVC5   R0, SYSOWNER+1, #32, #20, RECBUF+116		      ;
		  0140   CB	       14     007F9									      ;
		         50	  48   AA  9A 007FD 	    MOVZBL  SYSLGICMD, R0					      ; 1844
				       50  D6 00801 	    INCL    R0							      ;
	   00	         6A	       50  2C 00803 	    MOVC5   R0, DEFLGICMD, #0, #20, RECBUF+144			      ;
		  015C   CB	       14     00807									      ;
		         6E	  20   AA  9A 0080B 	    MOVZBL  SYSPASS, PWDDSC					      ; 1847
		    04   AE	  21   AA  9E 0080F 	    MOVAB   SYSPASS+1, PWDDSC+4					      ; 1848
				       5E  DD 00814 	    PUSHL   SP							      ; 1849
		  0000G  CF	       01  FB 00816 	    CALLS   #1, LGI$HPWD					      ;
		  00D8   CB	       50  D0 0081B 	    MOVL    R0, RECBUF+12					      ;
		  00E4   CB 00010004   8F  D0 00820 	    MOVL    #65540, RECBUF+24					      ; 1852
		  012C   CB 50000006   8F  D0 00829 	    MOVL    #1342177286, RECBUF+96				      ; 1853
		  0130   CB 0014000C   8F  D0 00832 	    MOVL    #1310732, RECBUF+100				      ; 1855
				0157   CB  94 0083B 	    CLRB    RECBUF+139						      ; 1857
		  0134   CB 000A0014   8F  D0 0083F 	    MOVL    #655380, RECBUF+104					      ; 1858
		  0138   CB	0400   8F  B0 00848 	    MOVW    #1024, RECBUF+108					      ; 1860
		  013A   CB	  96   8F  9B 0084F 	    MOVZBW  #150, RECBUF+110					      ; 1861
		  013C   CB 00280014   8F  D0 00855 	    MOVL    #2621460, RECBUF+112				      ; 1862
		  0156   CB	       04  90 0085E 	    MOVB    #4, RECBUF+138					      ; 1864
				       50  D4 00863 	    CLRL    R0							      ; 1715
					   04 00865 	    RET     							      ;

; Routine Size:  384 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 16
; Digital Equipment Corporation
;
;	1866	ROUTINE UPDATE_RECORD =
;	1867	BEGIN
;	1868	
;	1869	!++
;	1870	!
;	1871	! FUNCTIONAL DESCRIPTION:
;	1872	!
;	1873	!	Scan the remainder of the user's input command line for parameters
;	1874	!	and parameter values.  Pull off each parameter keyword and check
;	1875	!	that it is valid, then call the associated routine to process
;	1876	!	the supplied value or string. 
;	1877	!
;	1878	! INPUTS:
;	1879	!
;	1880	!	none
;	1881	!
;	1882	! IMPLICIT INPUTS:
;	1883	!
;	1884	!	NEXTTOKEN - address of the delimiter following the last token
;	1885	!		    processed on the command line
;	1886	!
;	1887	! OUTPUTS:
;	1888	!
;	1889	!	none
;	1890	!
;	1891	! IMPLICIT OUTPUTS:
;	1892	!
;	1893	!	none
;	1894	!
;	1895	! ROUTINE VALUE:
;	1896	!
;	1897	!	true -> all keywords and parameters were specified correctly
;	1898	!	false -> syntax error, an error message is output by this routine
;	1899	!		on invalid keyword names, or by the processing routine for
;	1900	!		the parameter which was specified incorrectly.
;	1901	!
;	1902	! SIDE EFFECTS:
;	1903	!
;	1904	!	none
;	1905	!--
;	1906	
;	1907	LOCAL
;	1908		COMMAND ;				! address for processing or
;	1909							! error indicator
;	1910	
;	1911	!
;	1912	! Check that we're not at the end of the command line. Continue
;	1913	! processing parameters until the end is reached.
;	1914	!
;	1915	
;	1916	WHILE .(.NEXTTOKEN)<0,8> NEQ ZERO
;	1917	DO
;	1918	    BEGIN
;	1919	    GETTOKEN( .NEXTTOKEN+1 , TOKENPTR , NEXTTOKEN , TOKENLEN , DELIMSTR ) ;
;	1920	    IF .(.NEXTTOKEN)<0,8> EQL ZERO

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 16-1
; Digital Equipment Corporation
;
;	1921	    THEN
;	1922	
;	1923		!
;	1924		! Found a parameter name but ran off the end before
;	1925		! encountering an associated value or string.
;	1926		!
;	1927	
;	1928		RETURN FAOOUT( NOARG , .TOKENLEN , .TOKENPTR ) ;
;	1929	
;	1930	    !
;	1931	    ! Lookup parameter name and take appropriate action.
;	1932	    !
;	1933	
;	1934	    COMMAND = FIND_VAL( .TOKENLEN , .TOKENPTR , OPTION_TABLE ) ;
;	1935	
;	1936	    SELECTONE .COMMAND OF
;	1937	    SET
;	1938	
;	1939	    [SYMNOTFND]:
;	1940	
;	1941		!
;	1942		! Parameter name was not found. Report error and return.
;	1943		!
;	1944	
;	1945		RETURN FAOOUT( KEYNOTFND , .TOKENLEN , .TOKENPTR ) ;
;	1946	
;	1947	    [SYMNOTUNQ]:
;	1948	
;	1949		!
;	1950		! Parameter name was not unique. Report error and return.
;	1951		!
;	1952	
;	1953		RETURN FAOOUT( KEYNOTUNQ , .TOKENLEN , .TOKENPTR ) ;
;	1954	
;	1955	    [OTHERWISE]:
;	1956	
;	1957		! 
;	1958		! Option name was valid.  Get next token for processing routine
;	1959		! and call it to handle the argument.  Check return status to see
;	1960		! that everything was ok.  Save starting address of option
;	1961		! name string.
;	1962		!
;	1963	
;	1964		BEGIN
;	1965		OPTIONPTR = .TOKENPTR ;
;	1966		OPTIONEND = .NEXTTOKEN ;
;	1967		GETTOKEN( .NEXTTOKEN+1 , TOKENPTR , NEXTTOKEN , TOKENLEN , DELIMSTR ) ;
;	1968		IF NOT (.COMMAND)() THEN RETURN FALSE ;
;	1969		END;
;	1970	
;	1971	    TES;
;	1972	
;	1973	    END;
;	1974	
;	1975	RETURN TRUE ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 16-2
; Digital Equipment Corporation
;
;	1976	END;





					 0804 00866 UPDATE_RECORD:
							    .WORD   Save R2,R11						      ; 1866
		         5B	0000'  CF  9E 00868 	    MOVAB   NEXTTOKEN, R11					      ;
				  00   BB  95 0086D 1$:     TSTB    @NEXTTOKEN						      ; 1916
				       03  12 00870 	    BNEQ    2$							      ;
				     008E  31 00872 	    BRW     7$							      ;
				0000'  CF  9F 00875 2$:     PUSHAB  DELIMSTR						      ; 1866
				00C8   CB  9F 00879 	    PUSHAB  TOKENLEN						      ; 1919
				       5B  DD 0087D 	    PUSHL   R11							      ;
				00CC   CB  9F 0087F 	    PUSHAB  TOKENPTR						      ;
	   7E	         6B	       01  C1 00883 	    ADDL3   #1, NEXTTOKEN, -(SP)				      ;
		  0000V  CF	       05  FB 00887 	    CALLS   #5, GETTOKEN					      ;
				  00   BB  95 0088C 	    TSTB    @NEXTTOKEN						      ; 1920
				       0B  12 0088F 	    BNEQ    3$							      ;
		         7E	00C8   CB  7D 00891 	    MOVQ    TOKENLEN, -(SP)					      ; 1928
				0000'  CF  9F 00896 	    PUSHAB  NOARG						      ; 1866
				       37  11 0089A 	    BRB     5$							      ; 1928
				0000'  CF  9F 0089C 3$:     PUSHAB  OPTION_TABLE					      ; 1866
		         7E	00C8   CB  7D 008A0 	    MOVQ    TOKENLEN, -(SP)					      ; 1934
		  F9CF   CF	       03  FB 008A5 	    CALLS   #3, FIND_VAL					      ;
		         52	       50  D0 008AA 	    MOVL    R0, COMMAND						      ;
	      FFFFFFFE   8F	       52  D1 008AD 	    CMPL    COMMAND, #-2					      ; 1936
				       0B  12 008B4 	    BNEQ    4$							      ;
		         7E	00C8   CB  7D 008B6 	    MOVQ    TOKENLEN, -(SP)					      ; 1945
				0000'  CF  9F 008BB 	    PUSHAB  KEYNOTFND						      ; 1866
				       12  11 008BF 	    BRB     5$							      ; 1945
	      FFFFFFFC   8F	       52  D1 008C1 4$:     CMPL    COMMAND, #-4					      ; 1936
				       0F  12 008C8 	    BNEQ    6$							      ;
		         7E	00C8   CB  7D 008CA 	    MOVQ    TOKENLEN, -(SP)					      ; 1953
				0000'  CF  9F 008CF 	    PUSHAB  KEYNOTUNQ						      ; 1866
		  0000V  CF	       03  FB 008D3 5$:     CALLS   #3, FAOOUT						      ; 1953
					   04 008D8 	    RET     							      ;
		    04   AB	00CC   CB  D0 008D9 6$:     MOVL    TOKENPTR, OPTIONPTR					      ; 1965
		    08   AB	       6B  D0 008DF 	    MOVL    NEXTTOKEN, OPTIONEND				      ; 1966
				0000'  CF  9F 008E3 	    PUSHAB  DELIMSTR						      ; 1866
				00C8   CB  9F 008E7 	    PUSHAB  TOKENLEN						      ; 1967
				       5B  DD 008EB 	    PUSHL   R11							      ;
				00CC   CB  9F 008ED 	    PUSHAB  TOKENPTR						      ;
	   7E	         6B	       01  C1 008F1 	    ADDL3   #1, NEXTTOKEN, -(SP)				      ;
		  0000V  CF	       05  FB 008F5 	    CALLS   #5, GETTOKEN					      ;
		         62	       00  FB 008FA 	    CALLS   #0, (COMMAND)					      ; 1968
		         07	       50  E9 008FD 	    BLBC    R0, 8$						      ;
				     FF6A  31 00900 	    BRW     1$							      ;
		         50	       01  D0 00903 7$:     MOVL    #1, R0						      ; 1975
					   04 00906 	    RET     							      ;
				       50  D4 00907 8$:     CLRL    R0							      ; 1866
					   04 00909 	    RET     							      ;

; Routine Size:  164 bytes

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 16-3
; Digital Equipment Corporation
;



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 17
; Digital Equipment Corporation
;
;	1977	ROUTINE GETACCOUNT =
;	1978	BEGIN
;	1979	
;	1980	!++
;	1981	!
;	1982	! FUNCTIONAL DESCRIPTION:
;	1983	!
;	1984	!	Fill in the account name in recbuf.
;	1985	!
;	1986	! INPUTS:
;	1987	!
;	1988	!	None
;	1989	!
;	1990	! OUTPUTS:
;	1991	!
;	1992	!	none
;	1993	!
;	1994	! ROUTINE VALUE:
;	1995	!
;	1996	!	true -> update successful
;	1997	!	false -> error in specification
;	1998	!--
;	1999	
;	2000	RETURN
;	2001	    GETSTRING( RECBUF[UAF$T_ACCOUNT] , UAF$S_ACCOUNT , FILLED_STRING ) ;
;	2002	END;





					 0000 0090A GETACCOUNT:
							    .WORD   Save nothing					      ; 1977
				       02  DD 0090C 	    PUSHL   #2							      ; 2001
				       08  DD 0090E 	    PUSHL   #8							      ;
				0000'  CF  9F 00910 	    PUSHAB  RECBUF+16						      ;
		  0000V  CF	       03  FB 00914 	    CALLS   #3, GETSTRING					      ;
					   04 00919 	    RET     							      ; 1977

; Routine Size:  16 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 18
; Digital Equipment Corporation
;
;	2003	ROUTINE GETASTLM =
;	2004	BEGIN
;	2005	
;	2006	!++
;	2007	!
;	2008	! FUNCTIONAL DESCRIPTION:
;	2009	!
;	2010	!	Fill in the AST limit in the proper field in RECBUF.
;	2011	!
;	2012	! INPUTS:
;	2013	!
;	2014	!	none
;	2015	!
;	2016	! OUTPUTS:
;	2017	!
;	2018	!	none
;	2019	!
;	2020	! ROUTINE VALUE:
;	2021	!
;	2022	!	true -> success
;	2023	!	false -> invalid value supplied
;	2024	!
;	2025	!--
;	2026	
;	2027	RETURN
;	2028	    GETVAL( RECBUF[UAF$W_ASTLM] , WORD_LENGTH ) ;
;	2029	END;





					 0000 0091A GETASTLM:
							    .WORD   Save nothing					      ; 2003
				       10  DD 0091C 	    PUSHL   #16							      ; 2028
				0000'  CF  9F 0091E 	    PUSHAB  RECBUF+112						      ;
		  0000V  CF	       02  FB 00922 	    CALLS   #2, GETVAL						      ;
					   04 00927 	    RET     							      ; 2003

; Routine Size:  14 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 19
; Digital Equipment Corporation
;
;	2030	ROUTINE GETBIOLM =
;	2031	BEGIN
;	2032	
;	2033	!++
;	2034	!
;	2035	! FUNCTIONAL DESCRIPTION:
;	2036	!
;	2037	!	Routine to update buffered I/O count limit field.
;	2038	!
;	2039	! INPUTS:
;	2040	!
;	2041	!	none
;	2042	!
;	2043	! OUTPUTS:
;	2044	!
;	2045	!	none
;	2046	!
;	2047	! IMPLICIT OUTPUTS:
;	2048	!
;	2049	!	RECBUF[UAF$W_BIOLM] is updated
;	2050	!
;	2051	! ROUTINE VALUE:
;	2052	!
;	2053	!	true -> updated successfully
;	2054	!	false -> invalid value supplied
;	2055	!--
;	2056	
;	2057	RETURN
;	2058	    GETVAL( RECBUF[UAF$W_BIOLM] , WORD_LENGTH ) ;
;	2059	END;





					 0000 00928 GETBIOLM:
							    .WORD   Save nothing					      ; 2030
				       10  DD 0092A 	    PUSHL   #16							      ; 2058
				0000'  CF  9F 0092C 	    PUSHAB  RECBUF+96						      ;
		  0000V  CF	       02  FB 00930 	    CALLS   #2, GETVAL						      ;
					   04 00935 	    RET     							      ; 2030

; Routine Size:  14 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 20
; Digital Equipment Corporation
;
;	2060	ROUTINE GETBYTLM =
;	2061	BEGIN
;	2062	
;	2063	!++
;	2064	!
;	2065	! FUNCTIONAL DESCRIPTION:
;	2066	!
;	2067	!	Fill in buffered I/O byte count limit
;	2068	!
;	2069	! INPUTS:
;	2070	!
;	2071	!	none
;	2072	!
;	2073	! OUTPUTS:
;	2074	!
;	2075	!	none
;	2076	!
;	2077	! ROUTINE VALUE:
;	2078	!
;	2079	!	true -> success
;	2080	!	false -> invalid value supplied
;	2081	!
;	2082	!--
;	2083	
;	2084	RETURN
;	2085	    GETVAL( RECBUF[UAF$W_BYTLM] , WORD_LENGTH ) ;
;	2086	END;





					 0000 00936 GETBYTLM:
							    .WORD   Save nothing					      ; 2060
				       10  DD 00938 	    PUSHL   #16							      ; 2085
				0000'  CF  9F 0093A 	    PUSHAB  RECBUF+98						      ;
		  0000V  CF	       02  FB 0093E 	    CALLS   #2, GETVAL						      ;
					   04 00943 	    RET     							      ; 2060

; Routine Size:  14 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 21
; Digital Equipment Corporation
;
;	2087	ROUTINE GETCLI =
;	2088	BEGIN
;	2089	
;	2090	!++
;	2091	!
;	2092	! FUNCTIONAL DESCRIPTION:
;	2093	!
;	2094	!	Fill in default command language interpreter.
;	2095	!
;	2096	! INPUTS:
;	2097	!
;	2098	!	none
;	2099	!
;	2100	! OUTPUTS:
;	2101	!
;	2102	!	none
;	2103	!
;	2104	! ROUTINE VALUE:
;	2105	!
;	2106	!	true -> successful completion
;	2107	!	false -> error in string specification
;	2108	!--
;	2109	
;	2110	RETURN
;	2111	    GETSTRING( RECBUF[UAF$T_DEFCLI] , UAF$S_DEFCLI , FILLED_STRING ) ;
;	2112	END;





					 0000 00944 GETCLI: .WORD   Save nothing					      ; 2087
				       02  DD 00946 	    PUSHL   #2							      ; 2111
				       08  DD 00948 	    PUSHL   #8							      ;
				0000'  CF  9F 0094A 	    PUSHAB  RECBUF+76						      ;
		  0000V  CF	       03  FB 0094E 	    CALLS   #3, GETSTRING					      ;
					   04 00953 	    RET     							      ; 2087

; Routine Size:  16 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 22
; Digital Equipment Corporation
;
;	2113	ROUTINE GETDEVICE =
;	2114	BEGIN
;	2115	
;	2116	!++
;	2117	!
;	2118	! FUNCTIONAL DESCRIPTION:
;	2119	!
;	2120	!	Fill in the default device name in RECBUF.
;	2121	!	Will also append an ending colon if omitted.
;	2122	!
;	2123	! INPUTS:
;	2124	!
;	2125	!	none
;	2126	!
;	2127	! OUTPUTS:
;	2128	!
;	2129	!	none
;	2130	!
;	2131	! ROUTINE VALUE:
;	2132	!
;	2133	!	true -> update successful
;	2134	!	false -> error in specification
;	2135	!--
;	2136	
;	2137	LOCAL
;	2138	    STRLEN ;
;	2139	
;	2140	IF NOT GETSTRING( RECBUF[UAF$T_DEFDEV] , UAF$S_DEFDEV , COUNTED_STRING )
;	2141	THEN
;	2142	    RETURN FALSE ;
;	2143	
;	2144	!
;	2145	! Check to see that string has ending ':'
;	2146	! and add one if not.
;	2147	! If string length is zero, then field has been removed so
;	2148	! there's no need for the check.
;	2149	!
;	2150	
;	2151	STRLEN = .(RECBUF[UAF$T_DEFDEV])<0,8> ;			! get string length
;	2152	
;	2153	IF .STRLEN EQL 0
;	2154	THEN
;	2155	    RETURN TRUE ;
;	2156	
;	2157	IF .(RECBUF[UAF$T_DEFDEV] + .STRLEN)<0,8> NEQ COLON
;	2158	THEN
;	2159	    BEGIN
;	2160	    IF .STRLEN GEQ UAF$S_DEFDEV-1
;	2161	    THEN
;	2162		RETURN FAOOUT( INVDEV , .NEXTTOKEN-.OPTIONPTR , .OPTIONPTR ) ;
;	2163	    (RECBUF[UAF$T_DEFDEV]+.STRLEN+1)<0,8> = COLON ;
;	2164	    (RECBUF[UAF$T_DEFDEV])<0,8> = .STRLEN + 1 ;
;	2165	    END;
;	2166	RETURN TRUE ;
;	2167	END;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 22-1
; Digital Equipment Corporation
;





					 080C 00954 GETDEVICE:
							    .WORD   Save R2,R3,R11					      ; 2113
		         5B	0000'  CF  9E 00956 	    MOVAB   RECBUF+60, R11					      ;
				       01  DD 0095B 	    PUSHL   #1							      ; 2140
				       10  DD 0095D 	    PUSHL   #16							      ;
				       5B  DD 0095F 	    PUSHL   R11							      ;
		  0000V  CF	       03  FB 00961 	    CALLS   #3, GETSTRING					      ;
		         32	       50  E9 00966 	    BLBC    R0, 3$						      ;
		         52	       6B  9A 00969 	    MOVZBL  RECBUF+60, STRLEN					      ; 2151
				       29  13 0096C 	    BEQL    2$							      ; 2153
	   53	         52	       5B  C1 0096E 	    ADDL3   R11, STRLEN, R3					      ; 2157
		         3A	       63  91 00972 	    CMPB    (R3), #58						      ;
				       20  13 00975 	    BEQL    2$							      ;
		         0F	       52  D1 00977 	    CMPL    STRLEN, #15						      ; 2160
				       13  19 0097A 	    BLSS    1$							      ;
				  BC   AB  DD 0097C 	    PUSHL   OPTIONPTR						      ; 2162
	   7E	    B8   AB	  BC   AB  C3 0097F 	    SUBL3   OPTIONPTR, NEXTTOKEN, -(SP)				      ;
				0000'  CF  9F 00985 	    PUSHAB  INVDEV						      ; 2113
		  0000V  CF	       03  FB 00989 	    CALLS   #3, FAOOUT						      ; 2162
					   04 0098E 	    RET     							      ;
		    01   A3	       3A  90 0098F 1$:     MOVB    #58, 1(R3)						      ; 2163
	   6B	         52	       01  81 00993 	    ADDB3   #1, STRLEN, RECBUF+60				      ; 2164
		         50	       01  D0 00997 2$:     MOVL    #1, R0						      ; 2166
					   04 0099A 	    RET     							      ;
				       50  D4 0099B 3$:     CLRL    R0							      ; 2113
					   04 0099D 	    RET     							      ;

; Routine Size:  74 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 23
; Digital Equipment Corporation
;
;	2168	ROUTINE GETDIOLM =
;	2169	BEGIN
;	2170	
;	2171	!++
;	2172	!
;	2173	! FUNCTIONAL DESCRIPTION:
;	2174	!
;	2175	!	Fill in direct I/O limit field.
;	2176	!
;	2177	! INPUTS:
;	2178	!
;	2179	!	none
;	2180	!
;	2181	! OUTPUTS:
;	2182	!
;	2183	!	none
;	2184	!
;	2185	! ROUTINE VALUE:
;	2186	!
;	2187	!	true - field updated
;	2188	!	false - error in value specified
;	2189	!--
;	2190	
;	2191	RETURN
;	2192	    GETVAL( RECBUF[UAF$W_DIOLM] , WORD_LENGTH ) ;
;	2193	END;





					 0000 0099E GETDIOLM:
							    .WORD   Save nothing					      ; 2168
				       10  DD 009A0 	    PUSHL   #16							      ; 2192
				0000'  CF  9F 009A2 	    PUSHAB  RECBUF+100						      ;
		  0000V  CF	       02  FB 009A6 	    CALLS   #2, GETVAL						      ;
					   04 009AB 	    RET     							      ; 2168

; Routine Size:  14 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 24
; Digital Equipment Corporation
;
;	2194	ROUTINE GETDIRECTORY =
;	2195	BEGIN
;	2196	
;	2197	!++
;	2198	!
;	2199	! FUNCTIONAL DESCRIPTION:
;	2200	!
;	2201	!	Fill in the default directory name string.
;	2202	!
;	2203	! INPUTS:
;	2204	!
;	2205	!	none
;	2206	!
;	2207	! OUTPUTS:
;	2208	!
;	2209	!	none
;	2210	!
;	2211	! ROUTINE VALUE:
;	2212	!
;	2213	!	true -> successful completion
;	2214	!	false -> error in string specification
;	2215	!--
;	2216	
;	2217	RETURN
;	2218	    GETSTRING( RECBUF[UAF$T_DEFDIR] , UAF$S_DEFDIR , COUNTED_STRING ) ;
;	2219	END;





					 0000 009AC GETDIRECTORY:
							    .WORD   Save nothing					      ; 2194
				       01  DD 009AE 	    PUSHL   #1							      ; 2218
				       20  DD 009B0 	    PUSHL   #32							      ;
				0000'  CF  9F 009B2 	    PUSHAB  RECBUF+28						      ;
		  0000V  CF	       03  FB 009B6 	    CALLS   #3, GETSTRING					      ;
					   04 009BB 	    RET     							      ; 2194

; Routine Size:  16 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 25
; Digital Equipment Corporation
;
;	2220	ROUTINE GETFILLM =
;	2221	BEGIN
;	2222	
;	2223	!++
;	2224	!
;	2225	! FUNCTIONAL DESCRIPTION:
;	2226	!
;	2227	!	Fill in open file limit field.
;	2228	!
;	2229	! INPUTS:
;	2230	!
;	2231	!	none
;	2232	!
;	2233	! OUTPUTS:
;	2234	!
;	2235	!	none
;	2236	!
;	2237	! ROUTINE VALUE:
;	2238	!
;	2239	!	true - value updated
;	2240	!	false - value specificatio error
;	2241	!--
;	2242	
;	2243	RETURN
;	2244	    GETVAL( RECBUF[UAF$W_FILLM] , WORD_LENGTH ) ;
;	2245	END;





					 0000 009BC GETFILLM:
							    .WORD   Save nothing					      ; 2220
				       10  DD 009BE 	    PUSHL   #16							      ; 2244
				0000'  CF  9F 009C0 	    PUSHAB  RECBUF+102						      ;
		  0000V  CF	       02  FB 009C4 	    CALLS   #2, GETVAL						      ;
					   04 009C9 	    RET     							      ; 2220

; Routine Size:  14 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 26
; Digital Equipment Corporation
;
;	2246	ROUTINE GETFLAGS =
;	2247	BEGIN
;	2248	
;	2249	!++
;	2250	!
;	2251	! FUNCTIONAL DESCRIPTION:
;	2252	!
;	2253	!	Get login flag bit settings.
;	2254	!
;	2255	! INPUTS:
;	2256	!
;	2257	!	none
;	2258	!
;	2259	! IMPLICIT INPUTS:
;	2260	!
;	2261	!	FLAG_TABLE - table of flag bit numbers and ascii names
;	2262	!
;	2263	! OUTPUTS:
;	2264	!
;	2265	!	none
;	2266	!
;	2267	! ROUTINE VALUE:
;	2268	!
;	2269	!	true -> successful completion
;	2270	!	false -> error in flag name
;	2271	!--
;	2272	
;	2273	LOCAL
;	2274		CODE ,					! return from find_val
;	2275		NOFLG ,					! 'no' prefix setting
;	2276		PAREN ;					! tells if list specified
;	2277	
;	2278	!
;	2279	! See if the first character is a '(' , and remember that there is
;	2280	! a list if so.
;	2281	!
;	2282	
;	2283	IF PAREN = ( .(.TOKENPTR)<0,8> EQL LPAREN )
;	2284	THEN
;	2285	    BEGIN
;	2286	    TOKENPTR = .TOKENPTR + 1 ;
;	2287	    TOKENLEN = .TOKENLEN - 1 ;
;	2288	    END ;
;	2289	
;	2290	WHILE TRUE DO
;	2291	BEGIN
;	2292	
;	2293	!
;	2294	! See if keyword has 'no' previx
;	2295	!
;	2296	
;	2297	IF NOFLG = ( .(.TOKENPTR)<0,16> EQL 'NO' )
;	2298	THEN
;	2299	    BEGIN
;	2300	    TOKENPTR = .TOKENPTR + 2 ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 26-1
; Digital Equipment Corporation
;
;	2301	    TOKENLEN = .TOKENLEN - 2 ;
;	2302	    END ;
;	2303	
;	2304	!
;	2305	! lookup keyword in keyword table
;	2306	!
;	2307	
;	2308	CODE = FIND_VAL( .TOKENLEN , .TOKENPTR , FLAG_TABLE ) ;
;	2309	SELECTONE .CODE OF 
;	2310	SET
;	2311	
;	2312	    [SYMNOTFND]:
;	2313	
;	2314		RETURN FAOOUT( KEYNOTFND , .TOKENLEN , .TOKENPTR ) ;
;	2315	
;	2316	    [SYMNOTUNQ]:
;	2317	
;	2318		RETURN FAOOUT( KEYNOTUNQ , .TOKENLEN , .TOKENPTR ) ;
;	2319	
;	2320	    [OTHERWISE]:
;	2321	
;	2322		!
;	2323		! Code contains bit number. Set or clear bit depending on whether
;	2324		! 'no' prefix was specified.
;	2325		!
;	2326	
;	2327		(RECBUF[UAF$B_FLAGS])<.CODE,1> = NOT .NOFLG ;
;	2328	
;	2329	TES;
;	2330	
;	2331	IF NOT .PAREN THEN EXITLOOP ;			! exit if no list
;	2332	
;	2333	IF .(.NEXTTOKEN)<0,8> NEQ COMMA THEN EXITLOOP ;
;	2334	
;	2335	!
;	2336	! Get next keyword in list
;	2337	!
;	2338	
;	2339	GETTOKEN( .NEXTTOKEN+1 , TOKENPTR , NEXTTOKEN , TOKENLEN , DELIMSTR );
;	2340	END;
;	2341	
;	2342	IF .(.NEXTTOKEN)<0,8> EQL RPAREN 
;	2343	THEN
;	2344	    NEXTTOKEN = .NEXTTOKEN + 1 ;		! skip ending paren
;	2345	
;	2346	RETURN TRUE;
;	2347	END;





					 081C 009CA GETFLAGS:
							    .WORD   Save R2,R3,R4,R11					      ; 2246
		         5B	0000'  CF  9E 009CC 	    MOVAB   TOKENLEN, R11					      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 26-2
; Digital Equipment Corporation
;
				       50  D4 009D1 	    CLRL    R0							      ; 2283
		         28	  04   BB  91 009D3 	    CMPB    @TOKENPTR, #40					      ;
				       02  12 009D7 	    BNEQ    1$							      ;
				       50  D6 009D9 	    INCL    R0							      ;
		         51	       50  D0 009DB 1$:     MOVL    R0, PAREN						      ;
		         05	       50  E9 009DE 	    BLBC    R0, 2$						      ;
				  04   AB  D6 009E1 	    INCL    TOKENPTR						      ; 2286
				       6B  D7 009E4 	    DECL    TOKENLEN						      ; 2287
		         53	       51  D2 009E6 2$:     MCOML   PAREN, R3						      ; 2331
				       50  D4 009E9 3$:     CLRL    R0							      ; 2297
		  4F4E   8F	  04   BB  B1 009EB 	    CMPW    @TOKENPTR, #20302					      ;
				       02  12 009F1 	    BNEQ    4$							      ;
				       50  D6 009F3 	    INCL    R0							      ;
		         54	       50  D0 009F5 4$:     MOVL    R0, NOFLG						      ;
		         07	       50  E9 009F8 	    BLBC    R0, 5$						      ;
		    04   AB	       02  C0 009FB 	    ADDL2   #2, TOKENPTR					      ; 2300
		         6B	       02  C2 009FF 	    SUBL2   #2, TOKENLEN					      ; 2301
				0000'  CF  9F 00A02 5$:     PUSHAB  FLAG_TABLE						      ; 2246
		         7E	       6B  7D 00A06 	    MOVQ    TOKENLEN, -(SP)					      ; 2308
		  F86B   CF	       03  FB 00A09 	    CALLS   #3, FIND_VAL					      ;
		         52	       50  D0 00A0E 	    MOVL    R0, CODE						      ;
	      FFFFFFFE   8F	       52  D1 00A11 	    CMPL    CODE, #-2						      ; 2309
				       09  12 00A18 	    BNEQ    6$							      ;
		         7E	       6B  7D 00A1A 	    MOVQ    TOKENLEN, -(SP)					      ; 2314
				0000'  CF  9F 00A1D 	    PUSHAB  KEYNOTFND						      ; 2246
				       10  11 00A21 	    BRB     7$							      ; 2314
	      FFFFFFFC   8F	       52  D1 00A23 6$:     CMPL    CODE, #-4						      ; 2309
				       0D  12 00A2A 	    BNEQ    8$							      ;
		         7E	       6B  7D 00A2C 	    MOVQ    TOKENLEN, -(SP)					      ; 2318
				0000'  CF  9F 00A2F 	    PUSHAB  KEYNOTUNQ						      ; 2246
		  0000V  CF	       03  FB 00A33 7$:     CALLS   #3, FAOOUT						      ; 2318
					   04 00A38 	    RET     							      ;
		         50	       54  D2 00A39 8$:     MCOML   NOFLG, R0						      ; 2327
	   01	         52	       50  F0 00A3C 	    INSV    R0, CODE, #1, RECBUF+139				      ;
				  CF   AB     00A40									      ;
		         21	       53  E8 00A42 	    BLBS    R3, 9$						      ; 2331
		         2C	FF38   DB  91 00A45 	    CMPB    @NEXTTOKEN, #44					      ; 2333
				       1A  12 00A4A 	    BNEQ    9$							      ;
				0000'  CF  9F 00A4C 	    PUSHAB  DELIMSTR						      ; 2246
				       5B  DD 00A50 	    PUSHL   R11							      ; 2339
				FF38   CB  9F 00A52 	    PUSHAB  NEXTTOKEN						      ;
				  04   AB  9F 00A56 	    PUSHAB  TOKENPTR						      ;
	   7E	  FF38   CB	       01  C1 00A59 	    ADDL3   #1, NEXTTOKEN, -(SP)				      ;
		  0000V  CF	       05  FB 00A5F 	    CALLS   #5, GETTOKEN					      ;
				       83  11 00A64 	    BRB     3$							      ; 2290
		         29	FF38   DB  91 00A66 9$:     CMPB    @NEXTTOKEN, #41					      ; 2342
				       04  12 00A6B 	    BNEQ    10$							      ;
				FF38   CB  D6 00A6D 	    INCL    NEXTTOKEN						      ; 2344
		         50	       01  D0 00A71 10$:    MOVL    #1, R0						      ; 2346
					   04 00A74 	    RET     							      ; 2246

; Routine Size:  171 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 27
; Digital Equipment Corporation
;
;	2348	ROUTINE GETLGICMD =
;	2349	BEGIN
;	2350	
;	2351	!++
;	2352	!
;	2353	! FUNCTIONAL DESCRIPTION:
;	2354	!
;	2355	!	Get name of login command file.  This feature is provided to allow
;	2356	!	the system manager to define a login command file to be run when
;	2357	!	the user logs in so that he may restrict the user's environment.
;	2358	!	If the field is blank, login looks for the user's login command
;	2359	!	file, LOGIN.COM.
;	2360	!
;	2361	! INPUTS:
;	2362	!
;	2363	!	none
;	2364	!
;	2365	! OUTPUTS:
;	2366	!
;	2367	!	none
;	2368	!
;	2369	! ROUTINE VALUE:
;	2370	!
;	2371	!	true -> successful completion
;	2372	!	false -> error in string specification
;	2373	!--
;	2374	
;	2375	RETURN
;	2376	    GETSTRING( RECBUF[UAF$T_LGICMD] , UAF$S_LGICMD , COUNTED_STRING ) ;
;	2377	END;





					 0000 00A75 GETLGICMD:
							    .WORD   Save nothing					      ; 2348
				       01  DD 00A77 	    PUSHL   #1							      ; 2376
				       14  DD 00A79 	    PUSHL   #20							      ;
				0000'  CF  9F 00A7B 	    PUSHAB  RECBUF+144						      ;
		  0000V  CF	       03  FB 00A7F 	    CALLS   #3, GETSTRING					      ;
					   04 00A84 	    RET     							      ; 2348

; Routine Size:  16 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 28
; Digital Equipment Corporation
;
;	2378	ROUTINE GETOWNER =
;	2379	BEGIN
;	2380	
;	2381	!++
;	2382	!
;	2383	! FUNCTIONAL DESCRIPTION:
;	2384	!
;	2385	!	Fill in the owner name field in RECBUF.
;	2386	!
;	2387	! INPUTS:
;	2388	!
;	2389	!	none
;	2390	!
;	2391	! OUTPUTS:
;	2392	!
;	2393	!	none
;	2394	!
;	2395	! ROUTINE VALUE:
;	2396	!
;	2397	!	true -> successful completion
;	2398	!	false -> error in string specification
;	2399	!--
;	2400	
;	2401	RETURN
;	2402	    GETSTRING( RECBUF[UAF$T_OWNER] , UAF$S_OWNER , FILLED_STRING ) ;
;	2403	END ;





					 0000 00A85 GETOWNER:
							    .WORD   Save nothing					      ; 2378
				       02  DD 00A87 	    PUSHL   #2							      ; 2402
				       14  DD 00A89 	    PUSHL   #20							      ;
				0000'  CF  9F 00A8B 	    PUSHAB  RECBUF+116						      ;
		  0000V  CF	       03  FB 00A8F 	    CALLS   #3, GETSTRING					      ;
					   04 00A94 	    RET     							      ; 2378

; Routine Size:  16 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 29
; Digital Equipment Corporation
;
;	2404	ROUTINE GETPGFLQUOTA =
;	2405	BEGIN
;	2406	
;	2407	!++
;	2408	!
;	2409	! FUNCTIONAL DESCRIPTION:
;	2410	!
;	2411	!	Insert the page file quota field in recbuf.
;	2412	!
;	2413	! INPUTS:
;	2414	!
;	2415	!	none
;	2416	!
;	2417	! OUTPUTS:
;	2418	!
;	2419	!	none
;	2420	!
;	2421	! ROUTINE VALUE:
;	2422	!
;	2423	!	true -> value updated
;	2424	!	false -> value specification error
;	2425	!--
;	2426	
;	2427	RETURN
;	2428	    GETVAL( RECBUF[UAF$W_PGFLQUOTA] , WORD_LENGTH ) ;
;	2429	END;





					 0000 00A95 GETPGFLQUOTA:
							    .WORD   Save nothing					      ; 2404
				       10  DD 00A97 	    PUSHL   #16							      ; 2428
				0000'  CF  9F 00A99 	    PUSHAB  RECBUF+114						      ;
		  0000V  CF	       02  FB 00A9D 	    CALLS   #2, GETVAL						      ;
					   04 00AA2 	    RET     							      ; 2404

; Routine Size:  14 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 30
; Digital Equipment Corporation
;
;	2430	ROUTINE GETPRCCNT =
;	2431	BEGIN
;	2432	
;	2433	!++
;	2434	!
;	2435	! FUNCTIONAL DESCRIPTION:
;	2436	!
;	2437	!	Update the subprocess limit field in RECBUF.
;	2438	!
;	2439	! INPUTS:
;	2440	!
;	2441	!	none
;	2442	!
;	2443	! OUTPUTS:
;	2444	!
;	2445	!	none
;	2446	!
;	2447	! ROUTINE VALUE:
;	2448	!
;	2449	!	true -> value updated
;	2450	!	false -> value specification error
;	2451	!--
;	2452	
;	2453	RETURN
;	2454	    GETVAL( RECBUF[UAF$W_PRCCNT] , WORD_LENGTH ) ;
;	2455	END;





					 0000 00AA3 GETPRCCNT:
							    .WORD   Save nothing					      ; 2430
				       10  DD 00AA5 	    PUSHL   #16							      ; 2454
				0000'  CF  9F 00AA7 	    PUSHAB  RECBUF+106						      ;
		  0000V  CF	       02  FB 00AAB 	    CALLS   #2, GETVAL						      ;
					   04 00AB0 	    RET     							      ; 2430

; Routine Size:  14 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 31
; Digital Equipment Corporation
;
;	2456	ROUTINE GETPRIORITY =
;	2457	BEGIN
;	2458	
;	2459	!++
;	2460	!
;	2461	! FUNCTIONAL DESCRIPTION:
;	2462	!
;	2463	!	Update the priority field in RECBUF.
;	2464	!
;	2465	! INPUTS;
;	2466	!
;	2467	!	none
;	2468	!
;	2469	! OUTPUTS:
;	2470	!
;	2471	!	None
;	2472	!
;	2473	! ROUTINE VALUE:
;	2474	!
;	2475	!	true -> value updated
;	2476	!	false -> value specification error
;	2477	!--
;	2478	
;	2479	RETURN
;	2480	    GETVAL( RECBUF[UAF$B_PRI] , BYTE_LENGTH ) ;
;	2481	END;





					 0000 00AB1 GETPRIORITY:
							    .WORD   Save nothing					      ; 2456
				       08  DD 00AB3 	    PUSHL   #8							      ; 2480
				0000'  CF  9F 00AB5 	    PUSHAB  RECBUF+138						      ;
		  0000V  CF	       02  FB 00AB9 	    CALLS   #2, GETVAL						      ;
					   04 00ABE 	    RET     							      ; 2456

; Routine Size:  14 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 32
; Digital Equipment Corporation
;
;	2482	ROUTINE GETPRIV =
;	2483	BEGIN
;	2484	
;	2485	!++
;	2486	!
;	2487	! FUNCTIONAL DESCRIPTION:
;	2488	!
;	2489	!	Process privilege mask specification and set or
;	2490	!	clear proper bits in privilege quadword in RECBUF.
;	2491	!
;	2492	! INPUTS:
;	2493	!
;	2494	!	none
;	2495	!
;	2496	! IMPLICIT INPUTS:
;	2497	!
;	2498	!	none
;	2499	!
;	2500	! OUTPUTS:
;	2501	!
;	2502	!	none
;	2503	!
;	2504	! IMPLICIT OUTPUTS:
;	2505	!
;	2506	!	none
;	2507	!
;	2508	! ROUTINE VALUE:
;	2509	!
;	2510	!	true -> input processed successfully
;	2511	!	false -> error in privilege specification
;	2512	!
;	2513	! SIDE EFFECTS:
;	2514	!
;	2515	!	none
;	2516	!--
;	2517	
;	2518	LOCAL
;	2519		PAREN ,					! indicates '(' found
;	2520		PRVDSC: VECTOR[2,LONG] ,		! for privilege name descriptor
;	2521		PTR ;					! current buffer pointer
;	2522	
;	2523	! Check if only one privilege was specified, or if this
;	2524	! is a privilege list specified by "priv=(priv1,priv2,...)"
;	2525	! Current TOKENPTR should be pointing to a "(" or the
;	2526	! first letter of the first privilege name.
;	2527	!
;	2528	
;	2529	IF .(.TOKENPTR)<0,8> EQL '(' 
;	2530	THEN
;	2531	    BEGIN
;	2532	    PAREN = TRUE ;
;	2533	    TOKENPTR = .TOKENPTR + 1;
;	2534	    TOKENLEN = .TOKENLEN - 1;
;	2535	    END
;	2536	ELSE

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 32-1
; Digital Equipment Corporation
;
;	2537	    PAREN = FALSE ;
;	2538	
;	2539	!
;	2540	! Loop through if this is a list and check all of the names.
;	2541	! Set or clear appropriate bits depending on the 'NO' prefix.
;	2542	!
;	2543	
;	2544	WHILE TRUE 
;	2545	DO
;	2546	    BEGIN
;	2547	
;	2548	    !
;	2549	    ! Build descriptor for privilege name and call routine
;	2550	    ! to check name and set or clear bit.
;	2551	    !
;	2552	
;	2553	    PRVDSC[0] = .TOKENLEN ;
;	2554	    PRVDSC[1] = .TOKENPTR ;
;	2555	
;	2556	    SELECT PRV$SETPRIV( PRVDSC , RECBUF[UAF$Q_PRIV] ) OF
;	2557	    SET
;	2558	
;	2559	    [PRV$_INVNAM]:
;	2560	
;	2561		!
;	2562		! Symbol not found, report and exit with error status.
;	2563		!
;	2564	
;	2565		RETURN FAOOUT( PRVNOTFND , .TOKENLEN , .TOKENPTR ) ;
;	2566	
;	2567	    [PRV$_NOTUNQ]:
;	2568	
;	2569		!
;	2570		! Symbol not unique, report and exit with error status.
;	2571		!
;	2572	
;	2573		RETURN FAOOUT( PRVNOTUNQ , .TOKENLEN , .TOKENPTR ) ;
;	2574	
;	2575	    TES ;
;	2576	
;	2577	    !
;	2578	    ! If this is within a list, go back for next one, else exit.
;	2579	    !
;	2580	
;	2581	    IF NOT .PAREN THEN EXITLOOP ;
;	2582	
;	2583	    !
;	2584	    ! Pull off next privilege name
;	2585	    !
;	2586	
;	2587	    IF .(.NEXTTOKEN)<0,8> NEQ COMMA THEN EXITLOOP ;
;	2588	    GETTOKEN( .NEXTTOKEN+1 , TOKENPTR , NEXTTOKEN , TOKENLEN , DELIMSTR );
;	2589	    END;
;	2590	
;	2591	!

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 32-2
; Digital Equipment Corporation
;
;	2592	! If this was a list, then skip over the final delimiter which should be
;	2593	! a ')'.
;	2594	!
;	2595	
;	2596	IF .(.NEXTTOKEN)<0,8> EQL RPAREN
;	2597	THEN
;	2598	    NEXTTOKEN = .NEXTTOKEN + 1 ;
;	2599	
;	2600	RETURN TRUE ;
;	2601	END;





					 080C 00ABF GETPRIV:.WORD   Save R2,R3,R11					      ; 2482
		         5B	0000'  CF  9E 00AC1 	    MOVAB   TOKENLEN, R11					      ;
		         5E	       08  C2 00AC6 	    SUBL2   #8, SP						      ;
		         28	  04   BB  91 00AC9 	    CMPB    @TOKENPTR, #40					      ; 2529
				       0A  12 00ACD 	    BNEQ    1$							      ;
		         50	       01  D0 00ACF 	    MOVL    #1, PAREN						      ; 2532
				  04   AB  D6 00AD2 	    INCL    TOKENPTR						      ; 2533
				       6B  D7 00AD5 	    DECL    TOKENLEN						      ; 2534
				       02  11 00AD7 	    BRB     2$							      ; 2529
				       50  D4 00AD9 1$:     CLRL    PAREN						      ; 2537
		         53	       50  D2 00ADB 2$:     MCOML   PAREN, R3						      ; 2581
		         6E	       6B  D0 00ADE 3$:     MOVL    TOKENLEN, PRVDSC					      ; 2553
		    04   AE	  04   AB  D0 00AE1 	    MOVL    TOKENPTR, PRVDSC+4					      ; 2554
				  9C   AB  9F 00AE6 	    PUSHAB  RECBUF+88						      ; 2556
				  04   AE  9F 00AE9 	    PUSHAB  PRVDSC						      ;
		  0000G  CF	       02  FB 00AEC 	    CALLS   #2, PRV$SETPRIV					      ;
		         52	       50  D0 00AF1 	    MOVL    R0, R2						      ;
	      00000000G  8F	       52  D1 00AF4 	    CMPL    R2, #PRV$_INVNAM					      ;
				       09  12 00AFB 	    BNEQ    4$							      ;
		         7E	       6B  7D 00AFD 	    MOVQ    TOKENLEN, -(SP)					      ; 2565
				0000'  CF  9F 00B00 	    PUSHAB  PRVNOTFND						      ; 2482
				       10  11 00B04 	    BRB     5$							      ; 2565
	      00000000G  8F	       52  D1 00B06 4$:     CMPL    R2, #PRV$_NOTUNQ					      ; 2556
				       0D  12 00B0D 	    BNEQ    6$							      ;
		         7E	       6B  7D 00B0F 	    MOVQ    TOKENLEN, -(SP)					      ; 2573
				0000'  CF  9F 00B12 	    PUSHAB  PRVNOTUNQ						      ; 2482
		  0000V  CF	       03  FB 00B16 5$:     CALLS   #3, FAOOUT						      ; 2573
					   04 00B1B 	    RET     							      ;
		         21	       53  E8 00B1C 6$:     BLBS    R3, 7$						      ; 2581
		         2C	FF38   DB  91 00B1F 	    CMPB    @NEXTTOKEN, #44					      ; 2587
				       1A  12 00B24 	    BNEQ    7$							      ;
				0000'  CF  9F 00B26 	    PUSHAB  DELIMSTR						      ; 2482
				       5B  DD 00B2A 	    PUSHL   R11							      ; 2588
				FF38   CB  9F 00B2C 	    PUSHAB  NEXTTOKEN						      ;
				  04   AB  9F 00B30 	    PUSHAB  TOKENPTR						      ;
	   7E	  FF38   CB	       01  C1 00B33 	    ADDL3   #1, NEXTTOKEN, -(SP)				      ;
		  0000V  CF	       05  FB 00B39 	    CALLS   #5, GETTOKEN					      ;
				       9E  11 00B3E 	    BRB     3$							      ; 2544
		         29	FF38   DB  91 00B40 7$:     CMPB    @NEXTTOKEN, #41					      ; 2596
				       04  12 00B45 	    BNEQ    8$							      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 32-3
; Digital Equipment Corporation
;
				FF38   CB  D6 00B47 	    INCL    NEXTTOKEN						      ; 2598
		         50	       01  D0 00B4B 8$:     MOVL    #1, R0						      ; 2600
					   04 00B4E 	    RET     							      ; 2482

; Routine Size:  144 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 33
; Digital Equipment Corporation
;
;	2602	ROUTINE GETPASSWORD =
;	2603	BEGIN
;	2604	
;	2605	!++
;	2606	!
;	2607	! FUNCTIONAL DESCRIPTION:
;	2608	!
;	2609	!	Action routine to process password.
;	2610	!
;	2611	! INPUTS:
;	2612	!
;	2613	!	none
;	2614	!
;	2615	! IMPLICIT INPUTS:
;	2616	!
;	2617	!	NEXTTOKEN - address of delimiter to password string
;	2618	!
;	2619	! OUTPUTS:
;	2620	!
;	2621	!	none
;	2622	!
;	2623	! IMPLICIT OUTPUTS:
;	2624	!
;	2625	!	sets hashed password field in recbuf
;	2626	!
;	2627	! ROUTINE VALUE:
;	2628	!
;	2629	!	true -> success
;	2630	!	false -> failure
;	2631	!
;	2632	! SIDE EFFECTS:
;	2633	!
;	2634	!	none
;	2635	!--
;	2636	
;	2637	LOCAL
;	2638		PWDDSC: VECTOR[2,LONG] ;
;	2639	
;	2640	PWDDSC[0] = .TOKENLEN ;
;	2641	PWDDSC[1] = .TOKENPTR ;
;	2642	RECBUF[UAF$L_PWD] = LGI$HPWD( PWDDSC ) ;
;	2643	RETURN TRUE;
;	2644	END;





					 0000 00B4F GETPASSWORD:
							    .WORD   Save nothing					      ; 2602
		         5E	       04  C2 00B51 	    SUBL2   #4, SP						      ;
				0000'  CF  DD 00B54 	    PUSHL   TOKENLEN						      ; 2640
		    04   AE	0000'  CF  D0 00B58 	    MOVL    TOKENPTR, PWDDSC+4					      ; 2641
				       5E  DD 00B5E 	    PUSHL   SP							      ; 2642
		  0000G  CF	       01  FB 00B60 	    CALLS   #1, LGI$HPWD					      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 33-1
; Digital Equipment Corporation
;
		  0000'  CF	       50  D0 00B65 	    MOVL    R0, RECBUF+12					      ;
		         50	       01  D0 00B6A 	    MOVL    #1, R0						      ; 2643
					   04 00B6D 	    RET     							      ; 2602

; Routine Size:  31 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 34
; Digital Equipment Corporation
;
;	2645	ROUTINE GETTQCNT =
;	2646	BEGIN
;	2647	
;	2648	!++
;	2649	!
;	2650	! FUNCTIONAL DESCRIPTION:
;	2651	!
;	2652	!	Update the time queue entry count in RECBUF.
;	2653	!
;	2654	! INPUTS:
;	2655	!
;	2656	!	none
;	2657	!
;	2658	! OUTPUTS:
;	2659	!
;	2660	!	none
;	2661	!
;	2662	! ROUTINE VALUE:
;	2663	!
;	2664	!	true -> value updated
;	2665	!	false -> specificaton error
;	2666	!--
;	2667	
;	2668	RETURN
;	2669	    GETVAL( RECBUF[UAF$W_TQCNT] , WORD_LENGTH );
;	2670	END;





					 0000 00B6E GETTQCNT:
							    .WORD   Save nothing					      ; 2645
				       10  DD 00B70 	    PUSHL   #16							      ; 2669
				0000'  CF  9F 00B72 	    PUSHAB  RECBUF+104						      ;
		  0000V  CF	       02  FB 00B76 	    CALLS   #2, GETVAL						      ;
					   04 00B7B 	    RET     							      ; 2645

; Routine Size:  14 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 35
; Digital Equipment Corporation
;
;	2671	ROUTINE GETDFWSCNT =
;	2672	BEGIN
;	2673	
;	2674	!++
;	2675	!
;	2676	! FUNCTIONAL DESCRIPTION:
;	2677	!
;	2678	!	Update default working set size.
;	2679	!
;	2680	! INPUTS:
;	2681	!
;	2682	!	none
;	2683	!
;	2684	! OUTPUTS:
;	2685	!
;	2686	!	none
;	2687	!
;	2688	! ROUTINE VALUE:
;	2689	!
;	2690	!	true -> update successful
;	2691	!	false -> specification error
;	2692	!
;	2693	!--
;	2694	
;	2695	RETURN
;	2696	    GETVAL( RECBUF[UAF$W_DFWSCNT] , WORD_LENGTH ) ;
;	2697	END;





					 0000 00B7C GETDFWSCNT:
							    .WORD   Save nothing					      ; 2671
				       10  DD 00B7E 	    PUSHL   #16							      ; 2696
				0000'  CF  9F 00B80 	    PUSHAB  RECBUF+110						      ;
		  0000V  CF	       02  FB 00B84 	    CALLS   #2, GETVAL						      ;
					   04 00B89 	    RET     							      ; 2671

; Routine Size:  14 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 36
; Digital Equipment Corporation
;
;	2698	ROUTINE GETWSQUOTA =
;	2699	BEGIN
;	2700	
;	2701	!++
;	2702	!
;	2703	! FUNCTIONAL DESCRIPTION:
;	2704	!
;	2705	!	Update maximum working set size.
;	2706	!
;	2707	! INPUTS:
;	2708	!
;	2709	!	None
;	2710	!
;	2711	! OUTPUTS:
;	2712	!
;	2713	!	none
;	2714	!
;	2715	! ROUTINE VALUE:
;	2716	!
;	2717	!	true -> update successful
;	2718	!	false -> specification error in value
;	2719	!--
;	2720	
;	2721	RETURN
;	2722	    GETVAL( RECBUF[UAF$W_WSQUOTA] , WORD_LENGTH ) ;
;	2723	END;





					 0000 00B8A GETWSQUOTA:
							    .WORD   Save nothing					      ; 2698
				       10  DD 00B8C 	    PUSHL   #16							      ; 2722
				0000'  CF  9F 00B8E 	    PUSHAB  RECBUF+108						      ;
		  0000V  CF	       02  FB 00B92 	    CALLS   #2, GETVAL						      ;
					   04 00B97 	    RET     							      ; 2698

; Routine Size:  14 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 37
; Digital Equipment Corporation
;
;	2724	ROUTINE GETUIC =
;	2725	BEGIN
;	2726	
;	2727	!++
;	2728	!
;	2729	! FUNCTIONAL DESCRIPTION:
;	2730	!
;	2731	!	Process UIC specification
;	2732	!
;	2733	! INPUTS:
;	2734	!
;	2735	!	none
;	2736	!
;	2737	! OUTPUTS:
;	2738	!
;	2739	!	none
;	2740	!
;	2741	! ROUTINE VALUE:
;	2742	!
;	2743	!	none
;	2744	!--
;	2745	
;	2746	!
;	2747	! Parse UIC and return error if invalid.
;	2748	!
;	2749	
;	2750	IF PARSE_UIC( RECBUF[UAF$W_GRP] , RECBUF[UAF$W_MEM] )
;	2751	THEN
;	2752	    RETURN TRUE
;	2753	ELSE
;	2754	    RETURN
;	2755		FAOOUT( UICERR , .NEXTTOKEN-.OPTIONPTR , .OPTIONPTR ) ;
;	2756	END;





					 0800 00B98 GETUIC: .WORD   Save R11						      ; 2724
		         5B	0000'  CF  9E 00B9A 	    MOVAB   OPTIONPTR, R11					      ;
				  20   AB  9F 00B9F 	    PUSHAB  RECBUF+24						      ; 2750
				  22   AB  9F 00BA2 	    PUSHAB  RECBUF+26						      ;
		  0000V  CF	       02  FB 00BA5 	    CALLS   #2, PARSE_UIC					      ;
		         04	       50  E9 00BAA 	    BLBC    R0, 1$						      ;
		         50	       01  D0 00BAD 	    MOVL    #1, R0						      ; 2752
					   04 00BB0 	    RET     							      ;
				       6B  DD 00BB1 1$:     PUSHL   OPTIONPTR						      ; 2755
	   7E	    FC   AB	       6B  C3 00BB3 	    SUBL3   OPTIONPTR, NEXTTOKEN, -(SP)				      ;
				0000'  CF  9F 00BB8 	    PUSHAB  UICERR						      ; 2724
		  0000V  CF	       03  FB 00BBC 	    CALLS   #3, FAOOUT						      ; 2755
					   04 00BC1 	    RET     							      ; 2724

; Routine Size:  42 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 37-1
; Digital Equipment Corporation
;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 38
; Digital Equipment Corporation
;
;	2757	ROUTINE PARSE_UIC( RETGRP , RETMEM ) =
;	2758	BEGIN
;	2759	
;	2760	!++
;	2761	!
;	2762	! FUNCTIONAL DESCRIPTION:
;	2763	!
;	2764	!	Routine to parse and validate a UIC or directory string.
;	2765	!	The UIC is returned as group and member elements.
;	2766	!
;	2767	! INPUTS:
;	2768	!
;	2769	!	RETGRP - address of a word to receive the group number
;	2770	!	RETMEM - address of a word to receive the member number
;	2771	!
;	2772	! IMPLICIT INPUTS:
;	2773	!
;	2774	!	TOKENPTR - address of first character past delimiter
;	2775	!
;	2776	! OUTPUTS:
;	2777	!
;	2778	!	RETGRP and RETMEM receive group and member numbers if
;	2779	!	no errors are encountered.
;	2780	!
;	2781	! IMPLICIT OUTPUTS:
;	2782	!
;	2783	!	none
;	2784	!
;	2785	! ROUTINE VAUE:
;	2786	!
;	2787	!	true -> no errors found
;	2788	!	false -> error in UIC specification
;	2789	!
;	2790	! SIDE EFFECTS:
;	2791	!
;	2792	!	None
;	2793	!--
;	2794	
;	2795	BIND
;	2796		UICDLM = CSTRING( %CHAR(']') , %CHAR(SLASH) , %CHAR(ZERO) ,
;     P 2797				%CHAR(BLANK) , %CHAR(TAB) , %CHAR(COLON) ) ;
;	2798	LOCAL
;	2799		GROUP ,					! group number
;	2800		MEMBER ;				! member number
;	2801	
;	2802	!
;	2803	! Check if the first char is a left bracket '[' and skip it if
;	2804	! so.
;	2805	!
;	2806	
;	2807	IF .(.TOKENPTR)<0,8> EQL '['
;	2808	THEN
;	2809	    BEGIN
;	2810	    TOKENPTR = .TOKENPTR + 1;
;	2811	    TOKENLEN = .TOKENLEN - 1 ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 38-1
; Digital Equipment Corporation
;
;	2812	    END;
;	2813	
;	2814	!
;	2815	! Get the binary group number, check for errors.
;	2816	!
;	2817	
;	2818	IF NOT CVTNUM( .TOKENLEN , .TOKENPTR , 8 , GROUP )
;	2819	THEN
;	2820	    RETURN FALSE ;
;	2821	
;	2822	!
;	2823	! Group should contain the group part of the UIC.  If no characters
;	2824	! were scanned, then return an error.  Then check to see that the
;	2825	! delimiter was a ','.
;	2826	!
;	2827	
;	2828	IF .(.NEXTTOKEN)<0,8> NEQ COMMA
;	2829	THEN
;	2830	    RETURN FALSE ;
;	2831	
;	2832	!
;	2833	! Pull off the member number string.
;	2834	!
;	2835	
;	2836	GETTOKEN( .NEXTTOKEN+1 , TOKENPTR , NEXTTOKEN , TOKENLEN , UICDLM ) ;
;	2837	
;	2838	!
;	2839	! Get binary member number
;	2840	!
;	2841	
;	2842	IF NOT CVTNUM( .TOKENLEN , .TOKENPTR , 8 , MEMBER )
;	2843	THEN
;	2844	    RETURN FALSE ;
;	2845	
;	2846	!
;	2847	! Skip end ']' if any
;	2848	!
;	2849	
;	2850	IF .(.NEXTTOKEN)<0,8> EQL ']'
;	2851	THEN
;	2852	    NEXTTOKEN = .NEXTTOKEN+1 ;
;	2853	
;	2854	!
;	2855	! Check that UIC had valid elements.  Must be three digit octal numbers.
;	2856	!
;	2857	
;	2858	IF .GROUP GTR %O'377' OR .MEMBER GTR %O'377'
;	2859	THEN 
;	2860	    RETURN FALSE ;
;	2861	
;	2862	!
;	2863	! UIC was successfully parsed.  Return correct data, plus true indicaton.
;	2864	!
;	2865	
;	2866	(.RETGRP)<0,16> = .GROUP ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 38-2
; Digital Equipment Corporation
;
;	2867	(.RETMEM)<0,16> = .MEMBER ;
;	2868	RETURN TRUE ;
;	2869	END;



							    .PSECT  $PLIT$,NOWRT,NOEXE,2

					      00B2C P.ADN:  .BYTE   6							      ;
					      00B2D 	    .ASCII  \]/\<0>\ \<9>\:\					      ;
					      00B33	    .BLKB   1

						    UICDLM=		P.ADN


							    .PSECT  $CODE$,NOWRT,2

					 0800 00BC2 PARSE_UIC:
							    .WORD   Save R11						      ; 2757
		         5B	0000'  CF  9E 00BC4 	    MOVAB   NEXTTOKEN, R11					      ;
		         5E	       08  C2 00BC9 	    SUBL2   #8, SP						      ;
		    5B   8F	00CC   DB  91 00BCC 	    CMPB    @TOKENPTR, #91					      ; 2807
				       08  12 00BD2 	    BNEQ    1$							      ;
				00CC   CB  D6 00BD4 	    INCL    TOKENPTR						      ; 2810
				00C8   CB  D7 00BD8 	    DECL    TOKENLEN						      ; 2811
				  04   AE  9F 00BDC 1$:     PUSHAB  GROUP						      ; 2818
				       08  DD 00BDF 	    PUSHL   #8							      ;
		         7E	00C8   CB  7D 00BE1 	    MOVQ    TOKENLEN, -(SP)					      ;
		  0000V  CF	       04  FB 00BE6 	    CALLS   #4, CVTNUM						      ;
		         57	       50  E9 00BEB 	    BLBC    R0, 3$						      ;
		         2C	  00   BB  91 00BEE 	    CMPB    @NEXTTOKEN, #44					      ; 2828
				       51  12 00BF2 	    BNEQ    3$							      ;
				0000'  CF  9F 00BF4 	    PUSHAB  UICDLM						      ; 2757
				00C8   CB  9F 00BF8 	    PUSHAB  TOKENLEN						      ; 2836
				       5B  DD 00BFC 	    PUSHL   R11							      ;
				00CC   CB  9F 00BFE 	    PUSHAB  TOKENPTR						      ;
	   7E	         6B	       01  C1 00C02 	    ADDL3   #1, NEXTTOKEN, -(SP)				      ;
		  0000V  CF	       05  FB 00C06 	    CALLS   #5, GETTOKEN					      ;
				       5E  DD 00C0B 	    PUSHL   SP							      ; 2842
				       08  DD 00C0D 	    PUSHL   #8							      ;
		         7E	00C8   CB  7D 00C0F 	    MOVQ    TOKENLEN, -(SP)					      ;
		  0000V  CF	       04  FB 00C14 	    CALLS   #4, CVTNUM						      ;
		         29	       50  E9 00C19 	    BLBC    R0, 3$						      ;
		    5D   8F	  00   BB  91 00C1C 	    CMPB    @NEXTTOKEN, #93					      ; 2850
				       02  12 00C21 	    BNEQ    2$							      ;
				       6B  D6 00C23 	    INCL    NEXTTOKEN						      ; 2852
	      000000FF   8F	  04   AE  D1 00C25 2$:     CMPL    GROUP, #255						      ; 2858
				       16  14 00C2D 	    BGTR    3$							      ;
	      000000FF   8F	       6E  D1 00C2F 	    CMPL    MEMBER, #255					      ;
				       0D  14 00C36 	    BGTR    3$							      ;
		    04   BC	  04   AE  B0 00C38 	    MOVW    GROUP, @RETGRP					      ; 2866
		    08   BC	       6E  B0 00C3D 	    MOVW    MEMBER, @RETMEM					      ; 2867
		         50	       01  D0 00C41 	    MOVL    #1, R0						      ; 2868
					   04 00C44 	    RET     							      ;
				       50  D4 00C45 3$:     CLRL    R0							      ; 2757

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 38-3
; Digital Equipment Corporation
;
					   04 00C47 	    RET     							      ;

; Routine Size:  134 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 39
; Digital Equipment Corporation
;
;	2870	ROUTINE GETSTRING( ADDR , MAXSIZE , TYPE ) =
;	2871	BEGIN
;	2872	
;	2873	!++
;	2874	!
;	2875	! FUNCTIONAL DESCRIPTION:
;	2876	!
;	2877	!	This routine reads a string variable and stores it as
;	2878	!	a blank filled or counted string in the field supplied.
;	2879	!	The first character is checked to see if it is a quote
;	2880	!	or double quote and if so, a different terminator
;	2881	!	set is used so that embedded blanks may be contained
;	2882	!	in the string.
;	2883	!
;	2884	! INPUTS:
;	2885	!
;	2886	!	ADDR - address to store string
;	2887	!	MAXSIZE - size of field in which string will be stored.
;	2888	!		 If this is a counted string, the maximum input
;	2889	!		 acceptable is MAXSIZE - 1
;	2890	!	TYPE - string type, either COUNTED_STRING or FILLED_STRING
;	2891	!
;	2892	! IMPLICIT INPUTS:
;	2893	!
;	2894	!	OPTIONEND - pointer to the terminator preceeding the current
;	2895	!		    string
;	2896	!
;	2897	! OUTPUTS:
;	2898	!
;	2899	!	none
;	2900	!
;	2901	! IMPLICIT OUTPUTS:
;	2902	!
;	2903	!	none
;	2904	!
;	2905	! ROUTINE VALUE:
;	2906	!
;	2907	!	true -> string inserted successfully
;	2908	!	false -> string too long
;	2909	!
;	2910	! SIDE EFFECTS:
;	2911	!
;	2912	!	none
;	2913	!--
;	2914	
;	2915	LOCAL
;	2916	    QUOTE ;					! reading quoted string
;	2917	BIND
;	2918	    TRMSTR1 = CSTRING(
;     P 2919			%CHAR( BLANK ) ,
;     P 2920			%CHAR( TAB ) ,
;     P 2921			%CHAR( SLASH ) ,
;     P 2922			%CHAR( ZERO ) ,
;     P 2923			%CHAR( SINGLE_QUOTE ),
;     P 2924			%CHAR( DOUBLE_QUOTE )

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 39-1
; Digital Equipment Corporation
;
;     P 2925			),
;	2926	    TRMSTR2 = CSTRING(
;     P 2927			%CHAR( TAB ) ,
;     P 2928			%CHAR( SLASH ) ,
;     P 2929			%CHAR( ZERO ) ,
;     P 2930			%CHAR( SINGLE_QUOTE ) ,
;     P 2931			%CHAR( DOUBLE_QUOTE )
;     P 2932			) ;
;	2933	
;	2934	!
;	2935	! Check to see if the string is contained in quotes.
;	2936	!
;	2937	
;	2938	QUOTE = FALSE ;
;	2939	IF .(.OPTIONEND+1)<0,8> EQL SINGLE_QUOTE
;	2940	    OR .(.OPTIONEND+1)<0,8> EQL DOUBLE_QUOTE
;	2941		THEN ( QUOTE = TRUE ; OPTIONEND = .OPTIONEND + 1 ; ) ;
;	2942	
;	2943	!
;	2944	! Rescan the input line using the proper terminator sequence.
;	2945	!
;	2946	
;	2947	GETTOKEN( .OPTIONEND+1 , TOKENPTR , NEXTTOKEN , TOKENLEN , 
;	2948		    ( IF .QUOTE THEN TRMSTR2 ELSE TRMSTR1) ) ;
;	2949	
;	2950	!
;	2951	! Check string for proper length.
;	2952	! Allow a zero length quoted string for removal of a field.
;	2953	!
;	2954	
;	2955	IF .TOKENLEN EQL 0 AND NOT .QUOTE
;	2956	THEN
;	2957	    RETURN
;	2958		FAOOUT( NOARG , .NEXTTOKEN-.OPTIONPTR , .OPTIONPTR ) ;
;	2959	
;	2960	IF .TYPE EQL COUNTED_STRING
;	2961	THEN
;	2962	    MAXSIZE = .MAXSIZE - 1 ;
;	2963	
;	2964	IF .TOKENLEN GTR .MAXSIZE
;	2965	THEN
;	2966	    RETURN
;	2967		FAOOUT( INVSTR , .NEXTTOKEN-.OPTIONPTR , .OPTIONPTR ) ;
;	2968	
;	2969	IF .TYPE EQL COUNTED_STRING
;	2970	THEN
;	2971	    BEGIN
;	2972	    (.ADDR)<0,8> = .TOKENLEN ;
;	2973	    CH$MOVE( .TOKENLEN , .TOKENPTR , .ADDR+1 ) ;
;	2974	    END 
;	2975	ELSE
;	2976	    CH$COPY( .TOKENLEN , .TOKENPTR , %CHAR(BLANK) ,
;	2977			.MAXSIZE , .ADDR ) ;
;	2978	
;	2979	!

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 39-2
; Digital Equipment Corporation
;
;	2980	! If this was a quoted string then make sure we terminated
;	2981	! on a quote, and skip over it.
;	2982	!
;	2983	
;	2984	IF .QUOTE
;	2985	THEN
;	2986	    BEGIN
;	2987	    IF  .(.NEXTTOKEN)<0,8> EQL SINGLE_QUOTE OR .(.NEXTTOKEN)<0,8> EQL DOUBLE_QUOTE 
;	2988	    THEN
;	2989		NEXTTOKEN = .NEXTTOKEN + 1 
;	2990	    ELSE
;	2991		RETURN
;	2992		    FAOOUT( NOQUOTE , .NEXTTOKEN-.OPTIONPTR , .OPTIONPTR ) ;
;	2993	    END ;
;	2994	
;	2995	RETURN TRUE ;
;	2996	END;



							    .PSECT  $PLIT$,NOWRT,NOEXE,2

					      00B34 P.ADO:  .BYTE   6							      ;
					      00B35 	    .ASCII  \ \<9>\/\<0>\'"\					      ;
					      00B3B	    .BLKB   1
					      00B3C P.ADP:  .BYTE   5							      ;
					      00B3D 	    .ASCII  <9>\/\<0>\'"\					      ;
					      00B42	    .BLKB   2

						    TRMSTR1=		P.ADO
						    TRMSTR2=		P.ADP


							    .PSECT  $CODE$,NOWRT,2

					 087C 00C48 GETSTRING:
							    .WORD   Save R2,R3,R4,R5,R6,R11				      ; 2870
		         5B	0000'  CF  9E 00C4A 	    MOVAB   OPTIONPTR, R11					      ;
				       56  D4 00C4F 	    CLRL    QUOTE						      ; 2938
		         50	  04   AB  D0 00C51 	    MOVL    OPTIONEND, R0					      ; 2939
		         27	  01   A0  91 00C55 	    CMPB    1(R0), #39						      ;
				       06  13 00C59 	    BEQL    1$							      ;
		         22	  01   A0  91 00C5B 	    CMPB    1(R0), #34						      ; 2940
				       06  12 00C5F 	    BNEQ    2$							      ;
		         56	       01  D0 00C61 1$:     MOVL    #1, QUOTE						      ; 2941
				  04   AB  D6 00C64 	    INCL    OPTIONEND						      ;
		         07	       56  E9 00C67 2$:     BLBC    QUOTE, 3$						      ; 2948
		         50	0000'  CF  9E 00C6A 	    MOVAB   TRMSTR2, R0						      ; 2870
				       05  11 00C6F 	    BRB     4$							      ; 2948
		         50	0000'  CF  9E 00C71 3$:     MOVAB   TRMSTR1, R0						      ; 2870
				       50  DD 00C76 4$:     PUSHL   R0							      ; 2948
				00C4   CB  9F 00C78 	    PUSHAB  TOKENLEN						      ; 2947
				  FC   AB  9F 00C7C 	    PUSHAB  NEXTTOKEN						      ;
				00C8   CB  9F 00C7F 	    PUSHAB  TOKENPTR						      ;
	   7E	    04   AB	       01  C1 00C83 	    ADDL3   #1, OPTIONEND, -(SP)				      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 39-3
; Digital Equipment Corporation
;
		  0000V  CF	       05  FB 00C88 	    CALLS   #5, GETTOKEN					      ;
				00C4   CB  D5 00C8D 	    TSTL    TOKENLEN						      ; 2955
				       10  12 00C91 	    BNEQ    5$							      ;
		         0D	       56  E8 00C93 	    BLBS    QUOTE, 5$						      ;
				       6B  DD 00C96 	    PUSHL   OPTIONPTR						      ; 2958
	   7E	    FC   AB	       6B  C3 00C98 	    SUBL3   OPTIONPTR, NEXTTOKEN, -(SP)				      ;
				0000'  CF  9F 00C9D 	    PUSHAB  NOARG						      ; 2870
				       63  11 00CA1 	    BRB     12$							      ; 2958
				       52  D4 00CA3 5$:     CLRL    R2							      ; 2960
		         01	  0C   AC  D1 00CA5 	    CMPL    TYPE, #1						      ;
				       05  12 00CA9 	    BNEQ    6$							      ;
				       52  D6 00CAB 	    INCL    R2							      ;
				  08   AC  D7 00CAD 	    DECL    MAXSIZE						      ; 2962
		    08   AC	00C4   CB  D1 00CB0 6$:     CMPL    TOKENLEN, MAXSIZE					      ; 2964
				       0D  15 00CB6 	    BLEQ    7$							      ;
				       6B  DD 00CB8 	    PUSHL   OPTIONPTR						      ; 2967
	   7E	    FC   AB	       6B  C3 00CBA 	    SUBL3   OPTIONPTR, NEXTTOKEN, -(SP)				      ;
				0000'  CF  9F 00CBF 	    PUSHAB  INVSTR						      ; 2870
				       41  11 00CC3 	    BRB     12$							      ; 2967
		         51	00C4   CB  D0 00CC5 7$:     MOVL    TOKENLEN, R1					      ; 2972
		         50	  04   AC  D0 00CCA 	    MOVL    ADDR, R0						      ;
		         0C	       52  E9 00CCE 	    BLBC    R2, 8$						      ; 2969
		         60	       51  90 00CD1 	    MOVB    R1, (R0)						      ; 2972
      01   A0	  00C8   DB	       51  28 00CD4 	    MOVC3   R1, @TOKENPTR, 1(R0)				      ; 2973
				       09  11 00CDB 	    BRB     9$							      ; 2969
	   20	  00C8   DB	       51  2C 00CDD 8$:     MOVC5   R1, @TOKENPTR, #32, MAXSIZE, (R0)			      ; 2976
		         60	  08   AC     00CE3									      ;
		         23	       56  E9 00CE6 9$:     BLBC    QUOTE, 13$						      ; 2984
		         50	  FC   AB  D0 00CE9 	    MOVL    NEXTTOKEN, R0					      ; 2987
		         27	       60  91 00CED 	    CMPB    (R0), #39						      ;
				       05  13 00CF0 	    BEQL    10$							      ;
		         22	       60  91 00CF2 	    CMPB    (R0), #34						      ;
				       05  12 00CF5 	    BNEQ    11$							      ;
				  FC   AB  D6 00CF7 10$:    INCL    NEXTTOKEN						      ; 2989
				       10  11 00CFA 	    BRB     13$							      ; 2987
				       6B  DD 00CFC 11$:    PUSHL   OPTIONPTR						      ; 2992
	   7E	         50	       6B  C3 00CFE 	    SUBL3   OPTIONPTR, R0, -(SP)				      ;
				0000'  CF  9F 00D02 	    PUSHAB  NOQUOTE						      ; 2870
		  0000V  CF	       03  FB 00D06 12$:    CALLS   #3, FAOOUT						      ; 2992
					   04 00D0B 	    RET     							      ; 2991
		         50	       01  D0 00D0C 13$:    MOVL    #1, R0						      ; 2995
					   04 00D0F 	    RET     							      ; 2870

; Routine Size:  200 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 40
; Digital Equipment Corporation
;
;	2997	ROUTINE GETVAL(ADDR , SIZE) =
;	2998	BEGIN
;	2999	
;	3000	!++
;	3001	!
;	3002	! FUNCTIONAL DESCRIPTION:
;	3003	!
;	3004	!	Routine to return binary value for next ASCII decimal
;	3005	!	number in the input stream.
;	3006	!
;	3007	! INPUTS:
;	3008	!
;	3009	!	ADDR - address to return converted value
;	3010	!	SIZE - size in bits of field in which to return value
;	3011	!
;	3012	! IMPLICIT INPUTS:
;	3013	!
;	3014	!	NEXTTOKEN - contains address of delimiter preceeding the number
;	3015	!
;	3016	! OUTPUTS:
;	3017	!
;	3018	!	field described by ADDR and SIZE receives binary value
;	3019	!
;	3020	! IMPLICIT OUTPUTS:
;	3021	!
;	3022	!	none
;	3023	!
;	3024	! ROUTINE VALUE:
;	3025	!
;	3026	!	true -> value converted successfully
;	3027	!	false -> non-numeric character encounted before next
;	3028	!		delimiter found
;	3029	!
;	3030	! SIDE EFFECTS:
;	3031	!
;	3032	!	If error is encountered, an error message will be printed.
;	3033	!
;	3034	!--
;	3035	
;	3036	LOCAL
;	3037		VALUE ;					! for value returned
;	3038							! by CVTNUM routine
;	3039	
;	3040	!
;	3041	! Check for no value supplied
;	3042	!
;	3043	
;	3044	IF .TOKENLEN EQL 0
;	3045	THEN
;	3046	    RETURN
;	3047		FAOOUT( NOARG , .TOKENPTR-.OPTIONPTR , .OPTIONPTR ) ;
;	3048	
;	3049	!
;	3050	! Convert to decimal. Report error if any non-numerics encountered.
;	3051	!

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 40-1
; Digital Equipment Corporation
;
;	3052	
;	3053	IF NOT CVTNUM( .TOKENLEN , .TOKENPTR , 10 , VALUE )
;	3054	THEN
;	3055	    RETURN
;	3056		FAOOUT( BADVALUE , .NEXTTOKEN-.OPTIONPTR , .OPTIONPTR ) ;
;	3057	
;	3058	!
;	3059	! Check that the value supplied is within the size of
;	3060	! the field to be stored.
;	3061	!
;	3062	
;	3063	IF .VALUE< .SIZE , 32-.SIZE > NEQ 0
;	3064	THEN
;	3065	    RETURN FAOOUT( VALTOOBIG , .NEXTTOKEN-.OPTIONPTR , .OPTIONPTR ) ;
;	3066	
;	3067	!
;	3068	! Finally , store the value in field specified .
;	3069	!
;	3070	
;	3071	(.ADDR)<0,.SIZE> = .VALUE ;
;	3072	
;	3073	RETURN TRUE ;
;	3074	END;





					 0800 00D10 GETVAL: .WORD   Save R11						      ; 2997
		         5B	0000'  CF  9E 00D12 	    MOVAB   OPTIONPTR, R11					      ;
		         5E	       04  C2 00D17 	    SUBL2   #4, SP						      ;
				00C4   CB  D5 00D1A 	    TSTL    TOKENLEN						      ; 3044
				       0E  12 00D1E 	    BNEQ    1$							      ;
				       6B  DD 00D20 	    PUSHL   OPTIONPTR						      ; 3047
	   7E	  00C8   CB	       6B  C3 00D22 	    SUBL3   OPTIONPTR, TOKENPTR, -(SP)				      ;
				0000'  CF  9F 00D28 	    PUSHAB  NOARG						      ; 2997
				       36  11 00D2C 	    BRB     3$							      ; 3047
				       5E  DD 00D2E 1$:     PUSHL   SP							      ; 3053
				       0A  DD 00D30 	    PUSHL   #10							      ;
		         7E	00C4   CB  7D 00D32 	    MOVQ    TOKENLEN, -(SP)					      ;
		  0000V  CF	       04  FB 00D37 	    CALLS   #4, CVTNUM						      ;
		         0D	       50  E8 00D3C 	    BLBS    R0, 2$						      ;
				       6B  DD 00D3F 	    PUSHL   OPTIONPTR						      ; 3056
	   7E	    FC   AB	       6B  C3 00D41 	    SUBL3   OPTIONPTR, NEXTTOKEN, -(SP)				      ;
				0000'  CF  9F 00D46 	    PUSHAB  BADVALUE						      ; 2997
				       18  11 00D4A 	    BRB     3$							      ; 3056
	   50	         20	  08   AC  C3 00D4C 2$:     SUBL3   SIZE, #32, R0					      ; 3063
	   6E	         50	  08   AC  EF 00D51 	    EXTZV   SIZE, R0, VALUE, R1					      ;
				       51     00D56									      ;
				       11  13 00D57 	    BEQL    4$							      ;
				       6B  DD 00D59 	    PUSHL   OPTIONPTR						      ; 3065
	   7E	    FC   AB	       6B  C3 00D5B 	    SUBL3   OPTIONPTR, NEXTTOKEN, -(SP)				      ;
				0000'  CF  9F 00D60 	    PUSHAB  VALTOOBIG						      ; 2997
		  0000V  CF	       03  FB 00D64 3$:     CALLS   #3, FAOOUT						      ; 3065
					   04 00D69 	    RET     							      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 40-2
; Digital Equipment Corporation
;
      08   AC	         00	       6E  F0 00D6A 4$:     INSV    VALUE, #0, SIZE, @ADDR				      ; 3071
				  04   BC     00D6F									      ;
		         50	       01  D0 00D71 	    MOVL    #1, R0						      ; 3073
					   04 00D74 	    RET     							      ; 2997

; Routine Size:  101 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 41
; Digital Equipment Corporation
;
;	3075	ROUTINE CVTNUM( SIZE , ADR , RADIX , VALADR ) =
;	3076	BEGIN
;	3077	
;	3078	!++
;	3079	!
;	3080	! FUNCTIONAL DESCIRPTION:
;	3081	!
;	3082	!	Routine to convert ascii digits to binary.
;	3083	!
;	3084	! INPUTS:
;	3085	!
;	3086	!	SIZE - number of digits in input buffer
;	3087	!	ADR - address of the buffer containing ascii digits
;	3088	!	RADIX - radix of number to be converted
;	3089	!	VALADR - address of longword to receive converted value
;	3090	!
;	3091	! IMPLICIT INPUTS:
;	3092	!
;	3093	!	none
;	3094	!
;	3095	! OUTPUTS:
;	3096	!
;	3097	!	longword pointed to by VALADR receives converted value
;	3098	!
;	3099	! IMPLICIT OUTPUTS:
;	3100	!
;	3101	!	none
;	3102	!
;	3103	! ROUTINE VALUE:
;	3104	!
;	3105	!	true -> value successfully converted
;	3106	!	false -> non-numeric encountered before end of string
;	3107	!
;	3108	! SIDE EFFECTS:
;	3109	!
;	3110	!	none
;	3111	!--
;	3112	BIND
;	3113		SUM = .VALADR ;				! address ref scaler
;	3114	
;	3115	
;	3116	SUM = 0 ;
;	3117	
;	3118	!
;	3119	! Loop thorugh buffer.  Stop on end of string or non-decimal digit.
;	3120	!
;	3121	
;	3122	INCR I FROM .ADR TO ( .ADR + .SIZE - 1 )
;	3123	DO
;	3124	    BEGIN
;	3125	    LOCAL
;	3126		DIGIT ,
;	3127		POINTER ;
;	3128	
;	3129	    DIGIT = .(.I)<0,8> ;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 41-1
; Digital Equipment Corporation
;
;	3130	
;	3131	    !
;	3132	    ! Check validity of digit depending on radix
;	3133	    !
;	3134	
;	3135	
;	3136	    POINTER = CH$FIND_CH( .RADIX , NUMBERS , .DIGIT ) ;
;	3137	    IF CH$FAIL( .POINTER )
;	3138	    THEN
;	3139		RETURN FALSE
;	3140	    ELSE
;	3141		SUM = (.SUM*.RADIX) + ( .POINTER - NUMBERS )
;	3142	    END;
;	3143	
;	3144	RETURN TRUE ;
;	3145	END;





					 003C 00D75 CVTNUM: .WORD   Save R2,R3,R4,R5					      ; 3075
		         54	  10   AC  D0 00D77 	    MOVL    VALADR, R4						      ; 3076
				       64  D4 00D7B 	    CLRL    (R4)						      ; 3116
	   55	    08   AC	  04   AC  C1 00D7D 	    ADDL3   SIZE, ADR, R5					      ; 3122
	   53	    08   AC	       01  C3 00D83 	    SUBL3   #1, ADR, I						      ;
				       24  11 00D88 	    BRB     3$							      ;
		         50	       63  9A 00D8A 1$:     MOVZBL  (I), DIGIT						      ; 3129
    0000'  CF	    0C   AC	       50  3A 00D8D 	    LOCC    DIGIT, RADIX, NUMBERS				      ; 3136
				       02  12 00D94 	    BNEQ    2$							      ;
				       51  D4 00D96 	    CLRL    R1							      ;
		         50	       51  D0 00D98 2$:     MOVL    R1, POINTER						      ;
				       19  13 00D9B 	    BEQL    4$							      ; 3137
	   51	         64	  0C   AC  C5 00D9D 	    MULL3   RADIX, (R4), R1					      ; 3141
		         52	0000'  CF  9E 00DA2 	    MOVAB   NUMBERS, R2						      ; 3075
		         50	       52  C2 00DA7 	    SUBL2   R2, R0						      ; 3141
	   64	         51	       50  C1 00DAA 	    ADDL3   R0, R1, (R4)					      ;
	   D8	         53	       55  F2 00DAE 3$:     AOBLSS  R5, I, 1$						      ; 3122
		         50	       01  D0 00DB2 	    MOVL    #1, R0						      ; 3144
					   04 00DB5 	    RET     							      ;
				       50  D4 00DB6 4$:     CLRL    R0							      ; 3075
					   04 00DB8 	    RET     							      ;

; Routine Size:  68 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 42
; Digital Equipment Corporation
;
;	3146	ROUTINE GETTOKEN(PTR,NEWSTART,NEWPTR,LEN,DELIMITER) =
;	3147	BEGIN
;	3148	
;	3149	!++
;	3150	! FUNCTIONAL DESCRIPTION:
;	3151	!	This routine scans a buffer for the next token
;	3152	!	delimited by one of the characters specified in the
;	3153	!	delimiter string.
;	3154	!	Leading blanks and tabs are removed.  The starting address of
;	3155	!	the token is returned, as well as a pointer to the delimiter.
;	3156	!
;	3157	! INPUTS:
;	3158	!
;	3159	!	PTR	- The address of the current char in the buffer.
;	3160	!	NEWSTART - The address of a location to contain the start of
;	3161	!		   the token.
;	3162	!	NEWPTR	- The address of a location to contain the pointer to the 
;	3163	!		  delimiter.
;	3164	!	LEN	- The address of a location to contain the token length.
;	3165	!	DELIMITER - address of a counted ascii string of delimiters
;	3166	!
;	3167	! OUTPUTS:
;	3168	!	
;	3169	!	NEWSTART - Address pointed to contains token address.
;	3170	!	NEWPTR - Address pointed to contains address of delimiter.
;	3171	!	LEN - Address pointed to contains length of token.
;	3172	!
;	3173	!--
;	3174	
;	3175	MAP
;	3176		DELIMITER: REF VECTOR [,BYTE] ;
;	3177	BIND
;	3178		CURRENT = .NEWPTR,			!current char pointer
;	3179		NEWLEN = .LEN ;				!length of string
;	3180	!
;	3181	! skip over leading blanks
;	3182	!
;	3183	
;	3184	CURRENT = .PTR ;				! copy current pointer
;	3185	WHILE .(.CURRENT)<0,8> EQL BLANK
;	3186	    OR .(.CURRENT)<0,8> EQL TAB
;	3187	    OR .(.CURRENT)<0,8> EQL SLASH
;	3188	DO CURRENT = .CURRENT + 1 ;	
;	3189	
;	3190	.NEWSTART=.CURRENT ;				!return new starting ptr
;	3191	NEWLEN = 0;					!init length
;	3192	
;	3193	! look for a delimiter
;	3194	
;	3195	WHILE
;	3196	    CH$FAIL
;	3197		( CH$FIND_CH( .DELIMITER[0] , DELIMITER[1] , .(.CURRENT)<0,8> ))
;	3198	DO
;	3199	    BEGIN
;	3200	    CURRENT = .CURRENT + 1 ;			!look to next char

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 42-1
; Digital Equipment Corporation
;
;	3201	    NEWLEN = .NEWLEN + 1 ;			!string is one longer
;	3202	    END;
;	3203	END;





					 001C 00DB9 GETTOKEN:
							    .WORD   Save R2,R3,R4					      ; 3146
		         52	  0C   AC  7D 00DBB 	    MOVQ    NEWPTR, R2						      ; 3147
		         62	  04   AC  D0 00DBF 	    MOVL    PTR, (R2)						      ; 3184
		         20	  00   B2  91 00DC3 1$:     CMPB    @0(R2), #32						      ; 3185
				       0C  13 00DC7 	    BEQL    2$							      ;
		         09	  00   B2  91 00DC9 	    CMPB    @0(R2), #9						      ; 3186
				       06  13 00DCD 	    BEQL    2$							      ;
		         2F	  00   B2  91 00DCF 	    CMPB    @0(R2), #47						      ; 3187
				       04  12 00DD3 	    BNEQ    3$							      ;
				       62  D6 00DD5 2$:     INCL    (R2)						      ; 3188
				       EA  11 00DD7 	    BRB     1$							      ; 3185
		    08   BC	       62  D0 00DD9 3$:     MOVL    (R2), @NEWSTART					      ; 3190
				       63  D4 00DDD 	    CLRL    (R3)						      ; 3191
	   54	    14   AC	       01  C1 00DDF 	    ADDL3   #1, DELIMITER, R4					      ; 3197
		         50	  14   BC  9A 00DE4 4$:     MOVZBL  @DELIMITER, R0					      ;
	   64	         50	  00   B2  3A 00DE8 	    LOCC    @0(R2), R0, (R4)					      ;
				       02  12 00DED 	    BNEQ    5$							      ;
				       51  D4 00DEF 	    CLRL    R1							      ;
				       51  D5 00DF1 5$:     TSTL    R1							      ;
				       06  12 00DF3 	    BNEQ    6$							      ;
				       62  D6 00DF5 	    INCL    (R2)						      ; 3200
				       63  D6 00DF7 	    INCL    (R3)						      ; 3201
				       E9  11 00DF9 	    BRB     4$							      ; 3195
				       50  D4 00DFB 6$:     CLRL    R0							      ; 3146
					   04 00DFD 	    RET     							      ;

; Routine Size:  69 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 43
; Digital Equipment Corporation
;
;	3204	ROUTINE GET_USER_RECORD =
;	3205	BEGIN
;	3206	
;	3207	!++
;	3208	!
;	3209	! FUNCTIONAL DESCRIPTION:
;	3210	!
;	3211	!	This routine pulls the next token out of the command
;	3212	!	buffer, assuming it is the username, and looks up the
;	3213	!	UAF record for that name.  If the record is found,
;	3214	!	it is loaded into RECBUF (by routine LOCATE_USER) .
;	3215	!
;	3216	! INPUTS:
;	3217	!
;	3218	!	none
;	3219	!
;	3220	! IMPLICIT INPUTS:
;	3221	!
;	3222	!	TOKENPTR - address of delimiter following last token processed,
;	3223	!		  which was the command name.
;	3224	!	TOKENLEN - global variable to contain length of current token
;	3225	!	NEXTTOKEN - global to be loaded with address of delimiter following
;	3226	!		    the username string
;	3227	!
;	3228	! OUTPUTS:
;	3229	!
;	3230	!	none
;	3231	!
;	3232	! IMPLICIT OUTPUTS:
;	3233	!
;	3234	!	none
;	3235	!
;	3236	! ROUTINE VALUE:
;	3237	!
;	3238	!	true -> user record found
;	3239	!	false -> user record not found
;	3240	!
;	3241	! SIDE EFFECTS:
;	3242	!
;	3243	!	none
;	3244	!--
;	3245	
;	3246	!
;	3247	! Check for end of command line.
;	3248	!
;	3249	
;	3250	IF .(.NEXTTOKEN)<0,8> EQL ZERO 
;	3251	THEN
;	3252	    RETURN
;	3253		( FAOOUT( NOUSERNAME ) ; FALSE ) ;
;	3254	
;	3255	!
;	3256	! Skip over the delimiter and pull off the next token which should
;	3257	! be the username.  Look it up in the file.
;	3258	!

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 43-1
; Digital Equipment Corporation
;
;	3259	
;	3260	GETTOKEN ( .NEXTTOKEN+1 , TOKENPTR , NEXTTOKEN , TOKENLEN , DELIMSTR ) ;
;	3261	
;	3262	IF LOCATE_USER( .TOKENLEN , .TOKENPTR ) 
;	3263	THEN
;	3264	    RETURN TRUE 
;	3265	ELSE
;	3266	    BEGIN
;	3267	    FAOOUT( BADUSR , .TOKENLEN , .TOKENPTR ) ;
;	3268	    RETURN FALSE ;
;	3269	    END; 
;	3270	
;	3271	END;





					 0000 00DFE GET_USER_RECORD:
							    .WORD   Save nothing					      ; 3204
				0000'  DF  95 00E00 	    TSTB    @NEXTTOKEN						      ; 3250
				       0B  12 00E04 	    BNEQ    1$							      ;
				0000'  CF  9F 00E06 	    PUSHAB  NOUSERNAME						      ; 3204
		  0000V  CF	       01  FB 00E0A 	    CALLS   #1, FAOOUT						      ; 3253
				       39  11 00E0F 	    BRB     3$							      ; 3252
				0000'  CF  9F 00E11 1$:     PUSHAB  DELIMSTR						      ; 3204
				0000'  CF  9F 00E15 	    PUSHAB  TOKENLEN						      ; 3260
				0000'  CF  9F 00E19 	    PUSHAB  NEXTTOKEN						      ;
				0000'  CF  9F 00E1D 	    PUSHAB  TOKENPTR						      ;
	   7E	  0000'  CF	       01  C1 00E21 	    ADDL3   #1, NEXTTOKEN, -(SP)				      ;
		    8E   AF	       05  FB 00E27 	    CALLS   #5, GETTOKEN					      ;
		         7E	0000'  CF  7D 00E2B 	    MOVQ    TOKENLEN, -(SP)					      ; 3262
		  F854   CF	       02  FB 00E30 	    CALLS   #2, LOCATE_USER					      ;
		         04	       50  E9 00E35 	    BLBC    R0, 2$						      ;
		         50	       01  D0 00E38 	    MOVL    #1, R0						      ; 3264
					   04 00E3B 	    RET     							      ;
		         7E	0000'  CF  7D 00E3C 2$:     MOVQ    TOKENLEN, -(SP)					      ; 3267
				0000'  CF  9F 00E41 	    PUSHAB  BADUSR						      ; 3204
		  0000V  CF	       03  FB 00E45 	    CALLS   #3, FAOOUT						      ; 3267
				       50  D4 00E4A 3$:     CLRL    R0							      ; 3204
					   04 00E4C 	    RET     							      ;

; Routine Size:  79 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 44
; Digital Equipment Corporation
;
;	3272	ROUTINE ASK( STRING , BUFFER , LEN ) =
;	3273	BEGIN
;	3274	
;	3275	!++
;	3276	!
;	3277	! FUNCTIONAL DESCTIPTION:
;	3278	!
;	3279	!	Routine to prompt user for input.  The input string is read
;	3280	!	into the user specified buffer and the size read
;	3281	!	is placed in the global INSIZE.
;	3282	!
;	3283	! INPUTS:
;	3284	!
;	3285	!	STRING - the address of a counted ascii prompt string
;	3286	!	BUFFER - address of the input buffer
;	3287	!	LEN - length of the input buffer
;	3288	!
;	3289	! IMPLICIT INPUTS:
;	3290	!
;	3291	!	none
;	3292	!
;	3293	! OUTPUTS:
;	3294	!
;	3295	!	none
;	3296	!
;	3297	! IMPLICIT OUTPUTS:
;	3298	!
;	3299	!	INSIZE - size of the input string
;	3300	!
;	3301	! ROUTINE VALUE:
;	3302	!
;	3303	!	none
;	3304	!
;	3305	! SIDE EFFECTS:
;	3306	!
;	3307	!	none
;	3308	!--
;	3309	
;	3310	MAP
;	3311		BUFFER: REF VECTOR[,BYTE] ;
;	3312	
;	3313	INRAB[RAB$L_PBF] = .STRING + 1 ;			! prompt string address
;	3314	INRAB[RAB$B_PSZ] = .(.STRING)<0,8> ;			! prompt size
;	3315	INRAB[RAB$L_UBF] = .BUFFER ;				! buffer address
;	3316	INRAB[RAB$W_USZ] = .LEN ;				! buffer size
;	3317	
;	3318	!
;	3319	! If end of file encountered on get (either ^Z from terminal or
;	3320	! end of file on indirect command file) then take exit path.
;	3321	!
;	3322	
;	3323	IF $GET( RAB=INRAB ) EQL RMS$_EOF
;	3324	THEN
;	3325	    EXIT() ;
;	3326	

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 44-1
; Digital Equipment Corporation
;
;	3327	INSIZE = .INRAB[RAB$W_RSZ] ;				! get input size
;	3328	BUFFER[.INSIZE] = 0 ;					! zero end of buffer
;	3329	END;





					 0000 00E4D ASK:    .WORD   Save nothing					      ; 3272
    0000'  CF	    04   AC	       01  C1 00E4F 	    ADDL3   #1, STRING, INRAB+48				      ; 3313
		  0000'  CF	  04   BC  90 00E56 	    MOVB    @STRING, INRAB+52					      ; 3314
		  0000'  CF	  08   AC  D0 00E5C 	    MOVL    BUFFER, INRAB+36					      ; 3315
		  0000'  CF	  0C   AC  B0 00E62 	    MOVW    LEN, INRAB+32					      ; 3316
				0000'  CF  9F 00E68 	    PUSHAB  INRAB						      ; 3323
	      00000000G  9F	       01  FB 00E6C 	    CALLS   #1, @#SYS$GET					      ;
	      0001827A   8F	       50  D1 00E73 	    CMPL    R0, #98938						      ;
				       05  12 00E7A 	    BNEQ    1$							      ;
		  0000V  CF	       00  FB 00E7C 	    CALLS   #0, EXIT						      ; 3325
		  0000'  CF	0000'  CF  3C 00E81 1$:     MOVZWL  INRAB+34, INSIZE					      ; 3327
	   50	    08   AC	0000'  CF  C1 00E88 	    ADDL3   INSIZE, BUFFER, R0					      ; 3328
				       60  94 00E8F 	    CLRB    (R0)						      ;
				       50  D4 00E91 	    CLRL    R0							      ; 3272
					   04 00E93 	    RET     							      ;

; Routine Size:  71 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 45
; Digital Equipment Corporation
;
;	3330	ROUTINE FAOOUT( STRING , P1 ) =
;	3331	BEGIN
;	3332	
;	3333	!++
;	3334	!
;	3335	! FUNCTIONAL DESCRIPTION:
;	3336	!
;	3337	!	Routine to output a formatted string.
;	3338	!
;	3339	! INPUTS:
;	3340	!
;	3341	!	STRING - address of a counted ASCII FAO control string.
;	3342	!	P1 - the first of possibly several parameters to FAO
;	3343	!
;	3344	! IMPLICIT INPUTS:
;	3345	!
;	3346	!	none
;	3347	!
;	3348	! OUTPUTS:
;	3349	!
;	3350	!	none
;	3351	!
;	3352	! IMPLICIT OUTPUTS:
;	3353	!
;	3354	!	none
;	3355	!
;	3356	! ROUTINE VALUE:
;	3357	!
;	3358	!	FAOOUT always returns FALSE, as it is often used on the
;	3359	!	return from an error condition.
;	3360	!
;	3361	! SIDE EFFECTS:
;	3362	!
;	3363	!	none
;	3364	!--
;	3365	
;	3366	LITERAL
;	3367		OUTBUFLEN = 200 ;			! buffer size
;	3368	LOCAL
;	3369		FAODSC: VECTOR[2,LONG] ,		! input descriptor
;	3370		FAOLEN: WORD ,				! FAO return length
;	3371		OUTBUF: VECTOR[OUTBUFLEN,BYTE] ,	! output buffer
;	3372		OUTDSC: VECTOR[2,LONG] ;		! output buffer descriptor
;	3373	
;	3374	
;	3375	FAODSC[0] = .(.STRING)<0,8> ;			! input string descriptor
;	3376	FAODSC[1] = .STRING+1 ;
;	3377	OUTDSC[0] = OUTBUFLEN ;				! output buffer descriptor
;	3378	OUTDSC[1] = OUTBUF ;
;	3379	$FAOL( CTRSTR = FAODSC , OUTLEN = FAOLEN , OUTBUF = OUTDSC , PRMLST = P1) ;
;	3380	
;	3381	OUTRAB[RAB$L_RBF] = OUTBUF ;
;	3382	OUTRAB[RAB$W_RSZ] = .FAOLEN ;
;	3383	$PUT( RAB=OUTRAB ) ;
;	3384	RETURN FALSE;

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 45-1
; Digital Equipment Corporation
;
;	3385	END;



							    .GLOBL  SYS$FAOL

					 0000 00E94 FAOOUT: .WORD   Save nothing					      ; 3330
		         5E	FF24   CE  9E 00E96 	    MOVAB   -220(SP), SP					      ;
		    F8   AD	  04   BC  9A 00E9B 	    MOVZBL  @STRING, FAODSC					      ; 3375
      FC   AD	    04   AC	       01  C1 00EA0 	    ADDL3   #1, STRING, FAODSC+4				      ; 3376
		    04   AE	  C8   8F  9A 00EA6 	    MOVZBL  #200, OUTDSC					      ; 3377
		    08   AE	  0C   AE  9E 00EAB 	    MOVAB   OUTBUF, OUTDSC+4					      ; 3378
				  08   AC  9F 00EB0 	    PUSHAB  P1							      ; 3379
				  08   AE  9F 00EB3 	    PUSHAB  OUTDSC						      ;
				  08   AE  9F 00EB6 	    PUSHAB  FAOLEN						      ;
				  F8   AD  9F 00EB9 	    PUSHAB  FAODSC						      ;
	      00000000G  9F	       04  FB 00EBC 	    CALLS   #4, @#SYS$FAOL					      ;
		  0000'  CF	  0C   AE  9E 00EC3 	    MOVAB   OUTBUF, OUTRAB+40					      ; 3381
		  0000'  CF	       6E  B0 00EC9 	    MOVW    FAOLEN, OUTRAB+34					      ; 3382
				0000'  CF  9F 00ECE 	    PUSHAB  OUTRAB						      ; 3383
	      00000000G  9F	       01  FB 00ED2 	    CALLS   #1, @#SYS$PUT					      ;
				       50  D4 00ED9 	    CLRL    R0							      ; 3384
					   04 00EDB 	    RET     							      ; 3330

; Routine Size:  72 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 46
; Digital Equipment Corporation
;
;	3386	ROUTINE FMT_SYS_MSG( FAOSTR , MSGID ) =
;	3387	BEGIN
;	3388	
;	3389	!++
;	3390	!
;	3391	! FUNCTIONAL DESCRIPTION:
;	3392	!
;	3393	!	This routine outputs an error message followed by
;	3394	!	the text found in the system message file for the 
;	3395	!	error condition.  If the message is not found, the message
;	3396	!	ID itself is printed.
;	3397	!
;	3398	! INPUTS:
;	3399	!
;	3400	!	FAOSTR - address of counted ascii message to be printed
;	3401	!	MSGID - error number
;	3402	!
;	3403	! IMPLICIT INPUTS:
;	3404	!
;	3405	!	None
;	3406	!
;	3407	! OUTPUTS:
;	3408	!
;	3409	!	None
;	3410	!
;	3411	! IMPLICIT OUTPUTS:
;	3412	!
;	3413	!	None
;	3414	!
;	3415	! ROUTINE VALUE:
;	3416	!
;	3417	!	None
;	3418	!
;	3419	! SIDE EFFECTS:
;	3420	!
;	3421	!	None
;	3422	!--
;	3423	
;	3424	LOCAL
;	3425		BUFFER: VECTOR[200,BYTE] ,		! buffer to receive message
;	3426		BUFDSC:	VECTOR[2,LONG] ,		! string descriptor
;	3427		CODE ;					! save return code
;	3428	
;	3429	BUFDSC[0] = 200 ;				! construct string descriptor
;	3430	BUFDSC[1] = BUFFER ;
;	3431	
;	3432	CODE = $GETMSG( MSGID = .MSGID , MSGLEN = BUFDSC[0] , BUFADR = BUFDSC[0] );
;	3433	
;	3434	!
;	3435	! Output internal message.  Then output system error or error number.
;	3436	!
;	3437	
;	3438	FAOOUT( .FAOSTR ) ;
;	3439	IF .CODE EQL SS$_MSGNOTFND
;	3440	    THEN FAOOUT( SYSMSG2 , .MSGID )

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 46-1
; Digital Equipment Corporation
;
;	3441	    ELSE FAOOUT( SYSMSG1 , BUFDSC[0] ) ;
;	3442	END;



							    .GLOBL  SYS$GETMSG

					 0004 00EDC FMT_SYS_MSG:
							    .WORD   Save R2						      ; 3386
		         5E	FF34   CE  9E 00EDE 	    MOVAB   -204(SP), SP					      ;
		         7E	  C8   8F  9A 00EE3 	    MOVZBL  #200, BUFDSC					      ; 3429
		    04   AE	  08   AE  9E 00EE7 	    MOVAB   BUFFER, BUFDSC+4					      ; 3430
		         7E	       0F  7D 00EEC 	    MOVQ    #15, -(SP)						      ; 3432
				  08   AE  9F 00EEF 	    PUSHAB  BUFDSC						      ;
				  0C   AE  9F 00EF2 	    PUSHAB  BUFDSC						      ;
				  08   AC  DD 00EF5 	    PUSHL   MSGID						      ;
	      00000000G  9F	       05  FB 00EF8 	    CALLS   #5, @#SYS$GETMSG					      ;
		         52	       50  D0 00EFF 	    MOVL    R0, CODE						      ;
				  04   AC  DD 00F02 	    PUSHL   FAOSTR						      ; 3438
		    8B   AF	       01  FB 00F05 	    CALLS   #1, FAOOUT						      ;
	      00000621   8F	       52  D1 00F09 	    CMPL    CODE, #1569						      ; 3439
				       09  12 00F10 	    BNEQ    1$							      ;
				  08   AC  DD 00F12 	    PUSHL   MSGID						      ; 3440
				0000'  CF  9F 00F15 	    PUSHAB  SYSMSG2						      ; 3386
				       06  11 00F19 	    BRB     2$							      ; 3440
				       5E  DD 00F1B 1$:     PUSHL   SP							      ; 3441
				0000'  CF  9F 00F1D 	    PUSHAB  SYSMSG1						      ; 3386
		  FF6E   CF	       02  FB 00F21 2$:     CALLS   #2, FAOOUT						      ; 3441
				       50  D4 00F26 	    CLRL    R0							      ; 3386
					   04 00F28 	    RET     							      ;

; Routine Size:  77 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 47
; Digital Equipment Corporation
;
;	3443	ROUTINE EXIT =
;	3444	BEGIN
;	3445	
;	3446	!++
;	3447	!
;	3448	! FUNCTIONAL DESCRIPTION:
;	3449	!
;	3450	!	Normal exit routine.  Close temporary file and rename
;	3451	!	to SYSUAF file.
;	3452	!
;	3453	! INPUTS:
;	3454	!
;	3455	!	none
;	3456	!
;	3457	! OUTPUTS:
;	3458	!
;	3459	!	none
;	3460	!
;	3461	! ROUTINE VALUE:
;	3462	!
;	3463	!	none
;	3464	!
;	3465	! SIDE EFFECTS:
;	3466	!
;	3467	!	image exits
;	3468	!--
;	3469	
;	3470	!TEMPORARY
;	3471	EXTERNAL ROUTINE SYS$RENAME: ADDRESSING_MODE(ABSOLUTE) ;
;	3472	
;	3473	$CLOSE( FAB=TMPFAB ) ;
;	3474	
;	3475	!
;	3476	! If no modifications were made to the file, simply close up
;	3477	! and leave, else rename SYSUAF.TMP to SYSUAF.DAT.
;	3478	!
;	3479	
;	3480	IF .MODIFY_FLAG
;	3481	THEN
;	3482	    BEGIN
;	3483	
;	3484	    !
;	3485	    ! File has been modified ... rename it.
;	3486	    !
;	3487	
;	3488	!    IF RMSOK( $RENAME( OLDFAB=TMPFAB , NEWFAB=UAFFAB) )
;	3489	    IF RMSOK( SYS$RENAME( TMPFAB ,0,0, UAFFAB ) )	! temp until $rename is fixed
;	3490	    THEN
;	3491		FAOOUT( DONEMSG )			! tell user all is done
;	3492	    ELSE
;	3493		FATAL( RENERR , .RMSERR );		! fatal error , tell user and exit
;	3494	    END
;	3495	ELSE
;	3496	
;	3497	    !

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 47-1
; Digital Equipment Corporation
;
;	3498	    ! Here, no modifications were made to file.  Delete the temporary file
;	3499	    ! and exit.
;	3500	    !
;	3501	
;	3502	    BEGIN
;	3503	    FAOOUT( NOMODS ) ;
;	3504	    $ERASE( FAB=TMPFAB ) ;
;	3505	    END;
;	3506	$EXIT( CODE=TRUE ) ;
;	3507	END;



							    .GLOBL  SYS$RENAME, SYS$ERASE, SYS$EXIT

					 0800 00F29 EXIT:   .WORD   Save R11						      ; 3443
		         5B	0000'  CF  9E 00F2B 	    MOVAB   TMPFAB, R11						      ;
				       5B  DD 00F30 	    PUSHL   R11							      ; 3473
	      00000000G  9F	       01  FB 00F32 	    CALLS   #1, @#SYS$CLOSE					      ;
		         34	FF18   CB  E9 00F39 	    BLBC    MODIFY_FLAG, 2$					      ; 3480
				0094   CB  9F 00F3E 	    PUSHAB  UAFFAB						      ; 3489
				       7E  7C 00F42 	    CLRQ    -(SP)						      ;
				       5B  DD 00F44 	    PUSHL   R11							      ;
	      00000000G  9F	       04  FB 00F46 	    CALLS   #4, @#SYS$RENAME					      ;
		    E0   AB	       50  D0 00F4D 	    MOVL    R0, RMSERR						      ;
		         0B	       50  E9 00F51 	    BLBC    R0, 1$						      ;
				0000'  CF  9F 00F54 	    PUSHAB  DONEMSG						      ; 3443
		  FF37   CF	       01  FB 00F58 	    CALLS   #1, FAOOUT						      ; 3491
				       25  11 00F5D 	    BRB     3$							      ; 3489
				  E0   AB  DD 00F5F 1$:     PUSHL   RMSERR						      ; 3493
				0000'  CF  9F 00F62 	    PUSHAB  RENERR						      ; 3443
		  FF71   CF	       02  FB 00F66 	    CALLS   #2, FMT_SYS_MSG					      ; 3493
		  0000V  CF	       00  FB 00F6B 	    CALLS   #0, ACC$EXIT					      ;
				       12  11 00F70 	    BRB     3$							      ; 3480
				0000'  CF  9F 00F72 2$:     PUSHAB  NOMODS						      ; 3443
		  FF19   CF	       01  FB 00F76 	    CALLS   #1, FAOOUT						      ; 3503
				       5B  DD 00F7B 	    PUSHL   R11							      ; 3504
	      00000000G  9F	       01  FB 00F7D 	    CALLS   #1, @#SYS$ERASE					      ;
				       01  DD 00F84 3$:     PUSHL   #1							      ; 3506
	      00000000G  9F	       01  FB 00F86 	    CALLS   #1, @#SYS$EXIT					      ;
				       50  D4 00F8D 	    CLRL    R0							      ; 3443
					   04 00F8F 	    RET     							      ;

; Routine Size:  103 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 48
; Digital Equipment Corporation
;
;	3508	ROUTINE ACC$EXIT =
;	3509	BEGIN
;	3510	
;	3511	!++
;	3512	!
;	3513	! FUNCTIONAL DESCRIPTION:
;	3514	!
;	3515	!	Exit on error condition.
;	3516	!
;	3517	! INPUTS:
;	3518	!
;	3519	!	none
;	3520	!
;	3521	! OUTPUTS:
;	3522	!
;	3523	!	none
;	3524	!--
;	3525	
;	3526	$EXIT();
;	3527	END;





					 0000 00F90 ACC$EXIT:
							    .WORD   Save nothing					      ; 3508
				       01  DD 00F92 	    PUSHL   #1							      ; 3526
	      00000000G  9F	       01  FB 00F94 	    CALLS   #1, @#SYS$EXIT					      ;
				       50  D4 00F9B 	    CLRL    R0							      ; 3508
					   04 00F9D 	    RET     							      ;

; Routine Size:  14 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 49
; Digital Equipment Corporation
;
;	3528	ROUTINE HELP =
;	3529	BEGIN
;	3530	
;	3531	!++
;	3532	!
;	3533	! FUNCTIONAL DESCRIPTION:
;	3534	!
;	3535	!	Print out the help message or messages.
;	3536	!
;	3537	! INPUTS:
;	3538	!
;	3539	!	none
;	3540	!
;	3541	! OUTPUTS:
;	3542	!
;	3543	!	none
;	3544	!
;	3545	! ROUTINE VALUE:
;	3546	!
;	3547	!	none
;	3548	!
;	3549	! SIDE EFFECTS:
;	3550	!
;	3551	!	none
;	3552	!--
;	3553	
;	3554	FAOOUT( HELPMSG1 ) ;
;	3555	FAOOUT( HELPMSG2 ) ;
;	3556	FAOOUT( HELPMSG3 ) ;
;	3557	FAOOUT( HELPMSG4 ) ;
;	3558	FAOOUT( HELPMSG5 ) ;
;	3559	FAOOUT( HELPMSG6 ) ;
;	3560	RETURN TRUE ;
;	3561	END;





					 0800 00F9E HELP:   .WORD   Save R11						      ; 3528
		         5B	FEF0   CF  9E 00FA0 	    MOVAB   FAOOUT, R11						      ;
				0000'  CF  9F 00FA5 	    PUSHAB  HELPMSG1						      ;
		         6B	       01  FB 00FA9 	    CALLS   #1, FAOOUT						      ; 3554
				0000'  CF  9F 00FAC 	    PUSHAB  HELPMSG2						      ; 3528
		         6B	       01  FB 00FB0 	    CALLS   #1, FAOOUT						      ; 3555
				0000'  CF  9F 00FB3 	    PUSHAB  HELPMSG3						      ; 3528
		         6B	       01  FB 00FB7 	    CALLS   #1, FAOOUT						      ; 3556
				0000'  CF  9F 00FBA 	    PUSHAB  HELPMSG4						      ; 3528
		         6B	       01  FB 00FBE 	    CALLS   #1, FAOOUT						      ; 3557
				0000'  CF  9F 00FC1 	    PUSHAB  HELPMSG5						      ; 3528
		         6B	       01  FB 00FC5 	    CALLS   #1, FAOOUT						      ; 3558
				0000'  CF  9F 00FC8 	    PUSHAB  HELPMSG6						      ; 3528
		         6B	       01  FB 00FCC 	    CALLS   #1, FAOOUT						      ; 3559
		         50	       01  D0 00FCF 	    MOVL    #1, R0						      ; 3560
					   04 00FD2 	    RET     							      ; 3528

; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 49-1
; Digital Equipment Corporation
;

; Routine Size:  53 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 22:39:41	DBB3:[UAF.SRC]AUTHORIZE.B32;8					Page 50
; Digital Equipment Corporation
;
;	3562	END				!End of module
;	3563	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $PLIT$         	  2884  NOWRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $OWN$          	  2184    WRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $CODE$         	  4051  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        98         1       291





; Size:		4051 code + 5068 data bytes
; Run Time:	03:09.8
; Elapsed Time:	06:40.3
; Memory Used:	463 pages
; Compilation Complete
