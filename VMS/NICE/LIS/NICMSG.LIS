
; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 1
; Digital Equipment Corporation
;
;	0001	MODULE NICMSG	 (IDENT = 'X06') =
;	0002	BEGIN
;	0003	
;	0004	! COPYRIGHT (C) 1977
;	0005		
;	0006	! DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS 01754
;	0007	! 
;	0008	! THIS SOFTWARE IS FURNISHED  UNDER A LICENSE FOR USE ONLY ON A SINGLE
;	0009	! COMPUTER  SYSTEM AND  MAY BE  COPIED ONLY WITH THE  INCLUSION OF THE
;	0010	! ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,
;	0011	! MAY NOT BE PROVIDED OR  OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
;	0012	! EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE
;	0013	! TERMS.  TITLE TO AND  OWNERSHIP OF THE  SOFTWARE  SHALL AT ALL TIMES
;	0014	! REMAIN IN DEC.
;	0015	!
;	0016	! THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE
;	0017	! AND SHOULD  NOT BE CONSTRUED  AS A COMMITMENT  BY DIGITAL  EQUIPMENT
;	0018	! CORPORATION.
;	0019	!
;	0020	! DEC ASSUMES  NO  RESPONSIBILITY  FOR  THE  USE OR RELIABILITY OF ITS
;	0021	! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;	0022	!
;	0023	!++
;	0024	! FACILITY:
;	0025	!	    NICE - network monitor and control object.
;	0026	!
;	0027	! ABSTRACT:
;	0028	!	    This module contains all of the subroutines required to
;	0029	!	    parse input messages and build output messages.  It also
;	0030	!	    provides access to the Configuration Data Base (via GET_REC),
;	0031	!	    a NETACP control QIO interface (via routine ACP), and a
;	0032	!	    multi-function routine (MESSAGE) which opens and closes
;	0033	!	    messages, and sends and receives messages to and from the
;	0034	!	    command node.
;	0035	!
;	0036	! ENVIRONMENT:
;	0037	!
;	0038	! AUTHOR:
;	0039	!	    Al Eldridge		1-AUG-78
;	0040	!
;	0041	! MODIFICATIONS:
;	0042	!
;	0043	! MODIFIED BY:
;	0044	!
;	0045	!		, : VERSION
;	0046	! 01	-
;	0047	!
;	0048	!--
;	0049	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 2
; Digital Equipment Corporation
;
;	0050	!
;	0051	! INCLUDE FILES
;	0052	!
;	0053	
;	0054	REQUIRE 'SRC$:NICDEF.B32' ;
;	0946	
;	0947	!
;	0948	! TABLE OF CONTENTS:
;	0949	!
;	0950	
;	0951	FORWARD ROUTINE
;	0952	
;	0953	  NULL_ROUTINE	: LNKMSG,
;	0954	  ACP		: LNKMSG,
;	0955	  GET_REC	: LNKMSG,
;	0956	  MOV_FIELD	: LNKMSG,
;	0957	  VERIFY_LN	: LNKMSG,
;	0958	  CVTLN		: LNKMSG,
;	0959	  LINK		: LNKMSG,
;	0960	  MESSAGE	: LNKMSG,
;	0961	
;	0962	  EXTSTR	: LNKMSG,
;	0963	  EXT_USTR	: LNKMSG,
;	0964	  EXTLN		: LNKMSG,
;	0965	  EXTND		: LNKMSG,
;	0966	  EXTB		: LNKMSG,
;	0967	  EXTW		: LNKMSG,
;	0968	  EXTL		: LNKMSG,
;	0969	
;	0970	  INSSTR	: LNKMSG,
;	0971	  INSLN		: LNKMSG,
;	0972	  INSB		: LNKMSG,
;	0973	  INSW		: LNKMSG,
;	0974	  INSL		: LNKMSG,
;	0975	  INS_CTRS	: LNKMSG,
;	0976	  INSFILL	: LNKMSG,
;	0977	  INS_REST	: LNKMSG ;
;	0978	
;	0979	
;	0980	EXTERNAL ROUTINE
;	0981	
;	0982	  OPEN_FILE,
;	0983	  CLOSE_FILE,
;	0984	  MATCHKEY ;
;	0985	
;	0986	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 3
; Digital Equipment Corporation
;
;	0987	EXTERNAL
;	0988	
;	0989		!+
;	0990		! The following table contains the sizes of the records
;	0991		! of the various "configuration data base" files. It 
;	0992		! assumes that the index into the table is the file
;	0993		! index values defined as follows :
;	0994		!
;	0995		! LND$C_FILE = 0,	RND$C_FILE = 1,
;	0996		! LID$C_FILE = 2,	ODB$C_FILE = 3
;	0997	
;	0998	  REC_SIZE :  VECTOR [4,BYTE],       
;	0999	
;	1000	
;	1001		!+
;	1002		! The following table is used to consturct the names
;	1003		! of loader files for downline loads, and for
;	1004		! determining the internal device mnemonic for that
;	1005		! device type.  The first entry is the length of the
;	1006		! loader suffix uplit, the internal device mnemonic
;	1007		! uplit is always two characters.  The index into
;	1008		! these tables is the standard NICE type code divided
;	1009		! by two.
;	1010		!-
;	1011	
;	1012	  LN$AG_NAMES : BLOCKVECTOR [LN$K_ENTRIES, LN$K_ENTSIZE, BYTE] ;

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 4
; Digital Equipment Corporation
;
;	1013	!+
;	1014	! The following macros are used to check for room in the output messae
;	1015	! buffer, and for data in the input message string.
;	1016	!-
;	1017	
;	1018	MACRO
;	1019		CHK_IMSG (NUM_BYTES) =
;     M 1020			(IF CH$PLUS (.P_IM, NUM_BYTES)
;     M 1021				LEQA
;     M 1022			    CH$PTR (.MCB_PTR [MCB$A_IMSGBOUND])
;     M 1023			 THEN
;     M 1024			     NIC$_SUCCESS
;     M 1025			 ELSE 
;     M 1026			     NIC$_ILLMSGFMT
;     M 1027			)
;     M 1028		%,
;	1029	
;	1030		CHK_OMSG (NUM_BYTES) =
;     M 1031			(IF CH$PLUS (.P_OM, NUM_BYTES)
;     M 1032				LEQA
;     M 1033			    CH$PTR (.MCB_PTR [MCB$A_OMSGBOUND])
;     M 1034			 THEN
;     M 1035			     NIC$_SUCCESS
;     M 1036			 ELSE 
;     M 1037			     NIC$_PGM_ERR
;     M 1038			)
;     M 1039		% ;
;	1040	
;	1041	!+
;	1042	! The following macro causes a return via the error handler indicated
;	1043	! in the MCB.  The value of MCB$L_REPLYCODE indicates whether an error
;	1044	! exits, and what it is.
;	1045	!-
;	1046	
;	1047	MACRO
;	1048		RETRN (A) =
;     M 1049			BEGIN
;     M 1050			MCB_PTR [MCB$L_REPLYCODE] = (A) ;
;     M 1051			RETURN ((.MCB_PTR [MCB$A_EXIT_RT]) ()) ;
;     M 1052			END
;     M 1053	% ;

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 5
; Digital Equipment Corporation
;
;	1054	ROUTINE  NULL_ROUTINE  : LNKMSG =
;	1055	
;	1056	!++
;	1057	! FUNCTIONAL DESCRIPTION:
;	1058	!
;	1059	!	This routine performs no action, but is used as the
;	1060	!	default exit routine for all of the routines which 
;	1061	!	follow.
;	1062	!
;	1063	! FORMAL PARAMETERS:
;	1064	!
;	1065	!	NONE
;	1066	!
;	1067	! IMPLICIT INPUTS:
;	1068	!
;	1069	!	R9, R10, and R11 are assumed to contain, respectively,
;	1070	!	the input message pointer, the output message pointer,
;	1071	!	and the pointer to the message control block.
;	1072	!
;	1073	! IMPLICIT OUTPUTS:
;	1074	!
;	1075	!	NONE
;	1076	!
;	1077	! ROUTINE VALUE:
;	1078	! COMPLETION CODES:
;	1079	!
;	1080	!	The value stored in the MCB$L_REPLYCODE field of the 
;	1081	!	message control block is returned in R0.
;	1082	!
;	1083	! SIDE EFFECTS:
;	1084	!
;	1085	!	NONE
;	1086	!
;	1087	!--
;	1088	
;	1089	BEGIN
;	1090	EXTERNAL REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	1091	
;	1092	RETURN (.MCB_PTR [MCB$L_REPLYCODE]) ;
;	1093	
;	1094	END ;


							    .TITLE  NICMSG
							    .IDENT  \X06\

							    .GLOBL  OPEN_FILE, CLOSE_FILE, MATCHKEY, REC_SIZE, LN$AG_NAMES

							    .PSECT  $CODE$,NOWRT,2

					 0000 00000 NULL_ROUTINE:
							    .WORD   Save nothing					      ; 1054
		         50	       69  D0 00002 	    MOVL    (MCB_PTR), R0					      ; 1092
					   04 00005 	    RET     							      ; 1054


; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 5-1
; Digital Equipment Corporation
;
; Routine Size:  6 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 6
; Digital Equipment Corporation
;
;	1095	GLOBAL ROUTINE  CVTLN  (FCT, SRC_AD, DST_DDSC_AD) : LNKMSG =
;	1096	
;	1097	!++
;	1098	! FUNCTIONAL DESCRIPTION:
;	1099	!
;	1100	!	Converts line names from the standard NICE type 1 format
;	1101	!	(without the format type field) into into its ascii
;	1102	!	NETACP compatable format (e.g., XMA0), and vice versa.
;	1103	!
;	1104	! FORMAL PARAMETERS:
;	1105	!
;	1106	!	FCT		- Indicates the type of conversion as follows
;	1107	!
;	1108	!			TO_ASCII  => convert from NICE to ascii.
;	1109	!			TO_NICE	  => convert from ascii to NICE.
;	1110	!
;	1111	!	SRC_AD		- The address of the first byte of the line
;	1112	!			  name to be converted.
;	1113	!	DST_DDSC_AD	- The address of the DDSC describing the 
;	1114	!			  converted output string.  It is assumed that
;	1115	!			  the buffer descriptor portion is valid upon
;	1116	!			  input.  The buffer should be at least 4 bytes
;	1117	!			  long.
;	1118	!
;	1119	! IMPLICIT INPUTS:
;	1120	!
;	1121	!	R9	- Contains the address of the MCB.
;	1122	!
;	1123	! IMPLICIT OUTPUTS:
;	1124	!
;	1125	!	NONE
;	1126	!
;	1127	! ROUTINE VALUE:
;	1128	! COMPLETION CODES:
;	1129	!
;	1130	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	1131	!	R9 return the standard NICE status codes, though all but 
;	1132	!	'success' have been doubled so that they can be used for 
;	1133	!	true/false testing.
;	1134	!
;	1135	! SIDE EFFECTS:
;	1136	!
;	1137	!	This routine exits through the exit routine referenced in the
;	1138	!	MCB pointed to by R9.  If an error is indicated in the 
;	1139	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	1140	!	is set, then control never returns to the calling routine --
;	1141	!	the stack is unwound to the main routine instead.
;	1142	!
;	1143	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 7
; Digital Equipment Corporation
;
;	1144	BEGIN
;	1145	
;	1146	BIND	DBLK = .DST_DDSC_AD	: DDSC ;
;	1147	
;	1148	EXTERNAL REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	1149	
;	1150	MACRO	REPLY_CODE = MCB_PTR [MCB$L_REPLYCODE] % ;
;	1151	LOCAL	J ;
;	1152	
;	1153	SELECT .FCT OF
;	1154	 SET
;	1155	
;	1156	 [TO_NICE_FMT] :
;	1157	  BEGIN
;	1158	  BIND	LINE = .SRC_AD		: LINE_NAME ;
;	1159	
;	1160	  J = CH$PTR (.DBLK [BUF_PTR]) ;	! CREATE  POINTER
;	1161	
;	1162	
;	1163	    ! THE FOLLOWING LOOP SCANS THE 'LINE_TYPES' TABLE USING THE
;	1164	    ! THE 2 CHARACTER LINE DEVICE CODE OF THE INPUT LINE NAME.
;	1165	    ! IF THE LINE TYPE IS FOUND THEN THE LINE NAME IS CONVERTED
;	1166	    ! TO THE FORMAT EXPECTED BY THE 'CONFIGURATION DATA BASE'
;	1167	    ! AND THE LOOP IS FORCED TO EXIT WITH THE VALUE 'FALSE'.  AN
;	1168	    ! EXIT VALUE OF 'TRUE' INDICATES THAT THE LOOP WAS EXITED
;	1169	    ! NORMALLY, I.E., THE DEVICE CODE WAS NOT FOUND IN THE TABLE
;	1170	
;	1171	  IF (INCR I FROM 0 TO LN$K_ENTRIES - 1
;	1172	    DO 
;	1173	      BEGIN
;	1174	      BIND   LN_NAME = LN$AG_NAMES [.I,Z4] : LTE ;
;	1175	      IF .LN_NAME [LTE$W_INTNAME]   EQL .LINE [LNTYPE]
;	1176	      THEN
;	1177		BEGIN
;	1178		CH$WCHAR_A (.I*2, J) ;		! INSERT TYPE CODE
;	1179		CH$WCHAR_A			! CVT CONTROLLER CODE TO
;	1180		  ((.LINE [LNCONT] - 'A'), J) ;	! BINARY AND INSERT IT
;	1181	
;	1182		CH$WCHAR_A			! CVT LINE NUMBER TO
;	1183		  ((.LINE [LNNUMB] - '0'), J) ;	! BINARY AND INSERT IT
;	1184	
;	1185		CH$WCHAR_A (0, J) ;		! INSERT LINE ADDR.
;	1186	
;	1187		DBLK [STR_LNG] = 4 ;		! COMPLETE DESCRIPTOR
;	1188		DBLK [STR_PTR] = .DBLK [BUF_PTR] ;	! BLOCK
;	1189	
;	1190		EXITLOOP FALSE ;		! INDICATE SUCCESS AND
;	1191						! EXITLOOP
;	1192		END 
;	1193	      END
;	1194	     )
;	1195	
;	1196	  THEN REPLY_CODE = NIC$_ILL_LN_ID ;
;	1197	  END ;
;	1198	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 7-1
; Digital Equipment Corporation
;

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 8
; Digital Equipment Corporation
;
;	1199	 [TO_ASCII] :	! INIT. THE STRING DESCRIPTOR THEN FALL THRU TO
;	1200			! APPEND THE LINE NAME TO THE NOW NULL STRING
;	1201	  BEGIN
;	1202	  DBLK [STR_PTR] = .DBLK [BUF_PTR] ;
;	1203	  DBLK [STR_LNG] = 0 ;
;	1204	  END ;
;	1205	
;	1206	 [APP_TO_ASCII,
;	1207	  TO_ASCII] :
;	1208	
;	1209	  BEGIN
;	1210	  BIND	LINE = (.DBLK [STR_PTR] + .DBLK [STR_LNG]) : LINE_NAME ;
;	1211	  J = CH$PTR (.SRC_AD) ;
;	1212	  IF
;	1213	     LINE + LN_NAME_SIZE
;	1214		GTRU
;	1215	     .DBLK [BUF_PTR] + .DBLK [BUF_LNG]
;	1216	
;	1217	  THEN
;	1218		REPLY_CODE = NIC$_PGM_ERR 
;	1219	  ELSE
;	1220	   IF  CH$RCHAR (.J)  GTRU  NIC$K_MAXLNTYPE
;	1221	   THEN
;	1222		REPLY_CODE = NIC$_ILL_LN_ID
;	1223	   ELSE
;	1224	    BEGIN
;	1225	    BIND  LN_NAME = LN$AG_NAMES [CH$RCHAR_A(J)/2, Z4] : LTE ;
;	1226	    LINE [LNTYPE] = .LN_NAME [LTE$W_INTNAME] ;
;	1227	 
;	1228						! TWO LETTER LINE DEVICE
;	1229			      			! TYPE  (XM, ETC.)
;	1230	
;	1231	    LINE [LNCONT] = CH$RCHAR_A (J)	! GET CONTROLLER AND
;	1232				 + 'A' ;	! CONVERT TO AN ASCII 
;	1233						! LETTER
;	1234	    LINE [LNNUMB] = CH$RCHAR_A (J)	! GET LINE NUMBER AND
;	1235				 + '0' ;	! CONVERT TO ASCII
;	1236	
;	1237	    DBLK [STR_LNG] = .DBLK [STR_LNG]	! UPDATE STRING
;	1238			      + LN_NAME_SIZE ;	! DESCRIPTOR
;	1239	
;	1240	    END ;
;	1241	  END ;
;	1242	
;	1243	  [OTHERWISE] :
;	1244			REPLY_CODE = NIC$_PGM_ERR ;
;	1245	
;	1246	 TES ;
;	1247	
;	1248	RETRN (.REPLY_CODE) ;
;	1249	
;	1250	END ;




; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 8-1
; Digital Equipment Corporation
;


					 007C 00006 	    .ENTRY  CVTLN, Save R2,R3,R4,R5,R6				      ; 1095
		         52	  0C   AC  D0 00008 	    MOVL    DST_DDSC_AD, R2					      ; 1144
		         56	  04   AC  D0 0000C 	    MOVL    FCT, R6						      ; 1153
		         55	       01  D0 00010 	    MOVL    #1, R5						      ;
		         02	       56  D1 00013 	    CMPL    R6, #2						      ;
				       39  12 00016 	    BNEQ    3$							      ;
				       55  D4 00018 	    CLRL    R5							      ;
		         51	  08   AC  D0 0001A 	    MOVL    SRC_AD, R1						      ; 1157
		         53	  0C   A2  D0 0001E 	    MOVL    12(R2), J						      ; 1160
				       50  D4 00022 	    CLRL    I							      ; 1171
		         54	0000GCF40  7E 00024 1$:     MOVAQ   LN$AG_NAMES[I], R4					      ; 1174
		         61	       64  B1 0002A 	    CMPW    (R4), (R1)						      ; 1175
				       1B  12 0002D 	    BNEQ    2$							      ;
	   83	         50	       02  85 0002F 	    MULB3   #2, I, (J)+						      ; 1178
	   83	    02   A1	  BF   8F  81 00033 	    ADDB3   #-65, 2(R1), (J)+					      ; 1180
	   83	    03   A1	       30  83 00039 	    SUBB3   #48, 3(R1), (J)+					      ; 1183
				       83  94 0003E 	    CLRB    (J)+						      ; 1185
		         62	       04  D0 00040 	    MOVL    #4, (R2)						      ; 1187
		    04   A2	  0C   A2  D0 00043 	    MOVL    12(R2), 4(R2)					      ; 1188
				       07  11 00048 	    BRB     3$							      ; 1095
	   D6	         50	       0F  F3 0004A 2$:     AOBLEQ  #15, I, 1$						      ; 1171
		         69	       10  CE 0004E 	    MNEGL   #16, (MCB_PTR)					      ; 1196
				       56  D5 00051 3$:     TSTL    R6							      ; 1153
				       09  12 00053 	    BNEQ    4$							      ;
				       55  D4 00055 	    CLRL    R5							      ;
		    04   A2	  0C   A2  D0 00057 	    MOVL    12(R2), 4(R2)					      ; 1202
				       62  D4 0005C 	    CLRL    (R2)						      ; 1203
				       56  D5 0005E 4$:     TSTL    R6							      ; 1153
				       51  19 00060 	    BLSS    7$							      ;
		         01	       56  D1 00062 	    CMPL    R6, #1						      ;
				       4C  14 00065 	    BGTR    7$							      ;
				       55  D4 00067 	    CLRL    R5							      ;
	   50	    04   A2	       62  C1 00069 	    ADDL3   (R2), 4(R2), R0					      ; 1210
		         53	  08   AC  D0 0006E 	    MOVL    SRC_AD, J						      ; 1211
	   54	         50	       04  C1 00072 	    ADDL3   #4, R0, R4						      ; 1213
	   51	    0C   A2	  08   A2  C1 00076 	    ADDL3   8(R2), 12(R2), R1					      ; 1215
		         51	       54  D1 0007C 	    CMPL    R4, R1						      ; 1214
				       05  1B 0007F 	    BLEQU   5$							      ;
		         69	       0A  CE 00081 	    MNEGL   #10, (MCB_PTR)					      ; 1218
				       2D  11 00084 	    BRB     7$							      ; 1212
		         1E	       63  91 00086 5$:     CMPB    (J), #30						      ; 1220
				       05  1B 00089 	    BLEQU   6$							      ;
		         69	       10  CE 0008B 	    MNEGL   #16, (MCB_PTR)					      ; 1222
				       23  11 0008E 	    BRB     7$							      ; 1220
		         51	       83  9A 00090 6$:     MOVZBL  (J)+, R1						      ; 1225
		         51	       02  C6 00093 	    DIVL2   #2, R1						      ;
		         51	0000GCF41  7E 00096 	    MOVAQ   LN$AG_NAMES[R1], R1					      ;
		         60	       61  B0 0009C 	    MOVW    (R1), (R0)						      ; 1226
		         51	       83  9A 0009F 	    MOVZBL  (J)+, R1						      ; 1231
      02   A0	         51	  41   8F  81 000A2 	    ADDB3   #65, R1, 2(R0)					      ; 1232
		         51	       83  9A 000A8 	    MOVZBL  (J)+, R1						      ; 1234
      03   A0	         51	       30  81 000AB 	    ADDB3   #48, R1, 3(R0)					      ; 1235
		         62	       04  C0 000B0 	    ADDL2   #4, (R2)						      ; 1238

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 8-2
; Digital Equipment Corporation
;
		         03	       55  E9 000B3 7$:     BLBC    R5, 8$						      ; 1153
		         69	       0A  CE 000B6 	    MNEGL   #10, (MCB_PTR)					      ; 1244
		    04   B9	       00  FB 000B9 8$:     CALLS   #0, @4(MCB_PTR)					      ; 1248
					   04 000BD 	    RET     							      ; 1095

; Routine Size:  184 bytes


;	1251	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 9
; Digital Equipment Corporation
;
;	1252	GLOBAL ROUTINE LINK (CHAN_AD, NODE_DDSC_AD) : LNKMSG =
;	1253	
;	1254	!++
;	1255	! FUNCTIONAL DESCRIPTION:
;	1256	!
;	1257	!	Creates a logical link to the NICE object on the node
;	1258	!	mentioned in the argument list.
;	1259	!
;	1260	! FORMAL PARAMETERS:
;	1261	!
;	1262	!	CHAN_AD		- The address of a word used to return the
;	1263	!			  channel number associated with the logical
;	1264	!			  link.
;	1265	!	NODE_DDSC_AD	- The address of the double descriptor of the
;	1266	!			  counted ascii node name string.
;	1267	!
;	1268	! IMPLICIT INPUTS:
;	1269	!
;	1270	!	R9		- Contains the address of the MCB.
;	1271	!
;	1272	! IMPLICIT OUTPUTS:
;	1273	!
;	1274	!	same as the implicit inputs
;	1275	!
;	1276	! ROUTINE VALUE:
;	1277	! COMPLETION CODES:
;	1278	!
;	1279	!	both R0 and REPLY_CODE (i.e., R9) return the standard
;	1280	!	NICE status codes, though all but 'success' have been
;	1281	!	doubled so that they can be used for true/false testing
;	1282	!
;	1283	! SIDE EFFECTS:
;	1284	!
;	1285	!	This routine exits through the exit routine referenced in the
;	1286	!	MCB pointed to by R9.  If an error is indicated in the 
;	1287	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	1288	!	is set, then control never returns to the calling routine --
;	1289	!	the stack is unwound to the main routine instead.
;	1290	!
;	1291	!--
;	1292	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 10
; Digital Equipment Corporation
;
;	1293	BEGIN
;	1294	
;	1295	BIND	NODE = .NODE_DDSC_AD  : DDSC ;
;	1296	
;	1297	EXTERNAL REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	1298	
;	1299	MACRO	REPLY_CODE = MCB_PTR [MCB$L_REPLYCODE] % ;
;	1300	
;	1301	LOCAL	J,
;	1302		DEV    : NDSC,
;	1303		LOC_BUF : VECTOR [32,BYTE] ;
;	1304	
;	1305	J = CH$MOVE  ((.NODE [STR_LNG] - 1),		! AVOID COUNT 
;	1306			CH$PTR (.NODE [STR_PTR],1),	! FIELD IN SRC
;	1307			CH$PTR (LOC_BUF)	
;	1308		      ) ;
;	1309	
;	1310	J = CH$MOVE (9,					! APPEND OBJECT
;	1311		     CH$PTR (UPLIT BYTE('::"NICE="')),	! NAME
;	1312		     .J					! TO NODE NAME
;	1313		    ) ;
;	1314	
;	1315	DEV [DSC_PTR] = LOC_BUF ;			! SETUP THE
;	1316	DEV [DSC_LNG] = CH$DIFF (.J, CH$PTR(LOC_BUF)) ;	! DESCRIPTOR
;	1317	
;	1318	IF NOT $ASSIGN (DEVNAM = DEV, CHAN = .CHAN_AD)
;	1319	THEN 
;	1320	    REPLY_CODE = NIC$_NOREMNICE ;	! Assume connect failed
;	1321						! because there was no
;	1322						! remote NICE object.
;	1323	
;	1324	RETRN (.REPLY_CODE) ;
;	1325	END ;



							    .PSECT  $PLIT$,NOWRT,NOEXE,2

					      00000 P.AAA:  .ASCII  \::"NICE="\						      ;
					      00009	    .BLKB   3

							    .GLOBL  SYS$ASSIGN

							    .PSECT  $CODE$,NOWRT,2

					 007C 000BE 	    .ENTRY  LINK, Save R2,R3,R4,R5,R6				      ; 1252
		         5E	       28  C2 000C0 	    SUBL2   #40, SP						      ;
		         50	  08   AC  D0 000C3 	    MOVL    NODE_DDSC_AD, R0					      ; 1293
	   51	         60	       01  C3 000C7 	    SUBL3   #1, (R0), R1					      ; 1305
		         50	  04   A0  D0 000CB 	    MOVL    4(R0), R0						      ; 1306
	   6E	    01   A0	       51  28 000CF 	    MOVC3   R1, 1(R0), LOC_BUF					      ; 1305
		         56	       53  D0 000D4 	    MOVL    R3, J						      ;
	   66	  0000'  CF	       09  28 000D7 	    MOVC3   #9, P.AAA, (J)					      ; 1310
		         56	       53  D0 000DD 	    MOVL    R3, J						      ;
		    24   AE	       6E  9E 000E0 	    MOVAB   LOC_BUF, DEV+4					      ; 1315

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 10-1
; Digital Equipment Corporation
;
		         50	       6E  9E 000E4 	    MOVAB   LOC_BUF, R0						      ; 1316
      20   AE	         56	       50  C3 000E7 	    SUBL3   R0, J, DEV						      ;
				       7E  7C 000EC 	    CLRQ    -(SP)						      ; 1318
				  04   AC  DD 000EE 	    PUSHL   CHAN_AD						      ;
				  2C   AE  9F 000F1 	    PUSHAB  DEV							      ;
	      00000000G  9F	       04  FB 000F4 	    CALLS   #4, @#SYS$ASSIGN					      ;
		         03	       50  E8 000FB 	    BLBS    R0, 1$						      ;
		         69	       2A  CE 000FE 	    MNEGL   #42, (MCB_PTR)					      ; 1320
		    04   B9	       00  FB 00101 1$:     CALLS   #0, @4(MCB_PTR)					      ; 1324
					   04 00105 	    RET     							      ; 1252

; Routine Size:  72 bytes


;	1326	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 11
; Digital Equipment Corporation
;
;	1327	GLOBAL ROUTINE  MOV_FIELD  (BUFF_DDSC_AD, START,
;	1328			     LENGTH, DEST_DDSC_AD)  : LNKMSG =
;	1329	
;	1330	!++
;	1331	! FUNCTIONAL DESCRIPTION:
;	1332	!
;	1333	!	A field is moved from within the BUFF_DDSC buffer to the
;	1334	!	buffer described by DEST_DDSC.  The string descriptor portion
;	1335	!	of the source buffer is checked to ensure that the field to
;	1336	!	be moved is completely contained within the string, and the 
;	1337	!	buffer descriptor portion of the destination buffer descriptor
;	1338	!	is checked to ensure that it is large enough to receive the
;	1339	!	field.  Failure of either constraint is flagged by returning
;	1340	!	NIC$_PGM_ERR as the routine value and completion code, no
;	1341	!	portion of the field is moved in this event.  If the routine
;	1342	!	is successful, it sets up the string descriptor portion of the
;	1343	!	destination buffer DDSC to reflect its new contents.
;	1344	!
;	1345	! FORMAL PARAMETERS:
;	1346	!
;	1347	!	BUFF_DDSC_AD	- The address of the DDSC of the source buffer
;	1348	!			  containing the string containing the field
;	1349	!			  to be moved.
;	1350	!	START		- The absolute address of the first byte of the
;	1351	!			  field to be moved.
;	1352	!	LENGTH		- The length, in bytes, of the field to be
;	1353	!			  moved.
;	1354	!
;	1355	!	DEST_DDSC_AD	- The address of the DDSC of the buffer to 
;	1356	!			  receive the field.
;	1357	!
;	1358	! IMPLICIT INPUTS:
;	1359	!
;	1360	!	R9		- Contains the address of the MCB.
;	1361	!
;	1362	! IMPLICIT OUTPUTS:
;	1363	!
;	1364	!	NONE
;	1365	!
;	1366	! ROUTINE VALUE:
;	1367	! COMPLETION CODES:
;	1368	!
;	1369	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	1370	!	R9 return the standard NICE status codes, though all but 
;	1371	!	'success' have been doubled so that they can be used for 
;	1372	!	true/false testing.
;	1373	!
;	1374	! SIDE EFFECTS:
;	1375	!
;	1376	!	This routine exits through the exit routine referenced in the
;	1377	!	MCB pointed to by R9.  If an error is indicated in the 
;	1378	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	1379	!	is set, then control never returns to the calling routine --
;	1380	!	the stack is unwound to the main routine instead.
;	1381	!

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 11-1
; Digital Equipment Corporation
;
;	1382	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 12
; Digital Equipment Corporation
;
;	1383	BEGIN
;	1384	
;	1385	EXTERNAL REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	1386	MACRO	REPLY_CODE = MCB_PTR [MCB$L_REPLYCODE]  % ;
;	1387	
;	1388	BIND	BUF   = .BUFF_DDSC_AD : DDSC,	! BUFFER HOLDING RECORD
;	1389		DST   = .DEST_DDSC_AD : DDSC ;	! BUFFER RECEIVING FIELD
;	1390	
;	1391	IF .BUFF_DDSC_AD EQL 0  OR  .DEST_DDSC_AD EQL 0
;	1392	THEN
;	1393	     RETRN (NIC$_PGM_ERR) ;
;	1394	
;	1395	IF
;	1396	   ((.START + .LENGTH)		! IS FIELD WITHIN
;	1397		LEQA				! STRING BOUNDS ? 
;	1398	    (.BUF [STR_PTR] + .BUF [STR_LNG]) )
;	1399	
;	1400		AND
;	1401	
;	1402	   (.START  GEQA  .BUF [STR_PTR])
;	1403	
;	1404		AND
;	1405	
;	1406	   (.LENGTH  LEQU  .DST [BUF_LNG])	! WILL IT FIT IN DST
;	1407						! BUFFER ?
;	1408	THEN BEGIN
;	1409	     CH$MOVE (.LENGTH,			! YES, MOVE IT
;	1410		       CH$PTR (.START),
;	1411		       CH$PTR (.DST [STR_PTR])
;	1412		      ) ;
;	1413	     DST [STR_PTR] = .DST [BUF_PTR] ;	! COMPLETE DESCRIPTOR
;	1414	     DST [STR_LNG] = .LENGTH ;
;	1415	     END
;	1416	
;	1417	ELSE REPLY_CODE = NIC$_PGM_ERR ;		! NO, BUG EXISTS
;	1418	
;	1419	RETRN (.REPLY_CODE) ;
;	1420	
;	1421	END ;





					 007C 00106 	    .ENTRY  MOV_FIELD, Save R2,R3,R4,R5,R6			      ; 1327
		         52	  04   AC  D0 00108 	    MOVL    BUFF_DDSC_AD, R2					      ; 1383
		         56	  10   AC  D0 0010C 	    MOVL    DEST_DDSC_AD, R6					      ;
				  04   AC  D5 00110 	    TSTL    BUFF_DDSC_AD					      ; 1391
				       35  13 00113 	    BEQL    1$							      ;
				  10   AC  D5 00115 	    TSTL    DEST_DDSC_AD					      ;
				       30  13 00118 	    BEQL    1$							      ;
	   51	    08   AC	  0C   AC  C1 0011A 	    ADDL3   LENGTH, START, R1					      ; 1396
	   50	    04   A2	       62  C1 00120 	    ADDL3   (R2), 4(R2), R0					      ; 1398
		         50	       51  D1 00125 	    CMPL    R1, R0						      ; 1396
				       20  1A 00128 	    BGTRU   1$							      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 12-1
; Digital Equipment Corporation
;
		    04   A2	  08   AC  D1 0012A 	    CMPL    START, 4(R2)					      ; 1402
				       19  1F 0012F 	    BLSSU   1$							      ;
		    08   A6	  0C   AC  D1 00131 	    CMPL    LENGTH, 8(R6)					      ; 1406
				       12  1A 00136 	    BGTRU   1$							      ;
      04   B6	    08   BC	  0C   AC  28 00138 	    MOVC3   LENGTH, @START, @4(R6)				      ; 1409
		    04   A6	  0C   A6  D0 0013F 	    MOVL    12(R6), 4(R6)					      ; 1413
		         66	  0C   AC  D0 00144 	    MOVL    LENGTH, (R6)					      ; 1414
				       03  11 00148 	    BRB     2$							      ; 1395
		         69	       0A  CE 0014A 1$:     MNEGL   #10, (MCB_PTR)					      ; 1417
		    04   B9	       00  FB 0014D 2$:     CALLS   #0, @4(MCB_PTR)					      ; 1419
					   04 00151 	    RET     							      ; 1327

; Routine Size:  76 bytes


;	1422	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 13
; Digital Equipment Corporation
;
;	1423	GLOBAL ROUTINE  GET_REC  (FILE_INDEX, BUFF_DDSC_AD,
;	1424				  IMPURE_AD, PURE_DDSC_AD)  : LNKMSG =
;	1425	
;	1426	!++
;	1427	! FUNCTIONAL DESCRIPTION:
;	1428	!
;	1429	!	Opens the indicated file and searches successive records until
;	1430	!	the 'impure' field within the record matches the 'pure' key.
;	1431	!	If the 'pure' key is null, then the first record is returned.
;	1432	!
;	1433	! FORMAL PARAMETERS:
;	1434	!
;	1435	!	FILE_INDEX	- Longword code indentifying the Configuration
;	1436	!			  Data Base file to search as follows :
;	1437	!
;	1438	!			  LND$C_FILE	- local node descriptor file
;	1439	!			  RND$C_FILE	- remote node descriptor file
;	1440	!			  ODB$C_FILE	- network 'object' (i.e., process
;	1441	!					  image) descriptor file
;	1442	!			  LID$C_FILE	- line descriptor file
;	1443	!
;	1444	!			  Note: these literals are defined in NCPDEF.B32
;	1445	!
;	1446	!	BUFF_DDSC_AD	- The address of the DDSC of the buffer to be 
;	1447	!			  used to return the record with the matching
;	1448	!			  key.  It is assumed that the buffer descriptor
;	1449	!			  portion of this DDSC is valid.
;	1450	!	IMPURE_AD	- The process virtual address (not an offset) of
;	1451	!			  the begining of the field within the data base
;	1452	!			  record against which the key will be compared.
;	1453	!			  This assumes that the record resides with the
;	1454	!			  buffer identified by the first parameter.
;	1455	!			  It is labelled 'impure' since the contents
;	1456	!			  of the buffer change as successive records
;	1457	!			  are read into the buffer and compared.
;	1458	!	PURE_DDSC_AD	- The address of the DDSC of the 'pure' key to be
;	1459	!			  used to locate the appropriate record.  It is
;	1460	!			  assumed that both the string and buffer
;	1461	!			  portions of the descriptor are valid.  The
;	1462	!			  string contents are treated as read only.
;	1463	!
;	1464	! IMPLICIT INPUTS:
;	1465	!
;	1466	!	R9		- Contains the address of the MCB.
;	1467	!
;	1468	! IMPLICIT OUTPUTS:
;	1469	!
;	1470	!	NONE
;	1471	!
;	1472	! ROUTINE VALUE:
;	1473	! COMPLETION CODES:
;	1474	!
;	1475	!	Both R0 and the MCB$L_REPLYCODE field of the MCB  pointed to by
;	1476	!	R9 return :
;	1477	!		NIC$_SUCCESS    if a matching record was located.

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 13-1
; Digital Equipment Corporation
;
;	1478	!		NIC$_DATBASERR  if the data base could not be accessed,
;	1479	!				OR if no matching record was located.
;	1480	!
;	1481	! SIDE EFFECTS:
;	1482	!
;	1483	!	This routine exits through the exit routine referenced in the
;	1484	!	MCB pointed to by R9.  If an error is indicated in the 
;	1485	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	1486	!	is set, then control never returns to the calling routine --
;	1487	!	the stack is unwound to the main routine instead.
;	1488	!
;	1489	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 14
; Digital Equipment Corporation
;
;	1490	BEGIN
;	1491	BIND
;	1492		IMPURE = .IMPURE_AD,		! Address within record
;	1493						! to start comparison
;	1494		KEY    = .PURE_DDSC_AD : DDSC,	! Describes key to be
;	1495						! matched
;	1496		BUF    = .BUFF_DDSC_AD : DDSC ;	! Describes buffer to
;	1497						! hold the record
;	1498	
;	1499	EXTERNAL REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	1500	
;	1501	MACRO	REPLY_CODE = MCB_PTR [MCB$L_REPLYCODE]	%,
;	1502		DB_STAT    = MCB_PTR [MCB$W_DB_STAT] 	% ;
;	1503	
;	1504	    ! Note that neither "MATCHKEY" nor "OPEN_FILE"
;	1505	    ! write 'REPLY_CODE'.
;	1506	
;	1507	IF (DB_STAT =
;	1508		 OPEN_FILE (.FILE_INDEX))	! Open file and find
;	1509	THEN					! the record
;	1510	  IF (DB_STAT = 
;	1511		 MATCHKEY ( BUF [BUF_DSC],	! Buff descriptor addr
;	1512			   .KEY [STR_LNG],	! Size of match key
;	1513			   .KEY [STR_PTR],	! Addr of match key
;	1514			    IMPURE		! Addr (within record)
;	1515				    		! to start comparison
;	1516			  )
;	1517	      )
;	1518	  THEN 	! Describe the string just entered into buffer
;	1519	
;	1520		BEGIN
;	1521		BUF [STR_PTR] = .BUF [BUF_PTR] ;
;	1522		BUF [STR_LNG] = .REC_SIZE [.FILE_INDEX] ;
;	1523		END
;	1524	
;	1525	  ELSE REPLY_CODE = NIC$_DATBASERR
;	1526	
;	1527	ELSE REPLY_CODE = NIC$_DATBASERR ;
;	1528	
;	1529	CLOSE_FILE (.FILE_INDEX) ;		! Close the file -- if
;	1530						! its not open no harm
;	1531						! is done
;	1532	RETRN (.REPLY_CODE) ;
;	1533	END ;





					 001C 00152 	    .ENTRY  GET_REC, Save R2,R3,R4				      ; 1423
		         54	  0C   AC  D0 00154 	    MOVL    IMPURE_AD, R4					      ; 1490
		         53	  10   AC  D0 00158 	    MOVL    PURE_DDSC_AD, R3					      ;
		         52	  08   AC  D0 0015C 	    MOVL    BUFF_DDSC_AD, R2					      ;
				  04   AC  DD 00160 	    PUSHL   FILE_INDEX						      ; 1508
		  0000G  CF	       01  FB 00163 	    CALLS   #1, OPEN_FILE					      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 14-1
; Digital Equipment Corporation
;
		    19   A9	       50  B0 00168 	    MOVW    R0, 25(MCB_PTR)					      ; 1507
		         25	       50  E9 0016C 	    BLBC    R0, 1$						      ;
				       54  DD 0016F 	    PUSHL   R4							      ; 1511
		         7E	       63  7D 00171 	    MOVQ    (R3), -(SP)						      ;
				  08   A2  9F 00174 	    PUSHAB  8(R2)						      ;
		  0000G  CF	       04  FB 00177 	    CALLS   #4, MATCHKEY					      ;
		    19   A9	       50  B0 0017C 	    MOVW    R0, 25(MCB_PTR)					      ; 1510
		         11	       50  E9 00180 	    BLBC    R0, 1$						      ;
		    04   A2	  0C   A2  D0 00183 	    MOVL    12(R2), 4(R2)					      ; 1521
		         50	0000G  CF  9E 00188 	    MOVAB   REC_SIZE, R0					      ; 1522
		         62	  04 BC40  9A 0018D 	    MOVZBL  @FILE_INDEX[R0], (R2)				      ;
				       03  11 00192 	    BRB     2$							      ; 1510
		         69	       1C  CE 00194 1$:     MNEGL   #28, (MCB_PTR)					      ; 1527
				  04   AC  DD 00197 2$:     PUSHL   FILE_INDEX						      ; 1529
		  0000G  CF	       01  FB 0019A 	    CALLS   #1, CLOSE_FILE					      ;
		    04   B9	       00  FB 0019F 	    CALLS   #0, @4(MCB_PTR)					      ; 1532
					   04 001A3 	    RET     							      ; 1423

; Routine Size:  82 bytes


;	1534	
;	1535	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 15
; Digital Equipment Corporation
;
;	1536	GLOBAL ROUTINE  EXTB (ARG_AD) : LNKMSG =
;	1537	
;	1538	!++
;	1539	! FUNCTIONAL DESCRIPTION:
;	1540	!
;	1541	!	Extract the next byte from the input message and store it
;	1542	!	in the byte whose address is given by the parameter.
;	1543	!
;	1544	! FORMAL PARAMETERS:
;	1545	!
;	1546	!	ARG_AD		- The address of the unsigned byte which
;	1547	!			  is to receive the field.
;	1548	! IMPLICIT INPUTS:
;	1549	!
;	1550	!	R9		- Contains the address of the MCB.
;	1551	!	R11		- Points to the next field of the message to be
;	1552	!			  read.
;	1553	! IMPLICIT OUTPUTS:
;	1554	!
;	1555	!	R11		- Updated to point to the first byte immediately
;	1556	!			  following the field just read.
;	1557	! ROUTINE VALUE:
;	1558	! COMPLETION CODES:
;	1559	!
;	1560	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	1561	!	R9 return :
;	1562	!		NIC$_ILLMSGFMT	if R11 points outside the input message
;	1563	!				bounds, i.e., there is no byte to extract.
;	1564	!		NIC$_SUCCESS	otherwise.
;	1565	!
;	1566	! SIDE EFFECTS:
;	1567	!
;	1568	!	This routine exits through the exit routine referenced in the
;	1569	!	MCB pointed to by R9.  If an error is indicated in the 
;	1570	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	1571	!	is set, then control never returns to the calling routine --
;	1572	!	the stack is unwound to the main routine instead.
;	1573	!
;	1574	!--
;	1575	
;	1576	BEGIN
;	1577	EXTERNAL REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	1578	
;	1579	IF CHK_IMSG (1)					! Is there a byte to
;	1580	THEN						! transfer ?
;	1581	     BEGIN
;	1582	     (.ARG_AD)<0,8,0> = CH$RCHAR_A (P_IM) ;	! XFER BYTE
;	1583	     RETURN (NIC$_SUCCESS) ;			! Take error checking
;	1584	     END					! only if necessary
;	1585	ELSE
;	1586	     RETRN (NIC$_ILLMSGFMT) ;
;	1587	END ;




; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 15-1
; Digital Equipment Corporation
;


					 0000 001A4 	    .ENTRY  EXTB, Save nothing					      ; 1536
	   50	         5B	       01  C1 001A6 	    ADDL3   #1, P_IM, R0					      ; 1579
		    38   A9	       50  D1 001AA 	    CMPL    R0, 56(MCB_PTR)					      ;
				       08  1A 001AE 	    BGTRU   1$							      ;
		    04   BC	       8B  90 001B0 	    MOVB    (P_IM)+, @ARG_AD					      ; 1582
		         50	       01  D0 001B4 	    MOVL    #1, R0						      ; 1583
					   04 001B7 	    RET     							      ;
		         69	       04  CE 001B8 1$:     MNEGL   #4, (MCB_PTR)					      ; 1586
		    04   B9	       00  FB 001BB 	    CALLS   #0, @4(MCB_PTR)					      ;
					   04 001BF 	    RET     							      ; 1536

; Routine Size:  28 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 16
; Digital Equipment Corporation
;
;	1588	GLOBAL ROUTINE  EXTW (ARG_AD) : LNKMSG =
;	1589	
;	1590	!++
;	1591	! FUNCTIONAL DESCRIPTION:
;	1592	!
;	1593	!	Extract the next word from the input message and store it
;	1594	!	in the word whose address is given by the parameter.
;	1595	!
;	1596	! FORMAL PARAMETERS:
;	1597	!
;	1598	!	ARG_AD		- The address of the unsigned word which
;	1599	!			  is to receive the field.
;	1600	! IMPLICIT INPUTS:
;	1601	!
;	1602	!	R9		- Contains the address of the MCB.
;	1603	!	R11		- Points to the next field of the message to be
;	1604	!			  read.
;	1605	! IMPLICIT OUTPUTS:
;	1606	!
;	1607	!	R11		- Updated to point to the first byte immediately
;	1608	!			  following the field just read.
;	1609	! ROUTINE VALUE:
;	1610	! COMPLETION CODES:
;	1611	!
;	1612	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	1613	!	R9 return :
;	1614	!		NIC$_ILLMSGFMT	if the word pointed to by R11 does not
;	1615	!				fit completely within the input message.
;	1616	!		NIC$_SUCCESS	otherwise.
;	1617	!
;	1618	! SIDE EFFECTS:
;	1619	!
;	1620	!	This routine exits through the exit routine referenced in the
;	1621	!	MCB pointed to by R9.  If an error is indicated in the 
;	1622	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	1623	!	is set, then control never returns to the calling routine --
;	1624	!	the stack is unwound to the main routine instead.
;	1625	!
;	1626	!--
;	1627	
;	1628	BEGIN
;	1629	EXTERNAL REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	1630	
;	1631	IF CHK_IMSG (2)				! Is there a word to xfer ?
;	1632	THEN BEGIN
;	1633	     (.ARG_AD)<0,16,0> = .(.P_IM)<0,16,0> ;	! Xfer word
;	1634	
;	1635	     P_IM = CH$PLUS (.P_IM, 2) ;	! Update parse pointer
;	1636	     RETURN (NIC$_SUCCESS) ;		! Take error checking exit only
;	1637	     END 				! if necessary.
;	1638	ELSE
;	1639	     RETRN (NIC$_ILLMSGFMT) ;
;	1640	END ;



; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 16-1
; Digital Equipment Corporation
;



					 0000 001C0 	    .ENTRY  EXTW, Save nothing					      ; 1588
	   50	         5B	       02  C1 001C2 	    ADDL3   #2, P_IM, R0					      ; 1631
		    38   A9	       50  D1 001C6 	    CMPL    R0, 56(MCB_PTR)					      ;
				       08  1A 001CA 	    BGTRU   1$							      ;
		    04   BC	       8B  B0 001CC 	    MOVW    (P_IM)+, @ARG_AD					      ; 1633
		         50	       01  D0 001D0 	    MOVL    #1, R0						      ; 1636
					   04 001D3 	    RET     							      ;
		         69	       04  CE 001D4 1$:     MNEGL   #4, (MCB_PTR)					      ; 1639
		    04   B9	       00  FB 001D7 	    CALLS   #0, @4(MCB_PTR)					      ;
					   04 001DB 	    RET     							      ; 1588

; Routine Size:  28 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 17
; Digital Equipment Corporation
;
;	1641	GLOBAL ROUTINE  EXTL (ARG_AD) : LNKMSG =
;	1642	
;	1643	!++
;	1644	! FUNCTIONAL DESCRIPTION:
;	1645	!
;	1646	!	Extract the next longword from the input message and store it
;	1647	!	in the longword whose address is given by the parameter.
;	1648	!
;	1649	! FORMAL PARAMETERS:
;	1650	!
;	1651	!	ARG_AD		- The address of the unsigned longword which
;	1652	!			  is to receive the field.
;	1653	! IMPLICIT INPUTS:
;	1654	!
;	1655	!	R9		- Contains the address of the MCB.
;	1656	!	R11		- Points to the next field of the message to be
;	1657	!			  read.
;	1658	! IMPLICIT OUTPUTS:
;	1659	!
;	1660	!	R11		- Updated to point to the first byte immediately
;	1661	!			  following the field just read.
;	1662	! ROUTINE VALUE:
;	1663	! COMPLETION CODES:
;	1664	!
;	1665	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	1666	!	R9 return :
;	1667	!		NIC$_ILLMSGFMT	if the longword pointed to by R11 does 
;	1668	!				not fit within the input message bounds.
;	1669	!		NIC$_SUCCESS	otherwise.
;	1670	!
;	1671	! SIDE EFFECTS:
;	1672	!
;	1673	!	This routine exits through the exit routine referenced in the
;	1674	!	MCB pointed to by R9.  If an error is indicated in the 
;	1675	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	1676	!	is set, then control never returns to the calling routine --
;	1677	!	the stack is unwound to the main routine instead.
;	1678	!
;	1679	!--
;	1680	
;	1681	BEGIN
;	1682	EXTERNAL REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	1683	
;	1684	IF CHK_IMSG (4)				! Is there a longword within the
;	1685	THEN					! the input message bounds ?
;	1686	     BEGIN
;	1687	     .ARG_AD = ..P_IM ;			! XFER LONG
;	1688	     P_IM = CH$PLUS (.P_IM, 4) ;	! UPDATE PARSE POINTER
;	1689	     RETURN (NIC$_SUCCESS) ;		! Take error checking exit only
;	1690	     END				! if necessary.
;	1691	ELSE
;	1692	     RETRN (NIC$_ILLMSGFMT) ;
;	1693	END ;



; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 17-1
; Digital Equipment Corporation
;



					 0000 001DC 	    .ENTRY  EXTL, Save nothing					      ; 1641
	   50	         5B	       04  C1 001DE 	    ADDL3   #4, P_IM, R0					      ; 1684
		    38   A9	       50  D1 001E2 	    CMPL    R0, 56(MCB_PTR)					      ;
				       08  1A 001E6 	    BGTRU   1$							      ;
		    04   BC	       8B  D0 001E8 	    MOVL    (P_IM)+, @ARG_AD					      ; 1687
		         50	       01  D0 001EC 	    MOVL    #1, R0						      ; 1689
					   04 001EF 	    RET     							      ;
		         69	       04  CE 001F0 1$:     MNEGL   #4, (MCB_PTR)					      ; 1692
		    04   B9	       00  FB 001F3 	    CALLS   #0, @4(MCB_PTR)					      ;
					   04 001F7 	    RET     							      ; 1641

; Routine Size:  28 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 18
; Digital Equipment Corporation
;
;	1694	GLOBAL ROUTINE  EXTSTR  (MAX_LNG, DST_DDSC_AD)  : LNKMSG =
;	1695	
;	1696	!++
;	1697	! FUNCTIONAL DESCRIPTION:
;	1698	!
;	1699	!	Extract the next field from the input message and store it
;	1700	!	in the buffer whose DDSC address is given by the second
;	1701	!	parameter.  The field to be extracted is assumed to be a counted
;	1702	!	string consisting of one byte of count followed by the text.
;	1703	!	If the count field's value is greater than MAX_LNG, or if the
;	1704	!	entire counted string is too large to fit into the destination
;	1705	!	buffer, then nothing is transferred and an error condition
;	1706	!	is indicated.
;	1707	!
;	1708	! FORMAL PARAMETERS:
;	1709	!
;	1710	!	MAX_LNG		- The maximum legal value of the count field of
;	1711	!			  the counted string.
;	1712	!	DST_DDSC_AD	- The address of the DDSC of the buffer to 
;	1713	!			  receive the counted string field.  The buffer
;	1714	!			  decriptor portion of the DDSC is assumed to
;	1715	!			  be valid.
;	1716	! IMPLICIT INPUTS:
;	1717	!
;	1718	!	R9		- Contains the address of the MCB.
;	1719	!	R11		- Points to the next field of the message to be
;	1720	!			  read.
;	1721	! IMPLICIT OUTPUTS:
;	1722	!
;	1723	!	R11		- Updated to point to the first byte immediately
;	1724	!			  following the field just read.
;	1725	! ROUTINE VALUE:
;	1726	! COMPLETION CODES:
;	1727	!
;	1728	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	1729	!	R9 return :
;	1730	!		NIC$_ILLMSGFMT	if the field pointed to by R11 does not
;	1731	!				fit completely within the input message.
;	1732	!		NIC$_PGM_ERR	if the field will not fit into the
;	1733	!				destination buffer.
;	1734	!		NIC$_SUCCESS	otherwise.
;	1735	!
;	1736	! SIDE EFFECTS:
;	1737	!
;	1738	!	This routine exits through the exit routine referenced in the
;	1739	!	MCB pointed to by R9.  If an error is indicated in the 
;	1740	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	1741	!	is set, then control never returns to the calling routine --
;	1742	!	the stack is unwound to the main routine instead.
;	1743	!
;	1744	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 19
; Digital Equipment Corporation
;
;	1745	
;	1746	BEGIN
;	1747	BIND	  DBLK = .DST_DDSC_AD : DDSC ;	! Get ddsc reference
;	1748	EXTERNAL  REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	1749	MACRO	  REPLY_CODE = MCB_PTR [MCB$L_REPLYCODE] % ;
;	1750	LOCAL	  J ;
;	1751	
;	1752	
;	1753	IF NOT CHK_IMSG (1)			! At least one byte must
;	1754	THEN					! remain in the input
;	1755	    RETRN (NIC$_ILLMSGFMT) ;		! msg -- the count field
;	1756	
;	1757	J = CH$RCHAR (.P_IM) + 1 ;		! text length is one
;	1758						! greater than count value
;	1759	
;	1760	IF  CH$RCHAR (.P_IM) GTRU .MAX_LNG	! Is cnt value gtr than
;	1761		OR				! specified maximum ?
;	1762	    NOT CHK_IMSG (.J)			! does specified field
;	1763	THEN					! extend beyond the msg
;	1764	    RETRN (NIC$_ILLMSGFMT) ;		 ! bounds ?
;	1765	
;	1766	
;	1767	IF .J  LEQU  .DBLK [BUF_LNG]		! Will it fit in
;	1768	THEN					! its intended buffer ?
;	1769	  BEGIN
;	1770	  CH$MOVE (.J, .P_IM,
;	1771	           CH$PTR (.DBLK [BUF_PTR])	! Move the str
;	1772		 ) ;
;	1773	  DBLK [STR_LNG] = .J	;		! Complete the descriptor
;	1774	  DBLK [STR_PTR] = .DBLK [BUF_PTR] ;
;	1775	  P_IM = CH$PLUS (.P_IM,.J) ;		! Advance message ptr
;	1776	  END
;	1777	ELSE REPLY_CODE = NIC$_PGM_ERR ;
;	1778	
;	1779	RETRN (.REPLY_CODE) ;
;	1780	END ;





					 00FC 001F8 	    .ENTRY  EXTSTR, Save R2,R3,R4,R5,R6,R7			      ; 1694
		         56	  08   AC  D0 001FA 	    MOVL    DST_DDSC_AD, R6					      ; 1746
	   50	         5B	       01  C1 001FE 	    ADDL3   #1, P_IM, R0					      ; 1753
		    38   A9	       50  D1 00202 	    CMPL    R0, 56(MCB_PTR)					      ;
				       17  1A 00206 	    BGTRU   1$							      ;
		         57	       6B  9A 00208 	    MOVZBL  (P_IM), J						      ; 1757
				       57  D6 0020B 	    INCL    J							      ;
	   6B	         08	       00  ED 0020D 	    CMPZV   #0, #8, (P_IM), MAX_LNG				      ; 1760
				  04   AC     00211									      ;
				       0A  1A 00213 	    BGTRU   1$							      ;
	   50	         5B	       57  C1 00215 	    ADDL3   J, P_IM, R0						      ; 1762
		    38   A9	       50  D1 00219 	    CMPL    R0, 56(MCB_PTR)					      ;
				       05  1B 0021D 	    BLEQU   2$							      ;
		         69	       04  CE 0021F 1$:     MNEGL   #4, (MCB_PTR)					      ; 1764

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 19-1
; Digital Equipment Corporation
;
				       1B  11 00222 	    BRB     4$							      ;
		    08   A6	       57  D1 00224 2$:     CMPL    J, 8(R6)						      ; 1767
				       12  1A 00228 	    BGTRU   3$							      ;
      0C   B6	         6B	       57  28 0022A 	    MOVC3   J, (P_IM), @12(R6)					      ; 1770
		         66	       57  D0 0022F 	    MOVL    J, (R6)						      ; 1773
		    04   A6	  0C   A6  D0 00232 	    MOVL    12(R6), 4(R6)					      ; 1774
		         5B	       57  C0 00237 	    ADDL2   J, P_IM						      ; 1775
				       03  11 0023A 	    BRB     4$							      ; 1767
		         69	       0A  CE 0023C 3$:     MNEGL   #10, (MCB_PTR)					      ; 1777
		    04   B9	       00  FB 0023F 4$:     CALLS   #0, @4(MCB_PTR)					      ; 1779
					   04 00243 	    RET     							      ; 1694

; Routine Size:  76 bytes


;	1781	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 20
; Digital Equipment Corporation
;
;	1782	GLOBAL ROUTINE  EXT_USTR  (LENGTH, DST_DDSC_AD)  : LNKMSG =
;	1783	
;	1784	!++
;	1785	! FUNCTIONAL DESCRIPTION:
;	1786	!
;	1787	!	Extract the next field from the input message and store it
;	1788	!	in the buffer whose DDSC address is given by DST_DDSC_AD.
;	1789	!	The length of the field is specified by the LENTGH.  This 
;	1790	!	routine is used for extracting fields interpreted as uncounted
;	1791	!	strings.  If the field is not contained within the input message
;	1792	!	or if it will not fit within the destination buffer, then 
;	1793	!	nothing is transferred, and an error is indicated.
;	1794	!
;	1795	! FORMAL PARAMETERS:
;	1796	!
;	1797	!	LENGTH		- The length, in bytes, of the field to be
;	1798	!			  extracted.
;	1799	!	DST_DDSC_AD	- The address of the DDSC of the buffer to 
;	1800	!			  receive the field.  The buffer decriptor 
;	1801	!			  portion of the DDSC is assumed to be valid.
;	1802	! IMPLICIT INPUTS:
;	1803	!
;	1804	!	R9		- Contains the address of the MCB.
;	1805	!	R11		- Points to the next field of the message to be
;	1806	!			  read.
;	1807	! IMPLICIT OUTPUTS:
;	1808	!
;	1809	!	R11		- Updated to point to the first byte immediately
;	1810	!			  following the field just read.
;	1811	! ROUTINE VALUE:
;	1812	! COMPLETION CODES:
;	1813	!
;	1814	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	1815	!	R9 return :
;	1816	!		NIC$_ILLMSGFMT	if the field pointed to by R11 does not
;	1817	!				fit completely within the input message,
;	1818	!				or if the field will not fit into the
;	1819	!				destination buffer.
;	1820	!		NIC$_SUCCESS	otherwise.
;	1821	!
;	1822	! SIDE EFFECTS:
;	1823	!
;	1824	!	This routine exits through the exit routine referenced in the
;	1825	!	MCB pointed to by R9.  If an error is indicated in the 
;	1826	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	1827	!	is set, then control never returns to the calling routine --
;	1828	!	the stack is unwound to the main routine instead.
;	1829	!
;	1830	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 21
; Digital Equipment Corporation
;
;	1831	BEGIN
;	1832	BIND	DBLK = .DST_DDSC_AD : DDSC ;
;	1833	MACRO	REPLY_CODE = MCB_PTR [MCB$L_REPLYCODE] % ;
;	1834	
;	1835	EXTERNAL REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	1836	
;	1837	
;	1838	IF CHK_IMSG (.LENGTH)			! Is the specified field
;	1839						! contained within the
;	1840		AND				! message bounds ?
;	1841	
;	1842	    .LENGTH  LEQU  .DBLK [BUF_LNG]	! Will string fit into
;	1843	THEN					! the buffer ?
;	1844	  BEGIN
;	1845	  CH$MOVE (.LENGTH, .P_IM,		! Move the string
;	1846		    CH$PTR (.DBLK [BUF_PTR])) ;
;	1847	
;	1848	
;	1849	  DBLK [STR_LNG] = .LENGTH ;		! Complete descriptor
;	1850	  DBLK [STR_PTR] = .DBLK [BUF_PTR] ;
;	1851	
;	1852	  P_IM = CH$PLUS (.P_IM, .LENGTH) ;	! Update input msg ptr
;	1853	  END
;	1854	
;	1855	ELSE REPLY_CODE = NIC$_ILLMSGFMT ;
;	1856	
;	1857	RETRN (.REPLY_CODE) ;
;	1858	END ;





					 00FC 00244 	    .ENTRY  EXT_USTR, Save R2,R3,R4,R5,R6,R7			      ; 1782
		         56	  08   AC  D0 00246 	    MOVL    DST_DDSC_AD, R6					      ; 1831
		         57	  04   AC  D0 0024A 	    MOVL    LENGTH, R7						      ; 1838
	   50	         5B	       57  C1 0024E 	    ADDL3   R7, P_IM, R0					      ;
		    38   A9	       50  D1 00252 	    CMPL    R0, 56(MCB_PTR)					      ;
				       18  1A 00256 	    BGTRU   1$							      ;
		    08   A6	       57  D1 00258 	    CMPL    R7, 8(R6)						      ; 1842
				       12  1A 0025C 	    BGTRU   1$							      ;
      0C   B6	         6B	       57  28 0025E 	    MOVC3   R7, (P_IM), @12(R6)					      ; 1845
		         66	       57  D0 00263 	    MOVL    R7, (R6)						      ; 1849
		    04   A6	  0C   A6  D0 00266 	    MOVL    12(R6), 4(R6)					      ; 1850
		         5B	       57  C0 0026B 	    ADDL2   R7, P_IM						      ; 1852
				       03  11 0026E 	    BRB     2$							      ; 1838
		         69	       04  CE 00270 1$:     MNEGL   #4, (MCB_PTR)					      ; 1855
		    04   B9	       00  FB 00273 2$:     CALLS   #0, @4(MCB_PTR)					      ; 1857
					   04 00277 	    RET     							      ; 1782

; Routine Size:  52 bytes


;	1859	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 22
; Digital Equipment Corporation
;
;	1860	GLOBAL ROUTINE ACP (FUNC, PARAM_AD, P2_DDSC_AD, P4_DDSC_AD) : LNKMSG =
;	1861	
;	1862	!++
;	1863	!
;	1864	! FUNCTIONAL DESCRIPTION
;	1865	!
;	1866	!	This routine serves as an iterface to a $QIOW call with
;	1867	!	the IO$_ACPCONTROL function code.  It sets up the Network
;	1868	!	Function Block and maps the returned status code into one
;	1869	!	of the standard internal NICE error codes.  This mapping
;	1870	!	takes into account the particular network function being
;	1871	!	requested.
;	1872	!
;	1873	! FORMAL PARAMETERS
;	1874	!
;	1875	!	Refer to the NETACP CONTROL QIO documentation for details
;	1876	!	on the Network Function Block and the function specific
;	1877	!	required parameters.
;	1878	!
;	1879	!	FUNC		- One of the codes to be inserted into the
;	1880	!			  Network Function Block's function field.
;	1881	!	PARAM_AD	- The address of the longword which either
;	1882	!			  supplies or returns the contents of the
;	1883	!			  Network Function Block's parameter field
;	1884	!			  according to the function specified.
;	1885	!	P2_DDSC_AD	- The address of the DDSC  of the string to
;	1886	!			  be used as parameter P2 of the $QIOW.
;	1887	!	P4_DDSC_AD	- The address of the DDSC of the buffer to
;	1888	!			  be used to return the resultant string
;	1889	!			  returned by parameters P3 and P4 of the $QIOW.
;	1890	!
;	1891	!		NOTE :	The values of PARAM_AD, P2_DDSC, or P4_DDSC_AD
;	1892	!			may be zero if the particular function is
;	1893	!			neither supplied with nor returns information
;	1894	!			in them.
;	1895	! IMPLICIT INPUTS:
;	1896	!
;	1897	!	R9		- Contains the address of the MCB.
;	1898	!
;	1899	! IMPLICIT OUTPUTS:
;	1900	!
;	1901	!	NONE
;	1902	!
;	1903	! ROUTINE VALUE:
;	1904	! COMPLETION CODES:
;	1905	!
;	1906	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	1907	!	R9 return the standard NICE status codes, though all but 
;	1908	!	'success' have been doubled so that they can be used for 
;	1909	!	true/false testing.
;	1910	!
;	1911	! SIDE EFFECTS:
;	1912	!
;	1913	!	This routine exits through the exit routine referenced in the
;	1914	!	MCB pointed to by R9.  If an error is indicated in the 

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 22-1
; Digital Equipment Corporation
;
;	1915	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	1916	!	is set, then control never returns to the calling routine --
;	1917	!	the stack is unwound to the main routine instead.
;	1918	!
;	1919	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 23
; Digital Equipment Corporation
;
;	1920	BEGIN
;	1921	LOCAL	I,J,ERROR_MAPPED ;
;	1922	
;	1923	EXTERNAL REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	1924	
;	1925	MACRO	REPLY_CODE = MCB_PTR [MCB$L_REPLYCODE]	%,
;	1926		ACP_STAT   = MCB_PTR [MCB$W_ACP_STAT]	%,
;	1927		ACP_CHAN   = MCB_PTR [MCB$W_ACP_CHAN]	% ;
;	1928	
;	1929	BIND	ACP_IOSB   = MCB_PTR [MCB$Z_ACP_IOSB]	: IO_SB,
;	1930		ACP_FBLK   = MCB_PTR [MCB$Z_ACP_FBLK]	: FBLK ;
;	1931	
;	1932	OWN	FBLK_DSC : NDSC ;
;	1933	
;	1934	
;	1935	LITERAL	LOC_BF_SIZE = 4 ;
;	1936	
;	1937	OWN	LOC_DDSC :   DDSC, ! Used as a dummy to avoid access 
;	1938				   ! violations
;	1939	
;	1940		LOC_BF :     VECTOR [LOC_BF_SIZE] ;
;	1941	
;	1942	BIND	! Bind so as to avoid access violations.  this allows
;	1943		! convenient code sharing without complicated decision
;	1944		! trees to avoid accessing selected arguments according
;	1945		! to the function being requested by 'func'.
;	1946	
;	1947		PARAMETER = (IF .PARAM_AD NEQ 0
;	1948			     THEN .PARAM_AD
;	1949			     ELSE  PARAM_AD ),
;	1950	
;	1951		DDP2 	 = (IF .P2_DDSC_AD NEQ 0
;	1952			    THEN .P2_DDSC_AD
;	1953			    ELSE  LOC_DDSC ) : DDSC,
;	1954	
;	1955		DDP4 	 = (IF .P4_DDSC_AD NEQ 0
;	1956			    THEN .P4_DDSC_AD
;	1957			    ELSE  LOC_DDSC ) : DDSC ;
;	1958	
;	1959	LOC_DDSC [BUF_PTR] = LOC_BF ;		! Initialize to avoid
;	1960	LOC_DDSC [STR_PTR] = LOC_BF ;		! access violations
;	1961	LOC_DDSC [STR_LNG] = 0 ;
;	1962	LOC_DDSC [BUF_LNG] = LOC_BF_SIZE ;
;	1963	
;	1964	FBLK_DSC [DSC_PTR] = MCB_PTR [MCB$Z_ACP_FBLK] ;
;	1965	FBLK_DSC [DSC_LNG] = MCB$S_ACP_FBLK ;
;	1966	
;	1967	ACP_FBLK [FCT]  = .FUNC ;		! Set function block
;	1968	ACP_FBLK [PARM] = .PARAMETER ;		! This is input for some
;	1969						!  functions

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 24
; Digital Equipment Corporation
;
;	1970	ERROR_MAPPED = FALSE ;
;	1971	
;	1972	IF (ACP_STAT =
;	1973	   $QIOW (CHAN = .ACP_CHAN,
;     P 1974		  FUNC = IO$_ACPCONTROL,
;     P 1975		  IOSB = ACP_IOSB,
;     P 1976		  P1   = FBLK_DSC,
;     P 1977		  P2   = DDP2 [STR_DSC], ! DDP2 is a DDSC, use the string 
;     P 1978					 ! descriptor, not the buffer 
;     P 1979					 ! descriptor, since this is input.
;     P 1980		  P3   = DDP4 [STR_LNG], ! Addr of word to receive length of
;     P 1981					 ! the output string
;     P 1982		  P4   = DDP4 [BUF_DSC]	 ! Address of the  buffer descriptor to
;     P 1983		 )			 ! receive the output string.
;	1984	    )
;	1985	
;	1986	
;	1987	THEN	!+
;	1988		! Complete processing according to the requested 
;	1989		! function
;	1990		!-
;	1991	
;	1992	    SELECT  .FUNC  OF
;	1993	     SET
;	1994	     [SET_LOCAL_STATE] :
;	1995	
;	1996		!+
;	1997		! A response of 'SS$_BADPARAM' indicates that the
;	1998		! contents of the data base "snap shot" is either
;	1999		! incomplete, or includes bad information.
;	2000		!-
;	2001		  IF .ACP_IOSB [IO_STAT] EQL SS$_BADPARAM
;	2002		  THEN
;	2003			BEGIN
;	2004			REPLY_CODE = NIC$_DATBASERR ;
;	2005			ERROR_MAPPED = TRUE ;
;	2006			END ;
;	2007	
;	2008	     [GET_ND_BY_LN] :
;	2009		!+
;	2010		! The line name may be considered valid.  If the qio
;	2011		! failed it is most likely because the line is not
;	2012		! known to Netacp, i.e., it is in the OFF state.
;	2013		! Therefore, if the qio fails enter a zero lengthed
;	2014		! counted string into the node-name buffer.
;	2015		!-
;	2016		   IF NOT .ACP_IOSB [IO_STAT] 
;	2017			   AND
;	2018		      .DDP4 [BUF_LNG] GEQU 1
;	2019		   THEN
;	2020			BEGIN
;	2021			DDP4 [STR_LNG] = 1 ;
;	2022			DDP4 [STR_PTR] = .DDP4 [BUF_PTR] ;
;	2023			CH$WCHAR (0, CH$PTR (.DDP4 [BUF_PTR])) ;
;	2024			ERROR_MAPPED = TRUE ;

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 24-1
; Digital Equipment Corporation
;
;	2025			END ;

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 25
; Digital Equipment Corporation
;
;	2026	     [GET_LINE_CTRS,
;	2027	      CLR_LINE_CTRS] :
;	2028		!+
;	2029		! If NETACP has not successfully initialized with the
;	2030		! node at the other end of the line, it returns
;	2031		! SS$_NOSUCHNODE.
;	2032		!-
;	2033	
;	2034		IF .ACP_IOSB [IO_STAT] EQL SS$_NOSUCHNODE
;	2035		THEN
;	2036		    BEGIN
;	2037		    REPLY_CODE = NIC$_LN_WNGSTA ;
;	2038		    ERROR_MAPPED = TRUE ;
;	2039		    END ;
;	2040	
;	2041	     [SET_LINE_STATE] :
;	2042	
;	2043		IF .ACP_IOSB [IO_STAT] EQL SS$_ILLCNTRFUNC
;	2044		THEN
;	2045		    BEGIN
;	2046		    REPLY_CODE = NIC$_LN_WNGSTA ;
;	2047		    ERROR_MAPPED = TRUE ;
;	2048		    END ;
;	2049	
;	2050	      [ALWAYS] :
;	2051		!+
;	2052		! The parameter returned in the function block is either
;	2053		! unchanged or is used to return output information.
;	2054		! In the former case it is okay to rewrite it into
;	2055		! "PARAMETER", in the latter case it is necessary since
;	2056		! it is the mechanism for returning this information
;	2057		! to the calling routine.
;	2058		!-
;	2059	
;	2060		IF NOT .ERROR_MAPPED
;	2061		THEN
;	2062		    SELECTONE .ACP_IOSB [IO_STAT] OF
;	2063		      SET
;	2064		      [SS$_NORMAL] :	 PARAMETER = .ACP_FBLK [PARM] ;
;	2065		      [SS$_NOSUCHNODE] : REPLY_CODE = NIC$_ILL_ND_ID ;
;	2066		      [SS$_BADPARAM] :	 REPLY_CODE = NIC$_ILLPARVAL ;
;	2067		      [SS$_NOPRIV] :	 REPLY_CODE = NIC$_INSUFSTAT ;
;	2068		      [OTHERWISE] : 	 REPLY_CODE = NIC$_RESRCERR ;
;	2069		      TES ;
;	2070	
;	2071	     TES
;	2072	
;	2073	ELSE REPLY_CODE = NIC$_RESRCERR ;
;	2074	
;	2075	RETRN (.REPLY_CODE) ;
;	2076	END ;



							    .PSECT  $OWN$,NOEXE,2

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 25-1
; Digital Equipment Corporation
;

					      00000 FBLK_DSC:
							    .BLKB   8
					      00008 LOC_DDSC:
							    .BLKB   16
					      00018 LOC_BF: .BLKB   16

							    .GLOBL  SYS$QIOW

							    .PSECT  $CODE$,NOWRT,2

					 01FC 00278 	    .ENTRY  ACP, Save R2,R3,R4,R5,R6,R7,R8			      ; 1860
		         58	0000'  CF  9E 0027A 	    MOVAB   LOC_DDSC, R8					      ;
	   55	         59	       0C  C1 0027F 	    ADDL3   #12, MCB_PTR, R5					      ; 1929
	   51	         59	       14  C1 00283 	    ADDL3   #20, MCB_PTR, R1					      ; 1930
		         56	       51  D0 00287 	    MOVL    R1, R6						      ; 1920
				  08   AC  D5 0028A 	    TSTL    PARAM_AD						      ; 1947
				       06  13 0028D 	    BEQL    1$							      ;
		         57	  08   AC  D0 0028F 	    MOVL    PARAM_AD, R7					      ;
				       07  11 00293 	    BRB     2$							      ;
		         50	  08   AC  9E 00295 1$:     MOVAB   PARAM_AD, R0					      ;
		         57	       50  D0 00299 	    MOVL    R0, R7						      ;
				  0C   AC  D5 0029C 2$:     TSTL    P2_DDSC_AD						      ; 1951
				       06  13 0029F 	    BEQL    3$							      ;
		         50	  0C   AC  D0 002A1 	    MOVL    P2_DDSC_AD, R0					      ;
				       03  11 002A5 	    BRB     4$							      ;
		         50	       68  9E 002A7 3$:     MOVAB   LOC_DDSC, R0					      ;
				  10   AC  D5 002AA 4$:     TSTL    P4_DDSC_AD						      ; 1955
				       06  13 002AD 	    BEQL    5$							      ;
		         52	  10   AC  D0 002AF 	    MOVL    P4_DDSC_AD, R2					      ;
				       03  11 002B3 	    BRB     6$							      ;
		         52	       68  9E 002B5 5$:     MOVAB   LOC_DDSC, R2					      ;
		    0C   A8	  10   A8  9E 002B8 6$:     MOVAB   LOC_BF, LOC_DDSC+12					      ; 1959
		    04   A8	  10   A8  9E 002BD 	    MOVAB   LOC_BF, LOC_DDSC+4					      ; 1960
				       68  D4 002C2 	    CLRL    LOC_DDSC						      ; 1961
		    08   A8	       04  D0 002C4 	    MOVL    #4, LOC_DDSC+8					      ; 1962
		    FC   A8	       51  D0 002C8 	    MOVL    R1, FBLK_DSC+4					      ; 1964
		    F8   A8	       05  D0 002CC 	    MOVL    #5, FBLK_DSC					      ; 1965
		         53	  04   AC  D0 002D0 	    MOVL    FUNC, R3						      ; 1967
		         66	       53  90 002D4 	    MOVB    R3, (R6)						      ;
		    01   A6	       67  D0 002D7 	    MOVL    (R7), 1(R6)						      ; 1968
				       54  D4 002DB 	    CLRL    ERROR_MAPPED					      ; 1970
				       7E  7C 002DD 	    CLRQ    -(SP)						      ; 1983
				  08   A2  9F 002DF 	    PUSHAB  8(R2)						      ;
				       05  BB 002E2 	    PUSHR   #^M<R0,R2>						      ;
				  F8   A8  9F 002E4 	    PUSHAB  FBLK_DSC						      ;
				       7E  7C 002E7 	    CLRQ    -(SP)						      ;
				       55  DD 002E9 	    PUSHL   R5							      ;
				       38  DD 002EB 	    PUSHL   #56							      ;
		         7E	  0A   A9  3C 002ED 	    MOVZWL  10(MCB_PTR), -(SP)					      ;
				       7E  D4 002F1 	    CLRL    -(SP)						      ;
	      00000000G  9F	       0C  FB 002F3 	    CALLS   #12, @#SYS$QIOW					      ;
		    08   A9	       50  B0 002FA 	    MOVW    R0, 8(MCB_PTR)					      ; 1972
		         03	       50  E8 002FE 	    BLBS    R0, 7$						      ;
				     0083  31 00301 	    BRW     15$							      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 25-2
; Digital Equipment Corporation
;
		         0A	       53  D1 00304 7$:     CMPL    R3, #10						      ; 1992
				       0B  12 00307 	    BNEQ    8$							      ;
		         14	       65  B1 00309 	    CMPW    (R5), #20						      ; 2001
				       06  12 0030C 	    BNEQ    8$							      ;
		         69	       1C  CE 0030E 	    MNEGL   #28, (MCB_PTR)					      ; 2004
		         54	       01  D0 00311 	    MOVL    #1, ERROR_MAPPED					      ; 2005
		         14	       53  D1 00314 8$:     CMPL    R3, #20						      ; 1992
				       17  12 00317 	    BNEQ    9$							      ;
		         14	       65  E8 00319 	    BLBS    (R5), 9$						      ; 2016
		         01	  08   A2  D1 0031C 	    CMPL    8(R2), #1						      ; 2018
				       0E  1F 00320 	    BLSSU   9$							      ;
		         62	       01  D0 00322 	    MOVL    #1, (R2)						      ; 2021
		    04   A2	  0C   A2  D0 00325 	    MOVL    12(R2), 4(R2)					      ; 2022
				  0C   B2  94 0032A 	    CLRB    @12(R2)						      ; 2023
		         54	       01  D0 0032D 	    MOVL    #1, ERROR_MAPPED					      ; 2024
		         03	       53  D1 00330 9$:     CMPL    R3, #3						      ; 1992
				       12  19 00333 	    BLSS    10$							      ;
		         04	       53  D1 00335 	    CMPL    R3, #4						      ;
				       0D  14 00338 	    BGTR    10$							      ;
		  028C   8F	       65  B1 0033A 	    CMPW    (R5), #652						      ; 2034
				       06  12 0033F 	    BNEQ    10$							      ;
		         69	       12  CE 00341 	    MNEGL   #18, (MCB_PTR)					      ; 2037
		         54	       01  D0 00344 	    MOVL    #1, ERROR_MAPPED					      ; 2038
		         01	       53  D1 00347 10$:    CMPL    R3, #1						      ; 1992
				       0D  12 0034A 	    BNEQ    11$							      ;
		  00E4   8F	       65  B1 0034C 	    CMPW    (R5), #228						      ; 2043
				       06  12 00351 	    BNEQ    11$							      ;
		         69	       12  CE 00353 	    MNEGL   #18, (MCB_PTR)					      ; 2046
		         54	       01  D0 00356 	    MOVL    #1, ERROR_MAPPED					      ; 2047
		         2E	       54  E8 00359 11$:    BLBS    ERROR_MAPPED, 16$					      ; 2060
		         01	       65  B1 0035C 	    CMPW    (R5), #1						      ; 2062
				       06  12 0035F 	    BNEQ    12$							      ;
		         67	  01   A6  D0 00361 	    MOVL    1(R6), (R7)						      ; 2064
				       23  11 00365 	    BRB     16$							      ; 2062
		  028C   8F	       65  B1 00367 12$:    CMPW    (R5), #652						      ;
				       05  12 0036C 	    BNEQ    13$							      ;
		         69	       16  CE 0036E 	    MNEGL   #22, (MCB_PTR)					      ; 2065
				       17  11 00371 	    BRB     16$							      ; 2062
		         14	       65  B1 00373 13$:    CMPW    (R5), #20						      ;
				       05  12 00376 	    BNEQ    14$							      ;
		         69	       20  CE 00378 	    MNEGL   #32, (MCB_PTR)					      ; 2066
				       0D  11 0037B 	    BRB     16$							      ; 2062
		         24	       65  B1 0037D 14$:    CMPW    (R5), #36						      ;
				       05  12 00380 	    BNEQ    15$							      ;
		         69	       06  CE 00382 	    MNEGL   #6, (MCB_PTR)					      ; 2067
				       03  11 00385 	    BRB     16$							      ; 2062
		         69	       1E  CE 00387 15$:    MNEGL   #30, (MCB_PTR)					      ; 2073
		    04   B9	       00  FB 0038A 16$:    CALLS   #0, @4(MCB_PTR)					      ; 2075
					   04 0038E 	    RET     							      ; 1860

; Routine Size:  279 bytes


;	2077	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 26
; Digital Equipment Corporation
;
;	2078	GLOBAL ROUTINE  EXTLN (TYPE, DST_DDSC_AD, NO_LINES_AD) : LNKMSG =
;	2079	
;	2080	!++
;	2081	! FUNCTIONAL DESCRIPTION:
;	2082	!
;	2083	!	Extracts the next field in the input message, interpreting it as
;	2084	!	one of the NICE line fields, converts it to a NETACP compatable
;	2085	!	line name (e.g., XMA0 - 4 byte uncounted ascii string) and
;	2086	!	it in the destination buffer.  If the field denotes 'all known
;	2087	!	lines' then a NETACP control qio is issued to return a 
;	2088	!	contiguous list of the line names in the destination buffer.
;	2089	!
;	2090	!	The possible syntax for a NICE line field is as follows :
;	2091	!
;	2092	!	<line_field>	= <line_format><line_id>
;	2093	!	<line_format>	= 0 or 1 or 2
;	2094	!	
;	2095	!	if  line_format = 0 then
;	2096	!	<line_id> = null	- 'all known lines' is implied and
;	2097	!				  no further information follows.
;	2098	!
;	2099	!	if  line_format = 1 then
;	2100	!	<line_id> = <device_type><controller><number><station>
;	2101	!	<device_type> =  1 byte (binary) with semantics as follows
;	2102	!			 0 (DP),  or  2 (DU),  or  4 (DL),  or  6 (DQ),
;	2103	!			 8 (DA),  or 10 (DUP), or 12 (DMC), or 14 (DN),
;	2104	!			16 (DLV), or 18 (KL),  or 20 (DTE), or 22 (DV),
;	2105	!			24 (DZ),  or 28 (KDP), or 30 (KDZ)
;	2106	!
;	2107	!	<controller>  =	1 byte (binary); 0 => controller A, etc.
;	2108	!	<number>      = 1 byte (binary) line number
;	2109	!	<station>     =	1 byte (binary) multidrop station address,
;	2110	!			must be zero for this implementation.
;	2111	!
;	2112	!	if  line_format = 2 then
;	2113	!	<line_id> = 	a counted ascii string with from 1 to 16 bytes
;	2114	!			of text.  The line type, controller, number,
;	2115	!			and station address are to be obtained from the
;	2116	!			configuration data base using this name as a
;	2117	!			key.
;	2118	! FORMAL PARAMETERS:
;	2119	!
;	2120	!	TYPE		- Code to control the parse as follows :
;	2121	!			  Z_ALL     interpret a type 0 ('all lines') as
;	2122	!				    a legal format and issue a NETACP
;	2123	!				    control qio to get the linename list.
;	2124	!			  Z_ERROR   interpret a type 0 linename format 
;	2125	!				    an error.  If the format is type 1
;	2126	!				    or 2 then get the line characteristisc
;	2127	!				    from the system to verify the line 
;	2128	!				    as a network device.
;	2129	!			  NO_VERIFY the same as Z_ERROR without the 
;	2130	!				    verification phase.

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 27
; Digital Equipment Corporation
;
;	2131	!	DST_DDSC_AD	- The address of the DDSC of the buffer to 
;	2132	!			  receive the line name(s).
;	2133	!	NO_LINES_AD	- The address of the longword to receive the
;	2134	!			  number of linenames returned in the buffer.
;	2135	!			  If this information is not desired then the
;	2136	!			  value of this parameter may be zero.
;	2137	!
;	2138	! IMPLICIT INPUTS:
;	2139	!
;	2140	!	R9		- Contains the address of the MCB.
;	2141	!	R11		- Points to the next field of the message to be
;	2142	!			  read.
;	2143	! IMPLICIT OUTPUTS:
;	2144	!
;	2145	!	R11		- Updated to point to the first byte immediately
;	2146	!			  following the field just read.
;	2147	! ROUTINE VALUE:
;	2148	! COMPLETION CODES:
;	2149	!
;	2150	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	2151	!	R9 return :
;	2152	!		NIC$_ILLMSGFMT	if the field to be extracted is not
;	2153	!				completely contained within the input
;	2154	!				message bounds.
;	2155	!		NIC$_ILL_LN_ID	if the line name is unrecognized, ill
;	2156	!				formed, or is of format type 0 and the
;	2157	!				value of TYPE is Z_ERROR.
;	2158	!		NIC$_SUCCESS	if the line name was parsed with no
;	2159	!				errors.
;	2160	!
;	2161	!		NOTE :  Routines ACP, EXTSTR, CVTLN, GETREC, and VERIFY
;	2162	!			may be called.  If they return an error code
;	2163	!			then it returned without modification.
;	2164	!
;	2165	!
;	2166	! SIDE EFFECTS:
;	2167	!
;	2168	!	This routine exits through the exit routine referenced in the
;	2169	!	MCB pointed to by R9.  If an error is indicated in the 
;	2170	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	2171	!	is set, then control never returns to the calling routine --
;	2172	!	the stack is unwound to the main routine instead.
;	2173	!
;	2174	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 28
; Digital Equipment Corporation
;
;	2175	BEGIN
;	2176	
;	2177	LOCAL	SCRATCH, VERIFY ;
;	2178	BIND	NO_LINES = (IF .NO_LINES_AD EQL 0
;	2179			    THEN  SCRATCH
;	2180			    ELSE  .NO_LINES_AD
;	2181			   ),
;	2182		DBLK = .DST_DDSC_AD  : DDSC ;
;	2183	
;	2184	EXTERNAL REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	2185	
;	2186	MACRO	REPLY_CODE = MCB_PTR [MCB$L_REPLYCODE] % ;
;	2187	
;	2188	NO_LINES = 0 ;				! INIT COUNTER
;	2189	
;	2190	IF .TYPE EQL NO_VERIFY			! If the line name is not to
;	2191	THEN					! be verified as a local network
;	2192	    BEGIN				! line, then it must be explicit
;	2193	    TYPE = Z_ERROR ;
;	2194	    VERIFY = FALSE ;
;	2195	    END
;	2196	ELSE
;	2197	    VERIFY = TRUE ;
;	2198	
;	2199	DBLK [STR_PTR] = .DBLK [BUF_PTR] ;	! INIT DEST. STR
;	2200						!  PTR
;	2201	
;	2202	IF NOT CHK_IMSG (1)
;	2203	THEN
;	2204	   REPLY_CODE = NIC$_ILLMSGFMT
;	2205	ELSE
;	2206	 SELECT ( CH$RCHAR_A (P_IM)) OF	! ACCORDING TO FORMAT TYPE
;	2207	  SET
;	2208		      		!+++++++++++++++++++++++++++++++++++++++
;	2209	  [0] :	! TYPE = ALL LINES
;	2210	
;	2211	    IF .TYPE EQL Z_ERROR
;	2212	    THEN 
;	2213		REPLY_CODE = NIC$_ILL_LN_ID
;	2214	    ELSE
;	2215		ACP (GET_LINE_NAMES, NO_LINES,
;	2216		     0, .DST_DDSC_AD
;	2217		   ) ;
;	2218		
;	2219	
;	2220				!+++++++++++++++++++++++++++++++++++++++
;	2221	  [1] :	! TYPE = LONG FORMAT
;	2222	    IF  NOT  CHK_IMSG (4)
;	2223	    THEN
;	2224		REPLY_CODE = NIC$_ILLMSGFMT
;	2225	    ELSE
;	2226		IF CVTLN (TO_ASCII,		! CONVERT THE LINE ID 
;	2227			  .P_IM,		! FOUND IN THE MSG IN
;	2228			  .DST_DDSC_AD		! 'NICE' FORMAT TO 
;	2229		         )			! 'NETACP' FORMAT

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 28-1
; Digital Equipment Corporation
;
;	2230		THEN
;	2231		  BEGIN
;	2232		  P_IM = CH$PLUS (.P_IM, 4) ;	! ADVANCE INPUT MSG PTR
;	2233						! PAST THE LINE ID FIELD
;	2234		  IF .VERIFY
;	2235		  THEN
;	2236		    IF VERIFY_LN (.DBLK [STR_PTR])
;	2237		    THEN
;	2238			NO_LINES = 1
;	2239		  ELSE
;	2240			NO_LINES = 1 ;
;	2241		  END ;

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 29
; Digital Equipment Corporation
;
;	2242	
;	2243	  [2] :	! TYPE = COUNTED ASCII NAME
;	2244	
;	2245	    BEGIN
;	2246	    LOCAL	TMP,
;	2247			NAME_DDSC	: DDSC,
;	2248			NAME_BUF	: BLOCK [17,BYTE],
;	2249	
;	2250			BF_DDSC	: DDSC,
;	2251			REC_BUF		: BLOCK [LID$C_SIZE,BYTE] ;
;	2252	
;	2253	    BF_DDSC [BUF_PTR] = REC_BUF ;
;	2254	    BF_DDSC [BUF_LNG] = LID$C_SIZE ;
;	2255	
;	2256	    NAME_DDSC [BUF_PTR] = NAME_BUF ;
;	2257	    NAME_DDSC [BUF_LNG] = 17 ;
;	2258	
;	2259	    !+
;	2260	    ! note that the routines called below will properly set the
;	2261	    ! value of 'REPLY_CODE'.
;	2262	    !-
;	2263	
;	2264	    TMP = .MCB_PTR [MCB$B_ERROR_ON] ;	! disable error handling
;	2265	    MCB_PTR [MCB$B_ERROR_ON] = FALSE ;
;	2266	
;	2267	    IF      EXTSTR (16, NAME_DDSC)
;	2268	    THEN
;	2269	      IF GET_REC 
;	2270		  (LID$C_FILE, BF_DDSC, REC_BUF [LID$B_NAME], NAME_DDSC)
;	2271	      THEN
;	2272		IF  CVTLN (TO_ASCII, REC_BUF [LID$B_CODE], .DST_DDSC_AD)
;	2273		THEN
;	2274		    IF .VERIFY
;	2275		    THEN
;	2276			IF  VERIFY_LN (.DBLK [STR_PTR])
;	2277			THEN
;	2278			    NO_LINES = 1
;	2279		    ELSE
;	2280			NO_LINES = 1 ;
;	2281	
;	2282	     ! restore state of error handler
;	2283	
;	2284	     MCB_PTR [MCB$B_ERROR_ON] = .TMP ;
;	2285	
;	2286	    END ;
;	2287	
;	2288	  TES ;
;	2289	
;	2290	RETRN (.REPLY_CODE) ;
;	2291	END ;






; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 29-1
; Digital Equipment Corporation
;
					 003C 0038F 	    .ENTRY  EXTLN, Save R2,R3,R4,R5				      ; 2078
		         5E	  9C   AE  9E 00391 	    MOVAB   -100(SP), SP					      ;
				  0C   AC  D5 00395 	    TSTL    NO_LINES_AD						      ; 2178
				       08  12 00398 	    BNEQ    1$							      ;
		         50	       6E  9E 0039A 	    MOVAB   SCRATCH, R0						      ;
		         55	       50  D0 0039D 	    MOVL    R0, R5						      ;
				       04  11 003A0 	    BRB     2$							      ;
		         55	  0C   AC  D0 003A2 1$:     MOVL    NO_LINES_AD, R5					      ;
		         52	  08   AC  D0 003A6 2$:     MOVL    DST_DDSC_AD, R2					      ; 2175
				       65  D4 003AA 	    CLRL    (R5)						      ; 2188
		         03	  04   AC  D1 003AC 	    CMPL    TYPE, #3						      ; 2190
				       08  12 003B0 	    BNEQ    3$							      ;
		    04   AC	       02  D0 003B2 	    MOVL    #2, TYPE						      ; 2193
				       54  D4 003B6 	    CLRL    VERIFY						      ; 2194
				       03  11 003B8 	    BRB     4$							      ; 2190
		         54	       01  D0 003BA 3$:     MOVL    #1, VERIFY						      ; 2197
		    04   A2	  0C   A2  D0 003BD 4$:     MOVL    12(R2), 4(R2)					      ; 2199
	   50	         5B	       01  C1 003C2 	    ADDL3   #1, P_IM, R0					      ; 2202
		    38   A9	       50  D1 003C6 	    CMPL    R0, 56(MCB_PTR)					      ;
				       06  1B 003CA 	    BLEQU   5$							      ;
		         69	       04  CE 003CC 	    MNEGL   #4, (MCB_PTR)					      ; 2204
				     00B2  31 003CF 	    BRW     11$							      ; 2202
		         53	       8B  9A 003D2 5$:     MOVZBL  (P_IM)+, R3						      ; 2206
				       19  12 003D5 	    BNEQ    7$							      ;
		         02	  04   AC  D1 003D7 	    CMPL    TYPE, #2						      ; 2211
				       05  12 003DB 	    BNEQ    6$							      ;
		         69	       10  CE 003DD 	    MNEGL   #16, (MCB_PTR)					      ; 2213
				       0E  11 003E0 	    BRB     7$							      ; 2211
				  08   AC  DD 003E2 6$:     PUSHL   DST_DDSC_AD						      ; 2215
				       7E  D4 003E5 	    CLRL    -(SP)						      ;
				       55  DD 003E7 	    PUSHL   R5							      ;
				       0F  DD 003E9 	    PUSHL   #15							      ;
		  FE88   CF	       04  FB 003EB 	    CALLS   #4, ACP						      ;
		         01	       53  91 003F0 7$:     CMPB    R3, #1						      ; 2206
				       2F  12 003F3 	    BNEQ    9$							      ;
	   50	         5B	       04  C1 003F5 	    ADDL3   #4, P_IM, R0					      ; 2222
		    38   A9	       50  D1 003F9 	    CMPL    R0, 56(MCB_PTR)					      ;
				       05  1B 003FD 	    BLEQU   8$							      ;
		         69	       04  CE 003FF 	    MNEGL   #4, (MCB_PTR)					      ; 2224
				       20  11 00402 	    BRB     9$							      ; 2222
				  08   AC  DD 00404 8$:     PUSHL   DST_DDSC_AD						      ; 2226
				       5B  DD 00407 	    PUSHL   P_IM						      ;
				       7E  D4 00409 	    CLRL    -(SP)						      ;
		  FBF6   CF	       03  FB 0040B 	    CALLS   #3, CVTLN						      ;
		         11	       50  E9 00410 	    BLBC    R0, 9$						      ;
		         5B	       04  C0 00413 	    ADDL2   #4, P_IM						      ; 2232
		         0B	       54  E9 00416 	    BLBC    VERIFY, 9$						      ; 2234
				  04   A2  DD 00419 	    PUSHL   4(R2)						      ; 2236
		  0000V  CF	       01  FB 0041C 	    CALLS   #1, VERIFY_LN					      ;
		         65	       01  D0 00421 	    MOVL    #1, (R5)						      ; 2240
		         02	       53  91 00424 9$:     CMPB    R3, #2						      ; 2206
				       5B  12 00427 	    BNEQ    11$							      ;
		    3C   AE	  04   AE  9E 00429 	    MOVAB   REC_BUF, BF_DDSC+12					      ; 2253
		    38   AE	       2A  D0 0042E 	    MOVL    #42, BF_DDSC+8					      ; 2254
		    60   AE	  40   AE  9E 00432 	    MOVAB   NAME_BUF, NAME_DDSC+12				      ; 2256

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 29-2
; Digital Equipment Corporation
;
		    5C   AE	       11  D0 00437 	    MOVL    #17, NAME_DDSC+8					      ; 2257
		         53	  41   A9  9A 0043B 	    MOVZBL  65(MCB_PTR), TMP					      ; 2264
				  41   A9  94 0043F 	    CLRB    65(MCB_PTR)						      ; 2265
				  54   AE  9F 00442 	    PUSHAB  NAME_DDSC						      ; 2267
				       10  DD 00445 	    PUSHL   #16							      ;
		  FDAC   CF	       02  FB 00447 	    CALLS   #2, EXTSTR						      ;
		         31	       50  E9 0044C 	    BLBC    R0, 10$						      ;
				  54   AE  9F 0044F 	    PUSHAB  NAME_DDSC						      ; 2270
				  09   AE  9F 00452 	    PUSHAB  REC_BUF+1						      ;
				  38   AE  9F 00455 	    PUSHAB  BF_DDSC						      ;
				       02  DD 00458 	    PUSHL   #2							      ;
		  FCF3   CF	       04  FB 0045A 	    CALLS   #4, GET_REC						      ;
		         1E	       50  E9 0045F 	    BLBC    R0, 10$						      ;
				  08   AC  DD 00462 	    PUSHL   DST_DDSC_AD						      ; 2272
				  20   AE  9F 00465 	    PUSHAB  REC_BUF+24						      ;
				       7E  D4 00468 	    CLRL    -(SP)						      ;
		  FB97   CF	       03  FB 0046A 	    CALLS   #3, CVTLN						      ;
		         0E	       50  E9 0046F 	    BLBC    R0, 10$						      ;
		         0B	       54  E9 00472 	    BLBC    VERIFY, 10$						      ; 2274
				  04   A2  DD 00475 	    PUSHL   4(R2)						      ; 2276
		  0000V  CF	       01  FB 00478 	    CALLS   #1, VERIFY_LN					      ;
		         65	       01  D0 0047D 	    MOVL    #1, (R5)						      ; 2280
		    41   A9	       53  90 00480 10$:    MOVB    TMP, 65(MCB_PTR)					      ; 2284
		    04   B9	       00  FB 00484 11$:    CALLS   #0, @4(MCB_PTR)					      ; 2290
					   04 00488 	    RET     							      ; 2078

; Routine Size:  250 bytes


;	2292	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 30
; Digital Equipment Corporation
;
;	2293	GLOBAL ROUTINE  VERIFY_LN (SRC_AD) : LNKMSG =
;	2294	
;	2295	!++
;	2296	! FUNCTIONAL DESCRIPTION:
;	2297	!
;	2298	!	Verifies whether or not the line named by the routine argument
;	2299	!	is known to the system as a network device.
;	2300	!
;	2301	! FORMAL PARAMETERS:
;	2302	!
;	2303	!	SRC_AD	- The address of begining of the line name string.  This
;	2304	!		  string should be of the form XMA0
;	2305	!		  
;	2306	! IMPLICIT INPUTS:
;	2307	!
;	2308	!	R9		- Contains the address of the MCB.
;	2309	!
;	2310	! IMPLICIT OUTPUTS:
;	2311	!
;	2312	!	Same as implicit input.
;	2313	!
;	2314	! ROUTINE VALUE:
;	2315	! COMPLETION CODES:
;	2316	!
;	2317	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	2318	!	R9 return :
;	2319	!		NIC$_SUCCESS	if the line is known to the system as
;	2320	!				a network device.
;	2321	!		NIC$_ILL_LN_ID	otherwise.
;	2322	!
;	2323	! SIDE EFFECTS:
;	2324	!
;	2325	!	This routine exits through the exit routine referenced in the
;	2326	!	MCB pointed to by R9 if an error is detected or the line
;	2327	!	verification test does not pass.  If the MCB$B_ERROR_ON field's
;	2328	!	low bit is set, then control never returns to the calling 
;	2329	!	routine -- the stack is unwound to the main routine instead.
;	2330	!
;	2331	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 31
; Digital Equipment Corporation
;
;	2332	BEGIN
;	2333	EXTERNAL REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	2334	MACRO	 REPLY_CODE = MCB_PTR [MCB$L_REPLYCODE] % ;
;	2335	
;	2336	LOCAL	TEMP,
;	2337		LOC0_BUF	: BLOCK [8,BYTE],
;	2338		TMP0_DSC	: NDSC,
;	2339		LOC1_BUF	: BLOCK [53,BYTE],
;	2340		TMP1_DSC 	: NDSC ;
;	2341	
;	2342	BIND	DEVCHAR = LOC1_BUF [DIB$L_DEVCHAR] : BLOCK [4,BYTE] ;
;	2343	
;	2344	!+
;	2345	! Build a string reprensenting the physical line name and build
;	2346	! a descriptor of that string.
;	2347	!-
;	2348	
;	2349	TEMP = CH$PTR (LOC0_BUF) ;
;	2350	CH$WCHAR_A ('_', TEMP) ;			! Indicate physical name
;	2351	CH$MOVE  (LN_NAME_SIZE, CH$PTR(.SRC_AD), .TEMP) ;
;	2352	
;	2353	TMP0_DSC [DSC_LNG] = LN_NAME_SIZE + 1 ;
;	2354	TMP0_DSC [DSC_PTR] = LOC0_BUF ;
;	2355	
;	2356	!+
;	2357	! Build a desriptor of the buffer to receive the primary device
;	2358	! charateristics, get the characteristics, and test for network device.
;	2359	!-
;	2360	
;	2361	TMP1_DSC [DSC_LNG] = 53 ;
;	2362	TMP1_DSC [DSC_PTR] = LOC1_BUF ;
;	2363	
;	2364	IF  $GETDEV (DEVNAM=TMP0_DSC, PRILEN=TEMP, PRIBUF=TMP1_DSC)
;	2365	THEN
;	2366	    IF  .DEVCHAR [DEV$V_NET]
;	2367	    THEN
;	2368		RETURN (REPLY_CODE = NIC$_SUCCESS) ;	! No need to exit via 
;	2369							! error handler.
;	2370	RETRN (NIC$_ILL_LN_ID) ;			! Exit via error handler
;	2371	END ;



							    .GLOBL  SYS$GETDEV

					 003C 00489 	    .ENTRY  VERIFY_LN, Save R2,R3,R4,R5				      ; 2293
		         5E	  B0   AE  9E 0048B 	    MOVAB   -80(SP), SP						      ;
				  48   AE  9F 0048F 	    PUSHAB  LOC0_BUF						      ; 2349
		    00   BE	  5F   8F  90 00492 	    MOVB    #95, @TEMP						      ; 2350
				       6E  D6 00497 	    INCL    TEMP						      ;
      00   BE	    04   BC	       04  28 00499 	    MOVC3   #4, @SRC_AD, @TEMP					      ; 2351
		    44   AE	       05  D0 0049F 	    MOVL    #5, TMP0_DSC					      ; 2353
		    48   AE	  4C   AE  9E 004A3 	    MOVAB   LOC0_BUF, TMP0_DSC+4				      ; 2354
		    04   AE	       35  D0 004A8 	    MOVL    #53, TMP1_DSC					      ; 2361
		    08   AE	  0C   AE  9E 004AC 	    MOVAB   LOC1_BUF, TMP1_DSC+4				      ; 2362

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 31-1
; Digital Equipment Corporation
;
				       7E  7C 004B1 	    CLRQ    -(SP)						      ; 2364
				  0C   AE  9F 004B3 	    PUSHAB  TMP1_DSC						      ;
				  0C   AE  9F 004B6 	    PUSHAB  TEMP						      ;
				  54   AE  9F 004B9 	    PUSHAB  TMP0_DSC						      ;
	      00000000G  9F	       05  FB 004BC 	    CALLS   #5, @#SYS$GETDEV					      ;
		         0C	       50  E9 004C3 	    BLBC    R0, 1$						      ;
	   07	    0D   AE	       05  E1 004C6 	    BBC     #5, DEVCHAR, 1$					      ; 2366
		         69	       01  D0 004CB 	    MOVL    #1, (MCB_PTR)					      ; 2368
		         50	       01  D0 004CE 	    MOVL    #1, R0						      ;
					   04 004D1 	    RET     							      ;
		         69	       10  CE 004D2 1$:     MNEGL   #16, (MCB_PTR)					      ; 2370
		    04   B9	       00  FB 004D5 	    CALLS   #0, @4(MCB_PTR)					      ;
					   04 004D9 	    RET     							      ; 2293

; Routine Size:  81 bytes


;	2372	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 32
; Digital Equipment Corporation
;
;	2373	GLOBAL ROUTINE  EXTND (TYPE, DST_DDSC_AD, NO_NODES_AD) : LNKMSG =
;	2374	
;	2375	!++
;	2376	! FUNCTIONAL DESCRIPTION:
;	2377	!
;	2378	!	Extracts the node name from the next field of the input message
;	2379	!	and verifies that it is known to the NETACP.  The nodename is
;	2380	!	assumed to be a counted ascii string (text field six characters
;	2381	!	maximum).  If the count byte of this string is 0 then the node
;	2382	!	name(s) are obtained from the NETACP and are assumed to need no
;	2383	!	verification.
;	2384	!
;	2385	! FORMAL PARAMETERS:
;	2386	!
;	2387	!	TYPE		- A code to control the parsing of the nodename
;	2388	!			  field as follows :
;	2389	!
;	2390	!			  Z_LOCAL   - if the count byte is zero then
;	2391	!				      obtain the name of the local node
;	2392	!				      from the NETACP.
;	2393	!			  Z_ALL	    - if the count byte is zero then
;	2394	!				      obtain a list of all nodes known
;	2395	!				      currently by the NETACP.
;	2396	!			  Z_ERROR   - if the count byte is zero then the
;	2397	!				      nodename is in error.
;	2398	!			  NO_VERIFY - the same as Z_ERROR except that
;	2399	!				      the nodename verification phase is
;	2400	!				      bypassed.
;	2401	!	DST_DDSC_AD	- The double descriptor (DDSC) of the buffer to
;	2402	!			  receive the node name(s).  The buffer 
;	2403	!			  descriptor portion is assumed valid on input,
;	2404	!			  and the string desrciptor portion is valid 
;	2405	!			  upon successful routine completion.  All node
;	2406	!			  names are stored in the buffer as counted
;	2407	!			  strings.
;	2408	!	NO_NODES_AD	- The address of the longword to receive the
;	2409	!			  number of node names returned.  If this
;	2410	!			  information is not desired, then the value of
;	2411	!			  this parameter should be zero.
;	2412	! IMPLICIT INPUTS:
;	2413	!
;	2414	!	R9		- Contains the address of the MCB.
;	2415	!	R11		- Points to the next field of the message to be
;	2416	!			  read.
;	2417	!
;	2418	! IMPLICIT OUTPUTS:
;	2419	!
;	2420	!	R11		- Updated to point to the first byte immediately
;	2421	!			  following the field just read.
;	2422	!
;	2423	! ROUTINE VALUE:
;	2424	! COMPLETION CODES:
;	2425	!
;	2426	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	2427	!	R9 return :

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 32-1
; Digital Equipment Corporation
;
;	2428	!		NIC$_SUCCESS	if the field was parsed successfully.
;	2429	!		NIC$_ILLMSGFMT	if the input message is not long enough
;	2430	!				to contain the nodename field.
;	2431	!		NIC$_PGM_ERR	if the destination buffer is not large
;	2432	!				enough to receive the nodename.
;	2433	!		NIC$_ILL_ND_ID	if the node name is longer than six
;	2434	!				ascii bytes, has a zero count field and
;	2435	!				TYPE is Z_ERROR or NO_VERIFY, or an
;	2436	!				attempt nodename verification test fails
;	2437	! SIDE EFFECTS:
;	2438	!
;	2439	!	This routine exits through the exit routine referenced in the
;	2440	!	MCB pointed to by R9.  If an error is indicated in the 
;	2441	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	2442	!	is set, then control never returns to the calling routine --
;	2443	!	the stack is unwound to the main routine instead.
;	2444	!
;	2445	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 33
; Digital Equipment Corporation
;
;	2446	BEGIN
;	2447	EXTERNAL REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	2448	MACRO	 REPLY_CODE = MCB_PTR [MCB$L_REPLYCODE] % ;
;	2449	LOCAL	 CNT, VERIFY, HANDLER_STA ;
;	2450	
;	2451	BIND	DBLK  = .DST_DDSC_AD : DDSC,
;	2452		NO_NODES = (IF .NO_NODES_AD EQL 0	! Bind to avoid access
;	2453			    THEN  NO_NODES_AD		! violations.
;	2454			    ELSE  .NO_NODES_AD) ;
;	2455	
;	2456	HANDLER_STA = .MCB_PTR[MCB$B_ERROR_ON] ; ! Get state of error handler.
;	2457	MCB_PTR[MCB$B_ERROR_ON] = FALSE ;	 ! Disabel handler for now.
;	2458	DBLK [STR_PTR] = .DBLK [BUF_PTR] ;	 ! Init dest. str ptr
;	2459	NO_NODES = 0 ;				 ! Init count of names in list.
;	2460	IF .TYPE EQL NO_VERIFY			 ! If the node name is not to be
;	2461	THEN					 ! verified via NETACP, then a
;	2462	    BEGIN				 ! zero in the count field is 
;	2463	    TYPE = Z_ERROR ;			 ! illegal.
;	2464	    VERIFY = FALSE ;
;	2465	    END
;	2466	ELSE
;	2467	    VERIFY = TRUE ;
;	2468	
;	2469	!+
;	2470	! Check that the input message is long enough to contain the nodename,
;	2471	! that the nodename is no longer than 6 bytes of ascii text, and that
;	2472	! the destination buffer is large enough to contain at least one
;	2473	! counted nodename.
;	2474	!-
;	2475	
;	2476	CNT = CH$RCHAR (.P_IM) + 1 ;		! Get value of total counted
;	2477						! string length.
;	2478	IF  NOT CHK_IMSG (.CNT)
;	2479	THEN 
;	2480	    REPLY_CODE = NIC$_ILLMSGFMT
;	2481	ELSE
;	2482	  IF  .CNT GTRU 6+1
;	2483	  THEN 
;	2484	      REPLY_CODE = NIC$_ILL_ND_ID
;	2485	  ELSE
;	2486	    IF  .DBLK [BUF_LNG] LSSU 6+1
;	2487	    THEN 
;	2488		 REPLY_CODE = NIC$_PGM_ERR
;	2489	    ELSE 
;	2490		!+
;	2491		! Parse the remainder of the name according to the value of
;	2492		! the count field and the code specified by TYPE.
;	2493		!-
;	2494	
;	2495		IF .CNT EQL 1			! 1 => null node name
;	2496		THEN
;	2497		   SELECT .TYPE OF
;	2498		    SET
;	2499		    [Z_ALL] :  ! Null indicates all known nodes
;	2500	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 33-1
; Digital Equipment Corporation
;
;	2501			    ACP (GET_NODE_NAMES, NO_NODES, 0, .DST_DDSC_AD) ;
;	2502	
;	2503	
;	2504	
;	2505		    [Z_LOCAL] :	! Null indicates the local node
;	2506	
;	2507			    ACP (GET_LOCAL_NAME, NO_NODES, 0, .DST_DDSC_AD) ;
;	2508	
;	2509	
;	2510	
;	2511		    [Z_ERROR] :  ! Null indicates msg error
;	2512	
;	2513			    REPLY_CODE = NIC$_ILL_ND_ID ;
;	2514		   TES
;	2515	        ELSE
;	2516		    !+
;	2517		    ! The nodename is non-null, therefore move the counted
;	2518		    ! string into the buffer, complete the string descriptor,
;	2519		    ! and optionally verify the node name.
;	2520		    !-
;	2521	
;	2522		    BEGIN
;	2523		    CH$MOVE (.CNT, .P_IM, CH$PTR (.DBLK[BUF_PTR])) ;
;	2524		    DBLK [STR_LNG] = .CNT ;
;	2525	
;	2526		    IF  .VERIFY
;	2527		    THEN
;	2528			IF  ACP (GET_NUM_BY_NAME, 0, .DST_DDSC_AD, 0)
;	2529			THEN
;	2530			    NO_NODES = 1
;	2531			ELSE
;	2532			    REPLY_CODE = NIC$_ILL_ND_ID
;	2533		    ELSE
;	2534			NO_NODES = 1 ;
;	2535		    END ;
;	2536	
;	2537	IF .REPLY_CODE
;	2538	THEN
;	2539	    P_IM = CH$PLUS (.P_IM,.CNT) ;		! Advance parse pointer
;	2540	
;	2541	MCB_PTR [MCB$B_ERROR_ON] = .HANDLER_STA ;	! Restore state of the
;	2542							! error handler.
;	2543	RETRN (.REPLY_CODE) ;
;	2544	END ;





					 01FC 004DA 	    .ENTRY  EXTND, Save R2,R3,R4,R5,R6,R7,R8			      ; 2373
		         5E	       08  C2 004DC 	    SUBL2   #8, SP						      ;
		         56	  08   AC  D0 004DF 	    MOVL    DST_DDSC_AD, R6					      ; 2446
				  0C   AC  D5 004E3 	    TSTL    NO_NODES_AD						      ; 2452
				       09  12 004E6 	    BNEQ    1$							      ;
		         50	  0C   AC  9E 004E8 	    MOVAB   NO_NODES_AD, R0					      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 33-2
; Digital Equipment Corporation
;
		         58	       50  D0 004EC 	    MOVL    R0, R8						      ;
				       04  11 004EF 	    BRB     2$							      ;
		         58	  0C   AC  D0 004F1 1$:     MOVL    NO_NODES_AD, R8					      ;
		    04   AE	  41   A9  9A 004F5 2$:     MOVZBL  65(MCB_PTR), HANDLER_STA				      ; 2456
				  41   A9  94 004FA 	    CLRB    65(MCB_PTR)						      ; 2457
		    04   A6	  0C   A6  D0 004FD 	    MOVL    12(R6), 4(R6)					      ; 2458
				       68  D4 00502 	    CLRL    (R8)						      ; 2459
		         03	  04   AC  D1 00504 	    CMPL    TYPE, #3						      ; 2460
				       08  12 00508 	    BNEQ    3$							      ;
		    04   AC	       02  D0 0050A 	    MOVL    #2, TYPE						      ; 2463
				       6E  D4 0050E 	    CLRL    VERIFY						      ; 2464
				       03  11 00510 	    BRB     4$							      ; 2460
		         6E	       01  D0 00512 3$:     MOVL    #1, VERIFY						      ; 2467
		         57	       6B  9A 00515 4$:     MOVZBL  (P_IM), CNT						      ; 2476
				       57  D6 00518 	    INCL    CNT							      ;
	   50	         5B	       57  C1 0051A 	    ADDL3   CNT, P_IM, R0					      ; 2478
		    38   A9	       50  D1 0051E 	    CMPL    R0, 56(MCB_PTR)					      ;
				       05  1B 00522 	    BLEQU   5$							      ;
		         69	       04  CE 00524 	    MNEGL   #4, (MCB_PTR)					      ; 2480
				       66  11 00527 	    BRB     12$							      ; 2478
		         07	       57  D1 00529 5$:     CMPL    CNT, #7						      ; 2482
				       59  1A 0052C 	    BGTRU   10$							      ;
		         07	  08   A6  D1 0052E 	    CMPL    8(R6), #7						      ; 2486
				       05  1E 00532 	    BGEQU   6$							      ;
		         69	       0A  CE 00534 	    MNEGL   #10, (MCB_PTR)					      ; 2488
				       56  11 00537 	    BRB     12$							      ; 2486
		         01	       57  D1 00539 6$:     CMPL    CNT, #1						      ; 2495
				       2E  12 0053C 	    BNEQ    9$							      ;
		         52	  04   AC  D0 0053E 	    MOVL    TYPE, R2						      ; 2497
				       0E  12 00542 	    BNEQ    7$							      ;
				  08   AC  DD 00544 	    PUSHL   DST_DDSC_AD						      ; 2501
				       7E  D4 00547 	    CLRL    -(SP)						      ;
				       58  DD 00549 	    PUSHL   R8							      ;
				       0E  DD 0054B 	    PUSHL   #14							      ;
		  FD26   CF	       04  FB 0054D 	    CALLS   #4, ACP						      ;
		         01	       52  D1 00552 7$:     CMPL    R2, #1						      ; 2497
				       0E  12 00555 	    BNEQ    8$							      ;
				  08   AC  DD 00557 	    PUSHL   DST_DDSC_AD						      ; 2507
				       7E  D4 0055A 	    CLRL    -(SP)						      ;
				       58  DD 0055C 	    PUSHL   R8							      ;
				       07  DD 0055E 	    PUSHL   #7							      ;
		  FD13   CF	       04  FB 00560 	    CALLS   #4, ACP						      ;
		         02	       52  D1 00565 8$:     CMPL    R2, #2						      ; 2497
				       25  12 00568 	    BNEQ    12$							      ;
				       1B  11 0056A 	    BRB     10$							      ; 2513
      0C   B6	         6B	       57  28 0056C 9$:     MOVC3   CNT, (P_IM), @12(R6)				      ; 2523
		         66	       57  D0 00571 	    MOVL    CNT, (R6)						      ; 2524
		         15	       6E  E9 00574 	    BLBC    VERIFY, 11$						      ; 2526
				       7E  D4 00577 	    CLRL    -(SP)						      ; 2528
				  08   AC  DD 00579 	    PUSHL   DST_DDSC_AD						      ;
		         7E	       12  7D 0057C 	    MOVQ    #18, -(SP)						      ;
		  FCF4   CF	       04  FB 0057F 	    CALLS   #4, ACP						      ;
		         05	       50  E8 00584 	    BLBS    R0, 11$						      ;
		         69	       16  CE 00587 10$:    MNEGL   #22, (MCB_PTR)					      ; 2532
				       03  11 0058A 	    BRB     12$							      ; 2526

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 33-3
; Digital Equipment Corporation
;
		         68	       01  D0 0058C 11$:    MOVL    #1, (R8)						      ; 2534
		         03	       69  E9 0058F 12$:    BLBC    (MCB_PTR), 13$					      ; 2537
		         5B	       57  C0 00592 	    ADDL2   CNT, P_IM						      ; 2539
		    41   A9	  04   AE  90 00595 13$:    MOVB    HANDLER_STA, 65(MCB_PTR)				      ; 2541
		    04   B9	       00  FB 0059A 	    CALLS   #0, @4(MCB_PTR)					      ; 2543
					   04 0059E 	    RET     							      ; 2373

; Routine Size:  197 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 34
; Digital Equipment Corporation
;
;	2545	GLOBAL ROUTINE  INSB (ARG) : LNKMSG =
;	2546	
;	2547	!++
;	2548	! FUNCTIONAL DESCRIPTION:
;	2549	!
;	2550	!	Insert a byte into the output message.
;	2551	!
;	2552	! FORMAL PARAMETERS:
;	2553	!
;	2554	!	ARG		- The value to be inserted.
;	2555	!
;	2556	! IMPLICIT INPUTS:
;	2557	!
;	2558	!	R9		- Contains the address of the MCB.
;	2559	!	R10		- Points to the first unused byte in the message
;	2560	!			  being constructed.
;	2561	! IMPLICIT OUTPUTS:
;	2562	!
;	2563	!	R10		- Updated to point to the byte following the 
;	2564	!			  last byte entered into the message.
;	2565	! ROUTINE VALUE:
;	2566	! COMPLETION CODES:
;	2567	!
;	2568	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	2569	!	R9 return :
;	2570	!		NIC$_PGM_ERR	if the output message buffer is too
;	2571	!				small to accept the byte.
;	2572	!		NIC$_SUCCESS	otherwise.
;	2573	! SIDE EFFECTS:
;	2574	!
;	2575	!	This routine exits through the exit routine referenced in the
;	2576	!	MCB pointed to by R9.  If an error is indicated in the 
;	2577	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	2578	!	is set, then control never returns to the calling routine --
;	2579	!	the stack is unwound to the main routine instead.
;	2580	!
;	2581	!--
;	2582	
;	2583	BEGIN
;	2584	EXTERNAL REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	2585	
;	2586	IF CHK_OMSG (1)			! Is there room in the output buffer
;	2587	THEN
;	2588	     BEGIN
;	2589	     CH$WCHAR_A (.ARG, P_OM) ;	! xfer byte and update pointer.
;	2590	     RETURN (NIC$_SUCCESS) ;	! Take the error checking exit only
;	2591	     END			! if necessary.
;	2592	ELSE 
;	2593	     RETRN (NIC$_PGM_ERR) ;
;	2594	END ;






; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 34-1
; Digital Equipment Corporation
;
					 0000 0059F 	    .ENTRY  INSB, Save nothing					      ; 2545
	   50	         5A	       01  C1 005A1 	    ADDL3   #1, P_OM, R0					      ; 2586
		    3C   A9	       50  D1 005A5 	    CMPL    R0, 60(MCB_PTR)					      ;
				       08  1A 005A9 	    BGTRU   1$							      ;
		         8A	  04   AC  90 005AB 	    MOVB    ARG, (P_OM)+					      ; 2589
		         50	       01  D0 005AF 	    MOVL    #1, R0						      ; 2590
					   04 005B2 	    RET     							      ;
		         69	       0A  CE 005B3 1$:     MNEGL   #10, (MCB_PTR)					      ; 2593
		    04   B9	       00  FB 005B6 	    CALLS   #0, @4(MCB_PTR)					      ;
					   04 005BA 	    RET     							      ; 2545

; Routine Size:  28 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 35
; Digital Equipment Corporation
;
;	2595	GLOBAL ROUTINE  INSW (ARG) : LNKMSG =
;	2596	
;	2597	!++
;	2598	! FUNCTIONAL DESCRIPTION:
;	2599	!
;	2600	!	Insert a word into the output message.
;	2601	!
;	2602	! FORMAL PARAMETERS:
;	2603	!
;	2604	!	ARG		- The value to be inserted.
;	2605	!
;	2606	! IMPLICIT INPUTS:
;	2607	!
;	2608	!	R9		- Contains the address of the MCB.
;	2609	!	R10		- Points to the first unused byte in the message
;	2610	!			  being constructed.
;	2611	! IMPLICIT OUTPUTS:
;	2612	!
;	2613	!	R10		- Updated to point to the byte following the 
;	2614	!			  last byte entered into the message.
;	2615	! ROUTINE VALUE:
;	2616	! COMPLETION CODES:
;	2617	!
;	2618	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	2619	!	R9 return :
;	2620	!		NIC$_PGM_ERR	if the output message buffer is too
;	2621	!				small to accept the word.
;	2622	!		NIC$_SUCCESS	otherwise.
;	2623	! SIDE EFFECTS:
;	2624	!
;	2625	!	This routine exits through the exit routine referenced in the
;	2626	!	MCB pointed to by R9.  If an error is indicated in the 
;	2627	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	2628	!	is set, then control never returns to the calling routine --
;	2629	!	the stack is unwound to the main routine instead.
;	2630	!
;	2631	!--
;	2632	
;	2633	BEGIN
;	2634	EXTERNAL REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	2635	
;	2636	IF CHK_OMSG (2)				! Will word fit into buffer ?
;	2637	THEN
;	2638	     BEGIN
;	2639	     (.P_OM) <0,16,0> = .ARG ;		! Insert word
;	2640	     P_OM = CH$PLUS (2, .P_OM) ;	! Update pointer.
;	2641	     RETURN (NIC$_SUCCESS) ;		! Take the error checking return
;	2642	     END				! only if necessary.
;	2643	ELSE 
;	2644	     RETRN (NIC$_PGM_ERR) ;
;	2645	END ;





; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 35-1
; Digital Equipment Corporation
;

					 0000 005BB 	    .ENTRY  INSW, Save nothing					      ; 2595
	   50	         5A	       02  C1 005BD 	    ADDL3   #2, P_OM, R0					      ; 2636
		    3C   A9	       50  D1 005C1 	    CMPL    R0, 60(MCB_PTR)					      ;
				       08  1A 005C5 	    BGTRU   1$							      ;
		         8A	  04   AC  B0 005C7 	    MOVW    ARG, (P_OM)+					      ; 2639
		         50	       01  D0 005CB 	    MOVL    #1, R0						      ; 2641
					   04 005CE 	    RET     							      ;
		         69	       0A  CE 005CF 1$:     MNEGL   #10, (MCB_PTR)					      ; 2644
		    04   B9	       00  FB 005D2 	    CALLS   #0, @4(MCB_PTR)					      ;
					   04 005D6 	    RET     							      ; 2595

; Routine Size:  28 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 36
; Digital Equipment Corporation
;
;	2646	GLOBAL ROUTINE  INSL (ARG) : LNKMSG =
;	2647	
;	2648	!++
;	2649	! FUNCTIONAL DESCRIPTION:
;	2650	!
;	2651	!	Insert a longword into the output message.
;	2652	!
;	2653	! FORMAL PARAMETERS:
;	2654	!
;	2655	!	ARG		- The value to be inserted.
;	2656	!
;	2657	! IMPLICIT INPUTS:
;	2658	!
;	2659	!	R9		- Contains the address of the MCB.
;	2660	!	R10		- Points to the first unused byte in the message
;	2661	!			  being constructed.
;	2662	! IMPLICIT OUTPUTS:
;	2663	!
;	2664	!	R10		- Updated to point to the byte following the 
;	2665	!			  last byte entered into the message.
;	2666	! ROUTINE VALUE:
;	2667	! COMPLETION CODES:
;	2668	!
;	2669	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	2670	!	R9 return :
;	2671	!		NIC$_PGM_ERR	if the output message buffer is too
;	2672	!				small to accept the longword.
;	2673	!		NIC$_SUCCESS	otherwise.
;	2674	! SIDE EFFECTS:
;	2675	!
;	2676	!	This routine exits through the exit routine referenced in the
;	2677	!	MCB pointed to by R9.  If an error is indicated in the 
;	2678	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	2679	!	is set, then control never returns to the calling routine --
;	2680	!	the stack is unwound to the main routine instead.
;	2681	!
;	2682	!--
;	2683	
;	2684	BEGIN
;	2685	EXTERNAL REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	2686	
;	2687	IF CHK_OMSG (4)				! Will longword fit into buffer
;	2688	THEN
;	2689	     BEGIN
;	2690	     .P_OM = .ARG ;			! XFER LONGWORD
;	2691	     P_OM = CH$PLUS (.P_OM, 4) ;	! UPDATE PARSE POINTER
;	2692	     RETURN (NIC$_SUCCESS) ;		! Take the error checking exit
;	2693	     END				! only if necessary.
;	2694	ELSE 
;	2695	     RETRN (NIC$_PGM_ERR) ;
;	2696	END ;





; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 36-1
; Digital Equipment Corporation
;

					 0000 005D7 	    .ENTRY  INSL, Save nothing					      ; 2646
	   50	         5A	       04  C1 005D9 	    ADDL3   #4, P_OM, R0					      ; 2687
		    3C   A9	       50  D1 005DD 	    CMPL    R0, 60(MCB_PTR)					      ;
				       08  1A 005E1 	    BGTRU   1$							      ;
		         8A	  04   AC  D0 005E3 	    MOVL    ARG, (P_OM)+					      ; 2690
		         50	       01  D0 005E7 	    MOVL    #1, R0						      ; 2692
					   04 005EA 	    RET     							      ;
		         69	       0A  CE 005EB 1$:     MNEGL   #10, (MCB_PTR)					      ; 2695
		    04   B9	       00  FB 005EE 	    CALLS   #0, @4(MCB_PTR)					      ;
					   04 005F2 	    RET     							      ; 2646

; Routine Size:  28 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 37
; Digital Equipment Corporation
;
;	2697	GLOBAL ROUTINE  INSSTR  (SRC_DDSC_AD)  : LNKMSG =
;	2698	
;	2699	!++
;	2700	! FUNCTIONAL DESCRIPTION:
;	2701	!
;	2702	!	Insert a string into the output message.
;	2703	!
;	2704	! FORMAL PARAMETERS:
;	2705	!
;	2706	!	SRC_DDSC_AD	- The address of the DDSC of the string to be
;	2707	!			  inserted.
;	2708	! IMPLICIT INPUTS:
;	2709	!
;	2710	!	R9		- Contains the address of the MCB.
;	2711	!	R10		- Points to the first unused byte in the message
;	2712	!			  being constructed.
;	2713	! IMPLICIT OUTPUTS:
;	2714	!
;	2715	!	R10		- Updated to point to the byte following the 
;	2716	!			  last byte entered into the message.
;	2717	! ROUTINE VALUE:
;	2718	! COMPLETION CODES:
;	2719	!
;	2720	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	2721	!	R9 return :
;	2722	!		NIC$_PGM_ERR	if the output message buffer is too
;	2723	!				small to accept the string.
;	2724	!		NIC$_SUCCESS	otherwise.
;	2725	! SIDE EFFECTS:
;	2726	!
;	2727	!	This routine exits through the exit routine referenced in the
;	2728	!	MCB pointed to by R9.  If an error is indicated in the 
;	2729	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	2730	!	is set, then control never returns to the calling routine --
;	2731	!	the stack is unwound to the main routine instead.
;	2732	!--
;	2733	
;	2734	BEGIN
;	2735	BIND	 DBLK = .SRC_DDSC_AD : DDSC ;
;	2736	EXTERNAL REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	2737	
;	2738	IF  CHK_OMSG (.DBLK [STR_LNG])		! Will string fit in buffer ?
;	2739	THEN
;	2740	    ! Insert string, advance output message pointer.
;	2741	
;	2742	    BEGIN
;	2743	    P_OM = CH$MOVE (.DBLK [STR_LNG],  CH$PTR(.DBLK[STR_PTR]),  .P_OM) ;
;	2744	    RETURN (NIC$_SUCCESS) ;
;	2745	    END ;
;	2746	
;	2747	RETRN (NIC$_PGM_ERR) ;			! Exit via error handler.
;	2748	END ;




; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 37-1
; Digital Equipment Corporation
;


					 003C 005F3 	    .ENTRY  INSSTR, Save R2,R3,R4,R5				      ; 2697
		         50	  04   AC  D0 005F5 	    MOVL    SRC_DDSC_AD, R0					      ; 2734
	   51	         5A	       60  C1 005F9 	    ADDL3   (R0), P_OM, R1					      ; 2738
		    3C   A9	       51  D1 005FD 	    CMPL    R1, 60(MCB_PTR)					      ;
				       0C  1A 00601 	    BGTRU   1$							      ;
	   6A	    04   B0	       60  28 00603 	    MOVC3   (R0), @4(R0), (P_OM)				      ; 2743
		         5A	       53  D0 00608 	    MOVL    R3, P_OM						      ;
		         50	       01  D0 0060B 	    MOVL    #1, R0						      ; 2744
					   04 0060E 	    RET     							      ;
		         69	       0A  CE 0060F 1$:     MNEGL   #10, (MCB_PTR)					      ; 2747
		    04   B9	       00  FB 00612 	    CALLS   #0, @4(MCB_PTR)					      ;
					   04 00616 	    RET     							      ; 2697

; Routine Size:  36 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 38
; Digital Equipment Corporation
;
;	2749	GLOBAL ROUTINE  INSFILL (TYPE, COUNT)  : LNKMSG =
;	2750	
;	2751	!++
;	2752	! FUNCTIONAL DESCRIPTION:
;	2753	!
;	2754	!	Insert a block of 1's and/or 0's into the output message.
;	2755	!
;	2756	! FORMAL PARAMETERS:
;	2757	!
;	2758	!	TYPE		- Code to specify the inserted data pattern
;	2759	!			  as follows :
;	2760	!
;	2761	!			  0  - all 0's
;	2762	!			  1  - all 1's
;	2763	!			  2  - a mixed pattern of 1's and 0's
;	2764	!
;	2765	!	COUNT		- Specifies the length, in bytes, of the pattern
;	2766	!			  to be inserted.
;	2767	! IMPLICIT INPUTS:
;	2768	!
;	2769	!	R9		- Contains the address of the MCB.
;	2770	!	R10		- Points to the first unused byte in the message
;	2771	!			  being constructed.
;	2772	! IMPLICIT OUTPUTS:
;	2773	!
;	2774	!	R10		- Updated to point to the byte following the 
;	2775	!			  last byte entered into the message.
;	2776	! ROUTINE VALUE:
;	2777	! COMPLETION CODES:
;	2778	!
;	2779	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	2780	!	R9 return :
;	2781	!		NIC$_PGM_ERR	if the output message buffer is too
;	2782	!				small to accept the pattern.
;	2783	!		NIC$_ILLPARVAL	if TYPE is other than 0,1, or 2.
;	2784	!		NIC$_SUCCESS	otherwise.
;	2785	! SIDE EFFECTS:
;	2786	!
;	2787	!	This routine exits through the exit routine referenced in the
;	2788	!	MCB pointed to by R9.  If an error is indicated in the 
;	2789	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	2790	!	is set, then control never returns to the calling routine --
;	2791	!	the stack is unwound to the main routine instead.
;	2792	!
;	2793	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 39
; Digital Equipment Corporation
;
;	2794	BEGIN
;	2795	LOCAL	 I ;
;	2796	EXTERNAL REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	2797	MACRO	 REPLY_CODE = MCB_PTR [MCB$L_REPLYCODE] % ;
;	2798	
;	2799	IF  NOT CHK_OMSG (.COUNT)			! Will pattern fit into
;	2800	THEN						! output buffer ?
;	2801	    REPLY_CODE = NIC$_PGM_ERR
;	2802	ELSE						! Yes
;	2803	    SELECT .TYPE OF
;	2804	       SET
;	2805	       [0] : P_OM = CH$FILL (0, .COUNT, .P_OM) ;	! Fill with 0's
;	2806	       [1] : P_OM = CH$FILL (-1, .COUNT, .P_OM) ;	! Fill with 1's
;	2807	       [2] : BEGIN
;	2808		     I = 15 ;				! 00001111 binary
;	2809		     INCR K FROM 1 TO .COUNT		! Fill msg with pattern
;	2810		     DO 
;	2811			BEGIN
;	2812			CH$WCHAR_A (.I, P_OM) ;		! one byte at a time.
;	2813			I = 2 * .I ;			! Rotate byte each time
;	2814			I<0,1,0> = .I<8,1,0> ;		! to scramble the mixed
;	2815			END ;				! pattern
;	2816		     END ;
;	2817	
;	2818	       [OTHERWISE] :	 			! Type code invalid
;	2819			REPLY_CODE = NIC$_ILLPARVAL ;
;	2820	       TES ;
;	2821	
;	2822	
;	2823	RETRN (.REPLY_CODE) ;				! Exit via error handler
;	2824							! to check for errors.
;	2825	END ;





					 00FC 00617 	    .ENTRY  INSFILL, Save R2,R3,R4,R5,R6,R7			      ; 2749
	   50	         5A	  08   AC  C1 00619 	    ADDL3   COUNT, P_OM, R0					      ; 2799
		    3C   A9	       50  D1 0061E 	    CMPL    R0, 60(MCB_PTR)					      ;
				       05  1B 00622 	    BLEQU   1$							      ;
		         69	       0A  CE 00624 	    MNEGL   #10, (MCB_PTR)					      ; 2801
				       50  11 00627 	    BRB     7$							      ; 2799
		         57	  04   AC  D0 00629 1$:     MOVL    TYPE, R7						      ; 2803
		         56	       01  D0 0062D 	    MOVL    #1, R6						      ;
				       57  D5 00630 	    TSTL    R7							      ;
				       0C  12 00632 	    BNEQ    2$							      ;
				       56  D4 00634 	    CLRL    R6							      ;
	   00	         6E	       00  2C 00636 	    MOVC5   #0, (SP), #0, COUNT, (P_OM)				      ; 2805
		         6A	  08   AC     0063A									      ;
		         5A	       53  D0 0063D 	    MOVL    R3, P_OM						      ;
		         01	       57  D1 00640 2$:     CMPL    R7, #1						      ; 2803
				       0D  12 00643 	    BNEQ    3$							      ;
				       56  D4 00645 	    CLRL    R6							      ;
      FF   8F	         6E	       00  2C 00647 	    MOVC5   #0, (SP), #-1, COUNT, (P_OM)			      ; 2806

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 39-1
; Digital Equipment Corporation
;
		         6A	  08   AC     0064C									      ;
		         5A	       53  D0 0064F 	    MOVL    R3, P_OM						      ;
		         02	       57  D1 00652 3$:     CMPL    R7, #2						      ; 2803
				       1C  12 00655 	    BNEQ    6$							      ;
				       56  D4 00657 	    CLRL    R6							      ;
		         50	       0F  7D 00659 	    MOVQ    #15, I						      ; 2808
				       10  11 0065C 	    BRB     5$							      ; 2809
		         8A	       50  90 0065E 4$:     MOVB    I, (P_OM)+						      ; 2812
		         50	       02  C4 00661 	    MULL2   #2, I						      ; 2813
	   50	         01	       08  EF 00664 	    EXTZV   #8, #1, I, R2					      ; 2814
				       52     00668									      ;
	   01	         00	       52  F0 00669 	    INSV    R2, #0, #1, I					      ;
				       50     0066D									      ;
	   EB	         51	  08   AC  F3 0066E 5$:     AOBLEQ  COUNT, K, 4$					      ; 2809
		         03	       56  E9 00673 6$:     BLBC    R6, 7$						      ; 2803
		         69	       20  CE 00676 	    MNEGL   #32, (MCB_PTR)					      ; 2819
		    04   B9	       00  FB 00679 7$:     CALLS   #0, @4(MCB_PTR)					      ; 2823
					   04 0067D 	    RET     							      ; 2749

; Routine Size:  103 bytes


;	2826	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 40
; Digital Equipment Corporation
;
;	2827	GLOBAL ROUTINE INS_REST : LNKMSG =
;	2828	
;	2829	!++
;	2830	! FUNCTIONAL DESCRIPTION:
;	2831	!
;	2832	!	Transfer the remainder of the input message to the output
;	2833	!	message.  If it will not fit then an error condition is flagged,
;	2834	!	and the error handler is called.
;	2835	!
;	2836	! FORMAL PARAMETERS:
;	2837	!
;	2838	!	NONE
;	2839	!
;	2840	! IMPLICIT INPUTS:
;	2841	!
;	2842	!	R9		- Contains the address of the MCB.
;	2843	!	R10		- Points to the first unused byte in the message
;	2844	!			  being constructed.
;	2845	!	R11		- Points to the next field of the message to be
;	2846	!			  read.
;	2847	!
;	2848	! IMPLICIT OUTPUTS:
;	2849	!
;	2850	!	R10		- Updated to point to the byte following the 
;	2851	!			  last byte entered into the message.
;	2852	!	R11		- Updated to point to the first byte immediately
;	2853	!			  following the input message.
;	2854	!
;	2855	! ROUTINE VALUE:
;	2856	! COMPLETION CODES:
;	2857	!
;	2858	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	2859	!	R9 return :
;	2860	!		NIC$_PGM_ERR	if the output message buffer is too
;	2861	!				small too accept the remainder of the
;	2862	!				input message.
;	2863	!		NIC$_SUCCESS	otherwise.
;	2864	!
;	2865	! SIDE EFFECTS:
;	2866	!
;	2867	!	This routine exits through the exit routine referenced in the
;	2868	!	MCB pointed to by R9.  If an error is indicated in the 
;	2869	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	2870	!	is set, then control never returns to the calling routine --
;	2871	!	the stack is unwound to the main routine instead.
;	2872	!
;	2873	!--
;	2874	
;	2875	BEGIN
;	2876	LOCAL	 CHARS ;
;	2877	EXTERNAL REGISTER  P_IM = 11, P_OM = 10, MCB_PTR = 9 : REF MCB ;
;	2878	MACRO	 REPLY_CODE = MCB_PTR [MCB$L_REPLYCODE]	%,
;	2879		 IMSG_BOUND = MCB_PTR [MCB$A_IMSGBOUND]  % ;
;	2880	
;	2881	IF  CHK_OMSG (CHARS=CH$DIFF(.IMSG_BOUND,.P_IM))	! Will chars fit ?

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 40-1
; Digital Equipment Corporation
;
;	2882	THEN
;	2883	    BEGIN
;	2884	    P_OM = CH$MOVE (.CHARS,.P_IM,.P_OM) ; 	! Yes,  move chars and
;	2885							! update output msg ptr
;	2886	    P_IM = CH$PTR(.IMSG_BOUND) ;	 	! Update input msg ptr
;	2887	    END
;	2888	ELSE
;	2889	    REPLY_CODE = NIC$_PGM_ERR ;			! No, error exists.
;	2890	
;	2891	RETRN (.REPLY_CODE) ;
;	2892	
;	2893	END ;





					 003C 0067E 	    .ENTRY  INS_REST, Save R2,R3,R4,R5				      ; 2827
	   51	    38   A9	       5B  C3 00680 	    SUBL3   P_IM, 56(MCB_PTR), CHARS				      ; 2881
	   50	         5A	       51  C1 00685 	    ADDL3   CHARS, P_OM, R0					      ;
		    3C   A9	       50  D1 00689 	    CMPL    R0, 60(MCB_PTR)					      ;
				       0D  1A 0068D 	    BGTRU   1$							      ;
	   6A	         6B	       51  28 0068F 	    MOVC3   CHARS, (P_IM), (P_OM)				      ; 2884
		         5A	       53  D0 00693 	    MOVL    R3, P_OM						      ;
		         5B	  38   A9  D0 00696 	    MOVL    56(MCB_PTR), P_IM					      ; 2886
				       03  11 0069A 	    BRB     2$							      ; 2881
		         69	       0A  CE 0069C 1$:     MNEGL   #10, (MCB_PTR)					      ; 2889
		    04   B9	       00  FB 0069F 2$:     CALLS   #0, @4(MCB_PTR)					      ; 2891
					   04 006A3 	    RET     							      ; 2827

; Routine Size:  38 bytes


;	2894	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 41
; Digital Equipment Corporation
;
;	2895	GLOBAL ROUTINE  INSLN  (SRC_DDSC_AD) : LNKMSG =
;	2896	
;	2897	!++
;	2898	! FUNCTIONAL DESCRIPTION:
;	2899	!
;	2900	!	The ascii linename found in the buffer described by .SRC_DDSC_AD
;	2901	!	appended to the output message being constructed.  The linename
;	2902	!	is inserted into the output message in standard NICE type 1
;	2903	!	format (device type,controller number,line number, multidrop
;	2904	!	address).  If it will not fit then an error condition is 
;	2905	!	flagged, and the error handler is called.
;	2906	!
;	2907	! FORMAL PARAMETERS:
;	2908	!
;	2909	!	SRC_DDSC_AD   -	The address of the double descriptor of the 
;	2910	!			input linename.  This name is assumed to be of
;	2911	!			the form XMA0.
;	2912	!
;	2913	! IMPLICIT INPUTS:
;	2914	!
;	2915	!	R9		- Contains the address of the MCB.
;	2916	!	R10		- Points to the first unused byte in the message
;	2917	!			  being constructed.
;	2918	!
;	2919	! IMPLICIT OUTPUTS:
;	2920	!
;	2921	!	R10		- Updated to point to the byte following the 
;	2922	!			  last byte entered into the message.
;	2923	!	The contents of the MCB pointed to by R9.
;	2924	!
;	2925	! ROUTINE VALUE:
;	2926	! COMPLETION CODES:
;	2927	!
;	2928	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	2929	!	R9 return :
;	2930	!		One of the error codes returned by routine CVTLN (found
;	2931	!		in this module).
;	2932	!		NIC$_PGM_ERR	if the input linename is not the correct
;	2933	!				length.
;	2934	!		NIC$_SUCCESS	otherwise.
;	2935	!
;	2936	! SIDE EFFECTS:
;	2937	!
;	2938	!	This routine exits through the exit routine referenced in the
;	2939	!	MCB pointed to by R9.  If an error is indicated in the 
;	2940	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	2941	!	is set, then control never returns to the calling routine --
;	2942	!	the stack is unwound to the main routine instead.
;	2943	!
;	2944	!--
;	2945	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 42
; Digital Equipment Corporation
;
;	2946	BEGIN
;	2947	EXTERNAL REGISTER  P_IM=11, P_OM=10, MCB_PTR=9 : REF MCB ;
;	2948	MACRO	 REPLY_CODE = MCB_PTR [MCB$L_REPLYCODE] % ;
;	2949	BIND	 SRC_DDSC = .SRC_DDSC_AD : DDSC ;
;	2950	
;	2951	LOCAL	TMP_DDSC : DDSC,
;	2952		TMP_BF	 : VECTOR [4,BYTE] ;
;	2953	
;	2954	TMP_DDSC [BUF_PTR] = TMP_BF ;	! INITIALIZE THE DESCRIPTOR
;	2955	TMP_DDSC [STR_PTR] = TMP_BF ;
;	2956	TMP_DDSC [BUF_LNG] = 4 ;
;	2957	TMP_DDSC [STR_PTR] = 0 ;
;	2958	
;	2959	
;	2960	! Check that the line name to be converted is the correct size
;	2961	! before converting and inserting it.
;	2962	
;	2963	IF  .SRC_DDSC [STR_LNG] EQL LN_NAME_SIZE	
;	2964	THEN
;	2965	    BEGIN
;	2966	
;	2967	    ! The following routines they also check for potential error
;	2968	    ! conditions, such as input or ouput message pointers
;	2969	    ! exceeding their respective boudaries, and set
;	2970	    ! 'reply_code' accordingly.
;	2971	
;	2972	    LOCAL  TMP ;
;	2973	
;	2974	    TMP = .MCB_PTR [MCB$B_ERROR_ON] ;	! Disable error handler
;	2975	    MCB_PTR [MCB$B_ERROR_ON] = FALSE ;
;	2976	
;	2977	    IF
;	2978	     CVTLN (TO_NICE_FMT,		! Convert the line name to
;	2979		   .SRC_DDSC [STR_PTR],		! 'NICE' format type 1
;	2980		   TMP_DDSC)
;	2981	    THEN IF INSB (1)			! Insert the format type
;	2982		 THEN  INSSTR (TMP_DDSC) ;	! Insert the line name
;	2983	    
;	2984	    MCB_PTR [MCB$B_ERROR_ON] = .TMP ;
;	2985	
;	2986	    END
;	2987	ELSE
;	2988	    REPLY_CODE = NIC$_PGM_ERR ;
;	2989	
;	2990	RETRN (.REPLY_CODE) ;
;	2991	END ;





					 0004 006A4 	    .ENTRY  INSLN, Save R2					      ; 2895
		         5E	       14  C2 006A6 	    SUBL2   #20, SP						      ;
		         50	  04   AC  D0 006A9 	    MOVL    SRC_DDSC_AD, R0					      ; 2946
		    10   AE	       6E  9E 006AD 	    MOVAB   TMP_BF, TMP_DDSC+12					      ; 2954

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 42-1
; Digital Equipment Corporation
;
		    08   AE	       6E  9E 006B1 	    MOVAB   TMP_BF, TMP_DDSC+4					      ; 2955
		    0C   AE	       04  D0 006B5 	    MOVL    #4, TMP_DDSC+8					      ; 2956
				  08   AE  D4 006B9 	    CLRL    TMP_DDSC+4						      ; 2957
		         04	       60  D1 006BC 	    CMPL    (R0), #4						      ; 2963
				       2F  12 006BF 	    BNEQ    2$							      ;
		         52	  41   A9  9A 006C1 	    MOVZBL  65(MCB_PTR), TMP					      ; 2974
				  41   A9  94 006C5 	    CLRB    65(MCB_PTR)						      ; 2975
				  04   AE  9F 006C8 	    PUSHAB  TMP_DDSC						      ; 2978
				  04   A0  DD 006CB 	    PUSHL   4(R0)						      ;
				       02  DD 006CE 	    PUSHL   #2							      ;
		  F931   CF	       03  FB 006D0 	    CALLS   #3, CVTLN						      ;
		         12	       50  E9 006D5 	    BLBC    R0, 1$						      ;
				       01  DD 006D8 	    PUSHL   #1							      ; 2981
		  FEC0   CF	       01  FB 006DA 	    CALLS   #1, INSB						      ;
		         08	       50  E9 006DF 	    BLBC    R0, 1$						      ;
				  04   AE  9F 006E2 	    PUSHAB  TMP_DDSC						      ; 2982
		  FF09   CF	       01  FB 006E5 	    CALLS   #1, INSSTR						      ;
		    41   A9	       52  90 006EA 1$:     MOVB    TMP, 65(MCB_PTR)					      ; 2984
				       03  11 006EE 	    BRB     3$							      ; 2963
		         69	       0A  CE 006F0 2$:     MNEGL   #10, (MCB_PTR)					      ; 2988
		    04   B9	       00  FB 006F3 3$:     CALLS   #0, @4(MCB_PTR)					      ; 2990
					   04 006F7 	    RET     							      ; 2895

; Routine Size:  84 bytes


;	2992	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 43
; Digital Equipment Corporation
;
;	2993	GLOBAL ROUTINE  INS_CTRS (CLASS, CTR_DDSC_AD) : LNKMSG =
;	2994	
;	2995	!++
;	2996	! FUNCTIONAL DESCRIPTION:
;	2997	!
;	2998	!	A 'NICE' counter block is appended to the output message under
;	2999	!	construction.  This counter block consists of a byte of counter
;	3000	!	type followed by a word of count for each counter in the block.
;	3001	!
;	3002	! FORMAL PARAMETERS:
;	3003	!
;	3004	!	CLASS		- The type counter block to be insert :
;	3005	!			  LINE_CTRS	- line counter block
;	3006	!			  NODE_CTRS	- node counter block
;	3007	!	CTR_DDSC_AD	- The address of the double descriptor of the
;	3008	!			  buffer containing the input counters, which
;	3009	!			  are given as a vector of words.
;	3010	!
;	3011	! IMPLICIT INPUTS:
;	3012	!
;	3013	!	R9		- Contains the address of the MCB.
;	3014	!	R10		- Points to the first unused byte in the message
;	3015	!			  being constructed.
;	3016	!
;	3017	! IMPLICIT OUTPUTS:
;	3018	!
;	3019	!	R10		- Updated to point to the byte following the 
;	3020	!			  last byte entered into the message.
;	3021	!	The contents of the MCB pointed to by R9.
;	3022	!
;	3023	! ROUTINE VALUE:
;	3024	! COMPLETION CODES:
;	3025	!
;	3026	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	3027	!	R9 return :
;	3028	!		NIC$_PGM_ERR	if the value of CLASS is illegal or if
;	3029	!				there is not enough room in the output
;	3030	!				message buffer to accomadate the counter
;	3031	!				block.
;	3032	!		NIC$_SUCCESS	otherwise.
;	3033	!
;	3034	! SIDE EFFECTS:
;	3035	!
;	3036	!	This routine exits through the exit routine referenced in the
;	3037	!	MCB pointed to by R9.  If an error is indicated in the 
;	3038	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	3039	!	is set, then control never returns to the calling routine --
;	3040	!	the stack is unwound to the main routine instead.
;	3041	!
;	3042	!--
;	3043	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 44
; Digital Equipment Corporation
;
;	3044	BEGIN
;	3045	BIND	 DBLK = .CTR_DDSC_AD : DDSC ;
;	3046	EXTERNAL REGISTER  P_IM=11, P_OM=10, MCB_PTR=9 : REF MCB ;
;	3047	MACRO	 REPLY_CODE = MCB_PTR [MCB$L_REPLYCODE] % ;
;	3048	LABEL	 DELTA ;
;	3049	
;	3050	DELTA :	BEGIN
;	3051		LOCAL	I,J,N,				! Temporaries
;	3052			WVEC : VECTOR [8,WORD] ;	! Holds xformed
;	3053							! line counters
;	3054		SELECTONE .CLASS OF
;	3055		   SET
;	3056	
;	3057		   [NODE_CTRS] : ! Node counters -- no xformation needed
;	3058			BEGIN
;	3059			J = CH$PTR (.DBLK [STR_PTR]) ;	! Ptr to counters
;	3060			N = 13 ;			! No. of counters
;	3061			I = CH$PTR			! Node counter type codes
;	3062			     (UPLIT BYTE (0,1,2,4,8,9,10,
;	3063					 11,12,13,14,17,18)
;	3064			      ) ;
;	3065			END ;
;	3066	
;	3067		   [LINE_CTRS] : ! Line counters - xformation needed
;	3068			BEGIN
;	3069			BIND  CVEC = .DBLK [STR_PTR] : VECTOR [11, WORD] ;
;	3070			WVEC [0] = .CVEC [0] ;
;	3071			WVEC [1] = .CVEC [2] + .CVEC [3] ;
;	3072			WVEC [2] = .CVEC [5] + .CVEC [6] ;
;	3073			WVEC [3] = .CVEC [1] + .CVEC [8] ;
;	3074			WVEC [4] = .CVEC [7] ;
;	3075			WVEC [5] = .CVEC [4] ;
;	3076			WVEC [6] = .CVEC [9] ;
;	3077			WVEC [7] = .CVEC [10] ;
;	3078	
;	3079			J = CH$PTR (WVEC) ;		! Ptr to counter list
;	3080			N = 8 ;				! No. of counters
;	3081			I = CH$PTR			! Ptr to type codes for
;	3082							! lines
;	3083			     (UPLIT BYTE (0,3,4,5,6,8,1,2)) ;
;	3084			END ;
;	3085	
;	3086		   [OTHERWISE] : ! Illegal counter class
;	3087	
;	3088			LEAVE DELTA WITH REPLY_CODE = NIC$_PGM_ERR ;
;	3089	
;	3090		   TES ;
;	3091	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 45
; Digital Equipment Corporation
;
;	3092		  ! Only insert the counter block if sufficient room
;	3093		  ! exists in the output buffer.
;	3094	
;	3095		IF  CHK_OMSG (.N * 3)
;	3096		THEN
;	3097		    INCR L FROM 1 TO .N	 
;	3098		    DO  BEGIN
;	3099	
;	3100			! First insert the counter type code in ex-2 format
;	3101			! taking advantage of the fact that they're all bytes
;	3102	
;	3103			CH$WCHAR_A (CH$RCHAR_A (I), P_OM) ;
;	3104	
;	3105			! Next insert the two bytes of counter value
;	3106	
;	3107			CH$WCHAR_A (CH$RCHAR_A (J), P_OM) ;
;	3108			CH$WCHAR_A (CH$RCHAR_A (J), P_OM) ;
;	3109	
;	3110		        END
;	3111		ELSE
;	3112		    REPLY_CODE = NIC$_PGM_ERR ;
;	3113	
;	3114		END ;
;	3115	
;	3116	RETRN (.REPLY_CODE) ;
;	3117	END ;



							    .PSECT  $PLIT$,NOWRT,NOEXE,2

					      0000C P.AAB:  .BYTE   0, 1, 2, 4, 8, 9, 10, 11, 12, 13, 14, 17, 18	      ;
					      00019	    .BLKB   3
					      0001C P.AAC:  .BYTE   0, 3, 4, 5, 6, 8, 1, 2				      ;



							    .PSECT  $CODE$,NOWRT,2

					 001C 006F8 	    .ENTRY  INS_CTRS, Save R2,R3,R4				      ; 2993
		         5E	       10  C2 006FA 	    SUBL2   #16, SP						      ;
		         50	  08   AC  D0 006FD 	    MOVL    CTR_DDSC_AD, R0					      ; 3044
		         51	  04   AC  D0 00701 	    MOVL    CLASS, R1						      ; 3054
				       0E  12 00705 	    BNEQ    1$							      ;
		         52	  04   A0  D0 00707 	    MOVL    4(R0), J						      ; 3059
		         53	       0D  D0 0070B 	    MOVL    #13, N						      ; 3060
		         54	0000'  CF  9E 0070E 	    MOVAB   P.AAB, I						      ; 3064
				       3B  11 00713 	    BRB     2$							      ; 3054
		         01	       51  D1 00715 1$:     CMPL    R1, #1						      ;
				       53  12 00718 	    BNEQ    5$							      ;
		         50	  04   A0  D0 0071A 	    MOVL    4(R0), R0						      ; 3068
		         6E	       60  B0 0071E 	    MOVW    (R0), WVEC						      ; 3070
      02   AE	    04   A0	  06   A0  A1 00721 	    ADDW3   6(R0), 4(R0), WVEC+2				      ; 3071
      04   AE	    0A   A0	  0C   A0  A1 00728 	    ADDW3   12(R0), 10(R0), WVEC+4				      ; 3072
      06   AE	    02   A0	  10   A0  A1 0072F 	    ADDW3   16(R0), 2(R0), WVEC+6				      ; 3073

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 45-1
; Digital Equipment Corporation
;
		    08   AE	  0E   A0  B0 00736 	    MOVW    14(R0), WVEC+8					      ; 3074
		    0A   AE	  08   A0  B0 0073B 	    MOVW    8(R0), WVEC+10					      ; 3075
		    0C   AE	  12   A0  D0 00740 	    MOVL    18(R0), WVEC+12					      ; 3076
		         52	       6E  9E 00745 	    MOVAB   WVEC, J						      ; 3079
		         53	       08  D0 00748 	    MOVL    #8, N						      ; 3080
		         54	0000'  CF  9E 0074B 	    MOVAB   P.AAC, I						      ; 3083
	   50	         53	       03  C5 00750 2$:     MULL3   #3, N, R0						      ; 3095
		         50	       5A  C0 00754 	    ADDL2   P_OM, R0						      ;
		    3C   A9	       50  D1 00757 	    CMPL    R0, 60(MCB_PTR)					      ;
				       10  1A 0075B 	    BGTRU   5$							      ;
				       50  D4 0075D 	    CLRL    L							      ; 3097
				       06  11 0075F 	    BRB     4$							      ;
		         8A	       84  90 00761 3$:     MOVB    (I)+, (P_OM)+					      ; 3103
		         8A	       82  B0 00764 	    MOVW    (J)+, (P_OM)+					      ; 3107
	   F6	         50	       53  F3 00767 4$:     AOBLEQ  N, L, 3$						      ; 3097
				       03  11 0076B 	    BRB     6$							      ; 3095
		         69	       0A  CE 0076D 5$:     MNEGL   #10, (MCB_PTR)					      ; 3112
		    04   B9	       00  FB 00770 6$:     CALLS   #0, @4(MCB_PTR)					      ; 3116
					   04 00774 	    RET     							      ; 2993

; Routine Size:  125 bytes


;	3118	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 46
; Digital Equipment Corporation
;
;	3119	GLOBAL  ROUTINE  MESSAGE (FCT, PARAMETER_AD) : LNKMSG =
;	3120	
;	3121	!++
;	3122	! FUNCTIONAL DESCRIPTION:
;	3123	!
;	3124	!	This routine provides the primary message interface to the 
;	3125	!	command node.  It establishes a channel to the NETACP for
;	3126	!	control QIOs; does the connect confirm to the commands node's
;	3127	!	logical link; and performs operations on input and ouput 
;	3128	!	messages such as send, receive, open, and close.
;	3129	!
;	3130	! FORMAL PARAMETERS:
;	3131	!
;	3132	!	FCT		- A code to indicate the desired operation as
;	3133	!			  follows (definitions are found in module
;	3134	!			  NICDEF) :
;	3135	!
;	3136	!		INITIALIZE	- A channel is created to the NETACP for
;	3137	!				  control QIOs, a channel (logical link)
;	3138	!				  is created to the command node, and
;	3139	!				  the address of the routine named by
;	3140	!				  the .PARAMETER_AD is stored in the MCB
;	3141	!				  in field MCB$A_EXIT_RT (if it is zero
;	3142	!				  then routine NULL_ROUTINE (found in 
;	3143	!				  this module) is used).
;	3144	!		RCV_I		- The same as RCV_CLOSED followed by
;	3145	!				  OPEN_I.
;	3146	!		RCV_CLOSED	- A new message is read from the command
;	3147	!				  node.  The address of the DDSC of the 
;	3148	!				  buffer to receive the message is given
;	3149	!				  by .PARAMETER_AD
;	3150	!		OPEN_I		- Open the input message whose DDSC is 
;	3151	!				  given by .PARAMETER_AD for parsing.
;	3152	!				  The begining of the message is located
;	3153	!				  by the string descriptor portion of 
;	3154	!				  the DDSC.
;	3155	!		CLOSE_I		- Close the currently open input message
;	3156	!				  by updating the string descriptor to
;	3157	!				  describe only the tail end of the 
;	3158	!				  message not yet parsed.
;	3159	!		CHECK_I		_ The same as CLOSE_I followed by a
;	3160	!				  check to see if the remainder of the
;	3161	!				  message not yet parsed has zero length
;	3162	!				  (an error condition is flagged in
;	3163	!				   field MCB$L_REPLYCODE of the MCB if
;	3164	!				   it is non-zero).
;	3165	!		OPEN_O		- Open the buffer whose DDSC address is
;	3166	!				  given by .PARAMETER_AD so that an
;	3167	!				  output message can be constructed
;	3168	!				  within it.  The string descriptor is
;	3169	!				  first initiallized so that information
;	3170	!				  will be inserted into the buffer
;	3171	!				  begining at the first byte of the
;	3172	!				  buffer.
;	3173	!		APPEND_O	- The same as OPEN_O except that the 

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 46-1
; Digital Equipment Corporation
;
;	3174	!				  string descriptor is not initiallized,
;	3175	!				  and new fields will be appended to the
;	3176	!				  end of the string which resides in the
;	3177	!			 	  buffer.
;	3178	!		CLOSE_O		- Close the currently opened output
;	3179	!				  message by updating the its DDSC's
;	3180	!				  string descriptor component.
;	3181	!		SEND_O		- Close the currently opened output
;	3182	!				  message and send it to the command
;	3183	!				  node.
;	3184	!		SEND_DDSC	- Send the message, whose DDSC is given
;	3185	!				  by .PARAMETER_AD, to the command node.
;	3186	!		SEND_REPLY	- Construct a one byte message from the
;	3187	!				  the value found in MCB$L_REPLYCODE of
;	3188	!				  the MCB pointed to by R9, and send it
;	3189	!				  to the commmand node.  If the low bit
;	3190	!				  of this value is set, then it is
;	3191	!				  doubled before it is sent (all error
;	3192	!				  reply codes are stored internally as
;	3193	!				  double their NICE protocol value so
;	3194	!				  that their low bit could be used for
;	3195	!				  true/false testing throughout the
;	3196	!				  NICE program).
;	3197	!		CLEAR_ALL	- The MCB$A_OMSGBOUND and MCB$A_IMSGBOUND
;	3198	!				  fields of the MCB pointed to by R9 are
;	3199	!				  zeroed to indicate that no input or
;	3200	!				  ouput messages are currently open.
;	3201	!
;	3202	!	PARAMETER_AD	- The address of a parameter whose semantics 
;	3203	!			  depend on the value of FCT.
;	3204	! IMPLICIT INPUTS:
;	3205	!
;	3206	!	R9		- Contains the address of the MCB.
;	3207	!	R10		- Points to the first unused byte in the message
;	3208	!			  being constructed, if one is open.
;	3209	!	R11		- Points to the first byte of the input message
;	3210	!			  not yet parsed, if an input message is open.
;	3211	!
;	3212	! IMPLICIT OUTPUTS:
;	3213	!
;	3214	!	Same as the implicit inputs.  The contents of the MCB pointed
;	3215	!	to by R9 may be modified.
;	3216	!
;	3217	! ROUTINE VALUE:
;	3218	! COMPLETION CODES:
;	3219	!
;	3220	!	Both R0 and the MCB$L_REPLYCODE field of the MCB pointed to by
;	3221	!	R9 return one of the standard internal (i.e., all error statuses
;	3222	!	have been doubled so that their low bit is clear) NICE status
;	3223	!	codes.
;	3224	!
;	3225	! SIDE EFFECTS:
;	3226	!
;	3227	!	This routine exits through the exit routine referenced in the
;	3228	!	MCB pointed to by R9.  If an error is indicated in the 

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 46-2
; Digital Equipment Corporation
;
;	3229	!	MCB$L_REPLYCODE field, and the MCB$B_ERROR_ON field's low bit
;	3230	!	is set, then control never returns to the calling routine --
;	3231	!	the stack is unwound to the main routine instead.
;	3232	!
;	3233	!--
;	3234	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 47
; Digital Equipment Corporation
;
;	3235	BEGIN
;	3236	EXTERNAL REGISTER  P_IM=11, P_OM=10, MCB_PTR=9 : REF MCB ;
;	3237	
;	3238	BIND	OMSG_DDSC = .MCB_PTR [MCB$A_OMSG_DDSC] : DDSC,
;	3239		IMSG_DDSC = .MCB_PTR [MCB$A_IMSG_DDSC] : DDSC,
;	3240	
;	3241		MSG_ISB = MCB_PTR [MCB$Z_MSG_ISB] : IO_SB,
;	3242		MSG_OSB = MCB_PTR [MCB$Z_MSG_OSB] : IO_SB ;
;	3243	
;	3244	
;	3245	MACRO
;	3246		IMSG_BOUND = MCB_PTR [MCB$A_IMSGBOUND] %,
;	3247		OMSG_BOUND = MCB_PTR [MCB$A_OMSGBOUND] %,
;	3248	
;	3249		MSG_STAT = MCB_PTR [MCB$W_MSG_STAT] %,
;	3250		MSG_CHAN = MCB_PTR [MCB$W_MSG_CHAN] %,
;	3251		ACP_CHAN = MCB_PTR [MCB$W_ACP_CHAN] %,
;	3252	
;	3253		REPLY_CODE = MCB_PTR [MCB$L_REPLYCODE] % ;
;	3254	
;	3255	BIND	MSG_DDSC =	.PARAMETER_AD	: DDSC ;
;	3256	
;	3257	OWN	CTL_VEC ;
;	3258	LOCAL	TMP ;
;	3259	
;	3260	MSG_STAT = TRUE ;
;	3261	
;	3262	CTL_VEC = CH$PTR (CASE  .FCT  FROM 0 TO MAX_MSGFCT  OF
;	3263			   SET
;	3264			   [INITIALIZE] :   UPLIT BYTE (18,0) ;
;	3265			   [RCV_I] :	    UPLIT BYTE (1,2,3,0) ;
;	3266			   [RCV_CLOSED] :   UPLIT BYTE (1,2,0) ;
;	3267			   [OPEN_I] :	    UPLIT BYTE (1,3,0) ;
;	3268			   [CLOSE_I] :	    UPLIT BYTE (4,5,0) ;
;	3269			   [CHECK_I] :	    UPLIT BYTE (4,5,6,0) ;
;	3270			   [OPEN_O] :	    UPLIT BYTE (7,8,9,0) ;
;	3271			   [APPEND_O] :	    UPLIT BYTE (7,9,0) ;
;	3272			   [CLOSE_O] :	    UPLIT BYTE (10,11,0) ;
;	3273			   [SEND_O] :	    UPLIT BYTE (10,11,12,14,0) ;
;	3274			   [SEND_DDSC] :    UPLIT BYTE (17,14,0) ;
;	3275			   [SEND_REPLY] :   UPLIT BYTE (13,14,0) ;
;	3276			   [CLEAR_ALL] :    UPLIT BYTE (15,0) ;
;	3277			   [OUTRANGE] :     UPLIT BYTE (16,0) ;
;	3278			   TES 
;	3279			 ) ;
;	3280	
;	3281	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 48
; Digital Equipment Corporation
;
;	3282	WHILE .MSG_STAT
;	3283	DO
;	3284	  CASE CH$RCHAR_A (CTL_VEC)  FROM 0 TO 18  OF
;	3285	   SET
;	3286	   [0] :	EXITLOOP ;
;	3287	
;	3288	   [1] :
;	3289		! VERIFY THAT NO INPUT MESSAGE IS CURRENTLY OPEN
;	3290		!
;	3291		IF .IMSG_BOUND NEQ 0 
;	3292		THEN
;	3293		    BEGIN
;	3294		    REPLY_CODE = NIC$_PGM_ERR ;
;	3295		    MSG_STAT   = MSG$_ILL_FCTSEQ ;
;	3296		    END ;
;	3297	
;	3298	
;	3299	
;	3300	   [2] :
;	3301		! READ A NEW MESSAGE INTO THE SPECIFIED INPUT BUFFER
;	3302		! REPLACING ANY MESSAGE WHICH MAY HAVE ALREADY BEEN
;	3303		! THERE.  MODIFY THE STRING DESCRIPTOR PORTION OF THE
;	3304		! DDSC TO REFLECT THE NEW MESSAGE.
;	3305		!
;	3306		IF (TMP =
;	3307		    $QIOW (FUNC = IO$_READVBLK,
;     P 3308			   CHAN = .MSG_CHAN,
;     P 3309			   IOSB = MSG_ISB,
;     P 3310			   P1   = .MSG_DDSC [BUF_PTR],
;     P 3311			   P2   = .MSG_DDSC [BUF_LNG]
;     P 3312			  )
;	3313		    )
;	3314		THEN
;	3315		    IF .MSG_ISB [IO_STAT]
;	3316		    THEN
;	3317			BEGIN
;	3318			MSG_DDSC [STR_PTR] = .MSG_DDSC [BUF_PTR] ;
;	3319			MSG_DDSC [STR_LNG] = .MSG_ISB [IO_CNT] ;
;	3320			MCB_PTR [MCB$W_RECEIVES] =
;	3321						.MCB_PTR [MCB$W_RECEIVES] + 1 ;
;	3322			END
;	3323	
;	3324		    ELSE
;	3325			BEGIN
;	3326			REPLY_CODE = NIC$_NETCOMERR ;
;	3327			MSG_STAT   = MSG$_RCV_ERR ;
;	3328			END
;	3329		ELSE
;	3330		    BEGIN
;	3331		    MSG_ISB [IO_STAT] = .TMP ;
;	3332		    MSG_STAT   = MSG$_RCV_ERR ;
;	3333		    REPLY_CODE = NIC$_RESRCERR ;
;	3334		    END ;

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 49
; Digital Equipment Corporation
;
;	3335	   [3] :
;	3336		! OPEN THE SPECIFIED INPUT MESSAGE FOR PARSING.  USE THE
;	3337		! STRING DESCRIPTOR PORTION OF THE DDSC TO DETERMINE THE
;	3338		! BEGINING AND LENGTH OF THE MESSAGE.
;	3339		!
;	3340		BEGIN
;	3341		P_IM = .MSG_DDSC [STR_PTR] ;
;	3342		IMSG_BOUND = .P_IM
;	3343				+ .MSG_DDSC [STR_LNG] ;
;	3344		MCB_PTR [MCB$A_IMSG_DDSC] = .PARAMETER_AD ;
;	3345		END ;
;	3346	
;	3347	
;	3348	
;	3349	   [4] :
;	3350		! VERIFY THAT AN INPUT MESSAGE IS CURRENTLY OPEN.
;	3351		!
;	3352		IF .IMSG_BOUND EQL 0
;	3353		THEN 
;	3354		    BEGIN
;	3355		    REPLY_CODE = NIC$_PGM_ERR ;
;	3356		    MSG_STAT   = MSG$_NOTOPEN ;
;	3357		    END ;
;	3358	
;	3359	   [5] :
;	3360		! CLOSE THE CURRENT INPUT MESSAGE.  MODIFY THE STRING
;	3361		! DESCRIPTOR PORTION OF THE DDSC TO REFLECT THE PORTION
;	3362		! OF THE MESSAGE NOT YET PARSED.
;	3363		!
;	3364		BEGIN
;	3365		IMSG_DDSC [STR_PTR] = .P_IM ;
;	3366		IMSG_DDSC [STR_LNG] = .IMSG_BOUND - .P_IM ;
;	3367		IMSG_BOUND = 0 ;
;	3368		END ;
;	3369	
;	3370	   [6] :
;	3371		! VERIFY THAT THE INPUT MESSAGE MOST RECENTLY CLOSED
;	3372		! HAS BEEN PARSED TO THE VERY END OF THE MESSAGE.
;	3373		!
;	3374		IF .IMSG_DDSC [STR_LNG] NEQ 0 
;	3375		THEN 
;	3376		    BEGIN
;	3377		    REPLY_CODE = NIC$_ILLMSGFMT ;
;	3378		    MSG_STAT   = MSG$_NOTALIGNED ;
;	3379		    END ;
;	3380	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 50
; Digital Equipment Corporation
;
;	3381	   [7] :
;	3382		! VERIFY THAT NO OUTPUT MESSAGE IS CURRENTLY OPEN.
;	3383		!
;	3384		IF .OMSG_BOUND NEQ 0
;	3385		THEN 
;	3386		    BEGIN
;	3387		    REPLY_CODE = NIC$_PGM_ERR ;
;	3388		    MSG_STAT   = MSG$_NOTOPEN ;
;	3389		    END ;
;	3390	
;	3391	   [8] :
;	3392		! INITIALIZE THE STRING DESCRIPTOR PORTION OF THE DDSC
;	3393		! THE SPECIFIED MESSAGE SO THAT THE MESSAGE BUFFER
;	3394		! APPEARS TO CONTAIN THE NULL STRING.
;	3395		!
;	3396		BEGIN
;	3397		MSG_DDSC [STR_LNG] = 0 ;
;	3398		MSG_DDSC [STR_PTR] = .MSG_DDSC [BUF_PTR] ;
;	3399		END ;
;	3400	
;	3401	
;	3402	
;	3403	   [9] :
;	3404		! OPEN THE SPECIFIED MESSAGE TO RECEIVE OUTPUT.  USE THE
;	3405		! STRING DESCRIPTOR PORTION OF THE DDSC TO DETERMINE
;	3406		! THE END OF THE MESSAGE CURRENTLY STORED IN THE MESSAGE
;	3407		! BUFFER  --  ALL NEW INFORMATION WILL THEREFORE BE
;	3408		! APPENDED TO THE MESSAGE CURRENTLY IN THE BUFFER.
;	3409		!
;	3410		BEGIN
;	3411		P_OM = .MSG_DDSC [STR_PTR] 
;	3412			+ .MSG_DDSC [STR_LNG] ;
;	3413		OMSG_BOUND = .MSG_DDSC [BUF_LNG]
;	3414				+ .MSG_DDSC [BUF_PTR] ;
;	3415		MCB_PTR [MCB$A_OMSG_DDSC] = .PARAMETER_AD ;
;	3416		END ;
;	3417	
;	3418	   [10] :
;	3419		! VERIFY THAT AN OUTPUT MESSAGE IS CURRENTLY OPEN.
;	3420		!
;	3421		IF .OMSG_BOUND EQL 0 
;	3422		THEN
;	3423		    BEGIN
;	3424		    REPLY_CODE = NIC$_PGM_ERR ;
;	3425		    MSG_STAT   = MSG$_NOTOPEN ;
;	3426		    END ;
;	3427	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 51
; Digital Equipment Corporation
;
;	3428	   [11] :
;	3429		! CLOSE THE CURRENT OUTPUT MESSAGE.  MODIFY THE
;	3430		! STRING DESCRIPTOR PORTION OF THE DDSC TO MESSAGE JUST
;	3431		! BUILT AND STORED IN THE BUFFER.
;	3432		!
;	3433		BEGIN
;	3434		OMSG_DDSC [STR_LNG] = .P_OM - .OMSG_DDSC [STR_PTR] ;
;	3435		OMSG_BOUND = 0 ;
;	3436		END ;
;	3437	
;	3438	   [12] :
;	3439		! WRITE (TRANSMIT) THE OUTPUT MESSAGE MOST RECENTLY
;	3440		! CLOSED ON THE SPECIFIED CHANNEL.
;	3441		!
;	3442		IF (TMP =
;	3443		    $QIOW (FUNC = IO$_WRITEVBLK,
;     P 3444			   CHAN = .MSG_CHAN,
;     P 3445			   IOSB = MSG_OSB,
;     P 3446			   P1   = .OMSG_DDSC [STR_PTR],
;     P 3447			   P2   = .OMSG_DDSC [STR_LNG]
;     P 3448			  )
;	3449		   )
;	3450		THEN ()
;	3451		ELSE MSG_OSB [IO_STAT] = .TMP ;
;	3452	
;	3453	
;	3454	
;	3455	   [13] :
;	3456		! WRITE (TRANSMIT) THE LOW ORDER BYTE STORED IN VARIABLE
;	3457		! 'REPLY_CODE' TO THE SPECIFIED CHANNEL.
;	3458		!
;	3459		BEGIN
;	3460		LOCAL	REPLY : SIGNED BYTE ;
;	3461	
;	3462		IF .REPLY_CODE			! The internal representation
;	3463		THEN				!  of all non-success "reply -
;	3464		    REPLY = .REPLY_CODE		!  - codes" are double their
;	3465		ELSE				!  external NICE protocol
;	3466		    REPLY = .REPLY_CODE/2 ;	!  counterparts.
;	3467	
;	3468		IF (TMP=
;	3469		    $QIOW (FUNC = IO$_WRITEVBLK,
;     P 3470			   CHAN = .MSG_CHAN,
;     P 3471			   IOSB = MSG_OSB,
;     P 3472			   P1   = REPLY,
;     P 3473			   P2   = 1
;     P 3474			  )
;	3475		   )
;	3476		THEN ()
;	3477		ELSE MSG_OSB [IO_STAT] = .TMP ;
;	3478		END ;

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 52
; Digital Equipment Corporation
;
;	3479	   [14] :
;	3480		! VERIFY THAT STATUS BLOCK FROM THE LAST OUTPUT
;	3481		! OUTPUT INDICATES SUCCESS.
;	3482		!
;	3483	
;	3484		IF .MSG_OSB [IO_STAT]
;	3485		THEN
;	3486		    MCB_PTR [MCB$W_REPLIES] 
;	3487					= .MCB_PTR [MCB$W_REPLIES] + 1
;	3488		ELSE
;	3489		    BEGIN
;	3490		    MCB_PTR [MCB$B_REQDISCON] = TRUE ;
;	3491		    REPLY_CODE = NIC$_NETCOMERR ;
;	3492		    MSG_STAT   = MSG$_SEND_ERR ;
;	3493		    END ;
;	3494	
;	3495	
;	3496	   [15] :
;	3497		! CLEAR THE MESSAGE BOUDARY VARIABLES THEREBY INDICATING
;	3498		! THAT NO MESSAGES ARE CURRENTLY OPEN.
;	3499		!
;	3500		BEGIN
;	3501		OMSG_BOUND = 0 ;
;	3502		IMSG_BOUND = 0 ;
;	3503		END ;
;	3504	
;	3505	   [16] :
;	3506		! INDICATE THAT AN ILLEGAL FUNCTION HAS BEEN REQUESTED.
;	3507		!
;	3508		BEGIN
;	3509		MSG_STAT   = MSG$_ILL_FCT ;
;	3510		REPLY_CODE = NIC$_PGM_ERR ;
;	3511		END ;
;	3512	
;	3513	
;	3514	
;	3515	   [17] :
;	3516		! WRITE (TRANSMIT) THE SPECIFIED MESSAGE 
;	3517		!

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 53
; Digital Equipment Corporation
;
;	3518		IF (TMP =
;	3519		    $QIOW (FUNC = IO$_WRITEVBLK,
;     P 3520			   CHAN = .MSG_CHAN,
;     P 3521			   IOSB = MSG_OSB,
;     P 3522			   P1   = .MSG_DDSC [STR_PTR],
;     P 3523			   P2   = .MSG_DDSC [STR_LNG]
;     P 3524			  )
;	3525		   )
;	3526		THEN ()
;	3527		ELSE MSG_OSB [IO_STAT] = .TMP ;
;	3528	

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 54
; Digital Equipment Corporation
;
;	3529	    [18] :
;	3530		 !+
;	3531		 ! Initialize the message handling activities by
;	3532		 ! assigning channels to NETACP and SYS$NET, and by
;	3533		 ! initializing any other appropriate fields of the 
;	3534		 ! message control block.
;	3535		 !-
;	3536	
;	3537		BEGIN
;	3538		LOCAL	CMD_DEV : NDSC,
;	3539			ACP_DEV : NDSC ;
;	3540	
;	3541		CMD_DEV [DSC_PTR] = UPLIT BYTE ('SYS$NET') ;
;	3542		CMD_DEV [DSC_LNG] = 7 ;
;	3543	
;	3544		ACP_DEV [DSC_PTR] = UPLIT BYTE ('NET0:') ;
;	3545		ACP_DEV [DSC_LNG] = 5 ;
;	3546	
;	3547		MCB_PTR [MCB$W_REPLIES] = 0 ;	! No messages have been
;	3548						! sent yet on this channel
;	3549	
;	3550	
;	3551		IF .PARAMETER_AD EQL 0		! Establish the value of the
;	3552						! common exit routine.
;	3553		THEN
;	3554		    MCB_PTR [MCB$A_EXIT_RT] = NULL_ROUTINE
;	3555		ELSE
;	3556		    MCB_PTR [MCB$A_EXIT_RT] = .PARAMETER_AD ;
;	3557	
;	3558		! Issue a connect confirm over the logical link to
;	3559		! the commmand node.
;	3560	
;	3561		IF NOT $ASSIGN (DEVNAM = CMD_DEV,
;     P 3562				CHAN = MCB_PTR [MCB$W_MSG_CHAN]
;     P 3563				)
;	3564		THEN
;	3565		    REPLY_CODE = NIC$_RESRCERR
;	3566		ELSE
;	3567	
;	3568		    ! Create a path to NETACP to allow control QIO's.
;	3569	
;	3570		    IF NOT $ASSIGN (DEVNAM = ACP_DEV,
;     P 3571				    CHAN = ACP_CHAN
;     P 3572				   )
;	3573	
;	3574		    THEN
;	3575			REPLY_CODE = NIC$_RESRCERR ;
;	3576		END ;
;	3577	
;	3578	 
;	3579	  TES ;
;	3580	
;	3581	RETRN (.REPLY_CODE) ;
;	3582	
;	3583	END ;

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 54-1
; Digital Equipment Corporation
;



							    .PSECT  $PLIT$,NOWRT,NOEXE,2

					      00024 P.AAD:  .BYTE   18, 0						      ;
					      00026	    .BLKB   2
					      00028 P.AAE:  .BYTE   1, 2, 3, 0						      ;
					      0002C P.AAF:  .BYTE   1, 2, 0						      ;
					      0002F	    .BLKB   1
					      00030 P.AAG:  .BYTE   1, 3, 0						      ;
					      00033	    .BLKB   1
					      00034 P.AAH:  .BYTE   4, 5, 0						      ;
					      00037	    .BLKB   1
					      00038 P.AAI:  .BYTE   4, 5, 6, 0						      ;
					      0003C P.AAJ:  .BYTE   7, 8, 9, 0						      ;
					      00040 P.AAK:  .BYTE   7, 9, 0						      ;
					      00043	    .BLKB   1
					      00044 P.AAL:  .BYTE   10, 11, 0						      ;
					      00047	    .BLKB   1
					      00048 P.AAM:  .BYTE   10, 11, 12, 14, 0					      ;
					      0004D	    .BLKB   3
					      00050 P.AAN:  .BYTE   17, 14, 0						      ;
					      00053	    .BLKB   1
					      00054 P.AAO:  .BYTE   13, 14, 0						      ;
					      00057	    .BLKB   1
					      00058 P.AAP:  .BYTE   15, 0						      ;
					      0005A	    .BLKB   2
					      0005C P.AAQ:  .BYTE   16, 0						      ;
					      0005E	    .BLKB   2
					      00060 P.AAR:  .ASCII  \SYS$NET\						      ;
					      00067	    .BLKB   1
					      00068 P.AAS:  .ASCII  \NET0:\						      ;
					      0006D	    .BLKB   3

							    .PSECT  $OWN$,NOEXE,2

					      00028 CTL_VEC:.BLKB   4



							    .PSECT  $CODE$,NOWRT,2

					 01FC 00775 	    .ENTRY  MESSAGE, Save R2,R3,R4,R5,R6,R7,R8			      ; 3119
		         5E	       14  C2 00777 	    SUBL2   #20, SP						      ;
		         53	  34   A9  D0 0077A 	    MOVL    52(MCB_PTR), R3					      ; 3235
		         56	  30   A9  D0 0077E 	    MOVL    48(MCB_PTR), R6					      ;
	   7E	         59	       20  C1 00782 	    ADDL3   #32, MCB_PTR, -(SP)					      ; 3241
	   57	         59	       28  C1 00786 	    ADDL3   #40, MCB_PTR, R7					      ; 3242
		         58	  08   AC  D0 0078A 	    MOVL    PARAMETER_AD, R8					      ; 3255
		         52	       58  D0 0078E 	    MOVL    R8, R2						      ; 3235
		         55	  1C   A9  9E 00791 	    MOVAB   28(MCB_PTR), R5					      ; 3258
		         65	       01  B0 00795 	    MOVW    #1, (R5)						      ; 3260
	   0C	         00	  04   AC  CF 00798 	    CASEL   FCT, #0, #12					      ; 3279
	 003D	       0036	     0028     0079D 1$:     .WORD   3$-1$,-						      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 54-2
; Digital Equipment Corporation
;
	 004B	       0052	     0044     007A3		    5$-1$,-						      ;
	 006E	       0060	     0059     007A9		    6$-1$,-						      ;
	 0021	       0075	     0067     007AF		    7$-1$,-						      ;
				     002F     007B5		    9$-1$,-						      ;
								    8$-1$,-						      ;
								    10$-1$,-						      ;
								    11$-1$,-						      ;
								    13$-1$,-						      ;
								    12$-1$,-						      ;
								    14$-1$,-						      ;
								    2$-1$,-						      ;
								    4$-1$						      ;
		         50	0000'  CF  9E 007B7 	    MOVAB   P.AAQ, R0						      ; 3277
				       59  11 007BC 	    BRB     15$							      ; 3279
		         50	0000'  CF  9E 007BE 2$:     MOVAB   P.AAD, R0						      ; 3264
				       52  11 007C3 	    BRB     15$							      ; 3279
		         50	0000'  CF  9E 007C5 3$:     MOVAB   P.AAE, R0						      ; 3265
				       4B  11 007CA 	    BRB     15$							      ; 3279
		         50	0000'  CF  9E 007CC 4$:     MOVAB   P.AAF, R0						      ; 3266
				       44  11 007D1 	    BRB     15$							      ; 3279
		         50	0000'  CF  9E 007D3 5$:     MOVAB   P.AAG, R0						      ; 3267
				       3D  11 007D8 	    BRB     15$							      ; 3279
		         50	0000'  CF  9E 007DA 6$:     MOVAB   P.AAH, R0						      ; 3268
				       36  11 007DF 	    BRB     15$							      ; 3279
		         50	0000'  CF  9E 007E1 7$:     MOVAB   P.AAI, R0						      ; 3269
				       2F  11 007E6 	    BRB     15$							      ; 3279
		         50	0000'  CF  9E 007E8 8$:     MOVAB   P.AAJ, R0						      ; 3270
				       28  11 007ED 	    BRB     15$							      ; 3279
		         50	0000'  CF  9E 007EF 9$:     MOVAB   P.AAK, R0						      ; 3271
				       21  11 007F4 	    BRB     15$							      ; 3279
		         50	0000'  CF  9E 007F6 10$:    MOVAB   P.AAL, R0						      ; 3272
				       1A  11 007FB 	    BRB     15$							      ; 3279
		         50	0000'  CF  9E 007FD 11$:    MOVAB   P.AAM, R0						      ; 3273
				       13  11 00802 	    BRB     15$							      ; 3279
		         50	0000'  CF  9E 00804 12$:    MOVAB   P.AAN, R0						      ; 3274
				       0C  11 00809 	    BRB     15$							      ; 3279
		         50	0000'  CF  9E 0080B 13$:    MOVAB   P.AAO, R0						      ; 3275
				       05  11 00810 	    BRB     15$							      ; 3279
		         50	0000'  CF  9E 00812 14$:    MOVAB   P.AAP, R0						      ; 3276
		  0000'  CF	       50  D0 00817 15$:    MOVL    R0, CTL_VEC						      ; 3262
		         33	       65  E9 0081C 16$:    BLBC    (R5), 18$						      ; 3282
		         50	0000'  DF  9A 0081F 	    MOVZBL  @CTL_VEC, R0					      ; 3284
				0000'  CF  D6 00824 	    INCL    CTL_VEC						      ;
	   12	         00	       50  CF 00828 	    CASEL   R0, #0, #18						      ;
	 0036	       0029	     01A8     0082C 17$:    .WORD   55$-17$,-						      ;
	 0094	       008F	     0080     00832		    19$-17$,-						      ;
	 00B3	       00AC	     00A0     00838		    20$-17$,-						      ;
	 00DB	       00CE	     00BC     0083E		    23$-17$,-						      ;
	 010C	       00F0	     00E5     00844		    24$-17$,-						      ;
	 0130	       0128	     0120     0084A		    25$-17$,-						      ;
				     0157     00850		    26$-17$,-						      ;
								    27$-17$,-						      ;
								    28$-17$,-						      ;
								    29$-17$,-						      ;
								    30$-17$,-						      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 54-3
; Digital Equipment Corporation
;
								    33$-17$,-						      ;
								    35$-17$,-						      ;
								    36$-17$,-						      ;
								    39$-17$,-						      ;
								    42$-17$,-						      ;
								    45$-17$,-						      ;
								    47$-17$,-						      ;
								    50$-17$						      ;
				     017F  31 00852 18$:    BRW     55$							      ; 3286
				  38   A9  D5 00855 19$:    TSTL    56(MCB_PTR)						      ; 3291
				       C2  13 00858 	    BEQL    16$							      ;
		         69	       0A  CE 0085A 	    MNEGL   #10, (MCB_PTR)					      ; 3294
		         65	       06  B0 0085D 	    MOVW    #6, (R5)						      ; 3295
				       BA  11 00860 	    BRB     16$							      ; 3284
				       7E  7C 00862 20$:    CLRQ    -(SP)						      ; 3312
				       7E  7C 00864 	    CLRQ    -(SP)						      ;
				  08   A2  DD 00866 	    PUSHL   8(R2)						      ;
				  0C   A2  DD 00869 	    PUSHL   12(R2)						      ;
				       7E  7C 0086C 	    CLRQ    -(SP)						      ;
				  20   AE  DD 0086E 	    PUSHL   32(SP)						      ;
				       31  DD 00871 	    PUSHL   #49							      ;
		         7E	  1E   A9  3C 00873 	    MOVZWL  30(MCB_PTR), -(SP)					      ;
				       7E  D4 00877 	    CLRL    -(SP)						      ;
	      00000000G  9F	       0C  FB 00879 	    CALLS   #12, @#SYS$QIOW					      ;
		         54	       50  D0 00880 	    MOVL    R0, TMP						      ;
		         1C	       54  E9 00883 	    BLBC    TMP, 22$						      ; 3306
		         10	  00   BE  E9 00886 	    BLBC    @0(SP), 21$						      ; 3315
		    04   A2	  0C   A2  D0 0088A 	    MOVL    12(R2), 4(R2)					      ; 3318
      00   BE	         10	       10  EF 0088F 	    EXTZV   #16, #16, @0(SP), (R2)				      ; 3319
				       62     00894									      ;
				  44   A9  B6 00895 	    INCW    68(MCB_PTR)						      ; 3321
				       82  11 00898 	    BRB     16$							      ; 3315
		         69	       26  CE 0089A 21$:    MNEGL   #38, (MCB_PTR)					      ; 3326
		         65	       0A  B0 0089D 	    MOVW    #10, (R5)						      ; 3327
				       6D  11 008A0 	    BRB     34$							      ; 3306
		    00   BE	       54  B0 008A2 22$:    MOVW    TMP, @0(SP)						      ; 3331
		         65	       0A  B0 008A6 	    MOVW    #10, (R5)						      ; 3332
				     0122  31 008A9 	    BRW     53$							      ; 3333
		         5B	  04   A2  D0 008AC 23$:    MOVL    4(R2), P_IM						      ; 3341
      38   A9	         5B	       62  C1 008B0 	    ADDL3   (R2), P_IM, 56(MCB_PTR)				      ; 3343
		    30   A9	       58  D0 008B5 	    MOVL    R8, 48(MCB_PTR)					      ; 3344
				       54  11 008B9 	    BRB     34$							      ; 3284
				  38   A9  D5 008BB 24$:    TSTL    56(MCB_PTR)						      ; 3352
				       3D  11 008BE 	    BRB     31$							      ;
		    04   A6	       5B  D0 008C0 25$:    MOVL    P_IM, 4(R6)						      ; 3365
	   66	    38   A9	       5B  C3 008C4 	    SUBL3   P_IM, 56(MCB_PTR), (R6)				      ; 3366
				     0083  31 008C9 	    BRW     43$							      ; 3367
				       66  D5 008CC 26$:    TSTL    (R6)						      ; 3374
				       7A  13 008CE 	    BEQL    41$							      ;
		         69	       04  CE 008D0 	    MNEGL   #4, (MCB_PTR)					      ; 3377
		         65	       04  B0 008D3 	    MOVW    #4, (R5)						      ; 3378
				       7A  11 008D6 	    BRB     44$							      ; 3284
				  3C   A9  D5 008D8 27$:    TSTL    60(MCB_PTR)						      ; 3384
				       7D  13 008DB 	    BEQL    46$							      ;
				       20  11 008DD 	    BRB     32$							      ; 3387

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 54-4
; Digital Equipment Corporation
;
				       62  D4 008DF 28$:    CLRL    (R2)						      ; 3397
		    04   A2	  0C   A2  D0 008E1 	    MOVL    12(R2), 4(R2)					      ; 3398
				       72  11 008E6 	    BRB     46$							      ; 3284
	   5A	    04   A2	       62  C1 008E8 29$:    ADDL3   (R2), 4(R2), P_OM					      ; 3412
      3C   A9	    08   A2	  0C   A2  C1 008ED 	    ADDL3   12(R2), 8(R2), 60(MCB_PTR)				      ; 3414
		    34   A9	       58  D0 008F4 	    MOVL    R8, 52(MCB_PTR)					      ; 3415
				       60  11 008F8 	    BRB     46$							      ; 3284
				  3C   A9  D5 008FA 30$:    TSTL    60(MCB_PTR)						      ; 3421
				       5B  12 008FD 31$:    BNEQ    46$							      ;
		         69	       0A  CE 008FF 32$:    MNEGL   #10, (MCB_PTR)					      ; 3424
		         65	       02  B0 00902 	    MOVW    #2, (R5)						      ; 3425
				       7A  11 00905 	    BRB     49$							      ; 3284
	   63	         5A	  04   A3  C3 00907 33$:    SUBL3   4(R3), P_OM, (R3)					      ; 3434
				  3C   A9  D4 0090C 	    CLRL    60(MCB_PTR)						      ; 3435
				       70  11 0090F 34$:    BRB     49$							      ; 3284
				       7E  7C 00911 35$:    CLRQ    -(SP)						      ; 3448
				       7E  7C 00913 	    CLRQ    -(SP)						      ;
				       63  DD 00915 	    PUSHL   (R3)						      ;
				  04   A3  DD 00917 	    PUSHL   4(R3)						      ;
				       49  11 0091A 	    BRB     48$							      ;
		         06	       69  E9 0091C 36$:    BLBC    (MCB_PTR), 37$					      ; 3462
		    04   AE	       69  90 0091F 	    MOVB    (MCB_PTR), REPLY					      ; 3464
				       08  11 00923 	    BRB     38$							      ; 3462
	   50	         69	       02  C7 00925 37$:    DIVL3   #2, (MCB_PTR), R0					      ; 3466
		    04   AE	       50  90 00929 	    MOVB    R0, REPLY						      ;
				       7E  7C 0092D 38$:    CLRQ    -(SP)						      ; 3474
				       7E  7C 0092F 	    CLRQ    -(SP)						      ;
				       01  DD 00931 	    PUSHL   #1							      ;
				  18   AE  9F 00933 	    PUSHAB  REPLY						      ;
				       2D  11 00936 	    BRB     48$							      ;
		         05	       67  E9 00938 39$:    BLBC    (R7), 40$						      ; 3484
				  42   A9  B6 0093B 	    INCW    66(MCB_PTR)						      ; 3487
				       41  11 0093E 	    BRB     49$							      ; 3484
		    40   A9	       01  90 00940 40$:    MOVB    #1, 64(MCB_PTR)					      ; 3490
		         69	       26  CE 00944 	    MNEGL   #38, (MCB_PTR)					      ; 3491
		         65	       0C  B0 00947 	    MOVW    #12, (R5)						      ; 3492
				       35  11 0094A 41$:    BRB     49$							      ; 3284
				  3C   A9  D4 0094C 42$:    CLRL    60(MCB_PTR)						      ; 3501
				  38   A9  D4 0094F 43$:    CLRL    56(MCB_PTR)						      ; 3502
				       7D  11 00952 44$:    BRB     54$							      ; 3284
		         65	       08  B0 00954 45$:    MOVW    #8, (R5)						      ; 3509
		         69	       0A  CE 00957 	    MNEGL   #10, (MCB_PTR)					      ; 3510
				       75  11 0095A 46$:    BRB     54$							      ; 3284
				       7E  7C 0095C 47$:    CLRQ    -(SP)						      ; 3524
				       7E  7C 0095E 	    CLRQ    -(SP)						      ;
				       62  DD 00960 	    PUSHL   (R2)						      ;
				  04   A2  DD 00962 	    PUSHL   4(R2)						      ;
				       7E  7C 00965 48$:    CLRQ    -(SP)						      ;
				       57  DD 00967 	    PUSHL   R7							      ;
				       30  DD 00969 	    PUSHL   #48							      ;
		         7E	  1E   A9  3C 0096B 	    MOVZWL  30(MCB_PTR), -(SP)					      ;
				       7E  D4 0096F 	    CLRL    -(SP)						      ;
	      00000000G  9F	       0C  FB 00971 	    CALLS   #12, @#SYS$QIOW					      ;
		         54	       50  D0 00978 	    MOVL    R0, TMP						      ;
		         53	       54  E8 0097B 	    BLBS    TMP, 54$						      ; 3518

; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 54-5
; Digital Equipment Corporation
;
		         67	       54  B0 0097E 	    MOVW    TMP, (R7)						      ; 3527
				       4E  11 00981 49$:    BRB     54$							      ; 3284
		    14   AE	0000'  CF  9E 00983 50$:    MOVAB   P.AAR, CMD_DEV+4					      ; 3541
		    10   AE	       07  D0 00989 	    MOVL    #7, CMD_DEV						      ; 3542
		    0C   AE	0000'  CF  9E 0098D 	    MOVAB   P.AAS, ACP_DEV+4					      ; 3544
		    08   AE	       05  D0 00993 	    MOVL    #5, ACP_DEV						      ; 3545
				  42   A9  B4 00997 	    CLRW    66(MCB_PTR)						      ; 3547
				       58  D5 0099A 	    TSTL    R8							      ; 3551
				       08  12 0099C 	    BNEQ    51$							      ;
		    04   A9	F65E   CF  9E 0099E 	    MOVAB   NULL_ROUTINE, 4(MCB_PTR)				      ; 3554
				       04  11 009A4 	    BRB     52$							      ; 3551
		    04   A9	       58  D0 009A6 51$:    MOVL    R8, 4(MCB_PTR)					      ; 3556
				       7E  7C 009AA 52$:    CLRQ    -(SP)						      ; 3563
				  1E   A9  9F 009AC 	    PUSHAB  30(MCB_PTR)						      ;
				  1C   AE  9F 009AF 	    PUSHAB  CMD_DEV						      ;
	      00000000G  9F	       04  FB 009B2 	    CALLS   #4, @#SYS$ASSIGN					      ;
		         12	       50  E9 009B9 	    BLBC    R0, 53$						      ;
				       7E  7C 009BC 	    CLRQ    -(SP)						      ; 3572
				  0A   A9  9F 009BE 	    PUSHAB  10(MCB_PTR)						      ;
				  14   AE  9F 009C1 	    PUSHAB  ACP_DEV						      ;
	      00000000G  9F	       04  FB 009C4 	    CALLS   #4, @#SYS$ASSIGN					      ;
		         03	       50  E8 009CB 	    BLBS    R0, 54$						      ;
		         69	       1E  CE 009CE 53$:    MNEGL   #30, (MCB_PTR)					      ; 3575
				     FE48  31 009D1 54$:    BRW     16$							      ; 3284
		    04   B9	       00  FB 009D4 55$:    CALLS   #0, @4(MCB_PTR)					      ; 3581
					   04 009D8 	    RET     							      ; 3119

; Routine Size:  612 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 02:44:44	DBB3:[NICE.SRC]NICMSG.B32;58					Page 55
; Digital Equipment Corporation
;
;	3584	END 
;	3585	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $CODE$         	  2521  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $PLIT$         	   112  NOWRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $OWN$          	    44    WRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]STARLET.L32;1		      2688        13         0       120





;	3586	
; Size:		2521 code + 156 data bytes
; Run Time:	01:34.8
; Elapsed Time:	02:18.7
; Memory Used:	385 pages
; Compilation Complete
