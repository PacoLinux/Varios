SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (3)      46  DECLARATIONS
   (5)     207  SHOW$LOGI_CLI	- SHOW LOGICAL CLI interface
   (6)     320  LOGI_LOGN_PRES	- action routine for input param
   (7)     450  LOGI_COPY	- copy logical name table
   (9)     591  LOGI_PRINT	- Format and print list of logical n
SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page   1
X0101                                                                                                                            (1)

                                     0000     1 
                                     0000     2 	.TITLE	SHOW$LOGICAL
                                     0000     3 	.IDENT	/X0101/
                                     0000     4 
                                     0000     5 ;
                                     0000     6 ; COPYRIGHT (C) 1977
                                     0000     7 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS 01754
                                     0000     8 ;
                                     0000     9 ; THIS SOFTWARE IS FURNISHED  UNDER A LICENSE FOR USE ONLY ON A SINGLE
                                     0000    10 ; COMPUTER  SYSTEM AND  MAY BE  COPIED ONLY WITH  THE INCLUSION OF THE
                                     0000    11 ; ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,
                                     0000    12 ; MAY NOT BE PROVIDED OR  OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
                                     0000    13 ; EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE
                                     0000    14 ; TERMS.  TITLE TO AND  OWNERSHIP OF THE  SOFTWARE  SHALL AT ALL TIMES
                                     0000    15 ; REMAIN IN DEC.
                                     0000    16 ;
                                     0000    17 ; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE
                                     0000    18 ; AND SHOULD  NOT BE CONSTRUED  AS A COMMITMENT  BY DIGITAL  EQUIPMENT
                                     0000    19 ; CORPORATION.
                                     0000    20 ;
                                     0000    21 ; DEC ASSUMES  NO  RESPONSIBILITY  FOR  THE USE OR  RELIABILITY OF ITS
                                     0000    22 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
                                     0000    23 ;
                                     0000    24 
                                     0000    25 ;++
                                     0000    26 ; FACILITY:	DCL SHOW COMMAND
                                     0000    27 ;
                                     0000    28 ; ABSTRACT:
                                     0000    29 ;
                                     0000    30 ;	This module implements the options of the SHOW LOGICAL DCL command
                                     0000    31 ;	that need to be implemented in the SHOW image.
                                     0000    32 ;
                                     0000    33 ; ENVIRONMENT:
                                     0000    34 ;
                                     0000    35 ;	Runs in user mode but needs privilege to change mode to Kernel
                                     0000    36 ;
                                     0000    37 ; AUTHOR : BEATRICE U. WALTHER,  CREATION DATE: 27-nov-1977
                                     0000    38 ;
                                     0000    39 ; MODIFIED BY:
                                     0000    40 ;
                                     0000    41 ;	, : VERSION
                                     0000    42 ; 01	- 
                                     0000    43 ;--
SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page   2
X0101                                                                                                                            (3)

                                     0000    45 
                                     0000    46 	.SBTTL	DECLARATIONS
                                     0000    47 
                                     0000    48 ;
                                     0000    49 ; Include files:
                                     0000    50 ;
                                     0000    51 
                                     0000    52 	$CLIDEF				; Command language interface definitions
                                     0000    53 	$CLIDEFQUALSHOW			; define SHOW qualifiers
                                     0000    54 	$PCBDEF				; process control block definitions
                                     0000    55 	$LOGDEF				; logical name block
                                     0000    56 	$PRDEF				; process registers definitions
                                     0000    57 	$SHRDEF				; define shared messages
                                     0000    58 	$STSDEF				; error code definitions
                                     0000    59 
                                     0000    60 ;
                                     0000    61 ; Macros:
                                     0000    62 ;
                                     0000    63 ;+
                                     0000    64 ; The $SHR_MESSAGES macro defines facility-specific message codes
                                     0000    65 ;	which are based on the system-wide shared message codes.
                                     0000    66 ;
                                     0000    67 ;	$SHR_MESSAGES	name, code, <<msg,severity>, ... >
                                     0000    68 ;
                                     0000    69 ;	where:
                                     0000    70 ;	    "name" is the name of the facility (e.g., COPY)
                                     0000    71 ;	    "code" is the corresponding facility code (e.g., 103)
                                     0000    72 ;	    "msg" is the name of the shared message (e.g., BEGIN)
                                     0000    73 ;	    "severity" is the desired message severity (e.g., 1, 0, 2, 4)
                                     0000    74 ;
                                     0000    75 ;-
                                     0000    76 	.MACRO	$SHR_MESSAGES	NAME,CODE,MSGCODES
                                     0000    77 ;
                                     0000    78 	.IF	NDF,SHR$K_SHRDEF  ; issue $SHRDEF if not done yet
                                     0000    79 		SHR$K_SHRDEF = 1 ; define symbol to indic $SHRDEF done
                                     0000    80 		$SHRDEF		 ; define shared message codes
                                     0000    81 	.ENDC
                                     0000    82 	.IRP	MSGPAIR, <'MSGCODES>
                                     0000    83 		$SHRMSG_COD 'NAME', 'CODE', MSGPAIR
                                     0000    84 	.ENDR
                                     0000    85 	.ENDM
                                     0000    86 	.MACRO	$SHRMSG_COD NAME, CODE, MSG, SEVERITY
                                     0000    87 ;
                                     0000    88 	.IF	IDN,SEVERITY,WARNING    ; if WARNING, set 0 sev
                                     0000    89 	  'NAME'$_'MSG' = 0	        ; set 0 sev (WARNING)
                                     0000    90 	.IFF
                                     0000    91 	  .IF	IDN,SEVERITY,SUCCESS    ; if SUCCESS, set 1 sev
                                     0000    92 	    'NAME'$_'MSG' = 1	        ; set 1 sev (SUCCESS)
                                     0000    93 	  .IFF
                                     0000    94 	    .IF	IDN,SEVERITY,ERROR      ; if ERROR, set 2 sev
                                     0000    95 	      'NAME'$_'MSG' = 2	        ; set 2 sev (ERROR)
                                     0000    96 	    .IFF
                                     0000    97 	      .IF IDN,SEVERITY,INFO     ; if INFO, set 3 sev
                                     0000    98 	        'NAME'$_'MSG' = 3       ; set 3 sev (INFO)
                                     0000    99 	      .IFF
                                     0000   100 	        .IF IDN,SEVERITY,SEVERE ; if SEVERE, set 4 sev
                                     0000   101 	          'NAME'$_'MSG' = 4     ; set 4 sev (SEVERE)
SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page   3
X0101           DECLARATIONS                                                                                                     (3)

                                     0000   102 	        .IFF
                                     0000   103 	          'NAME'$_'MSG' = 'SEVERITY ; set specified sev
                                     0000   104 	        .ENDC
                                     0000   105 	      .ENDC
                                     0000   106 	    .ENDC
                                     0000   107 	  .ENDC
                                     0000   108 	.ENDC
                                     0000   109 	 'NAME'$_'MSG' = 'NAME'$_'MSG'+SHR$_'MSG'+<'CODE'@16>
                                     0000   110 	.ENDM
                                     0000   111 
                                     0000   112 
                                     0000   113 ;
                                     0000   114 ; Equated symbols:
                                     0000   115 ;
                                     0000   116 
                                     0000   117 	_VIELD	LOGI,0,<-		; define Bitmasks
                                     0000   118 			<SYST,,M>,-	; /SYSTEM qualifier	*** Warning:
                                     0000   119 			<GROU,,M>,-	; /GROUP qualifier	*** Bit positions
                                     0000   120 			<PROC,,M>,-	; ( /PROCESS)		*** relevant
                                     0000   121 			<ALL,,M>,-	; /ALL qualifier
                                     0000   122 			<LOGN,,M>,-	; input parameter present
                                     0000   123 			>
                                     0000   124 
                                     0000   125 	$SHR_MESSAGES	SHOW,120,<-	; define shared messages
                                     0000   126 		<BADLOGIC,ERROR>,-	;
                                     0000   127 			>
                                     0000   128 
                           0000000A  0000   129 MAX_TRAN_LEVELS=10			; maximum number of recursions 
                           0000000A  0000   130 SCRATCH_PAGES=10
                           00000003  0000   131 USER_MODE=3
                           00000000  0000   132 PROGRAM_REGION=0
                                     0000   133 
                                     0000   134 ;
                                     0000   135 ; Own storage:
                                     0000   136 ;
                                     0000   137 
                                 00000000   138 	.PSECT	SHOW$RWDATA	LONG,RD,WRT,NOEXE
                                     0000   139 
                                     0000   140 ;
                                     0000   141 ; define CLI call back structures
                                     0000   142 ;
                                     0000   143 
                                     0000   144 LOGI_A_GETQUAL:
                                     0000   145 	$CLIREQDESC	-		; CLI request descriptor block 
                                     0000   146 		RQTYPE=CLI$K_GETQUAL,-	; to get qualifiers
                                     0000   147 		QUALST=LOGI_A_QUALST	; pointer to qualifier list
                                     001C   148 LOGI_A_QUALST:				; qualifier list
                                     001C   149 	$CLIQUALDEF	-
                                     001C   150 		QDCODE=CLI$K_SHLG_SYST,-; /SYSTEM
                                     001C   151 		SETLST=LOGI_V_SYST	;
                                     0034   152 	$CLIQUALDEF	-
                                     0034   153 		QDCODE=CLI$K_SHLG_GROU,-; /GROUP
                                     0034   154 		SETLST=LOGI_V_GROU	;
                                     004C   155 	$CLIQUALDEF	-		;
                                     004C   156 		QDCODE=CLI$K_SHLG_PROC,-; /PROCESS
                                     004C   157 		SETLST=LOGI_V_PROC	;
                                     0064   158 	$CLIQUALDEF	-
SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page   4
X0101           DECLARATIONS                                                                                                     (3)

                                     0064   159 		QDCODE=CLI$K_SHLG_ALL,-	; /ALL
                                     0064   160 		SETLST=LOGI_V_ALL	;
                                     007C   161 	$CLIQUALDEF	END_LIST
                                     007D   162 LOGI_A_GETINP:
                                     007D   163 	$CLIREQDESC	-		; CLI request descriptor block
                                     007D   164 		RQTYPE=CLI$K_INPUT1,-	; get input parameter
                                     007D   165 		BITNUM=LOGI_V_LOGN,-	; bit to set if present
                                     007D   166 		PRSACT=LOGI_LOGN_PRES	; routine to call if present
                                     0099   167 LOGI_L_BITLS:
                           00000000  0099   168 	.LONG	0			; CLI BIT LIST
                                     009D   169 LOGI_Q_SCRATCH:
                           000000A5  009D   170 	.BLKQ	1			; scratch area delimiters
                                     00A5   171 LOGI_Q_LOGNAM:
                           00000040  00A5   172 	.LONG	LOG$C_NAMLENGTH		; descriptor to logical name
                           000000B5' 00A9   173 	.LONG	LOGI_T_LOGNAM		;
                                     00AD   174 LOGI_Q_EQUNAM:
                           00000040' 00AD   175 	.LONG	LOG$C_NAMLENGTH		; descriptor to equivalent name
                           000000F5' 00B1   176 	.LONG	LOGI_T_EQUNAM		;
                                     00B5   177 LOGI_T_LOGNAM:
                           000000F5  00B5   178 	.BLKB	LOG$C_NAMLENGTH		; buffer for logical name
                                     00F5   179 LOGI_T_EQUNAM:
                           00000135  00F5   180 	.BLKB	LOG$C_NAMLENGTH		; buffer for equivalent name
                                     0135   181 LOGI_LOGNAM_LST:
                           000000A5' 0135   182 	.LONG	LOGI_Q_LOGNAM		; pointers to descriptors
                           000000AD' 0139   183 	.LONG	LOGI_Q_EQUNAM		;
                                     013D   184 LOGI_TRANS_LST:
                           00000141  013D   185 	.BLKL	1			; pointer to table name
                                     0141   186 LOGI_L_TABLE:
                           00000145  0141   187 	.BLKL	1			; resultant table
                                     0145   188 
                                     0145   189 ;
                                     0145   190 ; Text
                                     0145   191 ;
                                     0145   192 
                                 00000000   193 	.PSECT	SHOW$MSG_TEXT	BYTE,RD,NOWRT,NOEXE
                                     0000   194 
                                     0000   195 LOGI_L_TABNAM:
                           0000000C' 0000   196 	.LONG	LOGI_T_SYSTEM
                           00000013' 0004   197 	.LONG	LOGI_T_GROUP
                           00000019' 0008   198 	.LONG	LOGI_T_PROCESS
                                     000C   199 LOGI_T_SYSTEM:
               6D 65 74 73 79 73 00' 000C   200 	.ASCIC	/system/
                                 06  000C       
                                     0013   201 LOGI_T_GROUP:
                  70 75 6F 72 67 00' 0013   202 	.ASCIC	/group/
                                 05  0013       
                                     0019   203 LOGI_T_PROCESS:
            73 73 65 63 6F 72 70 00' 0019   204 	.ASCIC	/process/
                                 07  0019       
SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page   5
X0101           DECLARATIONS                                                                                                     (5)

                                     0021   206 
                                     0021   207 	.SBTTL	SHOW$LOGI_CLI	- SHOW LOGICAL CLI interface
                                     0021   208 
                                     0021   209 ;++
                                     0021   210 ; FUNCTIONAL DESCRIPTION:
                                     0021   211 ;
                                     0021   212 ;	CLI interface and main control flow of SHOW LOGICAL command.
                                     0021   213 ;
                                     0021   214 ;
                                     0021   215 ; CALLING SEQUENCE:
                                     0021   216 ;
                                     0021   217 ;	CALLS
                                     0021   218 ;
                                     0021   219 ; INPUT PARAMETERS:
                                     0021   220 ;
                                     0021   221 ;	CLI$A_UTILSERV(AP) = address of CLI utility service routine
                                     0021   222 
                                     0021   223 ;
                                     0021   224 ; IMPLICIT INPUTS:
                                     0021   225 ;
                                     0021   226 ;	NONE
                                     0021   227 ;
                                     0021   228 ; OUTPUT PARAMETERS:
                                     0021   229 ;
                                     0021   230 ;	NONE
                                     0021   231 ;
                                     0021   232 ; IMPLICIT OUTPUTS:
                                     0021   233 ;
                                     0021   234 ;	NONE
                                     0021   235 ;
                                     0021   236 ; COMPLETION CODES:
                                     0021   237 ;
                                     0021   238 ;	R0 =	SS$_NORMAL  
                                     0021   239 ;		SS$_NOTRAN  : no tranlation found for logical name
                                     0021   240 ;		SHOW$_BADLOGIC : scratch area overflow
                                     0021   241 ;		anythin else : error code returned
                                     0021   242 ;
                                     0021   243 ; SIDE EFFECTS:
                                     0021   244 ;
                                     0021   245 ;	NONE
                                     0021   246 ;
                                     0021   247 ; REGISTER USAGE:
                                     0021   248 ;
                                     0021   249 ;
                                     0021   250 ;--
                                     0021   251 
                                 00000000   252 	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
                               0000' 0000   253 	.ENTRY	SHOW$LOGI_CLI,0
                                     0002   254 
                                     0002   255 ;
                                     0002   256 ; Initialize
                                     0002   257 ;
                                     0002   258 
       0000'CF   00000000'8F     D0  0002   259 	MOVL	#SS$_NORMAL,W^SHOW$L_STATUS
                                     000B   260 					; assume success
                                     000B   261 
                                     000B   262 ;
SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page   6
X0101           SHOW$LOGI_CLI - SHOW LOGICAL CLI interface                                                                       (5)

                                     000B   263 ; Parse qualifiers
                                     000B   264 ;
                                     000B   265 
                     0099'CF     9F  000B   266 	PUSHAB	W^LOGI_L_BITLS		; bitlist
                     0000'CF     9F  000F   267 	PUSHAB	W^SHOW$A_CLIWORK	; CLI work area
                     0000'CF     9F  0013   268 	PUSHAB	W^LOGI_A_GETQUAL	; request get qualifiers
         08 BC            03     FB  0017   269 	CALLS	#3,@CLI$A_UTILSERV(AP)	; call CLI utitlity address
            03            00     EF  001B   270 	EXTZV	#0,#3,W^LOGI_L_BITLS,R1	; test /PROCESS, /GROUP and /SYSTEM
            51       0099'CF         001E       
                          05     12  0022   271 	BNEQU	10$			; branch if any one set
       0099'CF            07     C8  0024   272 	BISL	#7,W^LOGI_L_BITLS	; if they are all clear, set them all
                                     0029   273 
                                     0029   274 ;
                                     0029   275 ; get input parameter
                                     0029   276 ;
                                     0029   277 
                                     0029   278 10$:
                     0099'CF     9F  0029   279 	PUSHAB	W^LOGI_L_BITLS		; bitlist
                     0000'CF     9F  002D   280 	PUSHAB	W^SHOW$A_CLIWORK	; CLI work area
                     007D'CF     9F  0031   281 	PUSHAB	W^LOGI_A_GETINP		; get input paramter
         08 BC            03     FB  0035   282 	CALLS	#3,@CLI$A_UTILSERV(AP)	; call CLI
            50       0000'CF     D0  0039   283 	MOVL	W^SHOW$L_STATUS,R0	; load status code set by action routine
       0099'CF            04     E0  003E   284 	BBS	#LOGI_V_LOGN,W^LOGI_L_BITLS,90$
                          3B         0043       
                                     0044   285 					; all done if parameter was present
                                     0044   286 
                                     0044   287 ;
                                     0044   288 ; /ALL qualifier or no parameter present
                                     0044   289 ;
                                     0044   290 
                                     0044   291 	$EXPREG_S	-		; expand program region for scratch
                                     0044   292 		PAGCNT=#SCRATCH_PAGES,-
                                     0044   293 		RETADR=W^LOGI_Q_SCRATCH,-
                                     0044   294 		ACMODE=#USER_MODE,-
                                     0044   295 		REGION=#PROGRAM_REGION
            27            50     E9  0055   296 	BLBC	R0,90$			; Branch if error
                                     0058   297 
       0141'CF            02     9A  0058   298 	MOVZBL	#LOG$C_PROCESS,W^LOGI_L_TABLE
                                     005D   299 					; assume codes are contiguous
                                     005D   300 20$:
       0099'CF       0141'CF     E1  005D   301 	BBC	W^LOGI_L_TABLE,W^LOGI_L_BITLS,30$
                          15         0064       
                                     0065   302 					; is corresponding qualifier present
                                     0065   303 	$CMKRNL_S	W^LOGI_COPY	; copy logical name table
            0A            50     E9  0072   304 	BLBC	R0,90$			; branch if error
       01FD'CF            00     FB  0075   305 	CALLS	#0,W^LOGI_PRINT		; format and print info
                                     007A   306 30$:
            DE       0141'CF     F4  007A   307 	SOBGEQ	W^LOGI_L_TABLE,20$
                                     007F   308 					; repeat for all tables
                                     007F   309 
                                     007F   310 
                                     007F   311 ;
                                     007F   312 ; exit
                                     007F   313 ;
                                     007F   314 
                                     007F   315 90$:
       0000'CF            50     D0  007F   316 	MOVL	R0,W^SHOW$L_STATUS	; save status
SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page   7
X0101           SHOW$LOGI_CLI - SHOW LOGICAL CLI interface                                                                       (5)

                                 04  0084   317 	RET				; and return
                                     0085   318 
SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page   8
X0101           LOGI_LOGN_PRES - action routine for input param                                                                  (6)

                                     0085   320 	.SBTTL	LOGI_LOGN_PRES	- action routine for input parameter present
                                     0085   321 ;++
                                     0085   322 ; FUNCTIONAL DESCRIPTION:
                                     0085   323 ;
                                     0085   324 ;	Action routine called by the CLI if an input parameter is found present.
                                     0085   325 ;
                                     0085   326 ;
                                     0085   327 ; CALLING SEQUENCE:
                                     0085   328 ;
                                     0085   329 ;	CALLS
                                     0085   330 ;
                                     0085   331 ; INPUT PARAMETERS:
                                     0085   332 ;
                                     0085   333 ;	NONE
                                     0085   334 ;
                                     0085   335 ; IMPLICIT INPUTS:
                                     0085   336 ;
                                     0085   337 ;	Input parameter descriptor  : CLI$Q_RQDESC+LOGI_A_GETIN
                                     0085   338 ;
                                     0085   339 ; OUTPUT PARAMETERS:
                                     0085   340 ;
                                     0085   341 ;	NONE
                                     0085   342 ;
                                     0085   343 ; IMPLICIT OUTPUTS:
                                     0085   344 ;
                                     0085   345 ;	NONE
                                     0085   346 ;
                                     0085   347 ; COMPLETION CODES:
                                     0085   348 ;
                                     0085   349 ;	R0 =	SS$_NORMAL  : success
                                     0085   350 ;		SS$_NOTRAN  : no translation for logical name
                                     0085   351 ;		anything else : error code returned by system service
                                     0085   352 ;
                                     0085   353 ; SIDE EFFECTS:
                                     0085   354 ;
                                     0085   355 ;	NONE
                                     0085   356 ;
                                     0085   357 ; REGISTER USAGE:
                                     0085   358 ;
                                     0085   359 ;	R6 = logical name table code
                                     0085   360 ;	R9 = search mask
                                     0085   361 ;	R10= counter for number of recursions
                                     0085   362 ;	R11= scratch
                                     0085   363 ;
                                     0085   364 ;
                                     0085   365 ;--
                                     0085   366 
                                 00000085   367 	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
                                     0085   368 
                                     0085   369 LOGI_LOGN_PRES:
                               0E7C  0085   370 	.WORD	^M<R2,R3,R4,R5,R6,R9,R10,R11>
                                     0087   371 
                                     0087   372 ;
                                     0087   373 ; translate logical name
                                     0087   374 ;
                                     0087   375 
                                     0087   376 
SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page   9
X0101           LOGI_LOGN_PRES - action routine for input param                                                                  (6)

            03            00     EF  0087   377 	EXTZV	#0,#3,W^LOGI_L_BITLS,R9	; build search mask
            59       0099'CF         008A       
            59            59     D2  008E   378 	MCOML	R9,R9			; for logical name translation
            52       007D'CF     DE  0091   379 	MOVAL	W^LOGI_A_GETINP,R2	; address of parameter descriptor block
            51       0008 C2     3C  0096   380 	MOVZWL	W^CLI$W_RQSIZE(R2),R1	; get length of logical name
       00A5'CF            51     B0  009B   381 	MOVW	R1,W^LOGI_Q_LOGNAM	; build descriptor to logical name
         0C B2            51     28  00A0   382 	MOVC3	R1,@CLI$Q_RQDESC+4(R2),W^LOGI_T_LOGNAM
                     00B5'CF         00A4       
                                     00A7   383 					; copy logical name
                          5A     D4  00A7   384 	CLRL	R10			; indicate nothing translated yet
                                     00A9   385 
                                     00A9   386 10$:
                                     00A9   387 	$TRNLOG_S	-		; translate logical name
                                     00A9   388 		LOGNAM=W^LOGI_Q_LOGNAM,-; descriptor to logical name
                                     00A9   389 		RSLBUF=W^LOGI_Q_EQUNAM,-; resulting buffer descriptor
                                     00A9   390 		RSLLEN=W^LOGI_Q_EQUNAM,-; resulting length
                                     00A9   391 		TABLE=W^LOGI_L_TABLE,-	; resultant table
                                     00A9   392 		DSBMSK=R9		; search mask
            03            50     E8  00C4   393 	BLBS	R0,12$			; branch if error
                          0089   31  00C7   394 	BRW	90$			;
                                     00CA   395 12$:
   00000000'8F            50     D1  00CA   396 	CMPL	R0,#SS$_NOTRAN		; was equivalent name found ?
                          07     12  00D1   397 	BNEQU	20$			; branch if found
                          5A     D5  00D3   398 	TSTL	R10			; anything translated yet ?
                          66     13  00D5   399 	BEQLU	80$			; branch if nothing yet
                          0079   31  00D7   400 	BRW	90$			; else exit
                                     00DA   401 
                                     00DA   402 ;
                                     00DA   403 ; construct strings and print them
                                     00DA   404 ;
                                     00DA   405 
                                     00DA   406 20$:
            1B       00F5'CF     91  00DA   407 	CMPB	W^LOGI_T_EQUNAM,#27	; 1ST char. of equiv. string an escape ?
                          0A     12  00DF   408 	BNEQU	30$			; branch if no
       00AD'CF            04     A2  00E1   409 	SUBW2	#4,W^LOGI_Q_EQUNAM	; adjust resultant length
       00B1'CF            04     C0  00E6   410 	ADDL2	#4,W^LOGI_Q_EQUNAM+4	; adjust pointer
                                     00EB   411 30$:
            53       0141'CF     9A  00EB   412 	MOVZBL	W^LOGI_L_TABLE,R3	; retrieve logical name table code
       013D'CF       0000'CF43   D0  00F0   413 	MOVL	W^LOGI_L_TABNAM[R3],W^LOGI_TRANS_LST
                                     00F8   414 					; insert poiner to proper string
                 00000000'8F     DD  00F8   415 	PUSHL	#SHOW$_TRNLOG		; message code
                     0135'CF     DF  00FE   416 	PUSHAL	W^LOGI_LOGNAM_LST	; parameter list
       0000'CF            02     FB  0102   417 	CALLS	#2,W^SHOW$PRINT_MSG	; print logical name, equivalent and table
            5B       00AD'CF     3C  0107   418 	MOVZWL	W^LOGI_Q_EQUNAM,R11	; get length of resultant string
       00A5'CF            5B     B0  010C   419 	MOVW	R11,W^LOGI_Q_LOGNAM	; feed back as input string
       00AD'CF       0040 8F     B0  0111   420 	MOVW	#LOG$C_NAMLENGTH,W^LOGI_Q_EQUNAM
                                     0118   421 					; restore original length
       00F5'CF            5B     28  0118   422 	MOVC3	R11,W^LOGI_T_EQUNAM,W^LOGI_T_LOGNAM
                     00B5'CF         011D       
                                     0120   423 					; copy string
                          5B     D7  0120   424 	DECL	R11			; test for ending colon
            52       00B5'CF     DE  0122   425 	MOVAL	W^LOGI_T_LOGNAM,R2	; point to string
            52            5B     C0  0127   426 	ADDL2	R11,R2			; point to last character in input string
            3A            62     91  012A   427 	CMPB	(R2),#^A/:/		; is it a colon ?
                          05     12  012D   428 	BNEQU	40$			; branch if not a colon
       00A5'CF            5B     B0  012F   429 	MOVW	R11,W^LOGI_Q_LOGNAM	; make string one character shorter
                                     0134   430 40$:
SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page  10
X0101           LOGI_LOGN_PRES - action routine for input param                                                                  (6)

            5A            0A     F3  0134   431 	AOBLEQ	#MAX_TRAN_LEVELS,R10,50$ ; try again unless limit on recursion reached
                          02         0137       
                          03     11  0138   432 	BRB	80$			;
                                     013A   433 50$:
                          FF6C   31  013A   434 	BRW	10$			;
                                     013D   435 
                                     013D   436 ;
                                     013D   437 ; exits
                                     013D   438 ;
                                     013D   439 
                                     013D   440 80$:
                 00000000'8F     DD  013D   441 	PUSHL	#SHOW$_NOTRAN		; message code for no translation
                     0085'CF     DF  0143   442 	PUSHAL	W^CLI$Q_RQDESC+LOGI_A_GETINP
                                     0147   443 					; input parameter
       0000'CF            02     FB  0147   444 	CALLS	#2,W^SHOW$PRINT_MSG	; print message
            50   10000000 8F     C8  014C   445 	BISL	#STS$M_INHIB_MSG,R0	; inhibit furhter message output
                                     0153   446 90$:
       0000'CF            50     D0  0153   447 	MOVL	R0,W^SHOW$L_STATUS	; Save status
                                 04  0158   448 	RET
SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page  11
X0101           LOGI_COPY - copy logical name table                                                                              (7)

                                     0159   450 	.SBTTL	LOGI_COPY	- copy logical name table
                                     0159   451 ;++
                                     0159   452 ; FUNCTIONAL DESCRIPTION:
                                     0159   453 ;
                                     0159   454 ;	Copies the relevant name table into a scratch area for later formatting
                                     0159   455 ;	and printing
                                     0159   456 
                                     0159   457 ;
                                     0159   458 ;
                                     0159   459 ; CALLING SEQUENCE:
                                     0159   460 ;
                                     0159   461 ;	CALLS
                                     0159   462 ;
                                     0159   463 ; INPUT PARAMETERS:
                                     0159   464 ;
                                     0159   465 ;	none
                                     0159   466 
                                     0159   467 ;
                                     0159   468 ; IMPLICIT INPUTS:
                                     0159   469 ;
                                     0159   470 ;	LOGI_L_TABLE : code for logical name table beeing processed
                                     0159   471 ;	LOGI_W_GROUP : current process's group number
                                     0159   472 ;
                                     0159   473 ; OUTPUT PARAMETERS:
                                     0159   474 ;
                                     0159   475 ;	NONE
                                     0159   476 ;
                                     0159   477 ; IMPLICIT OUTPUTS:
                                     0159   478 ;
                                     0159   479 ;	NONE
                                     0159   480 ;
                                     0159   481 ; COMPLETION CODES:
                                     0159   482 ;
                                     0159   483 ;	R0	= SS$_NORMAL	if no error encountered
                                     0159   484 ;		  SHOW$_BADLOGIC : scratch area overflow
                                     0159   485 ;
                                     0159   486 ; SIDE EFFECTS:
                                     0159   487 ;
                                     0159   488 ;	NONE
                                     0159   489 ;
                                     0159   490 ; REGISTER USAGE:
                                     0159   491 ;
                                     0159   492 ;	R3 =	code for logical name table
                                     0159   493 ;	R6=	current pointer to scratch area
                                     0159   494 ; 	R7=	updated pointer to scratch area
                                     0159   495 ;	R8= 	limit pointer of scratch area
                                     0159   496 ;	R9 =	Head of logical name queue
                                     0159   497 ;	R11=	Pointer to current logical name block
                                     0159   498 ;	R10= 	counter
                                     0159   499 ;
                                     0159   500 ;--
                                     0159   501 
                                 00000159   502 	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
                                     0159   503 LOGI_COPY:
                               0FC0  0159   504 	.WORD	^M<R6,R7,R8,R9,R10,R11>
                                     015B   505 
                                     015B   506 ;
SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page  12
X0101           LOGI_COPY - copy logical name table                                                                              (7)

                                     015B   507 ; lock relevant name table for read ( name table code in R3)
                                     015B   508 ;
                                     015B   509 
            53       0141'CF     9A  015B   510 	MOVZBL	W^LOGI_L_TABLE,R3	; code for logical name table
            54   00000000'EF     D0  0160   511 	MOVL	SCH$GL_CURPCB,R4	; address of current PCB
                          18     BB  0167   512 	PUSHR	#^M<R3,R4>		; save registers for unlock
            7E   FFFFFFFF 8F     D0  0169   513 	MOVL	#-1,-(SP)		; signal don't check for group
            01            53     91  0170   514 	CMPB	R3,#LOG$C_GROUP		; are we processing /GROUP ?
                          04     12  0173   515 	BNEQU	5$			; branch if no
            6E         22 A4     3C  0175   516 	MOVZWL	PCB$W_GRP(R4),(SP)	; save current process's group
                                     0179   517 5$:
            02            53     91  0179   518 	CMPB	R3,#LOG$C_PROCESS	; is it the process name table ?
                          09     12  017C   519 	BNEQU	7$			; branch if not process
            5B   00000000'9F     DE  017E   520 	MOVAL	@#CTL$GL_PLTFL,R11	; get process log. name queue head
                          0E     11  0185   521 	BRB	8$			; and skip the locking
                                     0187   522 7$:
                                     0187   523 ;%%%
                 00000000'EF     16  0187   524 	JSB	LOG$LOCKR		; request lock
            5B   00000000'EF43   D0  018D   525 	MOVL	LOG$AL_LOGTBL[R3],R11	; get sytem or group l.n. queue head
                                     0195   526 
                                     0195   527 ;
                                     0195   528 ; initialize
                                     0195   529 ;
                                     0195   530 
                                     0195   531 8$:
            57       009D'CF     D0  0195   532 	MOVL	W^LOGI_Q_SCRATCH,R7	; start of scratch area
            58       00A1'CF     D0  019A   533 	MOVL	W^LOGI_Q_SCRATCH+4,R8	; limit to scratch area
            59            5B     D0  019F   534 	MOVL	R11,R9			; remember address of queue header
                                     01A2   535 
                                     01A2   536 ;
                                     01A2   537 ; scan logical name table
                                     01A2   538 ;
                                     01A2   539 
                                     01A2   540 10$:
            5B            6B     D0  01A2   541 	MOVL	LOG$L_LTFL(R11),R11	; next logical name block
            59            5B     D1  01A5   542 	CMPL	R11,R9			; head of queue again ?
                          33     13  01A8   543 	BEQLU	90$			; branch if no more
                          6E     D5  01AA   544 	TSTL	(SP)			; processing /GROUP ?
                          06     19  01AC   545 	BLSS	12$			; branch if not /GROUP
         0C AB            6E     B1  01AE   546 	CMPW	(SP),LOG$W_GROUP(R11)	; compare with group of creator
                          EE     12  01B2   547 	BNEQU	10$			; branch  if no match
                                     01B4   548 12$:
                                     01B4   549 ;
                                     01B4   550 ; copy logical name and equivalent name
                                     01B4   551 ;
                                     01B4   552 
                          5A     D4  01B4   553 	CLRL	R10			; counter
            51         14 AB     DE  01B6   554 	MOVAL	LOG$T_NAME(R11),R1	; address of 1st counted string
                                     01BA   555 20$:
            50            61     9A  01BA   556 	MOVZBL	(R1),R0			; length of counted string
                          50     D6  01BD   557 	INCL	R0			; add one for count
            56            57     D0  01BF   558 	MOVL	R7,R6			; sabe pointer to scratch area
            57            50     C0  01C2   559 	ADDL	R0,R7			; update pointer to scratch
            58            57     D1  01C5   560 	CMPL	R7,R8			; test for overflow
                          0A     1E  01C8   561 	BGEQU	80$			; branch if overflow
            61            50     28  01CA   562 	MOVC3	R0,(R1),(R6)		; copy one counted string
                          66         01CD       
SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page  13
X0101           LOGI_COPY - copy logical name table                                                                              (7)

            5A            01     F3  01CE   563 	AOBLEQ	#1,R10,20$		; do it twice
                          E8         01D1       
                          CE     11  01D2   564 	BRB	10$			; and try next entry
                                     01D4   565 
                                     01D4   566 ;
                                     01D4   567 ; exits
                                     01D4   568 ;
                                     01D4   569 
                                     01D4   570 80$:
            50   00781122 8F     D0  01D4   571 	MOVL	#SHOW$_BADLOGIC,R0	; scratch area overflow
                          09     11  01DB   572 	BRB	98$			; and return
                                     01DD   573 90$:
                          67     D4  01DD   574 	CLRL	(R7)			; end by null string (just in case)
            50   00000000'8F     D0  01DF   575 	MOVL	#SS$_NORMAL,R0		; normal status
                                     01E6   576 98$:
                          8E     D5  01E6   577 	TSTL	(SP)+			; clean stack
                          18     BA  01E8   578 	POPR	#^M<R3,R4>		; restore save registers
            02            53     91  01EA   579 	CMPB	R3,#LOG$C_PROCESS	; was it the process logical name table
                          0D     13  01ED   580 	BEQLU	99$			; skip unlocking if process
                          01     BB  01EF   581 	PUSHR	#^M<R0>			; save return code
                                     01F1   582 ;%%%
                 00000000'EF     16  01F1   583 	JSB	LOG$UNLOCK		; unlock logical name table
                                     01F7   584 ;%%%
                                     01F7   585 	SETIPL	#0			; drop IPL
                          01     BA  01FA   586 	POPR	#^M<R0>			; restore return code
                                     01FC   587 99$:
                                 04  01FC   588 	RET				; and return
SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page  14
X0101           LOGI_COPY - copy logical name table                                                                              (9)

                                     01FD   590 
                                     01FD   591 	.SBTTL	LOGI_PRINT	- Format and print list of logical names
                                     01FD   592 ;++
                                     01FD   593 ; FUNCTIONAL DESCRIPTION:
                                     01FD   594 ;
                                     01FD   595 ;	This routine formats and prints the list of logical names and
                                     01FD   596 ;	their equivalent previously copied into a scratch area.
                                     01FD   597 ;
                                     01FD   598 ;
                                     01FD   599 ; CALLING SEQUENCE:
                                     01FD   600 ;
                                     01FD   601 ;	CALLS
                                     01FD   602 ;
                                     01FD   603 ; INPUT PARAMETERS:
                                     01FD   604 ;
                                     01FD   605 ;	NONE
                                     01FD   606 ;
                                     01FD   607 ; IMPLICIT INPUTS:
                                     01FD   608 ;
                                     01FD   609 ;	LOGI_L_TABLE	= code indicating logical name table beeing processed
                                     01FD   610 ;	LOGI_SCRATCH	= Pointer to scratch area. 
                                     01FD   611 ;			( end signaled by zero length counted string)
                                     01FD   612 ;
                                     01FD   613 ; OUTPUT PARAMETERS:
                                     01FD   614 ;
                                     01FD   615 ;	NONE
                                     01FD   616 ;
                                     01FD   617 ; IMPLICIT OUTPUTS:
                                     01FD   618 ;
                                     01FD   619 ;	NONE
                                     01FD   620 ;
                                     01FD   621 ; COMPLETION CODES:
                                     01FD   622 ;
                                     01FD   623 ;	R0	= SS$_NORMAL
                                     01FD   624 ;
                                     01FD   625 ; SIDE EFFECTS:
                                     01FD   626 ;
                                     01FD   627 ;	NONE
                                     01FD   628 ;
                                     01FD   629 ; REGISTER USAGE:
                                     01FD   630 ;
                                     01FD   631 ;	R3	= code for  logical name table
                                     01FD   632 ;	R10	= length of current counted string
                                     01FD   633 ;	R11	= pointer to scratch area
                                     01FD   634 ;	R9	= counter
                                     01FD   635 ;
                                     01FD   636 ;--
                                     01FD   637 
                                 000001FD   638 	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
                                     01FD   639 
                                     01FD   640 LOGI_PRINT:
                               0E08  01FD   641 	.WORD	^M<R3,R9,R10,R11>
                                     01FF   642 
                                     01FF   643 ;
                                     01FF   644 ; print title
                                     01FF   645 ;
                                     01FF   646 
SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page  15
X0101           LOGI_PRINT - Format and print list of logical n                                                                  (9)

            53       0141'CF     9A  01FF   647 	MOVZBL	W^LOGI_L_TABLE,R3	; get code for logical name table
                 00000000'8F     DD  0204   648 	PUSHL	#SHOW$_LOGTTL		; message code
                     0000'CF43   DF  020A   649 	PUSHAL	W^LOGI_L_TABNAM[R3]	; text string for name table
       0000'CF            02     FB  020F   650 	CALLS	#2,W^SHOW$PRINT_MSG	; print title
                                     0214   651 
                                     0214   652 ;
                                     0214   653 ; initialize
                                     0214   654 ;
                                     0214   655 
            5B       009D'CF     D0  0214   656 	MOVL	W^LOGI_Q_SCRATCH,R11	; pointer to scratch area
                          59     D4  0219   657 	CLRL	R9			; counter
                          50     D4  021B   658 	CLRL	R0			; assume failure
                                     021D   659 
                                     021D   660 ;
                                     021D   661 ; scan scratch area
                                     021D   662 ;
                                     021D   663 
                                     021D   664 10$:
            5A            6B     9A  021D   665 	MOVZBL	(R11),R10		; size of counted string
                          38     13  0220   666 	BEQLU	90$			; branch if null
            1B         01 AB     91  0222   667 	CMPB	1(R11),#27		; 1st character escape ?
                          09     12  0226   668 	BNEQU	20$			; branch if no
            5A            04     82  0228   669 	SUBB2	#4,R10			; adjust length
            5B            04     C0  022B   670 	ADDL	#4,R11			; adjust pointer
            6B            5A     90  022E   671 	MOVB	R10,(R11)		; store adjusted length
                                     0231   672 20$:
       0135'CF49          5B     D0  0231   673 	MOVL	R11,W^LOGI_LOGNAM_LST[R9]	; make FAO entry point to string
                          5A     D6  0237   674 	INCL	R10			; add one for counted string
            5B            5A     C0  0239   675 	ADDL2	R10,R11			; skip to next string
            59            01     F3  023C   676 	AOBLEQ	#1,R9,10$		; do it twice
                          DD         023F       
                                     0240   677 
                                     0240   678 ;
                                     0240   679 ; format and print 2 counted strings
                                     0240   680 ;
                                     0240   681 
            50   00000000'8F     D0  0240   682 	MOVL	#SS$_NORMAL,R0		; signal success
                          59     D4  0247   683 	CLRL	R9			; reset counter
                 00000000'8F     DD  0249   684 	PUSHL	#SHOW$_LOGTRAN		; message code
                     0135'CF     DF  024F   685 	PUSHAL	W^LOGI_LOGNAM_LST	; parameter list
       0000'CF            02     FB  0253   686 	CALLS 	#2,W^SHOW$PRINT_MSG	; issue message
                          C3     11  0258   687 	BRB	10$			; and try next pair of strings
                                     025A   688 
                                     025A   689 ;
                                     025A   690 ; exit
                                     025A   691 ;
                                     025A   692 
                                     025A   693 90$:
            1C            50     E8  025A   694 	BLBS	R0,99$			; all done if anything printed
            53       0141'CF     9A  025D   695 	MOVZBL	W^LOGI_L_TABLE,R3	; restore table code
                 00000000'8F     DD  0262   696 	PUSHL	#SHOW$_LOGEMPTY		; mmessage id
                     0000'CF43   DF  0268   697 	PUSHAL	W^LOGI_L_TABNAM[R3]	; pointer to text 
       0000'CF            02     FB  026D   698 	CALLS	#2,W^SHOW$PRINT_MSG	; issue message
            50   00000000'8F     D0  0272   699 	MOVL	#SS$_NORMAL,R0		; make everything OK
                                     0279   700 99$:
                                 04  0279   701 	RET				; return
                                     027A   702 	.END
SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page  16
SYMBOL TABLE                                                                                                                     (9)

$$$            = 00000004            CLI$K_QUALDEF    00000014            CLI$M_DBGEXCP  = 00010000            
$$$GBL         = 00000000            CLI$K_REQDESC    0000001C            CLI$M_DBGTRU   = 00000002            
$CLI.          = 0000007D R     03   CLI$K_SHDV_ALLO= 00000001            CLI$M_DEBUG    = 00000001            
$CLI..         = 00000099 R     03   CLI$K_SHDV_BRIE= 00000002            CLI$M_DUMMY    = 00000002            
$QUALNUM$      = 00000002            CLI$K_SHDV_FULL= 00000003            CLI$M_EXPNAM   = 00000004            
BIT...         = 00000005            CLI$K_SHDV_MOUN= 00000004            CLI$M_INDIRECT = 00000010            
CLI$A_ABSACT     00000014            CLI$K_SHLG_ALL = 00000004            CLI$M_KEYVALU  = 00000002            
CLI$A_ERRACT     00000004            CLI$K_SHLG_GROU= 00000002            CLI$M_LASTVAL  = 00000001            
CLI$A_FLSACT     00000010            CLI$K_SHLG_PROC= 00000003            CLI$M_MOREINP  = 00000004            
CLI$A_IMGFILED   00000010            CLI$K_SHLG_SYST= 00000001            CLI$M_MOREVALS = 00000001            
CLI$A_IMGHDADR   0000000C            CLI$K_SHOW_DAYT= 00000001            CLI$M_PARMDEF  = 00000008            
CLI$A_PROGXFER   00000004            CLI$K_SHOW_DEFA= 00000003            CLI$M_PARMPRS  = 00000001            
CLI$A_PRSACT     00000010            CLI$K_SHOW_DEVI= 0000000A            CLI$M_PARMREQ  = 00000001            
CLI$A_QDVALADR   00000008            CLI$K_SHOW_LOGI= 00000004            CLI$M_QDEXPA   = 00000004            
CLI$A_QUALST     00000018            CLI$K_SHOW_MAGT= 00000012            CLI$M_QDUSRV   = 00000002            
CLI$A_RQADDR     0000000C            CLI$K_SHOW_NETW= 00000010            CLI$M_QUALEXP  = 00000002            
CLI$A_TRUACT     0000000C            CLI$K_SHOW_PRIN= 0000000F            CLI$M_QUALTRU  = 00000001            
CLI$A_UTILSERV   00000008            CLI$K_SHOW_PROC= 0000000C            CLI$M_TRMVRBLV = 00000300            
CLI$B_BITNUM     00000001            CLI$K_SHOW_PROT= 00000005            CLI$M_VERIFY   = 00000004            
CLI$B_QDBLKSIZ   00000000            CLI$K_SHOW_QUEU= 00000006            CLI$M_VFYINP   = 00000020            
CLI$B_QDCODE     00000001            CLI$K_SHOW_RMS_= 00000011            CLI$Q_QDVALDESC  00000004            
CLI$B_QDFLGS     00000002            CLI$K_SHOW_STAT= 0000000B            CLI$Q_RQDESC     00000008            
CLI$B_QDSTAT     00000003            CLI$K_SHOW_SYMB= 00000007            CLI$S_PRITYP   = 00000004            
CLI$B_RQFLGS     00000002            CLI$K_SHOW_SYST= 0000000D            CLI$S_SUBTYP   = 00000004            
CLI$B_RQINDX     00000001            CLI$K_SHOW_TERM= 0000000E            CLI$S_TRMVRBLV = 00000002            
CLI$B_RQSTAT     00000003            CLI$K_SHOW_TIME= 00000002            CLI$V_ABSADR   = 00000001            
CLI$B_RQTYPE     00000000            CLI$K_SHOW_TRAN= 00000008            CLI$V_ALLOCCUR = 00000000            
CLI$C_QDBITS     00000014            CLI$K_SHOW_WORK= 00000009            CLI$V_BATCH    = 00000003            
CLI$C_QUALDEF    00000014            CLI$K_SHPR_ACCO= 00000002            CLI$V_CONCATINP= 00000001            
CLI$C_REQDESC    0000001C            CLI$K_SHPR_ALL = 00000005            CLI$V_DBGEXCP  = 00000010            
CLI$C_WORKAREA   00000080            CLI$K_SHPR_PRIV= 00000003            CLI$V_DBGTRU   = 00000001            
CLI$K_ASCIIVAL = 00000041            CLI$K_SHPR_QUOT= 00000001            CLI$V_DEBUG    = 00000000            
CLI$K_CLISERV  = 00000005            CLI$K_SHPR_SUBP= 00000004            CLI$V_DUMMY    = 00000001            
CLI$K_ENDPRM1  = 00000030            CLI$K_SHQU_ALL = 00000001            CLI$V_EXPNAM   = 00000002            
CLI$K_ENDPRM2  = 00000031            CLI$K_SHQU_BATC= 00000002            CLI$V_INDIRECT = 00000004            
CLI$K_ENDPRM3  = 00000032            CLI$K_SHQU_BRIE= 00000003            CLI$V_KEYVALU  = 00000001            
CLI$K_ENDPRM4  = 00000033            CLI$K_SHQU_DEVI= 00000004            CLI$V_LASTVAL  = 00000000            
CLI$K_FILSPEC  = 00000044            CLI$K_SHQU_ENTR= 00000005            CLI$V_MOREINP  = 00000002            
CLI$K_GETCMD   = 00000001            CLI$K_SHQU_FULL= 00000006            CLI$V_MOREVALS = 00000000            
CLI$K_GETOPT   = 00000003            CLI$K_SHSS_PROC= 00000001            CLI$V_PARMDEF  = 00000003            
CLI$K_GETQUAL  = 00000002            CLI$K_SHSY_ALL = 00000003            CLI$V_PARMPRS  = 00000000            
CLI$K_INITPRS  = 00000000            CLI$K_SHSY_GLOB= 00000001            CLI$V_PARMREQ  = 00000000            
CLI$K_INPSPEC  = 00000001            CLI$K_SHSY_LOCA= 00000002            CLI$V_PRITYP   = 00000004            
CLI$K_INPUT1   = 00000010            CLI$K_SHTE_PERM= 00000001            CLI$V_QDEXPA   = 00000002            
CLI$K_INPUT2   = 00000011            CLI$K_UTILOPR  = 00000000            CLI$V_QDUSRV   = 00000001            
CLI$K_INPUT3   = 00000012            CLI$K_VALCONV  = 00000004            CLI$V_QUALEXP  = 00000001            
CLI$K_INPUT4   = 00000013            CLI$K_WORKAREA   00000080            CLI$V_QUALTRU  = 00000000            
CLI$K_KEYVAL   = 00000043            CLI$L_CLIFLAG    00000018            CLI$V_SUBTYP   = 00000000            
CLI$K_KEYWORD  = 00000042            CLI$L_INIARGCNT  00000000            CLI$V_TRMVRBLV = 00000008            
CLI$K_NUMERVAL = 00000040            CLI$L_LINKFLAG   00000014            CLI$V_VERIFY   = 00000002            
CLI$K_OUTPUT1  = 00000020            CLI$L_RQVALU     0000000C            CLI$V_VFYINP   = 00000005            
CLI$K_OUTPUT2  = 00000021            CLI$L_USRVAL     00000014            CLI$W_QDVALSIZ   00000004            
CLI$K_OUTPUT3  = 00000022            CLI$L_WORKAREA   00000000            CLI$W_RQSIZE     00000008            
CLI$K_OUTPUT4  = 00000023            CLI$M_ABSADR   = 00000002            CLI$W_SERVCOD    00000001            
CLI$K_OUTSPEC  = 00000002            CLI$M_ALLOCCUR = 00000001            CTL$GL_PLTFL     ********   X   05   
CLI$K_PARDONE  = 00000003            CLI$M_BATCH    = 00000008            GBL...         = 00000000            
CLI$K_QDBITS     00000014            CLI$M_CONCATINP= 00000002            LOG$AL_LOGTBL    ********   X   05   
SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page  17
SYMBOL TABLE                                                                                                                     (9)

LOG$B_AMOD       0000000E            PCB$L_EFC2P      00000058            PCB$W_STATE      00000030            
LOG$B_TABLE      0000000B            PCB$L_EFC3P      0000005C            PCB$W_TMBU       00000036            
LOG$B_TYPE       0000000A            PCB$L_EFCS       00000050            PCB$W_TQCNT      0000004A            
LOG$C_GROUP    = 00000001            PCB$L_EFCU       00000054            PR$_ACCR       = 00000029            
LOG$C_LENGTH     00000014            PCB$L_EFWM       0000004C            PR$_ACCS       = 00000028            
LOG$C_NAMLENGTH= 00000040            PCB$L_OWNER      0000001C            PR$_ASTLVL     = 00000013            
LOG$C_PROCESS  = 00000002            PCB$L_PHD        00000064            PR$_ESP        = 00000001            
LOG$C_SYSTEM   = 00000000            PCB$L_PHYPCB     00000018            PR$_ICCS       = 00000018            
LOG$K_LENGTH     00000014            PCB$L_PID        00000060            PR$_ICR        = 0000001A            
LOG$LOCKR        ********   X   05   PCB$L_PQB        0000004C            PR$_IPL        = 00000012            
LOG$L_LTBL       00000004            PCB$L_SQBL       00000004            PR$_ISP        = 00000004            
LOG$L_LTFL       00000000            PCB$L_SQFL       00000000            PR$_KSP        = 00000000            
LOG$L_MBXUCB     00000010            PCB$L_STS        00000028            PR$_MAPEN      = 00000038            
LOG$T_NAME       00000014            PCB$L_UIC        00000020            PR$_NICR       = 00000019            
LOG$UNLOCK       ********   X   05   PCB$L_WSSWP      00000024            PR$_P0BR       = 00000008            
LOG$W_GROUP      0000000C            PCB$L_WTIME      0000002C            PR$_P0LR       = 00000009            
LOG$W_SIZE       00000008            PCB$T_LNAME      0000006C            PR$_P1BR       = 0000000A            
LOGI_A_GETINP    0000007D R     03   PCB$V_ASTPEN   = 00000011            PR$_P1LR       = 0000000B            
LOGI_A_GETQUAL   00000000 R     03   PCB$V_BATCH    = 0000000E            PR$_PCBB       = 00000010            
LOGI_A_QUALST    0000001C R     03   PCB$V_DELPEN   = 00000001            PR$_PME        = 0000003D            
LOGI_COPY        00000159 R     05   PCB$V_FORCPEN  = 00000002            PR$_RXCS       = 00000020            
LOGI_LOGNAM_LST  00000135 R     03   PCB$V_HIBER    = 00000013            PR$_RXDB       = 00000021            
LOGI_LOGN_PRES   00000085 R     05   PCB$V_INQUAN   = 00000003            PR$_SBIER      = 00000034            
LOGI_L_BITLS     00000099 R     03   PCB$V_LOGIN    = 00000014            PR$_SBIFS      = 00000030            
LOGI_L_TABLE     00000141 R     03   PCB$V_NETWRK   = 00000015            PR$_SBIMT      = 00000033            
LOGI_L_TABNAM    00000000 R     04   PCB$V_NOACNT   = 0000000F            PR$_SBIQC      = 00000036            
LOGI_M_ALL     = 00000008            PCB$V_NODELET  = 00000017            PR$_SBIS       = 00000031            
LOGI_M_GROU    = 00000002            PCB$V_PHDRES   = 00000012            PR$_SBISC      = 00000032            
LOGI_M_LOGN    = 00000010            PCB$V_PSWAPM   = 00000004            PR$_SBITA      = 00000035            
LOGI_M_PROC    = 00000004            PCB$V_PWRAST   = 00000016            PR$_SBR        = 0000000C            
LOGI_M_SYST    = 00000001            PCB$V_RES      = 00000000            PR$_SCBB       = 00000011            
LOGI_PRINT       000001FD R     05   PCB$V_RESPEN   = 00000005            PR$_SID        = 0000003E            
LOGI_Q_EQUNAM    000000AD R     03   PCB$V_SSFEXC   = 00000006            PR$_SIRR       = 00000014            
LOGI_Q_LOGNAM    000000A5 R     03   PCB$V_SSFEXCE  = 00000007            PR$_SISR       = 00000015            
LOGI_Q_SCRATCH   0000009D R     03   PCB$V_SSFEXCS  = 00000008            PR$_SLR        = 0000000D            
LOGI_TRANS_LST   0000013D R     03   PCB$V_SSFEXCU  = 00000009            PR$_SSP        = 00000002            
LOGI_T_EQUNAM    000000F5 R     03   PCB$V_SSRWAIT  = 0000000A            PR$_TBIA       = 00000039            
LOGI_T_GROUP     00000013 R     04   PCB$V_SUSPEN   = 0000000B            PR$_TBIS       = 0000003A            
LOGI_T_LOGNAM    000000B5 R     03   PCB$V_SWPVBN   = 00000010            PR$_TODR       = 0000001B            
LOGI_T_PROCESS   00000019 R     04   PCB$V_WAKEPEN  = 0000000C            PR$_TXCS       = 00000022            
LOGI_T_SYSTEM    0000000C R     04   PCB$V_WALL     = 0000000D            PR$_TXDB       = 00000023            
LOGI_V_ALL     = 00000003            PCB$W_APTCNT     00000034            PR$_USP        = 00000003            
LOGI_V_GROU    = 00000001            PCB$W_ASTCNT     0000003C            PR$_WCSA       = 0000002C            
LOGI_V_LOGN    = 00000004            PCB$W_BIOCNT     0000003E            PR$_WCSD       = 0000002D            
LOGI_V_PROC    = 00000002            PCB$W_BIOLM      00000040            PROGRAM_REGION = 00000000            
LOGI_V_SYST    = 00000000            PCB$W_BYTCNT     00000042            PRO_B_FLAGS      00000001            
MAX_TRAN_LEVELS= 0000000A            PCB$W_BYTLM      00000068            PRO_B_PROMPT     00000000            
PCB$B_ASTACT     0000000C            PCB$W_DIOCNT     00000044            PRO_K_LENGTH     00000002            
PCB$B_ASTEN      0000000D            PCB$W_DIOLM      00000046            PRO_M_CONCAT   = 00000001            
PCB$B_PRI        0000000B            PCB$W_FILCNT     00000048            PRO_M_IMPCAT   = 00000002            
PCB$B_PRIB       00000033            PCB$W_GPGCNT     00000038            PRO_M_LIST     = 00000004            
PCB$B_TYPE       0000000A            PCB$W_GRP        00000022            PRO_M_OPTION   = 00000008            
PCB$B_WEFC       00000032            PCB$W_MEM        00000020            PRO_M_REQ      = 00000010            
PCB$C_LENGTH     0000007C            PCB$W_MTXCNT     0000000E            PRO_M_STRING   = 00000020            
PCB$K_LENGTH     0000007C            PCB$W_PPGCNT     0000003A            PRO_V_CONCAT   = 00000000            
PCB$L_ASTQBL     00000014            PCB$W_PRCCNT     0000006A            PRO_V_IMPCAT   = 00000001            
PCB$L_ASTQFL     00000010            PCB$W_SIZE       00000008            PRO_V_LIST     = 00000002            
SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page  18
SYMBOL TABLE                                                                                                                     (9)

PRO_V_OPTION   = 00000003            SHOW$_TRNLOG     ********   X   05   SHR$_NOWILD    = 00001128            
PRO_V_REQ      = 00000004            SHR$K_SHRDEF   = 00000001            SHR$_OPENIN    = 00001098            
PRO_V_STRING   = 00000005            SHR$_ABEND     = 000010D8            SHR$_OPENOUT   = 000010A0            
QUA_B_DEFVAL     00000002            SHR$_ABENDD    = 000010E0            SHR$_OVERLAY   = 000010A8            
QUA_B_IMAGE      00000005            SHR$_ABENDT    = 000010E8            SHR$_PARSEFAIL = 00001248            
QUA_B_INDEX      00000001            SHR$_APPENDEDB = 00001000            SHR$_PURGEVER  = 00001210            
QUA_B_OFFSET     00000000            SHR$_APPENDEDR = 00001008            SHR$_READERR   = 000010B0            
QUA_B_PARMCNT    00000008            SHR$_ATPC      = 00001158            SHR$_RELCONCAT = 00001140            
QUA_G_CHNGLST    00000006            SHR$_BADBYTE   = 00001010            SHR$_REPLACED  = 000010B8            
QUA_M_BATDEF   = 00000100            SHR$_BADCOPIES = 00001160            SHR$_RMSERROR  = 000011C8            
QUA_M_CHNGLIST = 00000001            SHR$_BADDELIM  = 00001118            SHR$_SEARCHFAIL= 00001238            
QUA_M_DEFTRUE  = 00000080            SHR$_BADFIELD  = 00001018            SHR$_SYNTAX    = 000010F8            
QUA_M_FILE     = 00000004            SHR$_BADFORM   = 00001168            SHR$_SYSERROR  = 000011B0            
QUA_M_IMAGE    = 00000400            SHR$_BADJOBID  = 00001170            SHR$_SYSERRORPC= 000010F0            
QUA_M_INTDEF   = 00000200            SHR$_BADJOBNAME= 00001178            SHR$_TEXT      = 00001130            
QUA_M_KEYVAL   = 00004000            SHR$_BADKEY    = 00001108            SHR$_UNXPCTSTS = 000011D0            
QUA_M_LOCALKEY = 00000002            SHR$_BADLOGIC  = 00001120            SHR$_VALERR    = 000011E8            
QUA_M_NEG      = 00000040            SHR$_BADLOGICPC= 00001150            SHR$_WILDCONCAT= 000010C0            
QUA_M_ONEVAL   = 00002000            SHR$_BADLONG   = 00001020            SHR$_WILDOUTVER= 000010C8            
QUA_M_OUTPUT   = 00000800            SHR$_BADPRTY   = 00001180            SHR$_WRITEERR  = 000010D0            
QUA_M_PARM     = 00000010            SHR$_BADQNAME  = 00001188            SS$_NORMAL       ********   X   05   
QUA_M_VAL      = 00000020            SHR$_BADTIME   = 00001190            SS$_NOTRAN       ********   X   05   
QUA_M_VALREQ   = 00001000            SHR$_BADVALUE  = 00001110            STS$K_ERROR    = 00000002            
QUA_M_VERB     = 00000008            SHR$_BADWORD   = 00001028            STS$K_INFO     = 00000003            
QUA_S_MAXPARM  = 00000004            SHR$_BEGIN     = 00001030            STS$K_SEVERE   = 00000004            
QUA_S_MINPARM  = 00000004            SHR$_BEGIND    = 00001038            STS$K_SUCCESS  = 00000001            
QUA_V_BATDEF   = 00000008            SHR$_BEGINT    = 00001040            STS$K_WARNING  = 00000000            
QUA_V_CHNGLIST = 00000000            SHR$_CLICB     = 00001048            STS$M_CODE     = 00007FF8            
QUA_V_DEFTRUE  = 00000007            SHR$_CLOSEDEL  = 00001218            STS$M_COND_ID  = 0FFFFFF8            
QUA_V_FILE     = 00000002            SHR$_CLOSEIN   = 00001050            STS$M_CONTROL  = F0000000            
QUA_V_IMAGE    = 0000000A            SHR$_CLOSEOUT  = 00001058            STS$M_CUST_DEF = 08000000            
QUA_V_INTDEF   = 00000009            SHR$_CONFDEL   = 000011F8            STS$M_FAC_NO   = 0FFF0000            
QUA_V_KEYVAL   = 0000000E            SHR$_COPIEDB   = 00001060            STS$M_FAC_SP   = 00008000            
QUA_V_LOCALKEY = 00000001            SHR$_COPIEDR   = 00001068            STS$M_INHIB_MSG= 10000000            
QUA_V_MAXPARM  = 00000004            SHR$_CREATED   = 00001070            STS$M_MSG_NO   = 0000FFF8            
QUA_V_MINPARM  = 00000000            SHR$_DELETED   = 00001200            STS$M_SEVERITY = 00000007            
QUA_V_NEG      = 00000006            SHR$_DELINTERR = 00001240            STS$M_SUCCESS  = 00000001            
QUA_V_ONEVAL   = 0000000D            SHR$_DELVER    = 00001208            STS$S_CODE     = 0000000C            
QUA_V_OUTPUT   = 0000000B            SHR$_DIRTOOBUS = 00001220            STS$S_COND_ID  = 00000019            
QUA_V_PARM     = 00000004            SHR$_ENDED     = 00001078            STS$S_CONTROL  = 00000004            
QUA_V_VAL      = 00000005            SHR$_ENDEDD    = 00001080            STS$S_CUST_DEF = 00000001            
QUA_V_VALREQ   = 0000000C            SHR$_ENDEDT    = 00001088            STS$S_FAC_NO   = 0000000C            
QUA_V_VERB     = 00000003            SHR$_FILNOTDEL = 000011F0            STS$S_FAC_SP   = 00000001            
QUA_W_FLAGS      00000003            SHR$_FILNOTPUR = 00001230            STS$S_INHIB_MSG= 00000001            
QUA_W_PROMPT     00000009            SHR$_FILPURGED = 00001250            STS$S_MSG_NO   = 0000000D            
QUA_W_QUALIST    00000006            SHR$_HASHCONCAT= 000011D8            STS$S_SEVERITY = 00000003            
SCH$GL_CURPCB    ********   X   05   SHR$_HIGHVER   = 00001148            STS$S_SUCCESS  = 00000001            
SCRATCH_PAGES  = 0000000A            SHR$_IDXCONCAT = 00001138            STS$V_CODE     = 00000003            
SHOW$A_CLIWORK   ********   X   05   SHR$_INCOMPAT  = 000011E0            STS$V_COND_ID  = 00000003            
SHOW$LOGI_CLI    00000000 RG    05   SHR$_NEWFILES  = 00001090            STS$V_CONTROL  = 0000001C            
SHOW$L_STATUS    ********   X   05   SHR$_NOFILPURG = 00001228            STS$V_CUST_DEF = 0000001B            
SHOW$PRINT_MSG   ********   X   05   SHR$_NOJOBID   = 000011A0            STS$V_FAC_NO   = 00000010            
SHOW$_BADLOGIC = 00781122            SHR$_NOJOBNAME = 000011A8            STS$V_FAC_SP   = 0000000F            
SHOW$_LOGEMPTY   ********   X   05   SHR$_NOQUEUE   = 00001198            STS$V_INHIB_MSG= 0000001C            
SHOW$_LOGTRAN    ********   X   05   SHR$_NOTCMPLT  = 000011C0            STS$V_MSG_NO   = 00000003            
SHOW$_LOGTTL     ********   X   05   SHR$_NOTCOPIED = 000011B8            STS$V_SEVERITY = 00000000            
SHOW$_NOTRAN     ********   X   05   SHR$_NOVALUE   = 00001100            STS$V_SUCCESS  = 00000000            
SHOW$LOGICAL                                                     21-AUG-1978 19:20:02   VAX-11 MACRO X0.3-11               Page  19
SYMBOL TABLE                                                                                                                     (9)

SYS$CMKRNL       ********   X   05   
SYS$EXPREG       ********   X   05   
SYS$TRNLOG       ********   X   05   
USER_MODE      = 00000003            


PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            00000080      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
SHOW$RWDATA      00000145      03     NOPIC   USR   CON   REL   LCL NOSHR NOEXE   RD    WRT LONG  
SHOW$MSG_TEXT    00000021      04     NOPIC   USR   CON   REL   LCL NOSHR NOEXE   RD  NOWRT BYTE  
SHOW$CODE        0000027A      05     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD  NOWRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
6658. BYTES LEFT IN FREE MEMORY POOL.
2194. BYTES OF RECLAIMED MEMORY.
OBJ$:SHOLOGICL,LIS$:SHOLOGICL/-SP=EXECML$/ML,LIB$:CLIUTL/ML,SRC$:SHOLOGICL
61 MLB DIR RDS - 905 GETS TO DEFINE 34 MACROS. 69 INTER. FILE WRITES. 
