SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (2)      44  DECLARATIONS
   (4)     491  SHOW$PROCESS	- Main loop
   (5)     589  PROC_GETINFO	- retrieve information
   (6)     724  PROC_HEADINFO	- display header information
   (7)     779  PROC_DEFA_PRES	- display default information
   (8)     846  PROC_QUOT_PRES	- display quota information
   (9)     905  PROC_ACCO_PRES	- display accounting information
   (10)    961  PROC_PRIV_PRES	- display process privileges
   (11)   1059  PROC_SUBP_PRES	- list subprocesses
   (12)   1179  COPY_SUBP	- construct list of subprocesses
   (13)   1429  PROC_DEVALL	- give list of devices allocated
   (14)   1578  COPY_DEVALL	- copy devices allocated
   (15)   1708  PROC_DEVMOUN	- give list of devices mounted
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page   1
X0101                                                                                                                            (1)

                                     0000     1 	.TITLE	SHOW$PROCESS
                                     0000     2 	.IDENT	/X0101/
                                     0000     3 
                                     0000     4 ;
                                     0000     5 ; COPYRIGHT (C) 1977
                                     0000     6 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS 01754
                                     0000     7 ;
                                     0000     8 ; THIS SOFTWARE IS FURNISHED  UNDER A LICENSE FOR USE ONLY ON A SINGLE
                                     0000     9 ; COMPUTER  SYSTEM AND  MAY BE  COPIED ONLY WITH  THE INCLUSION OF THE
                                     0000    10 ; ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,
                                     0000    11 ; MAY NOT BE PROVIDED OR  OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
                                     0000    12 ; EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE
                                     0000    13 ; TERMS.  TITLE TO AND  OWNERSHIP OF THE  SOFTWARE  SHALL AT ALL TIMES
                                     0000    14 ; REMAIN IN DEC.
                                     0000    15 ;
                                     0000    16 ; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE
                                     0000    17 ; AND SHOULD  NOT BE CONSTRUED  AS A COMMITMENT  BY DIGITAL  EQUIPMENT
                                     0000    18 ; CORPORATION.
                                     0000    19 ;
                                     0000    20 ; DEC ASSUMES  NO  RESPONSIBILITY  FOR  THE USE OR  RELIABILITY OF ITS
                                     0000    21 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
                                     0000    22 ;
                                     0000    23 
                                     0000    24 ;++
                                     0000    25 ; FACILITY:	DCL SHOW command.
                                     0000    26 
                                     0000    27 ;
                                     0000    28 ; ABSTRACT:
                                     0000    29 ;
                                     0000    30 ;	This module implements the SHOW PROCESS command option.
                                     0000    31 ;
                                     0000    32 ; ENVIRONMENT:
                                     0000    33 ;
                                     0000    34 ;	Runs in user mode but requires privilege to change mode to kernel.
                                     0000    35 ;
                                     0000    36 ; AUTHOR : BEATRICE U. WALTHER,  CREATION DATE: 10-DEC-1977
                                     0000    37 ;
                                     0000    38 ; MODIFIED BY:
                                     0000    39 ;
                                     0000    40 ;	, : VERSION
                                     0000    41 ; 01	- 
                                     0000    42 ;--
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page   2
X0101           DECLARATIONS                                                                                                     (2)

                                     0000    44 	.SBTTL	DECLARATIONS
                                     0000    45 
                                     0000    46 ;
                                     0000    47 ; Include files:
                                     0000    48 ;
                                     0000    49 
                                     0000    50 	$JPIDEF				; define JPI item codes
                                     0000    51 	$PRVDEF				; define privilege bits
                                     0000    52 	$UCBDEF				; unit control block definitions
                                     0000    53 	$DDBDEF				; device data block definitions
                                     0000    54 	$MTLDEF				; mounted volume list definitions
                                     0000    55 	$PRDEF				; processor register definitions
                                     0000    56 	$PCBDEF				; process control block definitions
                                     0000    57 	$SHRDEF				; shared messages definitions
                                     0000    58 
                                     0000    59 ;
                                     0000    60 ; Macros:
                                     0000    61 ;
                                     0000    62 
                                     0000    63 ;+
                                     0000    64 ; The $SHR_MESSAGES macro defines facility-specific message codes
                                     0000    65 ;	which are based on the system-wide shared message codes.
                                     0000    66 ;
                                     0000    67 ;	$SHR_MESSAGES	name, code, <<msg,severity>, ... >
                                     0000    68 ;
                                     0000    69 ;	where:
                                     0000    70 ;	    "name" is the name of the facility (e.g., COPY)
                                     0000    71 ;	    "code" is the corresponding facility code (e.g., 103)
                                     0000    72 ;	    "msg" is the name of the shared message (e.g., BEGIN)
                                     0000    73 ;	    "severity" is the desired message severity (e.g., 1, 0, 2, 4)
                                     0000    74 ;
                                     0000    75 ;-
                                     0000    76 	.MACRO	$SHR_MESSAGES	NAME,CODE,MSGCODES
                                     0000    77 ;
                                     0000    78 	.IF	NDF,SHR$K_SHRDEF  ; issue $SHRDEF if not done yet
                                     0000    79 		SHR$K_SHRDEF = 1 ; define symbol to indic $SHRDEF done
                                     0000    80 		$SHRDEF		 ; define shared message codes
                                     0000    81 	.ENDC
                                     0000    82 	.IRP	MSGPAIR, <'MSGCODES>
                                     0000    83 		$SHRMSG_COD 'NAME', 'CODE', MSGPAIR
                                     0000    84 	.ENDR
                                     0000    85 	.ENDM
                                     0000    86 	.MACRO	$SHRMSG_COD NAME, CODE, MSG, SEVERITY
                                     0000    87 ;
                                     0000    88 	.IF	IDN,SEVERITY,WARNING    ; if WARNING, set 0 sev
                                     0000    89 	  'NAME'$_'MSG' = 0	        ; set 0 sev (WARNING)
                                     0000    90 	.IFF
                                     0000    91 	  .IF	IDN,SEVERITY,SUCCESS    ; if SUCCESS, set 1 sev
                                     0000    92 	    'NAME'$_'MSG' = 1	        ; set 1 sev (SUCCESS)
                                     0000    93 	  .IFF
                                     0000    94 	    .IF	IDN,SEVERITY,ERROR      ; if ERROR, set 2 sev
                                     0000    95 	      'NAME'$_'MSG' = 2	        ; set 2 sev (ERROR)
                                     0000    96 	    .IFF
                                     0000    97 	      .IF IDN,SEVERITY,INFO     ; if INFO, set 3 sev
                                     0000    98 	        'NAME'$_'MSG' = 3       ; set 3 sev (INFO)
                                     0000    99 	      .IFF
                                     0000   100 	        .IF IDN,SEVERITY,SEVERE ; if SEVERE, set 4 sev
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page   3
X0101           DECLARATIONS                                                                                                     (2)

                                     0000   101 	          'NAME'$_'MSG' = 4     ; set 4 sev (SEVERE)
                                     0000   102 	        .IFF
                                     0000   103 	          'NAME'$_'MSG' = 'SEVERITY ; set specified sev
                                     0000   104 	        .ENDC
                                     0000   105 	      .ENDC
                                     0000   106 	    .ENDC
                                     0000   107 	  .ENDC
                                     0000   108 	.ENDC
                                     0000   109 	 'NAME'$_'MSG' = 'NAME'$_'MSG'+SHR$_'MSG'+<'CODE'@16>
                                     0000   110 	.ENDM
                                     0000   111 
                                     0000   112 ;
                                     0000   113 ; JPI_ITEM - 	Build data structure necessary to call the
                                     0000   114 ;		$GETJPI system service.
                                     0000   115 ;
                                     0000   116 ;		The space for the resulting values is allocated at the
                                     0000   117 ;		current location counter:
                                     0000   118 ;			- a longword for a numeric value
                                     0000   119 ;			- a qudword for a quadword
                                     0000   120 ;			- a string descriptor pointing to a buffer in
                                     0000   121 ;			  a separate PSECT for a string result.
                                     0000   122 ;		Each call also generates the corresponding JPI item descriptor
                                     0000   123 ;		block in a read_only PSECT.
                                     0000   124 ;
                                     0000   125 ;		The list thus generated can subsequently be used directly 
                                     0000   126 ;		as a parameter list to FAO.
                                     0000   127 ;
                                     0000   128 ;	parameters:
                                     0000   129 ;		LSTN = list name 
                                     0000   130 ;		X    = JPI item identifier
                                     0000   131 ;		LEN  = expected length of result (null= longword)
                                     0000   132 ;		TYPE = 'QUAD' : quadword
                                     0000   133 ;			null  : longword or string
                                     0000   134  
                                     0000   135 ;
                                     0000   136 
                                     0000   137 	.MACRO	JPI_ITEM	LSTN,X,LEN,TYPE
                                     0000   138 
                                     0000   139 ;
                                     0000   140 ;  generate JPI item descriptor
                                     0000   141 ;
                                     0000   142 
                                     0000   143 	.SAVE
                                     0000   144 	.PSECT	SHOW$MSG_TXT	LONG,RD,NOWRT,NOEXE
                                     0000   145 $ITEM_LEN$=4
                                     0000   146 	.IIF	NB,LEN,$ITEM_LEN$=LEN
                                     0000   147 	.IIF	IDN,<TYPE>,<QUAD>,$ITEM_LEN$=8
                                     0000   148 	.WORD	$ITEM_LEN$,JPI$_'X	; length and code of item descriptor
                                     0000   149 	.IF 	B,LEN
                                     0000   150 	.IFT				; item is long or quadword
                                     0000   151 	.IF	IDN,<TYPE>,<QUAD>
                                     0000   152 	.IFT
                                     0000   153 	.LONG	'LSTN'_Q_'X		; point to a quadword
                                     0000   154 	.IFF
                                     0000   155 	.LONG	'LSTN'_L_'X		; point to a longword
                                     0000   156 	.IFTF
                                     0000   157 	.LONG	0			; resulting length is known
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page   4
X0101           DECLARATIONS                                                                                                     (2)

                                     0000   158 	.ENDC
                                     0000   159 	.IFF				; item is a string
                                     0000   160 	.LONG	'LSTN'_T_'X		; point to a string buffer
                                     0000   161 	.LONG	'LSTN'_Q_'X		; result length is quadword descriptor
                                     0000   162 
                                     0000   163 ;
                                     0000   164 ; reserve buffer space if item is a string
                                     0000   165 ;
                                     0000   166 	.PSECT	SHOW$JPI_STR	LONG,RD,WRT,NOEXE
                                     0000   167 'LSTN'_T_'X:
                                     0000   168 	.BLKB	$ITEM_LEN$		; reserve space for buffer
                                     0000   169 
                                     0000   170 ;
                                     0000   171 ; restore current PSECT and generate space for resulting values or pointers
                                     0000   172 ;
                                     0000   173 	.IFTF				;
                                     0000   174 	.RESTORE			; restore original PSECT
                                     0000   175 	.IFT				; item is long or quad
                                     0000   176 	.IF	IDN,<TYPE>,<QUAD>
                                     0000   177 	.IFT
                                     0000   178 'LSTN'_Q_'X:
                                     0000   179 	.BLKQ	1			; reserve a quadword
                                     0000   180 	.IFF
                                     0000   181 'LSTN'_L_'X:
                                     0000   182 	.BLKL	1			; reserve a longword
                                     0000   183 	.ENDC
                                     0000   184 	.IFF				; item is a string
                                     0000   185 'LSTN'_Q_'X:
                                     0000   186 	.BLKL	1			; space for resultant length
                                     0000   187 	.LONG	'LSTN'_T_'X		; point to resultant buffer
                                     0000   188 	.ENDC
                                     0000   189 	.ENDM	JPI_ITEM
                                     0000   190 
                                     0000   191 
                                     0000   192 ;
                                     0000   193 ; JPI_ITEM_INIT - start a JPI item list
                                     0000   194 ;
                                     0000   195 
                                     0000   196 	.MACRO	JPI_ITEM_INIT	LB
                                     0000   197 	.SAVE
                                     0000   198 	.PSECT	SHOW$MSG_TXT	LONG,RD,NOWRT,NOEXE
                                     0000   199 
                                     0000   200 'LB:
                                     0000   201 	.RESTORE
                                     0000   202 	.ENDM	JPI_ITEM_INIT
                                     0000   203 
                                     0000   204 
                                     0000   205 ;
                                     0000   206 ; end the JPI item descriptor list
                                     0000   207 ;
                                     0000   208 
                                     0000   209 	.MACRO	JPI_ITEM_END
                                     0000   210 	.SAVE
                                     0000   211 	.PSECT	SHOW$MSG_TXT	LONG,RD,NOWRT,NOEXE
                                     0000   212 	.LONG	0
                                     0000   213 	.RESTORE
                                     0000   214 	.ENDM	JPI_ITEM_END
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page   5
X0101           DECLARATIONS                                                                                                     (2)

                                     0000   215 
                                     0000   216 ;
                                     0000   217 ; Equated symbols:
                                     0000   218 ;
                                     0000   219 
                                     0000   220 	_VIELD	PROC,0,<-
                                     0000   221 		<QUOT,,M>,-		; /QUOTA
                                     0000   222 		<ACCO,,M>,-		; /ACCOUNTING
                                     0000   223 		<PRIV,,M>,-		; /PRIVILEGES
                                     0000   224 		<SUBP,,M>,-		; /SUBPROCESSES
                                     0000   225 		<ALL,,M>,-		; /ALL
                                     0000   226 		>
                                     0000   227 
                                     0000   228 	$SHR_MESSAGES	SHOW,120,<-	; define shared messages
                                     0000   229 		<BADLOGIC,ERROR>,-	;
                                     0000   230 		>
                                     0000   231 
                           00000003  0000   232 USER_MODE=3				; user access mode
                           00000000  0000   233 PROGRAM_REGION=0			; code for program region
                           00000040  0000   234 SCRATCH_PAGES=64			; scratch space needed
                           00001000  0000   235 SCRATCH_AREA2=<8*512>			; offset to secondary scratch area (in bytes)
                           00000010  0000   236 DEVNAM_LEN=16				; max. length of a generic device name
                           00000020  0000   237 DEV_SPEC_LEN=DEVNAM_LEN+16		; maximum length of a device and unit string
                           00000002  0000   238 WORD=2					; length of a word
                           00000008  0000   239 DEV_PER_LINE=8				; number of devices to print per line
                           00000010  0000   240 PCB$S_LNAME=16				; max length of process name
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page   6
X0101           DECLARATIONS                                                                                                     (3)

                                     0000   242 ;
                                     0000   243 ; Own storage:
                                     0000   244 ;
                                     0000   245 
                                 00000000   246 	.PSECT	SHOW$RWDATA	LONG,RD,WRT,NOEXE
                                     0000   247 
                                     0000   248 ;
                                     0000   249 ; define CLI call back structures
                                     0000   250 ;
                                     0000   251 
                                     0000   252 PROC_A_GETQUAL:
                                     0000   253 	$CLIREQDESC	-		; CLI request descriptor block 
                                     0000   254 		RQTYPE=CLI$K_GETQUAL,-	; to get qualifiers
                                     0000   255 		QUALST=PROC_A_QUALST	; pointer to qualifier list
                                     001C   256 PROC_A_QUALST:				; qualifier list
                                     001C   257 	$CLIQUALDEF	-
                                     001C   258 		QDCODE=CLI$K_SHPR_QUOT,-; /QUOTA
                                     001C   259 		SETLST=PROC_V_QUOT,-	;
                                     001C   260 		TRUACT=PROC_QUOT_PRES	;
                                     0034   261 	$CLIQUALDEF	-
                                     0034   262 		QDCODE=CLI$K_SHPR_ACCO,-; /ACCOUNTING
                                     0034   263 		SETLST=PROC_V_ACCO,-	;
                                     0034   264 		TRUACT=PROC_ACCO_PRES
                                     004C   265 	$CLIQUALDEF	-
                                     004C   266 		QDCODE=CLI$K_SHPR_PRIV,-; /PRIVILEGES
                                     004C   267 		SETLST=PROC_V_PRIV,-	;
                                     004C   268 		TRUACT=PROC_PRIV_PRES	;
                                     0064   269 	$CLIQUALDEF	-
                                     0064   270 		QDCODE=CLI$K_SHPR_SUBP,-; /SUBPROCESSES
                                     0064   271 		SETLST=PROC_V_SUBP,-	;
                                     0064   272 		TRUACT=PROC_SUBP_PRES	;
                                     007C   273 	$CLIQUALDEF	-
                                     007C   274 		QDCODE=CLI$K_SHPR_ALL,-	; /ALL
                                     007C   275 		SETLST=PROC_V_ALL	;
                                     0094   276 	$CLIQUALDEF	END_LIST
                                     0095   277 
                                     0095   278 ;
                                     0095   279 ; read/write storage
                                     0095   280 ;
                                     0095   281 
                                     0095   282 PROC_L_BITLIS:
                           00000000  0095   283 	.LONG	0			; qualifier bit list
                                     0099   284 PROC_Q_SCRATCH:
                           000000A1  0099   285 	.BLKQ	1			; descriptor of scratch area (first and last)
                                     00A1   286 PROC_L_SCRLIM:
                           000000A5  00A1   287 	.BLKL	1			; limit of scratch area
                                     00A5   288 
                                     00A5   289 ;
                                     00A5   290 ; build JPI calling structures and corresponding FAO parameter lists.
                                     00A5   291 
                                     00A5   292 ;
                                     00A5   293 
                                     00A5   294 	JPI_ITEM_INIT	JPI_ITMLST	; define start of JPI item list
                                     00A5   295 
                                     00A5   296 HDR_LIST:
                           00000000  00A5   297 	.LONG	0			; system date and time
                                     00A9   298 HDR_Q_TERMINAL:
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page   7
X0101           DECLARATIONS                                                                                                     (3)

                           00000020  00A9   299 	.LONG	DEV_SPEC_LEN		; quadword descriptor 
                           0000027D' 00AD   300 	.LONG	HDR_T_TERMINAL		; to terminal device name
                                     00B1   301 	JPI_ITEM	HDR,USERNAME,16	; user name
                                     00B9   302 
                                     00B9   303 DEF_LIST:
                                     00B9   304 	JPI_ITEM	DEF,PID		; process id
                                     00BD   305 	JPI_ITEM	DEF,PRCNAM,16	; process name
                                     00C5   306 	JPI_ITEM	DEF,GRP		; group number of UIC
                                     00C9   307 	JPI_ITEM	DEF,MEM		; member number of UIC
                                     00CD   308 	JPI_ITEM	DEF,PRIB	; base priority
                                     00D1   309 DEF_Q_DEVICE:
                           00000020  00D1   310 	.LONG	DEV_SPEC_LEN		; quadword descriptor 
                           0000029D' 00D5   311 	.LONG	DEF_T_DEVICE		; to default device name
                                     00D9   312 DEF_L_DEFDIR:
                           000000DD  00D9   313 	.BLKL	1			; pointer to default directory
                                     00DD   314 
                                     00DD   315 QUO_LIST1:
                                     00DD   316 	JPI_ITEM	QUO,ACCOUNT,16	; account name
                                     00E5   317 QUO_LIST2:
                                     00E5   318 	JPI_ITEM	QUO,CPULIM	; cpu limit
                                     00E9   319 	JPI_ITEM	QUO,DIOLM	; direct i/o limit
                                     00ED   320 	JPI_ITEM	QUO,BYTLM	; byte count limit
                                     00F1   321 	JPI_ITEM	QUO,BIOLM	; buffered i/o limit
                                     00F5   322 	JPI_ITEM	QUO,TQLM	; timer queue entry limit
                                     00F9   323 	JPI_ITEM	QUO,FILLM	; open file limit
                                     00FD   324 	JPI_ITEM	QUO,PGFLQUOTA	; pageing file quota
                                     0101   325 	JPI_ITEM	QUO,PRCLM	; subprocess quota
                                     0105   326 	JPI_ITEM	QUO,DFPFC	; default page fault cluster
                                     0109   327 	JPI_ITEM	QUO,ASTLM	; AST limit
                                     010D   328 
                                     010D   329 ACC_LIST:
                                     010D   330 	JPI_ITEM	ACC,BUFIO	; accumulated buffered i/o count
                                     0111   331 	JPI_ITEM	ACC,WSPEAK	; peak woking set size
                                     0115   332 	JPI_ITEM	ACC,DIRIO	; accumulated direct i/o
                                     0119   333 	JPI_ITEM	ACC,VIRTPEAK	; peak virtual size
                                     011D   334 	JPI_ITEM	ACC,PAGEFLTS	; page faults
                                     0121   335 	JPI_ITEM	ACC,VOLUMES	; count of mounted volumes
                                     0125   336 	JPI_ITEM	ACC,CPUTIM	; cpu time
                                     0129   337 	JPI_ITEM	ACC,LOGINTIM,8	; compute connect time
                                     0131   338 PRV_LIST:
                                     0131   339 	JPI_ITEM	PRV,PROCPRIV,,QUAD
                                     0139   340 					; process privileges quadword
                                     0139   341 
                                     0139   342 	JPI_ITEM_END			; terminate JPI item descriptor list
                                     0139   343 
                                     0139   344 PROC_DEVICE_CNT:
                           0000013D  0139   345 	.BLKL	1			; count for FAO parameter list below
                                     013D   346 PROC_DEVICE_LST:
                           0000017D  013D   347 	.BLKQ	DEV_PER_LINE		; FAO parameter list for list of devices
                                     017D   348 
                                     017D   349 ;
                                     017D   350 ; pointers to all possible privilege text strings.
                                     017D   351 ;
                                     017D   352 
                                     017D   353 PRIV_A_TEXT:
                           0000027D  017D   354 	.BLKL	64			; pointers to privilege text strings
                           0000027D  027D   355 $$$=.					; save location 
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page   8
X0101           DECLARATIONS                                                                                                     (3)

                                     027D   356 	.IRP	XXX,<-
                                     027D   357 		CMKRNL,-		; may change mode to kernel
                                     027D   358 		CMEXEC,-		; may change mode to exec
                                     027D   359 		SYSNAM,-		; may insert in system logical name table
                                     027D   360 		GRPNAM,-		; may insert in group logical name table
                                     027D   361 		ALLSPOOL,-		; may allocate spooled device
                                     027D   362 		DETACH,-		; may create detaches processes
                                     027D   363 		DIAGNOSE,-		; may diagnose devices
                                     027D   364 		LOG_IO,-		; may do logical i/o
                                     027D   365 		GROUP,-			; may affect other processes in same group
                                     027D   366 		NOACNT,-		; may suppress accounting message
                                     027D   367 		PRMCEB,-		; may create permanent common event clusters
                                     027D   368 		PRMMBX,-		; may create permanent mailbox
                                     027D   369 		PSWAPM,-		; may change process swap mode
                                     027D   370 		SETPRI,-		; may set any priority value
                                     027D   371 		SETPRV,-		; may set any privilege bit
                                     027D   372 		TMPMBX,-		; may create temporary mailbox
                                     027D   373 		WORLD,-			; may affect other processes in the world
                                     027D   374 		MOUNT,-			; may execute mount acp function
                                     027D   375 		OPER,-			; operator privilege
                                     027D   376 		EXQUOTA,-		; may exceede quota
                                     027D   377 		NETMBX,-		; may create network device
                                     027D   378 		VOLPRO,-		; may override volume protection
                                     027D   379 		PHY_IO,-		; may do physical i/o
                                     027D   380 		BUGCHK,-		; may make bug check log entries
                                     027D   381 		PRMGBL,-		; may create permanent global sections
                                     027D   382 		SYSGBL,-		; may create system wide global sections
                                     027D   383 		>
                                     027D   384 	.IF	DF,PRV$V_'XXX
                                     027D   385 .=PRIV_A_TEXT+<4*PRV$V_'XXX>
                                     027D   386 	.LONG	PRV_T_'XXX
                                     027D   387 	.ENDC
                                     027D   388 	.ENDR
                           0000027D  01E5   389 .=$$$
                                     027D   390 
                                     027D   391 ;
                                     027D   392 ; buffers
                                     027D   393 ;
                                     027D   394 
                                     027D   395 HDR_T_TERMINAL:
                           0000029D  027D   396 	.BLKB	DEV_SPEC_LEN		; space for terminal name
                                     029D   397 DEF_T_DEVICE:
                           000002BD  029D   398 	.BLKB	DEV_SPEC_LEN		; space for default device
                                     02BD   399 ACC_Q_CPUTIM:
                           000002C5  02BD   400 	.BLKQ	1			; space for CPU time in delta time format
                                     02C5   401 QUO_Q_CPULIM:
                           000002CD  02C5   402 	.BLKQ	1			; space for CPU limit in delta time format
                                     02CD   403 					; (counted string)
                                     02CD   404 PROC_Q_SYSTIM:
                           000002D5  02CD   405 	.BLKQ	1			; space for system time
                                     02D5   406 PRIV_FAO_LIST:
                           000002DD  02D5   407 	.BLKL	2			; FAO parameter list for privileges
                                     02DD   408 
                                     02DD   409 
                                     02DD   410 ;
                                     02DD   411 ; text
                                     02DD   412 ;
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page   9
X0101           DECLARATIONS                                                                                                     (3)

                                     02DD   413 
                                 0000013C   414 	.PSECT	SHOW$MSG_TXT	LONG,RD,NOWRT,NOEXE
                                     013C   415 
                                     013C   416 PRV_T_CMKRNL:
20 65 67 6E 61 68 63 20 79 61 6D 00' 013C   417 	.ASCIC	&may change mode to kernel&
6E 72 65 6B 20 6F 74 20 65 64 6F 6D  0148       
                              6C 65  0154       
                                 19  013C       
                                     0156   418 PRV_T_CMEXEC:
20 65 67 6E 61 68 63 20 79 61 6D 00' 0156   419 	.ASCIC	&may change mode to exec&
63 65 78 65 20 6F 74 20 65 64 6F 6D  0162       
                                 17  0156       
                                     016E   420 PRV_T_SYSNAM:
20 74 72 65 73 6E 69 20 79 61 6D 00' 016E   421 	.ASCIC	&may insert in system logical name table&
6F 6C 20 6D 65 74 73 79 73 20 6E 69  017A       
74 20 65 6D 61 6E 20 6C 61 63 69 67  0186       
                        65 6C 62 61  0192       
                                 27  016E       
                                     0196   422 PRV_T_GRPNAM:
20 74 72 65 73 6E 69 20 79 61 6D 00' 0196   423 	.ASCIC	&may insert in group logical name table&
67 6F 6C 20 70 75 6F 72 67 20 6E 69  01A2       
61 74 20 65 6D 61 6E 20 6C 61 63 69  01AE       
                           65 6C 62  01BA       
                                 26  0196       
                                     01BD   424 PRV_T_ALLSPOOL:
74 61 63 6F 6C 6C 61 20 79 61 6D 00' 01BD   425 	.ASCIC	&may allocate spooled device&
65 64 20 64 65 6C 6F 6F 70 73 20 65  01C9       
                        65 63 69 76  01D5       
                                 1B  01BD       
                                     01D9   426 PRV_T_DETACH:
20 65 74 61 65 72 63 20 79 61 6D 00' 01D9   427 	.ASCIC	&may create detached processes&
6F 72 70 20 64 65 68 63 61 74 65 64  01E5       
                  73 65 73 73 65 63  01F1       
                                 1D  01D9       
                                     01F7   428 PRV_T_DIAGNOSE:
73 6F 6E 67 61 69 64 20 79 61 6D 00' 01F7   429 	.ASCIC	&may diagnose devices&
         73 65 63 69 76 65 64 20 65  0203       
                                 14  01F7       
                                     020C   430 PRV_T_LOG_IO:
69 67 6F 6C 20 6F 64 20 79 61 6D 00' 020C   431 	.ASCIC	&may do logical I/O&
               4F 2F 49 20 6C 61 63  0218       
                                 12  020C       
                                     021F   432 PRV_T_GROUP:
20 74 63 65 66 66 61 20 79 61 6D 00' 021F   433 	.ASCIC	&may affect other processes in same group&
73 65 63 6F 72 70 20 72 65 68 74 6F  022B       
20 65 6D 61 73 20 6E 69 20 73 65 73  0237       
                     70 75 6F 72 67  0243       
                                 28  021F       
                                     0248   434 PRV_T_NOACNT:
73 65 72 70 70 75 73 20 79 61 6D 00' 0248   435 	.ASCIC	&may suppress accounting message&
67 6E 69 74 6E 75 6F 63 63 61 20 73  0254       
            65 67 61 73 73 65 6D 20  0260       
                                 1F  0248       
                                     0268   436 PRV_T_PRMCEB:
20 65 74 61 65 72 63 20 79 61 6D 00' 0268   437 	.ASCIC	&may create permanent common event clusters&
6F 63 20 74 6E 65 6E 61 6D 72 65 70  0274       
63 20 74 6E 65 76 65 20 6E 6F 6D 6D  0280       
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  10
X0101           DECLARATIONS                                                                                                     (3)

               73 72 65 74 73 75 6C  028C       
                                 2A  0268       
                                     0293   438 PRV_T_PRMMBX:
20 65 74 61 65 72 63 20 79 61 6D 00' 0293   439 	.ASCIC	&may create permanent mailbox&
61 6D 20 74 6E 65 6E 61 6D 72 65 70  029F       
                     78 6F 62 6C 69  02AB       
                                 1C  0293       
                                     02B0   440 PRV_T_PSWAPM:
20 65 67 6E 61 68 63 20 79 61 6D 00' 02B0   441 	.ASCIC	&may change process swap mode&
70 61 77 73 20 73 73 65 63 6F 72 70  02BC       
                     65 64 6F 6D 20  02C8       
                                 1C  02B0       
                                     02CD   442 PRV_T_SETPRI:
79 6E 61 20 74 65 73 20 79 61 6D 00' 02CD   443 	.ASCIC	&may set any priority value&
61 76 20 79 74 69 72 6F 69 72 70 20  02D9       
                           65 75 6C  02E5       
                                 1A  02CD       
                                     02E8   444 PRV_T_SETPRV:
79 6E 61 20 74 65 73 20 79 61 6D 00' 02E8   445 	.ASCIC	&may set any privilege bit&
62 20 65 67 65 6C 69 76 69 72 70 20  02F4       
                              74 69  0300       
                                 19  02E8       
                                     0302   446 PRV_T_TMPMBX:
20 65 74 61 65 72 63 20 79 61 6D 00' 0302   447 	.ASCIC	&may create temporary mailbox&
61 6D 20 79 72 61 72 6F 70 6D 65 74  030E       
                     78 6F 62 6C 69  031A       
                                 1C  0302       
                                     031F   448 PRV_T_WORLD:
20 74 63 65 66 66 61 20 79 61 6D 00' 031F   449 	.ASCIC	&may affect other processes in the world&
73 65 63 6F 72 70 20 72 65 68 74 6F  032B       
77 20 65 68 74 20 6E 69 20 73 65 73  0337       
                        64 6C 72 6F  0343       
                                 27  031F       
                                     0347   450 PRV_T_MOUNT:
65 74 75 63 65 78 65 20 79 61 6D 00' 0347   451 	.ASCIC	&may execute mount ACP functions&
66 20 50 43 41 20 74 6E 75 6F 6D 20  0353       
            73 6E 6F 69 74 63 6E 75  035F       
                                 1F  0347       
                                     0367   452 PRV_T_OPER:
6D 72 6F 66 72 65 70 20 79 61 6D 00' 0367   453 	.ASCIC	&may perform operator functions&
75 66 20 72 6F 74 61 72 65 70 6F 20  0373       
               73 6E 6F 69 74 63 6E  037F       
                                 1E  0367       
                                     0386   454 PRV_T_EXQUOTA:
20 64 65 65 63 78 65 20 79 61 6D 00' 0386   455 	.ASCIC	&may exceed quota&
                     61 74 6F 75 71  0392       
                                 10  0386       
                                     0397   456 PRV_T_NETMBX:
20 65 74 61 65 72 63 20 79 61 6D 00' 0397   457 	.ASCIC	&may create network device&
69 76 65 64 20 6B 72 6F 77 74 65 6E  03A3       
                              65 63  03AF       
                                 19  0397       
                                     03B1   458 PRV_T_VOLPRO:
64 69 72 72 65 76 6F 20 79 61 6D 00' 03B1   459 	.ASCIC	&may override volume protection&
6F 72 70 20 65 6D 75 6C 6F 76 20 65  03BD       
               6E 6F 69 74 63 65 74  03C9       
                                 1E  03B1       
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  11
X0101           DECLARATIONS                                                                                                     (3)

                                     03D0   460 PRV_T_PHY_IO:
73 79 68 70 20 6F 64 20 79 61 6D 00' 03D0   461 	.ASCIC	&may do physical I/O&
            4F 2F 49 20 6C 61 63 69  03DC       
                                 13  03D0       
                                     03E4   462 PRV_T_BUGCHK:
75 62 20 65 6B 61 6D 20 79 61 6D 00' 03E4   463 	.ASCIC	&may make bug check log entries&
20 67 6F 6C 20 6B 63 65 68 63 20 67  03F0       
               73 65 69 72 74 6E 65  03FC       
                                 1E  03E4       
                                     0403   464 PRV_T_PRMGBL:
20 65 74 61 65 72 63 20 79 61 6D 00' 0403   465 	.ASCIC	&may create permanent global sections&
6C 67 20 74 6E 65 6E 61 6D 72 65 70  040F       
6E 6F 69 74 63 65 73 20 6C 61 62 6F  041B       
                                 73  0427       
                                 24  0403       
                                     0428   466 PRV_T_SYSGBL:
20 65 74 61 65 72 63 20 79 61 6D 00' 0428   467 	.ASCIC	&may create system wide global sections&
20 65 64 69 77 20 6D 65 74 73 79 73  0434       
69 74 63 65 73 20 6C 61 62 6F 6C 67  0440       
                           73 6E 6F  044C       
                                 26  0428       
                                     044F   468 PROC_Q_SYSDISK:
                           00000008' 044F   469 	.LONG	SYSDISK_LEN	; descriptior to SYS$DISK logical name
                           0000045F' 0453   470 	.LONG	PROC_T_SYSDISK
                                     0457   471 PROC_Q_SYSCOMND:
                           0000000B' 0457   472 	.LONG	SYSCOMND_LEN	; descrpitor to SYS$COMAND logical name
                           00000467' 045B   473 	.LONG	PROC_T_SYSCOMND
                                     045F   474 PROC_T_SYSDISK:
            4B 53 49 44 24 53 59 53  045F   475 	.ASCII	/SYS$DISK/
                           00000008  0467   476 SYSDISK_LEN=.-PROC_T_SYSDISK
                                     0467   477 PROC_T_SYSCOMND:
   44 4E 41 4D 4D 4F 43 24 53 59 53  0467   478 	.ASCII	/SYS$COMMAND/
                           0000000B  0472   479 SYSCOMND_LEN=.-PROC_T_SYSCOMND
                                     0472   480 FAO_Q_DEVNAM:
                           00000009' 0472   481 	.LONG	FAO_DEVN_LEN		; descriptor to FAO control string
                           0000047A' 0476   482 	.LONG	FAO_T_DEVNAM		; for device name
                                     047A   483 FAO_T_DEVNAM:
         3A 57 55 21 43 41 21 20 20  047A   484 	.ASCII	/  !AC!UW:/
                           00000009  0483   485 FAO_DEVN_LEN=.-FAO_T_DEVNAM
                                     0483   486 BLANK_T_STRING:
                           20 2D 20  0483   487 	.ASCII	/ - /			; blank string
                                     0486   488 NULL_T_STRING:
                           00000000  0486   489 	.LONG	0			; null string
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  12
X0101           SHOW$PROCESS - Main loop                                                                                         (4)

                                     048A   491 	.SBTTL	SHOW$PROCESS	- Main loop
                                     048A   492 ;++
                                     048A   493 ; FUNCTIONAL DESCRIPTION:
                                     048A   494 ;
                                     048A   495 ;	This routine represents the main loop of the SHOW PROCESS command.
                                     048A   496 ;
                                     048A   497 ;
                                     048A   498 ; CALLING SEQUENCE:
                                     048A   499 ;
                                     048A   500 ;	CALLS
                                     048A   501 ;
                                     048A   502 ; INPUT PARAMETERS:
                                     048A   503 ;
                                     048A   504 ;	CLI$A_UTILSERV(AP) =	CLI utility call back address.
                                     048A   505 ;
                                     048A   506 ;
                                     048A   507 ; IMPLICIT INPUTS:
                                     048A   508 ;
                                     048A   509 ;	NONE
                                     048A   510 ;
                                     048A   511 ; OUTPUT PARAMETERS:
                                     048A   512 ;
                                     048A   513 ;	NONE
                                     048A   514 ;
                                     048A   515 ; IMPLICIT OUTPUTS:
                                     048A   516 ;
                                     048A   517 ;	NONE
                                     048A   518 ;
                                     048A   519 ; COMPLETION CODES:
                                     048A   520 ;
                                     048A   521 ;	R0 = 	SS$_NORMAL
                                     048A   522 ;		status code returned by called routines
                                     048A   523 ;
                                     048A   524 ; SIDE EFFECTS:
                                     048A   525 ;
                                     048A   526 ;	NONE
                                     048A   527 ;
                                     048A   528 ;--
                                     048A   529 
                                 00000000   530 	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
                               0000' 0000   531 	.ENTRY	SHOW$PROCESS,0
                                     0002   532 
                                     0002   533 ;
                                     0002   534 ; get all process information at once
                                     0002   535 ;
                                     0002   536 
       0065'CF            00     FB  0002   537 	CALLS	#0,W^PROC_GETINFO	; get job process information
            55            50     E9  0007   538 	BLBC	R0,90$			; exit on error
                                     000A   539 
                                     000A   540 ;
                                     000A   541 ; display title information
                                     000A   542 ;
                                     000A   543 
       0150'CF            00     FB  000A   544 	CALLS	#0,W^PROC_HEADINFO
            4D            50     E9  000F   545 	BLBC	R0,90$			; exit on error
                                     0012   546 
                                     0012   547 ;
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  13
X0101           SHOW$PROCESS - Main loop                                                                                         (4)

                                     0012   548 ; parse qualifiers and call true action routines
                                     0012   549 ;
                                     0012   550 
       0000'CF   00000000'8F     D0  0012   551 	MOVL	#SS$_NORMAL,W^SHOW$L_STATUS
                                     001B   552 					; assume success
                     0095'CF     DF  001B   553 	PUSHAL	W^PROC_L_BITLIS		; bit list
                                     001F   554 
                     0000'CF     DF  001F   555 	PUSHAL	W^SHOW$A_CLIWORK	; address of CLI work area
                     0000'CF     DF  0023   556 	PUSHAL	W^PROC_A_GETQUAL	; request qualifiers parsing
         08 BC            03     FB  0027   557 	CALLS	#3,@CLI$A_UTILSERV(AP)	; call CLI utility service routine
            50       0000'CF     D0  002B   558 	MOVL	W^SHOW$L_STATUS,R0	; get status returned by last action routine
            2C            50     E9  0030   559 	BLBC	R0,90$			; exit on error
                                     0033   560 
                                     0033   561 ;
                                     0033   562 ; display default information if applicable
                                     0033   563 ;
                                     0033   564 
            51       0095'CF     D0  0033   565 	MOVL	W^PROC_L_BITLIS,R1	; get qualifier bit list
            51            10     CA  0038   566 	BICL	#PROC_M_ALL,R1		; mask off bit for /ALL
                          22     12  003B   567 	BNEQU	90$			; exit if any qualifier specified
       0169'CF            00     FB  003D   568 	CALLS	#0,W^PROC_DEFA_PRES	; display default information
            1A            50     E9  0042   569 	BLBC	R0,90$			; exit on error
       0095'CF            04     E1  0045   570 	BBC	#PROC_V_ALL,W^PROC_L_BITLIS,90$
                          14         004A       
                                     004B   571 					; all done if not /ALL
                                     004B   572 ;
                                     004B   573 ; treat /ALL qualifier
                                     004B   574 ;
                                     004B   575 
       018F'CF            00     FB  004B   576 	CALLS	#0,W^PROC_QUOT_PRES	; display quota
       01B7'CF            00     FB  0050   577 	CALLS	#0,W^PROC_ACCO_PRES	; display accounting information
       01D0'CF            00     FB  0055   578 	CALLS	#0,W^PROC_PRIV_PRES	; display process privileges
       0237'CF            00     FB  005A   579 	CALLS	#0,W^PROC_SUBP_PRES	; give list of subprocesses
                                     005F   580 
                                     005F   581 ;
                                     005F   582 ; exit
                                     005F   583 ;
                                     005F   584 
                                     005F   585 90$:
       0000'CF            50     D0  005F   586 	MOVL	R0,W^SHOW$L_STATUS	; save return code
                                 04  0064   587 	RET
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  14
X0101           PROC_GETINFO - retrieve information                                                                              (5)

                                     0065   589 	.SBTTL	PROC_GETINFO	- retrieve information
                                     0065   590 
                                     0065   591 ;++
                                     0065   592 ; FUNCTIONAL DESCRIPTION:
                                     0065   593 ;
                                     0065   594 ;	This routine retrieves all information about the current process
                                     0065   595 ;	that is available in user mode and that is likely to be needed
                                     0065   596 ;	by one of the qualifier action routines.
                                     0065   597 ;	The necessary arithmetic is also performed, and pointers 
                                     0065   598 ;	available at run time inserted into FAO parameter lists.
                                     0065   599 ;	Device information and subprocess information however, is
                                     0065   600 ;	retrieved only when needed.
                                     0065   601 ;
                                     0065   602 ;
                                     0065   603 ; CALLING SEQUENCE:
                                     0065   604 ;
                                     0065   605 ;	CALLS
                                     0065   606 ;
                                     0065   607 ; INPUT PARAMETERS:
                                     0065   608 ;
                                     0065   609 ;	NONE
                                     0065   610 ;
                                     0065   611 ; IMPLICIT INPUTS:
                                     0065   612 ;
                                     0065   613 ;	NONE
                                     0065   614 ;
                                     0065   615 ; OUTPUT PARAMETERS:
                                     0065   616 ;
                                     0065   617 ;	NONE
                                     0065   618 ;
                                     0065   619 ; IMPLICIT OUTPUTS:
                                     0065   620 ;
                                     0065   621 ;	FAO parameter lists for most options are ready to be used.
                                     0065   622 ;
                                     0065   623 ; COMPLETION CODES:
                                     0065   624 ;
                                     0065   625 ;	R0 =	SS$_NORMAL
                                     0065   626 ;		status code returned by system services called.
                                     0065   627 ;		($GETJPI and $TRNLOG)
                                     0065   628 ;
                                     0065   629 ; SIDE EFFECTS:
                                     0065   630 ;
                                     0065   631 ;	NONE
                                     0065   632 ;
                                     0065   633 ;--
                                     0065   634 
                                 00000065   635 	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
                                     0065   636 
                                     0065   637 PROC_GETINFO:
                               0000  0065   638 	.WORD	0
                                     0067   639 
                                     0067   640 ;
                                     0067   641 ; get JPI information
                                     0067   642 ;
                                     0067   643 
                                     0067   644 	$GETJPI_S	ITMLST=JPI_ITMLST
            03            50     E8  007E   645 	BLBS	R0,5$			; exit on error
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  15
X0101           PROC_GETINFO - retrieve information                                                                              (5)

                          00CB   31  0081   646 	BRW	90$
                                     0084   647 5$:
                                     0084   648 
                                     0084   649 ;
                                     0084   650 ; perform some arithmetic and insert pointers
                                     0084   651 ;
                                     0084   652 
       0125'CF   FFFE7960 8F     7A  0084   653 	EMUL	#-100000,W^ACC_L_CPUTIM,#0,W^ACC_Q_CPUTIM
       02BD'CF            00         008D       
                                     0091   654 					; convert CPU time to system format
       0125'CF       02BD'CF     DE  0091   655 	MOVAL	W^ACC_Q_CPUTIM,W^ACC_L_CPUTIM
                                     0098   656 					; and insert pointer to quad time
                     00E5'CF     D5  0098   657 	TSTL	W^QUO_L_CPULIM		; dont let it be zero
                          04     12  009C   658 	BNEQU	3$			;
                     00E5'CF     D6  009E   659 	INCL	W^QUO_L_CPULIM		; very small positive value
                                     00A2   660 3$:
       00E5'CF   FFFE7960 8F     7A  00A2   661 	EMUL	#-100000,W^QUO_L_CPULIM,#0,W^QUO_Q_CPULIM
       02C5'CF            00         00AB       
                                     00AF   662 					; do the same for CPU limit
       00E5'CF       02C5'CF     DE  00AF   663 	MOVAL	W^QUO_Q_CPULIM,W^QUO_L_CPULIM
                                     00B6   664 					; insert pointer to time value
                                     00B6   665 	$GETTIM_S	W^PROC_Q_SYSTIM	; get system date and time
       0030'CF       02CD'CF     C2  00C1   666 	SUBL2	W^PROC_Q_SYSTIM,W^ACC_T_LOGINTIM
       0034'CF       02D1'CF     D9  00C8   667 	SBWC	W^PROC_Q_SYSTIM+4,W^ACC_T_LOGINTIM+4
                                     00CF   668 					; calculate connect time (in delta format)
                                     00CF   669 
                                     00CF   670 ;
                                     00CF   671 ; get terminal name	(translate SYS$COMMAND:)
                                     00CF   672 ;
                                     00CF   673 
                                     00CF   674 	$TRNLOG_S	-
                                     00CF   675 		LOGNAM=W^PROC_Q_SYSCOMND,-
                                     00CF   676 		RSLLEN=W^HDR_Q_TERMINAL,-
                                     00CF   677 		RSLBUF=W^HDR_Q_TERMINAL
            64            50     E9  00E8   678 	BLBC	R0,90$			; exit on error
       027D'CF            1B     91  00EB   679 	CMPB	#27,W^HDR_T_TERMINAL	; does name start with escape ?
                          0E     12  00F0   680 	BNEQU	10$			; branch if no escape
   000000A9'EF            04     C2  00F2   681 	SUBL2	#4,HDR_Q_TERMINAL	; adjust string length
   000000AD'EF            04     C0  00F9   682 	ADDL2	#4,HDR_Q_TERMINAL+4	; adjust pointer
                                     0100   683 10$:
                                     0100   684 
                                     0100   685 ;
                                     0100   686 ; get default device name	(translate SYS$DISK:)
                                     0100   687 ;
                                     0100   688 
                                     0100   689 	$TRNLOG_S	-
                                     0100   690 		LOGNAM=W^PROC_Q_SYSDISK,-
                                     0100   691 		RSLLEN=W^DEF_Q_DEVICE,-
                                     0100   692 		RSLBUF=W^DEF_Q_DEVICE
            33            50     E9  0119   693 	BLBC	R0,90$			; exit on error
       029D'CF            1B     91  011C   694 	CMPB	#27,W^DEF_T_DEVICE	; does name start with escape ?
                          0E     12  0121   695 	BNEQU	20$			; branch if no escape
   000000D1'EF            04     C2  0123   696 	SUBL2	#4,DEF_Q_DEVICE		; adjust string length
   000000D5'EF            04     C0  012A   697 	ADDL2	#4,DEF_Q_DEVICE+4	; adjust pointer
                                     0131   698 20$:
                                     0131   699 
                                     0131   700 ;
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  16
X0101           PROC_GETINFO - retrieve information                                                                              (5)

                                     0131   701 ; get default directory string
                                     0131   702 ;
                                     0131   703 
       00D9'CF   00000000'EF     DE  0131   704 	MOVAL	PIO$GT_DDSTRING,W^DEF_L_DEFDIR
                                     013A   705 					; make FAO entry point to it
                                     013A   706 
                                     013A   707 ;
                                     013A   708 ; allocate scratch space for everybody
                                     013A   709 ;
                                     013A   710 
                                     013A   711 	$EXPREG_S	-
                                     013A   712 		PAGCNT=#SCRATCH_PAGES,-
                                     013A   713 		RETADR=W^PROC_Q_SCRATCH,-
                                     013A   714 		ACMODE=#USER_MODE,-
                                     013A   715 		REGION=#PROGRAM_REGION
                                     014F   716 
                                     014F   717 ;
                                     014F   718 ; exit
                                     014F   719 ;
                                     014F   720 
                                     014F   721 90$:
                                 04  014F   722 	RET
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  17
X0101           PROC_HEADINFO - display header information                                                                       (6)

                                     0150   724 	.SBTTL	PROC_HEADINFO	- display header information
                                     0150   725 ;++
                                     0150   726 ; FUNCTIONAL DESCRIPTION:
                                     0150   727 ;
                                     0150   728 ;	This routine prints header information to be shown no matter
                                     0150   729 ;	what qualifiers are specified.
                                     0150   730 ;
                                     0150   731 ;
                                     0150   732 ; CALLING SEQUENCE:
                                     0150   733 ;
                                     0150   734 ;	CALLS
                                     0150   735 ;
                                     0150   736 ; INPUT PARAMETERS:
                                     0150   737 ;
                                     0150   738 ;	NONE
                                     0150   739 ;
                                     0150   740 ; IMPLICIT INPUTS:
                                     0150   741 ;
                                     0150   742 ;	Information already retrieved by the PROC_GETINFO routine.
                                     0150   743 ;
                                     0150   744 ; OUTPUT PARAMETERS:
                                     0150   745 ;
                                     0150   746 ;	NONE
                                     0150   747 ;
                                     0150   748 ; IMPLICIT OUTPUTS:
                                     0150   749 ;
                                     0150   750 ;	NONE
                                     0150   751 ;
                                     0150   752 ; COMPLETION CODES:
                                     0150   753 ;
                                     0150   754 ;	R0 =	SS$_NORMAL
                                     0150   755 ;
                                     0150   756 ; SIDE EFFECTS:
                                     0150   757 ;
                                     0150   758 ;	NONE
                                     0150   759 ;
                                     0150   760 ;--
                                     0150   761 
                                 00000150   762 	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
                                     0150   763 
                                     0150   764 PROC_HEADINFO:
                               0000  0150   765 	.WORD	0
                                     0152   766 
                                     0152   767 ;
                                     0152   768 ; print header information
                                     0152   769 ;
                                     0152   770 
                                     0152   771 10$:
                 00000000'8F     DD  0152   772 	PUSHL	#SHOW$_PROCHDRI		;
                     00A5'CF     DF  0158   773 	PUSHAL	W^HDR_LIST		; parameter list
       0000'CF            02     FB  015C   774 	CALLS	#2,W^SHOW$PRINT_MSG	; issue message
                                     0161   775 90$:
            50   00000000'8F     D0  0161   776 	MOVL	#SS$_NORMAL,R0		; status code
                                 04  0168   777 	RET
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  18
X0101           PROC_DEFA_PRES - display default information                                                                     (7)

                                     0169   779 	.SBTTL	PROC_DEFA_PRES	- display default information
                                     0169   780 ;++
                                     0169   781 ; FUNCTIONAL DESCRIPTION:
                                     0169   782 ;
                                     0169   783 ;	This routine displays default information if either
                                     0169   784 ;	no qualifier has been given, or /ALL has been specified as the
                                     0169   785 ;	only qualifier.
                                     0169   786 ;	Separate routines are called to display device information
                                     0169   787 ;	(devices allocated and mounted), if any.
                                     0169   788 ;
                                     0169   789 ;
                                     0169   790 ; CALLING SEQUENCE:
                                     0169   791 ;
                                     0169   792 ;	CALLS
                                     0169   793 ;
                                     0169   794 ; INPUT PARAMETERS:
                                     0169   795 ;
                                     0169   796 ;	NONE
                                     0169   797 ;
                                     0169   798 ; IMPLICIT INPUTS:
                                     0169   799 ;
                                     0169   800 ;	Information already retrieved by the PROC_GETINFO routine.
                                     0169   801 ;
                                     0169   802 ; OUTPUT PARAMETERS:
                                     0169   803 ;
                                     0169   804 ;	NONE
                                     0169   805 ;
                                     0169   806 ; IMPLICIT OUTPUTS:
                                     0169   807 ;
                                     0169   808 ;	NONE
                                     0169   809 ;
                                     0169   810 ; COMPLETION CODES:
                                     0169   811 ;
                                     0169   812 ;	R0 =	SS$_NORMAL
                                     0169   813 ;		error status returned by routines called 
                                     0169   814 ;		(PROC_DEVALL and PROC_DEVMOU)
                                     0169   815 ;
                                     0169   816 ; SIDE EFFECTS:
                                     0169   817 ;
                                     0169   818 ;	NONE
                                     0169   819 ;
                                     0169   820 ;--
                                     0169   821 
                                 00000169   822 	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
                                     0169   823 
                                     0169   824 PROC_DEFA_PRES:
                               0000  0169   825 	.WORD	0
                                     016B   826 
                                     016B   827 ;
                                     016B   828 ; print default information
                                     016B   829 ;
                                     016B   830 
                 00000000'8F     DD  016B   831 	PUSHL	#SHOW$_PROCDEFA		; message identifier
                     00B9'CF     DF  0171   832 	PUSHAL	W^DEF_LIST		; parameter list
       0000'CF            02     FB  0175   833 	CALLS	#2,W^SHOW$PRINT_MSG	; print information
                                     017A   834 
                                     017A   835 ;
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  19
X0101           PROC_DEFA_PRES - display default information                                                                     (7)

                                     017A   836 ; print device information, if any
                                     017A   837 ;
                                     017A   838 
            50   00000000'8F     D0  017A   839 	MOVL	#SS$_NORMAL,R0		; assume success
       038A'CF            00     FB  0181   840 	CALLS	#0,W^PROC_DEVALL	; list of devices allocated
            05            50     E9  0186   841 	BLBC	R0,90$			; exit on error
       04D2'CF            00     FB  0189   842 	CALLS	#0,W^PROC_DEVMOUN	; list of devices mounted
                                     018E   843 90$:
                                 04  018E   844 	RET
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  20
X0101           PROC_QUOT_PRES - display quota information                                                                       (8)

                                     018F   846 	.SBTTL	PROC_QUOT_PRES	- display quota information
                                     018F   847 ;++
                                     018F   848 ; FUNCTIONAL DESCRIPTION:
                                     018F   849 ;
                                     018F   850 ;	This routine displays quota information relevant to the current
                                     018F   851 ;	process.
                                     018F   852 ;	It is called by the CLI as a true action routine for the /QUOTA
                                     018F   853 ;	qualifier, and is also invoked directly if the /ALL qualifier
                                     018F   854 ;	is present.
                                     018F   855 ;
                                     018F   856 ;
                                     018F   857 ; CALLING SEQUENCE:
                                     018F   858 ;
                                     018F   859 ;	CALLS
                                     018F   860 ;
                                     018F   861 ; INPUT PARAMETERS:
                                     018F   862 ;
                                     018F   863 ;	NONE
                                     018F   864 ;
                                     018F   865 ; IMPLICIT INPUTS:
                                     018F   866 ;
                                     018F   867 ;	Information already retrieved by the PROC_GETINFO routine.
                                     018F   868 ;
                                     018F   869 ; OUTPUT PARAMETERS:
                                     018F   870 ;
                                     018F   871 ;	NONE
                                     018F   872 ;
                                     018F   873 ; IMPLICIT OUTPUTS:
                                     018F   874 ;
                                     018F   875 ;	NONE
                                     018F   876 ;
                                     018F   877 ; COMPLETION CODES:
                                     018F   878 ;
                                     018F   879 ;	R0 =	SS$_NORMAL
                                     018F   880 ;
                                     018F   881 ; SIDE EFFECTS:
                                     018F   882 ;
                                     018F   883 ;	NONE
                                     018F   884 ;
                                     018F   885 ;--
                                     018F   886 
                                 0000018F   887 	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
                                     018F   888 
                                     018F   889 PROC_QUOT_PRES:
                               0000  018F   890 	.WORD	0
                                     0191   891 
                                     0191   892 ;
                                     0191   893 ; print quota information
                                     0191   894 ;
                                     0191   895 
                 00000000'8F     DD  0191   896 	PUSHL	#SHOW$_PROCQUOT1	; message identifier
                     00DD'CF     DF  0197   897 	PUSHAL	W^QUO_LIST1		; parameter list aready filled
       0000'CF            02     FB  019B   898 	CALLS	#2,W^SHOW$PRINT_MSG	; print information
                 00000000'8F     DD  01A0   899 	PUSHL	#SHOW$_PROCQUOT2	; message id for part 2
                     00E5'CF     DF  01A6   900 	PUSHAL	W^QUO_LIST2		; parameter list
       0000'CF            02     FB  01AA   901 	CALLS	#2,W^SHOW$PRINT_MSG	; print 
            50   00000000'8F     D0  01AF   902 	MOVL	#SS$_NORMAL,R0		; success
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  21
X0101           PROC_QUOT_PRES - display quota information                                                                       (8)

                                 04  01B6   903 	RET
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  22
X0101           PROC_ACCO_PRES - display accounting information                                                                  (9)

                                     01B7   905 	.SBTTL	PROC_ACCO_PRES	- display accounting information
                                     01B7   906 ;++
                                     01B7   907 ; FUNCTIONAL DESCRIPTION:
                                     01B7   908 ;
                                     01B7   909 ;	This routine displays accounting information relevant to the
                                     01B7   910 ;	current process.
                                     01B7   911 ;	It is called by the CLI as a true action routine for the 
                                     01B7   912 ;	/ACCOUNTING qualifier, and is also invoked directly if
                                     01B7   913 ;	the /ALL qualifier is given.
                                     01B7   914 ;
                                     01B7   915 ;
                                     01B7   916 ; CALLING SEQUENCE:
                                     01B7   917 ;
                                     01B7   918 ;	CALLS
                                     01B7   919 ;
                                     01B7   920 ; INPUT PARAMETERS:
                                     01B7   921 ;
                                     01B7   922 ;	NONE
                                     01B7   923 ;
                                     01B7   924 ; IMPLICIT INPUTS:
                                     01B7   925 ;
                                     01B7   926 ;	Information already retrieved by the PROC_GETINFO routine.
                                     01B7   927 ;
                                     01B7   928 ; OUTPUT PARAMETERS:
                                     01B7   929 ;
                                     01B7   930 ;	NONE
                                     01B7   931 ;
                                     01B7   932 ; IMPLICIT OUTPUTS:
                                     01B7   933 ;
                                     01B7   934 ;	NONE
                                     01B7   935 ;
                                     01B7   936 ; COMPLETION CODES:
                                     01B7   937 ;
                                     01B7   938 ;	R0 =	SS$_NORMAL
                                     01B7   939 ;
                                     01B7   940 ; SIDE EFFECTS:
                                     01B7   941 ;
                                     01B7   942 ;	NONE
                                     01B7   943 ;
                                     01B7   944 ;--
                                     01B7   945 
                                 000001B7   946 	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
                                     01B7   947 
                                     01B7   948 PROC_ACCO_PRES:
                               0000  01B7   949 	.WORD	0
                                     01B9   950 
                                     01B9   951 ;
                                     01B9   952 ; display accounting information
                                     01B9   953 ;
                                     01B9   954 
                 00000000'8F     DD  01B9   955 	PUSHL	#SHOW$_PROCACCO		; message identifier
                     010D'CF     DF  01BF   956 	PUSHAL	W^ACC_LIST		; parameter list already filled
       0000'CF            02     FB  01C3   957 	CALLS	#2,W^SHOW$PRINT_MSG	; and print information
            50   00000000'8F     D0  01C8   958 	MOVL	#SS$_NORMAL,R0		; Success
                                 04  01CF   959 	RET
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  23
X0101           PROC_PRIV_PRES - display process privileges                                                                     (10)

                                     01D0   961 	.SBTTL	PROC_PRIV_PRES	- display process privileges
                                     01D0   962 ;++
                                     01D0   963 ; FUNCTIONAL DESCRIPTION:
                                     01D0   964 ;
                                     01D0   965 ;	This routine displays the list of process privileges
                                     01D0   966 ;	of the current process
                                     01D0   967 ;
                                     01D0   968 ;
                                     01D0   969 ; CALLING SEQUENCE:
                                     01D0   970 ;
                                     01D0   971 ;	CALLS
                                     01D0   972 ;
                                     01D0   973 ; INPUT PARAMETERS:
                                     01D0   974 ;
                                     01D0   975 ;	NONE
                                     01D0   976 ;
                                     01D0   977 ; IMPLICIT INPUTS:
                                     01D0   978 ;
                                     01D0   979 ;	Process privilege vector retrieved by PROC_GETINFO.
                                     01D0   980 ;
                                     01D0   981 ; OUTPUT PARAMETERS:
                                     01D0   982 ;
                                     01D0   983 ;	NONE
                                     01D0   984 ;
                                     01D0   985 ; IMPLICIT OUTPUTS:
                                     01D0   986 ;
                                     01D0   987 ;	NONE
                                     01D0   988 ;
                                     01D0   989 ; COMPLETION CODES:
                                     01D0   990 ;
                                     01D0   991 ;	R0 =	SS$_NORMAL
                                     01D0   992 ;
                                     01D0   993 ; SIDE EFFECTS:
                                     01D0   994 ;
                                     01D0   995 ;	NONE
                                     01D0   996 ;
                                     01D0   997 ; REGISTER USAGE:
                                     01D0   998 ;
                                     01D0   999 ;	R11 =	privilege bit (0-63)
                                     01D0  1000 ;	R8 =	pointer to common privilege name table
                                     01D0  1001 ;	R9 =	bit offset within longword
                                     01D0  1002 ;	R10 =	index longword within privilege quadword
                                     01D0  1003 ;
                                     01D0  1004 ;--
                                     01D0  1005 
                                 000001D0  1006 	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
                                     01D0  1007 
                                     01D0  1008 PROC_PRIV_PRES:
                               0700  01D0  1009 	.WORD	^M<R9,R8,R10>
                                     01D2  1010 
                                     01D2  1011 ;
                                     01D2  1012 ; print title
                                     01D2  1013 ;
                                     01D2  1014 
                                     01D2  1015 
                 00000000'8F     DD  01D2  1016 	PUSHL	#SHOW$_PROCPRI		; message id
                          00     DD  01D8  1017 	PUSHL	#0			; no parameter list
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  24
X0101           PROC_PRIV_PRES - display process privileges                                                                     (10)

       0000'CF            02     FB  01DA  1018 	CALLS	#2,W^SHOW$PRINT_MSG	; issue message
                                     01DF  1019 
                                     01DF  1020 ;
                                     01DF  1021 ; selectively print privileges
                                     01DF  1022 ;
                                     01DF  1023 
            58   00000000'EF     DE  01DF  1024 	MOVAL	PRV$AB_NAMES,R8		; point to common privilege name table
                                     01E6  1025 10$:
                          88     95  01E6  1026 	TSTB	(R8)+			; test first byte
                          45     13  01E8  1027 	BEQLU	90$			; branch if end of list
            59            88     9A  01EA  1028 	MOVZBL	(R8)+,R9		; get bit number
            5A            01     D0  01ED  1029 	MOVL	#1,R10			; assume second longword
            59            20     C3  01F0  1030 	SUBL3	#32,R9,R11		; compute bit offset within lonword
                          5B         01F3       
                          05     1E  01F4  1031 	BGEQU	20$			; branch if indeed 2d word
            5B            59     D0  01F6  1032 	MOVL	R9,R11			; restore original bit offset
                          5A     D4  01F9  1033 	CLRL	R10			; mark 1st longword
                                     01FB  1034 20$:
       0131'CF4A          5B     E1  01FB  1035 	BBC	R11,W^PRV_Q_PROCPRIV[R10],30$
                          25         0201       
                                     0202  1036 					; branch if corresponding privilege bit clear
       02D5'CF            58     D0  0202  1037 	MOVL	R8,W^PRIV_FAO_LIST	; fill in pointer to code text
       02D9'CF       017D'CF49   D0  0207  1038 	MOVL	W^PRIV_A_TEXT[R9],W^PRIV_FAO_LIST+4
                                     020F  1039 					; fill in pointer to full text
                          07     12  020F  1040 	BNEQU	25$			; ok if not null
       02D9'CF       0486'CF     DE  0211  1041 	MOVAL	W^NULL_T_STRING,W^PRIV_FAO_LIST+4
                                     0218  1042 					; insert pointer to null string
                                     0218  1043 25$:
                 00000000'8F     DD  0218  1044 	PUSHL	#SHOW$_PRIV_TEXT	; message code
                     02D5'CF     DF  021E  1045 	PUSHAL	W^PRIV_FAO_LIST		; parameter list
       0000'CF            02     FB  0222  1046 	CALLS	#2,W^SHOW$PRINT_MSG	; and issue message
                                     0227  1047 30$:
            50            88     9A  0227  1048 	MOVZBL	(R8)+,R0		; skip string just printed
            58            50     C0  022A  1049 	ADDL2	R0,R8			;
                          B7     11  022D  1050 	BRB	10$			; and try next one
                                     022F  1051 ;
                                     022F  1052 ; exit
                                     022F  1053 ;
                                     022F  1054 
                                     022F  1055 90$:
            50   00000000'8F     D0  022F  1056 	MOVL	#SS$_NORMAL,R0		; success
                                 04  0236  1057 	RET				; all done
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  25
X0101           PROC_SUBP_PRES - list subprocesses                                                                              (11)

                                     0237  1059 	.SBTTL	PROC_SUBP_PRES	- list subprocesses
                                     0237  1060 ;++
                                     0237  1061 ; FUNCTIONAL DESCRIPTION:
                                     0237  1062 ;
                                     0237  1063 ;	This routine displays the tree of subprocesses spawned by the 
                                     0237  1064 ;	current process.
                                     0237  1065 ;
                                     0237  1066 ;	Algorithm:
                                     0237  1067 ;
                                     0237  1068 ;	1) in kernel mode:
                                     0237  1069 ;	Sequentially scan all PCB's, and construct a list of all 
                                     0237  1070 ;	owner - subprocess pairs in the system.
                                     0237  1071 ;	(i.e fill in downward pointers).
                                     0237  1072 ;
                                     0237  1073 ;	Scan the tree of subprocesses starting at the current process's pid
                                     0237  1074 ;	and convert pids to names.
                                     0237  1075 ;	Return the list of subprocess names with associated levels in 
                                     0237  1076 ;	scratch space.
                                     0237  1077 ;
                                     0237  1078 ;	2) in user mode:
                                     0237  1079 ;	Format and print above list.
                                     0237  1080 ;
                                     0237  1081 ;
                                     0237  1082 ;
                                     0237  1083 ; CALLING SEQUENCE:
                                     0237  1084 ;
                                     0237  1085 ;	CALLS
                                     0237  1086 ;
                                     0237  1087 ; INPUT PARAMETERS:
                                     0237  1088 ;
                                     0237  1089 ;	NONE
                                     0237  1090 ;
                                     0237  1091 ; IMPLICIT INPUTS:
                                     0237  1092 ;
                                     0237  1093 ;	NONE
                                     0237  1094 ;
                                     0237  1095 ; OUTPUT PARAMETERS:
                                     0237  1096 ;
                                     0237  1097 ;	NONE
                                     0237  1098 ;
                                     0237  1099 ; IMPLICIT OUTPUTS:
                                     0237  1100 ;
                                     0237  1101 ;	NONE
                                     0237  1102 ;
                                     0237  1103 ; COMPLETION CODES:
                                     0237  1104 ;
                                     0237  1105 ;	R0 =	SS$_NORMAL
                                     0237  1106 ;		code returned by system services called
                                     0237  1107 ;		SHOW$_BADLOGIC : scratch area overflow
                                     0237  1108 ;
                                     0237  1109 ; SIDE EFFECTS:
                                     0237  1110 ;
                                     0237  1111 ;	NONE
                                     0237  1112 ;
                                     0237  1113 ; REGISTER USAGE:
                                     0237  1114 ;
                                     0237  1115 ;	R6 =	counter for leaders
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  26
X0101           PROC_SUBP_PRES - list subprocesses                                                                              (11)

                                     0237  1116 ;	R7 =	point to list of subprocess names to format
                                     0237  1117 ;	R8 =	level number
                                     0237  1118 ;	R9 =	pointer to beginning of output buffer
                                     0237  1119 ;	R3 = 	pointer to current output character
                                     0237  1120 ;
                                     0237  1121 ;
                                     0237  1122 ;--
                                     0237  1123 
                                 00000237  1124 	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
                                     0237  1125 
                                     0237  1126 PROC_SUBP_PRES:
                               03CC  0237  1127 	.WORD	^M<R2,R3,R6,R7,R8,R9>
                                     0239  1128 
                                     0239  1129 
                                     0239  1130 ;
                                     0239  1131 ; construct list of subprocesses in kernel mode
                                     0239  1132 ;
                                     0239  1133 
                                     0239  1134 	$CMKRNL_S	W^COPY_SUBP
            50            50     E9  0246  1135 	BLBC	R0,98$			; exit on error
                                     0249  1136 
                                     0249  1137 ;
                                     0249  1138 ; format and print list of subprocesses (if any)
                                     0249  1139 ;
                                     0249  1140 
            57       0099'CF     D0  0249  1141 	MOVL	W^PROC_Q_SCRATCH,R7	; start of copied area
                          67     B5  024E  1142 	TSTW	(R7)			; test if list empty
                          40     13  0250  1143 	BEQLU	90$			; exit if list empty
                 00000000'8F     DD  0252  1144 	PUSHL	#SHOW$_PROCSUBP		; message id for title
                          00     DD  0258  1145 	PUSHL	#0			; no parameters
       0000'CF            02     FB  025A  1146 	CALLS	#2,W^SHOW$PRINT_MSG	; print title
            59       0004'CF     D0  025F  1147 	MOVL	W^SHOW$GQ_OUT_DSC+4,R9	; pointer to output buffer
                                     0264  1148 10$:
            58            87     3C  0264  1149 	MOVZWL	(R7)+,R8		; get level number
                          29     13  0267  1150 	BEQLU	90$			; exit if end of list
            56            01     D0  0269  1151 	MOVL	#1,R6			; counter
            53            59     D0  026C  1152 	MOVL	R9,R3			; pointer to current output character
                                     026F  1153 20$:
            83   202D2020 8F     D0  026F  1154 	MOVL	#^A/  - /,(R3)+		; insert one leader per level
            56            58     F3  0276  1155 	AOBLEQ	R8,R6,20$		; loop on number of levels
                          F5         0279       
                                     027A  1156 50$:
            50            87     9A  027A  1157 	MOVZBL	(R7)+,R0		; get character count
            67            50     28  027D  1158 	MOVC3	R0,(R7),(R3)		; copy name to output buffer
                          63         0280       
            53            59     C2  0281  1159 	SUBL2	R9,R3			; calculate length of output string
                          59     DD  0284  1160 	PUSHL	R9			; pointer to output buffer
                          53     DD  0286  1161 	PUSHL	R3			; length of output buffer
       0000'CF            02     FB  0288  1162 	CALLS	#2,W^SHOW$PRINT_LINE	; print line
            57            0F     C0  028D  1163 	ADDL2	#PCB$S_LNAME-1,R7	; point to next item in list
                          D2     11  0290  1164 	BRB	10$			; and try for more
                                     0292  1165 
                                     0292  1166 
                                     0292  1167 ;
                                     0292  1168 ; exits
                                     0292  1169 ;
                                     0292  1170 
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  27
X0101           PROC_SUBP_PRES - list subprocesses                                                                              (11)

                                     0292  1171 90$:
            50   00000000'8F     D0  0292  1172 	MOVL	#SS$_NORMAL,R0		; indicate success
                                     0299  1173 98$:
            05            50     E8  0299  1174 	BLBS	R0,99$			; exit if success
       0000'CF            50     D0  029C  1175 	MOVL	R0,W^SHOW$L_STATUS	; record failure in global location
                                     02A1  1176 99$:
                                 04  02A1  1177 	RET
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  28
X0101           COPY_SUBP - construct list of subprocesses                                                                      (12)

                                     02A2  1179 	.SBTTL	COPY_SUBP	- construct list of subprocesses
                                     02A2  1180 ;++
                                     02A2  1181 ; FUNCTIONAL DESCRIPTION:
                                     02A2  1182 ;
                                     02A2  1183 ;	This routine constructs the list of subprocesses owned by the
                                     02A2  1184 ;	current process, in 2 steps:
                                     02A2  1185 ;
                                     02A2  1186 ;	1) The list of all processes in the system is scanned, and
                                     02A2  1187 ;	a list all owner - subprocess pairs is constructed in scratch space
                                     02A2  1188 ;
                                     02A2  1189 ;	2) The table thus constructed is scanned starting at the current
                                     02A2  1190 ;	process's pid, and the tree of subprocesses is followed ( if any ).
                                     02A2  1191 ;	While doing so, each pid is converted to a name that is copied
                                     02A2  1192 ;	along with the level number, to the common scratch area.
                                     02A2  1193 ;
                                     02A2  1194 ;
                                     02A2  1195 ; CALLING SEQUENCE:
                                     02A2  1196 ;
                                     02A2  1197 ;	CALLS
                                     02A2  1198 ;
                                     02A2  1199 ;	This routine is invoked through the $CMKRNL system service
                                     02A2  1200 ;
                                     02A2  1201 ; INPUT PARAMETERS:
                                     02A2  1202 ;
                                     02A2  1203 ;	NONE
                                     02A2  1204 ;
                                     02A2  1205 ; IMPLICIT INPUTS:
                                     02A2  1206 ;
                                     02A2  1207 ;	PROC_Q_SCRATCH = descriptor to common scratch area
                                     02A2  1208 ;
                                     02A2  1209 ; OUTPUT PARAMETERS:
                                     02A2  1210 ;
                                     02A2  1211 ;	NONE
                                     02A2  1212 ;
                                     02A2  1213 ; IMPLICIT OUTPUTS:
                                     02A2  1214 ;
                                     02A2  1215 ;	List of subprocesses owned is returned in scratch area pointed to
                                     02A2  1216 ;	by PROC_Q_SCRATCH.
                                     02A2  1217 ;	Format:
                                     02A2  1218 ;	1 word 	= level
                                     02A2  1219 ;	PCB$S_LNAME = associated process name
                                     02A2  1220 ;	( level = 0 indicates end of list)
                                     02A2  1221 ;
                                     02A2  1222 ; COMPLETION CODES:
                                     02A2  1223 ;
                                     02A2  1224 ;	R0 =	SS$_NORMAL
                                     02A2  1225 ;		SHOW$_BADLOGIC = scratch area overflow
                                     02A2  1226 ;
                                     02A2  1227 ; SIDE EFFECTS:
                                     02A2  1228 ;
                                     02A2  1229 ;	NONE
                                     02A2  1230 ;
                                     02A2  1231 ; REGISTER USAGE:
                                     02A2  1232 ;
                                     02A2  1233 ;	See individual sections
                                     02A2  1234 ;
                                     02A2  1235 ;--
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  29
X0101           COPY_SUBP - construct list of subprocesses                                                                      (12)

                                     02A2  1236 
                                 000002A2  1237 	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
                                     02A2  1238 
                                     02A2  1239 COPY_SUBP:
                               0FFC  02A2  1240 	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
                                     02A4  1241 
                                     02A4  1242 ;
                                     02A4  1243 ; scan all processes and construct pairs of owner-subprocess pids in scratch area
                                     02A4  1244 ;
                                     02A4  1245 ;	Register usage:
                                     02A4  1246 ;
                                     02A4  1247 ;	R7 =	pointer to scratch area 2
                                     02A4  1248 ;	R8 = 	limit of scratch area
                                     02A4  1249 ;	R11=	pix
                                     02A4  1250 ;	R10=	PCB address
                                     02A4  1251 ;	R9 =	owner pid
                                     02A4  1252 ;
                                     02A4  1253 
   00001000 8F   00000099'EF     C1  02A4  1254 	ADDL3	PROC_Q_SCRATCH,#SCRATCH_AREA2,R7
                          57         02AF       
                                     02B0  1255 					; point to secondary scratch area
   0000009D'EF            04     C3  02B0  1256 	SUBL3	#4,PROC_Q_SCRATCH+4,R8	; get limit of scratch area
                          58         02B7       
            5B   00000000'EF     3C  02B8  1257 	MOVZWL	SCH$GL_MAXPIX,R11	; get highest pix
                                     02BF  1258 10$:
            51   00000000'EF     D0  02BF  1259 	MOVL	SCH$GL_PCBVEC,R1	; get start of PCB pointer table
            5A            614B   D0  02C6  1260 	MOVL	(R1)[R11],R10		; get address of PCB
            59         1C AA     3C  02CA  1261 	MOVZWL	PCB$L_OWNER(R10),R9	; get owner pid
                          0B     13  02CE  1262 	BEQLU	20$			; branch if no owner
            87            59     B0  02D0  1263 	MOVW	R9,(R7)+		; copy owner pid
            87            5B     B0  02D3  1264 	MOVW	R11,(R7)+		; copy pid
            58            57     D1  02D6  1265 	CMPL	R7,R8			; test for potential overflow
                          73     1E  02D9  1266 	BGEQU	80$			; branch on overflow
                                     02DB  1267 20$:
            E1            5B     F4  02DB  1268 	SOBGEQ	R11,10$			; scan all pixes
                          67     D4  02DE  1269 	CLRL	(R7)			; end list with a zero word
                                     02E0  1270 
                                     02E0  1271 ;
                                     02E0  1272 ; construct list of subprocesses for later printing
                                     02E0  1273 ;
                                     02E0  1274 ;	Register usage:
                                     02E0  1275 ;	R7 =	pointer to scratch area 1
                                     02E0  1276 ;	R8 =	limit of scratch area 1
                                     02E0  1277 ;	R11=	pointer to scratch area 2
                                     02E0  1278 ;	R9 =	pid
                                     02E0  1279 ;	R10=	level
                                     02E0  1280 ;	R4 =	pointer to PCB
                                     02E0  1281 ;	R6 = 	scratch
                                     02E0  1282 ;
                                     02E0  1283 
            57   00000099'EF     D0  02E0  1284 	MOVL	PROC_Q_SCRATCH,R7	; start of scratch area for list
            57   00001000 8F     C1  02E7  1285 	ADDL3	#SCRATCH_AREA2,R7,R11	; point to secondary scratch area
                          5B         02EE       
            58            5B     D0  02EF  1286 	MOVL	R11,R8			; also limit for scratch area 1
            54   00000000'EF     D0  02F2  1287 	MOVL	SCH$GL_CURPCB,R4	; address of current pcb
            59         60 A4     3C  02F9  1288 	MOVZWL	PCB$L_PID(R4),R9	; get pid of current process
                          5A     D4  02FD  1289 	CLRL	R10			; initialize level counter
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  30
X0101           COPY_SUBP - construct list of subprocesses                                                                      (12)

                          2F     11  02FF  1290 	BRB	40$			; skip level zero
                                     0301  1291 
                                     0301  1292 ;
                                     0301  1293 ; process one entry
                                     0301  1294 ;
                                     0301  1295 
                                     0301  1296 30$:
            57            12     C1  0301  1297 	ADDL3	#PCB$S_LNAME+2,R7,R6	; test for overflow
                          56         0304       
            58            56     D1  0305  1298 	CMPL	R6,R8
                          44     1E  0308  1299 	BGEQU	80$			; branch on scratch area overflow
            87            5A     B0  030A  1300 	MOVW	R10,(R7)+		; copy level number
            51   00000000'EF     D0  030D  1301 	MOVL	SCH$GL_PCBVEC,R1	; get start of PCB pointer table
            54            6149   D0  0314  1302 	MOVL	(R1)[R9],R4		; get PCB address
                          10     BB  0318  1303 	PUSHR	#^M<R4>			; save PCB pointer for later check
         6C A4            10     28  031A  1304 	MOVC3	#PCB$S_LNAME,PCB$T_LNAME(R4),(R7)
                          67         031E       
                                     031F  1305 					; copy process name 
                          10     BA  031F  1306 	POPR	#^M<R4>			; restore PCB pointer
            59         60 A4     B1  0321  1307 	CMPW	PCB$L_PID(R4),R9	; cross check validity of pid
                          06     13  0325  1308 	BEQLU	35$			; branch if ok
            87            01     90  0327  1309 	MOVB	#1,(R7)+		; construct dummy process name
            67            2A     90  032A  1310 	MOVB	#^A/*/,(R7)		;
                                     032D  1311 35$:
            57            56     D0  032D  1312 	MOVL	R6,R7			; update pointer to scratch area
                                     0330  1313 
                                     0330  1314 ;
                                     0330  1315 ; move down the tree
                                     0330  1316 ;
                                     0330  1317 
                                     0330  1318 40$:
                          59     DD  0330  1319 	PUSHL	R9			; save pid
                          5A     D6  0332  1320 	INCL	R10			; increment level counter
                          59     D4  0334  1321 	CLRL	R9			; clear "next pid"
                                     0336  1322 
                                     0336  1323 ;
                                     0336  1324 ; move horizontally in the tree
                                     0336  1325 ;
                                     0336  1326 
                                     0336  1327 50$:
                          001D   30  0336  1328 	BSBW	NEXT_PID		; find next pid owned at this level
            C5            50     E8  0339  1329 	BLBS	R0,30$			; if found, go process it
                                     033C  1330 
                                     033C  1331 ;
                                     033C  1332 ; move up the tree
                                     033C  1333 ;
                                     033C  1334 
            59            8E     D0  033C  1335 	MOVL	(SP)+,R9		; else pop pid
                          5A     D7  033F  1336 	DECL	R10			; decrement level counter
                          F3     12  0341  1337 	BNEQU	50$			; and branch if non zero
                                     0343  1338 
                                     0343  1339 ;
                                     0343  1340 ; end of tree scan
                                     0343  1341 ;
                                     0343  1342 
                                     0343  1343 60$:
                          67     B4  0343  1344 	CLRW	(R7)			; mark end of list
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  31
X0101           COPY_SUBP - construct list of subprocesses                                                                      (12)

            50   00000000'8F     D0  0345  1345 	MOVL	#SS$_NORMAL,R0		; signal success
                          07     11  034C  1346 	BRB	90$			; and exit
                                     034E  1347 
                                     034E  1348 ;
                                     034E  1349 ; exits
                                     034E  1350 ;
                                     034E  1351 
                                     034E  1352 80$:
            50   00781122 8F     D0  034E  1353 	MOVL	#SHOW$_BADLOGIC,R0	; signal scratch overflow
                                     0355  1354 90$:
                                 04  0355  1355 	RET				; all done
                                     0356  1356 
                                     0356  1357 ;
                                     0356  1358 ; NEXT_PID	-	find next pid given the owner pid and the pid beeing
                                     0356  1359 ;			processed.
                                     0356  1360 ;
                                     0356  1361 ;	inputs:		(SP) = owner pid
                                     0356  1362 ;			R9   = current pid
                                     0356  1363 ;			R11  = pointer to bit map array
                                     0356  1364 ;
                                     0356  1365 ; 	output:		R9   = next pid
                                     0356  1366 ;			R0   =  1 success: R9 updated
                                     0356  1367 ;				0 failure: R9 unchanged
                                     0356  1368 ;	Register usage:
                                     0356  1369 ;
                                     0356  1370 ;	R1 =	flag
                                     0356  1371 ;	R2 =	temporary entry
                                     0356  1372 ;	R3 =	index
                                     0356  1373 ;	R4 =	owner pid
                                     0356  1374 ;	R5 = 	pid
                                     0356  1375 ;
                                     0356  1376 
                                     0356  1377 NEXT_PID:
                                     0356  1378 
                                     0356  1379 ;
                                     0356  1380 ; initialize
                                     0356  1381 ;
                                     0356  1382 
                          53     D4  0356  1383 	CLRL	R3			; zero index
                          51     D4  0358  1384 	CLRL	R1			; clear flag
            54         04 AE     3C  035A  1385 	MOVZWL	4(SP),R4			; load owner pid
                                     035E  1386 
                                     035E  1387 ;
                                     035E  1388 ; find next entry with matching owner
                                     035E  1389 ;
                                     035E  1390 
                                     035E  1391 10$:
            52            6B43   D0  035E  1392 	MOVL	(R11)[R3],R2		; load entry
                          23     13  0362  1393 	BEQLU	50$			; quit if end of list
                          53     D6  0364  1394 	INCL	R3			; increment index
            52            54     B1  0366  1395 	CMPW	R4,R2			; compare owners
                          F3     12  0369  1396 	BNEQU	10$			; branch if no match
                                     036B  1397 
                                     036B  1398 ;
                                     036B  1399 ; extract subprocess pid
                                     036B  1400 ;
                                     036B  1401 
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  32
X0101           COPY_SUBP - construct list of subprocesses                                                                      (12)

            52         F0 8F     78  036B  1402 	ASHL	#-16,R2,R2		; shift upper word down
                          52         036F       
                          59     B5  0370  1403 	TSTW	R9			; is initial pid zero
                          0C     13  0372  1404 	BEQLU 	40$			; branch to success if zero
            59            52     B1  0374  1405 	CMPW	R2,R9			; compare subprocess pids
                          04     12  0377  1406 	BNEQU	30$			; branch if no match
                          51     D6  0379  1407 	INCL	R1			; set flag
                          E1     11  037B  1408 	BRB	10$			; find next matching owner
                                     037D  1409 30$:
            DE            51     E9  037D  1410 	BLBC	R1,10$			; branch if flag still clear
                                     0380  1411 
                                     0380  1412 ;
                                     0380  1413 ; success
                                     0380  1414 ;
                                     0380  1415 
                                     0380  1416 40$:
            59            52     3C  0380  1417 	MOVZWL	R2,R9			; retrieve subprocess pid
            50            01     D0  0383  1418 	MOVL	#1,R0			; indicate success
                                 05  0386  1419 	RSB				; and return
                                     0387  1420 
                                     0387  1421 ;
                                     0387  1422 ; failure
                                     0387  1423 ;
                                     0387  1424 
                                     0387  1425 50$:
                          50     D4  0387  1426 	CLRL	R0			; signal failure
                                 05  0389  1427 	RSB
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  33
X0101           PROC_DEVALL - give list of devices allocated                                                                    (13)

                                     038A  1429 	.SBTTL	PROC_DEVALL	- give list of devices allocated
                                     038A  1430 ;++
                                     038A  1431 ; FUNCTIONAL DESCRIPTION:
                                     038A  1432 ;
                                     038A  1433 ;	This routine displays the list of devices allocated by the 
                                     038A  1434 ;	current process, if any.
                                     038A  1435 ;
                                     038A  1436 ; Algorithm:
                                     038A  1437 ;
                                     038A  1438 ;	1) in kernel mode:
                                     038A  1439 ;	scan the I/O data base ( locked for read) for an owner pid
                                     038A  1440 ;	(UCB$L_PID) matching the process id of the current process,
                                     038A  1441 ;	and copy relevant data into the scratch area.
                                     038A  1442 ;
                                     038A  1443 ;	2) in user mode:
                                     038A  1444 ;	format and print information, if any
                                     038A  1445 ;
                                     038A  1446 ;
                                     038A  1447 ; CALLING SEQUENCE:
                                     038A  1448 ;
                                     038A  1449 ;	CALLS
                                     038A  1450 ;
                                     038A  1451 ; INPUT PARAMETERS:
                                     038A  1452 ;
                                     038A  1453 ;	NONE
                                     038A  1454 ;
                                     038A  1455 ; IMPLICIT INPUTS:
                                     038A  1456 ;
                                     038A  1457 ;	NONE
                                     038A  1458 ;
                                     038A  1459 ; OUTPUT PARAMETERS:
                                     038A  1460 ;
                                     038A  1461 ;	NONE
                                     038A  1462 ;
                                     038A  1463 ; IMPLICIT OUTPUTS:
                                     038A  1464 ;
                                     038A  1465 ;	NONE
                                     038A  1466 ;
                                     038A  1467 ; COMPLETION CODES:
                                     038A  1468 ;
                                     038A  1469 ;	R0 =	SS$_NORMAL
                                     038A  1470 ;		SHOW$_BADLOGIC	= sxratch area overflow
                                     038A  1471 ;
                                     038A  1472 ; SIDE EFFECTS:
                                     038A  1473 ;
                                     038A  1474 ;	NONE
                                     038A  1475 ;
                                     038A  1476 ;--
                                     038A  1477 
                                 0000038A  1478 	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
                                     038A  1479 
                                     038A  1480 PROC_DEVALL:
                               0FFC  038A  1481 	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
                                     038C  1482 
                                     038C  1483 ;
                                     038C  1484 ; copy list of devices allocated into scratch space
                                     038C  1485 ;
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  34
X0101           PROC_DEVALL - give list of devices allocated                                                                    (13)

                                     038C  1486 
                                     038C  1487 	$CMKRNL_S	W^COPY_DEVALL
            6A            50     E9  0399  1488 	BLBC	R0,99$			; exit on error
                                     039C  1489 
                                     039C  1490 ;
                                     039C  1491 ; format and print list of devices allocated
                                     039C  1492 ;
                                     039C  1493 
            59       0099'CF     D0  039C  1494 	MOVL	W^PROC_Q_SCRATCH,R9	; point to start of copied data
            57       00A1'CF     D0  03A1  1495 	MOVL	W^PROC_L_SCRLIM,R7	; point to end of copied area
            5B       009D'CF     D0  03A6  1496 	MOVL	W^PROC_Q_SCRATCH+4,R11	; point to limit of scratch area
                          5A     D4  03AB  1497 	CLRL	R10			; signal nothing printed
                                     03AD  1498 10$:
                          69     95  03AD  1499 	TSTB	(R9)			; anything there ?
                          4E     13  03AF  1500 	BEQLU	90$			; exit if no more
                          56     D4  03B1  1501 	CLRL	R6			; index into output list
                                     03B3  1502 20$:
                          69     95  03B3  1503 	TSTB	(R9)			; end of list ?
                          19     13  03B5  1504 	BEQLU	50$			; if end of list : go print
            52            59     D0  03B7  1505 	MOVL	R9,R2			; point to device name
            53         10 A9     3C  03BA  1506 	MOVZWL	DEVNAM_LEN(R9),R3	; get unit number
                 00000407'EF     16  03BE  1507 	JSB	BUILD_DEVNAM		; build device name string
            2F            50     E9  03C4  1508 	BLBC	R0,80$			; branch if scratch overflow
            59            12     C0  03C7  1509 	ADDL2	#DEVNAM_LEN+WORD,R9	; update source pointer
                          56     D6  03CA  1510 	INCL	R6			; account for quadword
            56            0E     F3  03CC  1511 	AOBLEQ	#<DEV_PER_LINE-1>*2,R6,20$
                          E3         03CF       
                                     03D0  1512 					; build up to one line
                                     03D0  1513 50$:
            56         FF 8F     78  03D0  1514 	ASHL	#-1,R6,W^PROC_DEVICE_CNT; insert count for FAO list
                     0139'CF         03D4       
            08            5A     E8  03D7  1515 	BLBS	R10,60$			; branch of not first line
                 00000000'8F     DD  03DA  1516 	PUSHL	#SHOW$_DEVALL		; message identifier
                          06     11  03E0  1517 	BRB	70$			;
                                     03E2  1518 60$:
                 00000000'8F     DD  03E2  1519 	PUSHL	#SHOW$_DEVLIS		; list without title
                                     03E8  1520 70$:
                     0139'CF     DF  03E8  1521 	PUSHAL	W^PROC_DEVICE_CNT	; parameter list
       0000'CF            02     FB  03EC  1522 	CALLS	#2,W^SHOW$PRINT_MSG	; output message
            5A            01     D0  03F1  1523 	MOVL	#1,R10			; signal something printed
                          B7     11  03F4  1524 	BRB	10$			; go try for more
                                     03F6  1525 
                                     03F6  1526 ;
                                     03F6  1527 ; exits
                                     03F6  1528 ;
                                     03F6  1529 
                                     03F6  1530 80$:
            50   00781122 8F     D0  03F6  1531 	MOVL	#SHOW$_BADLOGIC,R0	; signal scratch overflow
                          07     11  03FD  1532 	BRB	99$			;
                                     03FF  1533 90$:
            50   00000000'8F     D0  03FF  1534 	MOVL	#SS$_NORMAL,R0		; signal success
                                     0406  1535 99$:
                                 04  0406  1536 	RET
                                     0407  1537 
                                     0407  1538 ;
                                     0407  1539 ;
                                     0407  1540 ; BUILD_DEVNAM
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  35
X0101           PROC_DEVALL - give list of devices allocated                                                                    (13)

                                     0407  1541 ;
                                     0407  1542 ; subroutine to construct a device name
                                     0407  1543 ;
                                     0407  1544 ;	inputs: 	R2 = pointer to device name (counted string)
                                     0407  1545 ;			R3 = pointer to unit word
                                     0407  1546 ;			R7 = pointer to scratch area for building string
                                     0407  1547 ;			R6 = index into FAO output parameter list
                                     0407  1548 ;				(PROC_DEVICE_LST)
                                     0407  1549 ;			R11= limit of scratch area allocated
                                     0407  1550 ;
                                     0407  1551 ;	output:		device name built starting at R7
                                     0407  1552 ;			entry indexed by R6 points to string
                                     0407  1553 ;			R7 updated to point to free scratch area
                                     0407  1554 ;
                                     0407  1555 ; it is assumed that the list of devices will be SMALL on the average.
                                     0407  1556 ;
                                     0407  1557 
                                     0407  1558 BUILD_DEVNAM:
            57            20     C1  0407  1559 	ADDL3	#DEV_SPEC_LEN,R7,R5	; test for overflow
                          55         040A       
            5B            55     D1  040B  1560 	CMPL	R5,R11			; 
                          27     1E  040E  1561 	BGEQU	10$			; branch if overflow
            54       013D'CF46   DE  0410  1562 	MOVAL	W^PROC_DEVICE_LST[R6],R4; get address of next device list entry
            64            20     D0  0416  1563 	MOVL	#DEV_SPEC_LEN,(R4)
         04 A4            57     D0  0419  1564 	MOVL	R7,4(R4)		; build descriptor to result string
                                     041D  1565 	$FAO_S	-			; build string in scratch area
                                     041D  1566 		W^FAO_Q_DEVNAM,-
                                     041D  1567 		(R4),-
                                     041D  1568 		(R4),-
                                     041D  1569 		R2,-			; pointer to device name
                                     041D  1570 		R3			; unit number
            57            20     C0  0430  1571 	ADDL2	#DEV_SPEC_LEN,R7	; update destination pointer
            50            01     D0  0433  1572 	MOVL	#1,R0			; signal success
                                 05  0436  1573 	RSB
                                     0437  1574 10$:
                          50     D4  0437  1575 	CLRL	R0			; signal overflow
                                 05  0439  1576 	RSB
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  36
X0101           COPY_DEVALL - copy devices allocated                                                                            (14)

                                     043A  1578 	.SBTTL	COPY_DEVALL	- copy devices allocated
                                     043A  1579 ;++
                                     043A  1580 ; FUNCTIONAL DESCRIPTION:
                                     043A  1581 ;
                                     043A  1582 ;	This routine copies the list of devices allocated to the current
                                     043A  1583 ;	process into a scratch area.
                                     043A  1584 ;	It is invoked through the $CMKRNEL system service
                                     043A  1585 ;
                                     043A  1586 ;
                                     043A  1587 ; CALLING SEQUENCE:
                                     043A  1588 ;
                                     043A  1589 ;	CALLS
                                     043A  1590 ;
                                     043A  1591 ; INPUT PARAMETERS:
                                     043A  1592 ;
                                     043A  1593 ;	NONE
                                     043A  1594 ;
                                     043A  1595 ; IMPLICIT INPUTS:
                                     043A  1596 ;
                                     043A  1597 ;	Limits of scratch area : PROC_Q_SCRATCH
                                     043A  1598 ;
                                     043A  1599 ; OUTPUT PARAMETERS:
                                     043A  1600 ;
                                     043A  1601 ;	PROC_L_SCRLIM	= limit of copied area
                                     043A  1602 ;			  (= start of remaining scratch area)
                                     043A  1603 ;
                                     043A  1604 ; IMPLICIT OUTPUTS:
                                     043A  1605 ;
                                     043A  1606 ;	NONE
                                     043A  1607 ;
                                     043A  1608 ; COMPLETION CODES:
                                     043A  1609 ;
                                     043A  1610 ;	R0 =	SS$_NORMAL
                                     043A  1611 ;		SHOW$_BADLOGIC	= scratch area overflow
                                     043A  1612 ;
                                     043A  1613 ; SIDE EFFECTS:
                                     043A  1614 ;
                                     043A  1615 ;	NONE
                                     043A  1616 ;
                                     043A  1617 ; REGISTER USAGE:
                                     043A  1618 ;
                                     043A  1619 ;	R6 =	scratch
                                     043A  1620 ;	R7 =	pointer to scratch area
                                     043A  1621 ;	R8 =	limit of scratch area
                                     043A  1622 ;	R9 =	current pid
                                     043A  1623 ;	R10 =	pointer to UCB
                                     043A  1624 ;	R11 = 	pointer to DDB
                                     043A  1625 ;
                                     043A  1626 ;--
                                     043A  1627 
                                 0000043A  1628 	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
                                     043A  1629 
                                     043A  1630 COPY_DEVALL:
                               0FFC  043A  1631 	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
                                     043C  1632 
                                     043C  1633 ;
                                     043C  1634 ; initialize
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  37
X0101           COPY_DEVALL - copy devices allocated                                                                            (14)

                                     043C  1635 ;
                                     043C  1636 
            57   00000099'EF     D0  043C  1637 	MOVL	PROC_Q_SCRATCH,R7	; start of scratch area
            58   0000009D'EF     D0  0443  1638 	MOVL	PROC_Q_SCRATCH+4,R8	; limit of scratch area
            5B   00000000'EF     DE  044A  1639 	MOVAL	IOC$GL_DEVLIST-DDB$L_LINK,R11
                                     0451  1640 					; address of address of first DDB
            54   00000000'EF     D0  0451  1641 	MOVL	SCH$GL_CURPCB,R4	; address of current PCB
            59         60 A4     D0  0458  1642 	MOVL	PCB$L_PID(R4),R9	; compute current process id
                                     045C  1643 
                                     045C  1644 ;
                                     045C  1645 ; lock I/O data base for read
                                     045C  1646 ;
                                     045C  1647 
                 00000000'EF     16  045C  1648 	JSB	SCH$IOLOCKR		; lock data base for read
                                     0462  1649 
                                     0462  1650 ;
                                     0462  1651 ; scan I/O data base
                                     0462  1652 ;
                                     0462  1653 
                                     0462  1654 10$:
            5B            6B     D0  0462  1655 	MOVL	DDB$L_LINK(R11),R11	; next DDB
                          24     13  0465  1656 	BEQLU	90$			; branch if no more
            5A         D8 AB     DE  0467  1657 	MOVAL	DDB$L_UCB-UCB$L_LINK(R11),R10
                                     046B  1658 					; address of address of first UCB
                                     046B  1659 20$:
            5A         2C AA     D0  046B  1660 	MOVL	UCB$L_LINK(R10),R10	; next UCB
                          F1     13  046F  1661 	BEQLU	10$			; branch if no more
            59         28 AA     D1  0471  1662 	CMPL	UCB$L_PID(R10),R9	; is owner pid current pid ?
                          F4     12  0475  1663 	BNEQU	20$			; branch if not equal
                 000004AE'EF     16  0477  1664 	JSB	COPY_DEVNAM		; copy device name and unit
            02            50     E9  047D  1665 	BLBC	R0,80$			; branch on error
                          E9     11  0480  1666 	BRB	20$			; try next UCB
                                     0482  1667 
                                     0482  1668 ;
                                     0482  1669 ; exits
                                     0482  1670 ;
                                     0482  1671 
                                     0482  1672 80$:
            50   00781122 8F     D0  0482  1673 	MOVL	#SHOW$_BADLOGIC,R0	; signal scratch overflow
                          0E     11  0489  1674 	BRB	99$
                                     048B  1675 90$:
            50   00000000'8F     D0  048B  1676 	MOVL	#SS$_NORMAL,R0		; signal success
                          87     94  0492  1677 	CLRB	(R7)+			; mark end of list
       00A1'CF            57     D0  0494  1678 	MOVL	R7,W^PROC_L_SCRLIM	; start of free scratch area
                                     0499  1679 99$:
            54   00000000'EF     D0  0499  1680 	MOVL	SCH$GL_CURPCB,R4	; address of current PCB
                          01     BB  04A0  1681 	PUSHR	#^M<R0>			; save status
                 00000000'EF     16  04A2  1682 	JSB	SCH$IOUNLOCK		; unlock I/O data base
                                     04A8  1683 	SETIPL	#0			; drop IPL
                          01     BA  04AB  1684 	POPR	#^M<R0>			; restore status
                                 04  04AD  1685 	RET				; and return
                                     04AE  1686 
                                     04AE  1687 
                                     04AE  1688 ;
                                     04AE  1689 ; subroutine to copy device name and unit
                                     04AE  1690 ;
                                     04AE  1691 
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  38
X0101           COPY_DEVALL - copy devices allocated                                                                            (14)

                                     04AE  1692 COPY_DEVNAM:
            50         14 AB     9A  04AE  1693 	MOVZBL	DDB$T_NAME(R11),R0	; point to device name
                          50     D6  04B2  1694 	INCL	R0			; add one for counted string
            56            57     D0  04B4  1695 	MOVL	R7,R6			; save pointer to scratch
            56            12     C0  04B7  1696 	ADDL	#DEVNAM_LEN+WORD,R6	; add maximum needed
            58            56     D1  04BA  1697 	CMPL	R6,R8			; check for overflow
                          10     1E  04BD  1698 	BGEQU	10$			; branch on overflow
         14 AB            50     28  04BF  1699 	MOVC3	R0,DDB$T_NAME(R11),(R7)	; copy device name
                          67         04C3       
            57            10     C0  04C4  1700 	ADDL2	#DEVNAM_LEN,R7		; position for unit
            87         48 AA     B0  04C7  1701 	MOVW	UCB$W_UNIT(R10),(R7)+	; copy unit number
            50            01     D0  04CB  1702 	MOVL	#1,R0			; signal success
                                 05  04CE  1703 	RSB
                                     04CF  1704 10$:
                          50     D4  04CF  1705 	CLRL	R0			; scratch overflow
                                 05  04D1  1706 	RSB
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  39
X0101           PROC_DEVMOUN - give list of devices mounted                                                                     (15)

                                     04D2  1708 	.SBTTL	PROC_DEVMOUN	- give list of devices mounted
                                     04D2  1709 ;++
                                     04D2  1710 ; FUNCTIONAL DESCRIPTION:
                                     04D2  1711 ;
                                     04D2  1712 ;	This routine displays the list of devices mounted by the current
                                     04D2  1713 ;	process, if any.
                                     04D2  1714 ;
                                     04D2  1715 ; Algorithm:
                                     04D2  1716 ;
                                     04D2  1717 ;	Follow the Mounted Volume list of the current process, and insert
                                     04D2  1718 ;	pointers to relevant information into the FAO parameter list.
                                     04D2  1719 ;
                                     04D2  1720 ;	No interlock is needed in this case.
                                     04D2  1721 ;
                                     04D2  1722 ;
                                     04D2  1723 ; CALLING SEQUENCE:
                                     04D2  1724 ;
                                     04D2  1725 ;	CALLS
                                     04D2  1726 ;
                                     04D2  1727 ; INPUT PARAMETERS:
                                     04D2  1728 ;
                                     04D2  1729 ;	NONE
                                     04D2  1730 ;
                                     04D2  1731 ; IMPLICIT INPUTS:
                                     04D2  1732 ;
                                     04D2  1733 ;	NONE
                                     04D2  1734 ;
                                     04D2  1735 ; OUTPUT PARAMETERS:
                                     04D2  1736 ;
                                     04D2  1737 ;	NONE
                                     04D2  1738 ;
                                     04D2  1739 ; IMPLICIT OUTPUTS:
                                     04D2  1740 ;
                                     04D2  1741 ;	NONE
                                     04D2  1742 ;
                                     04D2  1743 ; COMPLETION CODES:
                                     04D2  1744 ;
                                     04D2  1745 ;	R0 =	SS$_NORMAL
                                     04D2  1746 ;		SHOW$_BADLOGIC = scratch area overflow
                                     04D2  1747 ;
                                     04D2  1748 ; SIDE EFFECTS:
                                     04D2  1749 ;
                                     04D2  1750 ;	NONE
                                     04D2  1751 ;
                                     04D2  1752 ; REGISTER USAGE:
                                     04D2  1753 ;
                                     04D2  1754 ;	R6 =	index into output parameter list
                                     04D2  1755 ;	R7 =	pointer to scratch area
                                     04D2  1756 ;	R8 =	pointer to mounted volume list queue item
                                     04D2  1757 ;	R9 =	pointer to mounted volume list queue head
                                     04D2  1758 ;	R10 =	flag	(0 = first line,  1 = subsequent lines)
                                     04D2  1759 ;	R11 = 	limit of scratch area
                                     04D2  1760 ;
                                     04D2  1761 ;--
                                     04D2  1762 
                                 000004D2  1763 	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
                                     04D2  1764 
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  40
X0101           PROC_DEVMOUN - give list of devices mounted                                                                     (15)

                                     04D2  1765 PROC_DEVMOUN:
                               0FFC  04D2  1766 	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
                                     04D4  1767 
                                     04D4  1768 ;
                                     04D4  1769 ; initialize
                                     04D4  1770 ;
                                     04D4  1771 
                          5A     D4  04D4  1772 	CLRL	R10			; first line 
            58   00000000'EF     DE  04D6  1773 	MOVAL	CTL$GQ_MOUNTLST,R8	; get head of mounted volume list
            59            58     D0  04DD  1774 	MOVL	R8,R9			; remember head
            57       0099'CF     D0  04E0  1775 	MOVL	W^PROC_Q_SCRATCH,R7	; pointer to scratch area
            5B       009D'CF     D0  04E5  1776 	MOVL	W^PROC_Q_SCRATCH+4,R11	; limit of scratch area
                                     04EA  1777 5$:
                          56     D4  04EA  1778 	CLRL	R6			; index into output parameter list
                                     04EC  1779 
                                     04EC  1780 ;
                                     04EC  1781 ; scan mounted volume list
                                     04EC  1782 ;
                                     04EC  1783 
                                     04EC  1784 10$:
            58            68     D0  04EC  1785 	MOVL	MTL$L_MTLFL(R8),R8	; get next list item
            59            58     D1  04EF  1786 	CMPL	R8,R9			; is it the head ?
                          1D     13  04F2  1787 	BEQLU	50$			; branch if head
            50         0C A8     D0  04F4  1788 	MOVL	MTL$L_UCB(R8),R0	; get UCB address
            51         24 A0     D0  04F8  1789 	MOVL	UCB$L_DDB(R0),R1	; get DDB address
            52         14 A1     DE  04FC  1790 	MOVAL	DDB$T_NAME(R1),R2	; point to device name
            53         48 A0     3C  0500  1791 	MOVZWL	UCB$W_UNIT(R0),R3	; get unit number
                     FEFF CF     16  0504  1792 	JSB	BUILD_DEVNAM		; build device name in scratch area
            35            50     E9  0508  1793 	BLBC	R0,80$			; branch on overflow
                          56     D6  050B  1794 	INCL	R6			; account for quadword
            56            0E     F3  050D  1795 	AOBLEQ	#<DEV_PER_LINE-1>*2,R6,10$
                          DB         0510       
                                     0511  1796 					; fill up to a line
                                     0511  1797 
                                     0511  1798 ;
                                     0511  1799 ; print list of devices
                                     0511  1800 ;
                                     0511  1801 
                                     0511  1802 50$:
                          56     D5  0511  1803 	TSTL	R6			; is list empty ?
                          34     13  0513  1804 	BEQLU	90$			; branch if empty
            56         FF 8F     78  0515  1805 	ASHL	#-1,R6,W^PROC_DEVICE_CNT	; insert count of arguments
                     0139'CF         0519       
            08            5A     E8  051C  1806 	BLBS	R10,60$			; branch if not first line
                 00000000'8F     DD  051F  1807 	PUSHL	#SHOW$_DEVMOU		; message identifier
                          06     11  0525  1808 	BRB	70$
                                     0527  1809 60$:
                 00000000'8F     DD  0527  1810 	PUSHL	#SHOW$_DEVLIS		; format without title
                                     052D  1811 70$:
                     0139'CF     DF  052D  1812 	PUSHAL	W^PROC_DEVICE_CNT	; parameter list
       0000'CF            02     FB  0531  1813 	CALLS	#2,W^SHOW$PRINT_MSG	; print message
            5A            01     D0  0536  1814 	MOVL	#1,R10			; signal not first line any more
            59            58     D1  0539  1815 	CMPL	R8,R9			; were we done ?
                          AC     12  053C  1816 	BNEQU	5$			; branch if more to come
                          09     11  053E  1817 	BRB	90$			; all done
                                     0540  1818 
                                     0540  1819 ;
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  41
X0101           PROC_DEVMOUN - give list of devices mounted                                                                     (15)

                                     0540  1820 ; exits
                                     0540  1821 ;
                                     0540  1822 
                                     0540  1823 80$:
            50   00781122 8F     D0  0540  1824 	MOVL	#SHOW$_BADLOGIC,R0	; signal overflow
                          07     11  0547  1825 	BRB	99$
                                     0549  1826 90$:
            50   00000000'8F     D0  0549  1827 	MOVL	#SS$_NORMAL,R0		; signal success
                                     0550  1828 99$:
                                 04  0550  1829 	RET
                                     0551  1830 	.END
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  42
SYMBOL TABLE                                                                                                                    (15)

$$$            = 0000027D R     03   CLI$K_INPUT1   = 00000010            CLI$S_SUBTYP   = 00000004            
$$T1           = 00000001            CLI$K_INPUT2   = 00000011            CLI$S_TRMVRBLV = 00000002            
$$T2           = 00000005            CLI$K_INPUT3   = 00000012            CLI$V_ABSADR   = 00000001            
$CLI.          = 0000007C R     03   CLI$K_INPUT4   = 00000013            CLI$V_ALLOCCUR = 00000000            
$CLI..         = 00000094 R     03   CLI$K_KEYVAL   = 00000043            CLI$V_BATCH    = 00000003            
$ITEM_LEN$     = 00000008            CLI$K_KEYWORD  = 00000042            CLI$V_CONCATINP= 00000001            
ACC_LIST         0000010D R     03   CLI$K_NUMERVAL = 00000040            CLI$V_DBGEXCP  = 00000010            
ACC_L_BUFIO      0000010D R     03   CLI$K_OUTPUT1  = 00000020            CLI$V_DBGTRU   = 00000001            
ACC_L_CPUTIM     00000125 R     03   CLI$K_OUTPUT2  = 00000021            CLI$V_DEBUG    = 00000000            
ACC_L_DIRIO      00000115 R     03   CLI$K_OUTPUT3  = 00000022            CLI$V_DUMMY    = 00000001            
ACC_L_PAGEFLTS   0000011D R     03   CLI$K_OUTPUT4  = 00000023            CLI$V_EXPNAM   = 00000002            
ACC_L_VIRTPEAK   00000119 R     03   CLI$K_OUTSPEC  = 00000002            CLI$V_INDIRECT = 00000004            
ACC_L_VOLUMES    00000121 R     03   CLI$K_PARDONE  = 00000003            CLI$V_KEYVALU  = 00000001            
ACC_L_WSPEAK     00000111 R     03   CLI$K_QDBITS     00000014            CLI$V_LASTVAL  = 00000000            
ACC_Q_CPUTIM     000002BD R     03   CLI$K_QUALDEF    00000014            CLI$V_MOREINP  = 00000002            
ACC_Q_LOGINTIM   00000129 R     03   CLI$K_REQDESC    0000001C            CLI$V_MOREVALS = 00000000            
ACC_T_LOGINTIM   00000030 R     05   CLI$K_SHPR_ACCO  ********   X   03   CLI$V_PARMDEF  = 00000003            
BIT...         = 00000045            CLI$K_SHPR_ALL   ********   X   03   CLI$V_PARMPRS  = 00000000            
BLANK_T_STRING   00000483 R     04   CLI$K_SHPR_PRIV  ********   X   03   CLI$V_PARMREQ  = 00000000            
BUILD_DEVNAM     00000407 R     06   CLI$K_SHPR_QUOT  ********   X   03   CLI$V_PRITYP   = 00000004            
CLI$A_ABSACT     00000014            CLI$K_SHPR_SUBP  ********   X   03   CLI$V_QDEXPA   = 00000002            
CLI$A_ERRACT     00000004            CLI$K_UTILOPR  = 00000000            CLI$V_QDUSRV   = 00000001            
CLI$A_FLSACT     00000010            CLI$K_VALCONV  = 00000004            CLI$V_QUALEXP  = 00000001            
CLI$A_IMGFILED   00000010            CLI$K_WORKAREA   00000080            CLI$V_QUALTRU  = 00000000            
CLI$A_IMGHDADR   0000000C            CLI$L_CLIFLAG    00000018            CLI$V_SUBTYP   = 00000000            
CLI$A_PROGXFER   00000004            CLI$L_INIARGCNT  00000000            CLI$V_TRMVRBLV = 00000008            
CLI$A_PRSACT     00000010            CLI$L_LINKFLAG   00000014            CLI$V_VERIFY   = 00000002            
CLI$A_QDVALADR   00000008            CLI$L_RQVALU     0000000C            CLI$V_VFYINP   = 00000005            
CLI$A_QUALST     00000018            CLI$L_USRVAL     00000014            CLI$W_QDVALSIZ   00000004            
CLI$A_RQADDR     0000000C            CLI$L_WORKAREA   00000000            CLI$W_RQSIZE     00000008            
CLI$A_TRUACT     0000000C            CLI$M_ABSADR   = 00000002            CLI$W_SERVCOD    00000001            
CLI$A_UTILSERV   00000008            CLI$M_ALLOCCUR = 00000001            COPY_DEVALL      0000043A R     06   
CLI$B_BITNUM     00000001            CLI$M_BATCH    = 00000008            COPY_DEVNAM      000004AE R     06   
CLI$B_QDBLKSIZ   00000000            CLI$M_CONCATINP= 00000002            COPY_SUBP        000002A2 R     06   
CLI$B_QDCODE     00000001            CLI$M_DBGEXCP  = 00010000            CTL$GQ_MOUNTLST  ********   X   06   
CLI$B_QDFLGS     00000002            CLI$M_DBGTRU   = 00000002            DDB$B_ACPCLASS   00000013            
CLI$B_QDSTAT     00000003            CLI$M_DEBUG    = 00000001            DDB$B_TYPE       0000000A            
CLI$B_RQFLGS     00000002            CLI$M_DUMMY    = 00000002            DDB$C_LENGTH     00000034            
CLI$B_RQINDX     00000001            CLI$M_EXPNAM   = 00000004            DDB$K_LENGTH     00000034            
CLI$B_RQSTAT     00000003            CLI$M_INDIRECT = 00000010            DDB$L_ACPD       00000010            
CLI$B_RQTYPE     00000000            CLI$M_KEYVALU  = 00000002            DDB$L_DDT        0000000C            
CLI$C_QDBITS     00000014            CLI$M_LASTVAL  = 00000001            DDB$L_LINK       00000000            
CLI$C_QUALDEF    00000014            CLI$M_MOREINP  = 00000004            DDB$L_UCB        00000004            
CLI$C_REQDESC    0000001C            CLI$M_MOREVALS = 00000001            DDB$T_DRVNAME    00000024            
CLI$C_WORKAREA   00000080            CLI$M_PARMDEF  = 00000008            DDB$T_NAME       00000014            
CLI$K_ASCIIVAL = 00000041            CLI$M_PARMPRS  = 00000001            DDB$W_SIZE       00000008            
CLI$K_CLISERV  = 00000005            CLI$M_PARMREQ  = 00000001            DEF_LIST         000000B9 R     03   
CLI$K_ENDPRM1  = 00000030            CLI$M_QDEXPA   = 00000004            DEF_L_DEFDIR     000000D9 R     03   
CLI$K_ENDPRM2  = 00000031            CLI$M_QDUSRV   = 00000002            DEF_L_GRP        000000C5 R     03   
CLI$K_ENDPRM3  = 00000032            CLI$M_QUALEXP  = 00000002            DEF_L_MEM        000000C9 R     03   
CLI$K_ENDPRM4  = 00000033            CLI$M_QUALTRU  = 00000001            DEF_L_PID        000000B9 R     03   
CLI$K_FILSPEC  = 00000044            CLI$M_TRMVRBLV = 00000300            DEF_L_PRIB       000000CD R     03   
CLI$K_GETCMD   = 00000001            CLI$M_VERIFY   = 00000004            DEF_Q_DEVICE     000000D1 R     03   
CLI$K_GETOPT   = 00000003            CLI$M_VFYINP   = 00000020            DEF_Q_PRCNAM     000000BD R     03   
CLI$K_GETQUAL  = 00000002            CLI$Q_QDVALDESC  00000004            DEF_T_DEVICE     0000029D R     03   
CLI$K_INITPRS  = 00000000            CLI$Q_RQDESC     00000008            DEF_T_PRCNAM     00000010 R     05   
CLI$K_INPSPEC  = 00000001            CLI$S_PRITYP   = 00000004            DEVNAM_LEN     = 00000010            
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  43
SYMBOL TABLE                                                                                                                    (15)

DEV_PER_LINE   = 00000008            JPI$_PPGCNT    = 0000030D            PCB$L_WTIME      0000002C            
DEV_SPEC_LEN   = 00000020            JPI$_PRCCNT    = 0000031B            PCB$S_LNAME    = 00000010            
FAO_DEVN_LEN   = 00000009            JPI$_PRCLM     = 00000408            PCB$T_LNAME      0000006C            
FAO_Q_DEVNAM     00000472 R     04   JPI$_PRCNAM    = 0000031C            PCB$V_ASTPEN   = 00000011            
FAO_T_DEVNAM     0000047A R     04   JPI$_PRI       = 00000302            PCB$V_BATCH    = 0000000E            
GBL...         = 00000000            JPI$_PRIB      = 00000309            PCB$V_DELPEN   = 00000001            
HDR_LIST         000000A5 R     03   JPI$_PROCPRIV  = 00000204            PCB$V_FORCPEN  = 00000002            
HDR_Q_TERMINAL   000000A9 R     03   JPI$_STATE     = 00000306            PCB$V_HIBER    = 00000013            
HDR_Q_USERNAME   000000B1 R     03   JPI$_STS       = 00000305            PCB$V_INQUAN   = 00000003            
HDR_T_TERMINAL   0000027D R     03   JPI$_TMBU      = 0000030B            PCB$V_LOGIN    = 00000014            
HDR_T_USERNAME   00000000 R     05   JPI$_TQCNT     = 00000315            PCB$V_NETWRK   = 00000015            
IOC$GL_DEVLIST   ********   X   06   JPI$_TQLM      = 00000410            PCB$V_NOACNT   = 0000000F            
JPI$C_ADRTYPE  = 00000001            JPI$_UIC       = 00000304            PCB$V_NODELET  = 00000017            
JPI$C_CTLTYPE  = 00000002            JPI$_USERNAME  = 00000202            PCB$V_PHDRES   = 00000012            
JPI$C_LISTEND  = 00000000            JPI$_VIRTPEAK  = 00000200            PCB$V_PSWAPM   = 00000004            
JPI$C_PCBTYPE  = 00000003            JPI$_VOLUMES   = 00000205            PCB$V_PWRAST   = 00000016            
JPI$C_PHDTYPE  = 00000004            JPI$_WSAUTH    = 00000401            PCB$V_RES      = 00000000            
JPI$_ACCOUNT   = 00000203            JPI$_WSPEAK    = 00000201            PCB$V_RESPEN   = 00000005            
JPI$_APTCNT    = 0000030A            JPI$_WSQUOTA   = 00000402            PCB$V_SSFEXC   = 00000006            
JPI$_ASTACT    = 00000300            JPI$_WSSIZE    = 00000411            PCB$V_SSFEXCE  = 00000007            
JPI$_ASTCNT    = 0000030E            JPI_ITMLST       00000000 R     04   PCB$V_SSFEXCS  = 00000008            
JPI$_ASTEN     = 00000301            MTL$B_STATUS     0000000B            PCB$V_SSFEXCU  = 00000009            
JPI$_ASTLM     = 00000409            MTL$B_TYPE       0000000A            PCB$V_SSRWAIT  = 0000000A            
JPI$_BIOCNT    = 0000030F            MTL$C_LENGTH     00000018            PCB$V_SUSPEN   = 0000000B            
JPI$_BIOLM     = 00000310            MTL$K_LENGTH     00000018            PCB$V_SWPVBN   = 00000010            
JPI$_BUFIO     = 0000040C            MTL$L_LOGNAME    00000010            PCB$V_WAKEPEN  = 0000000C            
JPI$_BYTCNT    = 00000311            MTL$L_MTLBL      00000004            PCB$V_WALL     = 0000000D            
JPI$_BYTLM     = 0000031A            MTL$L_MTLFL      00000000            PCB$W_APTCNT     00000034            
JPI$_CPULIM    = 0000040D            MTL$L_UCB        0000000C            PCB$W_ASTCNT     0000003C            
JPI$_CPUTIM    = 00000407            MTL$W_SIZE       00000008            PCB$W_BIOCNT     0000003E            
JPI$_CURPRIV   = 00000400            NEXT_PID         00000356 R     06   PCB$W_BIOLM      00000040            
JPI$_DFPFC     = 00000406            NULL_T_STRING    00000486 R     04   PCB$W_BYTCNT     00000042            
JPI$_DFWSCNT   = 00000403            PCB$B_ASTACT     0000000C            PCB$W_BYTLM      00000068            
JPI$_DIOCNT    = 00000312            PCB$B_ASTEN      0000000D            PCB$W_DIOCNT     00000044            
JPI$_DIOLM     = 00000313            PCB$B_PRI        0000000B            PCB$W_DIOLM      00000046            
JPI$_DIRIO     = 0000040B            PCB$B_PRIB       00000033            PCB$W_FILCNT     00000048            
JPI$_EFCS      = 00000317            PCB$B_TYPE       0000000A            PCB$W_GPGCNT     00000038            
JPI$_EFCU      = 00000318            PCB$B_WEFC       00000032            PCB$W_GRP        00000022            
JPI$_EFWM      = 00000316            PCB$C_LENGTH     0000007C            PCB$W_MEM        00000020            
JPI$_EXCVEC    = 00000100            PCB$K_LENGTH     0000007C            PCB$W_MTXCNT     0000000E            
JPI$_FILCNT    = 00000314            PCB$L_ASTQBL     00000014            PCB$W_PPGCNT     0000003A            
JPI$_FILLM     = 0000040F            PCB$L_ASTQFL     00000010            PCB$W_PRCCNT     0000006A            
JPI$_FINALEXC  = 00000101            PCB$L_EFC2P      00000058            PCB$W_SIZE       00000008            
JPI$_FREP0VA   = 00000404            PCB$L_EFC3P      0000005C            PCB$W_STATE      00000030            
JPI$_FREP1VA   = 00000405            PCB$L_EFCS       00000050            PCB$W_TMBU       00000036            
JPI$_GPGCNT    = 0000030C            PCB$L_EFCU       00000054            PCB$W_TQCNT      0000004A            
JPI$_GRP       = 00000308            PCB$L_EFWM       0000004C            PIO$GT_DDSTRING  ********   X   06   
JPI$_LASTADR   = 00000102            PCB$L_OWNER      0000001C            PR$_ACCR       = 00000029            
JPI$_LASTCTL   = 00000207            PCB$L_PHD        00000064            PR$_ACCS       = 00000028            
JPI$_LASTPCB   = 0000031D            PCB$L_PHYPCB     00000018            PR$_ASTLVL     = 00000013            
JPI$_LASTPHD   = 00000412            PCB$L_PID        00000060            PR$_ESP        = 00000001            
JPI$_LOGINTIM  = 00000206            PCB$L_PQB        0000004C            PR$_ICCS       = 00000018            
JPI$_MEM       = 00000307            PCB$L_SQBL       00000004            PR$_ICR        = 0000001A            
JPI$_OWNER     = 00000303            PCB$L_SQFL       00000000            PR$_IPL        = 00000012            
JPI$_PAGEFLTS  = 0000040A            PCB$L_STS        00000028            PR$_ISP        = 00000004            
JPI$_PGFLQUOTA = 0000040E            PCB$L_UIC        00000020            PR$_KSP        = 00000000            
JPI$_PID       = 00000319            PCB$L_WSSWP      00000024            PR$_MAPEN      = 00000038            
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  44
SYMBOL TABLE                                                                                                                    (15)

PR$_NICR       = 00000019            PROC_T_SYSCOMND  00000467 R     04   PRV_T_SETPRV     000002E8 R     04   
PR$_P0BR       = 00000008            PROC_T_SYSDISK   0000045F R     04   PRV_T_SYSGBL     00000428 R     04   
PR$_P0LR       = 00000009            PROC_V_ACCO    = 00000001            PRV_T_SYSNAM     0000016E R     04   
PR$_P1BR       = 0000000A            PROC_V_ALL     = 00000004            PRV_T_TMPMBX     00000302 R     04   
PR$_P1LR       = 0000000B            PROC_V_PRIV    = 00000002            PRV_T_VOLPRO     000003B1 R     04   
PR$_PCBB       = 00000010            PROC_V_QUOT    = 00000000            PRV_T_WORLD      0000031F R     04   
PR$_PME        = 0000003D            PROC_V_SUBP    = 00000003            QUO_LIST1        000000DD R     03   
PR$_RXCS       = 00000020            PROGRAM_REGION = 00000000            QUO_LIST2        000000E5 R     03   
PR$_RXDB       = 00000021            PRV$AB_NAMES     ********   X   06   QUO_L_ASTLM      00000109 R     03   
PR$_SBIER      = 00000034            PRV$V_ALLSPOOL = 00000004            QUO_L_BIOLM      000000F1 R     03   
PR$_SBIFS      = 00000030            PRV$V_BUGCHK   = 00000017            QUO_L_BYTLM      000000ED R     03   
PR$_SBIMT      = 00000033            PRV$V_CMEXEC   = 00000001            QUO_L_CPULIM     000000E5 R     03   
PR$_SBIQC      = 00000036            PRV$V_CMKRNL   = 00000000            QUO_L_DFPFC      00000105 R     03   
PR$_SBIS       = 00000031            PRV$V_DETACH   = 00000005            QUO_L_DIOLM      000000E9 R     03   
PR$_SBISC      = 00000032            PRV$V_DIAGNOSE = 00000006            QUO_L_FILLM      000000F9 R     03   
PR$_SBITA      = 00000035            PRV$V_EXQUOTA  = 00000013            QUO_L_PGFLQUOTA  000000FD R     03   
PR$_SBR        = 0000000C            PRV$V_GROUP    = 00000008            QUO_L_PRCLM      00000101 R     03   
PR$_SCBB       = 00000011            PRV$V_GRPNAM   = 00000003            QUO_L_TQLM       000000F5 R     03   
PR$_SID        = 0000003E            PRV$V_LOG_IO   = 00000007            QUO_Q_ACCOUNT    000000DD R     03   
PR$_SIRR       = 00000014            PRV$V_MOUNT    = 00000011            QUO_Q_CPULIM     000002C5 R     03   
PR$_SISR       = 00000015            PRV$V_NETMBX   = 00000014            QUO_T_ACCOUNT    00000020 R     05   
PR$_SLR        = 0000000D            PRV$V_NOACNT   = 00000009            SCH$GL_CURPCB    ********   X   06   
PR$_SSP        = 00000002            PRV$V_OPER     = 00000012            SCH$GL_MAXPIX    ********   X   06   
PR$_TBIA       = 00000039            PRV$V_PHY_IO   = 00000016            SCH$GL_PCBVEC    ********   X   06   
PR$_TBIS       = 0000003A            PRV$V_PRMCEB   = 0000000A            SCH$IOLOCKR      ********   X   06   
PR$_TODR       = 0000001B            PRV$V_PRMGBL   = 00000018            SCH$IOUNLOCK     ********   X   06   
PR$_TXCS       = 00000022            PRV$V_PRMMBX   = 0000000B            SCRATCH_AREA2  = 00001000            
PR$_TXDB       = 00000023            PRV$V_PSWAPM   = 0000000C            SCRATCH_PAGES  = 00000040            
PR$_USP        = 00000003            PRV$V_SETPRI   = 0000000D            SHOW$A_CLIWORK   ********   X   06   
PR$_WCSA       = 0000002C            PRV$V_SETPRV   = 0000000E            SHOW$GQ_OUT_DSC  ********   X   06   
PR$_WCSD       = 0000002D            PRV$V_SYSGBL   = 00000019            SHOW$L_STATUS    ********   X   06   
PRIV_A_TEXT      0000017D R     03   PRV$V_SYSNAM   = 00000002            SHOW$PRINT_LINE  ********   X   06   
PRIV_FAO_LIST    000002D5 R     03   PRV$V_TMPMBX   = 0000000F            SHOW$PRINT_MSG   ********   X   06   
PROC_ACCO_PRES   000001B7 R     06   PRV$V_VOLPRO   = 00000015            SHOW$PROCESS     00000000 RG    06   
PROC_A_GETQUAL   00000000 R     03   PRV$V_WORLD    = 00000010            SHOW$_BADLOGIC = 00781122            
PROC_A_QUALST    0000001C R     03   PRV_LIST         00000131 R     03   SHOW$_DEVALL     ********   X   06   
PROC_DEFA_PRES   00000169 R     06   PRV_Q_PROCPRIV   00000131 R     03   SHOW$_DEVLIS     ********   X   06   
PROC_DEVALL      0000038A R     06   PRV_T_ALLSPOOL   000001BD R     04   SHOW$_DEVMOU     ********   X   06   
PROC_DEVICE_CNT  00000139 R     03   PRV_T_BUGCHK     000003E4 R     04   SHOW$_PRIV_TEXT  ********   X   06   
PROC_DEVICE_LST  0000013D R     03   PRV_T_CMEXEC     00000156 R     04   SHOW$_PROCACCO   ********   X   06   
PROC_DEVMOUN     000004D2 R     06   PRV_T_CMKRNL     0000013C R     04   SHOW$_PROCDEFA   ********   X   06   
PROC_GETINFO     00000065 R     06   PRV_T_DETACH     000001D9 R     04   SHOW$_PROCHDRI   ********   X   06   
PROC_HEADINFO    00000150 R     06   PRV_T_DIAGNOSE   000001F7 R     04   SHOW$_PROCPRI    ********   X   06   
PROC_L_BITLIS    00000095 R     03   PRV_T_EXQUOTA    00000386 R     04   SHOW$_PROCQUOT1  ********   X   06   
PROC_L_SCRLIM    000000A1 R     03   PRV_T_GROUP      0000021F R     04   SHOW$_PROCQUOT2  ********   X   06   
PROC_M_ACCO    = 00000002            PRV_T_GRPNAM     00000196 R     04   SHOW$_PROCSUBP   ********   X   06   
PROC_M_ALL     = 00000010            PRV_T_LOG_IO     0000020C R     04   SHR$K_SHRDEF   = 00000001            
PROC_M_PRIV    = 00000004            PRV_T_MOUNT      00000347 R     04   SHR$_ABEND     = 000010D8            
PROC_M_QUOT    = 00000001            PRV_T_NETMBX     00000397 R     04   SHR$_ABENDD    = 000010E0            
PROC_M_SUBP    = 00000008            PRV_T_NOACNT     00000248 R     04   SHR$_ABENDT    = 000010E8            
PROC_PRIV_PRES   000001D0 R     06   PRV_T_OPER       00000367 R     04   SHR$_APPENDEDB = 00001000            
PROC_QUOT_PRES   0000018F R     06   PRV_T_PHY_IO     000003D0 R     04   SHR$_APPENDEDR = 00001008            
PROC_Q_SCRATCH   00000099 R     03   PRV_T_PRMCEB     00000268 R     04   SHR$_ATPC      = 00001158            
PROC_Q_SYSCOMND  00000457 R     04   PRV_T_PRMGBL     00000403 R     04   SHR$_BADBYTE   = 00001010            
PROC_Q_SYSDISK   0000044F R     04   PRV_T_PRMMBX     00000293 R     04   SHR$_BADCOPIES = 00001160            
PROC_Q_SYSTIM    000002CD R     03   PRV_T_PSWAPM     000002B0 R     04   SHR$_BADDELIM  = 00001118            
PROC_SUBP_PRES   00000237 R     06   PRV_T_SETPRI     000002CD R     04   SHR$_BADFIELD  = 00001018            
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  45
SYMBOL TABLE                                                                                                                    (15)

SHR$_BADFORM   = 00001168            SHR$_SYSERROR  = 000011B0            UCB$L_EMB        00000078            
SHR$_BADJOBID  = 00001170            SHR$_SYSERRORPC= 000010F0            UCB$L_FIRST      00000014            
SHR$_BADJOBNAME= 00001178            SHR$_TEXT      = 00001130            UCB$L_FPC        0000000C            
SHR$_BADKEY    = 00001108            SHR$_UNXPCTSTS = 000011D0            UCB$L_FQBL       00000004            
SHR$_BADLOGIC  = 00001120            SHR$_VALERR    = 000011E8            UCB$L_FQFL       00000000            
SHR$_BADLOGICPC= 00001150            SHR$_WILDCONCAT= 000010C0            UCB$L_FR3        00000010            
SHR$_BADLONG   = 00001020            SHR$_WILDOUTVER= 000010C8            UCB$L_FR4        00000014            
SHR$_BADPRTY   = 00001180            SHR$_WRITEERR  = 000010D0            UCB$L_IOQBL      00000044            
SHR$_BADQNAME  = 00001188            SS$_NORMAL       ********   X   06   UCB$L_IOQFL      00000040            
SHR$_BADTIME   = 00001190            SYS$CMKRNL       ********   X   06   UCB$L_IRP        0000004C            
SHR$_BADVALUE  = 00001110            SYS$EXPREG       ********   X   06   UCB$L_LINK       0000002C            
SHR$_BADWORD   = 00001028            SYS$FAO          ********   X   06   UCB$L_LOGADR     00000064            
SHR$_BEGIN     = 00001030            SYS$GETJPI       ********   X   06   UCB$L_MAXBLOCK   00000084            
SHR$_BEGIND    = 00001038            SYS$GETTIM       ********   X   06   UCB$L_MEDIA      0000008C            
SHR$_BEGINT    = 00001040            SYS$TRNLOG       ********   X   06   UCB$L_NT_DATSSB  00000074            
SHR$_CLICB     = 00001048            SYSCOMND_LEN   = 0000000B            UCB$L_NT_INTSSB  00000078            
SHR$_CLOSEDEL  = 00001218            SYSDISK_LEN    = 00000008            UCB$L_OPCNT      00000060            
SHR$_CLOSEIN   = 00001050            UCB$B_AMOD       00000053            UCB$L_OWNUIC     0000001C            
SHR$_CLOSEOUT  = 00001058            UCB$B_CEX        00000077            UCB$L_PID        00000028            
SHR$_CONFDEL   = 000011F8            UCB$B_CM1        0000004A            UCB$L_RQBL       00000004            
SHR$_COPIEDB   = 00001060            UCB$B_CM2        0000004B            UCB$L_RQFL       00000000            
SHR$_COPIEDR   = 00001068            UCB$B_DEVCLASS   00000038            UCB$L_SVAPTE     00000068            
SHR$_CREATED   = 00001070            UCB$B_DEVTYPE    00000039            UCB$L_SVPN       00000064            
SHR$_DELETED   = 00001200            UCB$B_DIPL       00000052            UCB$L_TTCHAR     0000003C            
SHR$_DELINTERR = 00001240            UCB$B_DX_SCTCNT  000000A6            UCB$L_VCB        00000030            
SHR$_DELVER    = 00001208            UCB$B_ERTCNT     00000070            UCB$M_BACKP    = 00000020            
SHR$_DIRTOOBUS = 00001220            UCB$B_ERTMAX     00000071            UCB$M_BSY      = 00000100            
SHR$_ENDED     = 00001078            UCB$B_ESCAPE     0000004B            UCB$M_CANCEL   = 00000008            
SHR$_ENDEDD    = 00001080            UCB$B_FEX        00000076            UCB$M_DEADMO   = 00000400            
SHR$_ENDEDT    = 00001088            UCB$B_FIPL       0000000B            UCB$M_DELMBX   = 00000002            
SHR$_FILNOTDEL = 000011F0            UCB$B_LOCSRV     0000003C            UCB$M_DIAGBUF  = 00000002            
SHR$_FILNOTPUR = 00001230            UCB$B_OFFNDX     00000094            UCB$M_DX_WRITE = 00000008            
SHR$_FILPURGED = 00001250            UCB$B_OFFRTC     00000095            UCB$M_ECC      = 00000001            
SHR$_HASHCONCAT= 000011D8            UCB$B_REMSRV     0000003D            UCB$M_ERLOGIP  = 00000004            
SHR$_HIGHVER   = 00001148            UCB$B_SECTORS    0000003C            UCB$M_INT      = 00000002            
SHR$_IDXCONCAT = 00001138            UCB$B_SLAVE      00000074            UCB$M_INTTYPE  = 00000080            
SHR$_INCOMPAT  = 000011E0            UCB$B_SPR        00000075            UCB$M_JOB      = 00000001            
SHR$_NEWFILES  = 00001090            UCB$B_STATE      00000052            UCB$M_MOUNTING = 00000200            
SHR$_NOFILPURG = 00001228            UCB$B_TRACKS     0000003D            UCB$M_NOCNVRT  = 00000004            
SHR$_NOJOBID   = 000011A0            UCB$B_TYPE       0000000A            UCB$M_NT_BFROVF= 00000004            
SHR$_NOJOBNAME = 000011A8            UCB$B_VERTSZ     0000003F            UCB$M_NT_BREAK = 00000020            
SHR$_NOQUEUE   = 00001198            UCB$C_LENGTH     00000074            UCB$M_NT_NAME  = 00000010            
SHR$_NOTCMPLT  = 000011C0            UCB$C_LOGLNK   = 00000001            UCB$M_ONLINE   = 00000010            
SHR$_NOTCOPIED = 000011B8            UCB$K_LENGTH     00000074            UCB$M_POWER    = 00000020            
SHR$_NOVALUE   = 00001100            UCB$L_AMB        00000054            UCB$M_PRMMBX   = 00000001            
SHR$_NOWILD    = 00001128            UCB$L_ASTQBL     00000010            UCB$M_TIM      = 00000001            
SHR$_OPENIN    = 00001098            UCB$L_ASTQFL     0000000C            UCB$M_TIMOUT   = 00000040            
SHR$_OPENOUT   = 000010A0            UCB$L_CPID       0000005C            UCB$M_TT_NOTIF = 00000004            
SHR$_OVERLAY   = 000010A8            UCB$L_CRB        00000020            UCB$M_TT_TIMO  = 00000002            
SHR$_PARSEFAIL = 00001248            UCB$L_DDB        00000024            UCB$M_UNLOAD   = 00001000            
SHR$_PURGEVER  = 00001210            UCB$L_DEVCHAR    00000034            UCB$M_VALID    = 00000800            
SHR$_READERR   = 000010B0            UCB$L_DEVDEPEND  0000003C            UCB$S_LNKPRI   = 00000002            
SHR$_RELCONCAT = 00001140            UCB$L_DPC        00000080            UCB$S_LTYPE    = 00000002            
SHR$_REPLACED  = 000010B8            UCB$L_DUETIM     0000005C            UCB$T_PARTNER    0000000C            
SHR$_RMSERROR  = 000011C8            UCB$L_DX_BFPNT   0000009C            UCB$V_BACKP    = 00000005            
SHR$_SEARCHFAIL= 00001238            UCB$L_DX_BUF     00000098            UCB$V_BSY      = 00000008            
SHR$_SYNTAX    = 000010F8            UCB$L_DX_RXDB    000000A0            UCB$V_CANCEL   = 00000003            
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  46
SYMBOL TABLE                                                                                                                    (15)

UCB$V_DEADMO   = 0000000A            USER_MODE      = 00000003            
UCB$V_DELMBX   = 00000001            WORD           = 00000002            
UCB$V_DIAGBUF  = 00000001            
UCB$V_DX_WRITE = 00000003            
UCB$V_ECC      = 00000000            
UCB$V_ERLOGIP  = 00000002            
UCB$V_INT      = 00000001            
UCB$V_INTTYPE  = 00000007            
UCB$V_JOB      = 00000000            
UCB$V_LNKPRI   = 00000006            
UCB$V_LTYPE    = 00000000            
UCB$V_MOUNTING = 00000009            
UCB$V_MSGACK   = 00000004            
UCB$V_MSGFLO   = 00000003            
UCB$V_NOCNVRT  = 00000002            
UCB$V_NT_BFROVF= 00000002            
UCB$V_NT_BREAK = 00000005            
UCB$V_NT_NAME  = 00000004            
UCB$V_ONLINE   = 00000004            
UCB$V_POWER    = 00000005            
UCB$V_PRMMBX   = 00000000            
UCB$V_SEGFLO   = 00000002            
UCB$V_TIM      = 00000000            
UCB$V_TIMOUT   = 00000006            
UCB$V_TT_NOTIF = 00000002            
UCB$V_TT_TIMO  = 00000001            
UCB$V_UNLOAD   = 0000000C            
UCB$V_VALID    = 0000000B            
UCB$W_BCNT       0000006E            
UCB$W_BCR        00000096            
UCB$W_BOFF       0000006C            
UCB$W_BUFQUO     00000018            
UCB$W_BYTESTOGO  0000003E            
UCB$W_CHARGE     0000004A            
UCB$W_CYLINDERS  0000003E            
UCB$W_DA         0000008C            
UCB$W_DC         0000008E            
UCB$W_DEVBUFSIZ  0000003A            
UCB$W_DEVSTS     0000005A            
UCB$W_DIRSEQ     00000088            
UCB$W_DSTADDR    00000018            
UCB$W_DX_BCR     000000A4            
UCB$W_EC1        00000090            
UCB$W_EC2        00000092            
UCB$W_ERRCNT     00000072            
UCB$W_FUNC       0000007E            
UCB$W_MB_SEED    FFFFFFFC            
UCB$W_MSGCNT     00000016            
UCB$W_MSGMAX     00000014            
UCB$W_NT_CHAN    0000007C            
UCB$W_OFFSET     0000008A            
UCB$W_REFC       00000050            
UCB$W_SIZE       00000008            
UCB$W_SRCADDR    0000001A            
UCB$W_STS        00000058            
UCB$W_UNIT       00000048            
UCB$W_VPROT      0000001A            
SHOW$PROCESS                                                     21-AUG-1978 19:22:14   VAX-11 MACRO X0.3-11               Page  47
PROGRAM SECTION SYNOPSIS                                                                                                        (15)



PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            FFFFFFFE      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
SHOW$RWDATA      000002DD      03     NOPIC   USR   CON   REL   LCL NOSHR NOEXE   RD    WRT LONG  
SHOW$MSG_TXT     0000048A      04     NOPIC   USR   CON   REL   LCL NOSHR NOEXE   RD  NOWRT LONG  
SHOW$JPI_STR     00000038      05     NOPIC   USR   CON   REL   LCL NOSHR NOEXE   RD    WRT LONG  
SHOW$CODE        00000551      06     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD  NOWRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
2494. BYTES LEFT IN FREE MEMORY POOL.
28. BYTES OF RECLAIMED MEMORY.
OBJ$:SHOPROCES,LIS$:SHOPROCES/-SP=EXECML$/ML,LIB$:CLIUTL/ML,SRC$:SHOPROCES
77 MLB DIR RDS - 1089 GETS TO DEFINE 35 MACROS. 104 INTER. FILE WRITES. 
