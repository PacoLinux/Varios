DWTSU	X0013 - WRITE VOLUME SU	MACRO M1110  21-AUG-78 20:49  PAGE 3


      1	000000					$BEGIN	DWTSU,0013,<WRITE VOLUME SUMMARY TO DISK>
						.TITLE	DWTSU	X0013 - WRITE VOLUME SUMMARY TO DISK
						.IDENT	"X0013"
      2
      3					;
      4					; COPYRIGHT (C) 1976 BY DIGITAL EQUIPMENT CORPORATION,
      5					; MAYNARD, MASSACHUSETTS
      6					;
      7					; THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR USE ONLY ON A
      8					; SINGLE  COMPUTER  SYSTEM AND MAY BE COPIED ONLY WITH THE IN-
      9					; CLUSION OF THE ABOVE COPYRIGHT NOTICE.   THIS  SOFTWARE,  OR
     10					; ANY  OTHER  COPIES THEREOF, MAY NOT BE PROVIDED OR OTHERWISE
     11					; MADE AVAILABLE TO ANY OTHER PERSON EXCEPT FOR  USE  ON  SUCH
     12					; SYSTEM  AND TO ONE WHO AGREES TO THESE LICENSE TERMS.  TITLE
     13					; TO AND OWNERSHIP OF THE SOFTWARE SHALL AT ALL  TIMES  REMAIN
     14					; IN DIGITAL.
     15					;
     16					; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITH-
     17					; OUT  NOTICE  AND  SHOULD NOT BE CONSTRUED AS A COMMITMENT BY
     18					; DIGITAL EQUIPMENT CORPORATION.
     19					;
     20					; DIGITAL EQUIPMENT CORPORATION ASSUMES NO RESPONSIBILITY  FOR
     21					; THE USE OR RELIABILITY OF ITS SOFTWARE ON EQUIPMENT WHICH IS
     22					; NOT SUPPLIED BY DIGITAL.
     23					;
     24					; ANDREW C. GOLDSTEIN  15-AUG-76  18:30
     25					; GEORGE RITTENBURG  11-MAR-77	001  CONDITIONAL FOR 11D AND IAS INSERTED
     26
     27						.MCALL	GLUN$C,FHDL2$
     28	000000					FHDL2$				; DEFINE FILE HEADER OFFSETS
DWTSU	X0013 - WRITE VOLUME SU	MACRO M1110  21-AUG-78 20:49  PAGE 4


     30					;
     31					; RAD-50 FILE NAMES FOR THE STORAGE MAP AND BAD BLOCK FILES
     32					;
     33	000000	   102 	   111 	   124 	BITNAM:	.ASCII	"BITMAP"
	000003	   115 	   101 	   120
     34	000006	   102 	   101 	   104 	BADNAM:	.ASCII	"BADBLK"
	000011	   102 	   114 	   113
     35
     36
     37					;+
     38					;
     39					; *** - $DWTSU	WRITE VOLUME SUMMARY TO DISK
     40					;
     41					; THIS ROUTINE ESSENTIALLY PERFORMS AN INITVOL ON THE CURRENT
     42					; OUTPUT DISK. THE BAD BLOCK MAP IS CONSTRUCTED FROM THE BAD BLOCK
     43					; DATA, THE SYSTEM FILES ARE ALLOCATED, AND THE STORAGE MAP IS
     44					; INITIALIZED. THEN THE INDEX FILE, STORAGE MAP, AND BAD BLOCK
     45					; FILE HEADERS ARE RECONSTRUCTED AND WRITTEN TO THE DISK.
     46					;
     47					; INPUTS:
     48					;
     49					;	OUTLUN ASSIGNED TO DISK
     50					;	VOLUME SUMMARY BLOCK IN $BUF2
     51					;	$OUDEV POINTING AT DEVICE TABLE ENTRY
     52					;
     53					; OUTPUTS:
     54					;
     55					;	DISK INITIALIZED
     56					;	REST OF DEVICE TABLE ENTRY FILLED IN
     57					;	INDEX FILE HEADER IN $OXBF AND $OHBF
     58					;	ALL REGISTERS CLOBBERED
     59					;
     60					;-
     61
     62	000014				$DWTSU::
     63	000014					$CALL $BUFCK <,,,,#$B1HD>	; USE BUF1 AS SCRATCH AREA
     64	000024					THRU R1 := #<2048.+B.SIZ+P.SIZ>/2
     65	000030					  LET (R4)+ := #0		; INIT IT TO ZERO
     66	000032					END LOOP
     67
     68	000036					GLUN$C OUTLUN,$LUNBF		; GET DEVICE CHARACTERISTICS
     69	000044					$CALL  $CMEFX			; REARRANGE GEOMETRY INFO.
     70	000050					LET $VOLSZ := $CW3		; SAVE VOLUME SIZE
     71	000056					LET $VOLSZ+2 := $CW2
     72	000064					$CALL $DELTA			; COMPUTE HOME BLOCK PLACEMENT DELTA.
     73	000070					$CALL $DSCBD			; DO BAD BLOCK PROCESSING
     74	000074					LET R0 := $OUDEV		; POINT TO DEVICE TABLE ENTRY
     75										; SEE IF DISK HAS ENOUGH SPACE
     76	000100					DCOMP V.FRBK+2(R0),V.FRBK(R0), $B2DAT+S.USE+2,$B2DAT+S.USE
     77	000116					IF RESULT IS LO THEN ERROR ER.DEX
     78
     79	000122					$CALL $DSCAL			; ALLOCATE SYSTEM FILES
     80	000126					LET R0 := $OUDEV + #V.RVN	; DEVICE TABLE ENTRY AGAIN
     81	000136					LET (R0)+ := $B2DAT+S.RVN	; SET RVN OF THIS DISK
     82	000142					LET (R0)+ := $B2DAT+S.HFNU	; HIGHEST FILE NUMBER USED
     83	000146					LET  (R0)+  :=  $B2DAT+S.HFNU+2
     84	000152	166720 	000000C			SUB $B2DAT+S.USE,(R0)+		; COMPUTE SPACE THAT WILL BE LEFT
DWTSU	X0013 - WRITE VOLUME SU	MACRO M1110  21-AUG-78 20:49  PAGE 4-1


     85	000156	005610 				SBC (R0)
     86	000160	166720 	000000C			SUB $B2DAT+S.USE+2,(R0)+
     87	000164					LET (R0)+ := #1			; FIRST FREE LBN SET TO 1
     88	000170					LET (R0)+ := $B2DAT+S.IBSZ	; INDEX FILE BITMAP SIZE
     89	000174					LET (R0)+ := $INDXF+4		; INDEX FILE BITMAP LBN
     90	000200					LET (R0)+ := $INDXF+6
     91	000204					LET (R0) := $SBM		; STORAGE MAP SIZE,
     92	000210	005320 				DEC (R0)+			; EXCLUDING SCB
     93	000212					LET (R0)+ := $SBM+4		; AND LBN
     94	000216					LET (R0)+ := $SBM+6
     95	000222					LET (R0)+ := $B2DAT+S.CLF	; STORAGE MAP CLUSTER FACTOR
     96
     97	000226					$CALL $DSCBT			; INIT STORAGE BITMAP
     98
     99					;
    100					; NOW CONSTRUCT THE INDEX FILE HEADER FROM THE ONE READ IN WITH
    101					; THE VOLUME SUMMARY BLOCK.
    102					;
    103	000232					$CALL $BUFCK <,,,,#$OXHD>	; GET INDEX FILE HEADER BUFFER
    104	000242					LET B.STAT(R4) := #1		; MARK IT BUSY
    105	000250					LET R5 := #$OXBF		; POINT TO INDEX FILE HEADER BUFFER
    106	000254					LET R1 := R5
    107	000256					LET R2 := #$B2DAT+512.		; POINT TO INDEX FILE HEADER IMAGE
    108	000262					THRU R0 := #256.
    109	000266					  LET (R1)+ := (R2)+		; COPY INDEX FILE HEADER IMAGE
    110	000270					END LOOP
    111	000274					$CALL $ZMAP <,,,,,R5>		; CLEAN OUT THE MAP AREA
    112	000300					LET R4 := #$BOOTB		; POINT TO START OF ALLOCATION TABLE
    113	000304					$CALL ALCRP			; BUILD MAP FOR BOOT BLOCK
    114	000310					$CALL ALCRP			; AND HOME BLOCK
    115	000314					$CALL ALCRP			; AND BACKUP HOME BLOCK
    116	000320					$CALL ALCRP			; AND BACKUP INDEX FILE HEADER
    117	000324					$CALL ALCRP			; AND REST OF INDEX FILE
    118	000330					$CALL $WRHDR <,,,,#$OXHD>	; WRITE INDEX FILE HEADER
    119					;
    120					; CONSTRUCT AND WRITE THE STORAGE BITMAP FILE HEADER
    121					;
    122	000340					$CALL $BUFCK <,,,,#$OHHD>	; GET HEADER BUFFER
    123	000350					LET R5 := #$OHBF		; POINT TO HEADER BUFFER
    124	000354					LET R1 := R5
    125	000356					LET R2 := #$OXBF		; AND INDEX FILE HEADER
    126	000362					THRU R0 := #256.
    127	000366					  LET (R1)+ := (R2)+		; COPY THE HEADER
    128	000370					END LOOP
    129	000374					LET H.FNUM(R5) := #2		; STORAGE MAP IS FILE #2
    130	000402					LET H.FSEQ(R5) := #2
    131	000410					LET R0 := #0
    132	000412					LET R0 :B= R0 SET.BY H.IDOF(R5)	; FIND THE IDENT AREA
    133	000416					LET R0 := R0 L.SHIFT 1 + #$OHBF+I.FNAM
    134	000424					LET R1 := #BITNAM
    135	000430					THRU R2 := #6
    136	000434					  LET (R0)+ :B= (R1)+		; COPY IN FILE NAME OF BITMAP
    137	000436					END LOOP
    138	000442					$CALL $ZMAP <,,,,,R5>		; CLEAN OUT MAP AREA
    139	000446					LET H.UFAT+F.EFBK+2(R5)  :=  $SBMEF+2 ; SET THE END OF FILE MARK.
    140	000454					LET H.UFAT+F.EFBK(R5)  :=  $SBMEF
    141	000462					LET H.UFAT+F.FFBY(R5)  :=  #0
DWTSU	X0013 - WRITE VOLUME SU	MACRO M1110  21-AUG-78 20:49  PAGE 4-2


    142	000466					LET R4 := #$SBM			; GET STORAGE MAP ALLOCATION
    143	000472					LET H.UFAT+F.HIBK+2(R5) := (R4)	; SET HIGH BLOCK IN FILE ATTRIBUTES.
    144	000476					LET H.UFAT+F.HIBK(R5) := 2(R4)
    145	000504					$CALL	ALCRP			; BUILD RP TO MAP STORAGE BIT MAP.
    146	000510					$CALL $WRHDR <,,,,#$OHHD>	; WRITE THE HEADER
    147					;
    148					; NOW CONSTRUCT AND WRITE THE BAD BLOCK FILE HEADER
    149					;
    150	000520					$CALL $BUFCK <,,,,#$OHHD>	; GET HEADER BUFFER
    151	000530					LET H.FNUM(R5) := #3		; BAD BLOCK FILE IS NUMBER 3
    152	000536					LET H.FSEQ(R5) := #3
    153	000544					LET R0 := #0
    154	000546					LET R0 :B= R0 SET.BY H.IDOF(R5)	; FIND THE IDENT AREA
    155	000552					LET R0 := R0 L.SHIFT 1 + #$OHBF+I.FNAM
    156	000560					LET R1 := #BADNAM
    157	000564					THRU R2 := #6
    158	000570					  LET (R0)+ :B= (R1)+		; COPY IN FILE NAME OF BITMAP
    159	000572					END LOOP
    160	000576					LET  H.UFAT+F.EFBK+2(R5)  :=  #0 ; SET THE END OF FILE MARK.
    161	000602					LET  H.UFAT+F.EFBK(R5)  :=  #0
    162	000606					$CALL $ZMAP <,,,,,R5>		; CLEAN OUT MAP AREA
    163	000612					LET R4 := #$BADBK		; POINT TO START OF BAD BLOCK DATA
    164	000616					WHILE R4 LO $BADP		; LOOP FOR ALL BAD EXTENTS
    165	000624					  $CALL ALCRP			; CREATE RETRIEVAL POINTER FOR EACH
    166	000630					END LOOP
    167	000632					$CALL $WRHDR <,,,,#$OHHD>	; AND WRITE THE HEADER
    168
    169	000642					$CALL $BUFCK <,,,,#$OHHD>	; GET HEADER BUFFER
    170	000652					LET B.STAT(R4) := #1		; MARK IT BUSY
    171	000660					LET R0 := #$OHBF
    172	000664					LET R1 := #$OXBF
    173	000670					THRU R2 := #256.
    174	000674					  LET (R0)+ := (R1)+		; COPY INDEX FILE HEADER INTO
    175	000676					END LOOP			; HEADER BUFFER
    176	000702					LET (R0)+ := #0			; INIT BASE VBN
    177	000704					LET (R0)+ := #0
    178	000706					LET $B1HD+B.STAT := #0		; RELEASE THE I/O BUFFERS
    179	000712					LET $B2HD+B.STAT := #0
    180	000716					RETURN
DWTSU	X0013 - WRITE VOLUME SU	MACRO M1110  21-AUG-78 20:49  PAGE 5


    182					;+
    183					;
    184					; SUBROUTINE TO CALL THE RETRIEVAL POINTER BUILDER WITH AN ALLOCATION
    185					; TABLE ENTRY AS INPUT. R4 POINTS TO THE TABLE ENTRY, ON RETURN IT IS
    186					; BUMPED TO THE NEXT.
    187					;
    188					;-
    189
    190	000720				ALCRP:	LET R1 := (R4)+			; GET BLOCK COUNT
    191	000722					LET R0 := (R4)+
    192	000724					LET R3 := (R4)+			; AND LBN
    193	000726					LET R2 := (R4)+
    194	000730					$CALL $BLDRP <R0,R1,R2,R3,,R5>	; CONSTRUCT RETRIEVAL POINTERS
    195	000734					RETURN
    196
    197
    198
    199		000001 				.END
DWTSU	X0013 - WRITE VOLUME SU	MACRO M1110  21-AUG-78 20:49  PAGE 5-1
SYMBOL TABLE

ALCRP   000720R  	G.LUBA= 000004   	H.SEMK= 000104   	S.RVN = ****** GX	$I$   = 000001
A3    = 000002   	G.LUBL= 000006   	H.SMMX= 000110   	S.USE = ****** GX	$L    = 000007
BADNAM  000006R  	G.LUCW= 000004   	H.UCHA= 000064   	TYPS0 = 000006   	$LUNBF= ****** GX
BITNAM  000000R  	G.LUFB= 000003   	H.UFAT= 000024   	TYPS1 = 000001   	$L$   = 000000
B.SIZ = ****** GX	G.LULU= 000002   	H.USE = 000072   	UC.CON= 000200   	$OHBF = ****** GX
B.STAT= ****** GX	G.LUNA= 000000   	IIII  = 177777   	UC.DLK= 000100   	$OHHD = ****** GX
B0      000030R  	G.LUNU= 000002   	I.BKDT= 000052   	V.FRBK= ****** GX	$OUDEV= ****** GX
B1      000266R  	H.ACOF= 000002   	I.CRDT= 000022   	V.RVN = ****** GX	$OXBF = ****** GX
B2      000366R  	H.CKSM= 000776   	I.EXDT= 000042   	$BADBK= ****** GX	$OXHD = ****** GX
B3      000434R  	H.EFNU= 000016   	I.FNAM= 000000   	$BADP = ****** GX	$O$   = 000000
B4      000570R  	H.EFSQ= 000020   	I.RVDT= 000032   	$BLDRP= ****** GX	$R    = 177777
B5      000616R  	H.ERVN= 000022   	I.RVNO= 000020   	$BOOTB= ****** GX	$SBM  = ****** GX
B6      000674R  	H.FCHA= 000064   	I.ULAB= 000062   	$BUFCK= ****** GX	$SBMEF= ****** GX
ER.DEX= ****** GX	H.FLEV= 000006   	LBLS0 = 000006   	$B1HD = ****** GX	$SUPMC= 000043
E0      000036R  	H.FNUM= 000010   	LBLS1 = 000005   	$B2DAT= ****** GX	$T    = 000002
E1      000274R  	H.FOWN= 000074   	L0      000122R  	$B2HD = ****** GX	$T1   = 000006
E2      000374R  	H.FPRO= 000100   	L1      000632R  	$CMEFX= ****** GX	$T2   = 000006
E3      000442R  	H.FRVN= 000014   	OUTLUN= ****** GX	$CW2  = ****** GX	$VOLSZ= ****** GX
E4      000576R  	H.FSEG= 000004   	P.SIZ = ****** GX	$CW3  = ****** GX	$WRHDR= ****** GX
E5      000632R  	H.FSEQ= 000012   	SC.BAD= 000100   	$DELTA= ****** GX	$Y$   = 000000
E6      000702R  	H.IDOF= 000000   	SC.DIR= 000040   	$DIDDO= 000000   	$ZMAP = ****** GX
FP.DEL= 000010   	H.MPOF= 000001   	SC.MDL= 000200   	$DSCAL= ****** GX	$Z$   = 000000
FP.EXE= 000004   	H.PRIV= 000073   	S.CLF = ****** GX	$DSCBD= ****** GX	$$T   = 000001
FP.RDV= 000001   	H.PROG= 000074   	S.HDHD= 000114   	$DSCBT= ****** GX	$$$   = 000000R     002
FP.WRV= 000002   	H.PROJ= 000076   	S.HFNU= ****** GX	$DWTSU  000014RG 	$$$OST= 000014
F.EFBK= ****** GX	H.RPRO= 000102   	S.IBSZ= ****** GX	$EF$  = 000000   	.$T   = 000006
F.FFBY= ****** GX	H.RSOF= 000003   	S.IDHD= 000202   	$E$   = 000001   	...GBL= 000000
F.HIBK= ****** GX	H.SCHA= 000065   	S.MPHD= 000000   	$INDXF= ****** GX	...TPC= 000000

. ABS.	000000	   000
      	000736	   001
$DPB$$	000006	   002
ERRORS DETECTED:  0

VIRTUAL MEMORY USED:  13207 WORDS  ( 52 PAGES)
DYNAMIC MEMORY:  14388 WORDS  ( 55 PAGES)
ELAPSED TIME:  00:02:35
EXE$:DWTSU,LIS$:DWTSU/-SP=SRC$:SMAC/PA:1,DSCPRE,DWTSU
