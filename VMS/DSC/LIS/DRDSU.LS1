DRDSU	X0021 - READ VOLUME SUM	MACRO M1110  21-AUG-78 19:36  PAGE 3


      1	000000					$BEGIN	DRDSU,0021,<READ VOLUME SUMMARY FOR DISK>
						.TITLE	DRDSU	X0021 - READ VOLUME SUMMARY FOR DISK
						.IDENT	"X0021"
      2
      3					;
      4					; COPYRIGHT (C) 1976 BY DIGITAL EQUIPMENT CORPORATION,
      5					; MAYNARD, MASSACHUSETTS
      6					;
      7					; THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR USE ONLY ON A
      8					; SINGLE  COMPUTER  SYSTEM AND MAY BE COPIED ONLY WITH THE IN-
      9					; CLUSION OF THE ABOVE COPYRIGHT NOTICE.   THIS  SOFTWARE,  OR
     10					; ANY  OTHER  COPIES THEREOF, MAY NOT BE PROVIDED OR OTHERWISE
     11					; MADE AVAILABLE TO ANY OTHER PERSON EXCEPT FOR  USE  ON  SUCH
     12					; SYSTEM  AND TO ONE WHO AGREES TO THESE LICENSE TERMS.  TITLE
     13					; TO AND OWNERSHIP OF THE SOFTWARE SHALL AT ALL  TIMES  REMAIN
     14					; IN DIGITAL.
     15					;
     16					; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITH-
     17					; OUT  NOTICE  AND  SHOULD NOT BE CONSTRUED AS A COMMITMENT BY
     18					; DIGITAL EQUIPMENT CORPORATION.
     19					;
     20					; DIGITAL EQUIPMENT CORPORATION ASSUMES NO RESPONSIBILITY  FOR
     21					; THE USE OR RELIABILITY OF ITS SOFTWARE ON EQUIPMENT WHICH IS
     22					; NOT SUPPLIED BY DIGITAL.
     23					;
     24					; ANDREW C. GOLDSTEIN  4-AUG-78  14:43
     25					; 001 11-MAR-77 G.RITTENBURG PARAMETER MISSING $GLUNC
     26					;  002  11-MAR-77 G.RITTENBURG CONDITIONAL FOR 11D AND IAS INSERTED
     27
     28					;CORRECTED 1/27/77 G.RITTENBURG
     29
     30
     31						.MCALL	GLUN$C,HMBOF$
     32	000000					HMBOF$				; DEFINE HOME BLOCK LAYOUT
DRDSU	X0021 - READ VOLUME SUM	MACRO M1110  21-AUG-78 19:36  PAGE 4


     34					;+
     35					;
     36					; *** - $DRDSU	READ VOLUME SUMMARY, DISK
     37					;
     38					; THIS ROUTINE RUMMAGES ABOUT THE DISK AND CONSTRUCTS THE VOLUME
     39					; SUMMARY BLOCK IN THE I/O BUFFER.
     40					;
     41					; INPUTS:
     42					;
     43					;	INLUN ASSIGNED TO DESIRED DISK UNIT
     44					;
     45					; OUTPUTS:
     46					;
     47					;	SUMMARY BLOCK IN $BUF2
     48					;	INDEX FILE HEADER IN $IXBF AND $IHBF
     49					;	CURRENT ENTRY IN $IVTAB FILLED IN
     50					;
     51					;-
     52
     53	000000				$DRDSU::
     54	000000					GLUN$C	INLUN, $LUNBF			; GET VOLUME SIZE
     55	000006					$CALL	$CMEFX			; REARRANGE GEOMETRY INFO.
     56					;
     57					; FIRST SEARCH FOR THE HOME BLOCK
     58					;
     59	000012					LET R4 := #$B1HD		; USE I/O BUFFER #1
     60	000016					LET R2 := #0			; START WITH LBN 1
     61	000020					LET R3 := #1
     62	000024					REPEAT
     63	000024					  $CALL $RDW1B <,,R2,R3,R4>	; READ A BLOCK
     64	000030					  ON.NOERROR
     65	000032					    $CALL $CKSM1 <,#H.CHK1/2,,,,R5> ; COMPUTE FIRST CHECKSUM
     66	000042					    ON.NOERROR
     67	000044					      $CALL $CKSUM <,,,,,R5>	; COMPUTE SECOND CHECKSUM
     68	000050					      ON.NOERROR
     69	000052						LET R0 := H.IBLB(R5) SET.BY H.IBLB+2(R5)
     70	000062						IF H.IBSZ(R5) NE #0 AND R0 NE #0 AND H.FMAX(R5) NE #0
     71	000102						  LEAVE LOOP		; GOOD HOME BLOCK
     72	000104						END
     73	000104					      END
     74	000104					    END
     75	000104					  ELSE				; IF I/O ERROR
     76	000106					    IFB (R4) NE #IE.VER	; RETRY ONLY ON PARITY ERROR
     77						;ABOVE LINE CORRECTED 1-14-77 WAS 2(R4)
     78	000114					      ERROR ER.IIR		; REPORT ALL OTHER ERRORS
     79	000116					    END
     80	000116					  END
     81	000116					  LET R3 := R3 OFF.BY #1 + #256.; TRY NEXT BLOCK IN SEQUENCE
     82	000126					  LET R2 := R2 + CARRY
     83	000130					  DCOMP R2,R3, $CW2,$CW3	; CHECK AGAINST VOLUME LIMIT
     84	000142					  IF RESULT IS HI THEN ERROR ER.NHO
     85	000146					  LET B.STAT(R4) := #0		; INVALIDATE THE BUFFER
     86	000152					END LOOP
     87					;
     88					; WE HAVE FOUND THE VOLUME'S HOME BLOCK. DO FURTHER VALIDATION
     89					; AND EXTRACT THE RELEVANT DATA.
     90					;
DRDSU	X0021 - READ VOLUME SUM	MACRO M1110  21-AUG-78 19:36  PAGE 4-1


     91	000154					IF H.VLEV(R5) NE #401 THEN ERROR ER.LEV	; CHECK STRUCTURE LEVEL
     92	000166					LET R3 := $INDEV		; GET POINTER INTO DEVICE TABLE
     93	000172					LET V.RVN(R3) := H.RVN(R5)	; RELATIVE VOLUME NUMBER
     94	000200					LET V.IBSZ(R3) := H.IBSZ(R5)	; INDEX FILE BITMAP SIZE
     95	000206					LET V.IBLB(R3) := H.IBLB+2(R5)	; INDEX FILE BITMAP LBN
     96	000214					LET V.IBLB+2(R3) := H.IBLB(R5)
     97	000222					LET V.CLF(R3) := H.SBCL(R5)	; CLUSTER FACTOR
     98					;
     99					; DEFAULT THE FILE NAME TO THE VOLUME LABEL IF FORMER IS NULL
    100					;
    101	000230					LET R0 := #$OLAB		; POINT TO FILE NAME
    102	000234					IFB (R0) EQ #0			; IF NULL
    103	000240					  LET R2 := R5 + #H.VNAM	; DEFAULT TO VOLUME NAME
    104	000246					  THRU R1 := #12.
    105	000252					    LET (R0)+ :B= (R2)+		; COPY IN FILE NAME
    106	000254					    IF RESULT IS EQ LEAVE LOOP	; NULL IS A TERMINATOR
    107	000256					  END LOOP
    108	000262					  IF R1 GT #0
    109	000266					    LET R0 := R0 - #1		; BACK UP TO NULL
    110	000270					    THRU R1
    111	000270					      LET (R0)+ :B= #40		; PAD WITH BLANKS
    112	000274					    END LOOP
    113	000300					  END
    114	000300					END
    115					;
    116					; INIT THE BUFFER WITH THE SUMMARY BLOCK PREAMBLE AND CLEAR THE REST
    117					; ***** WARNING! THE FOLLOWING CODE ASSUMES THE FORMAT OF THE VOLUME
    118					; ***** SUMMARY BLOCK AS DOCUMENTED IN THE ROOT MODULE.
    119					;
    120	000300					$CALL $BUFCK <,,,,#$B2HD>	; OBTAIN 2ND I/O BUFFER
    121	000310					LET B.STAT(R4) := #1		; MARK BUFFER BUSY
    122	000316					LET R0 := #$BUF2
    123	000322					LET (R0)+ := #512.		; BYTE COUNT IS 512
    124	000326					LET (R0)+ := #PF.SUM		; FLAG AS A SUMMARY BLOCK
    125	000332					THRU R1 := #256.+<P.SIZ/2>-2
    126	000336					  LET (R0)+ := #0		; ZERO THE REST OF THE PREAMBLE AND BLOCK
    127	000340					END LOOP
    128	000344					LET R0 := #$B2DAT+S.NAME	; FIRST CELL IS FILE NAME
    129	000350					LET R2 := #$OLAB		; POINT TO USER FILE NAME
    130	000354					THRU R1 := #12.
    131	000360					  LET (R0)+ :B= (R2)+		; COPY IN FILE NAME
    132	000362					END LOOP
    133
    134	000366					LET (R0)+ := V.DVNM(R3)		; COPY IN DEVICE NAME
    135	000372					LET R1 := V.DVUN(R3)		; GET UNIT NUMBER
    136	000376					$CALL $CBOMG <R0,R1,#0>		; CONVERT TO OCTAL
    137	000406					THRU R1 := #$B2DAT+S.SNAM - R0
    138	000414					  LET (R0)+ :B= #40		; PAD NAME WITH BLANKS
    139	000420					END LOOP
    140
    141	000424					LET R2 := R5 + #H.SNAM		; POINT TO STRUCTURE NAME
    142	000432					THRU R1 := #12.
    143	000436					  LET (R0)+ :B= (R2)+		; COPY STRUCTURE NAME
    144	000440					END LOOP
    145	000444					LET R2 := R5 + #H.VNAM		; POINT TO VOLUME NAME
    146	000452					THRU R1 := #12.
    147	000456					  LET (R0)+ :B= (R2)+		; COPY VOLUME NAME
DRDSU	X0021 - READ VOLUME SUM	MACRO M1110  21-AUG-78 19:36  PAGE 4-2


    148	000460					END LOOP
    149
    150	000464					LET (R0)+ := H.RVN(R5)		; STORE RELATIVE VOLUME NUMBER
    151	000470					LET (R0)+ := H.NVOL(R5)		; AND NUMBER OF VOLUMES IN SET
    152	000474					LET (R0)+ := H.SBCL(R5)		; AND CLUSTER FACTOR
    153	000500					LET (R0)+ := $CW3		; VOLUME SIZE
    154	000504					LET (R0)+ := $CW2
    155	000510					LET (R0)+ := $CW3		; INIT SPACE USED TO VOLUME SIZE
    156	000514					LET (R0)+ := $CW2
    157	000520					LET R0 := #$B2DAT+S.IBSZ
    158	000524					LET (R0)+ := H.IBSZ(R5)		; STORE INDEX FILE BITMAP SIZE
    159	000530					LET (R0)+ := H.IBLB+2(R5)	; STORE INDEX FILE BITMAP LBN
    160	000534					LET (R0)+ := H.IBLB(R5)
    161	000540					LET (R0)+ := #BLKF		; TAPE BLOCKING FACTOR
    162	000544					IF #KY.MRG SET.IN $OFLAG	; RECORD MERGE MODE FLAG
    163	000554					  LET (R0)+ := #1
    164	000560					ELSE
    165	000562					  LET (R0)+ := #0
    166	000564					END
    167	000564					LET $B1HD+B.STAT := #0		; INVALIDATE THE HOME BLOCK
    168					;
    169					; SCAN THE INDEX FILE BITMAP TO DETERMINE THE NUMBER OF FILES AND
    170					; THE HIGHEST FILE NUMBER
    171					;
    172	000570					PUSH V.IBSZ(R3)			; STORE NUMBER OF BLOCKS TO SCAN
    173	000574					LET $LBN := V.IBLB(R3)		; GET STARTING LBN
    174	000602					LET $LBN+2 := V.IBLB+2(R3)
    175	000610					LET R2 := #0			; INIT FILE NUMBER
    176	000612					LET R3 := #0
    177	000614					FOR (SP) := (SP) DOWNTO #0
    178	000614					  PUSH R2,R3
    179	000620					  $CALL $RDW1B <,,$LBN+2,$LBN,#$B1HD> ; READ A BLOCK
    180	000640					  POP R3,R2			; RESTORE FILE NUMBER
    181	000644					  ON.ERROR THEN ERROR ER.IXB
    182	000650					  LET R0 := #0
    183	000652					  REPEAT
    184	000652					    LET R1 := (R5)+		; GET NEXT BITMAP WORD
    185	000654					    REPEAT
    186	000654					      LET R3 := R3 + #01	; BUMP TO NEXT FILE NUMBER
    187	000660					      LET R2 := R2 + CARRY
    188	000662					      LET R1 := R1 R.ROTATE 1	; COUNT A BIT
    189	000664					      IF RESULT IS CS		; IF SET
    190	000666						LET $B2DAT+S.HFNU := R3	; SAVE FILE NUMBER
    191	000672						LET $B2DAT+S.HFNU+2 := R2
    192	000676						LET R0 := R0 + #1	; AND COUNT IT
    193	000700					      END
    194	000700					    UNTIL #17 OFF.IN R3		; REPEAT FOR WORD
    195	000706					  UNTIL #7777 OFF.IN R3		; REPEAT FOR BLOCK
    196	000714					  LET $B2DAT+S.NFIL := $B2DAT+S.NFIL + R0 ; ACCUMULATE # FILES
    197	000720					  LET $B2DAT+S.NFIL+2 := $B2DAT+S.NFIL+2 + CARRY
    198	000724					  LET $LBN := $LBN + #01	; BUMP BLOCK NUMBER
    199	000732					  LET $LBN+2 := $LBN+2 + CARRY
    200	000736					  LET B.STAT(R4) := #0		; DISCARD THE BUFFER
    201	000742					END LOOP
    202	000752	005726 				TST (SP)+			; CLEAN THE STACK
    203					;
    204					; NOW READ THE INDEX FILE HEADER AND RECORD THE INDEX FILE SIZE
DRDSU	X0021 - READ VOLUME SUM	MACRO M1110  21-AUG-78 19:36  PAGE 4-3


    205					; NOTE THAT $LBN HAS BEEN BUMPED TO THAT OF THE INDEX FILE HEADER.
    206					;
    207	000754					IF #KY.NIP SET.IN $FLAG1	;IF O.P.
    208	000764						LET R4 := #$OXHD
    209	000770					ELSE
    210	000772						LET R4 := #$IXHD
    211	000776					END
    212	000776					$CALL $RDW1B <,,$LBN+2,$LBN,R4> ; READ INDEX FILE HEADER
    213	001012					ON.ERROR THEN ERROR ER.IXH
    214	001016					$CALL $FILSZ <,,,,,R5>		; COMPUTE INDEX FILE SIZE
    215	001022					LET $B2DAT+S.IFSZ := R1		; AND STORE IN SUMMARY
    216	001026					LET $B2DAT+S.IFSZ+2 := R0
    217					;
    218					; SCAN THE STORAGE MAP AND COMPUTE THE NUMBER OF FREE BLOCKS ON THE
    219					; VOLUME.
    220					;
    221	001032					$CALL $RDHDR <,,#0,#2>		; READ THE STORAGE MAP HEADER
    222	001046					ON.ERROR THEN ERROR ER.SMH
    223	001052					$CALL $MPVBN <,,#0,#2,,R5>	; MAP START OF BITMAP
    224	001066					IF #KY.NIP SET.IN $FLAG1	;IF TAPE O.P.
    225	001076						LET R5 := $OUDEV
    226	001102					ELSE
    227	001104						LET R5 := $INDEV		; POINT TO DEVICE TABLE
    228	001110					END
    229	001110					LET V.SBSZ(R5) := R1		; SAVE STORAGE MAP SIZE
    230	001114					LET V.SBLB(R5) := R3		; AND LBN
    231	001120					LET V.SBLB+2(R5) := R2
    232	001124					PUSH R1
    233	001126					FOR (SP) := (SP) DOWNTO #0
    234	001126					  $CALL $RDW1B <,,R2,R3,#$B1HD>	; READ A BITMAP BLOCK
    235	001136					  ON.ERROR THEN ERROR ER.SMB
    236	001142					  LET B.STAT(R4) := #0		; INVALIDATE THE BUFFER WHILE WE HAVE A POINTER
    237	001146					  THRU R0 := #256.		; SCAN THE BLOCK
    238	001152					    LET R4 := (R5)+		; GET NEXT WORD
    239	001154					    THRU R1 := #16.		; SCAN THE WORD
    240	001160					      LET R4 := R4 R.ROTATE 1	; PICK OFF A BIT
    241	001162					      LET $B2DAT+S.USE := $B2DAT+S.USE - CARRY ; AND COUNT IT
    242	001166					      LET $B2DAT+S.USE+2 := $B2DAT+S.USE+2 - CARRY
    243	001172					    END LOOP
    244	001176					  END LOOP
    245	001202					  LET R3 := R3 + #01		; BUMP TO NEXT BLOCK
    246	001206					  LET R2 := R2 + CARRY
    247	001210					END LOOP
    248	001220	005726 				TST (SP)+			; CLEAN THE STACK
    249	001222					LET $IHHD+B.STAT := #0		; RELEASE HEADER BUFFER
    250	001226					$CALL $RDHDR <,,#0,#3>		; READ BAD BLOCK FILE HEADER
    251	001242					$CALL $FILSZ <,,,,,R5>		; COMPUTE FILE SIZE
    252	001246					LET $B2DAT+S.USE := $B2DAT+S.USE - R1 ; DEDUCT FROM SPACE USED
    253	001252					LET $B2DAT+S.USE+2 := $B2DAT+S.USE+2 - CARRY - R0
    254
    255						;1/27/77 2 MINUS SIGNS REPLACED + SIGNS
    256
    257	001262					$CALL $CKSUM <,,,,,#$B2DAT>	; COMPUTE THE BLOCK CHECKSUM
    258
    259	001272					LET R0 := #$B2DAT+512.		; POINT TO END OF SUMMARY DATA
    260	001276					IF #KY.NIP SET.IN $FLAG1	;IF TAPE O.P.
    261	001306						LET R1 := #$OXBF
DRDSU	X0021 - READ VOLUME SUM	MACRO M1110  21-AUG-78 19:36  PAGE 4-4


    262	001312					ELSE
    263	001314						LET R1 := #$IXBF		; AND TO INDEX FILE HEADER
    264	001320					END
    265	001320					LET R3 := #$IHBF		; AND TO HEADER BUFFER
    266	001324					THRU R2 := #256.
    267	001330					  LET (R0)+ := (R1)		; APPEND IT TO SUMMARY DATA
    268	001332					  LET (R3)+ := (R1)+		; ALSO COPY TO HEADER BUFFER
    269	001334					END LOOP
    270
    271	001340					IF #KY.NIP SET.IN $FLAG1	;IF TAPE O.P.
    272	001350						LET R5 := $OUDEV
    273	001354					ELSE
    274	001356						LET R5 := $INDEV		; POINT TO DEVICE TABLE
    275	001362					END
    276	001362					LET V.FRBK(R5) := $CW3 - $B2DAT+S.USE ; COMPUTE FREE SPACE
    277	001376					LET V.FRBK+2(R5) := $CW2 - CARRY - $B2DAT+S.USE+2
    278	001416					RETURN
    279
    280
    281
    282
DRDSU	X0021 - READ VOLUME SUM	MACRO M1110  21-AUG-78 19:36  PAGE 5


    284					;
    285					; REARRANGE THE GEOMETRY INFO IN $LUNBF FROM STARLET CME FORMAT TO
    286					; RSX-11M FORMAT.
    287					;
    288	001420				$CMEFX::
    289	001420	016700 	000006G			MOV 	$LUNBF+G.LUCW+2,R0	; # OF TRACKS & # OF SECTORS TO R0.
    290	001424	010001 				MOV	R0,R1			; SAVE TRACKS INFORMATION..
    291	001426	042700 	177400 			BIC	#^C377,R0		; ISOLATE THE SECTORS INFO.
    292	001432	105001 				CLRB	R1			; ISOLATE THE TRACKS INFO.
    293	001434	000301 				SWAB	R1			; MOV TRACK INFO TO LOW ORDER.
    294	001436	004767 	000000G			CALL	$MUL			; COMPUTE SECTORS PER CYLINDER.
    295	001442	010100 				MOV	R1,R0			; SECTORS PER CYLINDER TO R0.
    296	001444	005002 				CLR	R2			; ALWAYS LT 65K CYLINDERS.
    297	001446	016703 	000010G			MOV	$LUNBF+G.LUCW+4,R3	; NUMBER OF CYLINDERS TO R3.
    298	001452	004767 	000000G			CALL	$DMUL			; COMPUTE BLOCKS PER VOLUME.
    299	001456	005700 				TST	R0			; CHECK VOLUME SIZE
    300	001460	001012 				BNE	20$
    301	001462	020127 	050000 			CMP	R1,#10240.*2		; CHECK FOR RL01
    302	001466	001406 				BEQ	10$			; BRANCH IF YES
    303	001470	020127 	003722 			CMP	R1,#26.*77.		; CHECK FOR FLOPPY
    304	001474	001004 				BNE	20$			; BRANCH IF NOT
    305	001476	012701 	000756 			MOV	#494.,R1		; GET LOGICAL SIZE OF FLOPPY
    306	001502	000401 				BR	20$
    307	001504	006201 			10$:	ASR	R1			; GET LOGICAL SIZE OF RL01
    308	001506	010067 	000000G		20$:	MOV	R0,$CW2			; SAVE NUMBER OF BLOCKS ON
    309	001512	010167 	000000G			MOV	R1,$CW3			; VOLUME FOR LATER USE.
    310	001516					RETURN
    311
    312
    313
    314		000001 				.END
DRDSU	X0021 - READ VOLUME SUM	MACRO M1110  21-AUG-78 19:36  PAGE 5-1
SYMBOL TABLE

A3    = 000002   	E6      000444R  	KY.NIP= ****** GX	S.NFIL= ****** GX	$INDEV= ****** GX
BLKF  = ****** GX	E7      000464R  	LBLS0 = 000032   	S.SNAM= ****** GX	$IXBF = ****** GX
B.STAT= ****** GX	G.LUBA= 000004   	LBLS1 = 000014   	S.USE = ****** GX	$IXHD = ****** GX
B0      000024R  	G.LUBL= 000006   	LBLS2 = 000015   	TYPS0 = 000000   	$I$   = 000001
B1      000252R  	G.LUCW= 000004   	LBLS3 = 000015   	TYPS1 = 000006   	$K$   = 000001
B10     000614R  	G.LUFB= 000003   	LBLS4 = 000003   	TYPS2 = 000006   	$K$L  = 000001
B11     000652R  	G.LULU= 000002   	L0      000106R  	TYPS3 = 000000   	$K$T  = 000006
B12     000654R  	G.LUNA= 000000   	L1      000104R  	TYPS4 = 000000   	$L    = 000017
B13     001126R  	G.LUNU= 000002   	L10     000300R  	V.CLF = ****** GX	$LBN  = ****** GX
B14     001152R  	H.CHK1= 000072   	L11     000300R  	V.DVNM= ****** GX	$LUNBF= ****** GX
B15     001160R  	H.CHK2= 000776   	L12     000562R  	V.DVUN= ****** GX	$L$   = 000000
B16     001330R  	H.DFPR= 000044   	L13     000564R  	V.FRBK= ****** GX	$MPVBN= ****** GX
B2      000270R  	H.DVTY= 000012   	L14     000650R  	V.IBLB= ****** GX	$MUL  = ****** GX
B3      000336R  	H.FIEX= 000055   	L15     000700R  	V.IBSZ= ****** GX	$OFLAG= ****** GX
B4      000360R  	H.FMAX= 000006   	L2      000104R  	V.RVN = ****** GX	$OLAB = ****** GX
B5      000414R  	H.FPRO= 000044   	L20     000772R  	V.SBLB= ****** GX	$OUDEV= ****** GX
B6      000436R  	H.IBLB= 000002   	L21     000776R  	V.SBSZ= ****** GX	$OXBF = ****** GX
B7      000456R  	H.IBSZ= 000000   	L22     001016R  	$BUFCK= ****** GX	$OXHD = ****** GX
ER.IIR= ****** GX	H.INDF= 000760   	L23     001052R  	$BUF2 = ****** GX	$O$   = 000000
ER.IXB= ****** GX	H.INDN= 000730   	L24     001104R  	$B1HD = ****** GX	$R    = 177777
ER.IXH= ****** GX	H.INDO= 000744   	L25     001110R  	$B2DAT= ****** GX	$RDHDR= ****** GX
ER.LEV= ****** GX	H.LRUC= 000056   	L26     001142R  	$B2HD = ****** GX	$RDW1B= ****** GX
ER.NHO= ****** GX	H.NVOL= ****** GX	L27     001314R  	$CBOMG= ****** GX	$SUPMC= 000043
ER.SMB= ****** GX	H.RVN = ****** GX	L3      000104R  	$CKSM1= ****** GX	$T    = 000033
ER.SMH= ****** GX	H.SBCL= 000010   	L30     001320R  	$CKSUM= ****** GX	$T1   = 000000
E0      000154R  	H.SNAM= ****** GX	L31     001356R  	$CMEFX  001420RG 	$T2   = 000032
E1      000262R  	H.VCHA= 000042   	L32     001362R  	$CW2  = ****** GX	$XXX$ = 000001
E10     000752R  	H.VDAT= 000074   	L4      000116R  	$CW3  = ****** GX	$Y$   = 000000
E11     000714R  	H.VLEV= 000014   	L5      000116R  	$DIDDO= 000000   	$Z$   = 000000
E12     000706R  	H.VNAM= 000016   	L6      000146R  	$DMUL = ****** GX	$$S   = 000000
E13     001220R  	H.VOWN= 000036   	L7      000166R  	$DRDSU  000000RG 	$$T   = 000026
E14     001202R  	H.VPRO= 000040   	PF.SUM= ****** GX	$EF$  = 000000   	$$TT  = 000011
E15     001176R  	H.WISZ= 000054   	P.SIZ = ****** GX	$E$   = 000001   	$$$   = 000000R     002
E16     001340R  	IE.VER= ****** GX	S.HFNU= ****** GX	$FILSZ= ****** GX	$$$OST= 000014
E2      000300R  	IIII  = 177777   	S.IBSZ= ****** GX	$FLAG1= ****** GX	.$T   = 000006
E3      000344R  	INLUN = ****** GX	S.IFSZ= ****** GX	$IHBF = ****** GX	...GBL= 000000
E4      000366R  	KY.MRG= ****** GX	S.NAME= ****** GX	$IHHD = ****** GX	...TPC= 001000
E5      000424R

. ABS.	000000	   000
      	001520	   001
$DPB$$	000006	   002
ERRORS DETECTED:  0

VIRTUAL MEMORY USED:  12884 WORDS  ( 51 PAGES)
DYNAMIC MEMORY:  14388 WORDS  ( 55 PAGES)
ELAPSED TIME:  00:06:59
EXE$:DRDSU.OB1,LIS$:DRDSU.LS1/-SP=SRC$:SMAC/PA:1,DSCPRE,DRDSU.OD1
