DSCAL	X0011 - ALLOCATE SYSTEM	MACRO M1110  21-AUG-78 20:21
TABLE OF CONTENTS

    23-   26	MAIN ALLOCATION ROUTINE
    25-  134	GENERAL ALLOCATION ROUTINE
    26-  197	HOME BLOCK ALLOCATION ROUTINE
    27-  247	ALLOCATION CHECK ROUTINE
DSCAL	X0011 - ALLOCATE SYSTEM	MACRO M1110  21-AUG-78 20:21  PAGE 3


      1	000000					$BEGIN	DSCAL,0011,<ALLOCATE SYSTEM FILES ON DISK>
						.TITLE	DSCAL	X0011 - ALLOCATE SYSTEM FILES ON DISK
						.IDENT	"X0011"
      2
      3					;
      4					; COPYRIGHT (C) 1976 BY DIGITAL EQUIPMENT CORPORATION,
      5					; MAYNARD, MASSACHUSETTS
      6					;
      7					; THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR USE ONLY ON A
      8					; SINGLE  COMPUTER  SYSTEM AND MAY BE COPIED ONLY WITH THE IN-
      9					; CLUSION OF THE ABOVE COPYRIGHT NOTICE.   THIS  SOFTWARE,  OR
     10					; ANY  OTHER  COPIES THEREOF, MAY NOT BE PROVIDED OR OTHERWISE
     11					; MADE AVAILABLE TO ANY OTHER PERSON EXCEPT FOR  USE  ON  SUCH
     12					; SYSTEM  AND TO ONE WHO AGREES TO THESE LICENSE TERMS.  TITLE
     13					; TO AND OWNERSHIP OF THE SOFTWARE SHALL AT ALL  TIMES  REMAIN
     14					; IN DIGITAL.
     15					;
     16					; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITH-
     17					; OUT  NOTICE  AND  SHOULD NOT BE CONSTRUED AS A COMMITMENT BY
     18					; DIGITAL EQUIPMENT CORPORATION.
     19					;
     20					; DIGITAL EQUIPMENT CORPORATION ASSUMES NO RESPONSIBILITY  FOR
     21					; THE USE OR RELIABILITY OF ITS SOFTWARE ON EQUIPMENT WHICH IS
     22					; NOT SUPPLIED BY DIGITAL.
     23					;
     24					; ANDREW C. GOLDSTEIN  3-AUG-78  16:31
DSCAL	X0011 - ALLOCATE SYSTEM	MACRO M1110  21-AUG-78 20:21  PAGE 4
MAIN ALLOCATION ROUTINE

     26						.SBTTL	MAIN ALLOCATION ROUTINE
     27
     28					;+
     29					;
     30					; *** - $DSCAL	ALLOCATE SYSTEM FILES ON DISK
     31					;
     32					; THIS ROUTINE ALLOCATES SPACE ON THE VOLUME FOR EACH OF THE
     33					; ELEMENTS OF THE INITIAL FILE-11 STRUCTURE. ALLOCATION IS DONE
     34					; BY CHOOSING A CANDIDATE LOCATION AND THEN CHECKING THE ALLOCATION
     35					; LIST FOR CONFLICTS. IF A CONFLICT EXISTS, A NEW LOCATION IS CHOSEN
     36					; ACCORDING TO AN ALGORITHM SPECIFIC TO THE ITEM BEING ALLOCATED.
     37					;
     38					; ***** NOTE: THIS ROUTINE ASSUMES ORDERING AND ADJACENCY OF THE ITEMS
     39					; ***** IN THE ALLOCATION TABLE (FROM $BOOTB TO $BADBK). CHANGES TO THIS
     40					; ***** ROUTINE AND CHANGES TO THE TABLE MUST BE COORDINATED!
     41					;
     42					; INPUTS:
     43					;
     44					;	BAD BLOCK DATA IN ALLOCATION TABLE
     45					;	VOLUME PARAMETERS FROM SUMMARY BLOCK
     46					;
     47					; OUTPUTS:
     48					;
     49					;	ALLOCATION DATA IN ALLOCATION TABLE
     50					;	ENTRIES IN DEVICE TABLE ENTRY
     51					;
     52					;-
     53
     54	000000				$DSCAL::
     55	000000					LET R4 := #$BOOTB		; POINT TO START OF TABLE
     56					;
     57					; ALLOCATE THE FIRST AVAILABLE CLUSTER AS THE BOOT BLOCK. IF IT IS
     58					; NOT ZERO, ISSUE A MESSAGE THAT THE VOLUME IS NOT BOOTABLE.
     59					;
     60	000004					LET (R4) := $CLF		; ALLOCATE 1 CLUSTER
     61	000010					$CALL ALOC <,,,#0,R4>		; SCAN FORWARD
     62	000020	022424 				CMP (R4)+,(R4)+			; SKIP COUNT
     63	000022					LET R0 := (R4)+ SET.BY (R4)+	; CHECK FOR ZERO
     64	000026					IF RESULT IS NE
     65	000030					  LET $OFLAG := $OFLAG SET.BY #KY.NBO
     66	000036					  ERRP ER.NBO			; ISSUE MESSAGE TO THAT EFFECT
     67	000040					END
     68					;
     69					; ALLOCATE PRIMARY AND SECONDARY HOME BLOCK CLUSTERS. IF CLUSTER FACTOR
     70					; IS GREATER THAN 1 AND THE BOOT BLOCK IS ON 0, THEN PRIMARY HOME BLOCK
     71					; CLUSTER IS REALLY A DUMMY SINCE THE TRUE HOME BLOCK IS LBN 1.
     72					;
     73	000040					LET (R4) := $CLF
     74	000044					IF (R4) HI #1 AND R0 EQ #0
     75	000056					  $CALL ALOCNX <,,,#0,R4>	; ALLOCATE DUMMY CLUSTER
     76	000066					ELSE
     77	000070					  $CALL ALOCHM <,,,,R4>		; ALLOCATE REAL HOME BLOCK
     78	000074					END
DSCAL	X0011 - ALLOCATE SYSTEM	MACRO M1110  21-AUG-78 20:21  PAGE 5
MAIN ALLOCATION ROUTINE

     80					;
     81					; ALLOCATE THE ALTERNATE HOME BLOCK.
     82					;
     83	000074					LET  R4  :=  #$HOME2
     84	000100					LET  (R4)  :=  $CLF		; ALLOCATE ONE CLUSTER.
     85	000104					$CALL  ALOCHM <,,,,R4>
     86					;
     87					; ALLOCATE THE BACKUP COPY OF THE INDEX FILE HEADER.
     88					;
     89	000110					LET  R4  :=  #$IXHD2
     90	000114					LET  (R4)  :=  $CLF
     91	000120					$CALL  ALOCNX <,,,#0,R4>
     92					;
     93					; ALLOCATE THE INITIAL INDEX FILE.
     94					;
     95	000130					LET R4 := R4 + #8.
     96	000134					LET R0 := $CLF			; ROUND ALLOCATION SIZE
     97	000140					LET R2 := R0 - #1		; UP TO NEXT CLUSTER
     98	000144					LET R2 := R2 + $B2DAT+S.IFSZ	; GET INDEX FILE SIZE
     99	000150					LET R1 := $B2DAT+S.IFSZ+2 + CARRY
    100	000156					PUSH  $CLF			; CLUSTER FACTOR TO TEMP.
    101	000162	006316 				ASL  (SP)			; MULTIPLY
    102	000164	006316 				ASL  (SP)			;           BY 4.
    103	000166					LET R2 := R2 - (SP)+		; LESS BOOT AND HOME BLOCKS AND
    104	000170					LET R1 := R1 - CARRY		; BACKUP INDX FILE HDR CLUSTERS.
    105	000172					$CALL $DDIV <R0,R1,R2>
    106	000176					LET R3 := R2
    107	000200					LET R2 := R1
    108	000202					$CALL $DMUL <$CLF,,R2,R3>	; R0,R1 = ADJUSTED SIZE
    109	000212					LET R5 := R4
    110	000214					LET (R5)+ := R1
    111	000216					LET (R5)+ := R0
    112	000220					$CALL ALOCNX <,,,#0,R4>
    113					;
    114					; ALLOCATE STORAGE MAP FILE. IF INDEX FILE POSITION IS MIDDLE OR
    115					; END, ALLOCATE BEFORE INDEX FILE.
    116					;
    117	000230					LET R4 := R4 + #8.
    118	000234					$CALL $DDIV <$CLF,$VOLSZ+2,$VOLSZ> ; COMPUTE # CLUSTERS IN VOLUME
    119	000254					LET R2 := R2 + #8191.		; ROUND UP AND ADD ONE BLOCK
    120	000260					LET R1 := R1 + CARRY
    121	000262					$CALL $DDIV <#4096.,R1,R2>	; COMPUTE NUMBER OF BLOCKS
    122	000272					LET $SBMEF+2 := R2 + #1		; SAVE STORAGE BIT MAP EOF VBN.
    123	000302					LET $SBMEF := R1 + CARRY
    124	000312					LET R2 := R2 + $CLF - #1	; IN BITMAP FILE
    125	000320					$CALL $DDIV <$CLF,R1,R2>	; COMPUTE NUMBER OF CLUSTERS
    126	000330					LET R3 := R2
    127	000332					LET R2 := R1
    128	000334					$CALL $DMUL <$CLF,,R2,R3>	; R0,R1 = BLOCKS ROUNDED UP TO CLUSTER
    129	000344					LET (R4) := R1
    130	000346					LET 2(R4) := R0
    131	000352					$CALL ALOCNX <,,,#0,R4>
    132	000362					RETURN
DSCAL	X0011 - ALLOCATE SYSTEM	MACRO M1110  21-AUG-78 20:21  PAGE 6
GENERAL ALLOCATION ROUTINE

    134						.SBTTL	GENERAL ALLOCATION ROUTINE
    135
    136					;+
    137					;
    138					; *** - ALOC	ALLOCATE SPACE
    139					;
    140					; *** - ALOCNX	ALLOCATE NEXT AVAILABLE SPACE
    141					;
    142					; THIS ROUTINE SEARCHES FOR FREE SPACE FOR THE DESIRED NUMBER OF
    143					; BLOCKS. THE ENTRY "ALOC" STARTS THE SEARCH AT THE LBN GIVEN IN
    144					; THE TABLE ENTRY; THE ENTRY "ALOCNX" STARTS THE SEARCH AT THE
    145					; LBN OF THE PREVIOUSLY ALLOCATED ITEM. THE ROUTINE SEARCHES EITHER
    146					; FORWARDS OR BACKWARDS, AS REQUESTED. THE RESULTING STARTING LBN
    147					; IS LEFT IN THE INDICATED BLOCK POINTER.
    148					;
    149					; INPUTS:
    150					;
    151					;	R3 = 0 TO SEARCH FORWARD
    152					;	  >< 0 TO SEARCH BACKWARDS
    153					;	R4 = ADDRESS OF TABLE ENTRY TO PROCESS
    154					;
    155					; OUTPUTS:
    156					;
    157					;	TABLE ENTRY UPDATED, R4 SAVED
    158					;	ALL OTHER REGISTERS ARE CLOBBERED
    159					;
    160					;-
    161
    162	000364				ALOCNX:
    163	000364					LET 4(R4) := -4(R4)		; COPY LBN OF
    164	000372					LET 6(R4) := -2(R4)		; OF PRECEDING ENTRY
    165
    166	000400				ALOC:
    167	000400					PUSH R3				; SAVE DIRECTION FLAG
    168	000402					REPEAT
    169	000402					  $CALL CKALOC <,,,,R4>		; SEE IF THIS SPACE IS USED
    170	000406					  ON.NOERROR LEAVE LOOP		; IF NOT, DONE
    171	000410					  IF (SP) EQ #0			; SEARCH FORWARD
    172	000414					    LET R3 := R4
    173	000416	022323 				    CMP (R3)+,(R3)+
    174	000420					    LET (R3) := (R5)+		; GET COUNT OF
    175	000422					    LET 2(R3) := (R5)+		; CONFLICTING SEGMENT
    176	000426	062523 				    ADD (R5)+,(R3)+		; AND COMPUTE END LBN
    177	000430	005513 				    ADC (R3)
    178	000432	062513 				    ADD (R5)+,(R3)
    179	000434					    DCOMP (R3),-(R3), $VOLSZ+2,$VOLSZ
    180	000446					    IF RESULT IS HI THEN ERROR ER.ALF	; OFF END OF VOLUME
    181	000452					  ELSE				; OR SEARCH BACKWARD
    182	000454					    LET R3 := R4
    183	000456	022323 				    CMP (R3)+,(R3)+
    184	000460	022525 				    CMP (R5)+,(R5)+
    185	000462					    LET (R3) := (R5)+		; USE STARTING LBN
    186	000464					    LET 2(R3) := (R5)+		; OF CONFLICTING SEGMENT
    187	000470	161423 				    SUB (R4),(R3)+		; AND BACK UP BY DESIRED SIZE
    188	000472	005613 				    SBC (R3)
    189	000474					    IF RESULT IS CS THEN ERROR ER.ALF
    190	000500	166413 	000002 			    SUB 2(R4),(R3)
DSCAL	X0011 - ALLOCATE SYSTEM	MACRO M1110  21-AUG-78 20:21  PAGE 6-1
GENERAL ALLOCATION ROUTINE

    191	000504					    IF RESULT IS CS THEN ERROR ER.ALF	; OFF START OF VOLUME
    192	000510					  END
    193	000510					END <REPEAT LOOP>
    194	000512	005726 				TST (SP)+			; CLEAN THE STACK
    195	000514					RETURN
DSCAL	X0011 - ALLOCATE SYSTEM	MACRO M1110  21-AUG-78 20:21  PAGE 7
HOME BLOCK ALLOCATION ROUTINE

    197						.SBTTL	HOME BLOCK ALLOCATION ROUTINE
    198
    199					;+
    200					;
    201					; *** - ALOCHM	ALLOCATE HOME BLOCK
    202					;
    203					; THIS ROUTINE ALLOCATES THE INDICATED TABLE ENTRY IN THE FIRST
    204					; AVAILABLE CLUSTER IN THE HOME BLOCK SEARCH SEQUENCE. THE STARTING
    205					; POINT FOR THE ALLOCATION SEARCH IS THE LBN OF THE PRECEDING
    206					; ENTRY.
    207					;
    208					; INPUTS:
    209					;
    210					;	R4 = ADDRESS OF TABLE ENTRY TO PROCESS
    211					;
    212					; OUTPUTS:
    213					;
    214					;	UPDATED TABLE ENTRY
    215					;	R4 PRESERVED, ALL OTHER REGISTERS CLOBBERED
    216					;
    217					;-
    218
    219	000516				ALOCHM:
    220	000516					LET R2 := #1			; STARTING LBN OF SEQUENCE
    221	000522					LET R1 := #0
    222	000524					REPEAT
    223	000524					  PUSH R1,R2			; SAVE LBN ON STACK
    224	000530					  $CALL $DDIV <$CLF,R1,R2>	; TRUNCATE TO CLUSTER BOUNDARY
    225	000540					  LET R3 := R2
    226	000542					  LET R2 := R1
    227	000544					  $CALL $DMUL <$CLF,,R2,R3>
    228	000554					  LET 4(R4) := R1
    229	000560					  LET 6(R4) := R0
    230	000564					  $CALL CKALOC <,,,,R4>		; SEE IF THIS SPACE IS FREE
    231	000570					  ON.NOERROR LEAVE LOOP		; IF SO, THEN DONE
    232	000572					  PUSH R4
    233	000574					  $CALL $WRI1B <,,4(SP),2(SP),#$B2HD> ; GARBAGE THE REJECTED HOME
    234	000614					  $CALL $WAITO <,,,,R4>		;  BLOCK TO PREVENT ACCIDENTAL USE
    235	000620					  POP R4
    236	000622					  POP R2,R1			; GET BACK LBN
    237	000626					  LET R2 := R2 + $HBDLT		; TRY NEXT LOCATION.
    238	000632					  LET R1 := R1 + CARRY
    239	000634					  LET R1 := R1 + $HBDLT+2
    240	000640					  DCOMP R1,R2, $VOLSZ+2,$VOLSZ	; CHECK FOR END OF VOLUME
    241	000652					  IF RESULT IS HIS THEN ERROR ER.AHM
    242	000656					END <REPEAT LOOP>
    243	000660					LET $HM2LB := (SP)+		; SAVE LBN OF HOME BLOCK, WHICH WILL
    244	000664					LET $HM2LB+2 := (SP)+		; WILL BE THE SECONDARY WHEN THROUGH
    245	000670					RETURN
DSCAL	X0011 - ALLOCATE SYSTEM	MACRO M1110  21-AUG-78 20:21  PAGE 8
ALLOCATION CHECK ROUTINE

    247						.SBTTL	ALLOCATION CHECK ROUTINE
    248
    249					;+
    250					;
    251					; *** - CKALOC	 CHECK ALLOCATION
    252					;
    253					; THIS ROUTINE CHECKS IF THE INDICATED SECTION OF THE DISK IS
    254					; ALREADY ALLOCATED. IF SO, IT RETURNS A POINTER TO THE CONFLICTING
    255					; SEGMENT.
    256					;
    257					; INPUTS:
    258					;
    259					;	R4 = ADDRESS OF SEGMENT TO BE CHECKED
    260					;
    261					; OUTPUTS:
    262					;
    263					;	C = 0 IF SEGMENT IS NOT ALLOCATED
    264					;	 >< 0 IF SEGMENT IS ALLOCATED AND
    265					;	R5 = ADDRESS OF CONFLICTING SEGMENT
    266					;
    267					;	R4 PRESERVED, ALL OTHER REGISTERS ALTERED
    268					;
    269					; EACH SEGMENT IS DESCRIBED BY A FOUR WORD BLOCK CONTAINING (IN ORDER)
    270					; LOW AND HIGH ORDER COUNT AND LOW AND HIGH ORDER LBN.
    271					;
    272					;-
    273
    274	000672				CKALOC:
    275	000672					FOR.ABS R5 := #$BOOTB TO $BADP BY #8.
    276	000676					  IF R4 NE R5			; DON'T CHECK SEGMENT AGAINST ITSELF
    277	000702					    LET R3 := R5
    278	000704					    LET R1 := (R3)+		; GET BLOCK COUNT OF THIS SEG
    279	000706					    LET R0 := (R3)+
    280	000710					    LET R2 := R0 SET.BY R1
    281	000714					    IF RESULT IS NE		; ZERO COUNT MEANS NON-EXISTENT
    282	000716					      LET R1 := R1 + (R3)+	; COMPUTE END LBN
    283	000720					      LET R0 := R0 + CARRY + (R3)+
    284	000724					      DCOMP R0,R1, 6(R4),4(R4)	; COMPARE END TO BEGINNING
    285	000736					      IF RESULT IS HI
    286	000740						LET R3 := R4
    287	000742						LET R1 := (R3)+		; GET COUNT OF CANDIDATE SEG
    288	000744						LET R0 := (R3)+
    289	000746						LET R1 := R1 + (R3)+	; TO COMPUTE END LBN
    290	000750						LET R0 := R0 + CARRY + (R3)+
    291	000754						DCOMP 6(R5),4(R5), R0,R1 ; COMPARE BEGINNING TO END
    292	000766						IF RESULT IS LO THEN RETURN ERROR
    293	000774					      END
    294	000774					    END
    295	000774					  END
    296	000774					END LOOP
    297	001006					RETURN NOERROR
    298
    299
    300
    301		000001 				.END
DSCAL	X0011 - ALLOCATE SYSTEM	MACRO M1110  21-AUG-78 20:21  PAGE 8-1
SYMBOL TABLE

ALOC    000400R  	LBLS1 = 000011   	L7      000510R  	$EF$  = 000000   	$SBMEF= ****** GX
ALOCHM  000516R  	LBLS2 = 000012   	S.IFSZ= ****** GX	$E$   = 000001   	$SUPMC= 000043
ALOCNX  000364R  	LBLS3 = 000013   	TYPS0 = 000002   	$HBDLT= ****** GX	$T    = 000015
B0      000402R  	LBLS4 = 000014   	TYPS1 = 000000   	$HM2LB= ****** GX	$T1   = 000002
B1      000524R  	L0      000040R  	TYPS2 = 000000   	$HOME2= ****** GX	$T2   = 000002
B2      000676R  	L1      000070R  	TYPS3 = 000000   	$IXHD2= ****** GX	$VOLSZ= ****** GX
CKALOC  000672R  	L10     000656R  	TYPS4 = 000000   	$I$   = 000001   	$WAITO= ****** GX
ER.AHM= ****** GX	L11     000774R  	$BADP = ****** GX	$K$   = 000001   	$WRI1B= ****** GX
ER.ALF= ****** GX	L12     000774R  	$BOOTB= ****** GX	$K$L  = 000001   	$XXX$ = 000001
ER.NBO= ****** GX	L13     000774R  	$B2DAT= ****** GX	$K$T  = 000005   	$Y$   = 000000
E0      000512R  	L14     000774R  	$B2HD = ****** GX	$L    = 000003   	$Z$   = 000000
E1      000660R  	L2      000074R  	$CLF  = ****** GX	$L$   = 000000   	$$S   = 000000
E2      001006R  	L3      000454R  	$DDIV = ****** GX	$OFLAG= ****** GX	$$T   = 000014
IIII  = 177777   	L4      000452R  	$DIDDO= 000000   	$O$   = 000000   	$$TT  = 000010
KY.NBO= ****** GX	L5      000510R  	$DMUL = ****** GX	$R    = 177777   	.$T   = 000005
LBLS0 = 000002   	L6      000500R  	$DSCAL  000000RG

. ABS.	000000	   000
      	001012	   001
ERRORS DETECTED:  0

VIRTUAL MEMORY USED:  11525 WORDS  ( 46 PAGES)
DYNAMIC MEMORY:  13332 WORDS  ( 51 PAGES)
ELAPSED TIME:  00:02:33
EXE$:DSCAL,LIS$:DSCAL/-SP=SRC$:SMAC/PA:1,DSCPRE,DSCAL
