DRDSU	X0021 - READ VOLUME SUM	MACRO M1110  21-AUG-78 20:15  PAGE 3


      1	000000					$BEGIN	DRDSU,0021,<READ VOLUME SUMMARY FOR DISK>
						.TITLE	DRDSU	X0021 - READ VOLUME SUMMARY FOR DISK
						.IDENT	"X0021"
      2
      3					;
      4					; COPYRIGHT (C) 1977 BY DIGITAL EQUIPMENT CORPORATION,
      5					; MAYNARD, MASSACHUSETTS
      6					;
      7					; THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR USE ONLY ON A
      8					; SINGLE  COMPUTER  SYSTEM AND MAY BE COPIED ONLY WITH THE IN-
      9					; CLUSION OF THE ABOVE COPYRIGHT NOTICE.   THIS  SOFTWARE,  OR
     10					; ANY  OTHER  COPIES THEREOF, MAY NOT BE PROVIDED OR OTHERWISE
     11					; MADE AVAILABLE TO ANY OTHER PERSON EXCEPT FOR  USE  ON  SUCH
     12					; SYSTEM  AND TO ONE WHO AGREES TO THESE LICENSE TERMS.  TITLE
     13					; TO AND OWNERSHIP OF THE SOFTWARE SHALL AT ALL  TIMES  REMAIN
     14					; IN DIGITAL.
     15					;
     16					; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITH-
     17					; OUT  NOTICE  AND  SHOULD NOT BE CONSTRUED AS A COMMITMENT BY
     18					; DIGITAL EQUIPMENT CORPORATION.
     19					;
     20					; DIGITAL EQUIPMENT CORPORATION ASSUMES NO RESPONSIBILITY  FOR
     21					; THE USE OR RELIABILITY OF ITS SOFTWARE ON EQUIPMENT WHICH IS
     22					; NOT SUPPLIED BY DIGITAL.
     23					;
     24					; ANDREW C. GOLDSTEIN  3-AUG-78  16:12
     25					; 001 11-MAR-77 G.RITTENBURG PARAMETER MISSING $GLUNC
     26					;  002  11-MAR-77 G.RITTENBURG CONDITIONAL FOR 11D AND IAS INSERTED
     27
     28					;CORRECTED 1/27/77 G.RITTENBURG
     29
     30
     31						.MCALL	GLUN$C,HMBL2$
     32	000000					HMBL2$				; DEFINE HOME BLOCK LAYOUT
DRDSU	X0021 - READ VOLUME SUM	MACRO M1110  21-AUG-78 20:15  PAGE 4


     34					;+
     35					;
     36					; *** - $DRDSU	READ VOLUME SUMMARY, DISK
     37					;
     38					; THIS ROUTINE RUMMAGES ABOUT THE DISK AND CONSTRUCTS THE VOLUME
     39					; SUMMARY BLOCK IN THE I/O BUFFER.
     40					;
     41					; INPUTS:
     42					;
     43					;	INLUN ASSIGNED TO DESIRED DISK UNIT
     44					;
     45					; OUTPUTS:
     46					;
     47					;	SUMMARY BLOCK IN $BUF2
     48					;	INDEX FILE HEADER IN $IXBF AND $IHBF
     49					;	CURRENT ENTRY IN $IVTAB FILLED IN
     50					;
     51					;-
     52
     53	000000				$DRDSU::
     54	000000					GLUN$C	INLUN, $LUNBF		; GET VOLUME SIZE
     55	000006					$CALL	$CMEFX			; REARRANGE GEOMETRY INFO IN LUNBUF.
     56					;
     57					; FIRST SEARCH FOR THE HOME BLOCK
     58					;
     59	000012					$CALL	$DELTA			; COMPUTE HOME BLOCK SEARCH DELTA.
     60	000016					LET R4 := #$B1HD		; USE I/O BUFFER #1
     61	000022					LET R2 := #0			; START WITH LBN 1
     62	000024					LET R3 := #1
     63	000030					REPEAT
     64	000030					  $CALL $RDW1B <,,R2,R3,R4>	; READ A BLOCK
     65	000034					  ON.NOERROR
     66	000036					    $CALL $CKSM1 <,#H.CHK1/2,,,,R5> ; COMPUTE FIRST CHECKSUM
     67	000046					    ON.NOERROR
     68	000050					      $CALL $CKSUM <,,,,,R5>	; COMPUTE SECOND CHECKSUM
     69	000054					      ON.NOERROR		; DO FURTHER CHECKING.
     70	000056						IF H.HBLB(R5) EQ R3 AND H.HBLB+2(R5) EQ R2
     71	000072						  IF H.SBCL(R5) NE #0 AND H.HBVB(R5) NE #0 AND H.AHVB(R5) NE #0
     72	000114						    IF H.IHVB(R5) NE #0 AND H.IBSZ(R5) NE #0 AND H.RSVF(R5) NE #0
     73	000136						      LET R0 := H.IBLB(R5) SET.BY H.IBLB+2(R5)
     74	000146						      IF RESULT IS NE
     75	000150							LET R0 := H.FMAX(R5) SET.BY H.FMAX+2(R5)
     76	000160							IF RESULT IS NE
     77	000162							  LEAVE LOOP	; GOOD HOME BLOCK
     78	000164							END
     79	000164						      END
     80	000164						    END
     81	000164						  END
     82	000164						END
     83	000164					      END
     84	000164					    END
     85	000164					  ELSE				; IF I/O ERROR
     86	000166					    IFB (R4) NE #IE.VER		; RETRY ONLY ON PARITY ERROR
     87						      				;ABOVE LINE CORRECTED 1-14-77 WAS 2(R4)
     88	000174					      ERROR ER.IIR		; REPORT ALL OTHER ERRORS
     89	000176					    END
     90	000176					  END
DRDSU	X0021 - READ VOLUME SUM	MACRO M1110  21-AUG-78 20:15  PAGE 4-1


     91	000176					  LET  R3  :=  R3  +  $HBDLT	; TRY NEXT BLOCK IN SEARCH SEQ.
     92	000202					  LET R2 := R2 + CARRY
     93	000204					  LET  R2  :=  R2  +  $HBDLT+2
     94	000210					  DCOMP R2,R3, $CW2,$CW3	; CHECK AGAINST VOLUME LIMIT
     95	000222					  IF RESULT IS HI THEN ERROR ER.NHO
     96	000226					  LET B.STAT(R4) := #0		; INVALIDATE THE BUFFER
     97	000232					END LOOP
     98	000234					LET $HOMLB := R3		; SAVE HOME BLOCK LBN
     99	000240					LET $HOMLB+2 := R2
DRDSU	X0021 - READ VOLUME SUM	MACRO M1110  21-AUG-78 20:15  PAGE 5


    101					;
    102					; WE HAVE FOUND THE VOLUME'S HOME BLOCK. DO FURTHER VALIDATION
    103					; AND EXTRACT THE RELEVANT DATA.
    104					;
    105	000244					IF H.VLEV(R5) NE #1001 THEN ERROR ER.LEV  ; CHECK STRUCTURE LEVEL
    106	000256					LET R3 := $INDEV		; GET POINTER INTO DEVICE TABLE
    107	000262					LET V.RVN(R3) := H.RVN(R5)	; RELATIVE VOLUME NUMBER
    108	000270					LET V.IBSZ(R3) := H.IBSZ(R5)	; INDEX FILE BITMAP SIZE
    109	000276					LET V.IBLB(R3) := H.IBLB(R5)	; INDEX FILE BITMAP LBN
    110	000304					LET V.IBLB+2(R3) := H.IBLB+2(R5)
    111	000312					LET V.CLF(R3) := H.SBCL(R5)	; CLUSTER FACTOR
    112					;
    113					; DEFAULT THE FILE NAME TO THE VOLUME LABEL IF FORMER IS NULL
    114					;
    115	000320					LET R0 := #$OLAB		; POINT TO FILE NAME
    116	000324					IFB (R0) EQ #0			; IF NULL
    117	000330					  LET R2 := R5 + #H.INDN	; DEFAULT TO VOLUME NAME
    118	000336					  THRU R1 := #12.
    119	000342					    LET (R0)+ :B= (R2)+		; COPY IN FILE NAME
    120	000344					    IF RESULT IS EQ LEAVE LOOP	; NULL IS A TERMINATOR
    121	000346					  END LOOP
    122	000352					  IF R1 GT #0
    123	000356					    LET R0 := R0 - #1		; BACK UP TO NULL
    124	000360					    THRU R1
    125	000360					      LET (R0)+ :B= #40		; PAD WITH BLANKS
    126	000364					    END LOOP
    127	000370					  END
    128	000370					END
    129					;
    130					; INIT THE BUFFER WITH THE SUMMARY BLOCK PREAMBLE AND CLEAR THE REST
    131					; ***** WARNING! THE FOLLOWING CODE ASSUMES THE FORMAT OF THE VOLUME
    132					; ***** SUMMARY BLOCK AS DOCUMENTED IN THE ROOT MODULE.
    133					;
    134	000370					$CALL $BUFCK <,,,,#$B2HD>	; OBTAIN 2ND I/O BUFFER
    135	000400					LET B.STAT(R4) := #1		; MARK BUFFER BUSY
    136	000406					LET R0 := #$BUF2
    137	000412					LET (R0)+ := #512.		; BYTE COUNT IS 512
    138	000416					LET (R0)+ := #PF.SUM		; FLAG AS A SUMMARY BLOCK
    139	000422					THRU R1 := #256.+<P.SIZ/2>-2
    140	000426					  LET (R0)+ := #0		; ZERO THE REST OF THE PREAMBLE AND BLOCK
    141	000430					END LOOP
    142	000434					LET R0 := #$B2DAT+S.NAME	; FIRST CELL IS FILE NAME
    143	000440					LET R2 := #$OLAB		; POINT TO USER FILE NAME
    144	000444					THRU R1 := #12.
    145	000450					  LET (R0)+ :B= (R2)+		; COPY IN FILE NAME
    146	000452					END LOOP
    147
    148	000456					LET (R0)+ := V.DVNM(R3)		; COPY IN DEVICE NAME
    149	000462					LET R1 := V.DVUN(R3)		; GET UNIT NUMBER
    150	000466					$CALL $CBOMG <R0,R1,#0>		; CONVERT TO OCTAL
    151	000476					THRU R1 := #$B2DAT+S.SNAM - R0
    152	000504					  LET (R0)+ :B= #40		; PAD NAME WITH BLANKS
    153	000510					END LOOP
    154
    155	000514					LET R2 := R5 + #H.SNAM		; POINT TO STRUCTURE NAME
    156	000522					THRU R1 := #12.
    157	000526					  LET (R0)+ :B= (R2)+		; COPY STRUCTURE NAME
DRDSU	X0021 - READ VOLUME SUM	MACRO M1110  21-AUG-78 20:15  PAGE 5-1


    158	000530					END LOOP
    159	000534					LET R2 := R5 + #H.INDN		; POINT TO VOLUME NAME
    160	000542					THRU R1 := #12.
    161	000546					  LET (R0)+ :B= (R2)+		; COPY VOLUME NAME
    162	000550					END LOOP
    163
    164	000554					LET (R0)+ := H.RVN(R5)		; STORE RELATIVE VOLUME NUMBER
    165	000560					LET (R0)+ := H.NVOL(R5)		; AND NUMBER OF VOLUMES IN SET
    166	000564					LET (R0)+ := H.SBCL(R5)		; AND CLUSTER FACTOR
    167	000570					LET (R0)+ := $CW3		; VOLUME SIZE
    168	000574					LET (R0)+ := $CW2
    169	000600					LET (R0)+ := $CW3		; INIT SPACE USED TO VOLUME SIZE
    170	000604					LET (R0)+ := $CW2
    171	000610					LET R0 := #$B2DAT+S.IBSZ
    172	000614					LET (R0)+ := H.IBSZ(R5)		; STORE INDEX FILE BITMAP SIZE
    173	000620					LET (R0)+ := H.IBLB(R5)	; STORE INDEX FILE BITMAP LBN
    174	000624					LET (R0)+ := H.IBLB+2(R5)
    175	000630					LET (R0)+ := #BLKF		; TAPE BLOCKING FACTOR
    176	000634					IF #KY.MRG SET.IN $OFLAG	; RECORD MERGE MODE FLAG
    177	000644					  LET (R0)+ := #1
    178	000650					ELSE
    179	000652					  LET (R0)+ := #0
    180	000654					END
    181	000654					LET $B1HD+B.STAT := #0		; INVALIDATE THE HOME BLOCK
DRDSU	X0021 - READ VOLUME SUM	MACRO M1110  21-AUG-78 20:15  PAGE 6


    183					;
    184					; SCAN THE INDEX FILE BITMAP TO DETERMINE THE NUMBER OF FILES AND
    185					; THE HIGHEST FILE NUMBER
    186					;
    187	000660					PUSH V.IBSZ(R3)			; STORE NUMBER OF BLOCKS TO SCAN
    188	000664					LET $LBN := V.IBLB(R3)		; GET STARTING LBN
    189	000672					LET $LBN+2 := V.IBLB+2(R3)
    190	000700					LET R2 := #0			; INIT FILE NUMBER
    191	000702					LET R3 := #0
    192	000704					FOR (SP) := (SP) DOWNTO #0
    193	000704					  PUSH R2,R3
    194	000710					  $CALL $RDW1B <,,$LBN+2,$LBN,#$B1HD> ; READ A BLOCK
    195	000730					  POP R3,R2			; RESTORE FILE NUMBER
    196	000734					  ON.ERROR THEN ERROR ER.IXB
    197	000740					  LET R0 := #0
    198	000742					  REPEAT
    199	000742					    LET R1 := (R5)+		; GET NEXT BITMAP WORD
    200	000744					    REPEAT
    201	000744					      LET R3 := R3 + #01	; BUMP TO NEXT FILE NUMBER
    202	000750					      LET R2 := R2 + CARRY
    203	000752					      LET R1 := R1 R.ROTATE 1	; COUNT A BIT
    204	000754					      IF RESULT IS CS		; IF SET
    205	000756						LET $B2DAT+S.HFNU := R3	; SAVE FILE NUMBER
    206	000762						LET $B2DAT+S.HFNU+2 := R2
    207	000766						LET R0 := R0 + #1	; AND COUNT IT
    208	000770					      END
    209	000770					    UNTIL #17 OFF.IN R3		; REPEAT FOR WORD
    210	000776					  UNTIL #7777 OFF.IN R3		; REPEAT FOR BLOCK
    211	001004					  LET $B2DAT+S.NFIL := $B2DAT+S.NFIL + R0 ; ACCUMULATE # FILES
    212	001010					  LET $B2DAT+S.NFIL+2 := $B2DAT+S.NFIL+2 + CARRY
    213	001014					  LET $LBN := $LBN + #01	; BUMP BLOCK NUMBER
    214	001022					  LET $LBN+2 := $LBN+2 + CARRY
    215	001026					  LET B.STAT(R4) := #0		; DISCARD THE BUFFER
    216	001032					END LOOP
    217	001042	005726 				TST (SP)+			; CLEAN THE STACK
DRDSU	X0021 - READ VOLUME SUM	MACRO M1110  21-AUG-78 20:15  PAGE 7


    219					;
    220					; NOW READ THE INDEX FILE HEADER AND RECORD THE INDEX FILE SIZE
    221					; NOTE THAT $LBN HAS BEEN BUMPED TO THAT OF THE INDEX FILE HEADER.
    222					; WHICH IS STORED CONTIGUOUS WITH THE INDEX FILE BITMAP.
    223					;
    224	001044					IF #KY.NIP  SET.IN  $FLAG1	; IF READING FROM OUTPUT DEVICE.
    225	001054						LET R4 := #$OXHD
    226	001060					ELSE
    227	001062						LET R4 := #$IXHD
    228	001066					END
    229	001066					$CALL $RDW1B <,,$LBN+2,$LBN,R4> ; READ INDEX FILE HEADER
    230	001102					ON.ERROR THEN ERROR ER.IXH
    231	001106					$CALL $FILSZ <,,,,,R5>		; COMPUTE INDEX FILE SIZE
    232	001112					LET $B2DAT+S.IFSZ := R1		; AND STORE IN SUMMARY
    233	001116					LET $B2DAT+S.IFSZ+2 := R0
    234					;
    235					; SCAN THE STORAGE MAP AND COMPUTE THE NUMBER OF FREE BLOCKS ON THE
    236					; VOLUME.
    237					;
    238	001122					$CALL $RDHDR <,,#0,#2>		; READ THE STORAGE MAP HEADER
    239	001136					ON.ERROR THEN ERROR ER.SMH
    240	001142					$CALL $MPVBN <,,#0,#2,,R5>	; MAP START OF BITMAP
    241	001156					IF #KY.NIP SET.IN $FLAG1	; IF READING OUTPUT DEVICE
    242	001166						LET R5 := $OUDEV
    243	001172					ELSE
    244	001174						LET R5 := $INDEV	; POINT TO DEVICE TABLE
    245	001200					END
    246	001200					LET V.SBSZ(R5) := R1		; SAVE STORAGE MAP SIZE
    247	001204					LET V.SBLB(R5) := R3		; AND LBN
    248	001210					LET V.SBLB+2(R5) := R2
    249	001214					PUSH R1
    250	001216					FOR (SP) := (SP) DOWNTO #0	; FOR ALL BLOCKS IN BITMAP.
    251	001216					  $CALL $RDW1B <,,R2,R3,#$B1HD>	; READ A BITMAP BLOCK
    252	001226					  ON.ERROR THEN ERROR ER.SMB
    253	001232					  LET B.STAT(R4) := #0		; INVALIDATE THE BUFFER WHILE WE HAVE A POINTER
    254	001236					  THRU R0 := #256.		; SCAN THE BLOCK
    255	001242					    LET R4 := (R5)+		; GET NEXT WORD
    256	001244					    THRU R1 := #16.		; SCAN THE WORD
    257					;
    258					; DEDUCT FREE CLUSTERS FROM THE BLOCKS IN USE COUNT.
    259					;
    260	001250	006004 				      ROR  R4			; PICK OFF A BIT.
    261	001252					      IF  RESULT  IS  CS	; FREE CLUSTER ?
    262	001254	166767 	000000G	000000C		        SUB  $CLF,$B2DAT+S.USE	; DEDUCT 1 CLUSTER.
    263	001262	005667 	000000C			        SBC  $B2DAT+S.USE+2
    264	001266					      END
    265	001266					    END LOOP
    266	001272					  END LOOP
    267	001276					  LET R3 := R3 + #01		; BUMP TO NEXT BLOCK
    268	001302					  LET R2 := R2 + CARRY
    269	001304					END LOOP
    270	001314	005726 				TST (SP)+			; CLEAN THE STACK
DRDSU	X0021 - READ VOLUME SUM	MACRO M1110  21-AUG-78 20:15  PAGE 8


    272	001316					LET $IHHD+B.STAT := #0		; RELEASE HEADER BUFFER
    273	001322					$CALL $RDHDR <,,#0,#3>		; READ BAD BLOCK FILE HEADER
    274	001336					$CALL $FILSZ <,,,,,R5>		; COMPUTE FILE SIZE
    275	001342					LET $B2DAT+S.USE := $B2DAT+S.USE - R1 ; DEDUCT FROM SPACE USED
    276	001346					LET $B2DAT+S.USE+2 := $B2DAT+S.USE+2 - CARRY - R0
    277
    278						;1/27/77 2 MINUS SIGNS REPLACED + SIGNS
    279
    280	001356					$CALL $CKSUM <,,,,,#$B2DAT>	; COMPUTE THE BLOCK CHECKSUM
    281
    282	001366					LET R0 := #$B2DAT+512.		; POINT TO END OF SUMMARY DATA
    283	001372					IF #KY.NIP SET.IN $FLAG1	; IF READING FROM OUTPUT DEVICE
    284	001402						LET R1 := #$OXBF
    285	001406					ELSE
    286	001410						LET R1 := #$IXBF	; AND TO INDEX FILE HEADER
    287	001414					END
    288	001414					LET R3 := #$IHBF		; AND TO HEADER BUFFER
    289	001420					THRU R2 := #256.
    290	001424					  LET (R0)+ := (R1)		; APPEND IT TO SUMMARY DATA
    291	001426					  LET (R3)+ := (R1)+		; ALSO COPY TO HEADER BUFFER
    292	001430					END LOOP
    293
    294	001434					IF #KY.NIP SET.IN $FLAG1	; IF TAPE O.P.
    295	001444						LET R5 := $OUDEV
    296	001450					ELSE
    297	001452						LET R5 := $INDEV	; POINT TO DEVICE TABLE
    298	001456					END
    299	001456					LET V.FRBK(R5) := $CW3 - $B2DAT+S.USE ; COMPUTE FREE SPACE
    300	001472					LET V.FRBK+2(R5) := $CW2 - CARRY - $B2DAT+S.USE+2
    301	001512					RETURN
    302
    303
    304
    305
DRDSU	X0021 - READ VOLUME SUM	MACRO M1110  21-AUG-78 20:15  PAGE 9


    307					;
    308					; COMPUTE THE DEVICE DEPENDENT HOME BLOCK SEARCH/PLACEMENT OFFSET.
    309					;
    310	001514				$DELTA::
    311	001514	012767 	000001 	000000G		MOV  #1,$HBDLT			; INITIALIZE DELTA.
    312	001522	005067 	000002G			CLR  $HBDLT+2
    313	001526					IF $CW2 EQ #0 AND $CW3 EQ #494. THEN GOTO DEND
    314	001546					IF  $CYL  HI  #1  AND  $TRAK  HI  #1  ; MULTI CYL AND MULTI TRACK ?
    315	001566	066767 	000000G	000000G		  ADD  $TRAK,$HBDLT		; INCR BY TRACKS PER CYLINDER.
    316	001574					END
    317	001574					IF  $SECT  HI  #1		; MULTIPLE SECTORS PER TRACK ?
    318	001604					  IF  $CYL  HI  #1  OR  $TRAK  HI  #1  ; MULTI CYLINDER OR MULTI TRACK ?
    319	001624					    $CALL  $MUL  <$SECT,$HBDLT>	; SECT PER TRACK * TRACKS PER CYLINDER.
    320	001640	062701 	000001 			    ADD  #1,R1
    321	001644	005500 				    ADC  R0
    322	001646					    IF $CW2 EQ #0 AND $CW3 EQ #10240.
    323	001664	006201 				      ASR R1
    324	001666					    END
    325	001666	010167 	000000G			    MOV  R1,$HBDLT		; SAVE DELTA.
    326	001672	010067 	000002G			    MOV  R0,$HBDLT+2
    327	001676					  END
    328	001676					END
    329	001676				DEND:	RETURN
    330
    331
    332					;
    333					; REARRANGE THE GEOMETRY INFO IN $LUNBF FROM STARLET CME FORMAT TO
    334					; RSX-11M FORMAT. ALSO, SET UP $CYL, $TRAK AND $SECT.
    335					;
    336	001700				$CMEFX::
    337	001700	016700 	000006G			MOV 	$LUNBF+G.LUCW+2,R0	; # OF TRACKS & # OF SECTORS TO R0.
    338	001704	010001 				MOV	R0,R1			; SAVE TRACKS INFORMATION..
    339	001706	042700 	177400 			BIC	#^C377,R0		; ISOLATE THE SECTORS INFO.
    340	001712	010067 	000000G			MOV	R0,$SECT		; SAVE SECTORS PER TRACK INFO.
    341	001716	105001 				CLRB	R1			; ISOLATE THE TRACKS INFO.
    342	001720	000301 				SWAB	R1			; MOV TRACK INFO TO LOW ORDER.
    343	001722	010167 	000000G			MOV	R1,$TRAK		; SAVE TRACKS PER CYLINDER INFO.
    344	001726	004767 	000000G			CALL	$MUL			; COMPUTE SECTORS PER CYLINDER.
    345	001732	010100 				MOV	R1,R0			; SECTORS PER CYLINDER TO R0.
    346	001734	005002 				CLR	R2			; ALWAYS LT 65K CYLINDERS.
    347	001736	016703 	000010G			MOV	$LUNBF+G.LUCW+4,R3	; NUMBER OF CYLINDERS TO R3.
    348	001742	010367 	000000G			MOV	R3,$CYL			; SAVE NUMBER OF CYLINDERS INFO.
    349	001746	004767 	000000G			CALL	$DMUL			; COMPUTE BLOCKS PER VOLUME.
    350	001752	005700 				TST	R0			; CHECK VOLUME SIZE
    351	001754	001012 				BNE	20$
    352	001756	020127 	050000 			CMP	R1,#10240.*2		; CHECK FOR RL01
    353	001762	001406 				BEQ	10$			; BRANCH IF YES
    354	001764	020127 	003722 			CMP	R1,#26.*77.		; CHECK FOR FLOPPY
    355	001770	001004 				BNE	20$			; BRANCH IF NOT
    356	001772	012701 	000756 			MOV	#494.,R1		; GET LOGICAL SIZE OF FLOPPY
    357	001776	000401 				BR	20$
    358	002000	006201 			10$:	ASR	R1			; GET LOGICAL SIZE OF RL01
    359	002002	010067 	000000G		20$:	MOV	R0,$CW2			; SAVE NUMBER OF BLOCKS ON
    360	002006	010167 	000000G			MOV	R1,$CW3			; VOLUME FOR LATER USE.
    361	002012					RETURN
    362
    363
DRDSU	X0021 - READ VOLUME SUM	MACRO M1110  21-AUG-78 20:15  PAGE 9-1


    364
    365		000001 				.END
DRDSU	X0021 - READ VOLUME SUM	MACRO M1110  21-AUG-78 20:15  PAGE 9-2
SYMBOL TABLE

A3    = 000002   	G.LULU= 000002   	LBLS4 = 000003   	S.IFSZ= ****** GX	$HBDLT= ****** GX
BLKF  = ****** GX	G.LUNA= 000000   	LBLS5 = 000004   	S.NAME= ****** GX	$HOMLB= ****** GX
B.STAT= ****** GX	G.LUNU= 000002   	LBLS6 = 000005   	S.NFIL= ****** GX	$IHBF = ****** GX
B0      000030R  	H.AHLB= 000004   	LBLS7 = 000006   	S.SNAM= ****** GX	$IHHD = ****** GX
B1      000342R  	H.AHVB= 000022   	L0      000166R  	S.USE = ****** GX	$INDEV= ****** GX
B10     000704R  	H.CHK1= 000072   	L1      000164R  	TYPS0 = 000000   	$IXBF = ****** GX
B11     000742R  	H.CHK2= 000776   	L10     000176R  	TYPS1 = 000000   	$IXHD = ****** GX
B12     000744R  	H.DFPR= 000066   	L11     000176R  	TYPS10= 000000   	$I$   = 000001
B13     001216R  	H.DRPR= 000070   	L12     000226R  	TYPS2 = 000000   	$K$   = 000001
B14     001242R  	H.DVTY= 000044   	L13     000256R  	TYPS3 = 000000   	$K$L  = 000001
B15     001250R  	H.FIEX= 000106   	L14     000370R  	TYPS4 = 000000   	$K$T  = 000006
B16     001424R  	H.FMAX= 000034   	L15     000370R  	TYPS5 = 000000   	$L    = 000017
B2      000360R  	H.HBLB= 000000   	L16     000652R  	TYPS6 = 000000   	$LBN  = ****** GX
B3      000426R  	H.HBVB= 000020   	L17     000654R  	TYPS7 = 000000   	$LUNBF= ****** GX
B4      000450R  	H.IBLB= 000030   	L2      000164R  	V.CLF = ****** GX	$L$   = 000000
B5      000504R  	H.IBSZ= 000040   	L20     000740R  	V.DVNM= ****** GX	$MPVBN= ****** GX
B6      000526R  	H.IBVB= 000026   	L21     000770R  	V.DVUN= ****** GX	$MUL  = ****** GX
B7      000546R  	H.IHLB= 000010   	L24     001062R  	V.FRBK= ****** GX	$OFLAG= ****** GX
DEND    001676R  	H.IHVB= 000024   	L25     001066R  	V.IBLB= ****** GX	$OLAB = ****** GX
ER.IIR= ****** GX	H.INDF= 000760   	L26     001106R  	V.IBSZ= ****** GX	$OUDEV= ****** GX
ER.IXB= ****** GX	H.INDN= 000730   	L27     001142R  	V.RVN = ****** GX	$OXBF = ****** GX
ER.IXH= ****** GX	H.INDO= 000744   	L3      000164R  	V.SBLB= ****** GX	$OXHD = ****** GX
ER.LEV= ****** GX	H.LRUC= 000105   	L30     001174R  	V.SBSZ= ****** GX	$O$   = 000000
ER.NHO= ****** GX	H.NVOL= 000050   	L31     001200R  	$BUFCK= ****** GX	$R    = 177777
ER.SMB= ****** GX	H.RSVF= 000042   	L32     001232R  	$BUF2 = ****** GX	$RDHDR= ****** GX
ER.SMH= ****** GX	H.RVN = 000046   	L33     001266R  	$B1HD = ****** GX	$RDW1B= ****** GX
E0      000234R  	H.SBCL= 000016   	L34     001410R  	$B2DAT= ****** GX	$SECT = ****** GX
E1      000352R  	H.SNAM= 000714   	L35     001414R  	$B2HD = ****** GX	$SUPMC= 000043
E10     001042R  	H.VCHA= 000052   	L36     001452R  	$CBOMG= ****** GX	$SV$  = 000000
E11     001004R  	H.VDAT= 000074   	L37     001456R  	$CKSM1= ****** GX	$T    = 000046
E12     000776R  	H.VLEV= 000014   	L4      000164R  	$CKSUM= ****** GX	$TRAK = ****** GX
E13     001314R  	H.VOWN= 000054   	L40     001546R  	$CLF  = ****** GX	$T1   = 000000
E14     001276R  	H.VPRO= 000064   	L41     001574R  	$CMEFX  001700RG 	$T2   = 000042
E15     001272R  	H.VSMX= 000060   	L42     001676R  	$CW2  = ****** GX	$XXX$ = 000001
E16     001434R  	H.WISZ= 000104   	L43     001624R  	$CW3  = ****** GX	$Y$   = 000000
E2      000370R  	IE.VER= ****** GX	L44     001676R  	$CYL  = ****** GX	$Z$   = 000000
E3      000434R  	IIII  = 177777   	L45     001666R  	$DELTA  001514RG 	$$S   = 000000
E4      000456R  	INLUN = ****** GX	L5      000164R  	$DIDDO= 000000   	$$T   = 000043
E5      000514R  	KY.MRG= ****** GX	L6      000164R  	$DMUL = ****** GX	$$TT  = 000044
E6      000534R  	KY.NIP= ****** GX	L7      000164R  	$DRDSU  000000RG 	$$$   = 000000R     002
E7      000554R  	LBLS0 = 000042   	PF.SUM= ****** GX	$EF$  = 000000   	$$$OST= 000014
G.LUBA= 000004   	LBLS1 = 000044   	P.SIZ = ****** GX	$E$   = 000001   	.$T   = 000002
G.LUBL= 000006   	LBLS10= 000007   	S.HFNU= ****** GX	$FILSZ= ****** GX	...GBL= 000000
G.LUCW= 000004   	LBLS2 = 000045   	S.IBSZ= ****** GX	$FLAG1= ****** GX	...TPC= 001000
G.LUFB= 000003   	LBLS3 = 000033

. ABS.	000000	   000
      	002014	   001
$DPB$$	000006	   002
ERRORS DETECTED:  0

VIRTUAL MEMORY USED:  13146 WORDS  ( 52 PAGES)
DYNAMIC MEMORY:  14388 WORDS  ( 55 PAGES)
ELAPSED TIME:  00:05:32
EXE$:DRDSU,LIS$:DRDSU/-SP=SRC$:SMAC/PA:1,DSCPRE,DRDSU
