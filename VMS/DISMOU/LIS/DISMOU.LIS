
; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 1
; Digital Equipment Corporation
;
;	0001	MODULE DISMOU (
;	0002			MAIN = DISMNT_COMMAND,
;	0003			LANGUAGE (BLISS32),
;	0004			IDENT = 'X0008'
;	0005			) =
;	0006	BEGIN
;	0007	
;	0008	!
;	0009	! Copyright (c) 1977
;	0010	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0011	!
;	0012	! This software is furnished  under a license for use only on a single
;	0013	! computer  system and  may be  copied only with  the inclusion of the
;	0014	! above copyright notice.  This software, or any other copies thereof,
;	0015	! may not be provided or  otherwise made available to any other person
;	0016	! except for use on such system and to one who agrees to these license
;	0017	! terms.  Title to and  ownership of the  software  shall at all times
;	0018	! remain in DEC.
;	0019	!
;	0020	! The information in this software is subject to change without notice
;	0021	! and should  not be construed  as a commitment  by Digital  Equipment
;	0022	! Corporation.
;	0023	!
;	0024	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0025	! software on equipment which is not supplied by DEC.
;	0026	
;	0027	!++
;	0028	!
;	0029	! FACILITY:  DISMOUNT Utility Structure Level 1
;	0030	!
;	0031	! ABSTRACT:
;	0032	!
;	0033	!	This is the main routine of the DISMOUNT command.
;	0034	!
;	0035	! ENVIRONMENT:
;	0036	!
;	0037	!	STARLET operating system, including privileged system services
;	0038	!	and internal exec routines.
;	0039	!
;	0040	!--
;	0041	!
;	0042	!
;	0043	! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  28-Oct-1977  14:12
;	0044	!
;	0045	! REVISION HISTORY:
;	0046	!
;	0047	!   Andrew C. Goldstein, 13-Nov-1977  16:13
;	0048	!   X0002 - Check for dismount of system device
;	0049	!
;	0050	!   D. H. Gillespie, 5-Dec-1977  17:25
;	0051	!   X0003 - PUT NAMEBUF_LEN IN MOUDEF.B32
;	0052	!
;	0053	!   Andrew C. Goldstein, 13-Feb-1978  22:01
;	0054	!   X0004 - Change $GTCHAN call to $GETCHN
;	0055	!

; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 1-1
; Digital Equipment Corporation
;
;	0056	!   Andrew C. Goldstein, 17-Feb-1978  15:02
;	0057	!   X0005 - Use new bug check
;	0058	!
;	0059	!   Andrew C. Goldstein, 16-May-78  16:06
;	0060	!   X0006 - Add /UNLOAD qualifier, allow /GROUP to be dismounted by SYS
;	0061	!
;	0062	!   D. H. Gillespie, 18-May-78  17:05
;	0063	!   X0007 - allow user to name secondary mag tape in DISMOUNT
;	0064	!
;	0065	!   Andrew C. Goldstein, 14-Jun-78  17:09
;	0066	!   X0008 - Move unload processing into system routine
;	0067	!
;	0068	!**
;	0069	
;	0070	
;	0071	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0072	REQUIRE 'SRCD$:[MOUNT.SRC]MOUDEF.B32';
;	0379	REQUIRE 'LIBD$:[VMSLIB.OBJ]MOUNTMSG.B32';
;	0479	
;	0480	
;	0481	FORWARD ROUTINE
;	0482		DISMNT_COMMAND,			! main program
;	0483		MAKE_DISMOUNT,			! kernel mode routine
;	0484		SEARCH_MOUNT,			! find MTL entry
;	0485		MAIN_HANDLER	: NOVALUE,	! main condition handler
;	0486		KERNEL_HANDLER	: NOVALUE;	! kernel mode condition handler

; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 2
; Digital Equipment Corporation
;
;	0487	!+
;	0488	!
;	0489	! Own storage for general use in the DISMOUNT utility
;	0490	!
;	0491	!-
;	0492	
;	0493	GLOBAL LITERAL
;	0494		DEVCHAR_LEN	= 32;		! length of device characteristics buffer
;	0495	
;	0496	GLOBAL
;	0497		CLEANUP_FLAGS	: BITVECTOR [32], ! error cleanup status flags
;	0498		CHANNEL,			! channel number for I/O
;	0499		PHYS_NAME	: VECTOR [2],	! descriptor of physical device name
;	0500		NAME_BUFFER	: VECTOR [NAMEBUF_LEN, BYTE],
;	0501						! string buffer for physical device name
;	0502		DEVICE_CHAR	: BBLOCK [DEVCHAR_LEN],
;	0503						! buffer for device characteristics
;	0504		USER_STATUS	: VECTOR [2];	! status return for various routines
;	0505	
;	0506	OWN
;	0507		DEVCHAR_DESC	: VECTOR [2] INITIAL (DEVCHAR_LEN, DEVICE_CHAR),
;	0508						! descriptor for device characteristics
;	0509		SYSEXV		: VECTOR [2];	! place to save kernel exception handlers

; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 3
; Digital Equipment Corporation
;
;	0510	GLOBAL ROUTINE DISMNT_COMMAND (START_ADDRESS, CLI_CALLBACK) =
;	0511	
;	0512	!++
;	0513	!
;	0514	! FUNCTIONAL DESCRIPTION:
;	0515	!
;	0516	!	This is the main routine of the DISMOUNT command.
;	0517	!
;	0518	! CALLING SEQUENCE:
;	0519	!	MOUNT_COMMAND (ARG1, ARG2)
;	0520	!
;	0521	! INPUT PARAMETERS:
;	0522	!	ARG1: program start address
;	0523	!	ARG2: CLI service callback address
;	0524	!
;	0525	! IMPLICIT INPUTS:
;	0526	!	NONE
;	0527	!
;	0528	! OUTPUT PARAMETERS:
;	0529	!	NONE
;	0530	!
;	0531	! IMPLICIT OUTPUTS:
;	0532	!	NONE
;	0533	!
;	0534	! ROUTINE VALUE:
;	0535	!	assorted status values
;	0536	!
;	0537	! SIDE EFFECTS:
;	0538	!	volume(s) dismounted, device data base updated
;	0539	!
;	0540	!--
;	0541	
;	0542	BEGIN
;	0543	
;	0544	LOCAL
;	0545		STATUS;				! system service status
;	0546	
;	0547	EXTERNAL
;	0548		DEVICE_STRING	: VECTOR;	! device name string descriptor
;	0549	
;	0550	EXTERNAL ROUTINE
;	0551		DISMOUNT_PARSE,			! command line parser
;	0552		TRAN_LOGNAME;			! translate logical name
;	0553	
;	0554	
;	0555	! Enable the condition handler. Then parse the command line. Errors are
;	0556	! signalled.
;	0557	!
;	0558	
;	0559	ENABLE MAIN_HANDLER;
;	0560	
;	0561	CHANNEL = 0;
;	0562	
;	0563	DISMOUNT_PARSE (.CLI_CALLBACK);
;	0564	

; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 3-1
; Digital Equipment Corporation
;
;	0565	! Translate the logical name and then assign a channel to the device.
;	0566	!
;	0567	
;	0568	PHYS_NAME[0] = NAMEBUF_LEN;
;	0569	PHYS_NAME[1] = NAME_BUFFER;
;	0570	TRAN_LOGNAME (DEVICE_STRING[0], PHYS_NAME[0]);
;	0571	STATUS = $ASSIGN (CHAN = CHANNEL, DEVNAM = PHYS_NAME[0]);
;	0572	IF NOT .STATUS THEN ERR_EXIT (.STATUS);
;	0573	
;	0574	! Get the device characteristics and make sure it can be dismounted at all.
;	0575	!
;	0576	
;	0577	$GETCHN (CHAN = .CHANNEL, PRIBUF = DEVCHAR_DESC);
;	0578	
;	0579	IF NOT .DEVICE_CHAR[DEV$V_FOD]
;	0580	THEN ERR_EXIT (SS$_NOTFILEDEV);
;	0581	
;	0582	IF NOT .DEVICE_CHAR[DEV$V_AVL]
;	0583	THEN ERR_EXIT (SS$_DEVOFFLINE);
;	0584	
;	0585	IF NOT .DEVICE_CHAR[DEV$V_MNT] OR .DEVICE_CHAR[DEV$V_DMT]
;	0586	THEN ERR_EXIT (SS$_DEVNOTMOUNT);
;	0587	
;	0588	! The rest of the dismount operation must be done in kernel mode.
;	0589	!
;	0590	
;	0591	STATUS = KERNEL_CALL (MAKE_DISMOUNT);
;	0592	IF NOT .STATUS THEN ERR_EXIT (.STATUS);
;	0593	
;	0594	$DASSGN (CHAN = .CHANNEL);
;	0595	
;	0596	RETURN 1;
;	0597	
;	0598	END;					! end of routine DISMNT_COMMAND


							    .TITLE  DISMOU
							    .IDENT  \X0008\

							    .PSECT  $OWN$,NOEXE,2

					      00000 DEVCHAR_DESC:
							    .LONG   32							      ;
					      00004 	    .ADDRESS  DEVICE_CHAR					      ;
					      00008 SYSEXV: .BLKB   8

							    .PSECT  $GLOBAL$,NOEXE,2

					      00000 CLEANUP_FLAGS::
							    .BLKB   4
					      00004 CHANNEL::
							    .BLKB   4
					      00008 PHYS_NAME::
							    .BLKB   8
					      00010 NAME_BUFFER::

; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 3-2
; Digital Equipment Corporation
;
							    .BLKB   32
					      00030 DEVICE_CHAR::
							    .BLKB   32
					      00050 USER_STATUS::
							    .BLKB   8

						    DEVCHAR_LEN==	32
							    .GLOBL  DEVICE_STRING, DISMOUNT_PARSE, TRAN_LOGNAME, SYS$ASSIGN
							    .GLOBL  SYS$GETCHN, SYS$CMKRNL, SYS$DASSGN

							    .PSECT  $CODE$,NOWRT,2

					 0C04 00000 	    .ENTRY  DISMNT_COMMAND, Save R2,R10,R11			      ; 0510
		         5A 00000000G  00  9E 00002 	    MOVAB   LIB$STOP, R10					      ;
		         5B	0000'  CF  9E 00009 	    MOVAB   CHANNEL, R11					      ;
		         6D 0000009B   EF  DE 0000E 	    MOVAL   7$, (FP)						      ; 0542
				       6B  D4 00015 	    CLRL    CHANNEL						      ; 0561
				  08   AC  DD 00017 	    PUSHL   CLI_CALLBACK					      ; 0563
		  0000G  CF	       01  FB 0001A 	    CALLS   #1, DISMOUNT_PARSE					      ;
		    04   AB	       20  D0 0001F 	    MOVL    #32, PHYS_NAME					      ; 0568
		    08   AB	  0C   AB  9E 00023 	    MOVAB   NAME_BUFFER, PHYS_NAME+4				      ; 0569
				  04   AB  9F 00028 	    PUSHAB  PHYS_NAME						      ; 0570
				0000G  CF  9F 0002B 	    PUSHAB  DEVICE_STRING					      ;
		  0000G  CF	       02  FB 0002F 	    CALLS   #2, TRAN_LOGNAME					      ;
				       7E  7C 00034 	    CLRQ    -(SP)						      ; 0571
				       5B  DD 00036 	    PUSHL   R11							      ;
				  04   AB  9F 00038 	    PUSHAB  PHYS_NAME						      ;
	      00000000G  9F	       04  FB 0003B 	    CALLS   #4, @#SYS$ASSIGN					      ;
		         52	       50  D0 00042 	    MOVL    R0, STATUS						      ;
		         05	       52  E8 00045 	    BLBS    STATUS, 1$						      ; 0572
				       52  DD 00048 	    PUSHL   STATUS						      ;
		         6A	       01  FB 0004A 	    CALLS   #1, LIB$STOP					      ;
				       7E  7C 0004D 1$:     CLRQ    -(SP)						      ; 0577
				0000'  CF  9F 0004F 	    PUSHAB  DEVCHAR_DESC					      ;
				       7E  D4 00053 	    CLRL    -(SP)						      ;
				       6B  DD 00055 	    PUSHL   CHANNEL						      ;
	      00000000G  9F	       05  FB 00057 	    CALLS   #5, @#SYS$GETCHN					      ;
	   08	    2D   AB	       06  E0 0005E 	    BBS     #6, DEVICE_CHAR+1, 2$				      ; 0579
		         7E	01CC   8F  3C 00063 	    MOVZWL  #460, -(SP)						      ; 0580
		         6A	       01  FB 00068 	    CALLS   #1, LIB$STOP					      ;
	   07	    2E   AB	       02  E0 0006B 2$:     BBS     #2, DEVICE_CHAR+2, 3$				      ; 0582
		         7E	  84   8F  9A 00070 	    MOVZBL  #132, -(SP)						      ; 0583
		         6A	       01  FB 00074 	    CALLS   #1, LIB$STOP					      ;
	   05	    2E   AB	       03  E1 00077 3$:     BBC     #3, DEVICE_CHAR+2, 4$				      ; 0585
	   07	    2E   AB	       05  E1 0007C 	    BBC     #5, DEVICE_CHAR+2, 5$				      ;
		         7E	  7C   8F  9A 00081 4$:     MOVZBL  #124, -(SP)						      ; 0586
		         6A	       01  FB 00085 	    CALLS   #1, LIB$STOP					      ;
				       7E  D4 00088 5$:     CLRL    -(SP)						      ; 0591
				       5E  DD 0008A 	    PUSHL   SP							      ;
				0000V  CF  9F 0008C 	    PUSHAB  MAKE_DISMOUNT					      ;
	      00000000G  9F	       03  FB 00090 	    CALLS   #3, @#SYS$CMKRNL					      ;
		         52	       50  D0 00097 	    MOVL    R0, STATUS						      ;
		         05	       52  E8 0009A 	    BLBS    STATUS, 6$						      ; 0592
				       52  DD 0009D 	    PUSHL   STATUS						      ;
		         6A	       01  FB 0009F 	    CALLS   #1, LIB$STOP					      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 3-3
; Digital Equipment Corporation
;
				       6B  DD 000A2 6$:     PUSHL   CHANNEL						      ; 0594
	      00000000G  9F	       01  FB 000A4 	    CALLS   #1, @#SYS$DASSGN					      ;
		         50	       01  D0 000AB 	    MOVL    #1, R0						      ; 0596
					   04 000AE 	    RET     							      ; 0510
					 0000 000AF 7$:     .WORD   Save nothing					      ; 0542
				       7E  D4 000B1 	    CLRL    -(SP)						      ;
				       5E  DD 000B3 	    PUSHL   SP							      ;
		         7E	  04   AC  7D 000B5 	    MOVQ    4(AP), -(SP)					      ;
		  0000V  CF	       03  FB 000B9 	    CALLS   #3, MAIN_HANDLER					      ;
					   04 000BE 	    RET     							      ;

; Routine Size:  191 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 4
; Digital Equipment Corporation
;
;	0599	GLOBAL ROUTINE MAKE_DISMOUNT =
;	0600	
;	0601	!++
;	0602	!
;	0603	! FUNCTIONAL DESCRIPTION:
;	0604	!
;	0605	!	This routine does the kernel mode validation and initial setup
;	0606	!	of the dismount operation.
;	0607	!
;	0608	!
;	0609	! CALLING SEQUENCE:
;	0610	!	MAKE_DISMOUNT ()
;	0611	!
;	0612	! INPUT PARAMETERS:
;	0613	!	NONE
;	0614	!
;	0615	! IMPLICIT INPUTS:
;	0616	!	own storage of this module
;	0617	!
;	0618	! OUTPUT PARAMETERS:
;	0619	!	NONE
;	0620	!
;	0621	! IMPLICIT OUTPUTS:
;	0622	!	NONE
;	0623	!
;	0624	! ROUTINE VALUE:
;	0625	!	1 if successful, various statuses if not
;	0626	!
;	0627	! SIDE EFFECTS:
;	0628	!	volume dismounted, logical name and MTL entry deleted
;	0629	!
;	0630	!--
;	0631	
;	0632	BEGIN
;	0633	
;	0634	BUILTIN
;	0635		REMQUE;
;	0636	
;	0637	LINKAGE
;	0638		IOC_DISMOUNT	= JSB (REGISTER = 6, REGISTER = 3, REGISTER = 4) :
;	0639				NOPRESERVE (2);
;	0640	
;	0641	LOCAL
;	0642		UCB		: REF BBLOCK,	! UCB of device
;	0643		VCB		: REF BBLOCK,	! VCB of device
;	0644		MTL		: REF BBLOCK,	! address of found MTL entry
;	0645		PRIVILEGE_MASK	: REF BBLOCK;	! address of process privilege mask
;	0646	
;	0647	EXTERNAL
;	0648		DISM_OPTIONS	: BITVECTOR,	! parser option flags
;	0649		SCH$GL_CURPCB	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE),
;	0650						! address of our PCB
;	0651		CTL$GL_PHD	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE),
;	0652						! address of our process header
;	0653		EXE$GL_SYSUCB	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE),

; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 4-1
; Digital Equipment Corporation
;
;	0654						! address of system device UCB
;	0655		CTL$GQ_MOUNTLST	: VECTOR ADDRESSING_MODE (ABSOLUTE),
;	0656						! process mounted volume listhead
;	0657		IOC$GQ_MOUNTLST	: VECTOR ADDRESSING_MODE (ABSOLUTE);
;	0658						! system mounted volume listhead
;	0659	
;	0660	EXTERNAL ROUTINE
;	0661		GET_CHANNELUCB,			! get UCB address of channel
;	0662		IOC$DISMOUNT	: IOC_DISMOUNT ADDRESSING_MODE (GENERAL);
;	0663						! system dismount routine
;	0664	
;	0665	
;	0666	! Disable the kernel mode exception vectors and declare our own exception
;	0667	! handler.
;	0668	!
;	0669	
;	0670	ENABLE KERNEL_HANDLER;
;	0671	$SETEXV (VECTOR = 0, PRVHND = SYSEXV[0]);
;	0672	$SETEXV (VECTOR = 1, PRVHND = SYSEXV[1]);
;	0673	
;	0674	! ***** For debug: If the previous handler addresses are found to be in
;	0675	! process space, put them back since they belong to the debugger.
;	0676	!
;	0677	
;	0678	IF .SYSEXV[0] GTR 0
;	0679	THEN $SETEXV (VECTOR = 0, ADDRES = .SYSEXV[0]);
;	0680	IF .SYSEXV[1] GTR 0
;	0681	THEN $SETEXV (VECTOR = 1, ADDRES = .SYSEXV[1]);
;	0682	
;	0683	! Get the UCB address of the channel. Then search the mounted volume lists
;	0684	! for the MTL entry pointing to the UCB. Search the process list first;
;	0685	! if not found there and this is a disk mounted /GROUP or /SYSTEM then search
;	0686	! the system mounted volume list. The latter case requires privilege.
;	0687	!
;	0688	
;	0689	UCB = GET_CHANNELUCB (.CHANNEL);
;	0690	VCB = .UCB[UCB$L_VCB];
;	0691	
;	0692	IF .BBLOCK[UCB[UCB$L_DEVCHAR], DEV$V_ALL]
;	0693	AND .UCB[UCB$L_PID] NEQ .SCH$GL_CURPCB[PCB$L_PID]
;	0694	THEN ERR_EXIT (SS$_DEVALLOC);
;	0695	
;	0696	MTL = SEARCH_MOUNT (CTL$GQ_MOUNTLST[0], .UCB);
;	0697	IF .MTL EQL 0
;	0698	THEN
;	0699	    BEGIN
;	0700	    PRIVILEGE_MASK = CTL$GL_PHD[PHD$Q_PRIVMSK];
;	0701	    IF NOT .BBLOCK[UCB[UCB$L_DEVCHAR], DEV$V_SQD]
;	0702	    THEN
;	0703		BEGIN
;	0704		IF .VCB[VCB$V_GROUP]
;	0705		THEN
;	0706		    BEGIN
;	0707		    IF NOT (.PRIVILEGE_MASK[PRV$V_GRPNAM]
;	0708			    OR .PRIVILEGE_MASK[PRV$V_SYSNAM])

; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 4-2
; Digital Equipment Corporation
;
;	0709		    THEN ERR_EXIT (SS$_NOPRIV);
;	0710		    END
;	0711		ELSE IF .VCB[VCB$V_SYSTEM]
;	0712		THEN
;	0713		    BEGIN
;	0714		    IF NOT .PRIVILEGE_MASK[PRV$V_SYSNAM]
;	0715		    THEN ERR_EXIT (SS$_NOPRIV);
;	0716		    END
;	0717		ELSE
;	0718		    ERR_EXIT (SS$_DEVNOTMOUNT);
;	0719	
;	0720		MTL = SEARCH_MOUNT (IOC$GQ_MOUNTLST[0], .UCB);
;	0721		IF .MTL EQL 0 THEN ERR_EXIT (SS$_DEVNOTMOUNT);
;	0722	
;	0723		IF .UCB EQL .EXE$GL_SYSUCB		! check for dismount of system device
;	0724		THEN ERR_EXIT (DISM$_SYSDEV);
;	0725	
;	0726	! If this is a disk mounted /GROUP, the dismounter must be in the group that
;	0727	! mounted the disk, or have SYSNAM privilege. Also clear the /SYSTEM or /GROUP
;	0728	! bits to correctly show residual /SHARE mounts.
;	0729	!
;	0730	
;	0731		IF NOT .BBLOCK[UCB[UCB$L_DEVCHAR], DEV$V_SQD]
;	0732		AND .VCB[VCB$V_GROUP]
;	0733		AND .MTL[MTL$L_LOGNAME] NEQ 0
;	0734		THEN
;	0735		    IF .BBLOCK[.MTL[MTL$L_LOGNAME], LOG$W_GROUP] NEQ .SCH$GL_CURPCB[PCB$W_GRP]
;	0736		    AND NOT .PRIVILEGE_MASK[PRV$V_SYSNAM]
;	0737		    THEN ERR_EXIT (SS$_NOPRIV);
;	0738	
;	0739		VCB[VCB$V_GROUP] = 0;
;	0740		VCB[VCB$V_SYSTEM] = 0;
;	0741		END
;	0742	    ELSE
;	0743		BEGIN
;	0744	! 
;	0745	! If mag tape, pickup primary UCB and search for it in the local mounted
;	0746	! volume list. 
;	0747	!
;	0748		UCB = .BBLOCK[.VCB[VCB$L_RVT],RVT$L_UCBLST];
;	0749		MTL = SEARCH_MOUNT(CTL$GQ_MOUNTLST[0], .UCB);
;	0750		IF .MTL EQL 0 THEN ERR_EXIT(SS$_DEVNOTMOUNT);
;	0751		END;
;	0752	    END;
;	0753	
;	0754	! Now call the system dismount routine which does the actual dismount.
;	0755	!
;	0756	
;	0757	REMQUE (.MTL, MTL);
;	0758	IOC$DISMOUNT (.MTL, NOT .DISM_OPTIONS[OPT_UNLOAD], .SCH$GL_CURPCB);
;	0759	
;	0760	RETURN 1;
;	0761	
;	0762	END;					! end of routine MAKE_DISMOUNT


; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 4-3
; Digital Equipment Corporation
;


							    .GLOBL  DISM_OPTIONS, SCH$GL_CURPCB, CTL$GL_PHD, EXE$GL_SYSUCB
							    .GLOBL  CTL$GQ_MOUNTLST, IOC$GQ_MOUNTLST, GET_CHANNELUCB
							    .GLOBL  IOC$DISMOUNT, SYS$SETEXV

					 0FFC 000BF 	    .ENTRY  MAKE_DISMOUNT, Save R2,R3,R4,R5,R6,R7,R8,R9,R10,R11       ; 0599
		         57	0000'  CF  9E 000C1 	    MOVAB   SYSEXV, R7						      ;
		         58 00000000G  9F  9E 000C6 	    MOVAB   @#CTL$GQ_MOUNTLST, R8				      ;
		         59 00000000G  9F  9E 000CD 	    MOVAB   @#SCH$GL_CURPCB, R9					      ;
		         5A 00000000G  9F  9E 000D4 	    MOVAB   @#SYS$SETEXV, R10					      ;
		         5B 00000000G  00  9E 000DB 	    MOVAB   LIB$STOP, R11					      ;
		         6D 00000123   EF  DE 000E2 	    MOVAL   15$, (FP)						      ; 0632
				       57  DD 000E9 	    PUSHL   R7							      ; 0671
				       7E  7C 000EB 	    CLRQ    -(SP)						      ;
				       7E  D4 000ED 	    CLRL    -(SP)						      ;
		         6A	       04  FB 000EF 	    CALLS   #4, SYS$SETEXV					      ;
				  04   A7  9F 000F2 	    PUSHAB  SYSEXV+4						      ; 0672
				       7E  7C 000F5 	    CLRQ    -(SP)						      ;
				       01  DD 000F7 	    PUSHL   #1							      ;
		         6A	       04  FB 000F9 	    CALLS   #4, SYS$SETEXV					      ;
		         50	       67  D0 000FC 	    MOVL    SYSEXV, R0						      ; 0678
				       09  15 000FF 	    BLEQ    1$							      ;
				       7E  7C 00101 	    CLRQ    -(SP)						      ; 0679
				       50  DD 00103 	    PUSHL   R0							      ;
				       7E  D4 00105 	    CLRL    -(SP)						      ;
		         6A	       04  FB 00107 	    CALLS   #4, SYS$SETEXV					      ;
		         50	  04   A7  D0 0010A 1$:     MOVL    SYSEXV+4, R0					      ; 0680
				       09  15 0010E 	    BLEQ    2$							      ;
				       7E  7C 00110 	    CLRQ    -(SP)						      ; 0681
				       50  DD 00112 	    PUSHL   R0							      ;
				       01  DD 00114 	    PUSHL   #1							      ;
		         6A	       04  FB 00116 	    CALLS   #4, SYS$SETEXV					      ;
				0000'  CF  DD 00119 2$:     PUSHL   CHANNEL						      ; 0689
		  0000G  CF	       01  FB 0011D 	    CALLS   #1, GET_CHANNELUCB					      ;
		         52	       50  D0 00122 	    MOVL    R0, UCB						      ;
		         53	  30   A2  D0 00125 	    MOVL    48(UCB), VCB					      ; 0690
	   12	    36   A2	       07  E1 00129 	    BBC     #7, 54(UCB), 3$					      ; 0692
		         50	       69  D0 0012E 	    MOVL    SCH$GL_CURPCB, R0					      ; 0693
		    60   A0	  28   A2  D1 00131 	    CMPL    40(UCB), 96(R0)					      ;
				       08  13 00136 	    BEQL    3$							      ;
		         7E	0840   8F  3C 00138 	    MOVZWL  #2112, -(SP)					      ; 0694
		         6B	       01  FB 0013D 	    CALLS   #1, LIB$STOP					      ;
				       52  DD 00140 3$:     PUSHL   UCB							      ; 0696
				       58  DD 00142 	    PUSHL   R8							      ;
		  0000V  CF	       02  FB 00144 	    CALLS   #2, SEARCH_MOUNT					      ;
		         56	       50  D0 00149 	    MOVL    R0, MTL						      ;
				       03  13 0014C 	    BEQL    4$							      ; 0697
				     00A0  31 0014E 	    BRW     14$							      ;
		         55 00000000G  9F  D0 00151 4$:     MOVL    @#CTL$GL_PHD, PRIVILEGE_MASK			      ; 0700
	   77	    34   A2	       05  E0 00158 	    BBS     #5, 52(UCB), 13$					      ; 0701
		         54	  0B   A3  9E 0015D 	    MOVAB   11(VCB), R4						      ; 0704
	   06	         64	       06  E1 00161 	    BBC     #6, (R4), 5$					      ;
	   15	         65	       03  E0 00165 	    BBS     #3, (PRIVILEGE_MASK), 9$				      ; 0707
				       04  11 00169 	    BRB     6$							      ; 0708

; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 4-4
; Digital Equipment Corporation
;
	   08	         64	       07  E1 0016B 5$:     BBC     #7, (R4), 7$					      ; 0711
	   0B	         65	       02  E0 0016F 6$:     BBS     #2, (PRIVILEGE_MASK), 9$				      ; 0714
				       24  DD 00173 	    PUSHL   #36							      ; 0715
				       04  11 00175 	    BRB     8$							      ;
		         7E	  7C   8F  9A 00177 7$:     MOVZBL  #124, -(SP)						      ; 0718
		         6B	       01  FB 0017B 8$:     CALLS   #1, LIB$STOP					      ;
				       52  DD 0017E 9$:     PUSHL   UCB							      ; 0720
			    00000000G  8F  DD 00180 	    PUSHL   #IOC$GQ_MOUNTLST					      ;
		  0000V  CF	       02  FB 00186 	    CALLS   #2, SEARCH_MOUNT					      ;
		         56	       50  D0 0018B 	    MOVL    R0, MTL						      ;
				       07  12 0018E 	    BNEQ    10$							      ; 0721
		         7E	  7C   8F  9A 00190 	    MOVZBL  #124, -(SP)						      ;
		         6B	       01  FB 00194 	    CALLS   #1, LIB$STOP					      ;
	      00000000G  9F	       52  D1 00197 10$:    CMPL    UCB, @#EXE$GL_SYSUCB				      ; 0723
				       09  12 0019E 	    BNEQ    11$							      ;
			    00738014   8F  DD 001A0 	    PUSHL   #7569428						      ; 0724
		         6B	       01  FB 001A6 	    CALLS   #1, LIB$STOP					      ;
	   20	    34   A2	       05  E0 001A9 11$:    BBS     #5, 52(UCB), 12$					      ; 0731
	   1C	         64	       06  E1 001AE 	    BBC     #6, (R4), 12$					      ; 0732
				  10   A6  D5 001B2 	    TSTL    16(MTL)						      ; 0733
				       17  13 001B5 	    BEQL    12$							      ;
		         51	  10   A6  D0 001B7 	    MOVL    16(MTL), R1						      ; 0735
		         50	       69  D0 001BB 	    MOVL    SCH$GL_CURPCB, R0					      ;
		    22   A0	  0C   A1  B1 001BE 	    CMPW    12(R1), 34(R0)					      ;
				       09  13 001C3 	    BEQL    12$							      ;
	   05	         65	       02  E0 001C5 	    BBS     #2, (PRIVILEGE_MASK), 12$				      ; 0736
				       24  DD 001C9 	    PUSHL   #36							      ; 0737
		         6B	       01  FB 001CB 	    CALLS   #1, LIB$STOP					      ;
		         64	  C0   8F  8A 001CE 12$:    BICB2   #192, (R4)						      ; 0740
				       1D  11 001D2 	    BRB     14$							      ; 0701
		         50	  20   A3  D0 001D4 13$:    MOVL    32(VCB), R0						      ; 0748
		         52	  0C   A0  D0 001D8 	    MOVL    12(R0), UCB						      ;
				       52  DD 001DC 	    PUSHL   UCB							      ; 0749
				       58  DD 001DE 	    PUSHL   R8							      ;
		  0000V  CF	       02  FB 001E0 	    CALLS   #2, SEARCH_MOUNT					      ;
		         56	       50  D0 001E5 	    MOVL    R0, MTL						      ;
				       07  12 001E8 	    BNEQ    14$							      ; 0750
		         7E	  7C   8F  9A 001EA 	    MOVZBL  #124, -(SP)						      ;
		         6B	       01  FB 001EE 	    CALLS   #1, LIB$STOP					      ;
		         56	       66  0F 001F1 14$:    REMQUE  (MTL), MTL						      ; 0757
    0000G  CF	         01	       01  EF 001F4 	    EXTZV   #1, #1, DISM_OPTIONS, R3				      ; 0758
				       53     001FA									      ;
		         53	       53  D2 001FB 	    MCOML   R3, R3						      ;
		         54	       69  D0 001FE 	    MOVL    SCH$GL_CURPCB, R4					      ;
			    00000000G  00  16 00201 	    JSB     IOC$DISMOUNT					      ;
		         50	       01  D0 00207 	    MOVL    #1, R0						      ; 0760
					   04 0020A 	    RET     							      ; 0599
					 0000 0020B 15$:    .WORD   Save nothing					      ; 0632
				       7E  D4 0020D 	    CLRL    -(SP)						      ;
				       5E  DD 0020F 	    PUSHL   SP							      ;
		         7E	  04   AC  7D 00211 	    MOVQ    4(AP), -(SP)					      ;
		  0000V  CF	       03  FB 00215 	    CALLS   #3, KERNEL_HANDLER					      ;
					   04 0021A 	    RET     							      ;

; Routine Size:  348 bytes

; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 4-5
; Digital Equipment Corporation
;



; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 5
; Digital Equipment Corporation
;
;	0763	GLOBAL ROUTINE SEARCH_MOUNT (MTL_HEAD, UCB) =
;	0764	
;	0765	!++
;	0766	!
;	0767	! FUNCTIONAL DESCRIPTION:
;	0768	!
;	0769	!	This routine searches the given mounted volume list for the entry
;	0770	!	representing the indicated UCB.
;	0771	!
;	0772	!
;	0773	! CALLING SEQUENCE:
;	0774	!	SEARCH_MOUNT (ARG1, ARG2)
;	0775	!
;	0776	! INPUT PARAMETERS:
;	0777	!	ARG1: address of mounted volume list head
;	0778	!	ARG2: address of desired UCB
;	0779	!
;	0780	! IMPLICIT INPUTS:
;	0781	!	NONE
;	0782	!
;	0783	! OUTPUT PARAMETERS:
;	0784	!	NONE
;	0785	!
;	0786	! IMPLICIT OUTPUTS:
;	0787	!	NONE
;	0788	!
;	0789	! ROUTINE VALUE:
;	0790	!	address of entry or 0
;	0791	!
;	0792	! SIDE EFFECTS:
;	0793	!	NONE
;	0794	!
;	0795	!--
;	0796	
;	0797	BEGIN
;	0798	
;	0799	MAP
;	0800		MTL_HEAD	: REF VECTOR,	! mounted volume list head
;	0801		UCB		: REF BBLOCK;	! desired UCB
;	0802	
;	0803	LOCAL
;	0804		MTL		: REF BBLOCK;	! list entry in question
;	0805	
;	0806	
;	0807	! Simply scan through the doubly linked list, checking consistency as we go.
;	0808	!
;	0809	
;	0810	MTL = .MTL_HEAD[0];
;	0811	
;	0812	UNTIL .MTL EQL MTL_HEAD[0] DO
;	0813	    BEGIN
;	0814	    IF .MTL[MTL$B_TYPE] NEQ DYN$C_MTL
;	0815	    THEN BUG_CHECK (NOTMTLMTL, FATAL, 'Corrupted mounted volume list');
;	0816	    IF .MTL[MTL$L_UCB] EQL .UCB THEN RETURN .MTL;
;	0817	    MTL = .MTL[MTL$L_MTLFL];

; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 5-1
; Digital Equipment Corporation
;
;	0818	    END;
;	0819	
;	0820	RETURN 0;
;	0821	
;	0822	END;					! end of routine SEARCH_MOUNT



							    .PSECT  $LOCKEDC2$,NOWRT,2

					      00000 P.AAA:  .WORD   0, -257						      ;
					      00004 	    .WORD    <BUG$_NOTMTLMTL!4>					      ;
					      00006	    .BLKB   2

							    .GLOBL  BUG$_NOTMTLMTL

							    .PSECT  $CODE$,NOWRT,2

					 0004 0021B 	    .ENTRY  SEARCH_MOUNT, Save R2				      ; 0763
		         52	  04   BC  D0 0021D 	    MOVL    @MTL_HEAD, MTL					      ; 0810
		    04   AC	       52  D1 00221 1$:     CMPL    MTL, MTL_HEAD					      ; 0812
				       1B  13 00225 	    BEQL    4$							      ;
		         19	  0A   A2  91 00227 	    CMPB    10(MTL), #25					      ; 0814
				       05  13 0022B 	    BEQL    2$							      ;
		  0000'  CF	       00  FB 0022D 	    CALLS   #0, P.AAA						      ; 0815
		    08   AC	  0C   A2  D1 00232 2$:     CMPL    12(MTL), UCB					      ; 0816
				       04  12 00237 	    BNEQ    3$							      ;
		         50	       52  D0 00239 	    MOVL    MTL, R0						      ;
					   04 0023C 	    RET     							      ;
		         52	       62  D0 0023D 3$:     MOVL    (MTL), MTL						      ; 0817
				       DF  11 00240 	    BRB     1$							      ; 0812
				       50  D4 00242 4$:     CLRL    R0							      ; 0820
					   04 00244 	    RET     							      ; 0763

; Routine Size:  42 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 6
; Digital Equipment Corporation
;
;	0823	ROUTINE MAIN_HANDLER (SIGNAL, MECHANISM) : NOVALUE =
;	0824	
;	0825	!++
;	0826	!
;	0827	! FUNCTIONAL DESCRIPTION:
;	0828	!
;	0829	!	This routine is the main level condition handler for the DISMOUNT
;	0830	!	utility. It cleans up, unwinds and returns the condition code as
;	0831	!	status to DISMOUNT's caller (i.e., the CLI).
;	0832	!
;	0833	!
;	0834	! CALLING SEQUENCE:
;	0835	!	MAIN_HANDLER (ARG1, ARG2)
;	0836	!
;	0837	! INPUT PARAMETERS:
;	0838	!	ARG1: address of signal array
;	0839	!	ARG2: address of mechanism array
;	0840	!
;	0841	! IMPLICIT INPUTS:
;	0842	!	NONE
;	0843	!
;	0844	! OUTPUT PARAMETERS:
;	0845	!	NONE
;	0846	!
;	0847	! IMPLICIT OUTPUTS:
;	0848	!	NONE
;	0849	!
;	0850	! ROUTINE VALUE:
;	0851	!	NONE
;	0852	!
;	0853	! SIDE EFFECTS:
;	0854	!	stack unwound, control passed to CLI
;	0855	!
;	0856	!--
;	0857	
;	0858	BEGIN
;	0859	
;	0860	MAP
;	0861		SIGNAL		: REF BBLOCK,	! signal array
;	0862		MECHANISM	: REF BBLOCK;	! mechanism array
;	0863	
;	0864	EXTERNAL
;	0865		USER_STATUS	: VECTOR;	! status return of some routines
;	0866	
;	0867	
;	0868	! Do cleanup as indicated by the status flags.
;	0869	! Cause the condition code to be returned in R0 as the main routine value.
;	0870	!
;	0871	
;	0872	IF .SIGNAL[CHF$L_SIG_NAME] NEQ SS$_UNWIND
;	0873	THEN
;	0874	    BEGIN
;	0875	
;	0876	    IF .CHANNEL NEQ 0
;	0877	    THEN $DASSGN (CHAN = .CHANNEL);

; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 6-1
; Digital Equipment Corporation
;
;	0878	
;	0879	    IF .SIGNAL[CHF$L_SIG_NAME] NEQ 0
;	0880	    THEN MECHANISM[CHF$L_MCH_SAVR0] = .SIGNAL[CHF$L_SIG_NAME]
;	0881	    ELSE MECHANISM[CHF$L_MCH_SAVR0] = .USER_STATUS[0];
;	0882	    $UNWIND ();
;	0883	    END;
;	0884	
;	0885	END;					! end of routine MAIN_HANDLER



							    .GLOBL  SYS$UNWIND

					 0004 00245 MAIN_HANDLER:
							    .WORD   Save R2						      ; 0823
		         52	  04   AC  D0 00247 	    MOVL    SIGNAL, R2						      ; 0872
	      00000920   8F	  04   A2  D1 0024B 	    CMPL    4(R2), #2336					      ;
				       2E  13 00253 	    BEQL    4$							      ;
		         50	0000'  CF  D0 00255 	    MOVL    CHANNEL, R0						      ; 0876
				       09  13 0025A 	    BEQL    1$							      ;
				       50  DD 0025C 	    PUSHL   R0							      ; 0877
	      00000000G  9F	       01  FB 0025E 	    CALLS   #1, @#SYS$DASSGN					      ;
	   50	    08   AC	       0C  C1 00265 1$:     ADDL3   #12, MECHANISM, R0					      ; 0880
				  04   A2  D5 0026A 	    TSTL    4(R2)						      ; 0879
				       06  13 0026D 	    BEQL    2$							      ;
		         60	  04   A2  D0 0026F 	    MOVL    4(R2), (R0)						      ; 0880
				       05  11 00273 	    BRB     3$							      ; 0879
		         60	0000G  CF  D0 00275 2$:     MOVL    USER_STATUS, (R0)					      ; 0881
				       7E  7C 0027A 3$:     CLRQ    -(SP)						      ; 0882
	      00000000G  9F	       02  FB 0027C 	    CALLS   #2, @#SYS$UNWIND					      ;
					   04 00283 4$:     RET     							      ; 0823

; Routine Size:  63 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 7
; Digital Equipment Corporation
;
;	0886	ROUTINE KERNEL_HANDLER (SIGNAL, MECHANISM) : NOVALUE =
;	0887	
;	0888	!++
;	0889	!
;	0890	! FUNCTIONAL DESCRIPTION:
;	0891	!
;	0892	!	This routine is the condition handler for all of the kernel mode
;	0893	!	code. It returns the error status to the user mode caller.
;	0894	!
;	0895	!
;	0896	! CALLING SEQUENCE:
;	0897	!	KERNEL_HANDLER (ARG1, ARG2)
;	0898	!
;	0899	! INPUT PARAMETERS:
;	0900	!	ARG1: address of signal vector
;	0901	!	ARG2: address of mechanism vector
;	0902	!
;	0903	! IMPLICIT INPUTS:
;	0904	!	NONE
;	0905	!
;	0906	! OUTPUT PARAMETERS:
;	0907	!	NONE
;	0908	!
;	0909	! IMPLICIT OUTPUTS:
;	0910	!	NONE
;	0911	!
;	0912	! ROUTINE VALUE:
;	0913	!	NONE
;	0914	!
;	0915	! SIDE EFFECTS:
;	0916	!	stack unwound
;	0917	!
;	0918	!--
;	0919	
;	0920	BEGIN
;	0921	
;	0922	MAP
;	0923		SIGNAL		: REF BBLOCK,	! signal vector
;	0924		MECHANISM	: REF BBLOCK;	! mechanism vector
;	0925	
;	0926	
;	0927	
;	0928	IF .SIGNAL[CHF$L_SIG_NAME] NEQ SS$_UNWIND
;	0929	THEN
;	0930	    BEGIN
;	0931	
;	0932	! Restore the system exception vectors.
;	0933	!
;	0934	
;	0935	    $SETEXV (VECTOR = 0, ADDRES = .SYSEXV[0]);
;	0936	    $SETEXV (VECTOR = 1, ADDRES = .SYSEXV[1]);
;	0937	
;	0938	! Return the condition code in R0.
;	0939	!
;	0940	

; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 7-1
; Digital Equipment Corporation
;
;	0941	    MECHANISM[CHF$L_MCH_SAVR0] = .SIGNAL[CHF$L_SIG_NAME];
;	0942	    $UNWIND ();
;	0943	
;	0944	    END;
;	0945	END;					! end of routine KERNEL_HANDLER





					 0804 00284 KERNEL_HANDLER:
							    .WORD   Save R2,R11						      ; 0886
		         5B 00000000G  9F  9E 00286 	    MOVAB   @#SYS$SETEXV, R11					      ;
		         52	  04   AC  D0 0028D 	    MOVL    SIGNAL, R2						      ; 0928
	      00000920   8F	  04   A2  D1 00291 	    CMPL    4(R2), #2336					      ;
				       28  13 00299 	    BEQL    1$							      ;
				       7E  7C 0029B 	    CLRQ    -(SP)						      ; 0935
				0000'  CF  DD 0029D 	    PUSHL   SYSEXV						      ;
				       7E  D4 002A1 	    CLRL    -(SP)						      ;
		         6B	       04  FB 002A3 	    CALLS   #4, SYS$SETEXV					      ;
				       7E  7C 002A6 	    CLRQ    -(SP)						      ; 0936
				0000'  CF  DD 002A8 	    PUSHL   SYSEXV+4						      ;
				       01  DD 002AC 	    PUSHL   #1							      ;
		         6B	       04  FB 002AE 	    CALLS   #4, SYS$SETEXV					      ;
		         50	  08   AC  D0 002B1 	    MOVL    MECHANISM, R0					      ; 0941
		    0C   A0	  04   A2  D0 002B5 	    MOVL    4(R2), 12(R0)					      ;
				       7E  7C 002BA 	    CLRQ    -(SP)						      ; 0942
	      00000000G  9F	       02  FB 002BC 	    CALLS   #2, @#SYS$UNWIND					      ;
					   04 002C3 1$:     RET     							      ; 0886

; Routine Size:  64 bytes


;	0946	
;	0947	END
;	0948	ELUDOM




							    .GLOBL  LIB$STOP

;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $GLOBAL$       	    88    WRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $OWN$          	    16    WRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $CODE$         	   708  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $LOCKEDC2$     	     8  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS

; Bliss-32 7.352	Saturday 22-AUG-1978 00:14:54	DBB3:[DISMOU.SRC]DISMOU.B32;12					Page 7-2
; Digital Equipment Corporation
;
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        41         0       257





; Size:		708 code + 112 data bytes
; Run Time:	00:28.8
; Elapsed Time:	01:13.9
; Memory Used:	349 pages
; Compilation Complete
