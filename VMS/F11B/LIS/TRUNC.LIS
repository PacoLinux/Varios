
; Bliss-32 10.1-416	Monday 21-AUG-1978 23:22:43	DBB3:[F11B.SRC]TRUNC.B32;16					Page 1
;
;	0001	MODULE TRUNC (
;	0002			LANGUAGE (BLISS32),
;	0003			IDENT = 'B0014'
;	0004			) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1977
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	!
;	0028	! FACILITY:  F11ACP Structure Level 2
;	0029	!
;	0030	! ABSTRACT:
;	0031	!
;	0032	!	This routine truncates a file by deallocating the indicated blocks.
;	0033	!
;	0034	! ENVIRONMENT:
;	0035	!
;	0036	!	STARLET operating system, including privileged system services
;	0037	!	and internal exec routines.
;	0038	!
;	0039	!--
;	0040	!
;	0041	!
;	0042	! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  21-Mar-1977  10:41
;	0043	!
;	0044	! REVISION HISTORY:
;	0045	!
;	0046	!   Andrew C. Goldstein, 23-Mar-1977  15:10
;	0047	!   X0002 - Turn off cleanup at successful completion
;	0048	!
;	0049	!   Andrew C. Goldstein, 6-Apr-1977  18:07
;	0050	!   X0003 - Condition header write back on pointer erasing
;	0051	!
;	0052	!   Andrew C. Goldstein, 12-Apr-1977  15:40
;	0053	!   X0004 - Modify for buffer manager
;	0054	!
;	0055	!   Andrew C. Goldstein, 13-Jul-1977  15:47

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:22:43	DBB3:[F11B.SRC]TRUNC.B32;16					Page 1-1
;
;	0056	!   X0005 - Rework file header checksumming
;	0057	!
;	0058	!   Andrew C. Goldstein, 9-Aug-1977  15:54
;	0059	!   X0006 - Add multi-header support, including TRUNCATE_HEADER routine
;	0060	!
;	0061	!   Andrew C. Goldstein, 26-Aug-1977  10:55
;	0062	!   X0007 - Add performance metering
;	0063	!
;	0064	!   Andrew C. Goldstein, 12-Dec-1977  14:33
;	0065	!   X0008 - file ID interface changes
;	0066	!
;	0067	!   Andrew C. Goldstein, 20-Dec-1977  16:35
;	0068	!   X0009 - Modify for structure level 2
;	0069	!
;	0070	!   Andrew C. Goldstein, 14-Mar-1978  19:36
;	0071	!   B0010 - I/O status contains round up, not file size
;	0072	!
;	0073	!   Andrew C. Goldstein, 2-May-78  15:23
;	0074	!   B0011 - Update HIBLK in record attributes to reflect file size
;	0075	!
;	0076	!   Andrew C. Goldstein, 29-May-78  23:44
;	0077	!   B0012 - Get correct file size for FCB
;	0078	!
;	0079	!   Andrew C. Goldstein, 29-May-78  23:48
;	0080	!   B0013 - Add dynamic bad block handling
;	0081	!
;	0082	!   Andrew C. Goldstein, 12-Jun-78  21:08
;	0083	!   B0014 - PCB vector name change
;	0084	!
;	0085	!**
;	0086	
;	0087	
;	0088	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0089	REQUIRE 'SRC$:FCPDEF.B32';
;	0438	
;	0439	
;	0440	FORWARD ROUTINE
;	0441		TRUNCATE	: NOVALUE,	! truncate file
;	0442		TRUNCATE_HEADER	: NOVALUE;	! truncate individual file header

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:22:43	DBB3:[F11B.SRC]TRUNC.B32;16					Page 2
;
;	0443	GLOBAL ROUTINE TRUNCATE (FIB, FILE_HEADER, DEALLOCATE) : NOVALUE =
;	0444	
;	0445	!++
;	0446	!
;	0447	! FUNCTIONAL DESCRIPTION:
;	0448	!
;	0449	!	This routine truncates a file to the size indicated in the FIB by
;	0450	!	deallocating the necessary blocks. The erase flag controls whether
;	0451	!	the retrieval pointers are erased in the header. The deallocate flag
;	0452	!	controls whether or not the blocks are actually returned to the
;	0453	!	storage map.
;	0454	!
;	0455	! CALLING SEQUENCE:
;	0456	!	TRUNCATE (ARG1, ARG2, ARG3)
;	0457	!
;	0458	! INPUT PARAMETERS:
;	0459	!	ARG1: address of FIB for operation
;	0460	!	ARG2: address of file header
;	0461	!	ARG3: = 1 to return space to storage map
;	0462	!	      = 0 to just clean out header
;	0463	!
;	0464	! IMPLICIT INPUTS:
;	0465	!	CURRENT_VCB: VCB of volume
;	0466	!
;	0467	! OUTPUT PARAMETERS:
;	0468	!	NONE
;	0469	!
;	0470	! IMPLICIT OUTPUTS:
;	0471	!	NONE
;	0472	!
;	0473	! ROUTINE VALUE:
;	0474	!	NONE
;	0475	!
;	0476	! SIDE EFFECTS:
;	0477	!	storage bitmap altered
;	0478	!	file header altered
;	0479	!
;	0480	!--
;	0481	
;	0482	BEGIN
;	0483	
;	0484	MAP
;	0485		FIB		: REF BBLOCK,	! FIB for operation
;	0486		FILE_HEADER	: REF BBLOCK;	! file header
;	0487	
;	0488	LINKAGE
;	0489		L_MAP_POINTER	= JSB :
;	0490				  GLOBAL (COUNT = 6, LBN = 7, MAP_POINTER = 8);
;	0491	
;	0492	GLOBAL REGISTER
;	0493		COUNT		= 6,		! count of blocks returned
;	0494		LBN		= 7,		! LBN of map entry
;	0495		MAP_POINTER	= 8 : REF BBLOCK; ! pointer to scan map
;	0496	
;	0497	LOCAL

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:22:43	DBB3:[F11B.SRC]TRUNC.B32;16					Page 2-1
;
;	0498		PCB		: REF BBLOCK,	! address of caller's PCB
;	0499		FCB		: REF BBLOCK,	! FCB of current file header
;	0500		HEADER		: REF BBLOCK,	! address of current file header
;	0501		NEW_HEADER	: REF BBLOCK,	! address of extension file header
;	0502		PREV_POINTER,			! save previous map pointer
;	0503		MAP_END,			! pointer to end of map area
;	0504		VBN,				! relative VBN of operation
;	0505		EXT_FID		: BBLOCK [FID$C_LENGTH], ! file ID of extension header
;	0506		EX_SEGNUM,			! segment number of ext header
;	0507		REREAD;				! flag to reread primary header
;	0508	
;	0509	LABEL
;	0510		VBN_LOOP;			! main loop to scan for starting VBN
;	0511	
;	0512	EXTERNAL
;	0513		CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
;	0514		IO_PACKET	: REF BBLOCK,	! I/O packet for this request
;	0515		USER_STATUS	: VECTOR,	! I/O status block of user
;	0516		CURRENT_VCB	: REF BBLOCK,	! VCB of volume
;	0517		PRIMARY_FCB	: REF BBLOCK,	! FCB of file
;	0518		SCH$GL_PCBVEC	: REF VECTOR ADDRESSING_MODE (ABSOLUTE);
;	0519						! system PCB array
;	0520	
;	0521	EXTERNAL ROUTINE
;	0522		PMS_START_SUB,			! start subfunction metering
;	0523		PMS_END_SUB,			! end subfunction metering
;	0524		DEALLOCATE_BAD,			! mark blocks bad
;	0525		MARK_DIRTY,			! mark buffer for write-back
;	0526		CHECKSUM,			! checksum file header
;	0527		GET_MAP_POINTER	: L_MAP_POINTER, ! get value of next map pointer
;	0528		NEXT_HEADER,			! read next extension header
;	0529		UPDATE_FILESIZE,		! update file size in primary FCB
;	0530		INIT_FCB2,			! initialize FCB
;	0531		WRITE_HEADER,			! write file header
;	0532		READ_HEADER,			! read file header
;	0533		DEL_EXTFCB,			! delete extension FCB's
;	0534		DELETE_FILE;			! delete remainder of file
;	0535	
;	0536	
;	0537	! Start metering for this subfunction.
;	0538	!
;	0539	
;	0540	PMS_START_SUB (PMS_ALLOC);
;	0541	
;	0542	! Establish the basic pointers. Round up the starting VBN to the next cluster
;	0543	! boundary and adjust it to a zero start. The block count must be zero (default).
;	0544	! If the operation calls for the blocks to be turned over to the bad block
;	0545	! file, the caller must be system; also, round down the file size.
;	0546	!
;	0547	
;	0548	PCB = .SCH$GL_PCBVEC[.(IO_PACKET[IRP$L_PID])<0,16>];
;	0549	IF .FIB[FIB$V_MARKBAD]
;	0550	AND .PCB[PCB$W_GRP] GTRU SYSTEM_UIC
;	0551	AND NOT .IO_PACKET[IRP$V_PRIVIO]
;	0552	THEN ERR_EXIT (SS$_NOPRIV);

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:22:43	DBB3:[F11B.SRC]TRUNC.B32;16					Page 2-2
;
;	0553	
;	0554	HEADER = .FILE_HEADER;
;	0555	FCB = .PRIMARY_FCB;
;	0556	VBN = ((.FIB[FIB$L_EXVBN] - 1
;	0557		+ (IF NOT .FIB[FIB$V_MARKBAD]
;	0558		  THEN .CURRENT_VCB[VCB$W_CLUSTER] - 1
;	0559		  ELSE 0)
;	0560		)
;	0561		 / .CURRENT_VCB[VCB$W_CLUSTER]) * .CURRENT_VCB[VCB$W_CLUSTER];
;	0562	
;	0563	IF .FIB[FIB$L_EXSZ] NEQ 0 THEN ERR_EXIT (SS$_BADPARAM);
;	0564	
;	0565	! Init the user's return parameters.
;	0566	!
;	0567	
;	0568	USER_STATUS[1] = .VBN + 1 - .FIB[FIB$L_EXVBN];
;	0569	FIB[FIB$L_EXVBN] = .VBN + 1;
;	0570	FIB[FIB$L_EXSZ] = 0;
;	0571	REREAD = 0;
;	0572	
;	0573	! Now scan the file headers for the retrieval pointer containing the starting
;	0574	! VBN. If the VBN is off the end of file, report the error; if it coincides,
;	0575	! the operation is a noop.
;	0576	!
;	0577	
;	0578	VBN_LOOP:
;	0579	BEGIN
;	0580	WHILE 1 DO
;	0581	    BEGIN
;	0582	    MAP_POINTER = .HEADER + .HEADER[FH2$B_MPOFFSET]*2;
;	0583	    MAP_END = .MAP_POINTER + .HEADER[FH2$B_MAP_INUSE]*2;
;	0584	
;	0585	    UNTIL .MAP_POINTER GEQA .MAP_END DO
;	0586		BEGIN
;	0587		PREV_POINTER = .MAP_POINTER;
;	0588		GET_MAP_POINTER ();
;	0589		IF .COUNT GTRU .VBN THEN LEAVE VBN_LOOP;
;	0590		VBN = .VBN - .COUNT;
;	0591		END;
;	0592	
;	0593	! We have scanned through an entire header. Chain to the next header if it
;	0594	! exists. First check for the boundary condition of starting the truncate
;	0595	! at the header boundary to avoid leaving an empty header.
;	0596	!
;	0597	
;	0598	    IF .VBN EQL 0
;	0599	    THEN
;	0600		BEGIN
;	0601		IF .HEADER[FH2$W_EX_FIDNUM] EQL 0
;	0602		AND .HEADER[FH2$W_EX_FIDRVN] EQL 0
;	0603		THEN RETURN			! truncate coincides with EOF
;	0604		ELSE LEAVE VBN_LOOP;		! dump the extension headers
;	0605		END;
;	0606	
;	0607	    NEW_HEADER = NEXT_HEADER (.HEADER, .FCB);

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:22:43	DBB3:[F11B.SRC]TRUNC.B32;16					Page 2-3
;
;	0608	    IF .NEW_HEADER EQL 0 THEN EXITLOOP;
;	0609	    REREAD = 1;
;	0610	    HEADER = .NEW_HEADER;
;	0611	    IF .FCB NEQ 0 THEN FCB = .FCB[FCB$L_EXFCB];
;	0612	    END;				! end of header scan loop
;	0613	
;	0614	ERR_EXIT (SS$_ENDOFFILE)
;	0615	END;					! end of VBN_LOOP
;	0616	
;	0617	! We are now pointing at the retrieval pointer in which the truncation starts.
;	0618	! If the blocks being truncated are to be marked bad, call the routine to
;	0619	! do so.
;	0620	!
;	0621	
;	0622	IF .FIB[FIB$V_MARKBAD]
;	0623	THEN
;	0624	    BEGIN
;	0625	    DEALLOCATE_BAD (.FIB, .HEADER, .DEALLOCATE, .PREV_POINTER, .VBN);
;	0626	    END
;	0627	
;	0628	! Clean out the rest of this header. If there are extension headers, use
;	0629	! the delete routine to dispose of them. Also flush extension FCB's, if they
;	0630	! exist.
;	0631	!
;	0632	
;	0633	ELSE
;	0634	    BEGIN
;	0635	    MARK_DIRTY (.HEADER);
;	0636	    CLEANUP_FLAGS[CLF_FIXFCB] = 1;
;	0637	    CLEANUP_FLAGS[CLF_INVWINDOW] = 1;
;	0638	    CLEANUP_FLAGS[CLF_CLEANTRUNC] = 1;
;	0639	    KERNEL_CALL (UPDATE_FILESIZE, .FIB[FIB$L_EXVBN] - 1);
;	0640	
;	0641	! Update the HIBLK field in the record attributes to reflect the new file
;	0642	! size.
;	0643	!
;	0644	
;	0645	    BBLOCK [HEADER[FH2$W_RECATTR], FAT$L_HIBLK] = ROT (.FIB[FIB$L_EXVBN]-1, 16);
;	0646	
;	0647	    TRUNCATE_HEADER (.FIB, .HEADER, .DEALLOCATE, .PREV_POINTER, .VBN);
;	0648	    EX_SEGNUM = .HEADER[FH2$W_SEG_NUM] + 1;
;	0649	    CH$MOVE (FID$C_LENGTH, HEADER[FH2$W_EXT_FID], EXT_FID);
;	0650	    CH$FILL (0, FID$C_LENGTH, HEADER[FH2$W_EXT_FID]);
;	0651	    IF .FCB NEQ 0 AND .FCB NEQ .PRIMARY_FCB
;	0652	    THEN KERNEL_CALL (INIT_FCB2, .FCB, .HEADER);
;	0653	
;	0654	    CHECKSUM (.HEADER);
;	0655	    WRITE_HEADER ();
;	0656	
;	0657	    IF .DEALLOCATE AND (.EXT_FID[FID$W_NUM] NEQ 0)
;	0658	    THEN
;	0659		BEGIN
;	0660		REREAD = 1;
;	0661		HEADER = NEXT_HEADER (0, .FCB, EXT_FID, .EX_SEGNUM);
;	0662		KERNEL_CALL (DEL_EXTFCB, .FCB);

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:22:43	DBB3:[F11B.SRC]TRUNC.B32;16					Page 2-4
;
;	0663		DELETE_FILE (.FIB, .HEADER);
;	0664		END;
;	0665	
;	0666	    IF .REREAD
;	0667	    THEN HEADER = READ_HEADER (FIB[FIB$W_FID], .PRIMARY_FCB);
;	0668	    END;
;	0669	
;	0670	
;	0671	! Stop metering of this subfunction
;	0672	!
;	0673	
;	0674	PMS_END_SUB ();
;	0675	
;	0676	END;					! end of routine TRUNCATE


							    .TITLE  TRUNC
							    .IDENT  \B0014\

							    .EXTRN  CLEANUP_FLAGS, IO_PACKET, USER_STATUS, CURRENT_VCB
							    .EXTRN  PRIMARY_FCB, SCH$GL_PCBVEC, PMS_START_SUB, PMS_END_SUB
							    .EXTRN  DEALLOCATE_BAD, MARK_DIRTY, CHECKSUM, GET_MAP_POINTER
							    .EXTRN  NEXT_HEADER, UPDATE_FILESIZE, INIT_FCB2, WRITE_HEADER
							    .EXTRN  READ_HEADER, DEL_EXTFCB, DELETE_FILE, SYS$CMKRNL

							    .PSECT  $CODE$,NOWRT,2

					 0FFC 00000 	    .ENTRY  TRUNCATE, Save R2,R3,R4,R5,R6,R7,R8,R9,R10,R11	      ; 0443
		         5E 	       08  C2 00002 	    SUBL2   #8, SP						      ;
				       08  DD 00005 	    PUSHL   #8							      ; 0540
		  0000G  CF	       01  FB 00007 	    CALLS   #1, PMS_START_SUB					      ;
		         52 00000000G  9F  D0 0000C 	    MOVL    @#SCH$GL_PCBVEC, R2					      ; 0548
		         51 	0000G  CF  D0 00013 	    MOVL    IO_PACKET, R1					      ;
		         50 	  0C   A1  3C 00018 	    MOVZWL  12(R1), R0						      ;
		         52 	     6240  D0 0001C 	    MOVL    (R2)[R0], PCB					      ;
		         50 	  04   AC  D0 00020 	    MOVL    FIB, R0						      ; 0549
	   0E 	    17   A0	       02  E1 00024 	    BBC     #2, 23(R0), 1$					      ;
		         08 	  22   A2  B1 00029 	    CMPW    34(PCB), #8						      ; 0550
				       08  1B 0002D 	    BLEQU   1$							      ;
	   03 	    2B   A1	       01  E0 0002F 	    BBS     #1, 43(R1), 1$					      ; 0551
				       24  BF 00034 	    CHMU    #36							      ; 0552
					   04 00036 	    RET     							      ;
		         59 	  08   AC  D0 00037 1$:     MOVL    FILE_HEADER, HEADER					      ; 0554
		         5A 	0000G  CF  D0 0003B 	    MOVL    PRIMARY_FCB, FCB					      ; 0555
		         50 	  04   AC  D0 00040 	    MOVL    FIB, R0						      ; 0556
	   0D 	    17   A0	       02  E0 00044 	    BBS     #2, 23(R0), 2$					      ; 0557
		         51 	0000G  CF  D0 00049 	    MOVL    CURRENT_VCB, R1					      ; 0558
		         51 	  3C   A1  3C 0004E 	    MOVZWL  60(R1), R1						      ;
				       51  D7 00052 	    DECL    R1							      ;
				       02  11 00054 	    BRB     3$							      ; 0557
				       51  D4 00056 2$:     CLRL    R1							      ;
		         51 	  1C   A0  C0 00058 3$:     ADDL2   28(R0), R1						      ; 0556
				       51  D7 0005C 	    DECL    R1							      ;
		         52 	0000G  CF  D0 0005E 	    MOVL    CURRENT_VCB, R2					      ; 0561
		         53 	  3C   A2  3C 00063 	    MOVZWL  60(R2), R3						      ; 0556

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:22:43	DBB3:[F11B.SRC]TRUNC.B32;16					Page 2-5
;
		         51 	       53  C6 00067 	    DIVL2   R3, R1						      ;
		         53 	  3C   A2  3C 0006A 	    MOVZWL  60(R2), VBN						      ; 0561
		         53 	       51  C4 0006E 	    MULL2   R1, VBN						      ;
				  18   A0  D5 00071 	    TSTL    24(R0)						      ; 0563
				       03  13 00074 	    BEQL    4$							      ;
				       14  BF 00076 	    CHMU    #20							      ;
					   04 00078 	    RET     							      ;
		         50 	  04   AC  D0 00079 4$:     MOVL    FIB, R0						      ; 0568
	   51 	         53 	  1C   A0  C3 0007D 	    SUBL3   28(R0), VBN, R1					      ;
		  0000G  CF	  01   A1  9E 00082 	    MOVAB   1(R1), USER_STATUS+4				      ;
		    1C   A0	  01   A3  9E 00088 	    MOVAB   1(R3), 28(R0)					      ; 0569
				  18   A0  D4 0008D 	    CLRL    24(R0)						      ; 0570
				       5B  D4 00090 	    CLRL    REREAD						      ; 0571
		         50 	  01   A9  9A 00092 5$:     MOVZBL  1(HEADER), R0					      ; 0582
		         58 	     6940  3E 00096 	    MOVAW   (HEADER)[R0], MAP_POINTER				      ;
		         50 	  3A   A9  9A 0009A 	    MOVZBL  58(HEADER), R0					      ; 0583
		         55 	     6840  3E 0009E 	    MOVAW   (MAP_POINTER)[R0], MAP_END				      ;
		         55 	       58  D1 000A2 6$:     CMPL    MAP_POINTER, MAP_END				      ; 0585
				       10  1E 000A5 	    BGEQU   7$							      ;
		         54 	       58  D0 000A7 	    MOVL    MAP_POINTER, PREV_POINTER				      ; 0587
				     0000G 30 000AA 	    BSBW    GET_MAP_POINTER					      ; 0588
		         53 	       56  D1 000AD 	    CMPL    COUNT, VBN						      ; 0589
				       36  1A 000B0 	    BGTRU   10$							      ;
		         53 	       56  C2 000B2 	    SUBL2   COUNT, VBN						      ; 0590
				       EB  11 000B5 	    BRB     6$							      ; 0585
				       53  D5 000B7 7$:     TSTL    VBN							      ; 0598
				       0B  12 000B9 	    BNEQ    8$							      ;
				  0E   A9  B5 000BB 	    TSTW    14(HEADER)						      ; 0601
				       28  12 000BE 	    BNEQ    10$							      ;
				  12   A9  B5 000C0 	    TSTW    18(HEADER)						      ; 0602
				       23  12 000C3 	    BNEQ    10$							      ;
					   04 000C5 	    RET     							      ; 0603
		         7E 	       59  7D 000C6 8$:     MOVQ    HEADER, -(SP)					      ; 0607
		  0000G  CF	       02  FB 000C9 	    CALLS   #2, NEXT_HEADER					      ;
		         52 	       50  D0 000CE 	    MOVL    R0, NEW_HEADER					      ;
				       10  13 000D1 	    BEQL    9$							      ; 0608
		         5B 	       01  D0 000D3 	    MOVL    #1, REREAD						      ; 0609
		         59 	       52  D0 000D6 	    MOVL    NEW_HEADER, HEADER					      ; 0610
				       5A  D5 000D9 	    TSTL    FCB							      ; 0611
				       B5  13 000DB 	    BEQL    5$							      ;
		         5A 	  0C   AA  D0 000DD 	    MOVL    12(FCB), FCB					      ;
				       AF  11 000E1 	    BRB     5$							      ; 0580
				0870   8F  BF 000E3 9$:     CHMU    #2160						      ; 0614
					   04 000E7 	    RET     							      ;
		         56 	  04   AC  D0 000E8 10$:    MOVL    FIB, R6						      ; 0622
	   13 	    17   A6	       02  E1 000EC 	    BBC     #2, 23(R6), 11$					      ;
				       53  DD 000F1 	    PUSHL   VBN							      ; 0625
				       54  DD 000F3 	    PUSHL   PREV_POINTER					      ;
				  0C   AC  DD 000F5 	    PUSHL   DEALLOCATE						      ;
				0240   8F  BB 000F8 	    PUSHR   #^M<R6,R9>						      ;
		  0000G  CF	       05  FB 000FC 	    CALLS   #5, DEALLOCATE_BAD					      ;
				     00BF  31 00101 	    BRW     14$							      ; 0622
				       59  DD 00104 11$:    PUSHL   HEADER						      ; 0635
		  0000G  CF	       01  FB 00106 	    CALLS   #1, MARK_DIRTY					      ;
		  0000G  CF 00080012   8F  C8 0010B 	    BISL2   #524306, CLEANUP_FLAGS				      ; 0638

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:22:43	DBB3:[F11B.SRC]TRUNC.B32;16					Page 2-6
;
	   52 	    1C   A6	       01  C3 00114 	    SUBL3   #1, 28(R6), R2					      ; 0639
				       52  DD 00119 	    PUSHL   R2							      ;
				       01  DD 0011B 	    PUSHL   #1							      ;
				       5E  DD 0011D 	    PUSHL   SP							      ;
				0000G  CF  9F 0011F 	    PUSHAB  UPDATE_FILESIZE					      ;
	      00000000G  9F	       04  FB 00123 	    CALLS   #4, @#SYS$CMKRNL					      ;
      18   A9	         52 	       10  9C 0012A 	    ROTL    #16, R2, 24(HEADER)					      ; 0645
				       53  DD 0012F 	    PUSHL   VBN							      ; 0647
				       54  DD 00131 	    PUSHL   PREV_POINTER					      ;
				  0C   AC  DD 00133 	    PUSHL   DEALLOCATE						      ;
				0240   8F  BB 00136 	    PUSHR   #^M<R6,R9>						      ;
		  0000V  CF	       05  FB 0013A 	    CALLS   #5, TRUNCATE_HEADER					      ;
		         57 	  04   A9  3C 0013F 	    MOVZWL  4(HEADER), EX_SEGNUM				      ; 0648
				       57  D6 00143 	    INCL    EX_SEGNUM						      ;
	   6E 	    0E   A9	       06  28 00145 	    MOVC3   #6, 14(HEADER), EXT_FID				      ; 0649
	   00 	         6E 	       00  2C 0014A 	    MOVC5   #0, (SP), #0, #6, 14(HEADER)			      ; 0650
		    0E   A9	       06     0014E									      ;
				       5A  D5 00151 	    TSTL    FCB							      ; 0651
				       1A  13 00153 	    BEQL    12$							      ;
		  0000G  CF	       5A  D1 00155 	    CMPL    FCB, PRIMARY_FCB					      ;
				       13  13 0015A 	    BEQL    12$							      ;
				       59  DD 0015C 	    PUSHL   HEADER						      ; 0652
				       5A  DD 0015E 	    PUSHL   FCB							      ;
				       02  DD 00160 	    PUSHL   #2							      ;
				       5E  DD 00162 	    PUSHL   SP							      ;
				0000G  CF  9F 00164 	    PUSHAB  INIT_FCB2						      ;
	      00000000G  9F	       05  FB 00168 	    CALLS   #5, @#SYS$CMKRNL					      ;
				       59  DD 0016F 12$:    PUSHL   HEADER						      ; 0654
		  0000G  CF	       01  FB 00171 	    CALLS   #1, CHECKSUM					      ;
		  0000G  CF	       00  FB 00176 	    CALLS   #0, WRITE_HEADER					      ; 0655
		         32 	  0C   AC  E9 0017B 	    BLBC    DEALLOCATE, 13$					      ; 0657
				       6E  B5 0017F 	    TSTW    EXT_FID						      ;
				       2E  13 00181 	    BEQL    13$							      ;
		         5B 	       01  D0 00183 	    MOVL    #1, REREAD						      ; 0660
				       57  DD 00186 	    PUSHL   EX_SEGNUM						      ; 0661
				  04   AE  9F 00188 	    PUSHAB  EXT_FID						      ;
				       5A  DD 0018B 	    PUSHL   FCB							      ;
				       7E  D4 0018D 	    CLRL    -(SP)						      ;
		  0000G  CF	       04  FB 0018F 	    CALLS   #4, NEXT_HEADER					      ;
		         59 	       50  D0 00194 	    MOVL    R0, HEADER						      ;
				       5A  DD 00197 	    PUSHL   FCB							      ; 0662
				       01  DD 00199 	    PUSHL   #1							      ;
				       5E  DD 0019B 	    PUSHL   SP							      ;
				0000G  CF  9F 0019D 	    PUSHAB  DEL_EXTFCB						      ;
	      00000000G  9F	       04  FB 001A1 	    CALLS   #4, @#SYS$CMKRNL					      ;
				0240   8F  BB 001A8 	    PUSHR   #^M<R6,R9>						      ; 0663
		  0000G  CF	       02  FB 001AC 	    CALLS   #2, DELETE_FILE					      ;
		         0F 	       5B  E9 001B1 13$:    BLBC    REREAD, 14$						      ; 0666
				0000G  CF  DD 001B4 	    PUSHL   PRIMARY_FCB						      ; 0667
				  04   A6  9F 001B8 	    PUSHAB  4(R6)						      ;
		  0000G  CF	       02  FB 001BB 	    CALLS   #2, READ_HEADER					      ;
		         59 	       50  D0 001C0 	    MOVL    R0, HEADER						      ;
		  0000G  CF	       00  FB 001C3 14$:    CALLS   #0, PMS_END_SUB					      ; 0674
					   04 001C8 	    RET     							      ; 0443


; Bliss-32 10.1-416	Monday 21-AUG-1978 23:22:43	DBB3:[F11B.SRC]TRUNC.B32;16					Page 2-7
;
; Routine Size:  457 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 23:22:43	DBB3:[F11B.SRC]TRUNC.B32;16					Page 3
;
;	0677	GLOBAL ROUTINE TRUNCATE_HEADER (FIB, HEADER, DEALLOCATE, POINTER, LAST_COUNT) : NOVALUE =
;	0678	
;	0679	!++
;	0680	!
;	0681	! FUNCTIONAL DESCRIPTION:
;	0682	!
;	0683	!	This routine returns the indicated retrieval pointers in the given
;	0684	!	file header to the storage map and erases them in the file header.
;	0685	!
;	0686	!
;	0687	! CALLING SEQUENCE:
;	0688	!	TRUNCATE_HEADER (ARG1, ARG2, ARG3, ARG4, ARG5)
;	0689	!
;	0690	! INPUT PARAMETERS:
;	0691	!	ARG1: address of FIB of operation
;	0692	!	ARG2: address of file header
;	0693	!	ARG3: = 1 to return space to the storage map
;	0694	!	      = 0 to just erase the retrieval pointers
;	0695	!	ARG4: address of first retrieval pointer to process, if present
;	0696	!	ARG5: new count field of first pointer, if present
;	0697	!
;	0698	! IMPLICIT INPUTS:
;	0699	!	NONE
;	0700	!
;	0701	! OUTPUT PARAMETERS:
;	0702	!	NONE
;	0703	!
;	0704	! IMPLICIT OUTPUTS:
;	0705	!	NONE
;	0706	!
;	0707	! ROUTINE VALUE:
;	0708	!	NONE
;	0709	!
;	0710	! SIDE EFFECTS:
;	0711	!	file header altered, storage map altered
;	0712	!
;	0713	!--
;	0714	
;	0715	BEGIN
;	0716	
;	0717	MAP
;	0718		FIB		: REF BBLOCK,	! user FIB
;	0719		HEADER		: REF BBLOCK;	! file header
;	0720	
;	0721	LINKAGE
;	0722		L_MAP_POINTER	= JSB :
;	0723				  GLOBAL (COUNT = 6, LBN = 7, MAP_POINTER = 8),
;	0724	
;	0725		L_MAKE_POINTER	= CALL :
;	0726				  GLOBAL (BUILD_POINTER = 9);
;	0727	
;	0728	GLOBAL REGISTER
;	0729		COUNT		= 6,		! count of blocks returned
;	0730		LBN		= 7,		! LBN of map entry
;	0731		MAP_POINTER	= 8 : REF BBLOCK, ! pointer to scan map

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:22:43	DBB3:[F11B.SRC]TRUNC.B32;16					Page 3-1
;
;	0732		BUILD_POINTER	= 9 : REF BBLOCK; ! pointer to build new map entry
;	0733	
;	0734	LOCAL
;	0735		MAP_END;			! address of end of map area
;	0736	
;	0737	EXTERNAL ROUTINE
;	0738		GET_MAP_POINTER	: L_MAP_POINTER, ! get value of next map entry
;	0739		MAKE_POINTER	: L_MAKE_POINTER, ! buiuld new map entry
;	0740		RETURN_BLOCKS;			! return blocks to storage map
;	0741	
;	0742	
;	0743	! Establish pointers into the file header. If explicit args are supplied, use
;	0744	! them; else default to releasing the entire file header.
;	0745	!
;	0746	
;	0747	MAP_POINTER = .HEADER + .HEADER[FH2$B_MPOFFSET]*2;
;	0748	BUILD_POINTER = .MAP_POINTER;
;	0749	MAP_END = .MAP_POINTER + .HEADER[FH2$B_MAP_INUSE]*2;
;	0750	
;	0751	IF ACTUALCOUNT GEQ 5
;	0752	THEN
;	0753	    BEGIN
;	0754	    MAP_POINTER = .POINTER;
;	0755	    BUILD_POINTER = .MAP_POINTER;
;	0756	    IF .LAST_COUNT NEQ 0
;	0757	    THEN
;	0758		BEGIN
;	0759		GET_MAP_POINTER ();
;	0760		MAKE_POINTER (.LAST_COUNT, .LBN, .HEADER);
;	0761		IF .DEALLOCATE THEN RETURN_BLOCKS (.LBN+.LAST_COUNT, .COUNT-.LAST_COUNT);
;	0762		FIB[FIB$L_EXSZ] = .FIB[FIB$L_EXSZ] + .COUNT - .LAST_COUNT;
;	0763		END;
;	0764	    END;
;	0765	
;	0766	! Now scan the map area, cleaning out pointers and releasing blocks.
;	0767	!
;	0768	
;	0769	UNTIL .MAP_POINTER GEQA .MAP_END DO
;	0770	    BEGIN
;	0771	    GET_MAP_POINTER ();
;	0772	    IF .DEALLOCATE THEN RETURN_BLOCKS (.LBN, .COUNT);
;	0773	    FIB[FIB$L_EXSZ] = .FIB[FIB$L_EXSZ] + .COUNT;
;	0774	    END;
;	0775	
;	0776	! Finally zero out the map pointers released and adjust the map use count.
;	0777	!
;	0778	
;	0779	HEADER[FH2$B_MAP_INUSE] = (.BUILD_POINTER - .HEADER) / 2 - .HEADER[FH2$B_MPOFFSET];
;	0780	CH$FILL (0, .MAP_END - .BUILD_POINTER, .BUILD_POINTER);
;	0781	
;	0782	END;					! end of routine TRUNCATE_HEADER



							    .EXTRN  MAKE_POINTER, RETURN_BLOCKS

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:22:43	DBB3:[F11B.SRC]TRUNC.B32;16					Page 3-2
;

					 0FFC 001C9 	    .ENTRY  TRUNCATE_HEADER, Save R2,R3,R4,R5,R6,R7,R8,R9,R10,R11     ; 0677
		         52 	  08   AC  D0 001CB 	    MOVL    HEADER, R2						      ; 0747
		         50 	  01   A2  9A 001CF 	    MOVZBL  1(R2), R0						      ;
		         58 	     6240  3E 001D3 	    MOVAW   (R2)[R0], MAP_POINTER				      ;
		         59 	       58  D0 001D7 	    MOVL    MAP_POINTER, BUILD_POINTER				      ; 0748
		         50 	  3A   A2  9A 001DA 	    MOVZBL  58(R2), R0						      ; 0749
		         54 	     6840  3E 001DE 	    MOVAW   (MAP_POINTER)[R0], MAP_END				      ;
		         05 	       6C  91 001E2 	    CMPB    (AP), #5						      ; 0751
				       39  1F 001E5 	    BLSSU   2$							      ;
		         58 	  10   AC  D0 001E7 	    MOVL    POINTER, MAP_POINTER				      ; 0754
		         59 	       58  D0 001EB 	    MOVL    MAP_POINTER, BUILD_POINTER				      ; 0755
		         53 	  14   AC  D0 001EE 	    MOVL    LAST_COUNT, R3					      ; 0756
				       2C  13 001F2 	    BEQL    2$							      ;
				     0000G 30 001F4 	    BSBW    GET_MAP_POINTER					      ; 0759
				       52  DD 001F7 	    PUSHL   R2							      ; 0760
				0088   8F  BB 001F9 	    PUSHR   #^M<R3,R7>						      ;
		  0000G  CF	       03  FB 001FD 	    CALLS   #3, MAKE_POINTER					      ;
		         0C 	  0C   AC  E9 00202 	    BLBC    DEALLOCATE, 1$					      ; 0761
	   7E 	         56 	       53  C3 00206 	    SUBL3   R3, COUNT, -(SP)					      ;
				     6347  9F 0020A 	    PUSHAB  (R3)[LBN]						      ;
		  0000G  CF	       02  FB 0020D 	    CALLS   #2, RETURN_BLOCKS					      ;
		         50 	  04   AC  D0 00212 1$:     MOVL    FIB, R0						      ; 0762
	   51 	         56 	  18   A0  C1 00216 	    ADDL3   24(R0), COUNT, R1					      ;
      18   A0	         51 	       53  C3 0021B 	    SUBL3   R3, R1, 24(R0)					      ;
	   53 	    04   AC	       18  C1 00220 2$:     ADDL3   #24, FIB, R3					      ; 0773
		         54 	       58  D1 00225 3$:     CMPL    MAP_POINTER, MAP_END				      ; 0769
				       15  1E 00228 	    BGEQU   5$							      ;
				     0000G 30 0022A 	    BSBW    GET_MAP_POINTER					      ; 0771
		         09 	  0C   AC  E9 0022D 	    BLBC    DEALLOCATE, 4$					      ; 0772
				       56  DD 00231 	    PUSHL   COUNT						      ;
				       57  DD 00233 	    PUSHL   LBN							      ;
		  0000G  CF	       02  FB 00235 	    CALLS   #2, RETURN_BLOCKS					      ;
		         63 	       56  C0 0023A 4$:     ADDL2   COUNT, (R3)						      ; 0773
				       E6  11 0023D 	    BRB     3$							      ; 0769
	   50 	         59 	       52  C3 0023F 5$:     SUBL3   R2, BUILD_POINTER, R0				      ; 0779
		         50 	       02  C6 00243 	    DIVL2   #2, R0						      ;
      3A   A2	         50 	  01   A2  83 00246 	    SUBB3   1(R2), R0, 58(R2)					      ;
	   50 	         54 	       59  C3 0024C 	    SUBL3   BUILD_POINTER, MAP_END, R0				      ; 0780
	   00 	         6E 	       00  2C 00250 	    MOVC5   #0, (SP), #0, R0, (BUILD_POINTER)			      ;
		         69 	       50     00254									      ;
					   04 00256 	    RET     							      ; 0677

; Routine Size:  142 bytes


;	0783	
;	0784	END
;	0785	ELUDOM







; Bliss-32 10.1-416	Monday 21-AUG-1978 23:22:43	DBB3:[F11B.SRC]TRUNC.B32;16					Page 3-3
;
;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $CODE$         	   599  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        29         0       244





; Size:		599 code + 0 data bytes
; Run Time:	00:14.1
; Elapsed Time:	00:27.6
; Memory Used:	362 pages
; Compilation Complete
