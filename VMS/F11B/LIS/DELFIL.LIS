
; Bliss-32 10.1-416	Monday 21-AUG-1978 23:12:32	DBB3:[F11B.SRC]DELFIL.B32;9					Page 1
;
;	0001	MODULE DELFIL (
;	0002			LANGUAGE (BLISS32),
;	0003			IDENT = 'B0012A'
;	0004			) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1977
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	!
;	0028	! FACILITY:  F11ACP Structure Level 2
;	0029	!
;	0030	! ABSTRACT:
;	0031	!
;	0032	!	This module deletes a file, returning its blocks to the storage map
;	0033	!	and releasing the file header.
;	0034	!
;	0035	! ENVIRONMENT:
;	0036	!
;	0037	!	STARLET operating system, including privileged system services
;	0038	!	and internal exec routines.
;	0039	!
;	0040	!--
;	0041	!
;	0042	!
;	0043	! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  4-Apr-1977  15:50
;	0044	!
;	0045	! REVISION HISTORY:
;	0046	!
;	0047	!   Andrew C. Goldstein, 6-Apr-1977  13:17
;	0048	!   X0002 - Remove logic to delete file header on deletion failure
;	0049	!
;	0050	!   Andrew C. Goldstein, 12-Apr-1977  15:27
;	0051	!   X0003 - Modify for buffer manager
;	0052	!
;	0053	!   Andrew C. Goldstein, 11-May-1977  13:21
;	0054	!   X0004 - Flush file from buffer pool if directory
;	0055	!

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:12:32	DBB3:[F11B.SRC]DELFIL.B32;9					Page 1-1
;
;	0056	!   Andrew C. Goldstein, 18-May-1977  14:52
;	0057	!   X0005 - Clean out global file header address
;	0058	!
;	0059	!   Andrew C. Goldstein, 14-Jul-1977  15:40
;	0060	!   X0006 - New file header checksum logic
;	0061	!
;	0062	!   Andrew C. Goldstein, 2-Aug-1977  14:14
;	0063	!   X0007 - Add multi-header support
;	0064	!
;	0065	!   Andrew C. Goldstein, 3-Oct-1977  9:26
;	0066	!   X0008 - Move UPDATE_IBVBN call to kernel mode
;	0067	!
;	0068	!   Andrew C. Goldstein, 12-Dec-1977  13:30
;	0069	!   X0009 - file ID interface changes
;	0070	!
;	0071	!   Andrew C. Goldstein, 23-Jan-1978  18:30
;	0072	!   X0010 - Modify for structure level 2
;	0073	!
;	0074	!   Andrew C. Goldstein, 17-Feb-1978  14:58
;	0075	!   B0011 - Use new bug check
;	0076	!
;	0077	!   Andrew C. Goldstein, 29-May-78  17:55
;	0078	!   B0012 - Add dynamic bad block handling
;	0079	!
;	0080	!**
;	0081	
;	0082	
;	0083	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0084	REQUIRE 'SRC$:FCPDEF.B32';
;	0433	
;	0434	
;	0435	FORWARD ROUTINE
;	0436		DELETE_FILE	: NOVALUE,	! complete file deletion
;	0437		DELETE_FID	: NOVALUE;	! just release file header

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:12:32	DBB3:[F11B.SRC]DELFIL.B32;9					Page 2
;
;	0438	GLOBAL ROUTINE DELETE_FILE (FIB, FILEHEADER) : NOVALUE =
;	0439	
;	0440	!++
;	0441	!
;	0442	! FUNCTIONAL DESCRIPTION:
;	0443	!
;	0444	!	This routine deletes a file by releasing its blocks to the storage
;	0445	!	bitmap and then releasing the header.
;	0446	!
;	0447	! CALLING SEQUENCE:
;	0448	!	DELETE_FILE (ARG1, ARG2)
;	0449	!
;	0450	! INPUT PARAMETERS:
;	0451	!	ARG1: FIB of operation
;	0452	!	ARG2: address of file header buffer
;	0453	!
;	0454	! IMPLICIT INPUTS:
;	0455	!	NONE
;	0456	!
;	0457	! OUTPUT PARAMETERS:
;	0458	!	NONE
;	0459	!
;	0460	! IMPLICIT OUTPUTS:
;	0461	!	NONE
;	0462	!
;	0463	! ROUTINE VALUE:
;	0464	!	NONE
;	0465	!
;	0466	! SIDE EFFECTS:
;	0467	!	File deleted, storage map and index file bitmap modified, VCB modified
;	0468	!
;	0469	!--
;	0470	
;	0471	BEGIN
;	0472	
;	0473	MAP
;	0474		FIB		: REF BBLOCK,	! address of user FIB
;	0475		FILEHEADER	: REF BBLOCK;	! address of file header
;	0476	
;	0477	LOCAL
;	0478		HEADER		: REF BBLOCK,	! local address of file header
;	0479		FILE_NUMBER,			! file number of header being deleted
;	0480		EXT_FID		: BBLOCK [FID$C_LENGTH], ! extension file ID
;	0481		EX_SEGNUM;			! header extension segment number
;	0482	
;	0483	EXTERNAL
;	0484		CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
;	0485		CURRENT_VCB	: REF BBLOCK,	! VCB of this volume
;	0486		FILE_HEADER	: REF BBLOCK;	! global file header address
;	0487	
;	0488	EXTERNAL ROUTINE
;	0489		CHECKSUM,			! compute file header checksum
;	0490		SEND_BADSCAN,			! start bad block scan process
;	0491		FLUSH_FID,			! flush file from buffer pool
;	0492		WRITE_BLOCK,			! write block to disk

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:12:32	DBB3:[F11B.SRC]DELFIL.B32;9					Page 2-1
;
;	0493		INVALIDATE,			! invalidate block buffer
;	0494		TRUNCATE_HEADER,		! truncate file header
;	0495		NEXT_HEADER;			! read next file extension header
;	0496	
;	0497	
;	0498	! If the file looks like a directory file flush it from the buffer pool
;	0499	! to avoid retaining stale directory data.
;	0500	!
;	0501	
;	0502	
;	0503	HEADER = .FILEHEADER;
;	0504	IF .HEADER[FH2$V_DIRECTORY]
;	0505	THEN FLUSH_FID (HEADER[FH2$W_FID]);
;	0506	
;	0507	! If the file is marked bad and is not empty, we do not delete the file,
;	0508	! but rather send it to the bad block scanner, who will analyze the file and
;	0509	! delete it piecemeal.
;	0510	!
;	0511	
;	0512	IF  .HEADER[FH2$V_BADBLOCK]
;	0513	AND (   .HEADER[FH2$B_MAP_INUSE] NEQ 0
;	0514	    OR  .HEADER[FH2$W_EX_FIDNUM] NEQ 0
;	0515	    OR  .HEADER[FH2$W_EX_FIDRVN] NEQ 0)
;	0516	THEN
;	0517	    BEGIN
;	0518	    CHECKSUM (.HEADER);
;	0519	    SEND_BADSCAN (HEADER[FH2$W_FID]);
;	0520	    RETURN;
;	0521	    END;
;	0522	
;	0523	! Loop for all headers, releasing the blocks mapped and the headers.
;	0524	! First write out the deleted file header. Thus, if the system bombs during
;	0525	! the delete, we will not have a valid header on the disk mapping blocks
;	0526	! that may have been returned to the storage map.
;	0527	!
;	0528	
;	0529	WHILE 1 DO
;	0530	    BEGIN
;	0531	    FILE_NUMBER = .HEADER[FH2$W_FID_NUM];
;	0532	    IF .CURRENT_VCB[VCB$V_EXTFID]
;	0533	    THEN FILE_NUMBER<16,8> = .HEADER[FH2$B_FID_NMX];
;	0534	    HEADER[FH2$W_FID_NUM] = 0;		! deleted header has zero file number
;	0535	    HEADER[FH2$W_FID_RVN] = 0;
;	0536	    HEADER[FH2$W_CHECKSUM] = 0;		! and zero checksum
;	0537	    FILE_HEADER = 0;
;	0538	    WRITE_BLOCK (.HEADER);
;	0539	    INVALIDATE (.HEADER);
;	0540	
;	0541	! Now return the blocks mapped by the header to the storage map.
;	0542	! Then extract the extension header data.
;	0543	!
;	0544	
;	0545	    TRUNCATE_HEADER (.FIB, .HEADER, DEALLOC_BLOCKS);
;	0546	
;	0547	    EX_SEGNUM = .HEADER[FH2$W_SEG_NUM] + 1;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:12:32	DBB3:[F11B.SRC]DELFIL.B32;9					Page 2-2
;
;	0548	    CH$MOVE (FID$C_LENGTH, HEADER[FH2$W_EXT_FID], EXT_FID);
;	0549	
;	0550	! Now free the header in the index file bitmap. Then chain to the next header,
;	0551	! if any, and repeat.
;	0552	!
;	0553	
;	0554	    DELETE_FID (.FILE_NUMBER);
;	0555	
;	0556	    HEADER = NEXT_HEADER (0, 0, EXT_FID, .EX_SEGNUM);
;	0557	    IF .HEADER EQL 0 THEN EXITLOOP;
;	0558	    END;
;	0559	
;	0560	END;					! end of routine DELETE_FILE


							    .TITLE  DELFIL
							    .IDENT  \B0012A\

							    .EXTRN  CLEANUP_FLAGS, CURRENT_VCB, FILE_HEADER, CHECKSUM
							    .EXTRN  SEND_BADSCAN, FLUSH_FID, WRITE_BLOCK, INVALIDATE
							    .EXTRN  TRUNCATE_HEADER, NEXT_HEADER

							    .PSECT  $CODE$,NOWRT,2

					 01FC 00000 	    .ENTRY  DELETE_FILE, Save R2,R3,R4,R5,R6,R7,R8		      ; 0438
		         5E 	       08  C2 00002 	    SUBL2   #8, SP						      ;
		         56 	  08   AC  D0 00005 	    MOVL    FILEHEADER, HEADER					      ; 0503
	   08 	    35   A6	       05  E1 00009 	    BBC     #5, 53(HEADER), 1$					      ; 0504
				  08   A6  9F 0000E 	    PUSHAB  8(HEADER)						      ; 0505
		  0000G  CF	       01  FB 00011 	    CALLS   #1, FLUSH_FID					      ;
	   1F 	    35   A6	       06  E1 00016 1$:     BBC     #6, 53(HEADER), 3$					      ; 0512
				  3A   A6  95 0001B 	    TSTB    58(HEADER)						      ; 0513
				       0A  12 0001E 	    BNEQ    2$							      ;
				  0E   A6  B5 00020 	    TSTW    14(HEADER)						      ; 0514
				       05  12 00023 	    BNEQ    2$							      ;
				  12   A6  B5 00025 	    TSTW    18(HEADER)						      ; 0515
				       10  13 00028 	    BEQL    3$							      ;
				       56  DD 0002A 2$:     PUSHL   HEADER						      ; 0518
		  0000G  CF	       01  FB 0002C 	    CALLS   #1, CHECKSUM					      ;
				  08   A6  9F 00031 	    PUSHAB  8(HEADER)						      ; 0519
		  0000G  CF	       01  FB 00034 	    CALLS   #1, SEND_BADSCAN					      ;
					   04 00039 	    RET     							      ; 0520
		         57 	  08   A6  3C 0003A 3$:     MOVZWL  8(HEADER), FILE_NUMBER				      ; 0531
		         50 	0000G  CF  D0 0003E 	    MOVL    CURRENT_VCB, R0					      ; 0532
	   06 	    0B   A0	       05  E1 00043 	    BBC     #5, 11(R0), 4$					      ;
	   08 	         10 	  0D   A6  F0 00048 	    INSV    13(HEADER), #16, #8, FILE_NUMBER			      ; 0533
				       57     0004D									      ;
				  08   A6  B4 0004E 4$:     CLRW    8(HEADER)						      ; 0534
				  0C   A6  B4 00051 	    CLRW    12(HEADER)						      ; 0535
				01FE   C6  B4 00054 	    CLRW    510(HEADER)						      ; 0536
				0000G  CF  D4 00058 	    CLRL    FILE_HEADER						      ; 0537
				       56  DD 0005C 	    PUSHL   HEADER						      ; 0538
		  0000G  CF	       01  FB 0005E 	    CALLS   #1, WRITE_BLOCK					      ;
				       56  DD 00063 	    PUSHL   HEADER						      ; 0539
		  0000G  CF	       01  FB 00065 	    CALLS   #1, INVALIDATE					      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:12:32	DBB3:[F11B.SRC]DELFIL.B32;9					Page 2-3
;
				       01  DD 0006A 	    PUSHL   #1							      ; 0545
				       56  DD 0006C 	    PUSHL   HEADER						      ;
				  04   AC  DD 0006E 	    PUSHL   FIB							      ;
		  0000G  CF	       03  FB 00071 	    CALLS   #3, TRUNCATE_HEADER					      ;
		         58 	  04   A6  3C 00076 	    MOVZWL  4(HEADER), EX_SEGNUM				      ; 0547
				       58  D6 0007A 	    INCL    EX_SEGNUM						      ;
	   6E 	    0E   A6	       06  28 0007C 	    MOVC3   #6, 14(HEADER), EXT_FID				      ; 0548
				       57  DD 00081 	    PUSHL   FILE_NUMBER						      ; 0554
		  0000V  CF	       01  FB 00083 	    CALLS   #1, DELETE_FID					      ;
				       58  DD 00088 	    PUSHL   EX_SEGNUM						      ; 0556
				  04   AE  9F 0008A 	    PUSHAB  EXT_FID						      ;
				       7E  7C 0008D 	    CLRQ    -(SP)						      ;
		  0000G  CF	       04  FB 0008F 	    CALLS   #4, NEXT_HEADER					      ;
		         56 	       50  D0 00094 	    MOVL    R0, HEADER						      ;
				       A1  12 00097 	    BNEQ    3$							      ; 0557
					   04 00099 	    RET     							      ; 0438

; Routine Size:  154 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 23:12:32	DBB3:[F11B.SRC]DELFIL.B32;9					Page 3
;
;	0561	GLOBAL ROUTINE DELETE_FID (FILENUM) : NOVALUE =
;	0562	
;	0563	!++
;	0564	!
;	0565	! FUNCTIONAL DESCRIPTION:
;	0566	!
;	0567	!	This routine marks the indicated file header free in the index
;	0568	!	file bitmap.
;	0569	!
;	0570	! CALLING SEQUENCE:
;	0571	!	DELETE_HEADER (ARG1)
;	0572	!
;	0573	! INPUT PARAMETERS:
;	0574	!	ARG1: file number of header
;	0575	!
;	0576	! IMPLICIT INPUTS:
;	0577	!	CURRENT_VCB: VCB of volume
;	0578	!
;	0579	! OUTPUT PARAMETERS:
;	0580	!	NONE
;	0581	!
;	0582	! IMPLICIT OUTPUTS:
;	0583	!	NONE
;	0584	!
;	0585	! ROUTINE VALUE:
;	0586	!	NONE
;	0587	!
;	0588	! SIDE EFFECTS:
;	0589	!	Header deleted - index file bitmap & VCB altered
;	0590	!
;	0591	!--
;	0592	
;	0593	BEGIN
;	0594	
;	0595	LOCAL
;	0596		FILE_NUMBER,			! file number - 1 of header
;	0597		VBN,				! relative block in bitmap
;	0598		BITPOS,				! bit number in bitmap
;	0599		BUFFER		: REF BITVECTOR; ! bitmap buffer
;	0600	
;	0601	EXTERNAL
;	0602		CURRENT_VCB	: REF BBLOCK;	! VCB of operation
;	0603	
;	0604	EXTERNAL ROUTINE
;	0605		READ_BLOCK,			! read a block from the disk
;	0606		WRITE_BLOCK,			! write it back
;	0607		UPDATE_IBVBN;			! update index file VBN in VCB
;	0608	
;	0609	
;	0610	! Deleting a file header consists of simply reading in the appropriate block
;	0611	! of the index file bitmap, zeroing the bit representing that file number,
;	0612	! and writing the block back out.
;	0613	!
;	0614	
;	0615	FILE_NUMBER = .FILENUM - 1;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:12:32	DBB3:[F11B.SRC]DELFIL.B32;9					Page 3-1
;
;	0616	VBN = .FILE_NUMBER<12,20>;
;	0617	BITPOS = .FILE_NUMBER<0,12>;
;	0618	
;	0619	IF .VBN GEQU .CURRENT_VCB[VCB$B_IBMAPSIZE]
;	0620	THEN BUG_CHECK (BADFID, FATAL, 'ACP file number out of range for this volume');
;	0621	
;	0622	BUFFER = READ_BLOCK (.VBN + .CURRENT_VCB[VCB$L_IBMAPLBN], 1, INDEX_TYPE);
;	0623	BUFFER[.BITPOS] = 0;
;	0624	WRITE_BLOCK (.BUFFER);
;	0625	
;	0626	! If the bitmap block just written precedes the current start point for
;	0627	! the bitmap scan, update the start point.
;	0628	!
;	0629	
;	0630	IF .VBN LSSU .CURRENT_VCB[VCB$B_IBMAPVBN]
;	0631	THEN KERNEL_CALL (UPDATE_IBVBN, .VBN);
;	0632	
;	0633	END;					! end of routine DELETE_HEADER



							    .PSECT  $LOCKEDC2$,NOWRT,2

				  FEFF  0000  00000 P.AAA:  .WORD   0, -257						      ;
					0000* 00004 	    .WORD   <BUG$_BADFID!4>					      ;
					      00006	    .BLKB   2

							    .EXTRN  READ_BLOCK, UPDATE_IBVBN, BUG$_BADFID, SYS$CMKRNL

							    .PSECT  $CODE$,NOWRT,2

					 001C 0009A 	    .ENTRY  DELETE_FID, Save R2,R3,R4				      ; 0561
		         54 	0000G  CF  9E 0009C 	    MOVAB   CURRENT_VCB, R4					      ;
	   50 	    04   AC	       01  C3 000A1 	    SUBL3   #1, FILENUM, FILE_NUMBER				      ; 0615
	   50 	         14 	       0C  EF 000A6 	    EXTZV   #12, #20, FILE_NUMBER, VBN				      ; 0616
				       52     000AA									      ;
	   50 	         0C 	       00  EF 000AB 	    EXTZV   #0, #12, FILE_NUMBER, BITPOS			      ; 0617
				       53     000AF									      ;
		         50 	       64  D0 000B0 	    MOVL    CURRENT_VCB, R0					      ; 0619
      38   A0	         08 	       00  ED 000B3 	    CMPZV   #0, #8, 56(R0), VBN					      ;
				       52     000B8									      ;
				       05  1A 000B9 	    BGTRU   1$							      ;
		  0000'  CF	       00  FB 000BB 	    CALLS   #0, P.AAA						      ; 0620
				       03  DD 000C0 1$:     PUSHL   #3							      ; 0622
				       01  DD 000C2 	    PUSHL   #1							      ;
		         50 	       64  D0 000C4 	    MOVL    CURRENT_VCB, R0					      ;
				  30 B042  9F 000C7 	    PUSHAB  @48(R0)[VBN]					      ;
		  0000G  CF	       03  FB 000CB 	    CALLS   #3, READ_BLOCK					      ;
	   00 	         60 	       53  E5 000D0 	    BBCC    BITPOS, (BUFFER), 2$				      ; 0623
				       50  DD 000D4 2$:     PUSHL   BUFFER						      ; 0624
		  0000G  CF	       01  FB 000D6 	    CALLS   #1, WRITE_BLOCK					      ;
		         50 	       64  D0 000DB 	    MOVL    CURRENT_VCB, R0					      ; 0630
      3A   A0	         08 	       00  ED 000DE 	    CMPZV   #0, #8, 58(R0), VBN					      ;
				       52     000E3									      ;
				       11  1B 000E4 	    BLEQU   3$							      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:12:32	DBB3:[F11B.SRC]DELFIL.B32;9					Page 3-2
;
				       52  DD 000E6 	    PUSHL   VBN							      ; 0631
				       01  DD 000E8 	    PUSHL   #1							      ;
				       5E  DD 000EA 	    PUSHL   SP							      ;
				0000G  CF  9F 000EC 	    PUSHAB  UPDATE_IBVBN					      ;
	      00000000G  9F	       04  FB 000F0 	    CALLS   #4, @#SYS$CMKRNL					      ;
					   04 000F7 3$:     RET     							      ; 0561

; Routine Size:  94 bytes


;	0634	
;	0635	END
;	0636	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $CODE$         	   248  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $LOCKEDC2$     	     8  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        24         0       238





; Size:		248 code + 8 data bytes
; Run Time:	00:07.5
; Elapsed Time:	00:15.1
; Memory Used:	289 pages
; Compilation Complete
