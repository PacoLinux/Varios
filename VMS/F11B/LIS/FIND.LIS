
; Bliss-32 10.1-416	Monday 21-AUG-1978 23:16:17	DBB3:[F11B.SRC]FIND.B32;8					Page 1
;
;	0001	MODULE FIND (
;	0002			LANGUAGE (BLISS32),
;	0003			IDENT = 'B0007A'
;	0004			) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1977
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	!
;	0028	! FACILITY:  F11ACP Structure Level 2
;	0029	!
;	0030	! ABSTRACT:
;	0031	!
;	0032	!	This routine performs a find operation on the indicated directory.
;	0033	!
;	0034	! ENVIRONMENT:
;	0035	!
;	0036	!	STARLET operating system, including privileged system services
;	0037	!	and internal exec routines.
;	0038	!
;	0039	!--
;	0040	!
;	0041	!
;	0042	! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  3-Jan-1978  13:37
;	0043	!
;	0044	! REVISION HISTORY:
;	0045	!
;	0046	!   Andrew C. Goldstein, 14-Jan-1978  23:55
;	0047	!   B0002 - Directory structure change
;	0048	!
;	0049	!   Andrew C. Goldstein, 16-Jan-1978  18:11
;	0050	!   B0003 - Add remove function
;	0051	!
;	0052	!   Andrew C. Goldstein, 27-Jan-1978  3:30
;	0053	!   B0004 - Bug in computing result string length
;	0054	!
;	0055	!   Andrew C. Goldstein, 27-Jan-1978  5:31

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:16:17	DBB3:[F11B.SRC]FIND.B32;8					Page 1-1
;
;	0056	!   B0005 - Fix context positioning for (e.g.) REMOVE latest version
;	0057	!
;	0058	!   Andrew C. Goldstein, 1-Feb-1978  15:07
;	0059	!   B0006 - Return zero context on lookup failure
;	0060	!
;	0061	!   Andrew C. Goldstein, 6-Jun-78  16:01
;	0062	!   B0007 - Add implicit spooling support
;	0063	!
;	0064	!**
;	0065	
;	0066	
;	0067	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0068	REQUIRE 'SRC$:FCPDEF.B32';

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:16:17	DBB3:[F11B.SRC]FIND.B32;8					Page 2
;
;	0417	GLOBAL ROUTINE FIND (ABD, FIB, REMOVE_MODE) : NOVALUE =
;	0418	
;	0419	!++
;	0420	!
;	0421	! FUNCTIONAL DESCRIPTION:
;	0422	!
;	0423	!	This routine performs a FIND operation on the indicated directory.
;	0424	!
;	0425	! CALLING SEQUENCE:
;	0426	!	FIND (ARG1, ARG2, ARG3)
;	0427	!
;	0428	! INPUT PARAMETERS:
;	0429	!	ARG1: address of descriptor list in buffer packet
;	0430	!	ARG2: address of FIB
;	0431	!	ARG3: 0 to just do a find
;	0432	!	      1 to remove the found entry
;	0433	!
;	0434	! IMPLICIT INPUTS:
;	0435	!	NONE
;	0436	!
;	0437	! OUTPUT PARAMETERS:
;	0438	!	ARG2: file ID and context returned in FIB
;	0439	!
;	0440	! IMPLICIT OUTPUTS:
;	0441	!	NONE
;	0442	!
;	0443	! ROUTINE VALUE:
;	0444	!	NONE
;	0445	!
;	0446	! SIDE EFFECTS:
;	0447	!	Directory LRU may be altered
;	0448	!	directory blocks read
;	0449	!	resultant string written into buffer packet
;	0450	!
;	0451	!--
;	0452	
;	0453	BEGIN
;	0454	
;	0455	MAP
;	0456		ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH],
;	0457						! descriptor list arg
;	0458		FIB		: REF BBLOCK;	! FIB argument
;	0459	
;	0460	LOCAL
;	0461		COUNT,				! count of name string
;	0462		NAME_DESC	: BBLOCK [FND_LENGTH], ! file name descriptor
;	0463		RESULT_STRING	: VECTOR [FILENAME_LENGTH, BYTE],
;	0464						! buffer to build result name string
;	0465		RESULT_LENGTH,			! length of above
;	0466		START_BLOCK,			! block number to start search
;	0467		START_REC,			! record number to start search
;	0468		START_VER;			! version entry to start search
;	0469	
;	0470	EXTERNAL
;	0471		CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:16:17	DBB3:[F11B.SRC]FIND.B32;8					Page 2-1
;
;	0472		DIR_RECORD,			! record number of directory entry
;	0473		DIR_VBN,			! block number of found entry
;	0474		DIR_ENTRY	: REF BBLOCK,	! address of found directory entry
;	0475		DIR_VERSION	: REF BBLOCK,	! address of found directory version
;	0476		CURRENT_VCB	: REF BBLOCK;	! VCB of volume in process
;	0477	
;	0478	EXTERNAL ROUTINE
;	0479		PMS_START_SUB,			! start subfunction metering
;	0480		PMS_END_SUB,			! end subfunction metering
;	0481		COPY_NAME,			! copy file name to result string
;	0482		DIR_ACCESS,			! access the directory
;	0483		PARSE_NAME,			! parse file name string
;	0484		DIR_SCAN,			! search the directory
;	0485		NEXT_REC,			! get next directory record
;	0486		RETURN_DIR,			! return file name to user
;	0487		REMOVE;				! remove directory entry
;	0488	
;	0489	
;	0490	! Start metering for this subfunction.
;	0491	!
;	0492	
;	0493	PMS_START_SUB (PMS_FIND);
;	0494	
;	0495	! If this is an operation on a spooled device, noop it and return a file ID
;	0496	! of -2, -2 with success.
;	0497	!
;	0498	
;	0499	IF .CLEANUP_FLAGS[CLF_SPOOLFILE]
;	0500	THEN
;	0501	    BEGIN
;	0502	    FIB[FIB$W_FID_NUM] = -2;
;	0503	    FIB[FIB$W_FID_SEQ] = -2;
;	0504	    FIB[FIB$W_FID_RVN] = 0;
;	0505	    IF .CURRENT_VCB[VCB$V_EXTFID]
;	0506	    THEN FIB[FIB$B_FID_NMX] = -1;
;	0507	    KERNEL_CALL (COPY_NAME, .ABD);
;	0508	    RETURN;
;	0509	    END;
;	0510	
;	0511	! Access the directory. We need write access if this is a remove operation.
;	0512	!
;	0513	
;	0514	DIR_ACCESS (.FIB, .REMOVE_MODE);
;	0515	START_BLOCK = 0;			! assume search from start
;	0516	START_REC = 0;
;	0517	START_VER = 0;
;	0518	DIR_RECORD = 0;
;	0519	
;	0520	! If this is a wild card operation (i.e., if the wild card context is nonzero),
;	0521	! position to the indicated record. This is done with the positional context
;	0522	! and the supplied resultant name string, if any.
;	0523	!
;	0524	
;	0525	IF .FIB[FIB$L_WCC] NEQ 0
;	0526	THEN

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:16:17	DBB3:[F11B.SRC]FIND.B32;8					Page 2-2
;
;	0527	    BEGIN
;	0528	    START_BLOCK = .(FIB[FIB$L_WCC])<6,10>;
;	0529	    START_REC = .(FIB[FIB$L_WCC])<0,6>;
;	0530	    COUNT = MINU (.ABD[ABD$C_RES, ABD$W_COUNT],
;	0531			  IF .ABD[ABD$C_RESL, ABD$W_COUNT] GEQU 2
;	0532			  THEN .(ABD[ABD$C_RESL, ABD$W_TEXT] +
;	0533				.ABD[ABD$C_RESL, ABD$W_TEXT] + 1)<0,16>
;	0534			  ELSE 0
;	0535			 );
;	0536	    PARSE_NAME (NAME_DESC, .COUNT, ABD[ABD$C_RES, ABD$W_TEXT]
;	0537			+ .ABD[ABD$C_RES, ABD$W_TEXT] + 1, 0);
;	0538	
;	0539	! If no resultant string is supplied (noted by a 0 count), position by
;	0540	! scanning over the indicated number of records in the indicated block.
;	0541	!
;	0542	
;	0543	    IF .COUNT EQL 0
;	0544	    THEN
;	0545		BEGIN
;	0546		NAME_DESC[FND_FIND_FID] = 1;
;	0547		DIR_SCAN (NAME_DESC, UPLIT WORD (0, 0, 0), .START_BLOCK, 0, 0, .START_REC);
;	0548		START_VER = .DIR_VERSION;
;	0549		END
;	0550	
;	0551	! If a resultant string is supplied, search the indicated block for the
;	0552	! given entry. If the search fails immediately (no records are traversed),
;	0553	! search again from the start. Thus we are left positioned  at the record,
;	0554	! or where it used to be.
;	0555	!
;	0556	
;	0557	    ELSE
;	0558		BEGIN
;	0559		IF DIR_SCAN (NAME_DESC, 0, .START_BLOCK, 0, 0, -1)
;	0560		THEN
;	0561		    BEGIN
;	0562		    START_VER = .DIR_VERSION + DIR$C_VERSION;
;	0563		    DIR_RECORD = .DIR_RECORD + 1;
;	0564		    END
;	0565		ELSE IF
;	0566		    (
;	0567		    IF .DIR_VBN - 1 EQL .START_BLOCK
;	0568		    AND .DIR_RECORD EQL 0
;	0569		    THEN DIR_SCAN (NAME_DESC, 0, 0, 0, 0, -1)
;	0570		    ELSE 0
;	0571		    )
;	0572		THEN
;	0573		    BEGIN
;	0574		    START_VER = .DIR_VERSION + DIR$C_VERSION;
;	0575		    DIR_RECORD = .DIR_RECORD + 1;
;	0576		    END
;	0577		ELSE START_VER = .DIR_VERSION;
;	0578		END;
;	0579	
;	0580	    START_REC = .DIR_ENTRY;
;	0581	    START_BLOCK = .DIR_VBN - 1;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:16:17	DBB3:[F11B.SRC]FIND.B32;8					Page 2-3
;
;	0582	    END;
;	0583	
;	0584	! Now parse the file name and search for the given entry.
;	0585	!
;	0586	
;	0587	PARSE_NAME (NAME_DESC, .ABD[ABD$C_NAME, ABD$W_COUNT],
;	0588		    ABD[ABD$C_NAME, ABD$W_TEXT] + .ABD[ABD$C_NAME, ABD$W_TEXT] + 1, .FIB[FIB$W_NMCTL]);
;	0589	
;	0590	! If this is a wild card name/type, default version lookup, and we have matched
;	0591	! on previous name, bump to the next record to avoid false matches.
;	0592	!
;	0593	
;	0594	IF  .START_VER NEQ 0
;	0595	AND NOT .NAME_DESC[FND_WILD_VER]
;	0596	AND .NAME_DESC[FND_VERSION] LEQ 0
;	0597	THEN
;	0598	    BEGIN
;	0599	    START_REC = NEXT_REC (.START_REC);
;	0600	    DIR_RECORD = .DIR_RECORD + (.START_REC-.START_VER) / DIR$C_VERSION;
;	0601	    START_VER = 0;
;	0602	    END;
;	0603	
;	0604	IF NOT DIR_SCAN (NAME_DESC, FIB[FIB$W_FID], .START_BLOCK, .START_REC, .START_VER, -1)
;	0605	THEN
;	0606	    IF .FIB[FIB$L_WCC] EQL 0
;	0607	    THEN ERR_EXIT (SS$_NOSUCHFILE)
;	0608	    ELSE
;	0609		BEGIN
;	0610		FIB[FIB$L_WCC] = 0;
;	0611		ERR_EXIT (SS$_NOMOREFILES);
;	0612		END;
;	0613	
;	0614	! Extract the file ID and context of the found entry and return the resultant
;	0615	! string.
;	0616	!
;	0617	
;	0618	CH$MOVE (FID$C_LENGTH, DIR_VERSION[DIR$W_FID], FIB[FIB$W_FID]);
;	0619	IF .FIB[FIB$V_WILD]
;	0620	THEN
;	0621	    FIB[FIB$L_WCC] = (.DIR_VBN-1) ^ 6 + .DIR_RECORD + 1
;	0622	ELSE
;	0623	    FIB[FIB$L_WCC] = 0;
;	0624	
;	0625	KERNEL_CALL (RETURN_DIR, RESULT_LENGTH, RESULT_STRING, .ABD);
;	0626	
;	0627	! If this is a REMOVE function, do so.
;	0628	!
;	0629	
;	0630	IF .REMOVE_MODE
;	0631	THEN REMOVE ();
;	0632	
;	0633	! Stop metering of this subfunction.
;	0634	!
;	0635	
;	0636	PMS_END_SUB ();

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:16:17	DBB3:[F11B.SRC]FIND.B32;8					Page 2-4
;
;	0637	
;	0638	END;					! end of routine FIND


							    .TITLE  FIND
							    .IDENT  \B0007A\

							    .PSECT  $CODE$,NOWRT,2

			    0000  0000  0000  00000 P.AAA:  .WORD   0, 0, 0						      ;
					      00006	    .BLKB   2

							    .EXTRN  CLEANUP_FLAGS, DIR_RECORD, DIR_VBN, DIR_ENTRY
							    .EXTRN  DIR_VERSION, CURRENT_VCB, PMS_START_SUB, PMS_END_SUB
							    .EXTRN  COPY_NAME, DIR_ACCESS, PARSE_NAME, DIR_SCAN, NEXT_REC
							    .EXTRN  RETURN_DIR, REMOVE, SYS$CMKRNL

					 0FFC 00008 	    .ENTRY  FIND, Save R2,R3,R4,R5,R6,R7,R8,R9,R10,R11		      ; 0417
		         5B 	0000G  CF  9E 0000A 	    MOVAB   DIR_VERSION, R11					      ;
		         5A 	0000G  CF  9E 0000F 	    MOVAB   DIR_VBN, R10					      ;
		         59 	0000G  CF  9E 00014 	    MOVAB   DIR_SCAN, R9					      ;
		         58 00000000G  9F  9E 00019 	    MOVAB   @#SYS$CMKRNL, R8					      ;
		         57 	0000G  CF  9E 00020 	    MOVAB   DIR_RECORD, R7					      ;
		         5E 	       28  C2 00025 	    SUBL2   #40, SP						      ;
				       06  DD 00028 	    PUSHL   #6							      ; 0493
		  0000G  CF	       01  FB 0002A 	    CALLS   #1, PMS_START_SUB					      ;
	   2C 	  0000G  CF	       07  E1 0002F 	    BBC     #7, CLEANUP_FLAGS, 2$				      ; 0499
		         50 	  08   AC  D0 00035 	    MOVL    FIB, R0						      ; 0502
		    04   A0 FFFEFFFE   8F  D0 00039 	    MOVL    #-65538, 4(R0)					      ;
				  08   A0  B4 00041 	    CLRW    8(R0)						      ; 0504
		         51 	0000G  CF  D0 00044 	    MOVL    CURRENT_VCB, R1					      ; 0505
	   04 	    0B   A1	       05  E1 00049 	    BBC     #5, 11(R1), 1$					      ;
		    09   A0	       01  8E 0004E 	    MNEGB   #1, 9(R0)						      ; 0506
				  04   AC  DD 00052 1$:     PUSHL   ABD							      ; 0507
				       01  DD 00055 	    PUSHL   #1							      ;
				       5E  DD 00057 	    PUSHL   SP							      ;
				0000G  CF  9F 00059 	    PUSHAB  COPY_NAME						      ;
		         68 	       04  FB 0005D 	    CALLS   #4, SYS$CMKRNL					      ;
					   04 00060 	    RET     							      ; 0508
				  0C   AC  DD 00061 2$:     PUSHL   REMOVE_MODE						      ; 0514
		         52 	  08   AC  D0 00064 	    MOVL    FIB, R2						      ;
				       52  DD 00068 	    PUSHL   R2							      ;
		  0000G  CF	       02  FB 0006A 	    CALLS   #2, DIR_ACCESS					      ;
				       55  7C 0006F 	    CLRQ    START_REC						      ; 0516
				       54  D4 00071 	    CLRL    START_VER						      ; 0517
				       67  D4 00073 	    CLRL    DIR_RECORD						      ; 0518
				  10   A2  D5 00075 	    TSTL    16(R2)						      ; 0525
				       03  12 00078 	    BNEQ    3$							      ;
				     00AB  31 0007A 	    BRW     11$							      ;
      10   A2	         0A 	       06  EF 0007D 3$:     EXTZV   #6, #10, 16(R2), START_BLOCK			      ; 0528
				       56     00082									      ;
      10   A2	         06 	       00  EF 00083 	    EXTZV   #0, #6, 16(R2), START_REC				      ; 0529
				       55     00088									      ;
		         50 	  04   AC  D0 00089 	    MOVL    ABD, R0						      ; 0530
		         02 	  1A   A0  B1 0008D 	    CMPW    26(R0), #2						      ; 0531

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:16:17	DBB3:[F11B.SRC]FIND.B32;8					Page 2-5
;
				       10  1F 00091 	    BLSSU   4$							      ;
		         51 	       50  D0 00093 	    MOVL    R0, R1						      ; 0533
		         51 	  18   A1  3C 00096 	    MOVZWL  24(R1), R1						      ;
				  19 A041  9F 0009A 	    PUSHAB  25(R0)[R1]						      ; 0531
		         53 	       9E  3C 0009E 	    MOVZWL  @(SP)+, R3						      ;
				       02  11 000A1 	    BRB     5$							      ;
				       53  D4 000A3 4$:     CLRL    R3							      ;
		         51 	  22   A0  3C 000A5 5$:     MOVZWL  34(R0), R1						      ; 0530
		         53 	       51  D1 000A9 	    CMPL    R1, R3						      ;
				       03  1B 000AC 	    BLEQU   6$							      ;
		         51 	       53  D0 000AE 	    MOVL    R3, R1						      ;
		         53 	       51  D0 000B1 6$:     MOVL    R1, COUNT						      ;
				       7E  D4 000B4 	    CLRL    -(SP)						      ; 0536
		         51 	       50  D0 000B6 	    MOVL    R0, R1						      ; 0537
		         51 	  20   A1  3C 000B9 	    MOVZWL  32(R1), R1						      ;
				  21 A041  9F 000BD 	    PUSHAB  33(R0)[R1]						      ;
				       53  DD 000C1 	    PUSHL   COUNT						      ; 0536
				  24   AE  9F 000C3 	    PUSHAB  NAME_DESC						      ;
		  0000G  CF	       04  FB 000C6 	    CALLS   #4, PARSE_NAME					      ;
				       53  D5 000CB 	    TSTL    COUNT						      ; 0543
				       16  12 000CD 	    BNEQ    7$							      ;
		    19   AE	       08  88 000CF 	    BISB2   #8, NAME_DESC+1					      ; 0546
				       55  DD 000D3 	    PUSHL   START_REC						      ; 0547
				       7E  7C 000D5 	    CLRQ    -(SP)						      ;
				       56  DD 000D7 	    PUSHL   START_BLOCK						      ;
				FF23   CF  9F 000D9 	    PUSHAB  P.AAA						      ;
				  2C   AE  9F 000DD 	    PUSHAB  NAME_DESC						      ;
		         69 	       06  FB 000E0 	    CALLS   #6, DIR_SCAN					      ;
				       37  11 000E3 	    BRB     9$							      ; 0548
		         7E 	       01  CE 000E5 7$:     MNEGL   #1, -(SP)						      ; 0559
				       7E  7C 000E8 	    CLRQ    -(SP)						      ;
				       56  DD 000EA 	    PUSHL   START_BLOCK						      ;
				       7E  D4 000EC 	    CLRL    -(SP)						      ;
				  2C   AE  9F 000EE 	    PUSHAB  NAME_DESC						      ;
		         69 	       06  FB 000F1 	    CALLS   #6, DIR_SCAN					      ;
		         1D 	       50  E8 000F4 	    BLBS    R0, 8$						      ;
	   50 	         6A 	       01  C3 000F7 	    SUBL3   #1, DIR_VBN, R0					      ; 0567
		         56 	       50  D1 000FB 	    CMPL    R0, START_BLOCK					      ;
				       1C  12 000FE 	    BNEQ    9$							      ;
				       67  D5 00100 	    TSTL    DIR_RECORD						      ; 0568
				       18  12 00102 	    BNEQ    9$							      ;
		         7E 	       01  CE 00104 	    MNEGL   #1, -(SP)						      ; 0569
				       7E  7C 00107 	    CLRQ    -(SP)						      ;
				       7E  7C 00109 	    CLRQ    -(SP)						      ;
				  2C   AE  9F 0010B 	    PUSHAB  NAME_DESC						      ;
		         69 	       06  FB 0010E 	    CALLS   #6, DIR_SCAN					      ;
		         08 	       50  E9 00111 	    BLBC    R0, 9$						      ;
	   54 	         6B 	       08  C1 00114 8$:     ADDL3   #8, DIR_VERSION, START_VER				      ; 0574
				       67  D6 00118 	    INCL    DIR_RECORD						      ; 0575
				       03  11 0011A 	    BRB     10$							      ; 0565
		         54 	       6B  D0 0011C 9$:     MOVL    DIR_VERSION, START_VER				      ; 0577
		         55 	0000G  CF  D0 0011F 10$:    MOVL    DIR_ENTRY, START_REC				      ; 0580
	   56 	         6A 	       01  C3 00124 	    SUBL3   #1, DIR_VBN, START_BLOCK				      ; 0581
		         7E 	  14   A2  3C 00128 11$:    MOVZWL  20(R2), -(SP)					      ; 0587
		         51 	  04   AC  D0 0012C 	    MOVL    ABD, R1						      ; 0588

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:16:17	DBB3:[F11B.SRC]FIND.B32;8					Page 2-6
;
		         50 	       51  D0 00130 	    MOVL    R1, R0						      ;
		         50 	  10   A0  3C 00133 	    MOVZWL  16(R0), R0						      ;
				  11 A140  9F 00137 	    PUSHAB  17(R1)[R0]						      ;
		         7E 	  12   A1  3C 0013B 	    MOVZWL  18(R1), -(SP)					      ; 0587
				  24   AE  9F 0013F 	    PUSHAB  NAME_DESC						      ;
		  0000G  CF	       04  FB 00142 	    CALLS   #4, PARSE_NAME					      ;
				       54  D5 00147 	    TSTL    START_VER						      ; 0594
				       20  13 00149 	    BEQL    12$							      ;
	   1B 	    18   AE	       03  E0 0014B 	    BBS     #3, NAME_DESC, 12$					      ; 0595
				  24   AE  B5 00150 	    TSTW    NAME_DESC+12					      ; 0596
				       16  14 00153 	    BGTR    12$							      ;
				       55  DD 00155 	    PUSHL   START_REC						      ; 0599
		  0000G  CF	       01  FB 00157 	    CALLS   #1, NEXT_REC					      ;
		         55 	       50  D0 0015C 	    MOVL    R0, START_REC					      ;
	   50 	         55 	       54  C3 0015F 	    SUBL3   START_VER, START_REC, R0				      ; 0600
		         50 	       08  C6 00163 	    DIVL2   #8, R0						      ;
		         67 	       50  C0 00166 	    ADDL2   R0, DIR_RECORD					      ;
				       54  D4 00169 	    CLRL    START_VER						      ; 0601
		         7E 	       01  CE 0016B 12$:    MNEGL   #1, -(SP)						      ; 0604
				       54  DD 0016E 	    PUSHL   START_VER						      ;
				       55  DD 00170 	    PUSHL   START_REC						      ;
				       56  DD 00172 	    PUSHL   START_BLOCK						      ;
				  04   A2  9F 00174 	    PUSHAB  4(R2)						      ;
				  2C   AE  9F 00177 	    PUSHAB  NAME_DESC						      ;
		         69 	       06  FB 0017A 	    CALLS   #6, DIR_SCAN					      ;
		         12 	       50  E8 0017D 	    BLBS    R0, 14$						      ;
				  10   A2  D5 00180 	    TSTL    16(R2)						      ; 0606
				       05  12 00183 	    BNEQ    13$							      ;
				0910   8F  BF 00185 	    CHMU    #2320						      ; 0607
					   04 00189 	    RET     							      ;
				  10   A2  D4 0018A 13$:    CLRL    16(R2)						      ; 0610
				0930   8F  BF 0018D 	    CHMU    #2352						      ; 0611
					   04 00191 	    RET     							      ;
		         50 	       6B  D0 00192 14$:    MOVL    DIR_VERSION, R0					      ; 0618
		         56 	  08   AC  D0 00195 	    MOVL    FIB, R6						      ;
      04   A6	    02   A0	       06  28 00199 	    MOVC3   #6, 2(R0), 4(R6)					      ;
		         0E 	  15   A6  E9 0019F 	    BLBC    21(R6), 15$						      ; 0619
	   50 	         6A 	       06  78 001A3 	    ASHL    #6, DIR_VBN, R0					      ; 0621
		         50 	       67  C0 001A7 	    ADDL2   DIR_RECORD, R0					      ;
		    10   A6	  C1   A0  9E 001AA 	    MOVAB   -63(R0), 16(R6)					      ;
				       03  11 001AF 	    BRB     16$							      ; 0619
				  10   A6  D4 001B1 15$:    CLRL    16(R6)						      ; 0623
				  04   AC  DD 001B4 16$:    PUSHL   ABD							      ; 0625
				  08   AE  9F 001B7 	    PUSHAB  RESULT_STRING					      ;
				  08   AE  9F 001BA 	    PUSHAB  RESULT_LENGTH					      ;
				       03  DD 001BD 	    PUSHL   #3							      ;
				       5E  DD 001BF 	    PUSHL   SP							      ;
				0000G  CF  9F 001C1 	    PUSHAB  RETURN_DIR						      ;
		         68 	       06  FB 001C5 	    CALLS   #6, SYS$CMKRNL					      ;
		         05 	  0C   AC  E9 001C8 	    BLBC    REMOVE_MODE, 17$					      ; 0630
		  0000G  CF	       00  FB 001CC 	    CALLS   #0, REMOVE						      ; 0631
		  0000G  CF	       00  FB 001D1 17$:    CALLS   #0, PMS_END_SUB					      ; 0636
					   04 001D6 	    RET     							      ; 0417

; Routine Size:  463 bytes

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:16:17	DBB3:[F11B.SRC]FIND.B32;8					Page 2-7
;


;	0639	
;	0640	END
;	0641	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $CODE$         	   471  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        27         0       238





; Size:		463 code + 8 data bytes
; Run Time:	00:10.7
; Elapsed Time:	00:22.0
; Memory Used:	356 pages
; Compilation Complete
