
; Bliss-32 10.1-416	Monday 21-AUG-1978 23:15:58	DBB3:[F11B.SRC]FILUTL.B32;7					Page 1
;
;	0001	MODULE FILUTL (
;	0002			LANGUAGE (BLISS32),
;	0003			IDENT = 'B0001'
;	0004			) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1977
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	!
;	0028	! FACILITY:  F11ACP Structure Level 2
;	0029	!
;	0030	! ABSTRACT:
;	0031	!
;	0032	!	This module contains routines used to access random files by the
;	0033	!	ACP itself.
;	0034	!
;	0035	! ENVIRONMENT:
;	0036	!
;	0037	!	STARLET operating system, including privileged system services
;	0038	!	and internal exec routines.
;	0039	!
;	0040	!--
;	0041	!
;	0042	!
;	0043	! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  22-May-1978  19:13
;	0044	!
;	0045	! REVISION HISTORY:
;	0046	!
;	0047	!**
;	0048	
;	0049	
;	0050	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0051	REQUIRE 'SRC$:FCPDEF.B32';
;	0400	
;	0401	
;	0402	FORWARD ROUTINE
;	0403		OPEN_FILE,			! open a file

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:15:58	DBB3:[F11B.SRC]FILUTL.B32;7					Page 1-1
;
;	0404		READ_DATA,			! read data from file
;	0405		CLOSE_FILE	: NOVALUE;	! close a file

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:15:58	DBB3:[F11B.SRC]FILUTL.B32;7					Page 2
;
;	0406	GLOBAL ROUTINE OPEN_FILE (FID, WRITE) =
;	0407	
;	0408	!++
;	0409	!
;	0410	! FUNCTIONAL DESCRIPTION:
;	0411	!
;	0412	!	This routine opens the file of the given file ID. It constructs an
;	0413	!	FCB and window and returns the address of the latter.
;	0414	!
;	0415	!
;	0416	! CALLING SEQUENCE:
;	0417	!	OPEN_FILE (ARG1, ARG2)
;	0418	!
;	0419	! INPUT PARAMETERS:
;	0420	!	ARG1: address of file ID of file to open
;	0421	!	ARG2: = 0 to open read only
;	0422	!		1 to open read/write
;	0423	!
;	0424	! IMPLICIT INPUTS:
;	0425	!	NONE
;	0426	!
;	0427	! OUTPUT PARAMETERS:
;	0428	!	NONE
;	0429	!
;	0430	! IMPLICIT OUTPUTS:
;	0431	!	PRIMARY_FCB: address of FCB created or found
;	0432	!	CURRENT_WINDOW: address of window created
;	0433	!
;	0434	! ROUTINE VALUE:
;	0435	!	address of window created
;	0436	!
;	0437	! SIDE EFFECTS:
;	0438	!	FCB and window created
;	0439	!
;	0440	!--
;	0441	
;	0442	BEGIN
;	0443	
;	0444	MAP
;	0445		FID		: REF BBLOCK;	! file ID arg
;	0446	
;	0447	LOCAL
;	0448		FCB		: REF BBLOCK,	! file control block address
;	0449		WINDOW		: REF BBLOCK,	! window address
;	0450		HEADER		: REF BBLOCK;	! file header address
;	0451	
;	0452	EXTERNAL
;	0453		CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
;	0454		PRIMARY_FCB	: REF BBLOCK,	! global FCB address
;	0455		CURRENT_WINDOW	: REF BBLOCK;	! global window address
;	0456	
;	0457	EXTERNAL ROUTINE
;	0458		SEARCH_FCB,			! search for FCB of file
;	0459		READ_HEADER,			! read file header
;	0460		CREATE_FCB,			! create a file control block

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:15:58	DBB3:[F11B.SRC]FILUTL.B32;7					Page 2-1
;
;	0461		CREATE_WINDOW;			! create a file window
;	0462	
;	0463	
;	0464	! Search the FCB list for the given file ID. If found, arbitrate access
;	0465	! interlocks. Note that if we create an FCB, we do not bother with access
;	0466	! counts, etc., since it will disappear at the end of this call.
;	0467	!
;	0468	
;	0469	FCB = SEARCH_FCB (.FID);
;	0470	IF .FCB NEQ 0
;	0471	THEN
;	0472	    IF .FCB[FCB$V_EXCL]
;	0473	    OR .WRITE AND .FCB[FCB$W_LCNT] NEQ 0
;	0474	    THEN ERR_EXIT (SS$_ACCONFLICT);
;	0475	
;	0476	HEADER = READ_HEADER (.FID, .FCB);
;	0477	
;	0478	IF .FCB EQL 0
;	0479	THEN FCB = KERNEL_CALL (CREATE_FCB, .HEADER);
;	0480	PRIMARY_FCB = .FCB;
;	0481	
;	0482	CURRENT_WINDOW = WINDOW = KERNEL_CALL (CREATE_WINDOW, 0, 0, .HEADER, 0, .FCB);
;	0483	CLEANUP_FLAGS[CLF_CLOSEFILE] = 1;
;	0484	
;	0485	RETURN .WINDOW;
;	0486	
;	0487	END;					! end of routine OPEN_FILE


							    .TITLE  FILUTL
							    .IDENT  \B0001\

							    .EXTRN  CLEANUP_FLAGS, PRIMARY_FCB, CURRENT_WINDOW, SEARCH_FCB
							    .EXTRN  READ_HEADER, CREATE_FCB, CREATE_WINDOW, SYS$CMKRNL

							    .PSECT  $CODE$,NOWRT,2

					 001C 00000 	    .ENTRY  OPEN_FILE, Save R2,R3,R4				      ; 0406
		         54 00000000G  9F  9E 00002 	    MOVAB   @#SYS$CMKRNL, R4					      ;
				  04   AC  DD 00009 	    PUSHL   FID							      ; 0469
		  0000G  CF	       01  FB 0000C 	    CALLS   #1, SEARCH_FCB					      ;
		         52 	       50  D0 00011 	    MOVL    R0, FCB						      ;
				       14  13 00014 	    BEQL    2$							      ; 0470
	   09 	    1E   A2	       03  E0 00016 	    BBS     #3, 30(FCB), 1$					      ; 0472
		         0B 	  08   AC  E9 0001B 	    BLBC    WRITE, 2$						      ; 0473
				  1A   A2  B5 0001F 	    TSTW    26(FCB)						      ;
				       06  13 00022 	    BEQL    2$							      ;
				0800   8F  BF 00024 1$:     CHMU    #2048						      ; 0474
				       44  11 00028 	    BRB     4$							      ;
				       52  DD 0002A 2$:     PUSHL   FCB							      ; 0476
				  04   AC  DD 0002C 	    PUSHL   FID							      ;
		  0000G  CF	       02  FB 0002F 	    CALLS   #2, READ_HEADER					      ;
		         53 	       50  D0 00034 	    MOVL    R0, HEADER						      ;
				       52  D5 00037 	    TSTL    FCB							      ; 0478
				       10  12 00039 	    BNEQ    3$							      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:15:58	DBB3:[F11B.SRC]FILUTL.B32;7					Page 2-2
;
				       53  DD 0003B 	    PUSHL   HEADER						      ; 0479
				       01  DD 0003D 	    PUSHL   #1							      ;
				       5E  DD 0003F 	    PUSHL   SP							      ;
				0000G  CF  9F 00041 	    PUSHAB  CREATE_FCB						      ;
		         64 	       04  FB 00045 	    CALLS   #4, SYS$CMKRNL					      ;
		         52 	       50  D0 00048 	    MOVL    R0, FCB						      ;
		  0000G  CF	       52  D0 0004B 3$:     MOVL    FCB, PRIMARY_FCB					      ; 0480
				       52  DD 00050 	    PUSHL   FCB							      ; 0482
				       7E  D4 00052 	    CLRL    -(SP)						      ;
				       53  DD 00054 	    PUSHL   HEADER						      ;
				       7E  7C 00056 	    CLRQ    -(SP)						      ;
				       05  DD 00058 	    PUSHL   #5							      ;
				       5E  DD 0005A 	    PUSHL   SP							      ;
				0000G  CF  9F 0005C 	    PUSHAB  CREATE_WINDOW					      ;
		         64 	       08  FB 00060 	    CALLS   #8, SYS$CMKRNL					      ;
		  0000G  CF	       50  D0 00063 	    MOVL    WINDOW, CURRENT_WINDOW				      ;
		  0000G  CF	       01  88 00068 	    BISB2   #1, CLEANUP_FLAGS+3					      ; 0483
					   04 0006D 	    RET     							      ; 0485
				       50  D4 0006E 4$:     CLRL    R0							      ; 0406
					   04 00070 	    RET     							      ;

; Routine Size:  113 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 23:15:58	DBB3:[F11B.SRC]FILUTL.B32;7					Page 3
;
;	0488	GLOBAL ROUTINE READ_DATA (WINDOW, VBN, COUNT) =
;	0489	
;	0490	!++
;	0491	!
;	0492	! FUNCTIONAL DESCRIPTION:
;	0493	!
;	0494	!	This routine reads the specified data block(s) from the file indicated
;	0495	!	by the given window address. Note that the actual number of blocks
;	0496	!	read may be less than the number desired due to mapping fragmentation
;	0497	!	or cache limitations.
;	0498	!
;	0499	!
;	0500	! CALLING SEQUENCE:
;	0501	!	READ_DATA (ARG1, ARG2, ARG3)
;	0502	!
;	0503	! INPUT PARAMETERS:
;	0504	!	ARG1: window address
;	0505	!	ARG2: starting VBN to read
;	0506	!	ARG3: count of blocks to read
;	0507	!
;	0508	! IMPLICIT INPUTS:
;	0509	!	NONE
;	0510	!
;	0511	! OUTPUT PARAMETERS:
;	0512	!	NONE
;	0513	!
;	0514	! IMPLICIT OUTPUTS:
;	0515	!	NONE
;	0516	!
;	0517	! ROUTINE VALUE:
;	0518	!	address of buffer read
;	0519	!
;	0520	! SIDE EFFECTS:
;	0521	!	block read, window may be turned
;	0522	!
;	0523	!--
;	0524	
;	0525	BEGIN
;	0526	
;	0527	MAP
;	0528		WINDOW		: REF BBLOCK;	! window argument
;	0529	
;	0530	LOCAL
;	0531		LBN,				! LBN of starting virtual block
;	0532		UNMAPPED,			! number of desired blocks not mapped
;	0533		BUFFER		: REF BBLOCK;	! address of block read
;	0534	
;	0535	EXTERNAL ROUTINE
;	0536		MAP_VBN,			! map virtual to logical
;	0537		READ_BLOCK;			! read a disk block
;	0538	
;	0539	
;	0540	! Map the VBN to LBN using the supplied window. If the map fails, return a
;	0541	! zero buffer address.
;	0542	!

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:15:58	DBB3:[F11B.SRC]FILUTL.B32;7					Page 3-1
;
;	0543	
;	0544	LBN = MAP_VBN (.VBN, .WINDOW, .COUNT, UNMAPPED);
;	0545	IF .LBN EQL -1 THEN RETURN 0;
;	0546	
;	0547	BUFFER = READ_BLOCK (.LBN, .COUNT - .UNMAPPED, DATA_TYPE);
;	0548	RETURN .BUFFER;
;	0549	
;	0550	END;					! end of routine READ_DATA



							    .EXTRN  MAP_VBN, READ_BLOCK

					 0000 00071 	    .ENTRY  READ_DATA, Save nothing				      ; 0488
		         5E 	       04  C2 00073 	    SUBL2   #4, SP						      ;
				       5E  DD 00076 	    PUSHL   SP							      ; 0544
				  0C   AC  DD 00078 	    PUSHL   COUNT						      ;
				  04   AC  DD 0007B 	    PUSHL   WINDOW						      ;
				  08   AC  DD 0007E 	    PUSHL   VBN							      ;
		  0000G  CF	       04  FB 00081 	    CALLS   #4, MAP_VBN						      ;
	      FFFFFFFF   8F	       50  D1 00086 	    CMPL    LBN, #-1						      ; 0545
				       10  13 0008D 	    BEQL    1$							      ;
				       04  DD 0008F 	    PUSHL   #4							      ; 0547
	   7E 	    0C   AC	  04   AE  C3 00091 	    SUBL3   UNMAPPED, COUNT, -(SP)				      ;
				       50  DD 00097 	    PUSHL   LBN							      ;
		  0000G  CF	       03  FB 00099 	    CALLS   #3, READ_BLOCK					      ;
					   04 0009E 	    RET     							      ; 0548
				       50  D4 0009F 1$:     CLRL    R0							      ; 0488
					   04 000A1 	    RET     							      ;

; Routine Size:  49 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 23:15:58	DBB3:[F11B.SRC]FILUTL.B32;7					Page 4
;
;	0551	GLOBAL ROUTINE CLOSE_FILE (WINDOW) : NOVALUE =
;	0552	
;	0553	!++
;	0554	!
;	0555	! FUNCTIONAL DESCRIPTION:
;	0556	!
;	0557	!	This routine closes the file indicated by the supplied window
;	0558	!	by releasing the window and FCB.
;	0559	!
;	0560	!
;	0561	! CALLING SEQUENCE:
;	0562	!	CLOSE_FILE (ARG1)
;	0563	!
;	0564	! INPUT PARAMETERS:
;	0565	!	ARG1: address of window
;	0566	!
;	0567	! IMPLICIT INPUTS:
;	0568	!	NONE
;	0569	!
;	0570	! OUTPUT PARAMETERS:
;	0571	!	NONE
;	0572	!
;	0573	! IMPLICIT OUTPUTS:
;	0574	!	PRIMARY_FCB: 0
;	0575	!	CURRENT_WINDOW: 0
;	0576	!
;	0577	! ROUTINE VALUE:
;	0578	!	NONE
;	0579	!
;	0580	! SIDE EFFECTS:
;	0581	!	FCB and window deallocated
;	0582	!
;	0583	!--
;	0584	
;	0585	BEGIN
;	0586	
;	0587	MAP
;	0588		WINDOW		: REF BBLOCK;	! window argument
;	0589	
;	0590	LOCAL
;	0591		FCB		: REF BBLOCK;	! FCB of file
;	0592	
;	0593	EXTERNAL
;	0594		CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
;	0595		PRIMARY_FCB	: REF BBLOCK,	! global FCB address
;	0596		CURRENT_WINDOW	: REF BBLOCK;	! global window address
;	0597	
;	0598	EXTERNAL ROUTINE
;	0599		DEALLOCATE,			! deallocate dynamic memory
;	0600		FLUSH_FID;			! flush file from buffer pool
;	0601	
;	0602	
;	0603	! Find the FCB. Deallocate the window, and the FCB if it is not otherwise
;	0604	! accessed. Also flush data blocks of the file from the buffer pool.
;	0605	!

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:15:58	DBB3:[F11B.SRC]FILUTL.B32;7					Page 4-1
;
;	0606	
;	0607	FCB = .WINDOW[WCB$L_FCB];
;	0608	FLUSH_FID (FCB[FCB$W_FID]);
;	0609	
;	0610	KERNEL_CALL (DEALLOCATE, .WINDOW);
;	0611	IF .FCB[FCB$W_ACNT] EQL 0
;	0612	AND NOT .FCB[FCB$V_DIR]
;	0613	THEN KERNEL_CALL (DEALLOCATE, .FCB);
;	0614	
;	0615	PRIMARY_FCB = 0;
;	0616	CURRENT_WINDOW = 0;
;	0617	CLEANUP_FLAGS[CLF_CLOSEFILE] = 0;
;	0618	
;	0619	END;					! end of routine CLOSE_FILE



							    .EXTRN  DEALLOCATE, FLUSH_FID

					 001C 000A2 	    .ENTRY  CLOSE_FILE, Save R2,R3,R4				      ; 0551
		         54 00000000G  9F  9E 000A4 	    MOVAB   @#SYS$CMKRNL, R4					      ;
		         53 	  04   AC  D0 000AB 	    MOVL    WINDOW, R3						      ; 0607
		         52 	  18   A3  D0 000AF 	    MOVL    24(R3), FCB						      ;
				  20   A2  9F 000B3 	    PUSHAB  32(FCB)						      ; 0608
		  0000G  CF	       01  FB 000B6 	    CALLS   #1, FLUSH_FID					      ;
				       53  DD 000BB 	    PUSHL   R3							      ; 0610
				       01  DD 000BD 	    PUSHL   #1							      ;
				       5E  DD 000BF 	    PUSHL   SP							      ;
				0000G  CF  9F 000C1 	    PUSHAB  DEALLOCATE						      ;
		         64 	       04  FB 000C5 	    CALLS   #4, SYS$CMKRNL					      ;
				  18   A2  B5 000C8 	    TSTW    24(FCB)						      ; 0611
				       11  12 000CB 	    BNEQ    1$							      ;
		         0D 	  1E   A2  E8 000CD 	    BLBS    30(FCB), 1$						      ; 0612
				       52  DD 000D1 	    PUSHL   FCB							      ; 0613
				       01  DD 000D3 	    PUSHL   #1							      ;
				       5E  DD 000D5 	    PUSHL   SP							      ;
				0000G  CF  9F 000D7 	    PUSHAB  DEALLOCATE						      ;
		         64 	       04  FB 000DB 	    CALLS   #4, SYS$CMKRNL					      ;
				0000G  CF  D4 000DE 1$:     CLRL    PRIMARY_FCB						      ; 0615
				0000G  CF  D4 000E2 	    CLRL    CURRENT_WINDOW					      ; 0616
		  0000G  CF	       01  8A 000E6 	    BICB2   #1, CLEANUP_FLAGS+3					      ; 0617
					   04 000EB 	    RET     							      ; 0551

; Routine Size:  74 bytes


;	0620	
;	0621	END
;	0622	ELUDOM







; Bliss-32 10.1-416	Monday 21-AUG-1978 23:15:58	DBB3:[F11B.SRC]FILUTL.B32;7					Page 4-2
;
;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $CODE$         	   236  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        14         0       231





; Size:		236 code + 0 data bytes
; Run Time:	00:06.8
; Elapsed Time:	00:16.8
; Memory Used:	271 pages
; Compilation Complete
