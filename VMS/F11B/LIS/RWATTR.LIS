
; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 1
;
;	0001	MODULE RWATTR (
;	0002			LANGUAGE (BLISS32),
;	0003			IDENT = 'B0022'
;	0004			) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1977
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	!
;	0028	! FACILITY:  F11ACP Structure Level 2
;	0029	!
;	0030	! ABSTRACT:
;	0031	!
;	0032	!	This module contains the code and tables to process the read
;	0033	!	and write attributes functions.
;	0034	!
;	0035	! ENVIRONMENT:
;	0036	!
;	0037	!	STARLET operating system, including privileged system services
;	0038	!	and internal exec routines. This routine must be executed
;	0039	!	in kernel mode.
;	0040	!
;	0041	!--
;	0042	!
;	0043	!
;	0044	! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  6-Jan-1977  21:05
;	0045	!
;	0046	! REVISION HISTORY:
;	0047	!
;	0048	!   Andrew C. Goldstein, 16-Feb-1977  15:17
;	0049	!   X0002 - Modify for condition handling
;	0050	!
;	0051	!   Andrew C. Goldstein, 3-Mar-1977  13:17
;	0052	!   X0003 - Remove ERR_EXIT calls and return value instead
;	0053	!
;	0054	!   Andrew C. Goldstein, 16-Mar-1977  14:23
;	0055	!   X0004 - Checksum header after write attributes

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 1-1
;
;	0056	!
;	0057	!   Andrew C. Goldstein, 11-Apr-1977  15:37
;	0058	!   X0005 - Insert missing length check in statistics block attribute
;	0059	!
;	0060	!   Andrew C. Goldstein, 12-Apr-1977  15:39
;	0061	!   X0006 - Modify for buffer manager
;	0062	!
;	0063	!   Andrew C. Goldstein, 3-May-1977  15:18
;	0064	!   X0007 - Add file protection check
;	0065	!
;	0066	!   Andrew C. Goldstein, 10-May-1977  16:16
;	0067	!   X0008 - Make write of statistics block a nop
;	0068	!
;	0069	!   Andrew C. Goldstein, 26-May-1977  10:30
;	0070	!   X0009 - Move truncation of attribute list on write to I/O done
;	0071	!
;	0072	!   Andrew C. Goldstein, 3-Aug-1977  16:47
;	0073	!   X0010 - Add new attribute codes (thru security mask)
;	0074	!
;	0075	!   Andrew C. Goldstein, 10-Aug-1977  15:35
;	0076	!   X0011 - Update file FCB after write attributes
;	0077	!
;	0078	!   Andrew C. Goldstein, 19-Aug-1977  13:10
;	0079	!   X0012 - Set IRP$V_FUNC to signal valid read attribute buffers
;	0080	!
;	0081	!   Andrew C. Goldstein, 22-Aug-1977  17:00
;	0082	!   X0013 - Make write of statistics block a NOP rather than illegal
;	0083	!
;	0084	!   Andrew C. Goldstein, 26-Aug-1977  10:52
;	0085	!   X0014 - Add performance metering
;	0086	!
;	0087	!   Andrew C. Goldstein, 15-Dec-1977  13:55
;	0088	!   B0015 - Modify for structure level 2
;	0089	!
;	0090	!   Andrew C. Goldstein, 9-Jan-1978  12:12
;	0091	!   B0016 - Add locked attribute protection, protection changes
;	0092	!
;	0093	!   Andrew C. Goldstein, 22-Jan-1978  17:03
;	0094	!   B0017 - Change file name in header to ASCII
;	0095	!
;	0096	!   Andrew C. Goldstein, 23-Jan-1978  22:31
;	0097	!   B0018 - Add area length check of file header attributes
;	0098	!
;	0099	!   Andrew C. Goldstein, 23-Feb-1978  11:36
;	0100	!   B0019 - Add read only UIC attribute
;	0101	!
;	0102	!   Andrew C. Goldstein, 9-Mar-1978  10:38
;	0103	!   B0020 - Bug in writing 2 byte file owner UIC
;	0104	!
;	0105	!   Andrew C. Goldstein, 14-Mar-1978  20:38
;	0106	!   B0021 - Add condition handler for READ_ATTRIB for errors out of MAKE_NAMEBLOCK
;	0107	!
;	0108	!   Andrew C. Goldstein, 21-Jun-78  18:53
;	0109	!   B0022 - Add FCB address to STAT block, FCB directory sequence count
;	0110	!

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 1-2
;
;	0111	!**
;	0112	
;	0113	
;	0114	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0115	REQUIRE 'SRC$:FCPDEF.B32';
;	0464	
;	0465	
;	0466	FORWARD ROUTINE
;	0467		READ_ATTRIB,			! read attributes
;	0468		READ_HANDLER	: NOVALUE,	! read attributes condition handler
;	0469		WRITE_ATTRIB	: NOVALUE,	! write attributes
;	0470		CONVERT_DATE	: NOVALUE,	! convert string date to 64 bit
;	0471		HANDLER		: NOVALUE;	! local condition handler

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 2
;
;	0472	!++
;	0473	!
;	0474	! Attribute control table. The table is indexed by attribute number.
;	0475	! Each entry is a longword. The first byte contains random flags and
;	0476	! the attribute location code in the high 3 bits. The second byte
;	0477	! contains the maximum size of the attribute. The third byte contains
;	0478	! the offset of the attribute from its location origin. The fourth
;	0479	! byte contains the index of the action routine to process the attribute.
;	0480	!
;	0481	!--
;	0482	
;	0483	! Macros and literals to access the table entries.
;	0484	!
;	0485	
;	0486	MACRO
;	0487		ATC_READ_ONLY	= 0,0,1,0%,	! read only attribute
;	0488		ATC_PROTECTED	= 0,1,1,0%,	! writable by file owner only
;	0489		ATC_LOCKED	= 0,2,1,0%,	! subject to file access locks
;	0490		ATC_LOCATION	= 0,5,3,0%,	! 3 bit location code
;	0491		ATC_MAX_SIZE	= 0,8,8,0%,	! max attribute size
;	0492		ATC_OFFSET	= 0,16,8,0%,	! location offset
;	0493		ATC_ACTION	= 0,24,8,0%;	! action routine
;	0494	
;	0495	
;	0496	! Masks for the flags.
;	0497	!
;	0498	
;	0499	LITERAL
;	0500		M_READ_ONLY	= 1,
;	0501		M_PROTECTED	= 2,
;	0502		M_LOCKED	= 4;
;	0503	
;	0504	
;	0505	! Attribute location codes.
;	0506	!
;	0507	
;	0508	LITERAL
;	0509		ATC_ZERO	= 0,		! zero - no location
;	0510		ATC_FCB		= 1,		! in file control block
;	0511		ATC_HEADER	= 2,		! file header header area
;	0512		ATC_IDENT	= 3,		! file header ident area
;	0513		ATC_MAP		= 4;		! file header map area
;	0514	
;	0515	
;	0516	! Attribute processing action routines.
;	0517	!
;	0518	
;	0519	LITERAL
;	0520		ACT_NOP		= 0,		! ignore attribute
;	0521		ACT_ILLEGAL	= 1,		! illegal attribute code
;	0522		ACT_COPY	= 2,		! simple copy
;	0523		ACT_STATBLK	= 3,		! build statistics block
;	0524		ACT_ZERO	= 4,		! zero valued attribute
;	0525		ACT_BLOCKSIZE	= 5,		! medium block size
;	0526		ACT_R50_NAME	= 6,		! RAD-50 file name, type, version

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 2-1
;
;	0527		ACT_R50_TYPE	= 7,		! RAD-50 file type & version
;	0528		ACT_R50_VER	= 8,		! binary version number
;	0529		ACT_UIC		= 9,		! 2 byte file owner, protection, char
;	0530		ACT_FPRO	= 10,		! file protection + characteristics
;	0531		ACT_DATE	= 11,		! ASCII date
;	0532		ACT_DATES	= 12,		! revision count, ASCII dates
;	0533	
;	0534		ACT_LASTACT	= 12;		! highest action routine code
;	0535	
;	0536	
;	0537	! Macro to build table entry.
;	0538	!
;	0539	
;	0540	MACRO
;	0541		ATTRIBUTE (FLAGS, LOC, OFF1, OFF2, OFF3, OFF4, SIZE, ACTION) =
;     M 0542			FLAGS + LOC^5,
;     M 0543			SIZE,
;     M 0544			$BYTEOFFSET (OFF1, OFF2, OFF3, OFF4),
;     M 0545			ACTION
;     M 0546			%;
;	0547	
;	0548	MACRO
;	0549		NULL_FIELD	= 0,0,0,0%;
;	0550	
;	0551	
;	0552	! The attribute control table itself.
;	0553	!
;	0554	
;	0555	BIND
;	0556		ATC	= UPLIT BYTE (
;	0557	
;	0558	ATTRIBUTE (M_PROTECTED,	ATC_HEADER,	FH2$L_FILEOWNER,5,	ACT_UIC),	! 2 byte file owner UIC
;	0559	ATTRIBUTE (M_PROTECTED,	ATC_HEADER,	FH2$W_FILEPROT,	3,	ACT_FPRO),	! file protection code
;	0560	ATTRIBUTE (M_LOCKED,	ATC_HEADER,	FH2$L_FILECHAR,	4,	ACT_COPY),	! file characteristics
;	0561	ATTRIBUTE (M_LOCKED,	ATC_HEADER,	FH2$W_RECATTR,	32,	ACT_COPY),	! record attributes
;	0562	ATTRIBUTE (0,		ATC_IDENT,	FI2$T_FILENAME,	10,	ACT_R50_NAME),	! RAD-50 file name
;	0563	ATTRIBUTE (0,		ATC_IDENT,	FI2$T_FILENAME,	4,	ACT_R50_TYPE),	! RAD-50 file type
;	0564	ATTRIBUTE (0,		ATC_IDENT,	FI2$T_FILENAME,	2,	ACT_R50_VER),	! binary version number
;	0565	ATTRIBUTE (M_PROTECTED,	ATC_IDENT,	FI2$Q_EXPDATE,	7,	ACT_DATE),	! ASCII expiration date
;	0566	ATTRIBUTE (M_READ_ONLY,	ATC_FCB,	NULL_FIELD,	14,	ACT_STATBLK),	! statistics block
;	0567	ATTRIBUTE (M_READ_ONLY,	ATC_HEADER,	NULL_FIELD,	0,	ACT_COPY),	! complete file header
;	0568	ATTRIBUTE (0,		ATC_ZERO,	NULL_FIELD,	2,	ACT_BLOCKSIZE),	! medium block size
;	0569	ATTRIBUTE (0,		ATC_ZERO,	NULL_FIELD,	80,	ACT_ZERO),	! user file label
;	0570	ATTRIBUTE (M_PROTECTED,	ATC_IDENT,	NULL_FIELD,	35,	ACT_DATES),	! revision count thru dates
;	0571	ATTRIBUTE (0,		ATC_ZERO,	NULL_FIELD,	14,	ACT_NOP),	! allocation control data
;	0572	ATTRIBUTE (0,		ATC_ZERO,	NULL_FIELD,	1,	ACT_NOP),	! end of label processing
;	0573	ATTRIBUTE (0,		ATC_IDENT,	FI2$T_FILENAME,	20,	ACT_COPY),	! name, type and version in ASCII
;	0574	ATTRIBUTE (M_PROTECTED,	ATC_IDENT,	FI2$Q_CREDATE,	8,	ACT_COPY),	! 64 bit creation date
;	0575	ATTRIBUTE (M_PROTECTED,	ATC_IDENT,	FI2$Q_REVDATE,	8,	ACT_COPY),	! 64 bit revision date
;	0576	ATTRIBUTE (M_PROTECTED,	ATC_IDENT,	FI2$Q_EXPDATE,	8,	ACT_COPY),	! 64 bit expiration date
;	0577	ATTRIBUTE (M_PROTECTED,	ATC_IDENT,	FI2$Q_BAKDATE,	8,	ACT_COPY),	! 64 bit backup date
;	0578	ATTRIBUTE (M_PROTECTED,	ATC_HEADER,	FH2$L_FILEOWNER,4,	ACT_COPY),	! 4 byte owner UIC
;	0579	ATTRIBUTE (M_PROTECTED,	ATC_HEADER,	FH2$W_FILEPROT,	2,	ACT_COPY),	! file protection code
;	0580	ATTRIBUTE (M_PROTECTED,	ATC_HEADER,	FH2$W_RECPROT,	2,	ACT_COPY),	! record protection
;	0581	ATTRIBUTE (M_PROTECTED,	ATC_HEADER,	FH2$B_ACC_MODE,	1,	ACT_COPY),	! access level

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 2-2
;
;	0582	ATTRIBUTE (M_PROTECTED,	ATC_HEADER,	FH2$L_SEC_MASK,	8,	ACT_COPY),	! security mask
;	0583	ATTRIBUTE (M_READ_ONLY,	ATC_HEADER,	FH2$L_FILEOWNER,4,	ACT_COPY),	! 4 byte owner UIC
;	0584	ATTRIBUTE (M_READ_ONLY,	ATC_FCB,	FCB$W_DIRSEQ,	2,	ACT_COPY)	! directory sequence count
;	0585	
;	0586			) : BLOCKVECTOR [,1];
;	0587	
;	0588	LITERAL
;	0589		MAX_CODE	= 26;		! highest attribute code
;	0590	
;	0591	
;	0592	! User privilege flag - set if user is allowed to write protected attributes.
;	0593	!
;	0594	
;	0595	OWN
;	0596		PRIVILEGE	: VOLATILE BITVECTOR [32];

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 3
;
;	0597	GLOBAL ROUTINE READ_ATTRIB (HEADER, ABD) =
;	0598	
;	0599	!++
;	0600	!
;	0601	! FUNCTIONAL DESCRIPTION:
;	0602	!
;	0603	!	This routine performs the read attributes function. The
;	0604	!	requested attributes are assembled into the buffer packet.
;	0605	!
;	0606	! CALLING SEQUENCE:
;	0607	!	READ_ATTRIB (ARG1, ARG2)
;	0608	!
;	0609	! INPUT PARAMETERS:
;	0610	!	ARG1: address of file header
;	0611	!	ARG2: address of buffer descriptors
;	0612	!
;	0613	! IMPLICIT INPUTS:
;	0614	!	IO_PACKET: I/O packet for this operation
;	0615	!	PRIMARY_FCB: FCB of file
;	0616	!
;	0617	! OUTPUT PARAMETERS:
;	0618	!	ARG2: address of buffer descriptors
;	0619	!
;	0620	! IMPLICIT OUTPUTS:
;	0621	!	NONE
;	0622	!
;	0623	! ROUTINE VALUE:
;	0624	!	1 if successful
;	0625	!	0 if error
;	0626	!
;	0627	! SIDE EFFECTS:
;	0628	!	attribute data written into buffer packet
;	0629	!
;	0630	!--
;	0631	
;	0632	BEGIN
;	0633	
;	0634	MAP
;	0635		HEADER		: REF BBLOCK,	! file header arg
;	0636		ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH];
;	0637						! buffer descriptor arg
;	0638	
;	0639	LOCAL
;	0640		STATUS,				! routine exit status
;	0641		SYSEXV		: VECTOR [2];	! storage for system exception vectors
;	0642	
;	0643	EXTERNAL
;	0644		IO_PACKET	: REF BBLOCK,	! I/O packet in process
;	0645		PRIMARY_FCB	: REF BBLOCK;	! FCB of file
;	0646	
;	0647	EXTERNAL ROUTINE
;	0648		PMS_START_SUB,			! start subfunction metering
;	0649		PMS_END_SUB,			! end subfunction metering
;	0650		GET_TIME,			! convert 64 bit time to ASCII
;	0651		MAKE_NAMEBLOCK;			! convert file string into RAD-50

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 3-1
;
;	0652	
;	0653	
;	0654	ENABLE READ_HANDLER;
;	0655	
;	0656	! Start metering for this subfunction.
;	0657	!
;	0658	
;	0659	PMS_START_SUB (PMS_RWATT);
;	0660	
;	0661	! Disable the kernel vectored exception handlers.
;	0662	!
;	0663	
;	0664	$SETEXV (VECTOR = 0, PRVHND = SYSEXV[0]);
;	0665	$SETEXV (VECTOR = 1, PRVHND = SYSEXV[1]);
;	0666	
;	0667	! ***** For debug: If the previous handler addresses are found to be in
;	0668	! process space, put them back since they belong to the debugger.
;	0669	!
;	0670	
;	0671	IF .SYSEXV[0] GTR 0
;	0672	THEN $SETEXV (VECTOR = 0, ADDRES = .SYSEXV[0]);
;	0673	IF .SYSEXV[1] GTR 0
;	0674	THEN $SETEXV (VECTOR = 1, ADDRES = .SYSEXV[1]);
;	0675	
;	0676	STATUS = 1;				! assume success
;	0677	
;	0678	! Set the buffered read bit in the I/O packet to indicate to IO_DONE that
;	0679	! the attribute buffers are valid.
;	0680	!
;	0681	
;	0682	IO_PACKET[IRP$V_FUNC] = 1;
;	0683	
;	0684	! Scan the buffer packet, picking up each entry. The first byte of the
;	0685	! text is the attribute code, and must be overwritten with the access
;	0686	! mode of the request for the I/O completion processing.
;	0687	!
;	0688	
;	0689	INCR I FROM ABD$C_ATTRIB TO .IO_PACKET[IRP$W_BCNT]-1 DO
;	0690	    BEGIN
;	0691	
;	0692	    LOCAL
;	0693		P,				! pointer to attribute text
;	0694		T,				! temporary pointer
;	0695		COUNT,				! attribute size desired
;	0696		ADDRESS		: REF BBLOCK,	! address of attribute
;	0697		CODE,				! attribute code
;	0698		MAX_COUNT,			! max size of attribute
;	0699		ACTION		: BYTE,		! code of action routine
;	0700		ATT_BUFFER	: BBLOCK [44];	! buffer to build reformatted attribute text
;	0701	
;	0702	    P = .ABD[.I, ABD$W_TEXT] + ABD[.I, ABD$W_TEXT];
;	0703	    COUNT = .ABD[.I, ABD$W_COUNT];
;	0704	    CODE = .(.P)<0,8> - 1;
;	0705	    (.P)<0,8> = .IO_PACKET[IRP$B_RMOD];
;	0706	    P = .P + 1;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 3-2
;
;	0707	
;	0708	! Check the attribute code for legality, and then check the requested
;	0709	! size against the limit. If an error exit is made, first truncate the
;	0710	! descriptor count to inhibit return of the unprocessed descriptors.
;	0711	!
;	0712	
;	0713	    IF .CODE GTR MAX_CODE - 1
;	0714	    THEN
;	0715		BEGIN
;	0716		IO_PACKET[IRP$W_BCNT] = .I;
;	0717		(ERR_STATUS (SS$_BADATTRIB); STATUS = 0; EXITLOOP);
;	0718		END;
;	0719	
;	0720	    MAX_COUNT = .ATC[.CODE, ATC_MAX_SIZE];
;	0721	    IF .MAX_COUNT EQL 0 THEN MAX_COUNT = 512;
;	0722	    IF .COUNT GTR .MAX_COUNT
;	0723	    THEN
;	0724		BEGIN
;	0725		IO_PACKET[IRP$W_BCNT] = .I;
;	0726		(ERR_STATUS (SS$_BADATTRIB); STATUS = 0; EXITLOOP);
;	0727		END;
;	0728	
;	0729	
;	0730	! Get the action routine code first.
;	0731	!
;	0732	
;	0733	    ACTION = .ATC[.CODE, ATC_ACTION];
;	0734	
;	0735	! Compute the address of the attribute.
;	0736	!
;	0737	    
;	0738	    ADDRESS =
;	0739		(
;	0740		CASE .ATC[.CODE, ATC_LOCATION] FROM 0 TO 4 OF
;	0741		    SET
;	0742		    [ATC_ZERO]:		ATT_BUFFER;
;	0743		    [ATC_FCB]:		.PRIMARY_FCB;
;	0744		    [ATC_HEADER]:	BEGIN
;	0745					IF .HEADER[FHD$B_IDOFFSET]*2 LEQU
;	0746					   .ATC[.CODE, ATC_OFFSET]
;	0747					THEN ACTION = ACT_ZERO;
;	0748					.HEADER
;	0749					END;
;	0750		    [ATC_IDENT]:	BEGIN
;	0751					IF .HEADER[FHD$B_MPOFFSET]*2 LEQU
;	0752					   .ATC[.CODE, ATC_OFFSET]
;	0753					THEN ACTION = ACT_ZERO;
;	0754					.HEADER + .HEADER[FH2$B_IDOFFSET]*2
;	0755					END;
;	0756		    [ATC_MAP]:		.HEADER + .HEADER[FH2$B_MPOFFSET]*2;
;	0757		    TES
;	0758		)
;	0759		+ .ATC[.CODE, ATC_OFFSET];
;	0760	    
;	0761	    

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 3-3
;
;	0762	! Finally execute the action routine.
;	0763	!
;	0764	    
;	0765	    CASE .ACTION FROM 0 TO ACT_LASTACT OF
;	0766		SET
;	0767	    
;	0768		[ACT_NOP]:	COUNT = 0;
;	0769	    
;	0770		[ACT_ILLEGAL]:	BEGIN
;	0771				IO_PACKET[IRP$W_BCNT] = .I;
;	0772				(ERR_STATUS (SS$_BADATTRIB); STATUS = 0; EXITLOOP);
;	0773				END;
;	0774	    
;	0775		[ACT_COPY]:	0;
;	0776	    
;	0777		[ACT_STATBLK]:	BEGIN
;	0778				(ATT_BUFFER+0)<0,32> = ROT (.ADDRESS[FCB$L_STLBN], 16);
;	0779				(ATT_BUFFER+4)<0,32> = ROT (.ADDRESS[FCB$L_FILESIZE], 16);
;	0780				(ATT_BUFFER+8)<0,8>  = .ADDRESS[FCB$W_ACNT];
;	0781				(ATT_BUFFER+9)<0,8>  = .ADDRESS[FCB$W_LCNT];
;	0782				(ATT_BUFFER+10)<0,32>= .ADDRESS;
;	0783				ADDRESS = ATT_BUFFER;
;	0784				END;
;	0785	    
;	0786		[ACT_BLOCKSIZE]: ADDRESS = UPLIT (512);
;	0787	
;	0788		[ACT_ZERO]:	BEGIN
;	0789				CH$FILL (0, .COUNT, .P);
;	0790				COUNT = 0;
;	0791				END;
;	0792	
;	0793		[ACT_UIC]:	BEGIN
;	0794				MAP ATT_BUFFER : VECTOR [,BYTE];
;	0795				ATT_BUFFER[0] = .(.ADDRESS)<0,8>;
;	0796				ATT_BUFFER[1] = .(.ADDRESS)<16,8>;
;	0797				(ATT_BUFFER[2])<0,16> = .HEADER[FH2$W_FILEPROT];
;	0798				ATT_BUFFER[4] = .HEADER[FH2$L_FILECHAR];
;	0799				ADDRESS = ATT_BUFFER;
;	0800				END;
;	0801	
;	0802		[ACT_FPRO]:	BEGIN
;	0803				MAP ATT_BUFFER : VECTOR [,BYTE];
;	0804				(ATT_BUFFER[0])<0,16> = .(.ADDRESS)<0,16>;
;	0805				ATT_BUFFER[2] = .HEADER[FH2$L_FILECHAR];
;	0806				ADDRESS = ATT_BUFFER;
;	0807				END;
;	0808	
;	0809		[ACT_R50_NAME]:	BEGIN
;	0810				T = ATT_BUFFER[NMB$W_NAME];
;	0811				MAKE_NAMEBLOCK (FI2$S_FILENAME, .ADDRESS, ATT_BUFFER);
;	0812				ADDRESS = .T;
;	0813				END;
;	0814	
;	0815		[ACT_R50_TYPE]:	BEGIN
;	0816				T = ATT_BUFFER[NMB$W_TYPE];

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 3-4
;
;	0817				MAKE_NAMEBLOCK (FI2$S_FILENAME, .ADDRESS, ATT_BUFFER);
;	0818				ADDRESS = .T;
;	0819				END;
;	0820	
;	0821		[ACT_R50_VER]:	BEGIN
;	0822				T = ATT_BUFFER[NMB$W_VERSION];
;	0823				MAKE_NAMEBLOCK (FI2$S_FILENAME, .ADDRESS, ATT_BUFFER);
;	0824				ADDRESS = .T;
;	0825				END;
;	0826	
;	0827		[ACT_DATE]:	BEGIN
;	0828				GET_TIME (ATT_BUFFER, .ADDRESS);
;	0829				ADDRESS = ATT_BUFFER;
;	0830				END;
;	0831	
;	0832		[ACT_DATES]:	BEGIN
;	0833				ATT_BUFFER<0,16> = .ADDRESS[FI2$W_REVISION];
;	0834				GET_TIME (ATT_BUFFER+02, ADDRESS[FI2$Q_REVDATE]);
;	0835				GET_TIME (ATT_BUFFER+15, ADDRESS[FI2$Q_CREDATE]);
;	0836				GET_TIME (ATT_BUFFER+28, ADDRESS[FI2$Q_EXPDATE]);
;	0837				ADDRESS = ATT_BUFFER;
;	0838				END;
;	0839	
;	0840		TES;
;	0841		CH$MOVE (.COUNT, .ADDRESS, .P); ! finally copy the attribute
;	0842	
;	0843	
;	0844	
;	0845	    END;				! end of loop
;	0846	
;	0847	! Restore the system exception vectors.
;	0848	!
;	0849	
;	0850	$SETEXV (VECTOR = 0, ADDRES = .SYSEXV[0]);
;	0851	$SETEXV (VECTOR = 1, ADDRES = .SYSEXV[1]);
;	0852	
;	0853	! Stop metering of this subfunction
;	0854	!
;	0855	
;	0856	PMS_END_SUB ();
;	0857	
;	0858	RETURN .STATUS;
;	0859	
;	0860	END;					! end of routine READ_ATTRIB


							    .TITLE  RWATTR
							    .IDENT  \B0022\

							    .PSECT  $CODE$,NOWRT,2

  34  04  44  0A  40  03  42  09  3C  05  42  00000 P.AAA:  .BYTE   66, 5, 60, 9, 66, 3, 64, 10, 68, 4, 52, 2, 68, 32, 20, -  ;
  04  60  06  00  0A  60  02  14  20  44  02  0000B		    2, 96, 10, 0, 6, 96, 4, 0, 7, 96, 2, 0, 8, 98, 7, 38, -   ;
  21  0B  26  07  62  08  00  02  60  07  00  00016		    11, 33, 14, 0, 3, 65, 0, 0, 2, 0, 2, 0, 5, 0, 80, 0, 4, - ;
  05  00  02  00  02  00  00  41  03  00  0E  00021		    98, 35, 0, 12, 0, 14, 0, 0, 0, 1, 0, 0, 96, 20, 0, 2, -   ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 3-5
;
  00  0E  00  0C  00  23  62  04  00  50  00  0002C		    98, 8, 22, 2, 98, 8, 30, 2, 98, 8, 38, 2, 98, 8, 46, 2, - ;
  08  62  02  00  14  60  00  00  01  00  00  00037		    66, 4, 60, 2, 66, 2, 64, 2, 66, 2, 66, 2, 66, 1, 59, 2, - ;
  62  02  26  08  62  02  1E  08  62  02  16  00042		    66, 8, 68, 2, 65, 4, 60, 2, 33, 2, 68, 2		      ;
  02  40  02  42  02  3C  04  42  02  2E  08  0004D									      ;
  44  08  42  02  3B  01  42  02  42  02  42  00058									      ;
	  02  44  02  21  02  3C  04  41  02  00063									      ;
				    00000200  0006C P.AAB:  .LONG   512							      ;

							    .PSECT  $LOCKEDD1$,NOEXE,2

					      00000 PRIVILEGE:
							    .BLKB   4

						    ATC=		P.AAA
							    .EXTRN  IO_PACKET, PRIMARY_FCB, PMS_START_SUB, PMS_END_SUB
							    .EXTRN  GET_TIME, MAKE_NAMEBLOCK, SYS$SETEXV, USER_STATUS

							    .PSECT  $CODE$,NOWRT,2

					 0FFC 00070 	    .ENTRY  READ_ATTRIB, Save R2,R3,R4,R5,R6,R7,R8,R9,R10,R11	      ; 0597
		         5E 	       3C  C2 00072 	    SUBL2   #60, SP						      ;
		         6D 0000021B   EF  DE 00075 	    MOVAL   38$, (FP)						      ; 0632
				       09  DD 0007C 	    PUSHL   #9							      ; 0659
		  0000G  CF	       01  FB 0007E 	    CALLS   #1, PMS_START_SUB					      ;
				  34   AE  9F 00083 	    PUSHAB  SYSEXV						      ; 0664
				       7E  7C 00086 	    CLRQ    -(SP)						      ;
				       7E  D4 00088 	    CLRL    -(SP)						      ;
	      00000000G  9F	       04  FB 0008A 	    CALLS   #4, @#SYS$SETEXV					      ;
				  38   AE  9F 00091 	    PUSHAB  SYSEXV+4						      ; 0665
				       7E  7C 00094 	    CLRQ    -(SP)						      ;
				       01  DD 00096 	    PUSHL   #1							      ;
	      00000000G  9F	       04  FB 00098 	    CALLS   #4, @#SYS$SETEXV					      ;
		         5B 	  34   AE  D0 0009F 	    MOVL    SYSEXV, R11						      ; 0671
				       0D  15 000A3 	    BLEQ    1$							      ;
				       7E  7C 000A5 	    CLRQ    -(SP)						      ; 0672
				       5B  DD 000A7 	    PUSHL   R11							      ;
				       7E  D4 000A9 	    CLRL    -(SP)						      ;
	      00000000G  9F	       04  FB 000AB 	    CALLS   #4, @#SYS$SETEXV					      ;
		    04   AE	  38   AE  D0 000B2 1$:     MOVL    SYSEXV+4, 4(SP)					      ; 0673
				       0E  15 000B7 	    BLEQ    2$							      ;
				       7E  7C 000B9 	    CLRQ    -(SP)						      ; 0674
				  0C   AE  DD 000BB 	    PUSHL   12(SP)						      ;
				       01  DD 000BE 	    PUSHL   #1							      ;
	      00000000G  9F	       04  FB 000C0 	    CALLS   #4, @#SYS$SETEXV					      ;
		         5A 	       01  D0 000C7 2$:     MOVL    #1, STATUS						      ; 0676
		         50 	0000G  CF  D0 000CA 	    MOVL    IO_PACKET, R0					      ; 0682
		    2A   A0	       02  88 000CF 	    BISB2   #2, 42(R0)						      ;
		         6E 	  32   A0  3C 000D3 	    MOVZWL  50(R0), (SP)					      ; 0689
		         57 	       04  D0 000D7 	    MOVL    #4, I						      ;
				     018C  31 000DA 	    BRW     35$							      ;
		         50 	  08 BC47  7E 000DD 3$:     MOVAQ   @ABD[I], R0						      ; 0702
		         58 	       60  3C 000E2 	    MOVZWL  (R0), P						      ;
		         58 	       50  C0 000E5 	    ADDL2   R0, P						      ;
		         50 	  08 BC47  7E 000E8 	    MOVAQ   @ABD[I], R0						      ; 0703
		         59 	  02   A0  3C 000ED 	    MOVZWL  2(R0), COUNT					      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 3-6
;
		         50 	       68  9A 000F1 	    MOVZBL  (P), CODE						      ; 0704
				       50  D7 000F4 	    DECL    CODE						      ;
		         52 	0000G  CF  D0 000F6 	    MOVL    IO_PACKET, R2					      ; 0705
		         88 	  0B   A2  90 000FB 	    MOVB    11(R2), (P)+					      ;
		         19 	       50  D1 000FF 	    CMPL    CODE, #25						      ; 0713
				       14  14 00102 	    BGTR    5$							      ;
		         53 	FEF7 CF40  DE 00104 	    MOVAL   ATC[CODE], R3					      ; 0720
		         50 	  01   A3  9A 0010A 	    MOVZBL  1(R3), MAX_COUNT					      ;
				       05  12 0010E 	    BNEQ    4$							      ; 0721
		         50 	0200   8F  3C 00110 	    MOVZWL  #512, MAX_COUNT					      ;
		         50 	       59  D1 00115 4$:     CMPL    COUNT, MAX_COUNT					      ; 0722
				       03  15 00118 5$:     BLEQ    6$							      ;
				     008A  31 0011A 	    BRW     18$							      ;
		         54 	  03   A3  90 0011D 6$:     MOVB    3(R3), ACTION					      ; 0733
	   63 	         03 	       05  EF 00121 	    EXTZV   #5, #3, (R3), R5					      ; 0739
				       55     00125									      ;
	   04 	         00 	       55  CF 00126 	    CASEL   R5, #0, #4						      ;
	 0017 	       0010 	     000A     0012A 7$:     .WORD   8$-7$,-						      ;
		       004A 	     002F     00130		    9$-7$,-						      ;
								    10$-7$,-						      ;
								    12$-7$,-						      ;
								    14$-7$						      ;
		         50 	  08   AE  9E 00134 8$:     MOVAB   ATT_BUFFER, R0					      ; 0740
				       46  11 00138 	    BRB     16$							      ; 0739
		         50 	0000G  CF  D0 0013A 9$:     MOVL    PRIMARY_FCB, R0					      ;
				       3F  11 0013F 	    BRB     16$							      ;
		         50 	  04   BC  9A 00141 10$:    MOVZBL  @HEADER, R0						      ; 0745
		         50 	       02  C4 00145 	    MULL2   #2, R0						      ;
      02   A3	         08 	       00  ED 00148 	    CMPZV   #0, #8, 2(R3), R0					      ;
				       50     0014D									      ;
				       03  1F 0014E 	    BLSSU   11$							      ;
		         54 	       04  90 00150 	    MOVB    #4, ACTION						      ; 0747
		         50 	  04   AC  D0 00153 11$:    MOVL    HEADER, R0						      ; 0739
				       27  11 00157 	    BRB     16$							      ;
		         51 	  04   AC  D0 00159 12$:    MOVL    HEADER, R1						      ; 0751
		         50 	  01   A1  9A 0015D 	    MOVZBL  1(R1), R0						      ;
		         50 	       02  C4 00161 	    MULL2   #2, R0						      ;
      02   A3	         08 	       00  ED 00164 	    CMPZV   #0, #8, 2(R3), R0					      ;
				       50     00169									      ;
				       03  1F 0016A 	    BLSSU   13$							      ;
		         54 	       04  90 0016C 	    MOVB    #4, ACTION						      ; 0753
		         50 	       61  9A 0016F 13$:    MOVZBL  (R1), R0						      ; 0754
				       08  11 00172 	    BRB     15$							      ;
		         51 	  04   AC  D0 00174 14$:    MOVL    HEADER, R1						      ; 0756
		         50 	  01   A1  9A 00178 	    MOVZBL  1(R1), R0						      ;
		         50 	     6140  3E 0017C 15$:    MOVAW   (R1)[R0], R0					      ;
		         56 	  02   A3  9A 00180 16$:    MOVZBL  2(R3), ADDRESS					      ; 0759
		         56 	       50  C0 00184 	    ADDL2   R0, ADDRESS						      ;
	   0C 	         00 	       54  8F 00187 	    CASEB   ACTION, #0, #12					      ; 0765
	 00DA 	       001C 	     0054     0018B 17$:    .WORD   22$-17$,-						      ;
	 0047 	       004E 	     002A     00191		    18$-17$,-						      ;
	 0094 	       008E 	     0088     00197		    34$-17$,-						      ;
	 00A9 	       0075 	     0058     0019D		    19$-17$,-						      ;
				     00B0     001A3		    21$-17$,-						      ;
								    20$-17$,-						      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 3-7
;
								    25$-17$,-						      ;
								    26$-17$,-						      ;
								    27$-17$,-						      ;
								    23$-17$,-						      ;
								    24$-17$,-						      ;
								    30$-17$,-						      ;
								    31$-17$						      ;
				       38  11 001A5 	    BRB     22$							      ; 0768
		    32   A2	       57  B0 001A7 18$:    MOVW    I, 50(R2)						      ; 0771
		  0000G  CF	       34  B0 001AB 	    MOVW    #52, USER_STATUS					      ; 0772
				       5A  D4 001B0 	    CLRL    STATUS						      ;
				     00BD  31 001B2 	    BRW     37$							      ;
      08   AE	    2C   A6	       10  9C 001B5 19$:    ROTL    #16, 44(ADDRESS), ATT_BUFFER			      ; 0778
      0C   AE	    34   A6	       10  9C 001BB 	    ROTL    #16, 52(ADDRESS), ATT_BUFFER+4			      ; 0779
		    10   AE	  18   A6  90 001C1 	    MOVB    24(ADDRESS), ATT_BUFFER+8				      ; 0780
		    11   AE	  1A   A6  90 001C6 	    MOVB    26(ADDRESS), ATT_BUFFER+9				      ; 0781
		    12   AE	       56  D0 001CB 	    MOVL    ADDRESS, ATT_BUFFER+10				      ; 0782
				     008F  31 001CF 	    BRW     33$							      ; 0783
		         56 	FE96   CF  9E 001D2 20$:    MOVAB   P.AAB, ADDRESS					      ; 0786
				       59  11 001D7 	    BRB     29$							      ; 0765
	   00 	         6E 	       00  2C 001D9 21$:    MOVC5   #0, (SP), #0, COUNT, (P)				      ; 0789
		         68 	       59     001DD									      ;
				       59  D4 001DF 22$:    CLRL    COUNT						      ; 0790
				       4F  11 001E1 	    BRB     29$							      ; 0765
		    08   AE	       66  90 001E3 23$:    MOVB    (ADDRESS), ATT_BUFFER				      ; 0795
		    09   AE	  02   A6  90 001E7 	    MOVB    2(ADDRESS), ATT_BUFFER+1				      ; 0796
		         50 	  04   AC  D0 001EC 	    MOVL    HEADER, R0						      ; 0797
		    0A   AE	  40   A0  B0 001F0 	    MOVW    64(R0), ATT_BUFFER+2				      ;
		    0C   AE	  34   A0  90 001F5 	    MOVB    52(R0), ATT_BUFFER+4				      ; 0798
		         56 	  08   AE  9E 001FA 	    MOVAB   ATT_BUFFER, ADDRESS					      ; 0597
				       65  11 001FE 	    BRB     34$							      ; 0765
		    08   AE	       66  B0 00200 24$:    MOVW    (ADDRESS), ATT_BUFFER				      ; 0804
		         50 	  04   AC  D0 00204 	    MOVL    HEADER, R0						      ; 0805
		    0A   AE	  34   A0  90 00208 	    MOVB    52(R0), ATT_BUFFER+2				      ;
		         56 	  08   AE  9E 0020D 	    MOVAB   ATT_BUFFER, ADDRESS					      ; 0597
				       52  11 00211 	    BRB     34$							      ; 0765
		         52 	  0E   AE  9E 00213 25$:    MOVAB   ATT_BUFFER+6, T					      ; 0810
				       0A  11 00217 	    BRB     28$							      ; 0811
		         52 	  14   AE  9E 00219 26$:    MOVAB   ATT_BUFFER+12, T					      ; 0816
				       04  11 0021D 	    BRB     28$							      ; 0817
		         52 	  16   AE  9E 0021F 27$:    MOVAB   ATT_BUFFER+14, T					      ; 0822
				  08   AE  9F 00223 28$:    PUSHAB  ATT_BUFFER						      ; 0823
				       56  DD 00226 	    PUSHL   ADDRESS						      ;
				       14  DD 00228 	    PUSHL   #20							      ;
		  0000G  CF	       03  FB 0022A 	    CALLS   #3, MAKE_NAMEBLOCK					      ;
		         56 	       52  D0 0022F 	    MOVL    T, ADDRESS						      ; 0824
				       31  11 00232 29$:    BRB     34$							      ; 0765
				       56  DD 00234 30$:    PUSHL   ADDRESS						      ; 0828
				  0C   AE  9F 00236 	    PUSHAB  ATT_BUFFER						      ;
				       21  11 00239 	    BRB     32$							      ;
		    08   AE	  14   A6  B0 0023B 31$:    MOVW    20(ADDRESS), ATT_BUFFER				      ; 0833
				  1E   A6  9F 00240 	    PUSHAB  30(ADDRESS)						      ; 0834
				  0E   AE  9F 00243 	    PUSHAB  ATT_BUFFER+2					      ;
		  0000G  CF	       02  FB 00246 	    CALLS   #2, GET_TIME					      ;
				  16   A6  9F 0024B 	    PUSHAB  22(ADDRESS)						      ; 0835

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 3-8
;
				  1B   AE  9F 0024E 	    PUSHAB  ATT_BUFFER+15					      ;
		  0000G  CF	       02  FB 00251 	    CALLS   #2, GET_TIME					      ;
				  26   A6  9F 00256 	    PUSHAB  38(ADDRESS)						      ; 0836
				  28   AE  9F 00259 	    PUSHAB  ATT_BUFFER+28					      ;
		  0000G  CF	       02  FB 0025C 32$:    CALLS   #2, GET_TIME					      ;
		         56 	  08   AE  9E 00261 33$:    MOVAB   ATT_BUFFER, ADDRESS					      ; 0837
	   68 	         66 	       59  28 00265 34$:    MOVC3   COUNT, (ADDRESS), (P)				      ; 0841
	   02 	         57 	       6E  F2 00269 35$:    AOBLSS  (SP), I, 36$					      ; 0689
				       03  11 0026D 	    BRB     37$							      ;
				     FE6B  31 0026F 36$:    BRW     3$							      ;
				       7E  7C 00272 37$:    CLRQ    -(SP)						      ; 0850
				       5B  DD 00274 	    PUSHL   R11							      ;
				       7E  D4 00276 	    CLRL    -(SP)						      ;
	      00000000G  9F	       04  FB 00278 	    CALLS   #4, @#SYS$SETEXV					      ;
				       7E  7C 0027F 	    CLRQ    -(SP)						      ; 0851
				  0C   AE  DD 00281 	    PUSHL   12(SP)						      ;
				       01  DD 00284 	    PUSHL   #1							      ;
	      00000000G  9F	       04  FB 00286 	    CALLS   #4, @#SYS$SETEXV					      ;
		  0000G  CF	       00  FB 0028D 	    CALLS   #0, PMS_END_SUB					      ; 0856
		         50 	       5A  D0 00292 	    MOVL    STATUS, R0						      ; 0858
					   04 00295 	    RET     							      ; 0597
					 0000 00296 38$:    .WORD   Save nothing					      ; 0632
				       7E  D4 00298 	    CLRL    -(SP)						      ;
				       5E  DD 0029A 	    PUSHL   SP							      ;
		         7E 	  04   AC  7D 0029C 	    MOVQ    4(AP), -(SP)					      ;
		  0000V  CF	       03  FB 002A0 	    CALLS   #3, READ_HANDLER					      ;
					   04 002A5 	    RET     							      ;

; Routine Size:  566 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 4
;
;	0861	ROUTINE READ_HANDLER (SIGNAL, MECHANISM) : NOVALUE =
;	0862	
;	0863	!++
;	0864	!
;	0865	! FUNCTIONAL DESCRIPTION:
;	0866	!
;	0867	!	This routine is a condition handler for READ_ATTRIB. It catches
;	0868	!	error exits from MAKE_NAMEBLOCK (due to garbage in the file header
;	0869	!	name string) and causes them to be ignored.
;	0870	!
;	0871	! CALLING SEQUENCE:
;	0872	!	READ_HANDLER (ARG1, ARG2)
;	0873	!
;	0874	! INPUT PARAMETERS:
;	0875	!	ARG1: address of signal array
;	0876	!	ARG2: address of mechanism array
;	0877	!
;	0878	! IMPLICIT INPUTS:
;	0879	!	NONE
;	0880	!
;	0881	! OUTPUT PARAMETERS:
;	0882	!	NONE
;	0883	!
;	0884	! IMPLICIT OUTPUTS:
;	0885	!	NONE
;	0886	!
;	0887	! ROUTINE VALUE:
;	0888	!	NONE
;	0889	!
;	0890	! SIDE EFFECTS:
;	0891	!	stack unwound to return to call site in READ_ATTRIB
;	0892	!
;	0893	!--
;	0894	
;	0895	BEGIN
;	0896	
;	0897	MAP
;	0898		SIGNAL		: REF BBLOCK,	! signal array arg
;	0899		MECHANISM	: REF BBLOCK;	! mechanism array arg
;	0900	
;	0901	
;	0902	! Check the signal code. The only permissible ones are SS$_UNWIND, which
;	0903	! is ignored, and SS$_CMODUSER. The error status is the 16 bit CHMU code.
;	0904	!
;	0905	
;	0906	IF .SIGNAL[CHF$L_SIG_NAME] EQL SS$_UNWIND THEN RETURN;
;	0907	IF .SIGNAL[CHF$L_SIG_NAME] NEQ SS$_CMODUSER
;	0908	THEN BUG_CHECK (UNXSIGNAL, FATAL, 'Unexpected signal name in ACP');
;	0909	
;	0910	$UNWIND (DEPADR = MECHANISM[CHF$L_MCH_DEPTH]);
;	0911	
;	0912	RETURN;
;	0913	
;	0914	END;					! end of routine READ_HANDLER


; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 4-1
;


							    .PSECT  $LOCKEDC2$,NOWRT,2

				  FEFF  0000  00000 P.AAC:  .WORD   0, -257						      ;
					0000* 00004 	    .WORD   <BUG$_UNXSIGNAL!4>					      ;
					      00006	    .BLKB   2

							    .EXTRN  BUG$_UNXSIGNAL, SYS$UNWIND

							    .PSECT  $CODE$,NOWRT,2

					 0000 002A6 READ_HANDLER:
							    .WORD   Save nothing					      ; 0861
		         50 	  04   AC  D0 002A8 	    MOVL    SIGNAL, R0						      ; 0906
	      00000920   8F	  04   A0  D1 002AC 	    CMPL    4(R0), #2336					      ;
				       1D  13 002B4 	    BEQL    2$							      ;
	      00000424   8F	  04   A0  D1 002B6 	    CMPL    4(R0), #1060					      ; 0907
				       05  13 002BE 	    BEQL    1$							      ;
		  0000'  CF	       00  FB 002C0 	    CALLS   #0, P.AAC						      ; 0908
				       7E  D4 002C5 1$:     CLRL    -(SP)						      ; 0910
	   7E 	    08   AC	       08  C1 002C7 	    ADDL3   #8, MECHANISM, -(SP)				      ;
	      00000000G  9F	       02  FB 002CC 	    CALLS   #2, @#SYS$UNWIND					      ;
					   04 002D3 2$:     RET     							      ; 0861

; Routine Size:  46 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 5
;
;	0915	GLOBAL ROUTINE WRITE_ATTRIB (HEADER, ABD) : NOVALUE =
;	0916	
;	0917	!++
;	0918	!
;	0919	! FUNCTIONAL DESCRIPTION:
;	0920	!
;	0921	!	This routine performs the write attributes function. The
;	0922	!	requested attributes are taken from the buffer packet.
;	0923	!
;	0924	! CALLING SEQUENCE:
;	0925	!	READ_ATTRIB (ARG1, ARG2)
;	0926	!
;	0927	! INPUT PARAMETERS:
;	0928	!	ARG1: address of file header
;	0929	!	ARG2: address of buffer descriptors
;	0930	!
;	0931	! IMPLICIT INPUTS:
;	0932	!	IO_PACKET: I/O packet for this operation
;	0933	!	PRIMARY_FCB: FCB of file
;	0934	!
;	0935	! OUTPUT PARAMETERS:
;	0936	!	NONE
;	0937	!
;	0938	! IMPLICIT OUTPUTS:
;	0939	!	NONE
;	0940	!
;	0941	! ROUTINE VALUE:
;	0942	!	NONE
;	0943	!
;	0944	! SIDE EFFECTS:
;	0945	!	attribute data written into appropriate places
;	0946	!
;	0947	!--
;	0948	
;	0949	BEGIN
;	0950	
;	0951	MAP
;	0952		HEADER		: REF BBLOCK,	! file header arg
;	0953		ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH];
;	0954						! buffer descriptor arg
;	0955	
;	0956	BUILTIN
;	0957		FP;				! frame pointer register
;	0958	
;	0959	LOCAL
;	0960		CONTIG;				! initial state of contiguous bit
;	0961	
;	0962	EXTERNAL
;	0963		USER_STATUS	: VECTOR,	! user request status
;	0964		CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
;	0965		IO_PACKET	: REF BBLOCK,	! I/O packet in process
;	0966		CURRENT_WINDOW	: REF BBLOCK,	! window of open file
;	0967		PRIMARY_FCB	: REF BBLOCK;	! FCB of file
;	0968	
;	0969	EXTERNAL ROUTINE

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 5-1
;
;	0970		PMS_START_SUB,			! start subfunction metering
;	0971		PMS_END_SUB,			! end subfunction metering
;	0972		CHECK_PROTECT,			! check file protection
;	0973		MARK_DIRTY,			! mark buffer for write-back
;	0974		MAKE_NAMEBLOCK,			! convert file string to RAD-50 name block
;	0975		MAKE_STRING;			! convert name block into file string
;	0976	
;	0977	
;	0978	! Start metering for this subfunction.
;	0979	!
;	0980	
;	0981	PMS_START_SUB (PMS_RWATT);
;	0982	
;	0983	! Run a protection check with a condition handler enabled, so that we
;	0984	! just save the user's privilege status. If no privilege, the handler
;	0985	! clears the privilege bit. If the user does not have write attributes
;	0986	! privilege, check for write access or an open file. Also note if the file
;	0987	! is locked against writers.
;	0988	!
;	0989	
;	0990	PRIVILEGE = 3;				! assume privilege
;	0991	.FP = HANDLER;
;	0992	CHECK_PROTECT (WRATT_ACCESS, .HEADER, 0);
;	0993	.FP = 0;				! disable condition handler
;	0994	
;	0995	IF .CURRENT_WINDOW EQL 0
;	0996	THEN
;	0997	    BEGIN
;	0998	    IF .PRIMARY_FCB NEQ 0
;	0999	    THEN
;	1000		IF .PRIMARY_FCB[FCB$V_EXCL]
;	1001		OR .PRIMARY_FCB[FCB$W_LCNT] NEQ 0
;	1002		THEN PRIVILEGE[1] = 0;
;	1003	    IF NOT .PRIVILEGE[0]
;	1004	    THEN CHECK_PROTECT (WRITE_ACCESS, .HEADER, 0);
;	1005	    END;
;	1006	
;	1007	! Set the appropriate cleanup flags.
;	1008	!
;	1009	
;	1010	MARK_DIRTY (.HEADER);
;	1011	CLEANUP_FLAGS[CLF_FIXFCB] = 1;
;	1012	
;	1013	CONTIG = .HEADER[FH2$V_CONTIG];		! save contiguous bit
;	1014	
;	1015	
;	1016	
;	1017	! Scan the buffer packet, picking up each entry. The first byte of the
;	1018	! text is the attribute code.
;	1019	!
;	1020	
;	1021	INCR I FROM ABD$C_ATTRIB TO .IO_PACKET[IRP$W_BCNT]-1 DO
;	1022	    BEGIN
;	1023	
;	1024	    LOCAL

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 5-2
;
;	1025		P,				! pointer to attribute text
;	1026		T,				! temporary pointer
;	1027		COUNT,				! attribute size desired
;	1028		ADDRESS		: REF BBLOCK,	! address of attribute
;	1029		CODE,				! attribute code
;	1030		MAX_COUNT,			! max size of attribute
;	1031		ACTION		: BYTE,		! code of action routine
;	1032		ATT_BUFFER	: BBLOCK [44];	! attribute copy buffer
;	1033	
;	1034	    P = .ABD[.I, ABD$W_TEXT] + ABD[.I, ABD$W_TEXT];
;	1035	    COUNT = .ABD[.I, ABD$W_COUNT];
;	1036	    CODE = .(.P)<0,8> - 1;
;	1037	    P = .P + 1;
;	1038	
;	1039	! Check the attribute code for legality, and then check the requested
;	1040	! size against the limit.
;	1041	!
;	1042	
;	1043	    IF .CODE GTR MAX_CODE - 1
;	1044		THEN ERR_EXIT (SS$_BADATTRIB);
;	1045	
;	1046	    MAX_COUNT = .ATC[.CODE, ATC_MAX_SIZE];
;	1047	    IF .MAX_COUNT EQL 0 THEN MAX_COUNT = 512;
;	1048	    IF .COUNT GTR .MAX_COUNT
;	1049		THEN ERR_EXIT (SS$_BADATTRIB);
;	1050	
;	1051	    IF .ATC[.CODE, ATC_PROTECTED] AND NOT .PRIVILEGE[0]
;	1052		THEN ERR_EXIT (SS$_NOPRIV);
;	1053	
;	1054	    IF .ATC[.CODE, ATC_LOCKED] AND NOT .PRIVILEGE[1]
;	1055		THEN ERR_EXIT (SS$_ACCONFLICT);
;	1056	
;	1057	
;	1058	! Compute the action routine code.
;	1059	!
;	1060	
;	1061	    ACTION = .ATC[.CODE, ATC_ACTION];
;	1062	    IF .ATC[.CODE, ATC_READ_ONLY]
;	1063	    THEN ACTION = ACT_NOP;
;	1064	
;	1065	! Compute the address of the attribute.
;	1066	!
;	1067	    
;	1068	    ADDRESS =
;	1069		(
;	1070		CASE .ATC[.CODE, ATC_LOCATION] FROM 0 TO 4 OF
;	1071		    SET
;	1072		    [ATC_ZERO]:		ATT_BUFFER;
;	1073		    [ATC_FCB]:		.PRIMARY_FCB;
;	1074		    [ATC_HEADER]:	BEGIN
;	1075					IF .HEADER[FHD$B_IDOFFSET]*2 LEQU
;	1076					   .ATC[.CODE, ATC_OFFSET]
;	1077					THEN ACTION = ACT_ZERO;
;	1078					.HEADER
;	1079					END;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 5-3
;
;	1080		    [ATC_IDENT]:	BEGIN
;	1081					IF .HEADER[FHD$B_MPOFFSET]*2 LEQU
;	1082					   .ATC[.CODE, ATC_OFFSET]
;	1083					THEN ACTION = ACT_ZERO;
;	1084					.HEADER + .HEADER[FH2$B_IDOFFSET]*2
;	1085					END;
;	1086		    [ATC_MAP]:		.HEADER + .HEADER[FH2$B_MPOFFSET]*2;
;	1087		    TES
;	1088		)
;	1089		+ .ATC[.CODE, ATC_OFFSET];
;	1090	    
;	1091	    
;	1092	! Finally execute the action routine.
;	1093	!
;	1094	    
;	1095	    CASE .ACTION FROM 0 TO ACT_LASTACT OF
;	1096		SET
;	1097	    
;	1098		[ACT_NOP,
;	1099		 ACT_BLOCKSIZE,
;	1100		 ACT_ZERO,
;	1101		 ACT_STATBLK]:	0;
;	1102	    
;	1103		[ACT_ILLEGAL]:	ERR_EXIT (SS$_BADATTRIB);
;	1104	
;	1105		[ACT_UIC]:	BEGIN
;	1106				(.ADDRESS)<0,16> = .(.P)<0,8>;
;	1107				IF .COUNT GEQ 2
;	1108				THEN (.ADDRESS)<16,16> = .(.P+1)<0,8>;
;	1109				IF .COUNT GEQ 3
;	1110				THEN (HEADER[FH2$W_FILEPROT])<0,8> = .(.P+2)<0,8>;
;	1111				IF .COUNT GEQ 4
;	1112				THEN (HEADER[FH2$W_FILEPROT])<8,8> = .(.P+3)<0,8>;
;	1113				IF .COUNT GEQ 5
;	1114				THEN (HEADER[FH2$L_FILECHAR])<0,8> = .(.P+4)<0,8>;
;	1115				END;
;	1116	
;	1117		[ACT_FPRO]:	BEGIN
;	1118				(HEADER[FH2$W_FILEPROT])<0,8> = .(.P+0)<0,8>;
;	1119				IF .COUNT GEQ 2
;	1120				THEN (HEADER[FH2$W_FILEPROT])<8,8> = .(.P+1)<0,8>;
;	1121				IF .COUNT GEQ 3
;	1122				THEN (HEADER[FH2$L_FILECHAR])<0,8> = .(.P+2)<0,8>;
;	1123				END;
;	1124	
;	1125		[ACT_R50_NAME]:	BEGIN
;	1126				T = ATT_BUFFER[NMB$W_NAME];
;	1127				MAKE_NAMEBLOCK (FI2$S_FILENAME, .ADDRESS, ATT_BUFFER);
;	1128				CH$MOVE (.COUNT, .P, .T);
;	1129				CH$FILL (' ', FI2$S_FILENAME, .ADDRESS);
;	1130				MAKE_STRING (ATT_BUFFER, .ADDRESS);
;	1131				END;
;	1132	
;	1133		[ACT_R50_TYPE]:	BEGIN
;	1134				T = ATT_BUFFER[NMB$W_TYPE];

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 5-4
;
;	1135				MAKE_NAMEBLOCK (FI2$S_FILENAME, .ADDRESS, ATT_BUFFER);
;	1136				CH$MOVE (.COUNT, .P, .T);
;	1137				CH$FILL (' ', FI2$S_FILENAME, .ADDRESS);
;	1138				MAKE_STRING (ATT_BUFFER, .ADDRESS);
;	1139				END;
;	1140	
;	1141		[ACT_R50_VER]:	BEGIN
;	1142				T = ATT_BUFFER[NMB$W_VERSION];
;	1143				MAKE_NAMEBLOCK (FI2$S_FILENAME, .ADDRESS, ATT_BUFFER);
;	1144				CH$MOVE (.COUNT, .P, .T);
;	1145				CH$FILL (' ', FI2$S_FILENAME, .ADDRESS);
;	1146				MAKE_STRING (ATT_BUFFER, .ADDRESS);
;	1147				END;
;	1148	
;	1149		[ACT_DATE]:	BEGIN
;	1150				CH$COPY (.COUNT, .P, '0', 13, ATT_BUFFER);
;	1151				CONVERT_DATE (ATT_BUFFER, .ADDRESS);
;	1152				END;
;	1153	
;	1154		[ACT_DATES]:	BEGIN
;	1155				CH$COPY (.COUNT, .P, '0', 44, ATT_BUFFER);
;	1156				ADDRESS[FI2$W_REVISION] = .ATT_BUFFER;
;	1157				CONVERT_DATE (ATT_BUFFER+02, ADDRESS[FI2$Q_REVDATE]);
;	1158				CONVERT_DATE (ATT_BUFFER+15, ADDRESS[FI2$Q_CREDATE]);
;	1159				CONVERT_DATE (ATT_BUFFER+28, ADDRESS[FI2$Q_EXPDATE]);
;	1160				END;
;	1161	
;	1162		[ACT_COPY]:	CH$MOVE (.COUNT, .P, .ADDRESS);
;	1163	    
;	1164		TES;
;	1165	
;	1166	    END;				! end of loop
;	1167	
;	1168	! Make sure the contiguous bit stays off if it was off to start with.
;	1169	!
;	1170	
;	1171	IF NOT .CONTIG THEN HEADER[FH2$V_CONTIG] = 0;
;	1172	
;	1173	! Stop metering of this subfunction
;	1174	!
;	1175	
;	1176	PMS_END_SUB ();
;	1177	
;	1178	END;					! end of routine WRITE_ATTRIB



							    .EXTRN  CLEANUP_FLAGS, CURRENT_WINDOW, CHECK_PROTECT, MARK_DIRTY
							    .EXTRN  MAKE_STRING

					 0FFC 002D4 	    .ENTRY  WRITE_ATTRIB, Save R2,R3,R4,R5,R6,R7,R8,R9,R10,R11	      ; 0915
		         5E 	       2C  C2 002D6 	    SUBL2   #44, SP						      ;
				       09  DD 002D9 	    PUSHL   #9							      ; 0981
		  0000G  CF	       01  FB 002DB 	    CALLS   #1, PMS_START_SUB					      ;
		  0000'  CF	       03  D0 002E0 	    MOVL    #3, PRIVILEGE					      ; 0990

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 5-5
;
		         6D 	0000V  CF  9E 002E5 	    MOVAB   HANDLER, (FP)					      ; 0991
				       7E  D4 002EA 	    CLRL    -(SP)						      ; 0992
		         52 	  04   AC  D0 002EC 	    MOVL    HEADER, R2						      ;
				       52  DD 002F0 	    PUSHL   R2							      ;
				       05  DD 002F2 	    PUSHL   #5							      ;
		  0000G  CF	       03  FB 002F4 	    CALLS   #3, CHECK_PROTECT					      ;
				       6D  D4 002F9 	    CLRL    (FP)						      ; 0993
				0000G  CF  D5 002FB 	    TSTL    CURRENT_WINDOW					      ; 0995
				       26  12 002FF 	    BNEQ    3$							      ;
		         50 	0000G  CF  D0 00301 	    MOVL    PRIMARY_FCB, R0					      ; 0998
				       0F  13 00306 	    BEQL    2$							      ;
	   05 	    1E   A0	       03  E0 00308 	    BBS     #3, 30(R0), 1$					      ; 1000
				  1A   A0  B5 0030D 	    TSTW    26(R0)						      ; 1001
				       05  13 00310 	    BEQL    2$							      ;
		  0000'  CF	       02  8A 00312 1$:     BICB2   #2, PRIVILEGE					      ; 1002
		         0B 	0000'  CF  E8 00317 2$:     BLBS    PRIVILEGE, 3$					      ; 1003
				       7E  D4 0031C 	    CLRL    -(SP)						      ; 1004
				       52  DD 0031E 	    PUSHL   R2							      ;
				       01  DD 00320 	    PUSHL   #1							      ;
		  0000G  CF	       03  FB 00322 	    CALLS   #3, CHECK_PROTECT					      ;
				       52  DD 00327 3$:     PUSHL   R2							      ; 1010
		  0000G  CF	       01  FB 00329 	    CALLS   #1, MARK_DIRTY					      ;
		  0000G  CF	       02  88 0032E 	    BISB2   #2, CLEANUP_FLAGS					      ; 1011
      34   A2	         01 	       07  EF 00333 	    EXTZV   #7, #1, 52(R2), CONTIG				      ; 1013
				       5A     00338									      ;
		         50 	0000G  CF  D0 00339 	    MOVL    IO_PACKET, R0					      ; 1021
		         5B 	  32   A0  3C 0033E 	    MOVZWL  50(R0), R11						      ;
		         58 	       04  D0 00342 	    MOVL    #4, I						      ;
				     01B7  31 00345 	    BRW     39$							      ;
		         50 	  08 BC48  7E 00348 4$:     MOVAQ   @ABD[I], R0						      ; 1034
		         57 	       60  3C 0034D 	    MOVZWL  (R0), P						      ;
		         57 	       50  C0 00350 	    ADDL2   R0, P						      ;
		         50 	  08 BC48  7E 00353 	    MOVAQ   @ABD[I], R0						      ; 1035
		         59 	  02   A0  3C 00358 	    MOVZWL  2(R0), COUNT					      ;
		         50 	       87  9A 0035C 	    MOVZBL  (P)+, CODE						      ; 1036
				       50  D7 0035F 	    DECL    CODE						      ;
		         19 	       50  D1 00361 	    CMPL    CODE, #25						      ; 1043
				       12  14 00364 	    BGTR    6$							      ;
				FC96 CF40  DF 00366 	    PUSHAL  ATC+1[CODE]						      ; 1046
		         51 	       9E  9A 0036B 	    MOVZBL  @(SP)+, MAX_COUNT					      ;
				       05  12 0036E 	    BNEQ    5$							      ; 1047
		         51 	0200   8F  3C 00370 	    MOVZWL  #512, MAX_COUNT					      ;
		         51 	       59  D1 00375 5$:     CMPL    COUNT, MAX_COUNT					      ; 1048
				       03  15 00378 6$:     BLEQ    7$							      ;
				     00B9  31 0037A 	    BRW     22$							      ;
				FC7E CF40  DF 0037D 7$:     PUSHAL  ATC[CODE]						      ; 1051
	   08 	         9E 	       01  E1 00382 	    BBC     #1, @(SP)+, 8$					      ;
		         03 	0000'  CF  E8 00386 	    BLBS    PRIVILEGE, 8$					      ;
				       24  BF 0038B 	    CHMU    #36							      ; 1052
					   04 0038D 	    RET     							      ;
				FC6D CF40  DF 0038E 8$:     PUSHAL  ATC[CODE]						      ; 1054
	   0B 	         9E 	       02  E1 00393 	    BBC     #2, @(SP)+, 9$					      ;
	   05 	  0000'  CF	       01  E0 00397 	    BBS     #1, PRIVILEGE, 9$					      ;
				0800   8F  BF 0039D 	    CHMU    #2048						      ; 1055
					   04 003A1 	    RET     							      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 5-6
;
		         52 	FC59 CF40  DE 003A2 9$:     MOVAL   ATC[CODE], R2					      ; 1061
		         53 	  03   A2  90 003A8 	    MOVB    3(R2), ACTION					      ;
		         02 	       62  E9 003AC 	    BLBC    (R2), 10$						      ; 1062
				       53  94 003AF 	    CLRB    ACTION						      ; 1063
	   62 	         03 	       05  EF 003B1 10$:    EXTZV   #5, #3, (R2), R4					      ; 1069
				       54     003B5									      ;
	   04 	         00 	       54  CF 003B6 	    CASEL   R4, #0, #4						      ;
	 0016 	       000F 	     000A     003BA 11$:    .WORD   12$-11$,-						      ;
		       0049 	     002E     003C0		    13$-11$,-						      ;
								    14$-11$,-						      ;
								    16$-11$,-						      ;
								    18$-11$						      ;
		         50 	       6E  9E 003C4 12$:    MOVAB   ATT_BUFFER, R0					      ; 1070
				       46  11 003C7 	    BRB     20$							      ; 1069
		         50 	0000G  CF  D0 003C9 13$:    MOVL    PRIMARY_FCB, R0					      ;
				       3F  11 003CE 	    BRB     20$							      ;
		         50 	  04   BC  9A 003D0 14$:    MOVZBL  @HEADER, R0						      ; 1075
		         50 	       02  C4 003D4 	    MULL2   #2, R0						      ;
      02   A2	         08 	       00  ED 003D7 	    CMPZV   #0, #8, 2(R2), R0					      ;
				       50     003DC									      ;
				       03  1F 003DD 	    BLSSU   15$							      ;
		         53 	       04  90 003DF 	    MOVB    #4, ACTION						      ; 1077
		         50 	  04   AC  D0 003E2 15$:    MOVL    HEADER, R0						      ; 1069
				       27  11 003E6 	    BRB     20$							      ;
		         51 	  04   AC  D0 003E8 16$:    MOVL    HEADER, R1						      ; 1081
		         50 	  01   A1  9A 003EC 	    MOVZBL  1(R1), R0						      ;
		         50 	       02  C4 003F0 	    MULL2   #2, R0						      ;
      02   A2	         08 	       00  ED 003F3 	    CMPZV   #0, #8, 2(R2), R0					      ;
				       50     003F8									      ;
				       03  1F 003F9 	    BLSSU   17$							      ;
		         53 	       04  90 003FB 	    MOVB    #4, ACTION						      ; 1083
		         50 	       61  9A 003FE 17$:    MOVZBL  (R1), R0						      ; 1084
				       08  11 00401 	    BRB     19$							      ;
		         51 	  04   AC  D0 00403 18$:    MOVL    HEADER, R1						      ; 1086
		         50 	  01   A1  9A 00407 	    MOVZBL  1(R1), R0						      ;
		         50 	     6140  3E 0040B 19$:    MOVAW   (R1)[R0], R0					      ;
		         56 	  02   A2  9A 0040F 20$:    MOVZBL  2(R2), ADDRESS					      ; 1089
		         56 	       50  C0 00413 	    ADDL2   R0, ADDRESS						      ;
	   0C 	         00 	       53  8F 00416 	    CASEB   ACTION, #0, #12					      ; 1095
	 00E1 	       001C 	     00E5     0041A 21$:    .WORD   39$-21$,-						      ;
	 00E5 	       00E5 	     00E5     00420		    22$-21$,-						      ;
	 0082 	       007C 	     0076     00426		    38$-21$,-						      ;
	 00A7 	       0058 	     001F     0042C		    39$-21$,-						      ;
				     00B4     00432		    39$-21$,-						      ;
								    39$-21$,-						      ;
								    30$-21$,-						      ;
								    31$-21$,-						      ;
								    32$-21$,-						      ;
								    23$-21$,-						      ;
								    27$-21$,-						      ;
								    35$-21$,-						      ;
								    36$-21$						      ;
				       58  11 00434 	    BRB     29$							      ;
				       34  BF 00436 22$:    CHMU    #52							      ; 1103
					   04 00438 	    RET     							      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 5-7
;
		         66 	       67  9B 00439 23$:    MOVZBW  (P), (ADDRESS)					      ; 1106
		         02 	       59  D1 0043C 	    CMPL    COUNT, #2						      ; 1107
				       05  19 0043F 	    BLSS    24$							      ;
		    02   A6	  01   A7  9B 00441 	    MOVZBW  1(P), 2(ADDRESS)					      ; 1108
		         03 	       59  D1 00446 24$:    CMPL    COUNT, #3						      ; 1109
				       09  19 00449 	    BLSS    25$							      ;
		         50 	  04   AC  D0 0044B 	    MOVL    HEADER, R0						      ; 1110
		    40   A0	  02   A7  90 0044F 	    MOVB    2(P), 64(R0)					      ;
		         04 	       59  D1 00454 25$:    CMPL    COUNT, #4						      ; 1111
				       09  19 00457 	    BLSS    26$							      ;
		         50 	  04   AC  D0 00459 	    MOVL    HEADER, R0						      ; 1112
		    41   A0	  03   A7  90 0045D 	    MOVB    3(P), 65(R0)					      ;
		         05 	       59  D1 00462 26$:    CMPL    COUNT, #5						      ; 1113
				       58  19 00465 	    BLSS    34$							      ;
		         50 	  04   AC  D0 00467 	    MOVL    HEADER, R0						      ; 1114
		    34   A0	  04   A7  90 0046B 	    MOVB    4(P), 52(R0)					      ;
				       4D  11 00470 	    BRB     34$							      ; 1095
		         50 	  04   AC  D0 00472 27$:    MOVL    HEADER, R0						      ; 1118
		    40   A0	       67  90 00476 	    MOVB    (P), 64(R0)						      ;
		         02 	       59  D1 0047A 	    CMPL    COUNT, #2						      ; 1119
				       05  19 0047D 	    BLSS    28$							      ;
		    41   A0	  01   A7  90 0047F 	    MOVB    1(P), 65(R0)					      ; 1120
		         03 	       59  D1 00484 28$:    CMPL    COUNT, #3						      ; 1121
				       76  19 00487 	    BLSS    39$							      ;
		    34   A0	  02   A7  90 00489 	    MOVB    2(P), 52(R0)					      ; 1122
				       6F  11 0048E 29$:    BRB     39$							      ; 1095
		         52 	  06   AE  9E 00490 30$:    MOVAB   ATT_BUFFER+6, T					      ; 1126
				       0A  11 00494 	    BRB     33$							      ; 1127
		         52 	  0C   AE  9E 00496 31$:    MOVAB   ATT_BUFFER+12, T					      ; 1134
				       04  11 0049A 	    BRB     33$							      ; 1135
		         52 	  0E   AE  9E 0049C 32$:    MOVAB   ATT_BUFFER+14, T					      ; 1142
				4040   8F  BB 004A0 33$:    PUSHR   #^M<R6,SP>						      ; 1143
				       14  DD 004A4 	    PUSHL   #20							      ;
		  0000G  CF	       03  FB 004A6 	    CALLS   #3, MAKE_NAMEBLOCK					      ;
	   62 	         67 	       59  28 004AB 	    MOVC3   COUNT, (P), (T)					      ; 1144
	   20 	         6E 	       00  2C 004AF 	    MOVC5   #0, (SP), #32, #20, (ADDRESS)			      ; 1145
		         66 	       14     004B3									      ;
				       56  DD 004B5 	    PUSHL   ADDRESS						      ; 1146
				  04   AE  9F 004B7 	    PUSHAB  ATT_BUFFER						      ;
		  0000G  CF	       02  FB 004BA 	    CALLS   #2, MAKE_STRING					      ;
				       3E  11 004BF 34$:    BRB     39$							      ; 1095
	   30 	         67 	       59  2C 004C1 35$:    MOVC5   COUNT, (P), #48, #13, ATT_BUFFER			      ; 1150
		         6E 	       0D     004C5									      ;
				       56  DD 004C7 	    PUSHL   ADDRESS						      ; 1151
				  04   AE  9F 004C9 	    PUSHAB  ATT_BUFFER						      ;
				       26  11 004CC 	    BRB     37$							      ;
	   30 	         67 	       59  2C 004CE 36$:    MOVC5   COUNT, (P), #48, #44, ATT_BUFFER			      ; 1155
		         6E 	       2C     004D2									      ;
		    14   A6	       6E  B0 004D4 	    MOVW    ATT_BUFFER, 20(ADDRESS)				      ; 1156
				  1E   A6  9F 004D8 	    PUSHAB  30(ADDRESS)						      ; 1157
				  06   AE  9F 004DB 	    PUSHAB  ATT_BUFFER+2					      ;
		  0000V  CF	       02  FB 004DE 	    CALLS   #2, CONVERT_DATE					      ;
				  16   A6  9F 004E3 	    PUSHAB  22(ADDRESS)						      ; 1158
				  13   AE  9F 004E6 	    PUSHAB  ATT_BUFFER+15					      ;
		  0000V  CF	       02  FB 004E9 	    CALLS   #2, CONVERT_DATE					      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 5-8
;
				  26   A6  9F 004EE 	    PUSHAB  38(ADDRESS)						      ; 1159
				  20   AE  9F 004F1 	    PUSHAB  ATT_BUFFER+28					      ;
		  0000V  CF	       02  FB 004F4 37$:    CALLS   #2, CONVERT_DATE					      ;
				       04  11 004F9 	    BRB     39$							      ; 1095
	   66 	         67 	       59  28 004FB 38$:    MOVC3   COUNT, (P), (ADDRESS)				      ; 1162
	   02 	         58 	       5B  F2 004FF 39$:    AOBLSS  R11, I, 40$						      ; 1021
				       03  11 00503 	    BRB     41$							      ;
				     FE40  31 00505 40$:    BRW     4$							      ;
		         09 	       5A  E8 00508 41$:    BLBS    CONTIG, 42$						      ; 1171
		         50 	  04   AC  D0 0050B 	    MOVL    HEADER, R0						      ;
		    34   A0	  80   8F  8A 0050F 	    BICB2   #128, 52(R0)					      ;
		  0000G  CF	       00  FB 00514 42$:    CALLS   #0, PMS_END_SUB					      ; 1176
					   04 00519 	    RET     							      ; 0915

; Routine Size:  582 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 6
;
;	1179	ROUTINE CONVERT_DATE (STRING, TIME_BLOCK) : NOVALUE =
;	1180	
;	1181	!++
;	1182	!
;	1183	! FUNCTIONAL DESCRIPTION:
;	1184	!
;	1185	!	This routine converts a files-11 structure level 1 ASCII date/time
;	1186	!	string into 64 bit binary format.
;	1187	!
;	1188	!
;	1189	! CALLING SEQUENCE:
;	1190	!	CONVERT_DATE (ARG1, ARG2)
;	1191	!
;	1192	! INPUT PARAMETERS:
;	1193	!	ARG1: address of date/time string
;	1194	!
;	1195	! IMPLICIT INPUTS:
;	1196	!	NONE
;	1197	!
;	1198	! OUTPUT PARAMETERS:
;	1199	!	ARG2: address of quadword buffer
;	1200	!
;	1201	! IMPLICIT OUTPUTS:
;	1202	!	NONE
;	1203	!
;	1204	! ROUTINE VALUE:
;	1205	!	NONE
;	1206	!
;	1207	! SIDE EFFECTS:
;	1208	!	NONE
;	1209	!
;	1210	!--
;	1211	
;	1212	BEGIN
;	1213	
;	1214	LITERAL
;	1215		DATLEN		= 20;		! length of date/time string
;	1216	
;	1217	LOCAL
;	1218		DATDESC		: VECTOR [2],	! string descriptor for date string
;	1219		DATBUF		: VECTOR [DATLEN, BYTE];
;	1220						! buffer to build expanded string
;	1221	
;	1222	
;	1223	! Copy the given string into the buffer, inserting the date punctuation
;	1224	! as appropriate. Then convert with the system service.
;	1225	!
;	1226	
;	1227	(DATBUF+00)<0,16> = .(.STRING);
;	1228	(DATBUF+02)<0,8>  = '-';
;	1229	(DATBUF+03)<0,24> = .(.STRING+2);
;	1230	(DATBUF+06)<0,24> = '-19';
;	1231	(DATBUF+09)<0,16> = .(.STRING+5);
;	1232	(DATBUF+11)<0,8>  = ' ';
;	1233	(DATBUF+12)<0,16> = .(.STRING+7);

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 6-1
;
;	1234	(DATBUF+14)<0,8>  = ':';
;	1235	(DATBUF+15)<0,16> = .(.STRING+9);
;	1236	(DATBUF+17)<0,8>  = ':';
;	1237	(DATBUF+18)<0,16> = .(.STRING+11);
;	1238	DATDESC[0] = DATLEN;
;	1239	DATDESC[1] = DATBUF;
;	1240	$BINTIM (TIMBUF = DATDESC, TIMADR = .TIME_BLOCK);
;	1241	
;	1242	END;					! end of routine CONVERT_DATE



							    .EXTRN  SYS$BINTIM

					 0000 0051A CONVERT_DATE:
							    .WORD   Save nothing					      ; 1179
		         5E 	       1C  C2 0051C 	    SUBL2   #28, SP						      ;
		         50 	  04   AC  D0 0051F 	    MOVL    STRING, R0						      ; 1227
		         6E 	       60  B0 00523 	    MOVW    (R0), DATBUF					      ;
		    02   AE	       2D  90 00526 	    MOVB    #45, DATBUF+2					      ; 1228
	   18 	         00 	  02   A0  F0 0052A 	    INSV    2(R0), #0, #24, DATBUF+3				      ; 1229
				  03   AE     0052F									      ;
	   18 	         00 0039312D   8F  F0 00531 	    INSV    #3748141, #0, #24, DATBUF+6				      ; 1230
				  06   AE     00539									      ;
		    09   AE	  05   A0  B0 0053B 	    MOVW    5(R0), DATBUF+9					      ; 1231
		    0B   AE	       20  90 00540 	    MOVB    #32, DATBUF+11					      ; 1232
		    0C   AE	  07   A0  B0 00544 	    MOVW    7(R0), DATBUF+12					      ; 1233
		    0E   AE	       3A  90 00549 	    MOVB    #58, DATBUF+14					      ; 1234
		    0F   AE	  09   A0  B0 0054D 	    MOVW    9(R0), DATBUF+15					      ; 1235
		    11   AE	       3A  90 00552 	    MOVB    #58, DATBUF+17					      ; 1236
		    12   AE	  0B   A0  B0 00556 	    MOVW    11(R0), DATBUF+18					      ; 1237
		    14   AE	       14  D0 0055B 	    MOVL    #20, DATDESC					      ; 1238
		    18   AE	       6E  9E 0055F 	    MOVAB   DATBUF, DATDESC+4					      ; 1239
				  08   AC  DD 00563 	    PUSHL   TIME_BLOCK						      ; 1240
				  18   AE  9F 00566 	    PUSHAB  DATDESC						      ;
	      00000000G  9F	       02  FB 00569 	    CALLS   #2, @#SYS$BINTIM					      ;
					   04 00570 	    RET     							      ; 1179

; Routine Size:  87 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 7
;
;	1243	ROUTINE HANDLER (SIGNAL, MECHANISM) : NOVALUE =
;	1244	
;	1245	!++
;	1246	!
;	1247	! FUNCTIONAL DESCRIPTION:
;	1248	!
;	1249	!	This routine is the special condition handler for the write attributes
;	1250	!	protection check. If the protection check fails, this routine simply
;	1251	!	clears the privilege bit in own storage.
;	1252	!
;	1253	! CALLING SEQUENCE:
;	1254	!	HANDLER (ARG1, ARG2)
;	1255	!
;	1256	! INPUT PARAMETERS:
;	1257	!	ARG1: address of signal array
;	1258	!	ARG2: address of mechanism array
;	1259	!
;	1260	! IMPLICIT INPUTS:
;	1261	!	NONE
;	1262	!
;	1263	! OUTPUT PARAMETERS:
;	1264	!	NONE
;	1265	!
;	1266	! IMPLICIT OUTPUTS:
;	1267	!	PRIVILEGE: cleared if protection check fails
;	1268	!
;	1269	! ROUTINE VALUE:
;	1270	!	NONE
;	1271	!
;	1272	! SIDE EFFECTS:
;	1273	!	NONE
;	1274	!
;	1275	!--
;	1276	
;	1277	BEGIN
;	1278	
;	1279	MAP
;	1280		SIGNAL		: REF BBLOCK,	! signal array arg
;	1281		MECHANISM	: REF BBLOCK;	! mechanism array arg
;	1282	
;	1283	EXTERNAL ROUTINE
;	1284		SYS$UNWIND	: ADDRESSING_MODE (ABSOLUTE);
;	1285						! system unwind stack service
;	1286	
;	1287	
;	1288	PRIVILEGE[0] = 0;
;	1289	SYS$UNWIND (MECHANISM[CHF$L_MCH_DEPTH], 0);
;	1290	
;	1291	END;					! end of routine HANDLER





					 0000 00571 HANDLER:.WORD   Save nothing					      ; 1243

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:20:34	DBB3:[F11B.SRC]RWATTR.B32;8					Page 7-1
;
		  0000'  CF	       01  8A 00573 	    BICB2   #1, PRIVILEGE					      ; 1288
				       7E  D4 00578 	    CLRL    -(SP)						      ; 1289
	   7E 	    08   AC	       08  C1 0057A 	    ADDL3   #8, MECHANISM, -(SP)				      ;
	      00000000G  9F	       02  FB 0057F 	    CALLS   #2, @#SYS$UNWIND					      ;
					   04 00586 	    RET     							      ; 1243

; Routine Size:  22 bytes


;	1292	
;	1293	END
;	1294	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $CODE$         	  1415  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $LOCKEDD1$     	     4    WRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $LOCKEDC2$     	     8  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        53         0       258





; Size:		1303 code + 124 data bytes
; Run Time:	00:30.5
; Elapsed Time:	00:53.3
; Memory Used:	420 pages
; Compilation Complete
