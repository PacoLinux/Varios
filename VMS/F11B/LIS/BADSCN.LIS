
; Bliss-32 10.1-416	Monday 21-AUG-1978 23:07:35	DBB3:[F11B.SRC]BADSCN.B32;9					Page 1
;
;	0001	MODULE BADSCN (
;	0002			LANGUAGE (BLISS32),
;	0003			IDENT = 'B0001'
;	0004			) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1977
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	!
;	0028	! FACILITY:  F11ACP Structure Level 2
;	0029	!
;	0030	! ABSTRACT:
;	0031	!
;	0032	!	This routine scans the pending bad block list and enters or removes
;	0033	!	entries.
;	0034	!
;	0035	! ENVIRONMENT:
;	0036	!
;	0037	!	STARLET operating system, including privileged system services
;	0038	!	and internal exec routines.
;	0039	!
;	0040	!--
;	0041	!
;	0042	!
;	0043	! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  22-May-1978  10:33
;	0044	!
;	0045	! REVISION HISTORY:
;	0046	!
;	0047	!**
;	0048	
;	0049	
;	0050	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0051	REQUIRE 'SRC$:FCPDEF.B32';

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:07:35	DBB3:[F11B.SRC]BADSCN.B32;9					Page 2
;
;	0400	GLOBAL ROUTINE SCAN_BADLOG (FID, BASE_VBN, BASE_LBN, MODE, BLOCK_COUNT) : NOVALUE =
;	0401	
;	0402	!++
;	0403	!
;	0404	! FUNCTIONAL DESCRIPTION:
;	0405	!
;	0406	!	This routine scans the volume bad block log for the specified block(s)
;	0407	!	ande enters or removes them, depending on the mode.
;	0408	!
;	0409	!
;	0410	! CALLING SEQUENCE:
;	0411	!	SCAN_BADLOG (ARG1, ARG2, ARG3, ARG4, ARG5)
;	0412	!
;	0413	! INPUT PARAMETERS:
;	0414	!	ARG1: file ID of file containing bad block
;	0415	!	ARG2: VBN in file of bad block
;	0416	!	ARG3: LBN of bad block
;	0417	!	ARG4: mode of operation
;	0418	!		REMOVE_BADBLOCK	= 0
;	0419	!		ENTER_READERR	= 1
;	0420	!		ENTER_WRITERR	= 2
;	0421	!	ARG5: count of blocks to process (remove only)
;	0422	!
;	0423	! IMPLICIT INPUTS:
;	0424	!	NONE
;	0425	!
;	0426	! OUTPUT PARAMETERS:
;	0427	!	NONE
;	0428	!
;	0429	! IMPLICIT OUTPUTS:
;	0430	!	NONE
;	0431	!
;	0432	! ROUTINE VALUE:
;	0433	!	NONE
;	0434	!
;	0435	! SIDE EFFECTS:
;	0436	!	volume bad block list file altered
;	0437	!
;	0438	!--
;	0439	
;	0440	BEGIN
;	0441	
;	0442	MAP
;	0443		FID		: REF BBLOCK;	! file ID argument
;	0444	
;	0445	LABEL
;	0446		SEARCH_LOOP;			! bad block list search
;	0447	
;	0448	LOCAL
;	0449		VBN,				! VBN of current block of file
;	0450		LBN,				! LBN of current block
;	0451		FIRST_FREE,			! VBN containing first free slot
;	0452		FREE_OFFSET,			! byte offset in block of free slot
;	0453		P		: REF BBLOCK,	! record pointer
;	0454		FIB		: REF BBLOCK,	! local pointer to secondary FIB

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:07:35	DBB3:[F11B.SRC]BADSCN.B32;9					Page 2-1
;
;	0455		WINDOW		: REF BBLOCK,	! address of bad block file window
;	0456		FCB		: REF BBLOCK,	! address of bad block file FCB
;	0457		HEADER		: REF BBLOCK;	! address of bad block file header
;	0458	
;	0459	EXTERNAL
;	0460		CONTEXT_START,			! start of reentrant context area
;	0461		CONTEXT_SAVE,			! start of context save area
;	0462		SECOND_FIB	: BBLOCK,	! FIB for secondary operations
;	0463		CURRENT_FIB	: REF BBLOCK,	! pointer to FIB currently in use
;	0464		CURRENT_VCB	: REF BBLOCK;	! VCB of this volume
;	0465	
;	0466	EXTERNAL LITERAL
;	0467		CONTEXT_SIZE;			! length of context save area
;	0468	
;	0469	EXTERNAL ROUTINE
;	0470		OPEN_FILE,			! open a data file
;	0471		READ_DATA,			! read a file block
;	0472		CLOSE_FILE,			! close the data file
;	0473		CREATE_BLOCK,			! fabricate a block buffer
;	0474		MARK_DIRTY,			! mark buffer dirty
;	0475		READ_HEADER,			! read file header
;	0476		EXTEND,				! extend a file
;	0477		CHECKSUM,			! checksum file header
;	0478		WRITE_HEADER,			! write a file header
;	0479		MAP_VBN;			! map virtual to logical
;	0480	
;	0481	
;	0482	! Check the reserved file count to see if there is a bad block list file.
;	0483	! If not, forget the whole thing. If there is, set up secondary context and
;	0484	! open the file.
;	0485	!
;	0486	
;	0487	IF .CURRENT_VCB[VCB$B_RESFILES] LSSU BADLOG_FID THEN RETURN;
;	0488	
;	0489	CH$MOVE (CONTEXT_SIZE, CONTEXT_START, CONTEXT_SAVE);
;	0490	CH$FILL (0, CONTEXT_SIZE, CONTEXT_START);
;	0491	CURRENT_FIB = FIB = SECOND_FIB;
;	0492	CH$FILL (0, FIB$C_LENGTH, .FIB);
;	0493	FIB[FIB$W_FID_NUM] = BADLOG_FID;
;	0494	FIB[FIB$W_FID_SEQ] = BADLOG_FID;
;	0495	
;	0496	WINDOW = OPEN_FILE (FIB[FIB$W_FID], 1);
;	0497	
;	0498	! Scan the pending bad block file for a match on the given LBN (in remove mode,
;	0499	! scan for the given range). Also look for the first available free space.
;	0500	!
;	0501	
;	0502	FIRST_FREE = 0;
;	0503	VBN = 0;
;	0504	
;	0505	SEARCH_LOOP: BEGIN
;	0506	WHILE 1 DO
;	0507	    BEGIN
;	0508	    VBN = .VBN + 1;
;	0509	    P = READ_DATA (.WINDOW, .VBN, 1);

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:07:35	DBB3:[F11B.SRC]BADSCN.B32;9					Page 2-2
;
;	0510	    IF .P EQL 0 THEN EXITLOOP;
;	0511	
;	0512	    INCR J FROM 0 TO 512/PBB$C_LENGTH - 1
;	0513	    DO
;	0514		BEGIN
;	0515		IF .MODE EQL REMOVE_BADBLOCK
;	0516		THEN
;	0517		    BEGIN
;	0518		    IF  .P[PBB$L_LBN] GEQU .BASE_LBN
;	0519		    AND .P[PBB$L_LBN] LSSU .BASE_LBN + .BLOCK_COUNT
;	0520		    THEN
;	0521			BEGIN
;	0522			CH$FILL (0, PBB$C_LENGTH, .P);
;	0523			MARK_DIRTY (.P);
;	0524			END;
;	0525		    END
;	0526		ELSE
;	0527		    BEGIN
;	0528		    IF .P[PBB$B_FLAGS] EQL 0
;	0529		    AND .FIRST_FREE EQL 0
;	0530		    THEN
;	0531			BEGIN
;	0532			FIRST_FREE = .VBN;
;	0533			FREE_OFFSET = .J * PBB$C_LENGTH;
;	0534			END;
;	0535		    IF .P[PBB$L_LBN] EQL .BASE_LBN
;	0536		    THEN
;	0537			BEGIN
;	0538			IF .P[PBB$B_COUNT] LSSU 255
;	0539			THEN P[PBB$B_COUNT] = .P[PBB$B_COUNT] + 1;
;	0540			IF .MODE EQL ENTER_READERR
;	0541			THEN P[PBB$V_READERR] = 1
;	0542			ELSE P[PBB$V_WRITERR] = 1;
;	0543			MARK_DIRTY (.P);
;	0544			LEAVE SEARCH_LOOP;
;	0545			END;
;	0546		    END;
;	0547	
;	0548		P = .P + PBB$C_LENGTH;
;	0549		END;				! end of loop within block
;	0550	    END;				! end of loop scanning blocks
;	0551	
;	0552	! We get here if we fail to match on the block (or were scanning to remove).
;	0553	! On a remove, we are now done. For an enter, take the first free slot found.
;	0554	! If there was none, we have to extend the file.
;	0555	!
;	0556	
;	0557	IF .MODE EQL REMOVE_BADBLOCK THEN LEAVE SEARCH_LOOP;
;	0558	
;	0559	IF .FIRST_FREE EQL 0
;	0560	THEN
;	0561	    BEGIN
;	0562	    FCB = .WINDOW[WCB$L_FCB];
;	0563	    HEADER = READ_HEADER (0, .FCB);
;	0564	

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:07:35	DBB3:[F11B.SRC]BADSCN.B32;9					Page 2-3
;
;	0565	    IF .FCB[FCB$L_EFBLK] GEQU .FCB[FCB$L_FILESIZE]
;	0566	    THEN
;	0567		BEGIN
;	0568		FIB[FIB$L_EXSZ] = 1;
;	0569		FIB[FIB$V_NOHDREXT] = 1;
;	0570		EXTEND (.FIB, .HEADER);
;	0571		END;
;	0572	
;	0573	    BBLOCK [HEADER[FH2$W_RECATTR], FAT$W_EFBLKL] =
;	0574			.BBLOCK [HEADER[FH2$W_RECATTR], FAT$W_EFBLKL] + 1;
;	0575	    CHECKSUM (.HEADER);
;	0576	    WRITE_HEADER ();
;	0577	
;	0578	    LBN = MAP_VBN (.VBN, .WINDOW);
;	0579	    IF .LBN EQL -1
;	0580	    THEN BUG_CHECK (HDRNOTMAP, FATAL, 'Block just created not mapped');
;	0581	    P = CREATE_BLOCK (.LBN, 1, DATA_TYPE);
;	0582	    FREE_OFFSET = 0;
;	0583	    END
;	0584	
;	0585	ELSE
;	0586	    P = READ_DATA (.WINDOW, .FIRST_FREE, 1);
;	0587	
;	0588	! Now build the new bad block list entry.
;	0589	!
;	0590	
;	0591	P = .P + .FREE_OFFSET;
;	0592	
;	0593	CH$COPY (FID$C_LENGTH, .FID, 0, PBB$C_LENGTH, P[PBB$W_FID]);
;	0594	P[PBB$L_VBN] = .BASE_VBN;
;	0595	P[PBB$L_LBN] = .BASE_LBN;
;	0596	P[PBB$B_COUNT] = .P[PBB$B_COUNT] + 1;
;	0597	IF .MODE EQL ENTER_READERR
;	0598	THEN P[PBB$V_READERR] = 1
;	0599	ELSE P[PBB$V_WRITERR] = 1;
;	0600	
;	0601	MARK_DIRTY (.P);
;	0602	
;	0603	END;					! end of block SEARCH_LOOP
;	0604	
;	0605	CLOSE_FILE (.WINDOW);			! close the bad block list file
;	0606	CH$MOVE (CONTEXT_SIZE, CONTEXT_SAVE, CONTEXT_START);
;	0607	CONTEXT_SAVE = 0;
;	0608	
;	0609	END;					! end of routine SCAN_BADLOG


							    .TITLE  BADSCN
							    .IDENT  \B0001\

							    .PSECT  $LOCKEDC2$,NOWRT,2

				  FEFF  0000  00000 P.AAA:  .WORD   0, -257						      ;
					0000* 00004 	    .WORD   <BUG$_HDRNOTMAP!4>					      ;
					      00006	    .BLKB   2

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:07:35	DBB3:[F11B.SRC]BADSCN.B32;9					Page 2-4
;

							    .EXTRN  CONTEXT_START, CONTEXT_SAVE, SECOND_FIB, CURRENT_FIB
							    .EXTRN  CURRENT_VCB, CONTEXT_SIZE, OPEN_FILE, READ_DATA
							    .EXTRN  CLOSE_FILE, CREATE_BLOCK, MARK_DIRTY, READ_HEADER
							    .EXTRN  EXTEND, CHECKSUM, WRITE_HEADER, MAP_VBN, BUG$_HDRNOTMAP

							    .PSECT  $CODE$,NOWRT,2

					 0FFC 00000 	    .ENTRY  SCAN_BADLOG, Save R2,R3,R4,R5,R6,R7,R8,R9,R10,R11	      ; 0400
		         5E 	       08  C2 00002 	    SUBL2   #8, SP						      ;
		         50 	0000G  CF  D0 00005 	    MOVL    CURRENT_VCB, R0					      ; 0487
		         09 	  4F   A0  91 0000A 	    CMPB    79(R0), #9						      ;
				       01  1E 0000E 	    BGEQU   1$							      ;
					   04 00010 	    RET     							      ;
    0000G  CF	  0000G  CF	0000G  8F  28 00011 1$:     MOVC3   #CONTEXT_SIZE, CONTEXT_START, CONTEXT_SAVE		      ; 0489
	   00 	         6E 	       00  2C 0001B 	    MOVC5   #0, (SP), #0, #CONTEXT_SIZE, CONTEXT_START		      ; 0490
		  0000G  CF	0000G  8F     0001F									      ;
		         57 	0000G  CF  9E 00025 	    MOVAB   SECOND_FIB, FIB					      ; 0491
		  0000G  CF	       57  D0 0002A 	    MOVL    FIB, CURRENT_FIB					      ;
	   00 	         6E 	       00  2C 0002F 	    MOVC5   #0, (SP), #0, #44, (FIB)				      ; 0492
		         67 	       2C     00033									      ;
		    04   A7 00090009   8F  D0 00035 	    MOVL    #589833, 4(FIB)					      ; 0493
				       01  DD 0003D 	    PUSHL   #1							      ; 0496
				  04   A7  9F 0003F 	    PUSHAB  4(FIB)						      ;
		  0000G  CF	       02  FB 00042 	    CALLS   #2, OPEN_FILE					      ;
		         5A 	       50  D0 00047 	    MOVL    R0, WINDOW						      ;
				       59  D4 0004A 	    CLRL    FIRST_FREE						      ; 0502
				  04   AE  D4 0004C 	    CLRL    VBN							      ; 0503
		         5B 	  10   AC  D0 0004F 	    MOVL    MODE, R11						      ; 0515
				  04   AE  D6 00053 2$:     INCL    VBN							      ; 0508
				       01  DD 00056 	    PUSHL   #1							      ; 0509
				  08   AE  DD 00058 	    PUSHL   VBN							      ;
				       5A  DD 0005B 	    PUSHL   WINDOW						      ;
		  0000G  CF	       03  FB 0005D 	    CALLS   #3, READ_DATA					      ;
		         56 	       50  D0 00062 	    MOVL    R0, P						      ;
				       56  13 00065 	    BEQL    8$							      ; 0510
				       58  D4 00067 	    CLRL    J							      ; 0512
				       5B  D5 00069 3$:     TSTL    R11							      ; 0515
				       22  12 0006B 	    BNEQ    4$							      ;
		    0C   AC	  0C   A6  D1 0006D 	    CMPL    12(P), BASE_LBN					      ; 0518
				       40  1F 00072 	    BLSSU   7$							      ;
	   50 	    0C   AC	  14   AC  C1 00074 	    ADDL3   BLOCK_COUNT, BASE_LBN, R0				      ; 0519
		         50 	  0C   A6  D1 0007A 	    CMPL    12(P), R0						      ;
				       34  1E 0007E 	    BGEQU   7$							      ;
	   00 	         6E 	       00  2C 00080 	    MOVC5   #0, (SP), #0, #16, (P)				      ; 0522
		         66 	       10     00084									      ;
				       56  DD 00086 	    PUSHL   P							      ; 0523
		  0000G  CF	       01  FB 00088 	    CALLS   #1, MARK_DIRTY					      ;
				       25  11 0008D 	    BRB     7$							      ; 0515
				  06   A6  95 0008F 4$:     TSTB    6(P)						      ; 0528
				       0C  12 00092 	    BNEQ    5$							      ;
				       59  D5 00094 	    TSTL    FIRST_FREE						      ; 0529
				       08  12 00096 	    BNEQ    5$							      ;
		         59 	  04   AE  D0 00098 	    MOVL    VBN, FIRST_FREE					      ; 0532
	   6E 	         58 	       04  78 0009C 	    ASHL    #4, J, FREE_OFFSET					      ; 0533

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:07:35	DBB3:[F11B.SRC]BADSCN.B32;9					Page 2-5
;
		    0C   AC	  0C   A6  D1 000A0 5$:     CMPL    12(P), BASE_LBN					      ; 0535
				       0D  12 000A5 	    BNEQ    7$							      ;
		    FF   8F	  07   A6  91 000A7 	    CMPB    7(P), #255						      ; 0538
				       03  1E 000AC 	    BGEQU   6$							      ;
				     0098  31 000AE 	    BRW     14$							      ;
				     0098  31 000B1 6$:     BRW     15$							      ;
		         56 	       10  C0 000B4 7$:     ADDL2   #16, P						      ; 0548
	   AE 	         58 	       1F  F3 000B7 	    AOBLEQ  #31, J, 3$						      ; 0512
				       96  11 000BB 	    BRB     2$							      ; 0506
				       5B  D5 000BD 8$:     TSTL    R11							      ; 0557
				       03  12 000BF 	    BNEQ    9$							      ;
				     009E  31 000C1 	    BRW     18$							      ;
				       59  D5 000C4 9$:     TSTL    FIRST_FREE						      ; 0559
				       64  12 000C6 	    BNEQ    12$							      ;
		         53 	  18   AA  D0 000C8 	    MOVL    24(WINDOW), FCB					      ; 0562
				       53  DD 000CC 	    PUSHL   FCB							      ; 0563
				       7E  D4 000CE 	    CLRL    -(SP)						      ;
		  0000G  CF	       02  FB 000D0 	    CALLS   #2, READ_HEADER					      ;
		         52 	       50  D0 000D5 	    MOVL    R0, HEADER						      ;
		    34   A3	  40   A3  D1 000D8 	    CMPL    64(FCB), 52(FCB)					      ; 0565
				       11  1F 000DD 	    BLSSU   10$							      ;
		    18   A7	       01  D0 000DF 	    MOVL    #1, 24(FIB)						      ; 0568
		    17   A7	       02  88 000E3 	    BISB2   #2, 23(FIB)						      ; 0569
				       52  DD 000E7 	    PUSHL   HEADER						      ; 0570
				       57  DD 000E9 	    PUSHL   FIB							      ;
		  0000G  CF	       02  FB 000EB 	    CALLS   #2, EXTEND						      ;
				  1E   A2  B6 000F0 10$:    INCW    30(HEADER)						      ; 0574
				       52  DD 000F3 	    PUSHL   HEADER						      ; 0575
		  0000G  CF	       01  FB 000F5 	    CALLS   #1, CHECKSUM					      ;
		  0000G  CF	       00  FB 000FA 	    CALLS   #0, WRITE_HEADER					      ; 0576
				       5A  DD 000FF 	    PUSHL   WINDOW						      ; 0578
				  08   AE  DD 00101 	    PUSHL   VBN							      ;
		  0000G  CF	       02  FB 00104 	    CALLS   #2, MAP_VBN						      ;
		         52 	       50  D0 00109 	    MOVL    R0, LBN						      ;
	      FFFFFFFF   8F	       52  D1 0010C 	    CMPL    LBN, #-1						      ; 0579
				       05  12 00113 	    BNEQ    11$							      ;
		  0000'  CF	       00  FB 00115 	    CALLS   #0, P.AAA						      ; 0580
				       04  DD 0011A 11$:    PUSHL   #4							      ; 0581
				       01  DD 0011C 	    PUSHL   #1							      ;
				       52  DD 0011E 	    PUSHL   LBN							      ;
		  0000G  CF	       03  FB 00120 	    CALLS   #3, CREATE_BLOCK					      ;
		         56 	       50  D0 00125 	    MOVL    R0, P						      ;
				       6E  D4 00128 	    CLRL    FREE_OFFSET						      ; 0582
				       0E  11 0012A 	    BRB     13$							      ; 0559
				       01  DD 0012C 12$:    PUSHL   #1							      ; 0586
				       59  DD 0012E 	    PUSHL   FIRST_FREE						      ;
				       5A  DD 00130 	    PUSHL   WINDOW						      ;
		  0000G  CF	       03  FB 00132 	    CALLS   #3, READ_DATA					      ;
		         56 	       50  D0 00137 	    MOVL    R0, P						      ;
		         56 	       6E  C0 0013A 13$:    ADDL2   FREE_OFFSET, P					      ; 0591
	   00 	    04   BC	       06  2C 0013D 	    MOVC5   #6, @FID, #0, #16, (P)				      ; 0593
		         66 	       10     00142									      ;
		    08   A6	  08   AC  7D 00144 	    MOVQ    BASE_VBN, 8(P)					      ; 0594
				  07   A6  96 00149 14$:    INCB    7(P)						      ; 0596
		         01 	       5B  D1 0014C 15$:    CMPL    R11, #1						      ; 0597

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:07:35	DBB3:[F11B.SRC]BADSCN.B32;9					Page 2-6
;
				       06  12 0014F 	    BNEQ    16$							      ;
		    06   A6	       01  88 00151 	    BISB2   #1, 6(P)						      ; 0598
				       04  11 00155 	    BRB     17$							      ; 0597
		    06   A6	       02  88 00157 16$:    BISB2   #2, 6(P)						      ; 0599
				       56  DD 0015B 17$:    PUSHL   P							      ; 0601
		  0000G  CF	       01  FB 0015D 	    CALLS   #1, MARK_DIRTY					      ;
				       5A  DD 00162 18$:    PUSHL   WINDOW						      ; 0605
		  0000G  CF	       01  FB 00164 	    CALLS   #1, CLOSE_FILE					      ;
    0000G  CF	  0000G  CF	0000G  8F  28 00169 	    MOVC3   #CONTEXT_SIZE, CONTEXT_SAVE, CONTEXT_START		      ; 0606
				0000G  CF  D4 00173 	    CLRL    CONTEXT_SAVE					      ; 0607
					   04 00177 19$:    RET     							      ; 0400

; Routine Size:  376 bytes


;	0610	
;	0611	END
;	0612	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $LOCKEDC2$     	     8  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $CODE$         	   376  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        28         0       235





; Size:		376 code + 8 data bytes
; Run Time:	00:09.7
; Elapsed Time:	00:18.6
; Memory Used:	353 pages
; Compilation Complete
