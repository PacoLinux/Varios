
; Bliss-32 10.1-416	Monday 21-AUG-1978 23:14:25	DBB3:[F11B.SRC]EXTEND.B32;10					Page 1
;
;	0001	MODULE EXTEND (
;	0002			LANGUAGE (BLISS32),
;	0003			IDENT = 'B0014'
;	0004			) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1977
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	!
;	0028	! FACILITY:  F11ACP Structure Level 1
;	0029	!
;	0030	! ABSTRACT:
;	0031	!
;	0032	!	This routine extends a file by the requested number of blocks.
;	0033	!
;	0034	! ENVIRONMENT:
;	0035	!
;	0036	!	STARLET operating system, including privileged system services
;	0037	!	and internal exec routines.
;	0038	!
;	0039	!--
;	0040	!
;	0041	!
;	0042	! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  24-Feb-1977  15:42
;	0043	!
;	0044	! REVISION HISTORY:
;	0045	!
;	0046	!   Andrew C. Goldstein, 22-Mar-1977  14:30
;	0047	!   X0002 - Checksum file header after operation
;	0048	!
;	0049	!   Andrew C. Goldstein, 5-Apr-1977  11:30
;	0050	!   X0003 - Maximize extend size with volume default
;	0051	!
;	0052	!   Andrew C. Goldstein, 12-Apr-1977  15:37
;	0053	!   X0004 - Modify for buffer manager
;	0054	!
;	0055	!   Andrew C. Goldstein, 13-Jul-1977  15:45

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:14:25	DBB3:[F11B.SRC]EXTEND.B32;10					Page 1-1
;
;	0056	!   X0005 - Rework file header checksumming
;	0057	!
;	0058	!   Andrew C. Goldstein, 10-Aug-1977  15:31
;	0059	!   X0006 - Add multi-header support
;	0060	!
;	0061	!   Andrew C. Goldstein, 26-Aug-1977  10:39
;	0062	!   X0007 - Add performance metering
;	0063	!
;	0064	!   Andrew C. Goldstein, 26-Sep-1977  14:51
;	0065	!   X0008 - Add contiguous best effort flag in header
;	0066	!
;	0067	!   Andrew C. Goldstein, 20-Dec-1977  1:32
;	0068	!   X0009 - Modify for structure level 2
;	0069	!
;	0070	!   Andrew C. Goldstein, 24-Jan-1978  18:58
;	0071	!   B0010 - User FIB to accumulate file size for reentrancy
;	0072	!
;	0073	!   Andrew C. Goldstein, 2-Feb-1978  21:55
;	0074	!   B0011 - Limit contiguous best try to 3 scans
;	0075	!
;	0076	!   Andrew C. Goldstein, 17-Feb-1978  14:59
;	0077	!   B0012 - Use new bug check
;	0078	!
;	0079	!   Andrew C. Goldstein, 2-May-78  15:22
;	0080	!   B0013 - Update HIBLK in record attributes to reflect file size
;	0081	!
;	0082	!   Andrew C. Goldstein, 27-Jun-78  17:19
;	0083	!   B0014 - Limit extend size to 31 bits
;	0084	!
;	0085	!**
;	0086	
;	0087	
;	0088	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0089	REQUIRE 'SRC$:FCPDEF.B32';
;	0438	
;	0439	FORWARD ROUTINE
;	0440		EXTEND		: NOVALUE,	! extend a file
;	0441		UPDATE_FILESIZE	: NOVALUE;	! update file size in FCB

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:14:25	DBB3:[F11B.SRC]EXTEND.B32;10					Page 2
;
;	0442	GLOBAL ROUTINE EXTEND (USER_FIB, FILEHEADER) : NOVALUE =
;	0443	
;	0444	!++
;	0445	!
;	0446	! FUNCTIONAL DESCRIPTION:
;	0447	!
;	0448	!	This routine extends the given file by the amount and in the
;	0449	!	mode given in the FIB. The blocks are allocated from the storage
;	0450	!	bitmap and retrieval pointers are constructed in the header.
;	0451	!
;	0452	! CALLING SEQUENCE:
;	0453	!	EXTEND (ARG1, ARG2)
;	0454	!
;	0455	! INPUT PARAMETERS:
;	0456	!	ARG1: address of FIB for operation
;	0457	!	ARG2: addres of file header
;	0458	!
;	0459	! IMPLICIT INPUTS:
;	0460	!	CURRENT_WINDOW: window of file, if open
;	0461	!
;	0462	! OUTPUT PARAMETERS:
;	0463	!	NONE
;	0464	!
;	0465	! IMPLICIT OUTPUTS:
;	0466	!	NONE
;	0467	!
;	0468	! ROUTINE VALUE:
;	0469	!	NONE
;	0470	!
;	0471	! SIDE EFFECTS:
;	0472	!	blocks allocated, file header altered
;	0473	!
;	0474	!--
;	0475	
;	0476	BEGIN
;	0477	
;	0478	LINKAGE
;	0479		L_MAP_POINTER	= JSB :
;	0480				  GLOBAL (OLD_COUNT = 6, OLD_LBN = 7, MAP_POINTER = 8),
;	0481	
;	0482		L_MAKE_POINTER	= CALL :
;	0483				  GLOBAL (BUILD_POINTER = 9);
;	0484	
;	0485	MAP
;	0486		USER_FIB	: REF BBLOCK,	! FIB of operation
;	0487		FILEHEADER	: REF BBLOCK;	! file header to extend
;	0488	
;	0489	LABEL
;	0490		ALLOC_LOOP;			! Block allocation and recording loop
;	0491	
;	0492	GLOBAL REGISTER
;	0493		OLD_COUNT	= 6,		! count of previous retrieval pointer
;	0494		OLD_LBN		= 7,		! LBN of previous retrieval pointer
;	0495		MAP_POINTER	= 8,		! pointer to retrieve map entries
;	0496		BUILD_POINTER	= 9;		! pointer to build map entries

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:14:25	DBB3:[F11B.SRC]EXTEND.B32;10					Page 2-1
;
;	0497	
;	0498	LOCAL
;	0499		FIB		: REF BBLOCK,	! address of FIB
;	0500		HEADER		: REF BBLOCK,	! address of current file header
;	0501		FCB		: REF BBLOCK,	! FCB of header being extended
;	0502		NEW_HEADER	: REF BBLOCK,	! next extension file header
;	0503		MAP_END,			! end of map area pointers
;	0504		BLOCKS_NEEDED,			! number of blocks to be allocated
;	0505		CBT_COUNT,			! count of bitmap scans
;	0506		EXTEND_VBN,			! starting VBN of extend
;	0507		LBN,				! LBN of blocks allocated
;	0508		ALLOC_COUNT,			! number of blocks allocated
;	0509		COUNT;				! count of blocks for map pointers
;	0510	
;	0511	EXTERNAL
;	0512		USER_STATUS	: VECTOR,	! I/O status block of user
;	0513		PRIMARY_FCB	: REF BBLOCK,	! FCB of file
;	0514		UNREC_LBN,			! LBN of unrecorded blocks
;	0515		UNREC_COUNT,			! count of unrecorded blocks
;	0516		CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
;	0517		CURRENT_VCB	: REF BBLOCK,	! VCB of volume
;	0518		CURRENT_WINDOW	: REF BBLOCK;	! window of file if open
;	0519	
;	0520	EXTERNAL ROUTINE
;	0521		PMS_START_SUB,			! start subfunction metering
;	0522		PMS_END_SUB,			! end subfunction metering
;	0523		NEXT_HEADER,			! read next extension header
;	0524		MARK_DIRTY,			! mark buffer for write-back
;	0525		GET_MAP_POINTER	: L_MAP_POINTER, ! get contents of map pointer
;	0526		MAKE_POINTER	: L_MAKE_POINTER, ! build new map pointer
;	0527		ALLOC_BLOCKS,			! allocate blocks from storage map
;	0528		EXTEND_HEADER,			! create extension header
;	0529		RETURN_BLOCKS,			! return blocks to storage map
;	0530		CHECKSUM,			! compute file header checksum
;	0531		TURN_WINDOW,			! update file window
;	0532		INIT_FCB2,			! initialize FCB
;	0533		WRITE_HEADER,			! write file header
;	0534		READ_HEADER;			! read file header
;	0535	
;	0536	
;	0537	! Start metering for this subfunction.
;	0538	!
;	0539	
;	0540	PMS_START_SUB (PMS_ALLOC);
;	0541	
;	0542	! Check the allocation control bits for validity. Then get the block count
;	0543	! and set up pointers.
;	0544	!
;	0545	
;	0546	FIB = .USER_FIB;
;	0547	IF (NOT .FIB[FIB$V_ALCON] AND .FIB[FIB$V_FILCON])
;	0548	OR .FIB[FIB$L_EXSZ] LSS 0
;	0549	THEN ERR_EXIT (SS$_BADPARAM);
;	0550	
;	0551	BLOCKS_NEEDED = (

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:14:25	DBB3:[F11B.SRC]EXTEND.B32;10					Page 2-2
;
;	0552	    IF .FIB[FIB$V_ALDEF]
;	0553	    THEN MAXU (.CURRENT_VCB[VCB$W_EXTEND], .FIB[FIB$L_EXSZ])
;	0554	    ELSE .FIB[FIB$L_EXSZ]
;	0555	    );
;	0556	
;	0557	HEADER = .FILEHEADER;
;	0558	FCB = .PRIMARY_FCB;
;	0559	EXTEND_VBN = 1;
;	0560	
;	0561	! If the file is marked contiguous best effort, make the extend so.
;	0562	!
;	0563	
;	0564	IF .HEADER[FH2$V_CONTIGB]
;	0565	THEN
;	0566	    IF NOT .FIB[FIB$V_ALCON] THEN FIB[FIB$V_ALCONB] = 1;
;	0567	
;	0568	! Scan through this header's map area and through the map area of all
;	0569	! extension headers to compute the current file size and find the end of file
;	0570	! to start extension.
;	0571	!
;	0572	
;	0573	WHILE 1 DO
;	0574	    BEGIN
;	0575	    MAP_POINTER = .HEADER + .HEADER[FH2$B_MPOFFSET]*2;
;	0576	    MAP_END = .MAP_POINTER + .HEADER[FH2$B_MAP_INUSE]*2;
;	0577	    BUILD_POINTER = .MAP_POINTER;
;	0578	
;	0579	    IF .HEADER[FH2$B_MAP_INUSE] NEQ 0 AND .FIB[FIB$V_FILCON]
;	0580	    THEN ERR_EXIT (SS$_BADPARAM);
;	0581	
;	0582	    UNTIL .MAP_POINTER GEQA .MAP_END DO
;	0583		BEGIN
;	0584		BUILD_POINTER = .MAP_POINTER;
;	0585		GET_MAP_POINTER ();
;	0586		EXTEND_VBN = .EXTEND_VBN + .OLD_COUNT;
;	0587		END;
;	0588	
;	0589	    NEW_HEADER = NEXT_HEADER (.HEADER, .FCB);
;	0590	    IF .NEW_HEADER EQL 0 THEN EXITLOOP;
;	0591	    HEADER = .NEW_HEADER;
;	0592	    IF .FCB NEQ 0 THEN FCB = .FCB[FCB$L_EXFCB];
;	0593	    END;
;	0594	
;	0595	! Check the remaining parameters and set the relevant cleanup action flags.
;	0596	!
;	0597	
;	0598	IF .FIB[FIB$L_EXVBN] NEQ 0 AND .FIB[FIB$L_EXVBN] NEQ .EXTEND_VBN
;	0599	THEN ERR_EXIT (SS$_BADPARAM);
;	0600	
;	0601	MARK_DIRTY (.HEADER);
;	0602	CLEANUP_FLAGS[CLF_TRUNCATE] = 1;
;	0603	CLEANUP_FLAGS[CLF_FIXFCB] = 1;
;	0604	
;	0605	CBT_COUNT = 0;				! init count of bitmap scans
;	0606	FIB[FIB$L_EXSZ] = 0;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:14:25	DBB3:[F11B.SRC]EXTEND.B32;10					Page 2-3
;
;	0607	FIB[FIB$L_EXVBN] = .EXTEND_VBN;
;	0608	MAP_POINTER = .BUILD_POINTER;		! point to last entry in map
;	0609	
;	0610	! Now loop, allocating blocks fom the storage map and building retrieval
;	0611	! pointers in the header. Accumulate blocks allocated in the I/O
;	0612	! status block.
;	0613	!
;	0614	
;	0615	ALLOC_LOOP:
;	0616	BEGIN
;	0617	UNTIL .BLOCKS_NEEDED EQL 0 DO
;	0618	    BEGIN
;	0619	
;	0620	    ALLOC_BLOCKS (.FIB, .BLOCKS_NEEDED, LBN, ALLOC_COUNT);
;	0621	    COUNT = .ALLOC_COUNT;
;	0622	    FIB[FIB$L_EXSZ] = .FIB[FIB$L_EXSZ] + .COUNT;
;	0623	    BLOCKS_NEEDED = .BLOCKS_NEEDED - MINU (.BLOCKS_NEEDED, .COUNT);
;	0624	
;	0625	! Build the map pointer. If the new area allocated is contiguous with
;	0626	! the last pointer in the header, merge the pointers.
;	0627	!
;	0628	
;	0629	    IF .HEADER[FH2$B_MAP_INUSE] NEQ 0
;	0630	    THEN
;	0631		BEGIN
;	0632		BUILD_POINTER = .MAP_POINTER;	! save pointer position
;	0633		GET_MAP_POINTER ();
;	0634		IF .OLD_LBN + .OLD_COUNT EQL .LBN
;	0635		THEN
;	0636		    BEGIN
;	0637		    HEADER[FH2$B_MAP_INUSE] = .HEADER[FH2$B_MAP_INUSE]
;	0638					    - (.MAP_POINTER - .BUILD_POINTER) / 2;
;	0639		    MAP_POINTER = .BUILD_POINTER;
;	0640		    COUNT = .COUNT + .OLD_COUNT;
;	0641		    LBN = .OLD_LBN;
;	0642		    END
;	0643		ELSE
;	0644		    BUILD_POINTER = .MAP_POINTER;
;	0645		END;
;	0646	
;	0647	! Now build a retrieval pointer to map the allocated blocks. If the map fills
;	0648	! up, store the unrecorded blocks in common so they can be returned
;	0649	! by the extend cleanup, and create an extension header. If header
;	0650	! extension is inhibited, return the unrecorded blocks and get out quietly.
;	0651	! We first attempt to create a smaller pointer to map at least some of
;	0652	! the blocks that were allocated. We return header full status only if
;	0653	! no new blocks were recorded.
;	0654	!
;	0655	
;	0656	    IF NOT MAKE_POINTER (.COUNT, .LBN, .HEADER)
;	0657	    THEN
;	0658		BEGIN
;	0659		IF .FIB[FIB$V_NOHDREXT]
;	0660		THEN
;	0661		    BEGIN

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:14:25	DBB3:[F11B.SRC]EXTEND.B32;10					Page 2-4
;
;	0662		    IF MAKE_POINTER (1^14, .LBN, .HEADER)
;	0663		    THEN
;	0664			BEGIN
;	0665			COUNT = .COUNT - 1^14;
;	0666			LBN = .LBN + 1^14;
;	0667			END
;	0668		    ELSE IF MAKE_POINTER (256, .LBN, .HEADER)
;	0669		    THEN
;	0670			BEGIN
;	0671			COUNT = .COUNT - 256;
;	0672			LBN = .LBN + 256;
;	0673			END;
;	0674		    RETURN_BLOCKS (.LBN, .COUNT);
;	0675		    FIB[FIB$L_EXSZ] = .FIB[FIB$L_EXSZ] - .COUNT;
;	0676		    IF .FIB[FIB$L_EXSZ] EQL 0
;	0677		    THEN ERR_EXIT (SS$_HEADERFULL);
;	0678		    LEAVE ALLOC_LOOP;
;	0679		    END
;	0680		ELSE
;	0681		    BEGIN
;	0682		    UNREC_LBN = .LBN;
;	0683		    UNREC_COUNT = .COUNT;
;	0684		    HEADER = EXTEND_HEADER (.HEADER, .FCB);
;	0685		    IF .FCB NEQ 0 THEN FCB = .FCB[FCB$L_EXFCB];
;	0686		    MAP_POINTER = .HEADER + .HEADER[FH2$B_MPOFFSET]*2;
;	0687		    BUILD_POINTER = .MAP_POINTER;
;	0688		    IF NOT MAKE_POINTER (.COUNT, .LBN, .HEADER)
;	0689		    THEN BUG_CHECK (EXHFUL, FATAL, 'File extension header has no room');
;	0690		    END;
;	0691		END;
;	0692	
;	0693	    UNREC_COUNT = 0;			! all blocks are now recorded
;	0694	
;	0695	! If this was a contiguous allocation, we are done. Else count the pass
;	0696	! through the allocator. After 3 passes, shut off the contiguous best try
;	0697	! bit to avoid taking forever (since each CBT try is a full sweep of the map).
;	0698	!
;	0699	
;	0700	    IF .FIB[FIB$V_ALCON] THEN EXITLOOP;
;	0701	    CBT_COUNT = .CBT_COUNT + 1;
;	0702	    IF .CBT_COUNT GEQU 3
;	0703	    THEN FIB[FIB$V_ALCONB] = 0;
;	0704	    END;
;	0705	END;					! end of allocation loop
;	0706	
;	0707	! If the file is open by the caller, turn the window to the last VBN
;	0708	! that previously existed as a friendly gesture. Then, if the current header
;	0709	! is an extension header, write it and read back the primary header. Also
;	0710	! set the contiguous bit in the header appropriately and return the extend
;	0711	! data in the FIB. Update the file size in the primary FCB.
;	0712	!
;	0713	
;	0714	IF .CURRENT_WINDOW NEQ 0
;	0715	THEN KERNEL_CALL (TURN_WINDOW, .CURRENT_WINDOW, .HEADER, .FIB[FIB$L_EXVBN]-1, .FCB[FCB$L_STVBN]);
;	0716	

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:14:25	DBB3:[F11B.SRC]EXTEND.B32;10					Page 2-5
;
;	0717	IF .HEADER[FH2$W_FID_NUM] NEQ .FIB[FIB$W_FID_NUM]
;	0718	OR (.CURRENT_VCB[VCB$V_EXTFID] AND .HEADER[FH2$B_FID_NMX] NEQ .FIB[FIB$B_FID_NMX])
;	0719	THEN
;	0720	    BEGIN
;	0721	    CHECKSUM (.HEADER);
;	0722	    WRITE_HEADER ();
;	0723	    IF .FCB NEQ 0 THEN KERNEL_CALL (INIT_FCB2, .FCB, .HEADER);
;	0724	    HEADER = READ_HEADER (FIB[FIB$W_FID], .PRIMARY_FCB);
;	0725	    END;
;	0726	
;	0727	! Update the HIBLK field in the record attributes to reflect the new file
;	0728	! size.
;	0729	!
;	0730	
;	0731	MARK_DIRTY (.HEADER);
;	0732	BBLOCK [HEADER[FH2$W_RECATTR], FAT$L_HIBLK] = ROT (.FIB[FIB$L_EXVBN] + .FIB[FIB$L_EXSZ] - 1, 16);
;	0733	HEADER[FH2$V_CONTIG] = .FIB[FIB$V_FILCON];
;	0734	HEADER[FH2$V_CONTIGB] = .FIB[FIB$V_ALCONB];
;	0735	USER_STATUS[1] = .FIB[FIB$L_EXSZ];
;	0736	KERNEL_CALL (UPDATE_FILESIZE, .FIB[FIB$L_EXVBN] + .FIB[FIB$L_EXSZ] - 1);
;	0737	
;	0738	! Stop metering of this subfunction
;	0739	!
;	0740	
;	0741	PMS_END_SUB ();
;	0742	
;	0743	END;					! end of routine EXTEND


							    .TITLE  EXTEND
							    .IDENT  \B0014\

							    .PSECT  $LOCKEDC2$,NOWRT,2

				  FEFF  0000  00000 P.AAA:  .WORD   0, -257						      ;
					0000* 00004 	    .WORD   <BUG$_EXHFUL!4>					      ;
					      00006	    .BLKB   2

							    .EXTRN  USER_STATUS, PRIMARY_FCB, UNREC_LBN, UNREC_COUNT
							    .EXTRN  CLEANUP_FLAGS, CURRENT_VCB, CURRENT_WINDOW, PMS_START_SUB
							    .EXTRN  PMS_END_SUB, NEXT_HEADER, MARK_DIRTY, GET_MAP_POINTER
							    .EXTRN  MAKE_POINTER, ALLOC_BLOCKS, EXTEND_HEADER, RETURN_BLOCKS
							    .EXTRN  CHECKSUM, TURN_WINDOW, INIT_FCB2, WRITE_HEADER
							    .EXTRN  READ_HEADER, BUG$_EXHFUL, SYS$CMKRNL

							    .PSECT  $CODE$,NOWRT,2

					 0FFC 00000 	    .ENTRY  EXTEND, Save R2,R3,R4,R5,R6,R7,R8,R9,R10,R11	      ; 0442
		         5E 	       0C  C2 00002 	    SUBL2   #12, SP						      ;
				       08  DD 00005 	    PUSHL   #8							      ; 0540
		  0000G  CF	       01  FB 00007 	    CALLS   #1, PMS_START_SUB					      ;
		         52 	  04   AC  D0 0000C 	    MOVL    USER_FIB, FIB					      ; 0546
		         05 	  16   A2  E8 00010 	    BLBS    22(FIB), 1$						      ; 0547
	   05 	    16   A2	       02  E0 00014 	    BBS     #2, 22(FIB), 2$					      ;
				  18   A2  D5 00019 1$:     TSTL    24(FIB)						      ; 0548

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:14:25	DBB3:[F11B.SRC]EXTEND.B32;10					Page 2-6
;
				       03  18 0001C 	    BGEQ    3$							      ;
				     008C  31 0001E 2$:     BRW     11$							      ;
	   18 	    16   A2	       03  E1 00021 3$:     BBC     #3, 22(FIB), 5$					      ; 0552
		         50 	0000G  CF  D0 00026 	    MOVL    CURRENT_VCB, R0					      ; 0553
		         50 	  3E   A0  3C 0002B 	    MOVZWL  62(R0), R0						      ;
		    18   A2	       50  D1 0002F 	    CMPL    R0, 24(FIB)						      ;
				       04  1E 00033 	    BGEQU   4$							      ;
		         50 	  18   A2  D0 00035 	    MOVL    24(FIB), R0						      ;
		         6E 	       50  D0 00039 4$:     MOVL    R0, BLOCKS_NEEDED					      ; 0551
				       04  11 0003C 	    BRB     6$							      ;
		         6E 	  18   A2  D0 0003E 5$:     MOVL    24(FIB), BLOCKS_NEEDED				      ;
		         53 	  08   AC  D0 00042 6$:     MOVL    FILEHEADER, HEADER					      ; 0557
		         5A 	0000G  CF  D0 00046 	    MOVL    PRIMARY_FCB, FCB					      ; 0558
		         54 	       01  D0 0004B 	    MOVL    #1, EXTEND_VBN					      ; 0559
	   08 	    34   A3	       05  E1 0004E 	    BBC     #5, 52(HEADER), 7$					      ; 0564
		         04 	  16   A2  E8 00053 	    BLBS    22(FIB), 7$						      ; 0566
		    16   A2	       02  88 00057 	    BISB2   #2, 22(FIB)						      ;
		         50 	  01   A3  9A 0005B 7$:     MOVZBL  1(HEADER), R0					      ; 0575
		         58 	     6340  3E 0005F 	    MOVAW   (HEADER)[R0], MAP_POINTER				      ;
		         50 	  3A   A3  9A 00063 	    MOVZBL  58(HEADER), R0					      ; 0576
		         5B 	     6840  3E 00067 	    MOVAW   (MAP_POINTER)[R0], MAP_END				      ;
		         59 	       58  D0 0006B 	    MOVL    MAP_POINTER, BUILD_POINTER				      ; 0577
				       50  D5 0006E 	    TSTL    R0							      ; 0579
				       05  13 00070 	    BEQL    8$							      ;
	   36 	    16   A2	       02  E0 00072 	    BBS     #2, 22(FIB), 11$					      ;
		         5B 	       58  D1 00077 8$:     CMPL    MAP_POINTER, MAP_END				      ; 0582
				       0B  1E 0007A 	    BGEQU   9$							      ;
		         59 	       58  D0 0007C 	    MOVL    MAP_POINTER, BUILD_POINTER				      ; 0584
				     0000G 30 0007F 	    BSBW    GET_MAP_POINTER					      ; 0585
		         54 	       56  C0 00082 	    ADDL2   OLD_COUNT, EXTEND_VBN				      ; 0586
				       F0  11 00085 	    BRB     8$							      ; 0582
				0408   8F  BB 00087 9$:     PUSHR   #^M<R3,R10>						      ; 0589
		  0000G  CF	       02  FB 0008B 	    CALLS   #2, NEXT_HEADER					      ;
		         55 	       50  D0 00090 	    MOVL    R0, NEW_HEADER					      ;
				       0D  13 00093 	    BEQL    10$							      ; 0590
		         53 	       55  D0 00095 	    MOVL    NEW_HEADER, HEADER					      ; 0591
				       5A  D5 00098 	    TSTL    FCB							      ; 0592
				       BF  13 0009A 	    BEQL    7$							      ;
		         5A 	  0C   AA  D0 0009C 	    MOVL    12(FCB), FCB					      ;
				       B9  11 000A0 	    BRB     7$							      ; 0573
				  1C   A2  D5 000A2 10$:    TSTL    28(FIB)						      ; 0598
				       09  13 000A5 	    BEQL    12$							      ;
		         54 	  1C   A2  D1 000A7 	    CMPL    28(FIB), EXTEND_VBN					      ;
				       03  13 000AB 	    BEQL    12$							      ;
				       14  BF 000AD 11$:    CHMU    #20							      ; 0599
					   04 000AF 	    RET     							      ;
				       53  DD 000B0 12$:    PUSHL   HEADER						      ; 0601
		  0000G  CF	       01  FB 000B2 	    CALLS   #1, MARK_DIRTY					      ;
		  0000G  CF 00040002   8F  C8 000B7 	    BISL2   #262146, CLEANUP_FLAGS				      ; 0602
				       55  D4 000C0 	    CLRL    CBT_COUNT						      ; 0605
				  18   A2  D4 000C2 	    CLRL    24(FIB)						      ; 0606
		    1C   A2	       54  D0 000C5 	    MOVL    EXTEND_VBN, 28(FIB)					      ; 0607
		         58 	       59  D0 000C9 	    MOVL    BUILD_POINTER, MAP_POINTER				      ; 0608
				       6E  D5 000CC 13$:    TSTL    BLOCKS_NEEDED					      ; 0617
				       03  12 000CE 	    BNEQ    14$							      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:14:25	DBB3:[F11B.SRC]EXTEND.B32;10					Page 2-7
;
				     0114  31 000D0 	    BRW     25$							      ;
				  08   AE  9F 000D3 14$:    PUSHAB  ALLOC_COUNT						      ; 0620
				  08   AE  9F 000D6 	    PUSHAB  LBN							      ;
				  08   AE  DD 000D9 	    PUSHL   BLOCKS_NEEDED					      ;
				       52  DD 000DC 	    PUSHL   FIB							      ;
		  0000G  CF	       04  FB 000DE 	    CALLS   #4, ALLOC_BLOCKS					      ;
		         5B 	  08   AE  D0 000E3 	    MOVL    ALLOC_COUNT, COUNT					      ; 0621
		    18   A2	       5B  C0 000E7 	    ADDL2   COUNT, 24(FIB)					      ; 0622
		         50 	       6E  D0 000EB 	    MOVL    BLOCKS_NEEDED, R0					      ; 0623
		         5B 	       50  D1 000EE 	    CMPL    R0, COUNT						      ;
				       03  1B 000F1 	    BLEQU   15$							      ;
		         50 	       5B  D0 000F3 	    MOVL    COUNT, R0						      ;
		         6E 	       50  C2 000F6 15$:    SUBL2   R0, BLOCKS_NEEDED					      ;
				  3A   A3  95 000F9 	    TSTB    58(HEADER)						      ; 0629
				       2A  13 000FC 	    BEQL    17$							      ;
		         59 	       58  D0 000FE 	    MOVL    MAP_POINTER, BUILD_POINTER				      ; 0632
				     0000G 30 00101 	    BSBW    GET_MAP_POINTER					      ; 0633
	   50 	         57 	       56  C1 00104 	    ADDL3   OLD_COUNT, OLD_LBN, R0				      ; 0634
		    04   AE	       50  D1 00108 	    CMPL    R0, LBN						      ;
				       17  12 0010C 	    BNEQ    16$							      ;
	   50 	         59 	       58  C3 0010E 	    SUBL3   MAP_POINTER, BUILD_POINTER, R0			      ; 0638
		         50 	       02  C6 00112 	    DIVL2   #2, R0						      ;
		    3A   A3	       50  80 00115 	    ADDB2   R0, 58(HEADER)					      ;
		         58 	       59  D0 00119 	    MOVL    BUILD_POINTER, MAP_POINTER				      ; 0639
		         5B 	       56  C0 0011C 	    ADDL2   OLD_COUNT, COUNT					      ; 0640
		    04   AE	       57  D0 0011F 	    MOVL    OLD_LBN, LBN					      ; 0641
				       03  11 00123 	    BRB     17$							      ; 0634
		         59 	       58  D0 00125 16$:    MOVL    MAP_POINTER, BUILD_POINTER				      ; 0644
				       53  DD 00128 17$:    PUSHL   HEADER						      ; 0656
		         54 	  08   AE  D0 0012A 	    MOVL    LBN, R4						      ;
				       54  DD 0012E 	    PUSHL   R4							      ;
				       5B  DD 00130 	    PUSHL   COUNT						      ;
		  0000G  CF	       03  FB 00132 	    CALLS   #3, MAKE_POINTER					      ;
		         03 	       50  E9 00137 	    BLBC    R0, 18$						      ;
				     0094  31 0013A 	    BRW     23$							      ;
	   53 	    17   A2	       01  E1 0013D 18$:    BBC     #1, 23(FIB), 21$					      ; 0659
				       53  DD 00142 	    PUSHL   HEADER						      ; 0662
				       54  DD 00144 	    PUSHL   R4							      ;
		         7E 	4000   8F  3C 00146 	    MOVZWL  #16384, -(SP)					      ;
		  0000G  CF	       03  FB 0014B 	    CALLS   #3, MAKE_POINTER					      ;
		         0F 	       50  E9 00150 	    BLBC    R0, 19$						      ;
		         5B 	C000   CB  9E 00153 	    MOVAB   -16384(R11), COUNT					      ; 0665
		    04   AE 00004000   8F  C0 00158 	    ADDL2   #16384, LBN						      ; 0666
				       1E  11 00160 	    BRB     20$							      ; 0662
				       53  DD 00162 19$:    PUSHL   HEADER						      ; 0668
				       54  DD 00164 	    PUSHL   R4							      ;
		         7E 	0100   8F  3C 00166 	    MOVZWL  #256, -(SP)						      ;
		  0000G  CF	       03  FB 0016B 	    CALLS   #3, MAKE_POINTER					      ;
		         0D 	       50  E9 00170 	    BLBC    R0, 20$						      ;
		         5B 	FF00   CB  9E 00173 	    MOVAB   -256(R11), COUNT					      ; 0671
		    04   AE 00000100   8F  C0 00178 	    ADDL2   #256, LBN						      ; 0672
				       5B  DD 00180 20$:    PUSHL   COUNT						      ; 0674
				  08   AE  DD 00182 	    PUSHL   LBN							      ;
		  0000G  CF	       02  FB 00185 	    CALLS   #2, RETURN_BLOCKS					      ;
		    18   A2	       5B  C2 0018A 	    SUBL2   COUNT, 24(FIB)					      ; 0675

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:14:25	DBB3:[F11B.SRC]EXTEND.B32;10					Page 2-8
;
				       57  12 0018E 	    BNEQ    25$							      ; 0676
				08C8   8F  BF 00190 	    CHMU    #2248						      ; 0677
					   04 00194 	    RET     							      ;
		  0000G  CF	       54  D0 00195 21$:    MOVL    R4, UNREC_LBN					      ; 0682
		  0000G  CF	       5B  D0 0019A 	    MOVL    COUNT, UNREC_COUNT					      ; 0683
				0408   8F  BB 0019F 	    PUSHR   #^M<R3,R10>						      ; 0684
		  0000G  CF	       02  FB 001A3 	    CALLS   #2, EXTEND_HEADER					      ;
		         53 	       50  D0 001A8 	    MOVL    R0, HEADER						      ;
				       5A  D5 001AB 	    TSTL    FCB							      ; 0685
				       04  13 001AD 	    BEQL    22$							      ;
		         5A 	  0C   AA  D0 001AF 	    MOVL    12(FCB), FCB					      ;
		         50 	  01   A3  9A 001B3 22$:    MOVZBL  1(HEADER), R0					      ; 0686
		         58 	     6340  3E 001B7 	    MOVAW   (HEADER)[R0], MAP_POINTER				      ;
		         59 	       58  D0 001BB 	    MOVL    MAP_POINTER, BUILD_POINTER				      ; 0687
				       53  DD 001BE 	    PUSHL   HEADER						      ; 0688
				       54  DD 001C0 	    PUSHL   R4							      ;
				       5B  DD 001C2 	    PUSHL   COUNT						      ;
		  0000G  CF	       03  FB 001C4 	    CALLS   #3, MAKE_POINTER					      ;
		         05 	       50  E8 001C9 	    BLBS    R0, 23$						      ;
		  0000'  CF	       00  FB 001CC 	    CALLS   #0, P.AAA						      ; 0689
				0000G  CF  D4 001D1 23$:    CLRL    UNREC_COUNT						      ; 0693
		         0E 	  16   A2  E8 001D5 	    BLBS    22(FIB), 25$					      ; 0700
				       55  D6 001D9 	    INCL    CBT_COUNT						      ; 0701
		         03 	       55  D1 001DB 	    CMPL    CBT_COUNT, #3					      ; 0702
				       04  1F 001DE 	    BLSSU   24$							      ;
		    16   A2	       02  8A 001E0 	    BICB2   #2, 22(FIB)						      ; 0703
				     FEE5  31 001E4 24$:    BRW     13$							      ; 0617
		         50 	0000G  CF  D0 001E7 25$:    MOVL    CURRENT_WINDOW, R0					      ; 0714
				       19  13 001EC 	    BEQL    26$							      ;
				  28   AA  DD 001EE 	    PUSHL   40(FCB)						      ; 0715
	   7E 	    1C   A2	       01  C3 001F1 	    SUBL3   #1, 28(FIB), -(SP)					      ;
				       09  BB 001F6 	    PUSHR   #^M<R0,R3>						      ;
				       04  DD 001F8 	    PUSHL   #4							      ;
				       5E  DD 001FA 	    PUSHL   SP							      ;
				0000G  CF  9F 001FC 	    PUSHAB  TURN_WINDOW						      ;
	      00000000G  9F	       07  FB 00200 	    CALLS   #7, @#SYS$CMKRNL					      ;
		    04   A2	  08   A3  B1 00207 26$:    CMPW    8(HEADER), 4(FIB)					      ; 0717
				       11  12 0020C 	    BNEQ    27$							      ;
		         50 	0000G  CF  D0 0020E 	    MOVL    CURRENT_VCB, R0					      ; 0718
	   39 	    0B   A0	       05  E1 00213 	    BBC     #5, 11(R0), 29$					      ;
		    09   A2	  0D   A3  91 00218 	    CMPB    13(HEADER), 9(FIB)					      ;
				       32  13 0021D 	    BEQL    29$							      ;
				       53  DD 0021F 27$:    PUSHL   HEADER						      ; 0721
		  0000G  CF	       01  FB 00221 	    CALLS   #1, CHECKSUM					      ;
		  0000G  CF	       00  FB 00226 	    CALLS   #0, WRITE_HEADER					      ; 0722
				       5A  D5 0022B 	    TSTL    FCB							      ; 0723
				       13  13 0022D 	    BEQL    28$							      ;
				       53  DD 0022F 	    PUSHL   HEADER						      ;
				       5A  DD 00231 	    PUSHL   FCB							      ;
				       02  DD 00233 	    PUSHL   #2							      ;
				       5E  DD 00235 	    PUSHL   SP							      ;
				0000G  CF  9F 00237 	    PUSHAB  INIT_FCB2						      ;
	      00000000G  9F	       05  FB 0023B 	    CALLS   #5, @#SYS$CMKRNL					      ;
				0000G  CF  DD 00242 28$:    PUSHL   PRIMARY_FCB						      ; 0724
				  04   A2  9F 00246 	    PUSHAB  4(FIB)						      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:14:25	DBB3:[F11B.SRC]EXTEND.B32;10					Page 2-9
;
		  0000G  CF	       02  FB 00249 	    CALLS   #2, READ_HEADER					      ;
		         53 	       50  D0 0024E 	    MOVL    R0, HEADER						      ;
				       53  DD 00251 29$:    PUSHL   HEADER						      ; 0731
		  0000G  CF	       01  FB 00253 	    CALLS   #1, MARK_DIRTY					      ;
	   50 	    1C   A2	  18   A2  C1 00258 	    ADDL3   24(FIB), 28(FIB), R0				      ; 0732
				       50  D7 0025E 	    DECL    R0							      ;
      18   A3	         50 	       10  9C 00260 	    ROTL    #16, R0, 24(HEADER)					      ;
      16   A2	         01 	       02  EF 00265 	    EXTZV   #2, #1, 22(FIB), R1					      ; 0733
				       51     0026A									      ;
	   01 	         07 	       51  F0 0026B 	    INSV    R1, #7, #1, 52(HEADER)				      ;
				  34   A3     0026F									      ;
      16   A2	         01 	       01  EF 00271 	    EXTZV   #1, #1, 22(FIB), R1					      ; 0734
				       51     00276									      ;
	   01 	         05 	       51  F0 00277 	    INSV    R1, #5, #1, 52(HEADER)				      ;
				  34   A3     0027B									      ;
		  0000G  CF	  18   A2  D0 0027D 	    MOVL    24(FIB), USER_STATUS+4				      ; 0735
				       50  DD 00283 	    PUSHL   R0							      ; 0736
				       01  DD 00285 	    PUSHL   #1							      ;
				       5E  DD 00287 	    PUSHL   SP							      ;
				0000V  CF  9F 00289 	    PUSHAB  UPDATE_FILESIZE					      ;
	      00000000G  9F	       04  FB 0028D 	    CALLS   #4, @#SYS$CMKRNL					      ;
		  0000G  CF	       00  FB 00294 	    CALLS   #0, PMS_END_SUB					      ; 0741
					   04 00299 	    RET     							      ; 0442

; Routine Size:  666 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 23:14:25	DBB3:[F11B.SRC]EXTEND.B32;10					Page 3
;
;	0744	GLOBAL ROUTINE UPDATE_FILESIZE (SIZE) : NOVALUE =
;	0745	
;	0746	!++
;	0747	!
;	0748	! FUNCTIONAL DESCRIPTION:
;	0749	!
;	0750	!	This routine updates the file size recorded in the primary FCB of
;	0751	!	the file extended.
;	0752	!
;	0753	! CALLING SEQUENCE:
;	0754	!	UPDATE_FILESIZE (ARG1)
;	0755	!
;	0756	! INPUT PARAMETERS:
;	0757	!	ARG1: amount to increase size to
;	0758	!
;	0759	! IMPLICIT INPUTS:
;	0760	!	PRIMARY_FCB: address of file FCB or zero
;	0761	!
;	0762	! OUTPUT PARAMETERS:
;	0763	!	NONE
;	0764	!
;	0765	! IMPLICIT OUTPUTS:
;	0766	!	NONE
;	0767	!
;	0768	! ROUTINE VALUE:
;	0769	!	NONE
;	0770	!
;	0771	! SIDE EFFECTS:
;	0772	!	FCB updated
;	0773	!
;	0774	!--
;	0775	
;	0776	BEGIN
;	0777	
;	0778	EXTERNAL
;	0779		PRIMARY_FCB	: REF BBLOCK;	! FCB of file
;	0780	
;	0781	IF .PRIMARY_FCB NEQ 0
;	0782	THEN PRIMARY_FCB[FCB$L_FILESIZE] = .SIZE;
;	0783	
;	0784	END;					! end of routine UPDATE_FILESIZE





					 0000 0029A 	    .ENTRY  UPDATE_FILESIZE, Save nothing			      ; 0744
		         50 	0000G  CF  D0 0029C 	    MOVL    PRIMARY_FCB, R0					      ; 0781
				       05  13 002A1 	    BEQL    1$							      ;
		    34   A0	  04   AC  D0 002A3 	    MOVL    SIZE, 52(R0)					      ; 0782
					   04 002A8 1$:     RET     							      ; 0744

; Routine Size:  15 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 23:14:25	DBB3:[F11B.SRC]EXTEND.B32;10					Page 3-1
;
;	0785	
;	0786	END
;	0787	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $LOCKEDC2$     	     8  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $CODE$         	   681  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        32         0       248





; Size:		681 code + 8 data bytes
; Run Time:	00:15.6
; Elapsed Time:	00:36.1
; Memory Used:	413 pages
; Compilation Complete
