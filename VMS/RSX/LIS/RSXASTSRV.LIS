RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (2)      42  VAX/VMS RSX11M/AME UTILITY AST SERVICE ROUITNES
   (6)     154  POST AST TO IMAGE
   (7)     272  RSX$RETURNAST - RETURN NEXT AST CONTEXT
   (8)     338  GETNEXTAST - GET THE NEXT AST CONTROL BLOCK
   (9)     367  RSX-11M ASTX$ DIRECTIVE
   (10)    477  RSX$SETUPAST - ALLOCATE AN AST CONTROL BLOCK
   (11)    506  I/O DONE AST SERVICE
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page   1
V06.0                                                                                                                            (1)

                                     0000     1 	.TITLE RSXASTSRV - AST SERVICE ROUTINES FOR THE RSX11M/AME
                                     0000     2 	.IDENT	/V06.0/		
                                     0000     3 ;
                                     0000     4 ; COPYRIGHT (C) 1978
                                     0000     5 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS 01754
                                     0000     6 ;
                                     0000     7 ; THIS SOFTWARE IS FURNISHED  UNDER A LICENSE FOR USE ONLY ON A SINGLE
                                     0000     8 ; COMPUTER  SYSTEM AND  MAY BE  COPIED ONLY WITH  THE INCLUSION OF THE
                                     0000     9 ; ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,
                                     0000    10 ; MAY NOT BE PROVIDED OR  OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
                                     0000    11 ; EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE
                                     0000    12 ; TERMS.  TITLE TO AND  OWNERSHIP OF THE  SOFTWARE  SHALL AT ALL TIMES
                                     0000    13 ; REMAIN IN DEC.
                                     0000    14 ;
                                     0000    15 ; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE
                                     0000    16 ; AND SHOULD  NOT BE CONSTRUED  AS A COMMITMENT  BY DIGITAL  EQUIPMENT
                                     0000    17 ; CORPORATION.
                                     0000    18 ;
                                     0000    19 ; DEC ASSUMES  NO  RESPONSIBILITY  FOR  THE USE OR  RELIABILITY OF ITS
                                     0000    20 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
                                     0000    21 ;++
                                     0000    22 ; FACILITY:
                                     0000    23 ;
                                     0000    24 ;	VAX/VMS RSX11M/AME.
                                     0000    25 ;
                                     0000    26 ; ABSTRACT:
                                     0000    27 ;
                                     0000    28 ;	VAX/VMS RSX11M/AME AST SERVICE ROUTINES AND AST SUPPORT.
                                     0000    29 ;
                                     0000    30 ; AUTHOR:
                                     0000    31 ;
                                     0000    32 ;	R.HEINEN 5-NOV-76
                                     0000    33 ;--
                                     0000    34 ;
                                     0000    35 ; EXTERNAL SYMBOLS
                                     0000    36 ;
                                     0000    37 	$RSXDEF			; DEFINE RSX SYMBOLS
                                     0000    38 	$DEVDEF			; DEFINE DEVICE CHARACTERISTICS
                                     0000    39  
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page   2
V06.0                                                                                                                            (2)

                                 00000000    41 	.PSECT	RSXCODE,NOWRT,SHR,PIC
                                     0000    42 	.SBTTL VAX/VMS RSX11M/AME UTILITY AST SERVICE ROUITNES
                                     0000    43 ;++
                                     0000    44 ; RSX$POWERAST - POWERFAIL AST SERVICE
                                     0000    45 ;
                                     0000    46 ; FUNCTIONAL DESCRIPTION:
                                     0000    47 ;
                                     0000    48 ; THIS ROUTINE IS THE AST SERVICE FOR POWERFAIL AST'S.
                                     0000    49 ; IT IS ENTERED AS A RESULT OF THE IMAGE DOING A SPRA$ DIRECTIVE AND THE
                                     0000    50 ; POWER RECOVERY OCCURING.
                                     0000    51 ; THE AST IS DELIVERED TO THE IMAGE IF THE IMAGE IS STILL ENABLED TO HEAR IT.
                                     0000    52 ; THE IMAGE IS ENABLED IF SV_PWRAST IS SET IN THE CURRENT IMAGE STATUS VECTOR.
                                     0000    53 ;
                                     0000    54 ; INPUTS:
                                     0000    55 ;
                                     0000    56 ;	AP = ADDRESS OF THE AST ARGUMENT LIST ( IGNORED )
                                     0000    57 ;
                                     0000    58 ; OUTPUTS:
                                     0000    59 ;
                                     0000    60 ;	R10 = ADDRESS OF THE IMAGE IMPURE DATA BASE
                                     0000    61 ;
                                     0000    62 ;	THE ADDRESS OF THE POWER FAIL AST CONTEXT BLOCK IS PLACED
                                     0000    63 ;	ON TOP OF THE AP AST ARGUMNET LIST PARAMETER POINTER.
                                     0000    64 ;--
                                     0000    65 RSX$POWERAST::				; POWERFAIL AST SERIVCE
                               0FFC  0000    66 	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
            5A   00000000'GF     9E  0002    67 	MOVAB	G^CTL$AL_CMCNTX,R10	; ADDRESS IMPURE DATA AREA
       0170 CA            08     E1  0009    68 	BBC	#SV_PWRAST,I_STATE(R10),ASTEXIT; BR IF POWER AST NOT ENABLED
                          2F         000E       
         04 AC       01A0 CA     D0  000F    69 	MOVL	I_PWRAST(R10),AST_PARAM(AP); ADDRESS CONTEXT BLOCK
                          31     11  0015    70 	BRB	POSTAST			; POST THE AST
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page   3
V06.0           VAX/VMS RSX11M/AME UTILITY AST SERVICE ROUITNES                                                                  (3)

                                     0017    72 ;++
                                     0017    73 ; RSX$RCVAST - DATA IN RCVD$ MAILBOX AST SERVICE
                                     0017    74 ;
                                     0017    75 ; FUNCTIONAL DESCRIPTION:
                                     0017    76 ;
                                     0017    77 ; THIS ROUTINE IS THE AST SERVICE FOR THE RCVA$ DIRECTIVE.
                                     0017    78 ; IT IS ENTERED WHEN AN AST OCCURS BECAUSE A MESSAGE HAS BEEN PLACED IN
                                     0017    79 ; THE IMAGE'S RCVD$ MAILBOX.
                                     0017    80 ; THE AST IS DELIVERED TO THE IMAGE IF IT IS STILL ENABLED TO HEAR IT.
                                     0017    81 ; THE IMAGE IS ENABLED IF SV_RCVAST IS SET IN THE CURRENT IMAGE STATE VECTOR.
                                     0017    82 ;
                                     0017    83 ; INPUTS:
                                     0017    84 ;
                                     0017    85 ;	AP = ADDRESS OF THE AST ARGUMENT LIST 
                                     0017    86 ;
                                     0017    87 ; OUTPUTS:
                                     0017    88 ;
                                     0017    89 ;	R10 = ADDRESS OF THE IMAGE IMPURE DATA BASE
                                     0017    90 ;--
                                     0017    91 RSX$RCVAST::				;
                               0FFC  0017    92 	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
            5A   00000000'GF     9E  0019    93 	MOVAB	G^CTL$AL_CMCNTX,R10	; ADDRESS IMPURE DATA AREA
       0170 CA            07     E1  0020    94 	BBC	#SV_RCVAST,I_STATE(R10),ASTEXIT; BR IF NOT ENABLED
                          18         0025       
                          20     11  0026    95 	BRB	POSTAST
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page   4
V06.0           VAX/VMS RSX11M/AME UTILITY AST SERVICE ROUITNES                                                                  (4)

                                     0028    97 ;++
                                     0028    98 ; RSX$CTRLCAST - TERMINAL UNSOLICITED DATA AST
                                     0028    99 ;
                                     0028   100 ; FUNCTIONAL DESCRIPTION:
                                     0028   101 ;
                                     0028   102 ; THIS ROUTINE SUPPORTS THE IO.ATA FUNCTION ON TERMINALS.
                                     0028   103 ; IN RSX-11M THIS FUNCTION SIGNALS UNSOLICTED DATA FROM THE TERMINAL.
                                     0028   104 ; SINCE TERMINAL DATA IS BUFFERED AHEAD ON VAX/VMS, A COMPLETE EMULATION
                                     0028   105 ; OF THIS FUNCTION CANNOT BE DONE. THE FUNCTION IN VAX/VMS IS TO
                                     0028   106 ; SET UP AN ENABLE FOR CONTROL C AST ON THE TERMINAL AND THEN DELIVER
                                     0028   107 ; THE AST SIGNALLING A CONTROL C AS THE DATA CHARACTER.
                                     0028   108 ; THE AST IS DELIVERED TO THE IMAGE IF IT IS STILL ENABLED TO HEAR IT.
                                     0028   109 ; THE IMAGE IS ENABLED IF LUTV_CTRLC IS SET IN THE LUT ASSOCIATED WITH
                                     0028   110 ; THE TERMINAL.
                                     0028   111 ;
                                     0028   112 ; INPUTS:
                                     0028   113 ;
                                     0028   114 ;	AST_PARAM(AP) = ADDRESS OF THE AST CONTEXT BLOCK
                                     0028   115 ;
                                     0028   116 ; OUTPUTS:
                                     0028   117 ;
                                     0028   118 ;	R10 = ADDRESS OF THE IMAGE IMPURE DATA BASE
                                     0028   119 ;
                                     0028   120 ;--
                                     0028   121 RSX$CTRLCAST::				; CONTROL C AST
                               0FFC  0028   122 	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
            5A   00000000'GF     9E  002A   123 	MOVAB	G^CTL$AL_CMCNTX,R10	; ADDRESS IMPURE DATA BASE
            52         04 AC     D0  0031   124 	MOVL	AST_PARAM(AP),R2	; ADDRESS BLOCK FOR AST
            53         0E A2     D0  0035   125 	MOVL	ACB_FLAGS+2(R2),R3	; ADDRESS LUT OF CHANNEL
         0A A3            02     E0  0039   126 	BBS	#LUTV_CTRLC,LUT_FLAGS(R3),POSTAST; POST IF STILL ENABLED
                          0A         003D       
                                     003E   127 ;
                                     003E   128 ; COMMON AST EXIT
                                     003E   129 ;
                                     003E   130 ASTEXIT:
                                 04  003E   131 	RET				;
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page   5
V06.0           VAX/VMS RSX11M/AME UTILITY AST SERVICE ROUITNES                                                                  (5)

                                     003F   133 ;++
                                     003F   134 ; RSX$MARKAST - AST SERVICE ROUTINE FOR MARK TIME DIRECTIVE
                                     003F   135 ;
                                     003F   136 ; FUNCTIONAL DESCRIPTION:
                                     003F   137 ;
                                     003F   138 ; THIS ROUTINE IS THE AST SERVICE FOR MARK TIME DIRECTIVES THAT
                                     003F   139 ; REQUESTED AN AST WHEN THE TIMER EXPIRED.
                                     003F   140 ; AN AST IS DELIVERED TO THE IMAGE.
                                     003F   141 ;
                                     003F   142 ; INPUTS:
                                     003F   143 ;
                                     003F   144 ;	AST STACK WITH AST_PARAM = THE AST CONTEXT BLOCK
                                     003F   145 ;
                                     003F   146 ; OUTPUTS:
                                     003F   147 ;
                                     003F   148 ;	SEE BELOW.
                                     003F   149 ;--
                                     003F   150 RSX$MARKAST::				; MARK TIME AST SERVICE
                               0FFC  003F   151 	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
            5A   00000000'GF     9E  0041   152 	MOVAB	G^CTL$AL_CMCNTX,R10	; SET UP ADDRESS OF THE IMPURE AREA
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page   6
V06.0           POST AST TO IMAGE                                                                                                (6)

                                     0048   154 	.SBTTL POST AST TO IMAGE
                                     0048   155 ;++
                                     0048   156 ; POSTAST - POST AN AST TO THE CURRENT IMAGE
                                     0048   157 ;
                                     0048   158 ; FUNCTIONAL DESCRIPTION:
                                     0048   159 ;
                                     0048   160 ; THIS ROUTINE IS USED TO POST AN AST TO THE CURRENT IMAGE.
                                     0048   161 ;
                                     0048   162 ; THIS ROUTINE PUTS THE AST CONTEXT BLOCK ON AN AST QUEUE (I_ASTQUEUE)
                                     0048   163 ; AND THEN CHECKS THE STATE OF THE IMAGE WHEN THE AST OCCURED.
                                     0048   164 ;
                                     0048   165 ; IF THE AST OCCURED IN CM ---
                                     0048   166 ;
                                     0048   167 ;	IF THE IMAGE IS NOT AT AST LEVEL AND AST'S ARE ENABLED,
                                     0048   168 ;	THE AST SHOULD BE DELIVERED HERE AND NOW.
                                     0048   169 ;	THIS IS DONE BY OVERWRITING THE AST PC/PSL AND R6
                                     0048   170 ;	AND DOING A RETURN. THE AST IS THUS DELIVERED.
                                     0048   171 ;
                                     0048   172 ; IF THE AST OCCURED IN NATIVE MODE ---
                                     0048   173 ;
                                     0048   174 ;	THE AST SHOULD BE QUEUED UNTIL THE NEXT IMAGE RESTORE IS
                                     0048   175 ;	DONE BY RSX$RESTORE.
                                     0048   176 ;	SPECIAL ATTENTION IS GIVEN TO 2 POSIBLE RSX STATES.
                                     0048   177 ;
                                     0048   178 ;	A. THE RSX IS IN RSX$RESTORE.
                                     0048   179 ;		THE PC IS RESET TO CAUSE THE RESTORE TO BE DONE AGAIN.
                                     0048   180 ;		THIS TEST IS BY INTERLOCK BIT AND PC VALUE.
                                     0048   181 ;
                                     0048   182 ;	B. THE RSX IS IN A WAIT STATE BECAUSE OF A WTSE$ OR WTLO$ DIRECTIVE.
                                     0048   183 ;		THE WAIT CONTEXT IS SAVED AND THE WAIT IS FLUSHED BY CLEARING
                                     0048   184 ;		THE WAIT FOR CONTEXT IN THE IMPURE DATA BASE. THIS OPERATION
                                     0048   185 ;		NEEDS TO BE INTERLOCKED AND A BIT IS USED TO SIGNAL RSX$WAIT
                                     0048   186 ;		TO AVOID THE WAIT IF THIS OCCURS JUST BEFORE THE SETTING
                                     0048   187 ;		OF THE INTERLOCK BIT SV_WAIT.
                                     0048   188 ;
                                     0048   189 ; INPUTS:
                                     0048   190 ;
                                     0048   191 ;	R10 = ADDRESS OF THE IMAGE IMPURE AREA
                                     0048   192 ;	AST_PARAM(AP) = ADDRESS OF THE AST CONTEXT BLOCK AS FOLLOWS:
                                     0048   193 ;
                                     0048   194 ;		2 LONG WORDS OF SPACE FOR AST QUEUE
                                     0048   195 ;		1 WORD OF OPTIONAL AST DATA TO BE PLACED ON THE
                                     0048   196 ;			IMAGE STACK AT ACTUAL DELIVERY
                                     0048   197 ;			-1 SIGNALS NO DATA
                                     0048   198 ;		1 WORD OF IMAGE AST PC
                                     0048   199 ;		1 WORD OF TYPE CODE FOR AST POST PROCESSING
                                     0048   200 ;
                                     0048   201 ; IMPLICIT INPUTS:
                                     0048   202 ;
                                     0048   203 ; IT IS ASSUMED THAT THE CURRENT STACK FRAME IS THAT OF AN AST.
                                     0048   204 ;
                                     0048   205 ; OUTPUTS:
                                     0048   206 ;
                                     0048   207 ; 	SEE CODE FOR TRANSFER TARGET.
                                     0048   208 ;
                                     0048   209 ;--
                                     0048   210 POSTAST:				; POST AST
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page   7
V06.0           POST AST TO IMAGE                                                                                                (6)

                                     0048   211 ;
                                     0048   212 ; QUEUE AST ON LIST
                                     0048   213 ;
            52         04 AC     D0  0048   214 	MOVL	AST_PARAM(AP),R2	; ADDRESS AST CONTEXT BLOCK
         0C A2            01     E2  004C   215 	BBSS	#ACBV_INPROG,ACB_FLAGS(R2),50$; SET AST IN PROGRESS
                          5E         0050       
       00CC DA            62     0E  0051   216 	INSQUE	(R2),@I_ASTQUEUE+4(R10)	; QUEUE AST AT TAIL
                                     0056   217 ;
                                     0056   218 ; IF THIS AST IS THE FIRST IN THE LIST THEN CHECK TO SEE IF IT CAN BE DELIVERED
                                     0056   219 ;
                          57     12  0056   220 	BNEQ	50$			; IF NEQ THEN NOT FIRST IN LIST
                                     0058   221 ;
                                     0058   222 ; TEST TO SEE IF AST POSSIBLE NOW
                                     0058   223 ;
       0170 CA            18     D3  0058   224 	BITL	#<1@SV_ASTLVL>!<1@SV_NOAST>,I_STATE(R10); AST LEVEL OR IN PROGRESS?
                          50     12  005D   225 	BNEQ	50$			; IF NEQ THEN YES - NO AST'S
                                     005F   226 ;
                                     005F   227 ; IF AST OCCURED IN NATIVE MODE THEN LEAVE THE AST FOR LATER.
                                     005F   228 ;
         14 AC            1F     E0  005F   229 	BBS	#PSL_CM,AST_PSL(AP),20$	; BR IF IN CM
                          34         0063       
                                     0064   230 ;
                                     0064   231 ; AST OCCURED IN NATIVE MODE - IN WAIT FOR?
                                     0064   232 ;
       0170 CA            05     E2  0064   233 	BBSS	#SV_PENDWAIT,I_STATE(R10),5$; SET TO SKIP WAIT
                          00         0069       
       0170 CA            06     E1  006A   234 5$:	BBC	#SV_WAIT,I_STATE(R10),10$; BR IF NOT IN WAIT STATE
                          0F         006F       
                                     0070   235 ;
                                     0070   236 ; WAIT FOR IN PROGRESS
                                     0070   237 ;
       0180 CA       0178 CA     7D  0070   238 	MOVQ	I_WAIT(R10),I_WAITSAVE(R10); SAVE CURRENT CONTEXT
                                     0077   239 ;
                                     0077   240 ; BY SETTING AN ILLEGAL EVENT FLAG NUMBER THE WAIT WILL BE FLUSHED WHEN
                                     0077   241 ; IT IS RESTARTED. THE I_WAIT AREA IS AN ARG LIST.
                                     0077   242 ;
       0178 CA         80 8F     9A  0077   243 	MOVZBL	#128,I_WAIT(R10)	; SET AN ILLEGAL EVENT FLAG NUMBER
                          30     11  007D   244 	BRB	50$			; EXIT AST
                                     007F   245 ;
                                     007F   246 ; AST OCCURED IN NATIVE MODE - BACK UP THE PC IF IN THE RESTORE ROUTINE
                                     007F   247 ;
       0170 CA            00     E0  007F   248 10$:	BBS	#SV_RESTORE,I_STATE(R10),15$; BR IF IN NORMAL RESTORE
                          0B         0084       
            51       0000'CF     9E  0085   249 	MOVAB	W^RSX$REI,R1		; AT THE NORMAL REI?
            51         10 AC     D1  008A   250 	CMPL	AST_PC(AP),R1		; 
                          1A     12  008E   251 	BNEQ	40$			; IF NEQ THEN NOT IN RANGE
         10 AC       0000'CF     9E  0090   252 15$:	MOVAB	W^RSX$RESTORE_CON,AST_PC(AP); RESET PC FOR RESTORE
                          12     11  0096   253 	BRB	40$			; EXIT THE AST
                                     0098   254 ;
                                     0098   255 ; AST OCCURED IN CM - LEAVE QUEUED IF AST LEVEL ALREADY OR IF AST'S DISABLED
                                     0098   256 ;
            57         10 AC     7D  0098   257 20$:	MOVQ	AST_PC(AP),R7		; GET PC AND PSL
            56         24 AD     D0  009C   258 	MOVL	FP_REGISTERS+16(FP),R6	; GET IMAGE STACK POINTER
                          0E     10  00A0   259 	BSBB	RSX$RETURNAST		; IF POSSIBLE, GET AST
         24 AD            56     D0  00A2   260 	MOVL	R6,FP_REGISTERS+16(FP)	; RESET R6 FOR RETURN
                                     00A6   261 ;
                                     00A6   262 ; R7,R8 HAVE BEEN UPDATED IF AN AST IS TO BE DONE. OTHERWISE THEY ARE
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page   8
V06.0           POST AST TO IMAGE                                                                                                (6)

                                     00A6   263 ; UNCHANGED.
                                     00A6   264 ;
         10 AC            57     7D  00A6   265 	MOVQ	R7,AST_PC(AP)		; SET POSSIBLE NEW PC/PSL
         14 AC            1B     E5  00AA   266 40$:	BBCC	#PSL_FPD,AST_PSL(AP),50$; CLEAR FIRST PART DONE
                          00         00AE       
                                     00AF   267 ;
                                     00AF   268 ; RETURN FROM AST
                                     00AF   269 ;
                                 04  00AF   270 50$:	RET				;
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page   9
V06.0           RSX$RETURNAST - RETURN NEXT AST CONTEXT                                                                          (7)

                                     00B0   272 	.SBTTL RSX$RETURNAST - RETURN NEXT AST CONTEXT
                                     00B0   273 ;++
                                     00B0   274 ; RSX$RETURNAST - RETURN NEXT AST CONTEXT
                                     00B0   275 ;
                                     00B0   276 ; FUNCTIONAL DESCRIPTION:
                                     00B0   277 ;
                                     00B0   278 ; THIS ROUTINE IS CALLED TO RETURN THE CONTEXT OF THE NEXT AST, IF ANY,
                                     00B0   279 ; TO BE GIVEN TO THE IMAGE. IT IS CALLED BY "POSTAST" ABOVE AND
                                     00B0   280 ; DURING THE DIRECTIVE PROCESSING RESTORE LOGIC.
                                     00B0   281 ; IF AN AST IS TO BE GIVEN, THE PROPER STATE IS SET UP.
                                     00B0   282 ; 
                                     00B0   283 ; INPUTS:
                                     00B0   284 ;
                                     00B0   285 ;	R6 = CURRENT IMAGE STACK POINTER
                                     00B0   286 ;	R7 = CURRENT IMAGE PC
                                     00B0   287 ;	R8 = CURRENT PSL
                                     00B0   288 ;	R10 = ADDRESS OF THE IMAGE IMPURE DATA BASE
                                     00B0   289 ;	R11 = ADDRESS OF THE IMAGE
                                     00B0   290 ;
                                     00B0   291 ; OUTPUTS:
                                     00B0   292 ;
                                     00B0   293 ;	R0 = STATUS OF OPERATION
                                     00B0   294 ;	R6 = NEW STACK POINTER
                                     00B0   295 ;	R7 = NEW PC
                                     00B0   296 ;	R8 = NEW PSL
                                     00B0   297 ;	R10,R11 ARE PRESERVED.
                                     00B0   298 ;--
                                     00B0   299 RSX$RETURNAST::				; GET NEXT AST CONTEXT
                                     00B0   300 ;
                                     00B0   301 ; DE-QUEUE THE NEXT AST
                                     00B0   302 ;
                          6C     10  00B0   303 5$:	BSBB	GETNEXTAST		; CALL SUBROUTINE TO FIND NEXT AST
            5E            50     E9  00B2   304 	BLBC	R0,30$			; IF LOW CLEAR AST'S NOT ALLOWED OR NONE FOUND
                                     00B5   305 ;
                                     00B5   306 ; SET UP FOR AST
                                     00B5   307 ;
       0170 CA            04     E2  00B5   308 	BBSS	#SV_ASTLVL,I_STATE(R10),15$; SET AST LEVEL
                          00         00BA       
                                     00BB   309 ;
                                     00BB   310 ; SET UP STACK FOR AST
                                     00BB   311 ;
                                     00BB   312 15$:	IFNOWRT	#14,-14(R6),60$		; BR IF STACK NOT WRITABLE
         0C A2            01     E5  00C2   313 	BBCC	#ACBV_INPROG,ACB_FLAGS(R2),20$; SET NO LONGER IN PROGRESS
                          00         00C6       
                          76     7C  00C7   314 20$:	CLRQ	-(R6)			; SET UP WAIT FOR FAKE WORDS
            76            58     B0  00C9   315 	MOVW	R8,-(R6)		; PUT AST PSL ON STACK
            76            57     B0  00CC   316 	MOVW	R7,-(R6)		; PUT AST PC ON STACK
            76         26 AB     B0  00CF   317 	MOVW	H.DSW(R11),-(R6)	; PUT AST DSW ON STACK
         0D A2            03     91  00D3   318 	CMPB	#ACBC_FLOATAST,ACB_FLAGS+1(R2); FLOATING AST?
                          13     12  00D7   319 	BNEQ	23$			; IF NEQ THEN NO
                                     00D9   320 	IFNOWRT	#4,-4(R6),60$		; BR IF BAD STACK
            76       01AC CA     B0  00E0   321 	MOVW	I_FLOATERR(R10),-(R6)	; SAVE ERROR SUMMRY
            76       01B0 CA     B0  00E5   322 	MOVW	I_FLOATADR(R10),-(R6)	; SAVE CURRENT PC AS ADDRESS
                          13     11  00EA   323 	BRB	25$			; CONTINUE
       FFFF 8F         08 A2     B1  00EC   324 23$:	CMPW	ACB_UPRM(R2),#-1	; AND AST DATA?
                          0B     13  00F2   325 	BEQL	25$			; IF EQL THEN NO
                                     00F4   326 	IFNOWRT	#2,-2(R6),60$		; WRITABLE STACK?
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page  10
V06.0           RSX$RETURNAST - RETURN NEXT AST CONTEXT                                                                          (7)

            76         08 A2     B0  00FB   327 	MOVW	ACB_UPRM(R2),-(R6)	; PUT IT ON THE STACK
            58   83C00000 8F     D0  00FF   328 25$:	MOVL	#C_CANONPS,R8		; SET UP NEW PSL
            57         0A A2     3C  0106   329 	MOVZWL	ACB_UPC(R2),R7		; SET UP NEW PC
            50         00'8F     9A  010A   330 	MOVZBL	#SS$_NORMAL,R0		; SET NORMAL STATUS
       0198 CA            52     D0  010E   331 	MOVL	R2,I_CURAST(R10)	; SAVE CURRENT AST CONTEXT
                                 05  0113   332 30$:	RSB				; RETURN
                                     0114   333 ;
                                     0114   334 ; STACK NOT WRITABLE
                                     0114   335 ;
                                     0114   336 60$:	$IMAGEABORT	#RSX$_BADSTACK
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page  11
V06.0           GETNEXTAST - GET THE NEXT AST CONTROL BLOCK                                                                      (8)

                                     011E   338 	.SBTTL GETNEXTAST - GET THE NEXT AST CONTROL BLOCK
                                     011E   339 ;++
                                     011E   340 ; GETNEXTAST - GET NEXT AVAILABLE AST CONTROL BLOCK
                                     011E   341 ;
                                     011E   342 ; FUNCTIONAL DESCRIPTION:
                                     011E   343 ;
                                     011E   344 ; THIS ROUTINE IS USED BY RSX$RETURNAST AND RSX$ASTX TO DEQUEUE THE
                                     011E   345 ; NEXT AST CONTROL BLOCK OR RETURN FAILURE. 
                                     011E   346 ;
                                     011E   347 ; INPUTS:
                                     011E   348 ;
                                     011E   349 ;	R10 = ADDRESS OF THE IMAGE IMPURE DATA BASE
                                     011E   350 ;	R11 = ADDRESS OF THE IMAGE
                                     011E   351 ;
                                     011E   352 ; OUTPUTS:
                                     011E   353 ;
                                     011E   354 ;	R0 = STATUS OF THE OPERATION
                                     011E   355 ;	R2 = THE ADDRESS OF THE AST CONTROL BLOCK IF ANY
                                     011E   356 ;	R10,R11 ARE PRESERVED.
                                     011E   357 ;--
                                     011E   358 GETNEXTAST:
                          50     D4  011E   359 	CLRL	R0			; SET NO AST FOUND STATUS
       0170 CA            18     D3  0120   360 	BITL	#<1@SV_ASTLVL>!<1@SV_NOAST>,I_STATE(R10); AST'S ALLOWED?
                          09     12  0125   361 	BNEQ	20$			; IF NEQ THEN NO
            52       00C8 DA     0F  0127   362 5$:	REMQUE	@I_ASTQUEUE(R10),R2	; GET THE NEXT AST CONTROL BLOCK
                          02     1D  012C   363 	BVS	20$			; IF V-SET THEN NONE
                          50     D6  012E   364 	INCL	R0			; SET SUCCESS
                                 05  0130   365 20$:	RSB				; RETURN
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page  12
V06.0           RSX-11M ASTX$ DIRECTIVE                                                                                          (9)

                                     0131   367 	.SBTTL	RSX-11M ASTX$ DIRECTIVE
                                     0131   368 ;++
                                     0131   369 ; RSX$ASTX - RSX-11M AST EXIT DIRECTIVE
                                     0131   370 ;
                                     0131   371 ; FUNCTIONAL DESCRIPTION:
                                     0131   372 ;
                                     0131   373 ; THIS IS A RSX DIRECTIVE HANDLER WHICH IMPLEMENTS AN RSX-11M
                                     0131   374 ; "ASTX$" DIRECTIVE.
                                     0131   375 ;
                                     0131   376 ; THE ACTION IS TO VERIFY THAT THE DIRECTIVE IS LEGAL AND THEN
                                     0131   377 ; DISMANTLE THE RSX-11M AST STACK (R6).
                                     0131   378 ;
                                     0131   379 ; RETURN TO THE DIRECTIVE RESTORE LOGIC WILL DELIVER ANY PENDING AST'S.
                                     0131   380 ;
                                     0131   381 ; CALLING SEQUENCE:
                                     0131   382 ;
                                     0131   383 ;	CALLED VIA CASE FROM "RSX$EXCEPTION".
                                     0131   384 ;
                                     0131   385 ; INPUT PARAMETERS:
                                     0131   386 ;
                                     0131   387 ;	R5 = ADDRESS OF DPB+2
                                     0131   388 ;	R6 = CM IMAGE STACK ADDRESS
                                     0131   389 ;	R10 = ADDRESS OF CM IMAGE DATA BASE
                                     0131   390 ;	R11 = ADDRESS OF IMAGE HEADER
                                     0131   391 ;
                                     0131   392 ; IMPLICIT INPUTS:
                                     0131   393 ;
                                     0131   394 ;	THE DPB IS ALREADY VALIDATED FOR READ ACCESS.
                                     0131   395 ;	THE DPB SIZE AND TYPE ARE CORRECT.
                                     0131   396 ;
                                     0131   397 ; OUTPUT PARAMETERS:
                                     0131   398 ;
                                     0131   399 ;	R10,R11 ARE PRESERVED
                                     0131   400 ;
                                     0131   401 ; IMPLICIT OUTPUTS:
                                     0131   402 ;
                                     0131   403 ;	THE PROPER DIRECTIVE STATUS IS PLACED IN THE IMAGE DSW
                                     0131   404 ;	ALONG WITH THE PROPER SETTING OF THE C-BIT.
                                     0131   405 ;
                                     0131   406 ; COMPLETION CODES:
                                     0131   407 ;
                                     0131   408 ;	IS.SUC	SUCCESSFUL
                                     0131   409 ;	IE.AST	NOT ISSUED FROM AST SERIVCE
                                     0131   410 ;--
                                     0131   411 RSX$ASTX::				; AST SERVICE EXIT DIRECTIVE
                                     0131   412 ;
                                     0131   413 ; THIS BIT IS SET BY THE AST DELIVERY LOGIC ABOVE.
                                     0131   414 ;
       0170 CA            04     E4  0131   415 	BBSC	#SV_ASTLVL,I_STATE(R10),10$; AST LEVEL?
                          0A         0136       
                                     0137   416 ;
                                     0137   417 ; NOT AT AST LEVEL
                                     0137   418 ;
                                     0137   419 	$DSW	#IE.AST			; SET STATUS AND RETURN
                                     0141   420 ;
                                     0141   421 ; IF PRESENT AST IS A PERMANENT AST THEN RE-ENABLE IT'S FUNCTION
                                     0141   422 ;
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page  13
V06.0           RSX-11M ASTX$ DIRECTIVE                                                                                          (9)

            52       0198 CA     D0  0141   423 10$:	MOVL	I_CURAST(R10),R2	; GET ADDRESS OF THE CURRENT AST CONTEXT
         0C A2            00     E1  0146   424 	BBC	#ACBV_PERM,ACB_FLAGS(R2),40$; BR IF NOT PERMANENT AST
                          0F         014A       
                                     014B   425 ;
                                     014B   426 ; PERMANENT AST - SEPARATE ON TYPE
                                     014B   427 ;
                       5F'AF     9F  014B   428 	PUSHAB	B^45$			; SET ADDRESS TO CONTINUE AT
                                     014E   429 	CASE	ACB_FLAGS+1(R2),TYPE=B,<-;
                                     014E   430 		RSX$POWEREN,-		; POWER AST
                                     014E   431 		RSX$RCVASTEN,-		; RECEIVE AST
                                     014E   432 		RSX$CTRLCASTEN,-	; CONTROL C ENABLES
                                     014E   433 		>
                                 05  0159   434 20$:	RSB				;
                                     015A   435 ;
                                     015A   436 ; NON PERMANENT AST
                                     015A   437 ;
       00D0 CA            62     0E  015A   438 40$:	INSQUE	(R2),I_ASTPOOL(R10)	; DEALLOCATE THE CONTEXT BLOCK
                                     015F   439 ;
                                     015F   440 ; TEST ACCESS TO STACK
                                     015F   441 ;
                                     015F   442 45$:	IFNORD	#14,(R6),70$		; IF STACK CANNOT BE READ THEN ERROR
                                     0165   443 ;
                                     0165   444 ; REMOVE DSW FROM STACK
                                     0165   445 ;
                          86     B5  0165   446 	TSTW	(R6)+			; TAKE DSW OFF
         20 AA            86     3C  0167   447 	MOVZWL	(R6)+,I_PC(R10)		; SET PC TO RETURN TO ON EXIT
            86       FFE0 8F     AB  016B   448 	BICW3	#^X0FFE0,(R6)+,I_PS(R10); GET NEW IMAGE PSW
                       24 AA         0170       
            56            08     C0  0172   449 	ADDL	#8,R6			; REMOVE REMAINDER OF AST FROM STACK
                                     0175   450 ;
                                     0175   451 ; ANOTHER AST TO DELIVER?
                                     0175   452 ;
                          A7     10  0175   453 50$:	BSBB	GETNEXTAST		; FIND THE NEXT AST IF ANY
            0A            50     E8  0177   454 	BLBS	R0,55$			; IF LOW SET THEN AST TO DELIVER
                                     017A   455 ;
                                     017A   456 ; PRESENT AST IS THE LAST.
                                     017A   457 ;
                                     017A   458 ; SEE IF THE PRESENT AST INTERRUPTED A WAIT IN PROGRESS.
                                     017A   459 ;
            51       0180 CA     7D  017A   460 	MOVQ	I_WAITSAVE(R10),R1	; WAIT INTERRUPTED?
                          0E     13  017F   461 	BEQL	60$			; IF EQL THEN NO WAIT NEEDED
                          FE7C'  31  0181   462 	BRW	RSX$WAIT		; DO WAIT NOW
                                     0184   463 ;
                                     0184   464 ; AST FOUND TO DELIVER - REQUEUE IT AT FRONT OF AST LIST
                                     0184   465 ;
       00C8 CA            62     0E  0184   466 55$:	INSQUE	(R2),I_ASTQUEUE(R10)	; QUEUE AST TO HEAD OF LIST
       0170 CA            05     E2  0189   467 	BBSS	#SV_PENDWAIT,I_STATE(R10),60$; SET AST IN QUEUE
                          00         018E       
                                     018F   468 ;
                                     018F   469 ; COMMON AST EXIT
                                     018F   470 ;
                                 05  018F   471 60$:	RSB				; AND RETURN
                                     0190   472 ;
                                     0190   473 ; BAD STACK
                                     0190   474 ;
                                     0190   475 70$:	$IMAGEABORT	#RSX$_BADSTACK
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page  14
V06.0           RSX$SETUPAST - ALLOCATE AN AST CONTROL BLOCK                                                                    (10)

                                     019A   477 	.SBTTL	RSX$SETUPAST - ALLOCATE AN AST CONTROL BLOCK
                                     019A   478 ;++
                                     019A   479 ; RSX$SETUPAST - ALLOCATE AND SET UP AST CONTEXT BLOCK
                                     019A   480 ;
                                     019A   481 ; FUNCTIONAL DESCRIPTION:
                                     019A   482 ;
                                     019A   483 ; THIS ROUTINE ALLOCATES AN AST CONTEXT BLOCK.
                                     019A   484 ;
                                     019A   485 ; THIS ROUTINE IS NEVER CALLED AT AST LEVEL.
                                     019A   486 ;
                                     019A   487 ;
                                     019A   488 ; INPUT:
                                     019A   489 ;
                                     019A   490 ;	R10 = ADDRESS OF THE IMAGE DATA BASE
                                     019A   491 ;	R11 = ADDRESS OF THE IMAGE HEADER
                                     019A   492 ;
                                     019A   493 ; OUTPUTS:
                                     019A   494 ;
                                     019A   495 ;	R2 = ADDRESS OF THE BLOCK ALLOCATED
                                     019A   496 ;	R10,R11 ARE PRESERVED.
                                     019A   497 ;--
                                     019A   498 RSX$SETUPAST::				;
            52       00D0 DA     0F  019A   499 	REMQUE	@I_ASTPOOL(R10),R2	; GET A BLOCK
                          09     1C  019F   500 	BVC	30$			; IF VSET THEN NONE
            51            20     9A  01A1   501 	MOVZBL	#QIO_SIZE,R1		; SET SIZE TO ALLOCATE
                          FE59'  30  01A4   502 	BSBW	RSX$ALLOCATE		; ALLOCATE THE BLOCK
            52            50     D0  01A7   503 	MOVL	R0,R2			; COPY ADDRESS OF ALLOCATED BLOCK
                                 05  01AA   504 30$:	RSB				; RETURN
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page  15
V06.0           I/O DONE AST SERVICE                                                                                            (11)

                                     01AB   506 	.SBTTL	I/O DONE AST SERVICE
                                     01AB   507 ;++
                                     01AB   508 ; RSX$IODONEAST - I/O DONE AST SERVICE
                                     01AB   509 ;
                                     01AB   510 ; FUNCTIONAL DESCRIPTION:
                                     01AB   511 ;
                                     01AB   512 ; THIS ROUTINE IS ENTERED ON I/O DONE FOR ALL RSX-11M I/O OPERATIONS.
                                     01AB   513 ; THE ACTION IS TO POST THE CORRECT RSX-11M STATUS IN THE IOSB OF THE
                                     01AB   514 ; QIO REQUEST. THEN IF NECESSARY, THE ASSOCIATED IMAGE AST IS POSTED.
                                     01AB   515 ;
                                     01AB   516 ; INPUTS:
                                     01AB   517 ;
                                     01AB   518 ;	THE ADDRESS OF THE AST CONTEXT BLOCK IS AT AST_PARAM(AP).
                                     01AB   519 ;
                                     01AB   520 ; OUTPUTS:
                                     01AB   521 ;
                                     01AB   522 ;	NONE.
                                     01AB   523 ;
                                     01AB   524 ;--
                                     01AB   525 RSX$IODONEAST::				; I/O DONE AST SERVICE
                               0FFC  01AB   526 	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
            5A   00000000'GF     9E  01AD   527 	MOVAB	G^CTL$AL_CMCNTX,R10	; ADDRESS IMPURE DATA BASE
                          5B     D4  01B4   528 	CLRL	R11			; ADDRESS IMAGE
                                     01B6   529 ;
                                     01B6   530 ; GET THE AST CONTEXT BLOCK
                                     01B6   531 ;
            52         04 AC     D0  01B6   532 	MOVL	AST_PARAM(AP),R2	; ADDRESS THE CONTEXT BLOCK
                                     01BA   533 ;
                                     01BA   534 ; SET UP HIS IOSB
                                     01BA   535 ;
            58         08 A2     3C  01BA   536 	MOVZWL	ACB_UPRM(R2),R8		; GET ADDRESS OF IOSB
                          08     13  01BE   537 	BEQL	10$			; IF EQL THEN NONE
                                     01C0   538 	IFNOWRT	#4,(R8),10$		; IF NO WRITE THEN GO ON ALSO
                          68     D4  01C6   539 	CLRL	(R8)			; ZERO IT
                                     01C8   540 ;
                                     01C8   541 ; IF THIS IS A FILE I/O OPERATION THEN INTERPRET THE FCB
                                     01C8   542 ;
         1A A2            00     E1  01C8   543 10$:	BBC	#QIOV_FILES,QIO_FLAGS(R2),50$; BR IF NOT FILES ORIENTED
                          19         01CC       
                                     01CD   544 ;
                                     01CD   545 ; FILE I/O OPERATION
                                     01CD   546 ;
            53         1C A2     D0  01CD   547 	MOVL	QIO_SECONDBLK(R2),R3	; ADDRESS FCB FOR OPERATION
            08         0E A2     E9  01D1   548 	BLBC	QIO_IOSB(R2),20$	; IF NOT SUCCESSFUL OPERATION BR
                                     01D5   549 ;
                                     01D5   550 ; ENTER FUNCTION SPECIFIC I/O DONE ROUTINE
                                     01D5   551 ;
            50         78 A3     D0  01D5   552 	MOVL	FCB_PC(R3),R0		; ADDRESS THE ROUTINE
                          02     13  01D9   553 	BEQL	20$			; IF EQL THEN NONE
                          60     16  01DB   554 	JSB	(R0)			; GO TO IT
                                     01DD   555 ;
                                     01DD   556 ; I/O DONE PROCESSING DONE OR UNSUCCESSFUL FUNCTION
                                     01DD   557 ;
       00D8 CA            63     0E  01DD   558 20$:	INSQUE	(R3),I_FCBPOOL(R10)	; DEALLOCATE THE BLOCK
            52         04 AC     D0  01E2   559 	MOVL	AST_PARAM(AP),R2	; ADDRESS CONTEXT BLOCK AGAIN
                                     01E6   560 ;
                                     01E6   561 ; POST THE STATUS IN THE IOSB
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page  16
V06.0           I/O DONE AST SERVICE                                                                                            (11)

                                     01E6   562 ;
                                     01E6   563 ; MAP THE VAX/VMS STATUS CODE TO AN RSX CODE
                                     01E6   564 ;
            58         08 A2     3C  01E6   565 50$:	MOVZWL	ACB_UPRM(R2),R8		; ADDRESS IOSB
                          6A     13  01EA   566 	BEQL	100$			; IF EQL THEN NONE
            50         0E A2     3C  01EC   567 	MOVZWL	QIO_IOSB(R2),R0		; GET THE STATUS
                          FE0D'  30  01F0   568 	BSBW	RSX$RSXQIOERR		; MAP THE STATUS
         02 A8         10 A2     B0  01F3   569 	MOVW	QIO_IOSB+2(R2),2(R8)	; INSERT APPARENT TRANSFER SIZE
            68            51     90  01F8   570 	MOVB	R1,(R8)			; INSERT STATUS IN HIS IOSB
                                     01FB   571 ;
                                     01FB   572 ; ENTER DEVICE DEPENDENT STATUS POSTING ROUTINES
                                     01FB   573 ;
            53         16 A2     D0  01FB   574 65$:	MOVL	QIO_LUT(R2),R3		; ADDRESS THE LUT
                                     01FF   575 ;
                                     01FF   576 ; ENTER DEVICE DEPENDENT CODE FOR STATUS MAP
                                     01FF   577 ;
                                     01FF   578 	CASE	LUT_TYPE(R3),TYPE=B,-
                                     01FF   579 		<-
                                     01FF   580 		80$,-			; RMS
                                     01FF   581 		70$,-			; TERMINALS
                                     01FF   582 		>
                          4C     11  0208   583 	BRB	100$			;
                                     020A   584 ;
                                     020A   585 ; MAP TERMINAL STATUS RETURNS
                                     020A   586 ;
            50         14 A2     3C  020A   587 70$:	MOVZWL	QIO_IOSB+6(R2),R0	; GET TERMINATOR SIZE AND TEST WRITE
                          2E     13  020E   588 	BEQL	90$			; IF EQL THEN NO TERMINATOR OR WRITE
         01 A8         12 A2     90  0210   589 	MOVB	QIO_IOSB+4(R2),1(R8)	; INSERT TERMINATOR
         12 A2            1A     91  0215   590 	CMPB	#26,QIO_IOSB+4(R2)	; CONTROL Z?
                          06     12  0219   591 	BNEQ	75$			; IF NEQ THEN NO
            68         F6 8F     9B  021B   592 	MOVZBW	#IE.EOF,(R8)		; SET IE.EOF
                          35     11  021F   593 	BRB	100$			; CONTINUE
            01            50     91  0221   594 75$:	CMPB	R0,#1			; ONE TERMINATOR?
                          30     13  0224   595 	BEQL	100$			; IF EQL THEN YES
            68       8000 8F     A8  0226   596 	BISW	#^X08000,(R8)		; SET ESCAPE SEQUENCE
                          29     11  022B   597 	BRB	100$
                                     022D   598 ;
                                     022D   599 ; RMS TERMINAL-LIKE STATUS POST
                                     022D   600 ;
                                     022D   601 80$:
         01 A8         12 A2     90  022D   602 	MOVB	QIO_IOSB+4(R2),1(R8)	; INSERT TERMINATOR
         12 A2            1A     91  0232   603 	CMPB	#26,QIO_IOSB+4(R2)	; CONTROL Z?
                          1E     12  0236   604 	BNEQ	100$			; IF NEQ THEN NO
            68         F6 8F     9B  0238   605 	MOVZBW	#IE.EOF,(R8)		; SET IE.EOF
                          18     11  023C   606 	BRB	100$			;
                                     023E   607 ;
                                     023E   608 ; LOOK FOR CONTROL Y/C SPECIAL CASE
                                     023E   609 ;
            14         0E A2     E9  023E   610 90$:	BLBC	QIO_IOSB(R2),100$	; ERROR?
         0E A2       0000'8F     B1  0242   611 	CMPW	#SS$_CONTROLY,QIO_IOSB(R2);
                          08     13  0248   612 	BEQL	95$			; IF EQL THEN YES
         0E A2       0000'8F     B1  024A   613 	CMPW	#SS$_CONTROLC,QIO_IOSB(R2);
                          04     12  0250   614 	BNEQ	100$			;
         01 A8            0D     90  0252   615 95$:	MOVB	#13,1(R8)		; SET CR TERMINATOR
                                     0256   616 ;
                                     0256   617 ; DELIVER AST IF NEEDED
                                     0256   618 ;
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page  17
V06.0           I/O DONE AST SERVICE                                                                                            (11)

                       0A A2     B5  0256   619 100$:	TSTW	ACB_UPC(R2)		; AST TO DELIVER?
                          06     12  0259   620 	BNEQ	110$			; IF NEQ THEN YES
       00D0 CA            62     0E  025B   621 	INSQUE	(R2),I_ASTPOOL(R10)	; DEALLOCATE THE AST BLOCK
                                 04  0260   622 105$:	RET				; RETURN
                          FDE4   31  0261   623 110$:	BRW	POSTAST			; POST THE AST FOR THE USER
                                     0264   624 ;
                                     0264   625 	.END
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page  18
SYMBOL TABLE                                                                                                                    (11)

$$MSG          = 00000000            DEV$V_ELG      = 00000016            H.OVLY           0000002C            
...GBL         = 00000000            DEV$V_FOD      = 0000000E            H.PFVA           0000001A            
ACBC_CTLRCAST  = 00000002            DEV$V_FOR      = 00000018            H.RCVA           0000001E            
ACBC_FLOATAST  = 00000003            DEV$V_GEN      = 00000011            H.RRVA           00000032            
ACBC_PWRAST    = 00000000            DEV$V_IDV      = 0000001A            H.SPRI           00000030            
ACBC_RCVAST    = 00000001            DEV$V_MBX      = 00000014            H.TKVA           00000016            
ACBV_INPROG    = 00000001            DEV$V_MNT      = 00000013            H.TKVL           00000018            
ACBV_PERM      = 00000000            DEV$V_NET      = 0000000D            H.VEXT           0000002E            
ACBV_TYPE      = 00000008            DEV$V_ODV      = 0000001B            H.WND            00000024            
ACB_FLAGS        0000000C            DEV$V_RCK      = 0000001E            IE.2DV         = FFFFFFD0            
ACB_LINK         00000000            DEV$V_REC      = 00000000            IE.ABO         = FFFFFFF1            
ACB_UPC          0000000A            DEV$V_RND      = 0000001C            IE.ALC         = FFFFFFAC            
ACB_UPRM         00000008            DEV$V_RTM      = 0000001D            IE.ALN         = FFFFFFDE            
ADR_HIGHLIM      00000004            DEV$V_SDI      = 00000004            IE.AST         = FFFFFFB0            
ADR_LOWLIM       00000000            DEV$V_SHR      = 00000010            IE.BAD         = FFFFFFFF            
ADR_SIZE         00000008            DEV$V_SPL      = 00000006            IE.BBE         = FFFFFFC8            
AP_NAME          00000004            DEV$V_SQD      = 00000005            IE.BCC         = FFFFFFBE            
ASTEXIT          0000003E R     05   DEV$V_SWL      = 00000019            IE.BDI         = FFFFFFCC            
AST_PARAM        00000004            DEV$V_TRM      = 00000002            IE.BDR         = FFFFFFCE            
AST_PC           00000010            DEV$V_WCK      = 0000001F            IE.BDV         = FFFFFFC9            
AST_PSL          00000014            FCB_ATTRIBS      0000007C            IE.BHD         = FFFFFFC0            
AST_R0           00000008            FCB_FIB          0000004C            IE.BLB         = FFFFFFBA            
AST_R1           0000000C            FCB_FID          00000000            IE.BLK         = FFFFFFEC            
BIT...         = 00000020            FCB_FNAME        00000014            IE.BNM         = FFFFFFCA            
CTL$AL_CMCNTX    ********   X   05   FCB_FNAMEDESC    0000000C            IE.BTF         = FFFFFFB4            
C_CANONPS      = 83C00000            FCB_FNB          00000002            IE.BTP         = FFFFFFD5            
C_RCVDSTR      = 44564352            FCB_PC           00000078            IE.BVR         = FFFFFFC1            
DEV$M_ALL      = 00800000            FCB_RESULT       00000030            IE.BYT         = FFFFFFED            
DEV$M_AVL      = 00040000            FCB_RESULTDESC   00000004            IE.CKS         = FFFFFFE2            
DEV$M_CCL      = 00000002            FCB_SIZE         000000B4            IE.CLO         = FFFFFFDA            
DEV$M_DIR      = 00000008            FP_AP            00000008            IE.CNR         = FFFFFFB7            
DEV$M_DMT      = 00200000            FP_FP            0000000C            IE.CON         = FFFFFFEA            
DEV$M_ELG      = 00400000            FP_PC            00000010            IE.DAA         = FFFFFFF8            
DEV$M_FOD      = 00004000            FP_PSL           00000004            IE.DAO         = FFFFFFF3            
DEV$M_FOR      = 01000000            FP_REGISTERS     00000014            IE.DFU         = FFFFFFE8            
DEV$M_GEN      = 00020000            GBL...         = 00000000            IE.DNA         = FFFFFFF9            
DEV$M_IDV      = 04000000            GETNEXTAST       0000011E R     05   IE.DNR         = FFFFFFFD            
DEV$M_MBX      = 00100000            H.CSP            00000000            IE.DUN         = FFFFFFF7            
DEV$M_MNT      = 00080000            H.CUIC           00000008            IE.DUP         = FFFFFFC7            
DEV$M_NET      = 00002000            H.DSW            00000026            IE.EOF         = FFFFFFF6            
DEV$M_ODV      = 08000000            H.DUIC           0000000A            IE.EOT         = FFFFFFC2            
DEV$M_RCK      = 40000000            H.EFLM           00000004            IE.EOV         = FFFFFFF5            
DEV$M_REC      = 00000001            H.EFSV           00000020            IE.EXP         = FFFFFFB5            
DEV$M_RND      = 10000000            H.FCS            00000028            IE.FEX         = FFFFFFCF            
DEV$M_RTM      = 20000000            H.FORT           0000002A            IE.FHE         = FFFFFFC5            
DEV$M_SDI      = 00000010            H.FPSA           00000022            IE.FLN         = FFFFFFAF            
DEV$M_SHR      = 00010000            H.FPVA           0000001C            IE.FOP         = FFFFFFCB            
DEV$M_SPL      = 00000040            H.GARD           0000003A            IE.HFU         = FFFFFFE4            
DEV$M_SQD      = 00000020            H.HDLN           00000002            IE.IES         = FFFFFFAE            
DEV$M_SWL      = 02000000            H.IPC            0000000E            IE.IFC         = FFFFFFFE            
DEV$M_TRM      = 00000004            H.IPS            0000000C            IE.IFU         = FFFFFFE7            
DEV$M_WCK      = 80000000            H.ISP            00000010            IE.ILL         = FFFFFFD6            
DEV$V_ALL      = 00000017            H.LUN            0000003E            IE.ISQ         = FFFFFFC3            
DEV$V_AVL      = 00000012            H.NLUN           0000003C            IE.LCK         = FFFFFFE5            
DEV$V_CCL      = 00000001            H.NML            00000031            IE.MOD         = FFFFFFEB            
DEV$V_DIR      = 00000003            H.ODVA           00000012            IE.NBF         = FFFFFFD9            
DEV$V_DMT      = 00000015            H.ODVL           00000014            IE.NBK         = FFFFFFD7            
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page  19
SYMBOL TABLE                                                                                                                    (11)

IE.NDR         = FFFFFFB8            I_DEBVECL        00000192            LUT_CHAR         00000012            
IE.NFI         = FFFFFFC4            I_FCBPOOL        000000D8            LUT_CTRLC        00000032            
IE.NFW         = FFFFFFBB            I_FCC            000001B4            LUT_FLAGS        0000000A            
IE.NLK         = FFFFFFB1            I_FLOATA0        000001C0            LUT_INFONAME     0000002E            
IE.NLN         = FFFFFFDB            I_FLOATA1        000001C8            LUT_INFOUNIT     00000030            
IE.NNC         = FFFFFFB3            I_FLOATA2        000001D0            LUT_LINK         00000000            
IE.NNL         = FFFFFFB2            I_FLOATA3        000001D8            LUT_REALNAME     0000001E            
IE.NNN         = FFFFFFBC            I_FLOATA4        000001E0            LUT_REF          00000008            
IE.NOD         = FFFFFFE9            I_FLOATA5        000001E8            LUT_RSXNAME      00000010            
IE.NSF         = FFFFFFE6            I_FLOATADR       000001B0            LUT_SIZE         00000036            
IE.NST         = FFFFFFB0            I_FLOATAST       000001A4            LUT_TYPE         00000016            
IE.OFL         = FFFFFFBF            I_FLOATCSR       000001A8            POSTAST          00000048 R     05   
IE.ONP         = FFFFFFFB            I_FLOATERR       000001AC            PSL_CC         = 00000000            
IE.OVR         = FFFFFFEE            I_FLOATTMP       000001B8            PSL_CM         = 0000001F            
IE.PES         = FFFFFFAD            I_GARD           000000EC            PSL_FPD        = 0000001B            
IE.PRI         = FFFFFFF0            I_HIGHEFN        0000016C            PSL_FU         = 00000006            
IE.RAC         = FFFFFFD4            I_HIGHSIZE       000000F4            PSL_TBIT       = 00000004            
IE.RAT         = FFFFFFD3            I_IMAGEVBN       000000F8            QIOV_FILES     = 00000000            
IE.RBG         = FFFFFFD8            I_INISIZE        000000F0            QIO_FLAGS        0000001A            
IE.RCN         = FFFFFFD2            I_LENGTH         000001F0            QIO_IOSB         0000000E            
IE.RER         = FFFFFFE0            I_LOGNAME        000000E0            QIO_LUT          00000016            
IE.RNM         = FFFFFFCD            I_LUT            00000168            QIO_SECONDBLK    0000001C            
IE.RSU         = FFFFFFEF            I_NLUN           00000164            QIO_SIZE         00000020            
IE.SNC         = FFFFFFDD            I_PC             00000020            RSX$ABORT        ********   X   05   
IE.SPC         = FFFFFFFA            I_PPFINDEX       00000162            RSX$ALLOCATE     ********   X   05   
IE.SQC         = FFFFFFDC            I_PROCNAME       0000014C            RSX$ASTX         00000131 RG    05   
IE.SRE         = FFFFFFF2            I_PS             00000024            RSX$CTRLCAST     00000028 RG    05   
IE.STK         = FFFFFFC6            I_PWRAST         000001A0            RSX$CTRLCASTEN   ********   X   05   
IE.TMM         = FFFFFFB9            I_R0             00000000            RSX$C_SUBSYSTEM= 00000006            
IE.TMO         = FFFFFFB6            I_R1             00000004            RSX$IODONEAST    000001AB RG    05   
IE.ULK         = FFFFFFAB            I_R2             00000008            RSX$MARKAST      0000003F RG    05   
IE.VER         = FFFFFFFC            I_R3             0000000C            RSX$POWERAST     00000000 RG    05   
IE.WAC         = FFFFFFE3            I_R4             00000010            RSX$POWEREN      ********   X   05   
IE.WAT         = FFFFFFE1            I_R5             00000014            RSX$RCVAST       00000017 RG    05   
IE.WCK         = FFFFFFAA            I_R6             00000018            RSX$RCVASTEN     ********   X   05   
IE.WER         = FFFFFFDF            I_RAD50NAME      00000148            RSX$REI          ********   X   05   
IE.WLK         = FFFFFFF4            I_RCVAST         0000019C            RSX$RESTORE_CON  ********   X   05   
IS.BV          = 00000005            I_RCVMAIL        00000160            RSX$RETURNAST    000000B0 RG    05   
IS.CC          = 00000301            I_RUNFLAGS       0000018C            RSX$RSXQIOERR    ********   X   05   
IS.CR          = 00000D01            I_SCRATCH        00000028            RSX$SETUPAST     0000019A RG    05   
IS.EOT         = 00000401            I_SSTVEC         00000194            RSX$WAIT         ********   X   05   
IS.ESC         = 00001B01            I_SSTVECL        00000196            RSX$_ACCVIO    = 00068044            
IS.ESQ         = 00009B01            I_STATE          00000170            RSX$_BADLIBREF = 0006806C            
IS.PES         = 00008001            I_TYPE           0000001C            RSX$_BADSTACK  = 0006804C            
IS.PND         = 00000000            I_UIC            0000013C            RSX$_BREAK     = 0006800C            
IS.RDD         = 00000002            I_WAIT           00000178            RSX$_EXITSTATUS= 00068640            
IS.SUC         = 00000001            I_WAITSAVE       00000180            RSX$_EXTERNABRT= 0006805C            
IS.TAB         = 00000901            LUTC_CR        = 00000005            RSX$_ILLINST   = 0006802C            
IS.TMO         = 00000002            LUTC_DISK      = 00000002            RSX$_IMAGETERM = 00068084            
I_ADR0           000000FC            LUTC_LP        = 00000004            RSX$_INSFDYNMEM= 00068054            
I_ASCIINAME      00000140            LUTC_RMS       = 00000000            RSX$_IOT       = 00068014            
I_ASTPOOL        000000D0            LUTC_TAPE      = 00000003            RSX$_LIBNOTFND = 00068074            
I_ASTQUEUE       000000C8            LUTC_TRM       = 00000001            RSX$_LOADERROR = 0006807C            
I_BAILOUTFP      00000188            LUTV_CTRLC     = 00000002            RSX$_NOCOMM    = 00068094            
I_CMDROUT        000000E8            LUTV_CTRLO     = 00000000            RSX$_NONRSXEMT = 0006801C            
I_CURAST         00000198            LUTV_PRM       = 00000003            RSX$_NOPMD     = 00068332            
I_DEBVEC         00000190            LUT_CHAN         0000000C            RSX$_NOSUCHDEV = 00068322            
RSXASTSRV       - AST SERVICE ROUTINES FOR THE RSX11M/AME        22-AUG-1978 05:06:01   VAX-11 MACRO X0.3-11               Page  20
SYMBOL TABLE                                                                                                                    (11)

RSX$_NOTSKIMG  = 00068064            
RSX$_ODDADDR   = 00068034            
RSX$_PMD       = 0006832A            
RSX$_RCVMBXSIZ = 0000012C            
RSX$_REGMSG    = 0006808C            
RSX$_RESERVED  = 00068004            
RSX$_TBIT      = 0006803C            
RSX$_TRAP      = 00068024            
RSX$_VERIFYCMD = 00068648            
SS$_CONTROLC     ********   X   05   
SS$_CONTROLY     ********   X   05   
SS$_NORMAL       ********   X   05   
SV_ASTLVL        00000004            
SV_DCL           00000002            
SV_FLOATAST      00000009            
SV_NOAST         00000003            
SV_PENDWAIT      00000005            
SV_PWRAST        00000008            
SV_RCVAST        00000007            
SV_RESTORE       00000000            
SV_TRANSLATE     00000001            
SV_WAIT          00000006            
W.BATT           00000006            
W.BFPD           0000000C            
W.BHVR           00000004            
W.BLGH           00000010            
W.BLPD           0000000E            
W.BLVR           00000002            
W.BNPD           0000000D            
W.BOFF           0000000A            
W.BPCB           00000000            
W.BSIZ           00000008            


PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
..ABS.           00000042      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            00000000      03     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
RSXDEF           000001F4      04     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
RSXCODE          00000264      05       PIC   USR   CON   REL   LCL   SHR   EXE   RD  NOWRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
15746. BYTES LEFT IN FREE MEMORY POOL.
20. BYTES OF RECLAIMED MEMORY.
OBJ$:RSXASTSRV,LIS$:RSXASTSRV/-SP=EXECML$/ML,LIB$:R/ML,SRC$:RSXASTSRV
28 MLB DIR RDS - 498 GETS TO DEFINE 21 MACROS. 22 INTER. FILE WRITES. 
