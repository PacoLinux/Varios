RSXSUBROUTINES                                                   22-AUG-1978 05:12:32   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (2)      44  RSX$ASCIIR50 - CONVERT ASCII STRING TO RAD50
   (3)     114  CONVERT TASK NAME
   (4)     144  CONVERT RAD50 TO ASCII
   (5)     197  MEMORY ALLOCATION SUBROUTINE
   (6)     259  DEALLOCATE MEMORY BLOCK
   (7)     307  CONVERT RSX11M TIME DATA TO DELTA TIME
   (8)     366  RSX$RSXQIOERR - MAP VAX/VMS I/O STATUS TO RSX
RSXSUBROUTINES                                                   22-AUG-1978 05:12:32   VAX-11 MACRO X0.3-11               Page   1
V06.0                                                                                                                            (1)

                                     0000     1 
                                     0000     2 	.TITLE	RSXSUBROUTINES
                                     0000     3 	.IDENT	/V06.0/		;
                                     0000     4 
                                     0000     5 ;
                                     0000     6 ; COPYRIGHT (C) 1978
                                     0000     7 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS 01754
                                     0000     8 ;
                                     0000     9 ; THIS SOFTWARE IS FURNISHED  UNDER A LICENSE FOR USE ONLY ON A SINGLE
                                     0000    10 ; COMPUTER  SYSTEM AND  MAY BE  COPIED ONLY WITH  THE INCLUSION OF THE
                                     0000    11 ; ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,
                                     0000    12 ; MAY NOT BE PROVIDED OR  OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
                                     0000    13 ; EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE
                                     0000    14 ; TERMS.  TITLE TO AND  OWNERSHIP OF THE  SOFTWARE  SHALL AT ALL TIMES
                                     0000    15 ; REMAIN IN DEC.
                                     0000    16 ;
                                     0000    17 ; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE
                                     0000    18 ; AND SHOULD  NOT BE CONSTRUED  AS A COMMITMENT  BY DIGITAL  EQUIPMENT
                                     0000    19 ; CORPORATION.
                                     0000    20 ;
                                     0000    21 ; DEC ASSUMES  NO  RESPONSIBILITY  FOR  THE USE OR  RELIABILITY OF ITS
                                     0000    22 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
                                     0000    23 
                                     0000    24 ;++
                                     0000    25 ; FACILITY:
                                     0000    26 ;
                                     0000    27 ;	VAX/VMS RSX-11M AME
                                     0000    28 ;
                                     0000    29 ; ABSTRACT:
                                     0000    30 ;
                                     0000    31 ; 	THIS MODULE CONTAINS UTILITY SUBROUTINES FOR THE RSX.
                                     0000    32 ;
                                     0000    33 ; AUTHOR: R. HEINEN 1-OCT-76 
                                     0000    34 ;--
                                     0000    35  
                                     0000    36 ;
                                     0000    37 ; EXTERNAL SYMBOLS
                                     0000    38 ;
                                     0000    39 	$RSXDEF			; DEFINE RSX SYMBOLS
                                     0000    40 	IOERR$			; DEFINE I/O ERROR CODES
                                     0000    41  
RSXSUBROUTINES                                                   22-AUG-1978 05:12:32   VAX-11 MACRO X0.3-11               Page   2
V06.0                                                                                                                            (2)

                                 00000000    43 	.PSECT	RSXCODE,NOWRT,SHR,PIC
                                     0000    44 	.SBTTL	RSX$ASCIIR50 - CONVERT ASCII STRING TO RAD50
                                     0000    45 ;++
                                     0000    46 ; RSX$ASCIIR50 - CONVERT ASCII STRING TO RAD50
                                     0000    47 ;
                                     0000    48 ; FUNCTIONAL DESCRIPTION:
                                     0000    49 ;
                                     0000    50 ; THIS ROUTINE CONVERTS A ASCIZ STRING TO RAD50, PLACING THE RAD50
                                     0000    51 ; VALUES IN A SPECIFIED BUFFER. DOT CAN BE LEGAL OR ILLEGAL.
                                     0000    52 ;
                                     0000    53 ; INPUTS:
                                     0000    54 ;
                                     0000    55 ;	R0 = 0 IF DOT ILLEGAL
                                     0000    56 ;	R1 = ADDRESS OF THE ASCIZ STRING
                                     0000    57 ;	R4 = ADDRESS TO PLACE THE RAD50
                                     0000    58 ;	R6 = IMAGE STACK
                                     0000    59 ;	R10 = ADDRESS OF THE IMAGE IMPURE DATA BASE
                                     0000    60 ;	R11 = ADDRESS OF THE IMAGE
                                     0000    61 ;
                                     0000    62 ; OUTPUTS:
                                     0000    63 ;
                                     0000    64 ;	R1 = ADDRESS OF THE TERMINATING CHARACTER
                                     0000    65 ;	R4 = ADDRESS OF THE NEXT WORD IN THE OUTPUT BUFFER
                                     0000    66 ;	
                                     0000    67 ;	R5,R7,R8 ARE DISTROYED.
                                     0000    68 ;	R6,R10,R11 ARE PRESERVED.
                                     0000    69 ;--
                                     0000    70 RSX$ASCR503::				;
                          02     10  0000    71 	BSBB	RSX$ASCR501		; CONVERT THREE WORDS
                                     0002    72 RSX$ASCR502::				;
                          00     10  0002    73 	BSBB	RSX$ASCR501		; CONVERT TWO WORDS
                                     0004    74 RSX$ASCR501::				; CONVERT ONE WORD
            58            03     9A  0004    75 	MOVZBL	#3,R8			; SET UP COUNTER
                          55     D4  0007    76 	CLRL	R5			; RESET ACCUM.
            57            61     9A  0009    77 5$:	MOVZBL	(R1),R7			; GET THE CHARACTER
                          35     13  000C    78 	BEQL	22$			; IF EQL THEN DONE
            57            20     C2  000E    79 	SUBL	#32,R7			; SPACE OR LESS?
                          30     19  0011    80 	BLSS	22$			; IF LESS THEN DONE
                          35     13  0013    81 	BEQL	30$			; IF EQL THEN ADD ZERO
            57            10     C2  0015    82 	SUBL	#48-32,R7		; ADJUST FOR NUMBERS
                          11     1F  0018    83 	BLSSU	15$			; IF LSS THEN TRY $ OR .
            57            09     D1  001A    84 	CMPL	#9,R7			; IS IT A NUMBER?
                          28     1E  001D    85 	BGEQU	25$			; ADD DIRECTLY IF YES
            57            10     C2  001F    86 	SUBL	#64-48,R7		; GET CHARACTERS
                          1F     1F  0022    87 	BLSSU	22$			; IF LSS THEN ILLEGAL
            57            1A     D1  0024    88 	CMPL	#90-64,R7		; IN CHARACTER RANGE?
                          1A     1F  0027    89 	BLSSU	22$			; IF LSSU THEN ILLEGAL
                          1F     11  0029    90 	BRB	30$
                                     002B    91 ;
                                     002B    92 ; CHARACTER MUST BE DOT OR $
                                     002B    93 ;
            24            57     91  002B    94 15$:	CMPB	R7,#^A/$/		; DOLLAR?
                          0E     13  002E    95 	BEQL	20$			; IF EQL THEN CONTINUE
            2E            57     91  0030    96 	CMPB	R7,#^A/./		; DOT?
                          0E     12  0033    97 	BNEQ	22$			; IF NEQ THEN ILLEGAL CHARACTER
                          50     D5  0035    98 	TSTL	R0			; DOT LEGAL?
                          0A     13  0037    99 	BEQL	22$			; IF EQL THEN NO
RSXSUBROUTINES                                                   22-AUG-1978 05:12:32   VAX-11 MACRO X0.3-11               Page   3
V06.0           RSX$ASCIIR50 - CONVERT ASCII STRING TO RAD50                                                                     (2)

            57            1C     9A  0039   100 	MOVZBL	#28,R7			; SET DOT CODE
                          0C     11  003C   101 	BRB	30$			; AND CONTINUE
            57            1B     9A  003E   102 20$:	MOVZBL	#27,R7			; SET CODE FOR DOLLAR
                          07     11  0041   103 	BRB	30$			; CONTINUE
                          57     D4  0043   104 22$:	CLRL	R7			; CONVERT ILLEGAL CHARACTERS TO BLANK
                          05     11  0045   105 	BRB	35$			;
            57            1E     C0  0047   106 25$:	ADDL	#30,R7			; PLACE IN NUMERIC RANGE
                          51     D6  004A   107 30$:	INCL	R1			; POINT TO NEXT INPUT CHARACTER
            55            28     C4  004C   108 35$:	MULL	#40,R5			; CONVERT
            55            57     C0  004F   109 	ADDL	R7,R5			;
            B4            58     F5  0052   110 	SOBGTR	R8,5$			; CONTINUE
            84            55     B0  0055   111 	MOVW	R5,(R4)+		; INSERT CONVERTED WORD
                                 05  0058   112 	RSB
RSXSUBROUTINES                                                   22-AUG-1978 05:12:32   VAX-11 MACRO X0.3-11               Page   4
V06.0           CONVERT TASK NAME                                                                                                (3)

                                     0059   114 	.SBTTL	CONVERT TASK NAME
                                     0059   115 ;++
                                     0059   116 ; RSX$CVTNAME  -  CONVERT TASK NAME
                                     0059   117 ;
                                     0059   118 ; FUNCTIONAL DESCRIPTION:
                                     0059   119 ;
                                     0059   120 ; CONVERT A RAD50 TASK NAME TO ASCII AND PUT THE RESULTANT STRING
                                     0059   121 ; IN THE IMAGE SCRATCH AREA.
                                     0059   122 ;
                                     0059   123 ; INPUTS:
                                     0059   124 ;
                                     0059   125 ;	R5 = ADDRESS OF DPB+2
                                     0059   126 ;	R6 = CM IMAGE STACK POINTER
                                     0059   127 ;	R10 = IMAGE DATA BASE ADDRESS
                                     0059   128 ;	R11 = IMAGE HEADER ADDRESS
                                     0059   129 ;
                                     0059   130 ; OUTPUTS:
                                     0059   131 ;
                                     0059   132 ;	R7 = SIZE OF THE RESULTANT STRING
                                     0059   133 ;	R10,R10 ARE PRESERVED
                                     0059   134 ;--
                                     0059   135 RSX$CVTNAME::
            57         34 AA     9E  0059   136 	MOVAB	I_SCRATCH+12(R10),R7	; ADDRESS TARGET PLACE
         28 AA            57     D0  005D   137 	MOVL	R7,I_SCRATCH(R10)	; SET UP FOR SIZE CALC
         2C AA            57     D0  0061   138 	MOVL	R7,I_SCRATCH+4(R10)	; SET UP DESCRIPTOR
            54            55     D0  0065   139 	MOVL	R5,R4			; ADDRESS RAD50 BLOCK
                          0C     10  0068   140 	BSBB	RSX$R50CVT2		; CONVERT STRING
            57         28 AA     C3  006A   141 	SUBL3	I_SCRATCH(R10),R7,I_SCRATCH(R10); CALC SIZE
                       28 AA         006E       
                                 05  0070   142 	RSB				; AND RETURN
RSXSUBROUTINES                                                   22-AUG-1978 05:12:32   VAX-11 MACRO X0.3-11               Page   5
V06.0           CONVERT RAD50 TO ASCII                                                                                           (4)

                                     0071   144 	.SBTTL	CONVERT RAD50 TO ASCII
                                     0071   145 ;++
                                     0071   146 ; RSX$R50CVTN - CONVERT RAD50 TO ASCII
                                     0071   147 ;
                                     0071   148 ; FUNCTIONAL DESCRIPTION:
                                     0071   149 ;
                                     0071   150 ; THIS ROUTINE CONVERTS A VARRIABLE NUMBER OF WORDS OF RAD50 TO AN ASCII STRING.
                                     0071   151 ;
                                     0071   152 ; CALLING SEQUENCE:
                                     0071   153 ;
                                     0071   154 ;	BSBW	RSX$R50ASCII
                                     0071   155 ;
                                     0071   156 ;
                                     0071   157 ; INPUT PARAMETERS:
                                     0071   158 ;
                                     0071   159 ;	R4 = RAD50 BLOCK ADDRESS
                                     0071   160 ;	R7 = ADDRESS OF TARGET STRING
                                     0071   161 ;
                                     0071   162 ; OUTPUT PARAMETERS:
                                     0071   163 ;
                                     0071   164 ;	R4 = POINTER TO NEXT WORD TO CONVERT
                                     0071   165 ;	R7 = NEXT FREE BYTE IN TARGET STRING
                                     0071   166 ;
                                     0071   167 ; STRING IS IN STANDARD COUNT,TEXT FORMAT. BLANKS STOP THE CONVERTION.
                                     0071   168 ;--
                                     0071   169 RSX$R50CVT3::				; CONVERT THREE WORDS
            50            84     3C  0071   170 	MOVZWL	(R4)+,R0		; GET THE WORD
                          08     10  0074   171 	BSBB	CVT			; CONVERT A WORD
                                     0076   172 RSX$R50CVT2::				; CONVERT TWO WORDS
            50            84     3C  0076   173 	MOVZWL	(R4)+,R0		; GET WORD
                          03     10  0079   174 	BSBB	CVT			; CONVERT A WORD
                                     007B   175 RSX$R50CVT1::				; CONVERT ONE WORD
            50            84     3C  007B   176 	MOVZWL	(R4)+,R0		; GET THE WORD
                          51     D4  007E   177 CVT:	CLRL	R1			; SET HIGH HALF
            50            28     7B  0080   178 	EDIV	#40,R0,R0,-(SP)		; GET REMAINDER FOR EACH CHARACTER
            7E            50         0083       
            50            28     7B  0085   179 	EDIV	#40,R0,R0,-(SP)		;
            7E            50         0088       
            50            28     7B  008A   180 	EDIV	#40,R0,R0,-(SP)		;
            7E            50         008D       
            67            8E     F6  008F   181 	CVTLB	(SP)+,(R7)		; CONVERT FIRST CHARACTER
                          08     10  0092   182 	BSBB	50$			; 
            67            8E     F6  0094   183 	CVTLB	(SP)+,(R7)		; CONVERT SECOND CHARACTER
                          03     10  0097   184 	BSBB	50$			; 
            67            8E     F6  0099   185 	CVTLB	(SP)+,(R7)		; CONVERT THIRD CHARACTER
                          67     95  009C   186 50$:	TSTB	(R7)			; DONE?
                          14     13  009E   187 	BEQL	DONE			; IF EQL THEN YES
            67            1B     91  00A0   188 	CMPB	#27,(R7)		; LETTER?
                          09     1A  00A3   189 	BGTRU	60$			; IF EQL THEN YES
                          03     13  00A5   190 	BEQL	55$			; IF EQL THEN DOLLAR
            67            09     80  00A7   191 	ADDB	#9,(R7)			;
            67         C9 8F     80  00AA   192 55$:	ADDB	#-55,(R7)		;
            67            20     80  00AE   193 60$:	ADDB	#32,(R7)		;
            87            20     80  00B1   194 65$:	ADDB	#32,(R7)+		;
                                 05  00B4   195 DONE:	RSB				;
RSXSUBROUTINES                                                   22-AUG-1978 05:12:32   VAX-11 MACRO X0.3-11               Page   6
V06.0           MEMORY ALLOCATION SUBROUTINE                                                                                     (5)

                                     00B5   197 	.SBTTL	MEMORY ALLOCATION SUBROUTINE
                                     00B5   198 ;++
                                     00B5   199 ; RSX$ALLOCATE - ALLOCATE MEMORY FROM DYNAMIC STORAGE POOL
                                     00B5   200 ;
                                     00B5   201 ; FUNCTIONAL DESCRIPTION:
                                     00B5   202 ;
                                     00B5   203 ; THIS ROUTINE ALLOCATES CORE BLOCKS FROM THE PER IMAGE CORE POOL
                                     00B5   204 ; WHICH IS RESIDENT JUST BELOW THE USER STACK. IF THE REQUIRED MEMORY
                                     00B5   205 ; IS NOT AVAILABLE, THEN A PAGE IS REQUESTED,LINKED INTO THE LIST AND
                                     00B5   206 ; THE OPERATION RETRIED.
                                     00B5   207 ;
                                     00B5   208 ; INPUTS:
                                     00B5   209 ;
                                     00B5   210 ;	R1 = SIZE OF BLOCK TO ALLOCATE
                                     00B5   211 ;	R10 = ADDRESS OF THE IMAGE DATA BASE
                                     00B5   212 ;	R11 = ADDRESS OF THE IMAGE HEADER
                                     00B5   213 ;
                                     00B5   214 ; OUTPUTS:
                                     00B5   215 ;
                                     00B5   216 ;	R0 = ADDRESS OF THE BLOCK ALLOCATED
                                     00B5   217 ;	R1 = SIZE OF ALLOCATED BLOCK
                                     00B5   218 ;	R8 = ADDRESS OF THE IMAGE REGISTER SAVE AREA
                                     00B5   219 ;	R10 = ADDRESS IF THE IMAGE DATA BASE
                                     00B5   220 ;	R11 = ADDRESS OF THE IMAGE HEADER
                                     00B5   221 ;--
                                     00B5   222 RSX$ALLOCATE::				; ALLOCATE BLOCK
            51            07     C0  00B5   223 	ADDL	#7,R1			; ROUND BLOCK SIZE TO QUAD WORD
            51            07     CA  00B8   224 	BICL	#7,R1			;
            50       0000'CF     9E  00BB   225 	MOVAB	W^RSX$A_POOL,R0		; ADDRESS CORE POOL LIST HEAD
            52            50     D0  00C0   226 10$:	MOVL	R0,R2			; COPY CURRENT BLOCK ADDRESS
            50            62     D0  00C3   227 	MOVL	(R2),R0			; ADDRESS NEXT BLOCK
                          21     13  00C6   228 	BEQL	100$			; IF EQUAL THEN FAILURE TO ALLOCATE
         04 A0            51     D1  00C8   229 	CMPL	R1,4(R0)		; IS THE NEXT BLOCK LARGE ENOUGH?
                          F2     1A  00CC   230 	BGTRU	10$			; IF GTRU THEN NO
                          15     13  00CE   231 	BEQL	20$			; IF EQL THEN EXACT FIT
         04 A0            51     C2  00D0   232 	SUBL	R1,4(R0)		; CALC NEW BLOCK SIZE
            51            50     C0  00D4   233 	ADDL	R0,R1			; CALC ADDRESS OF NEW NEXT ENTRY
            61            60     D0  00D7   234 	MOVL	(R0),(R1)		; INSERT LINK WORD
         04 A1         04 A0     D0  00DA   235 	MOVL	4(R0),4(R1)		; INSERT SIZE
            60            51     D0  00DF   236 	MOVL	R1,(R0)			; INSERT LINK TO FREE BLOCK
            51            50     C2  00E2   237 	SUBL	R0,R1			; CALC ALLOCATED SIZE
            62            60     D0  00E5   238 20$:	MOVL	(R0),(R2)		; LINK TO LIST
                                 05  00E8   239 	RSB				; RETURN
                                     00E9   240 ;
                                     00E9   241 ; ALLOCATION FAILURE
                                     00E9   242 ;
                          0A     BB  00E9   243 100$:	PUSHR	#^M<R1,R3>		; SAVE NEEDED SIZE
                          7E     7C  00EB   244 	CLRQ	-(SP)
            52            5E     D0  00ED   245 	MOVL	SP,R2
                                     00F0   246 	$EXPREG_S	#2,(R2),,#0	; CREATE THE SPACE
            10            50     E9  00FF   247 	BLBC	R0,120$			; IF LOW CLEAR THEN FAILURE
            51       0400 8F     3C  0102   248 	MOVZWL	#1024,R1		; SET SIZE OF BLOCK
            50            62     D0  0107   249 	MOVL	(R2),R0			; ADDRESS BLOCK
                          10     10  010A   250 	BSBB	RSX$DEALLOCATE		; DEALLOCATE IT TO POOL
                          06     BA  010C   251 	POPR	#^M<R1,R2>		; REMOVE RETURN DATA
                          0A     BA  010E   252 	POPR	#^M<R1,R3>		; RESTORE SIZE
                          A3     11  0110   253 	BRB	RSX$ALLOCATE		; TRY AGAIN
RSXSUBROUTINES                                                   22-AUG-1978 05:12:32   VAX-11 MACRO X0.3-11               Page   7
V06.0           MEMORY ALLOCATION SUBROUTINE                                                                                     (5)

                                     0112   254 ;
                                     0112   255 ; FAILURE TO ALLOCATE ADDITIONAL SPACE
                                     0112   256 ;
                                     0112   257 120$:	$ABORT	#RSX$_INSFDYNMEM	; ABORT IMAGE - OUT OF SPACE
RSXSUBROUTINES                                                   22-AUG-1978 05:12:32   VAX-11 MACRO X0.3-11               Page   8
V06.0           DEALLOCATE MEMORY BLOCK                                                                                          (6)

                                     011C   259 	.SBTTL	DEALLOCATE MEMORY BLOCK
                                     011C   260 ;++
                                     011C   261 ; RSX$DEALLOCATE - DEALLOCATE MEMORY BLOCK TO CORE POOL
                                     011C   262 ;
                                     011C   263 ; FUNCTIONAL DESCRIPTION:
                                     011C   264 ;
                                     011C   265 ; THIS ROUTINE RETURNS ALLOCATED STORAGE TO THE PER IMAGE CORE POOL.
                                     011C   266 ;
                                     011C   267 ; INPUTS:
                                     011C   268 ;
                                     011C   269 ;	R0 = ADDRESS OF BLOCK TO RETURN
                                     011C   270 ;	R1 = SIZE OF BLOCK TO RETURN
                                     011C   271 ;	R8 = ADDRESS OF THE IMAGE REGISTER SAVE AREA
                                     011C   272 ;	R10 = ADDRESS OF THE IMAGE DATA BASE
                                     011C   273 ;	R11 = ADDRESS OF THE IMAGE HEADER
                                     011C   274 ;
                                     011C   275 ; OUTPUTS:
                                     011C   276 ;
                                     011C   277 ;	R8 = ADDRESS OF THE IMAGE REGISTER SAVE AREA
                                     011C   278 ;	R10 = ADDRESS OF THE IMAGE DATA BASE
                                     011C   279 ;	R11 = ADDRESS OF THE IMAGE HEADER
                                     011C   280 ;--
                                     011C   281 RSX$DEALLOCATE::			; DEALLOCATE MEMORY
            51            07     C0  011C   282 	ADDL	#7,R1			; ROUND BLOCK SIZE
            51            07     CA  011F   283 	BICL	#7,R1			;
            53       0000'CF     9E  0122   284 	MOVAB	W^RSX$A_POOL,R3		; ADDRESS LIST HEAD
            52            53     D0  0127   285 10$:	MOVL	R3,R2			; ADDRESS NEXT ENTRY
            53            62     D0  012A   286 	MOVL	(R2),R3			; COPY LINK WORD
                          05     13  012D   287 	BEQL	20$			; IF EQL THEN END OF LIST
            53            50     D1  012F   288 	CMPL	R0,R3			; DEALLOCATE HERE?
                          F3     1E  0132   289 	BGEQU	10$			; IF GEQU THEN NO
            60            53     D0  0134   290 20$:	MOVL	R3,(R0)			; ASSUME NO AGLOMERATION
            51            50     C1  0137   291 	ADDL3	R0,R1,-(SP)		; CALC END OF BLOCK ADDRESS
                          7E         013A       
            8E            53     D1  013B   292 	CMPL	R3,(SP)+		; AGLOMERATE?
                          06     12  013E   293 	BNEQ	30$			; IF NEQ THEN NO
            60            83     D0  0140   294 	MOVL	(R3)+,(R0)		; SAVE LINK TO NEXT
            51            63     C0  0143   295 	ADDL	(R3),R1			; CALC NEW SIZE
                          52     DD  0146   296 30$:	PUSHL	R2			; CALC ADDRESS OF BLOCK
            82            50     D0  0148   297 	MOVL	R0,(R2)+		; ASSUME NO AGLOMERATION
            6E            62     C0  014B   298 	ADDL	(R2),(SP)		; ADD IN SIZE
            8E            50     D1  014E   299 	CMPL	R0,(SP)+		; END EQUAL TO BLOCK RELEASED?
                          09     12  0151   300 	BNEQ	40$			; IF YES THEN DONE
            51            62     C0  0153   301 	ADDL	(R2),R1			; ACCUMULATE BLOCK SIZE
            72            60     D0  0156   302 	MOVL	(R0),-(R2)		; MOVE LINK TO PREVIOUS
            50            52     D0  0159   303 	MOVL	R2,R0			; ADDRESS NEW FREE BLOCK
         04 A0            51     D0  015C   304 40$:	MOVL	R1,4(R0)		; INSERT SIZE OF BLOCK
                                 05  0160   305 	RSB				; AND RETURN
RSXSUBROUTINES                                                   22-AUG-1978 05:12:32   VAX-11 MACRO X0.3-11               Page   9
V06.0           CONVERT RSX11M TIME DATA TO DELTA TIME                                                                           (7)

                                     0161   307 	.SBTTL	CONVERT RSX11M TIME DATA TO DELTA TIME
                                     0161   308 ;++
                                     0161   309 ; RSX$TIMEMAG - CONVERT RSX11M TIME DATA TO DELTA TIME
                                     0161   310 ;
                                     0161   311 ; FUNCTIONAL DESCRIPTION:
                                     0161   312 ;
                                     0161   313 ; THIS ROUTINE CONVERTS AN RSX11M TIME SPECIFICATION OF UNITS AND
                                     0161   314 ; MAGNITUDE TO A DELTA TIME QUAD WORD.
                                     0161   315 ;
                                     0161   316 ; INPUT:
                                     0161   317 ;
                                     0161   318 ;	R0 = TIME UNITS (1-4)
                                     0161   319 ;	R2 = TIME MAGNITUDE
                                     0161   320 ;	R10 = ADDRESS OF THE IMAGE DATA BASE
                                     0161   321 ;	R11 = ADDRESS OF THE IMAGE HEADER
                                     0161   322 ;
                                     0161   323 ; OUTPUTS:
                                     0161   324 ;
                                     0161   325 ;	R0,R1 = DELTA TIME QUAD WORD
                                     0161   326 ;	R2 = INDICATION OF SUCCESS (LOW SET IS SUCCESS)
                                     0161   327 ;
                                     0161   328 ;	R10,R11 ARE PRESERVED.
                                     0161   329 ;--
                                     0161   330 ;
                                     0161   331 ; LOCAL STORAGE
                                     0161   332 ;
                                 00000000   333 	.PSECT	RSXPURE,NOWRT,EXE,SHR,LONG,PIC
                                     0000   334 ;
                                     0000   335 ; TICKS PER UNIT TIME
                                     0000   336 ;
                           00000001  0000   337 TICKS:	.LONG	1			; TICKS PER SECOND
                           000003E8  0004   338 	.LONG	1000			; 1000 10,000'S IN A SECOND
                           0000EA60  0008   339 	.LONG	60*1000			; 60*1000 10,000'S IN A MIN.
                           0036EE80  000C   340 	.LONG	60*60*1000		; 3600*1000 10,000'S IN AN HOUR
                                     0010   341 ;
                                     0010   342 ; MAXIMUM VALUE OF MAGNITUDE PER UNIT
                                     0010   343 ;
                               8000  0010   344 MAX:	.WORD	1@15			; 15 BITS TICKS
                               8000  0012   345 	.WORD	1@15			; 15 BITS FOR SECOND
                               05A0  0014   346 	.WORD	60*24			; MINUTE
                               0018  0016   347 	.WORD	24			; HOUR
                                     0018   348  
                                 00000161   349 	.PSECT	RSXCODE,NOWRT
                                     0161   350  
                                     0161   351 RSX$TIMEMAG::				; CONVERT TIME TO DELTA TIME
            04            50     D1  0161   352 	CMPL	R0,#4			; UNITS IN RANGE?
                          1B     1A  0164   353 	BGTRU	30$			; IF GTRU THEN YES
       000E'CF40          52     B1  0166   354 	CMPW	R2,W^MAX-2[R0]		; IN RANGE?
                          13     1A  016C   355 	BGTRU	30$			; IF GTR THEN NO
            52       FFFC'CF40   C4  016E   356 	MULL	W^TICKS-4[R0],R2	; GET NUMBER OF 10000000 UNITS
            52   FFFFD8F0 8F     7A  0174   357 	EMUL	#-10000,R2,#0,R0	; GET QUAD VALUE
            50            00         017B       
            52            01     9A  017D   358 	MOVZBL	#1,R2			; SET SUCCESS
                                 05  0180   359 	RSB				; AND RETURN
                                     0181   360 ;
                                     0181   361 ; SET PARAM ERROR
                                     0181   362 ;
RSXSUBROUTINES                                                   22-AUG-1978 05:12:32   VAX-11 MACRO X0.3-11               Page  10
V06.0           CONVERT RSX11M TIME DATA TO DELTA TIME                                                                           (7)

                          52     D4  0181   363 30$:	CLRL	R2			; SET ERROR
                                 05  0183   364 	RSB				; AND RETURN
RSXSUBROUTINES                                                   22-AUG-1978 05:12:32   VAX-11 MACRO X0.3-11               Page  11
V06.0           RSX$RSXQIOERR - MAP VAX/VMS I/O STATUS TO RSX                                                                    (8)

                                     0184   366 	.SBTTL	RSX$RSXQIOERR - MAP VAX/VMS I/O STATUS TO RSX
                                     0184   367 ;++
                                     0184   368 ; RSX$RSXQIOERR - MAP VAX/VMS I/O STATUS TO RSX
                                     0184   369 ;
                                     0184   370 ; FUNCTIONAL DESCRIPTION:
                                     0184   371 ;
                                     0184   372 ; THIS ROUTINE MAPS A VAX/VMS I/O STATUS VALUE TO A RSX VALUE
                                     0184   373 ; BY TABLE LOOKUP.
                                     0184   374 ;
                                     0184   375 ; INPUTS:
                                     0184   376 ;
                                     0184   377 ;	R0 = VAX/VMS STATUS CODE
                                     0184   378 ;	R10 = ADDRESS OF THE IMAGE IMPURE DATA BASE
                                     0184   379 ;	R11 = ADDRESS OF THE IMAGE
                                     0184   380 ;
                                     0184   381 ; OUTPUTS:
                                     0184   382 ;
                                     0184   383 ;	R0 = VAX/VMS STATUS CODE
                                     0184   384 ;	R1 = RSX VALUE
                                     0184   385 ;
                                     0184   386 ;	R10,R11 ARE PRESERVED.
                                     0184   387 ;--
                                     0184   388 RSX$RSXQIOERR::				; MAP VAX/VMS TO RSX STATUS VALUE FOR QIO
            51            01     9A  0184   389 	MOVZBL	#1,R1			; ASSUME SUCCESS
            17            50     E8  0187   390 	BLBS	R0,20$			; DONE IF SUCCESS
            51       0000'CF     9E  018A   391 	MOVAB	W^RSX$A_RSXQIOERR,R1	; ADDRESS STATUS MAP TABLE
            81            50     B1  018F   392 10$:	CMPW	R0,(R1)+		; MATCH?
                          0A     13  0192   393 	BEQL	15$			; IF EQL THEN FOUND
                          81     B5  0194   394 	TSTW	(R1)+			; TABLE END?
                          F7     12  0196   395 	BNEQ	10$			; IF NEQ THEN NO
            51       FFFC 8F     32  0198   396 	CVTWL	#IE.VER,R1		; SET DEFAULT ERROR
                                 05  019D   397 	RSB				;
                                     019E   398 ;
                                     019E   399 ; RETURN MATCHED VALUE
                                     019E   400 ;
            51            61     32  019E   401 15$:	CVTWL	(R1),R1			; PICK UP RSX VALUE
                                 05  01A1   402 20$:	RSB				; RETURN
                                     01A2   403 ;
                                     01A2   404 	.END
RSXSUBROUTINES                                                   22-AUG-1978 05:12:32   VAX-11 MACRO X0.3-11               Page  12
SYMBOL TABLE                                                                                                                     (8)

$$MSG          = 00000000            H.ISP            00000010            IE.ILL         = FFFFFFD6            
...GBL         = 00000000            H.LUN            0000003E            IE.ISQ         = FFFFFFC3            
ACBC_CTLRCAST  = 00000002            H.NLUN           0000003C            IE.LCK         = FFFFFFE5            
ACBC_FLOATAST  = 00000003            H.NML            00000031            IE.MOD         = FFFFFFEB            
ACBC_PWRAST    = 00000000            H.ODVA           00000012            IE.NBF         = FFFFFFD9            
ACBC_RCVAST    = 00000001            H.ODVL           00000014            IE.NBK         = FFFFFFD7            
ACBV_INPROG    = 00000001            H.OVLY           0000002C            IE.NDR         = FFFFFFB8            
ACBV_PERM      = 00000000            H.PFVA           0000001A            IE.NFI         = FFFFFFC4            
ACBV_TYPE      = 00000008            H.RCVA           0000001E            IE.NFW         = FFFFFFBB            
ACB_FLAGS        0000000C            H.RRVA           00000032            IE.NLK         = FFFFFFB1            
ACB_LINK         00000000            H.SPRI           00000030            IE.NLN         = FFFFFFDB            
ACB_UPC          0000000A            H.TKVA           00000016            IE.NNC         = FFFFFFB3            
ACB_UPRM         00000008            H.TKVL           00000018            IE.NNL         = FFFFFFB2            
ADR_HIGHLIM      00000004            H.VEXT           0000002E            IE.NNN         = FFFFFFBC            
ADR_LOWLIM       00000000            H.WND            00000024            IE.NOD         = FFFFFFE9            
ADR_SIZE         00000008            IE.2DV         = FFFFFFD0            IE.NSF         = FFFFFFE6            
AP_NAME          00000004            IE.ABO         = FFFFFFF1            IE.NST         = FFFFFFB0            
AST_PARAM        00000004            IE.ALC         = FFFFFFAC            IE.OFL         = FFFFFFBF            
AST_PC           00000010            IE.ALN         = FFFFFFDE            IE.ONP         = FFFFFFFB            
AST_PSL          00000014            IE.AST         = FFFFFFB0            IE.OVR         = FFFFFFEE            
AST_R0           00000008            IE.BAD         = FFFFFFFF            IE.PES         = FFFFFFAD            
AST_R1           0000000C            IE.BBE         = FFFFFFC8            IE.PRI         = FFFFFFF0            
BIT...         = 0006809C            IE.BCC         = FFFFFFBE            IE.RAC         = FFFFFFD4            
CVT              0000007E R     05   IE.BDI         = FFFFFFCC            IE.RAT         = FFFFFFD3            
C_CANONPS      = 83C00000            IE.BDR         = FFFFFFCE            IE.RBG         = FFFFFFD8            
C_RCVDSTR      = 44564352            IE.BDV         = FFFFFFC9            IE.RCN         = FFFFFFD2            
DONE             000000B4 R     05   IE.BHD         = FFFFFFC0            IE.RER         = FFFFFFE0            
FCB_ATTRIBS      0000007C            IE.BLB         = FFFFFFBA            IE.RNM         = FFFFFFCD            
FCB_FIB          0000004C            IE.BLK         = FFFFFFEC            IE.RSU         = FFFFFFEF            
FCB_FID          00000000            IE.BNM         = FFFFFFCA            IE.SNC         = FFFFFFDD            
FCB_FNAME        00000014            IE.BTF         = FFFFFFB4            IE.SPC         = FFFFFFFA            
FCB_FNAMEDESC    0000000C            IE.BTP         = FFFFFFD5            IE.SQC         = FFFFFFDC            
FCB_FNB          00000002            IE.BVR         = FFFFFFC1            IE.SRE         = FFFFFFF2            
FCB_PC           00000078            IE.BYT         = FFFFFFED            IE.STK         = FFFFFFC6            
FCB_RESULT       00000030            IE.CKS         = FFFFFFE2            IE.TMM         = FFFFFFB9            
FCB_RESULTDESC   00000004            IE.CLO         = FFFFFFDA            IE.TMO         = FFFFFFB6            
FCB_SIZE         000000B4            IE.CNR         = FFFFFFB7            IE.ULK         = FFFFFFAB            
FP_AP            00000008            IE.CON         = FFFFFFEA            IE.VER         = FFFFFFFC            
FP_FP            0000000C            IE.DAA         = FFFFFFF8            IE.WAC         = FFFFFFE3            
FP_PC            00000010            IE.DAO         = FFFFFFF3            IE.WAT         = FFFFFFE1            
FP_PSL           00000004            IE.DFU         = FFFFFFE8            IE.WCK         = FFFFFFAA            
FP_REGISTERS     00000014            IE.DNA         = FFFFFFF9            IE.WER         = FFFFFFDF            
GBL...         = 00000000            IE.DNR         = FFFFFFFD            IE.WLK         = FFFFFFF4            
H.CSP            00000000            IE.DUN         = FFFFFFF7            IS.BV          = 00000005            
H.CUIC           00000008            IE.DUP         = FFFFFFC7            IS.CC          = 00000301            
H.DSW            00000026            IE.EOF         = FFFFFFF6            IS.CR          = 00000D01            
H.DUIC           0000000A            IE.EOT         = FFFFFFC2            IS.EOT         = 00000401            
H.EFLM           00000004            IE.EOV         = FFFFFFF5            IS.ESC         = 00001B01            
H.EFSV           00000020            IE.EXP         = FFFFFFB5            IS.ESQ         = 00009B01            
H.FCS            00000028            IE.FEX         = FFFFFFCF            IS.PES         = 00008001            
H.FORT           0000002A            IE.FHE         = FFFFFFC5            IS.PND         = 00000000            
H.FPSA           00000022            IE.FLN         = FFFFFFAF            IS.RDD         = 00000002            
H.FPVA           0000001C            IE.FOP         = FFFFFFCB            IS.SUC         = 00000001            
H.GARD           0000003A            IE.HFU         = FFFFFFE4            IS.TAB         = 00000901            
H.HDLN           00000002            IE.IES         = FFFFFFAE            IS.TMO         = 00000002            
H.IPC            0000000E            IE.IFC         = FFFFFFFE            I_ADR0           000000FC            
H.IPS            0000000C            IE.IFU         = FFFFFFE7            I_ASCIINAME      00000140            
RSXSUBROUTINES                                                   22-AUG-1978 05:12:32   VAX-11 MACRO X0.3-11               Page  13
SYMBOL TABLE                                                                                                                     (8)

I_ASTPOOL        000000D0            LUTC_TAPE      = 00000003            RSX$_NONRSXEMT = 0006801C            
I_ASTQUEUE       000000C8            LUTC_TRM       = 00000001            RSX$_NOPMD     = 00068332            
I_BAILOUTFP      00000188            LUTV_CTRLC     = 00000002            RSX$_NOSUCHDEV = 00068322            
I_CMDROUT        000000E8            LUTV_CTRLO     = 00000000            RSX$_NOTSKIMG  = 00068064            
I_CURAST         00000198            LUTV_PRM       = 00000003            RSX$_ODDADDR   = 00068034            
I_DEBVEC         00000190            LUT_CHAN         0000000C            RSX$_PMD       = 0006832A            
I_DEBVECL        00000192            LUT_CHAR         00000012            RSX$_RCVMBXSIZ = 0000012C            
I_FCBPOOL        000000D8            LUT_CTRLC        00000032            RSX$_REGMSG    = 0006808C            
I_FCC            000001B4            LUT_FLAGS        0000000A            RSX$_RESERVED  = 00068004            
I_FLOATA0        000001C0            LUT_INFONAME     0000002E            RSX$_TBIT      = 0006803C            
I_FLOATA1        000001C8            LUT_INFOUNIT     00000030            RSX$_TRAP      = 00068024            
I_FLOATA2        000001D0            LUT_LINK         00000000            RSX$_VERIFYCMD = 00068648            
I_FLOATA3        000001D8            LUT_REALNAME     0000001E            SV_ASTLVL        00000004            
I_FLOATA4        000001E0            LUT_REF          00000008            SV_DCL           00000002            
I_FLOATA5        000001E8            LUT_RSXNAME      00000010            SV_FLOATAST      00000009            
I_FLOATADR       000001B0            LUT_SIZE         00000036            SV_NOAST         00000003            
I_FLOATAST       000001A4            LUT_TYPE         00000016            SV_PENDWAIT      00000005            
I_FLOATCSR       000001A8            MAX              00000010 R     06   SV_PWRAST        00000008            
I_FLOATERR       000001AC            PSL_CC         = 00000000            SV_RCVAST        00000007            
I_FLOATTMP       000001B8            PSL_CM         = 0000001F            SV_RESTORE       00000000            
I_GARD           000000EC            PSL_FPD        = 0000001B            SV_TRANSLATE     00000001            
I_HIGHEFN        0000016C            PSL_FU         = 00000006            SV_WAIT          00000006            
I_HIGHSIZE       000000F4            PSL_TBIT       = 00000004            SYS$EXPREG       ********   X   05   
I_IMAGEVBN       000000F8            QIOV_FILES     = 00000000            TICKS            00000000 R     06   
I_INISIZE        000000F0            QIO_FLAGS        0000001A            W.BATT           00000006            
I_LENGTH         000001F0            QIO_IOSB         0000000E            W.BFPD           0000000C            
I_LOGNAME        000000E0            QIO_LUT          00000016            W.BHVR           00000004            
I_LUT            00000168            QIO_SECONDBLK    0000001C            W.BLGH           00000010            
I_NLUN           00000164            QIO_SIZE         00000020            W.BLPD           0000000E            
I_PC             00000020            RSX$ALLOCATE     000000B5 RG    05   W.BLVR           00000002            
I_PPFINDEX       00000162            RSX$ASCR501      00000004 RG    05   W.BNPD           0000000D            
I_PROCNAME       0000014C            RSX$ASCR502      00000002 RG    05   W.BOFF           0000000A            
I_PS             00000024            RSX$ASCR503      00000000 RG    05   W.BPCB           00000000            
I_PWRAST         000001A0            RSX$A_POOL       ********   X   05   W.BSIZ           00000008            
I_R0             00000000            RSX$A_RSXQIOERR  ********   X   05   
I_R1             00000004            RSX$CVTNAME      00000059 RG    05   
I_R2             00000008            RSX$C_SUBSYSTEM= 00000006            
I_R3             0000000C            RSX$DEALLOCATE   0000011C RG    05   
I_R4             00000010            RSX$INTERNEXIT   ********   X   05   
I_R5             00000014            RSX$R50CVT1      0000007B RG    05   
I_R6             00000018            RSX$R50CVT2      00000076 RG    05   
I_RAD50NAME      00000148            RSX$R50CVT3      00000071 RG    05   
I_RCVAST         0000019C            RSX$RSXQIOERR    00000184 RG    05   
I_RCVMAIL        00000160            RSX$TIMEMAG      00000161 RG    05   
I_RUNFLAGS       0000018C            RSX$_ACCVIO    = 00068044            
I_SCRATCH        00000028            RSX$_BADLIBREF = 0006806C            
I_SSTVEC         00000194            RSX$_BADSTACK  = 0006804C            
I_SSTVECL        00000196            RSX$_BREAK     = 0006800C            
I_STATE          00000170            RSX$_EXITSTATUS= 00068640            
I_TYPE           0000001C            RSX$_EXTERNABRT= 0006805C            
I_UIC            0000013C            RSX$_ILLINST   = 0006802C            
I_WAIT           00000178            RSX$_IMAGETERM = 00068084            
I_WAITSAVE       00000180            RSX$_INSFDYNMEM= 00068054            
LUTC_CR        = 00000005            RSX$_IOT       = 00068014            
LUTC_DISK      = 00000002            RSX$_LIBNOTFND = 00068074            
LUTC_LP        = 00000004            RSX$_LOADERROR = 0006807C            
LUTC_RMS       = 00000000            RSX$_NOCOMM    = 00068094            
RSXSUBROUTINES                                                   22-AUG-1978 05:12:32   VAX-11 MACRO X0.3-11               Page  14
PROGRAM SECTION SYNOPSIS                                                                                                         (8)



PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
..ABS.           00000042      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            00000000      03     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
RSXDEF           000001F4      04     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
RSXCODE          000001A2      05       PIC   USR   CON   REL   LCL   SHR   EXE   RD  NOWRT BYTE  
RSXPURE          00000018      06       PIC   USR   CON   REL   LCL   SHR   EXE   RD  NOWRT LONG  


THERE WERE NO ERRORS OR WARNINGS.
17918. BYTES LEFT IN FREE MEMORY POOL.
20. BYTES OF RECLAIMED MEMORY.
OBJ$:RSXSUBROU,LIS$:RSXSUBROU/-SP=EXECML$/ML,LIB$:R/ML,SRC$:RSXSUBROU
21 MLB DIR RDS - 424 GETS TO DEFINE 16 MACROS. 14 INTER. FILE WRITES. 
