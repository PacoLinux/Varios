
; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:05	DBB3:[TRACE.SRC]TBKBAS.B32;3					Page 1
; Digital Equipment Corporation
;
;	0001	MODULE TBKBAS (	IDENT = '000017') =
;	0002	BEGIN
;	0003	
;	0004	! Copyright (C) 1978
;	0005	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0006	!
;	0007	! This software is furnished under a license for use only on a
;	0008	! single computer system and may be copied only with the inclusion
;	0009	! of the above copyright notice. This software, or any
;	0010	! other copies thereof, may not be provided or otherwise made
;	0011	! available to any other person except for use on such system
;	0012	! and to one who agrees to these license terms. Title to and
;	0013	! ownership of the software shall at all times remain in DEC.
;	0014	!
;	0015	! The information in this software is subject to change without
;	0016	! notice and should not be construed as a commitment by Digital
;	0017	! Equipment Corporation.
;	0018	!
;	0019	! DEC assumes no responsibility for the use or reliability of
;	0020	! its software on equipment which is not supplied by DEC.
;	0021	!
;	0022	! FACILITY:	DEBUG (DBG)
;	0023	!
;	0024	!++
;	0025	! FUNCTIONAL DESCRIPTION:
;	0026	!	Does TRACEback when a program causes an exception of 
;	0027	!	sufficiently high severity level and the exception
;	0028	!	is not fielded by anyone else (namely by itself of
;	0029	!	by DEBUG).
;	0030	!
;	0031	! Version:	17
;	0032	!
;	0033	! History:
;	0034	!	Author:
;	0035	!		Carol Peters, 11 January 1978 : Version 01
;	0036	!
;	0037	!	Modified by:
;	0038	!		Dale Roedger, 15 June 1978: Version 17
;	0039	!
;	0040	! Revision history:
;	0041	
;	0042	!	02	17-jan-78	KGP	-Changed call parameters, and
;	0043	!					 added code to do the traceback
;	0044	!					 in non-symbolic form.
;	0045	!	03	18-jan-78	KGP	-Exception name is printed using
;	0046	!					 system message formatter
;	0047	!	04	19-JAN-78	KGP	-Output is now properly formatted.
;	0048	!	05	26-jan-78	KGP	-Now TRACEBACK does not $EXIT
;	0049	!					 under any circumstances.  This is
;	0050	!					 so that we can SS$_RESIGNAL
;	0051	!					 the original exception so that someone
;	0052	!					 else (the 'catch-all' handler) has
;	0053	!					 to ultimately decide what to do 
;	0054	!					 about it.
;	0055	!	06	22-feb-78	KGP	-Output is to SYS$..., not DBG$...

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:05	DBB3:[TRACE.SRC]TBKBAS.B32;3					Page 1-1
; Digital Equipment Corporation
;
;	0056	!					 We put out a separate message for
;	0057	!					 "traceback follows...".
;	0058	!	07	24-feb-78	KGP	-We always return the exception name
;	0059	!					 now so that the EXIT/CONTINUE
;	0060	!					 decision is made elsewhere.
;	0061	!					-Some diddling to make the severity
;	0062	!					 level of the TRACEBACK message the
;	0063	!					 same as the level of the exception.
;	0064	!	08	24-feb-78	KGP	-Formal parameter is now signal array
;	0065	!					 address rather than exception name
;	0066	!					 so we can PUT_MESSAGE rather than
;	0067	!					 doing all that ourselves.
;	0068	!	09	28-feb-78	KGP	-Changed all error returns in TRACE
;	0069	!					 to be EXITs.  Now, if TRACE returns
;	0070	!					 at all to the assembly-language TRACE
;	0071	!					 code, all must have gone well.
;	0072	!					-Added code to ensure that we don't
;	0073	!					 try to 'trace' an overwritten stack.
;	0074	!					-We don't re-map the symbol table
;	0075	!					 on successive TRACEbacks.
;	0076	!					-We now set up our output based on how
;	0077	!					 PUTMSG did it since it looks after
;	0078	!					 [not]creating the SYS$OUTPUT/SYS$ERROR
;	0079	!					 files, etc.
;	0080	!	10	01-mar-78	KGP	-Took out all initialization of
;	0081	!					 FABs/RABs, and we now don't do OPEN or
;	0082	!					 CONNECT.  We let PUTMSG setup everything.
;	0083	!	11	2-mar-78	KGP	-Beginning exception_type for
;	0084	!					 FTN PC correlation is now decided
;	0085	!					 in BAS (is no longer local to DPC)
;	0086	!	12	7-mar-78	KGP	-Exception_type is always forced to
;	0087	!					 TRAP_EXC after the first stack
;	0088	!					 frame symbolization.
;	0089	!					-We now call TBK$PUTMSG to put out
;	0090	!					 error messages.
;	0091	!	13	8-mar-78	KGP	-FIND_DST now returns an indication of
;	0092	!					 whether the traceback will be
;	0093	!					 symbolic or not.
;	0094	!					-All of TRACE is now separate from
;	0095	!					 DEBUG.  It has its own REQUIRE files.
;	0096	!	14	13-mar-78	KGP	-Took out fake messages now that
;	0097	!					 TRACEMSG is installed into the system.
;	0098	!					-We now subtract 2 from the given signal
;	0099	!					 arg count field so that PUTMSG doesn't
;	0100	!					 try to print messages that don't exist.
;	0101	!	15	27-mar-78	KGP	-added IS_EXCEPTION so that we can now
;	0102	!					 start off TBK$GL_EXC_TYPE correctly.
;	0103	!					-TBK$PUTMSG changed to TBK$FAKE_MSG, and
;	0104	!					 DEBUG's DBG$PUTMSG added, changed slightly,
;	0105	!					 and renamed TBK$PUT_MSG.
;	0106	!	16	26-APR-78	DAR	Modified require and library directives
;	0107	!					for native mode.
;	0108	!	17	15-JUN-78	DAR	Changed all DBG$ symbols to TBK$.
;	0109	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:05	DBB3:[TRACE.SRC]TBKBAS.B32;3					Page 2
; Digital Equipment Corporation
;
;	0110	! TABLE OF CONTENTS
;	0111	!
;	0112	FORWARD ROUTINE
;	0113		IS_EXCEPTION,			! See if a given exception name
;	0114						! is TRAP_EXC or FAULT_EXC type.
;	0115		TBK$DO_TRACEB;			! traceback user program after error
;	0116	
;	0117	!
;	0118	! REQUIRE FILES:
;	0119	!
;	0120	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0121	
;	0122	REQUIRE 'SRC$:TBKPCT.REQ';
;	0134	REQUIRE 'SRC$:TBKRST.REQ';
;	1223	REQUIRE 'SRC$:TBKGEN.REQ';
;	1290	REQUIRE 'SRC$:TBKSER.REQ';
;	1350	REQUIRE 'LIB$:TRACEMSG.REQ';
;	1528	
;	1529	EXTERNAL
;	1530		TBK$GL_EXC_TYPE,		! Initial FAULT/TRAP type for PC correlation.
;	1531		TBK$MODULE_CS : CS_POINTER,
;	1532		TBK$ROUTINE_CS : CS_POINTER,
;	1533		TBK$GL_LINE,
;	1534		TBK$REL_PC,
;	1535		TBK$MODULE_DST : REF DST_RECORD,
;	1536	
;	1537		tbk$gl_outprab: $RAB_DECL;		! RAB FOR 'OUTPUT'
;	1538	
;	1539	EXTERNAL ROUTINE
;	1540		tbk$fake_msg : NOVALUE,		! write out fake traceback messages.
;	1541		tbk$put_msg,			! write out system-generated messages.
;	1542		tbk$fao_put,			! Format into output buffer.
;	1543		tbk$out_put : NOVALUE,		! Write out the output buffer.
;	1544		TBK$IO_SETUP,			! Set up for PUTMSG-type I/O.
;	1545		TBK$SYMBOLIZE : NOVALUE,
;	1546		tbk$find_dst;			! finds and maps in the DST for the image
;	1547	
;	1548	!
;	1549	! Diagnositic output control
;	1550	!
;	1551	LITERAL
;	1552		TBK_BAS1	= 0,		! print out input parameters
;	1553		TBK_BAS2	= 0,		! List off the entire DST.
;	1554		TBK_BAS3	= 0,		! Output during stack unwinding
;	1555		TBK_BAS4	= 0;		! Error messages.
;	1556	
;	1557	%IF TBK_BAS2
;     L 1558	%THEN
;     U 1559	FORWARD ROUTINE
;     U 1560		pr_cs : novalue,
;     U 1561		LIST_DST;
;     U 1562	
;     U 1563	EXTERNAL ROUTINE
;     U 1564		tbk$get_nxt_dst;		! Make successive DSTs available.
;     U 1565	%FI

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:05	DBB3:[TRACE.SRC]TBKBAS.B32;3					Page 2-1
; Digital Equipment Corporation
;
;	1566	
;	1567	MACRO
;	1568		CFP$L_HANDLER	= 0, 0, 32, 0%,
;	1569		CFP$L_OLD_FP	= 12, 0, 32, 0%,
;	1570		CFP$L_RETURN_PC	= 16, 0, 32, 0%;

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:05	DBB3:[TRACE.SRC]TBKBAS.B32;3					Page 3
; Digital Equipment Corporation
;
;	1571	GLOBAL ROUTINE tbk$do_traceb (file_name,
;	1572					img_header_blk,
;	1573					symtab_sec_bnds,
;	1574					signal_array,
;	1575					first_fp,
;	1576					current_fp,
;	1577					current_pc) =
;	1578	
;	1579	!++
;	1580	! Functional description:
;	1581	!	Call PUTMSG to output the reason why TRACE was called.
;	1582	!	Then maps the DST into P0 space and used it so
;	1583	!	give a symbolic stack dump of where the program
;	1584	!	was when it 'faulted'.  
;	1585	!	We then return leaving ourselves and the DST mapped
;	1586	!	in so that on subsequent invocations of TRACE we can
;	1587	!	avoid the re-mapping overhead.
;	1588	!
;	1589	!	All output is to SYS$ERROR and SYS$OUTPUT.
;	1590	!
;	1591	! Formal parameters:
;	1592	!	file_name	- a counted string to the file specification of
;	1593	!			  the image file.
;	1594	!	img_header_blk	- address of a byte block containing the image
;	1595	!			  header data needed to find DST and GST data for
;	1596	!			  the image.
;	1597	!	symtab_sec_bnds	-address of a 2 longword vector (in the bootstrap)
;	1598	!			 where the symbol table bounds are stored so that
;	1599	!			 we don't need to map in the DST on successive TRACEbacks.
;	1600	!	signal_array	-address of the 'signal array' generated for the
;	1601	!			 exception that causes TRACEback.
;	1602	!	first_fp	-FP of first frame NOT to be traced.
;	1603	!			 (i.e. last frame we look at)
;	1604	!	current_fp	- current value of user FP
;	1605	!	current_pc	- current value of user PC
;	1606	!
;	1607	! Implicit inputs:
;	1608	!	PUTMSG creates a process logical name (SYS$PUTMSG), 
;	1609	!	the translation of which returns an encoding
;	1610	!	of the ISI numbers for SYS$ERROR and SYS$OUTPUT.
;	1611	!	We stuff these ISIs into our own RABs so that
;	1612	!	we don't worry about the SYS$ERROR/SYS$OUTPUT distinction
;	1613	!	and so that we avoid opening the channels on successive
;	1614	!	invocations.
;	1615	!
;	1616	! Output parameters:
;	1617	!	none
;	1618	!
;	1619	! Implicit outputs:
;	1620	!	The 2-longword vector in the bootstrap which points to the
;	1621	!	beginning and ending of the symbol table gets filled in
;	1622	!	with the mapped addresses of where we map the symbol table.
;	1623	!
;	1624	! Routine value:
;	1625	!	Either an EXIT is done, or this routine returns

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:05	DBB3:[TRACE.SRC]TBKBAS.B32;3					Page 3-1
; Digital Equipment Corporation
;
;	1626	!	the exception name which caused TRACEback in the first place.
;	1627	!
;	1628	! Side effects:
;	1629	!	The DST is mapped into P0 space. A number of lines are output to
;	1630	!	logical device SYS$OUTPUT.  If SYS$ERROR is different from
;	1631	!	SYS$OUTPUT, the same output goes to SYS$ERROR.
;	1632	!
;	1633	!--
;	1634	
;	1635		BEGIN
;	1636		MAP
;	1637			symtab_sec_bnds : ref vector[,long],
;	1638			signal_array : ref vector[,long],
;	1639			FILE_NAME : REF VECTOR[,BYTE];
;	1640		MAP
;	1641			CURRENT_FP : REF BLOCK[,BYTE],
;	1642			CURRENT_PC : REF BLOCK[,BYTE];
;	1643		LOCAL
;	1644			symbolic,		! Flag.  1 => symbolic traceback,
;	1645						!  	 0 => non-symbolic.
;	1646			exceptn_name,
;	1647			blank : CS_POINTER,
;	1648			status;
;	1649	
;	1650		!++
;	1651		! Report on the cause of the exception, and
;	1652		! let PUTMSG open our output channel(s) for us.
;	1653		! If this fails, we must punt.
;	1654		!--
;	1655	
;	1656		status = tbk$put_msg(.signal_array);
;	1657	
;	1658		IF NOT .status
;	1659		THEN
;	1660			BEGIN
;	1661			$EXIT( code = .status);
;	1662			END;
;	1663	
;	1664		! Set up to do I/O by relying on the fact that
;	1665		! PUTMSG has already sorted out the problems
;	1666		! of where SYS$OUTPUT and SYS$ERROR actually go to.
;	1667	
;	1668		tbk$io_setup();
;	1669	
;	1670	%if tbk_bas1
;     L 1671	%then
;     U 1672		$fao_tt_out ('tracing back - we got this far...');
;     U 1673		$fao_tt_out('rab_isi has value !XW',.tbk$gl_outprab[rab$w_isi]);
;     U 1674	
;     U 1675		! Print out the input parameters.
;     U 1676	
;     U 1677		$FAO_TT_OUT('file_name is !UB: !AC',.file_name[0],.file_name);
;     U 1678		$FAO_TT_OUT('image header block starts at !XL',.img_header_blk);
;     U 1679		$fao_tt_out('current FP=!XL, PC=!XL, first FP=!XL',
;     U 1680			.current_fp,.current_pc,.first_fp);

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:05	DBB3:[TRACE.SRC]TBKBAS.B32;3					Page 3-2
; Digital Equipment Corporation
;
;     U 1681		$fao_tt_out('signal array is at !XL',.signal_array);
;     U 1682		$FAO_TT_OUT('exception name is !XL',.signal_array[1]);
;     U 1683	%FI
;	1684	
;	1685		! Try to locate and map in the DST.
;	1686		! If this doesn't work we
;	1687		! produce a non-symbolic TRACEback.
;	1688	
;	1689		symbolic = tbk$find_dst (.file_name, .img_header_blk, .symtab_sec_bnds);
;	1690	
;	1691		! Pick the exception name out of the signal array
;	1692		! so that we then use its severity to print the
;	1693		! standard TRACEback message.  This is done so that
;	1694		! the levels of the first message and the "trace follows..."
;	1695		! message is the same - for consistency and so that
;	1696		! the two messages go to the same channel(s).
;	1697		! The message reflects the [non-]symbolic indication passed
;	1698		! back by FIND_DST.
;	1699	
;	1700		exceptn_name = .signal_array[1];
;	1701	
;	1702		! Pick up the message number and force the
;	1703		! severity level to match.
;	1704	
;	1705		symbolic = (if .symbolic then TBK$_TRACEBACK else TBK$_STACKDUMP);
;	1706		symbolic = .symbolic + .exceptn_name<0,3>;
;	1707	
;	1708		! Put out the message to SYS$ERROR and SYS$OUTPUT.
;	1709	
;	1710		tbk$fake_msg(.symbolic,0);
;	1711	
;	1712	%IF TBK_BAS2
;     L 1713	%THEN
;     U 1714		tbk$fao_put( uplit( %ascic '(%DEBUG-!XL-TRACEBACK, symbolic stack dump follows)'),.symbolic);
;     U 1715		tbk$out_put();
;     U 1716		LIST_DST();
;     U 1717	%FI
;	1718		! See if there are any active call frames.
;	1719		! We can't TRACE anything if either the stack has
;	1720		! been overwritten or if the image has returned
;	1721		! to the bootstrap.
;	1722	
;	1723		IF( .FIRST_FP LEQA .CURRENT_FP )
;	1724		THEN
;	1725			tbk$fake_msg(TBK$_NOCALLS,0)
;	1726		ELSE
;	1727			BEGIN
;	1728	
;	1729			! Print the standard TRACE heading.
;	1730	
;	1731			tbk$fao_put( uplit( %ascic 
;	1732				'!/module name     routine name     line   relative PC  absolute PC!/'));
;	1733			tbk$out_put();
;	1734			END;
;	1735	

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:05	DBB3:[TRACE.SRC]TBKBAS.B32;3					Page 3-3
; Digital Equipment Corporation
;
;	1736		! For FORTRAN PC correlation, we need to set
;	1737		! TBK$GL_EXC_TYPE to either FAULT_EXC or TRAP_EXC
;	1738		! exception type so that DPC can come up with the best
;	1739		! %LINE symbolization for the PC.  We assume the latter
;	1740		! and let IS_EXCEPTION cover the exceptions.
;	1741	  
;	1742		TBK$GL_EXC_TYPE = TRAP_EXC;
;	1743		IF( IS_EXCEPTION(.EXCEPTN_NAME) )
;	1744		THEN
;	1745			TBK$GL_EXC_TYPE = FAULT_EXC;
;	1746	
;	1747		! Loop printing out each active frame until we have
;	1748		! 'unwound' to the frame set up by the DEBUG bootstrap
;	1749		! when the user image was called in the first place.
;	1750	
;	1751		BLANK = UPLIT( %ASCIC ' ' );
;	1752	
;	1753		WHILE( .FIRST_FP GTRA .CURRENT_FP )
;	1754			DO
;	1755			BEGIN
;	1756	
;	1757	%IF TBK_BAS3
;     L 1758	%THEN
;     U 1759		$fao_tt_out('FP = !XL, PC = !XL',.CURRENT_FP,.CURRENT_PC);
;     U 1760	%FI
;	1761			TBK$SYMBOLIZE(.CURRENT_PC);
;	1762			IF( .TBK$MODULE_CS NEQ 0 )
;	1763			THEN
;	1764				tbk$fao_put(uplit(%ascic '!15AC '),.TBK$MODULE_CS)
;	1765			ELSE
;	1766				tbk$fao_put(uplit(%ascic '!15AC '),.blank);
;	1767			IF( .TBK$ROUTINE_CS NEQ 0 )
;	1768			THEN
;	1769				tbk$fao_put(uplit(%ascic '!15AC '),.TBK$routine_CS)
;	1770			ELSE
;	1771				tbk$fao_put(uplit(%ascic '!15AC '),.blank);
;	1772			IF( .TBK$GL_LINE NEQ 0 )
;	1773			THEN
;	1774				tbk$fao_put(uplit(%ascic '!5UL   '),.TBK$GL_LINE)
;	1775			ELSE
;	1776				tbk$fao_put(uplit(%ascic '!8AC'),.blank);
;	1777			tbk$fao_put(uplit(%ascic '   !XL'),.TBK$REL_PC);
;	1778	 		tbk$fao_put(uplit(%ascic '     !XL'),.CURRENT_PC);
;	1779	
;	1780			! Cause the current buffer to be output.
;	1781	
;	1782			tbk$out_put();
;	1783	
;	1784			! For FORTRAN pc-to-line symbolizations, it never
;	1785			! makes sense for any frame other than the first
;	1786			! to be of 'match' type FAULT_EXC.
;	1787	
;	1788			TBK$GL_EXC_TYPE = TRAP_EXC;
;	1789	
;	1790			! Set FP and PC to that of previous frame, making

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:05	DBB3:[TRACE.SRC]TBKBAS.B32;3					Page 3-4
; Digital Equipment Corporation
;
;	1791			! sure not to get fooled by an overwritten stack.
;	1792			! i.e. insist that the previous frame is 'above'
;	1793			! the supposed current one.
;	1794	
;	1795			IF( NOT .current_fp LSSA .current_fp[ CFP$L_OLD_FP ] )
;	1796			THEN
;	1797				BEGIN
;	1798				tbk$fake_msg(tbk$_badstack,0);
;	1799				EXITLOOP;
;	1800				END;
;	1801	
;	1802			current_pc = .current_fp[ cfp$l_return_pc ];
;	1803			CURRENT_FP = .CURRENT_FP[ CFP$L_OLD_FP ];
;	1804			END;
;	1805	
;	1806		! Only OK return point.
;	1807		! We return the exception name we were passed
;	1808		! so that the TRACE startup routine can
;	1809		! decide what to do about it.
;	1810	
;	1811		RETURN(.EXCEPTN_NAME);
;	1812		END;


							    .TITLE  TBKBAS
							    .IDENT  \000017\

							    .PSECT  TBK$PLIT,NOWRT,  SHR,  PIC,0

					      00000 P.AAA:  .ASCII  \D!/module name     routine name     line   relative PC\  ;
					      00036 	    .ASCII  \  absolute PC!/\<0><0><0>				      ;
					      00048 P.AAB:  .ASCII  <1>\ \<0><0>					      ;
					      0004C P.AAC:  .ASCII  <6>\!15AC \<0>					      ;
					      00054 P.AAD:  .ASCII  <6>\!15AC \<0>					      ;
					      0005C P.AAE:  .ASCII  <6>\!15AC \<0>					      ;
					      00064 P.AAF:  .ASCII  <6>\!15AC \<0>					      ;
					      0006C P.AAG:  .ASCII  <7>\!5UL   \					      ;
					      00074 P.AAH:  .ASCII  <4>\!8AC\<0><0><0>					      ;
					      0007C P.AAI:  .ASCII  <6>\   !XL\<0>					      ;
					      00084 P.AAJ:  .ASCII  <8>\     !XL\<0><0><0>				      ;

							    .GLOBL  TBK$_RST_BEGIN, TBK$FAO_OUT, TBK$GL_EXC_TYPE, TBK$MODULE_CS
							    .GLOBL  TBK$ROUTINE_CS, TBK$GL_LINE, TBK$REL_PC, TBK$MODULE_DST
							    .GLOBL  TBK$GL_OUTPRAB, TBK$FAKE_MSG, TBK$PUT_MSG, TBK$FAO_PUT
							    .GLOBL  TBK$OUT_PUT, TBK$IO_SETUP, TBK$SYMBOLIZE, TBK$FIND_DST
							    .GLOBL  SYS$EXIT

							    .PSECT  TBK$CODE,NOWRT,  SHR,  PIC,0

					 0F1C 00000 	    .ENTRY  TBK$DO_TRACEB, Save R2,R3,R4,R8,R9,R10,R11		      ; 1571
		         58	0000G  CF  9E 00002 	    MOVAB   TBK$GL_EXC_TYPE, R8					      ;
		         59	0000G  CF  9E 00007 	    MOVAB   TBK$FAKE_MSG, R9					      ;
		         5A	0000G  CF  9E 0000C 	    MOVAB   TBK$FAO_PUT, R10					      ;
		         5B	0000'  CF  9E 00011 	    MOVAB   P.AAA, R11						      ;
		         52	  10   AC  D0 00016 	    MOVL    SIGNAL_ARRAY, R2					      ; 1656

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:05	DBB3:[TRACE.SRC]TBKBAS.B32;3					Page 3-5
; Digital Equipment Corporation
;
				       52  DD 0001A 	    PUSHL   R2							      ;
		  0000G  CF	       01  FB 0001C 	    CALLS   #1, TBK$PUT_MSG					      ;
		         09	       50  E8 00021 	    BLBS    STATUS, 1$						      ; 1658
				       50  DD 00024 	    PUSHL   STATUS						      ; 1661
	      00000000G  9F	       01  FB 00026 	    CALLS   #1, @#SYS$EXIT					      ;
		  0000G  CF	       00  FB 0002D 1$:     CALLS   #0, TBK$IO_SETUP					      ; 1668
		         7E	  08   AC  7D 00032 	    MOVQ    IMG_HEADER_BLK, -(SP)				      ; 1689
				  04   AC  DD 00036 	    PUSHL   FILE_NAME						      ;
		  0000G  CF	       03  FB 00039 	    CALLS   #3, TBK$FIND_DST					      ;
		         53	  04   A2  D0 0003E 	    MOVL    4(R2), EXCEPTN_NAME					      ; 1700
		         09	       50  E9 00042 	    BLBC    SYMBOLIC, 2$					      ; 1705
		         50 00098198   8F  D0 00045 	    MOVL    #623000, SYMBOLIC					      ;
				       07  11 0004C 	    BRB     3$							      ;
		         50 000981A0   8F  D0 0004E 2$:     MOVL    #623008, SYMBOLIC					      ;
	   53	         03	       00  EF 00055 3$:     EXTZV   #0, #3, EXCEPTN_NAME, R1				      ; 1706
				       51     00059									      ;
		         50	       51  C0 0005A 	    ADDL2   R1, SYMBOLIC					      ;
				       7E  D4 0005D 	    CLRL    -(SP)						      ; 1710
				       50  DD 0005F 	    PUSHL   SYMBOLIC						      ;
		         69	       02  FB 00061 	    CALLS   #2, TBK$FAKE_MSG					      ;
		    18   AC	  14   AC  D1 00064 	    CMPL    FIRST_FP, CURRENT_FP				      ; 1723
				       0D  1A 00069 	    BGTRU   4$							      ;
				       7E  D4 0006B 	    CLRL    -(SP)						      ; 1725
			    0009802B   8F  DD 0006D 	    PUSHL   #622635						      ;
		         69	       02  FB 00073 	    CALLS   #2, TBK$FAKE_MSG					      ;
				       0A  11 00076 	    BRB     5$							      ; 1723
				       5B  DD 00078 4$:     PUSHL   R11							      ; 1731
		         6A	       01  FB 0007A 	    CALLS   #1, TBK$FAO_PUT					      ;
		  0000G  CF	       00  FB 0007D 	    CALLS   #0, TBK$OUT_PUT					      ; 1733
		         68	       01  D0 00082 5$:     MOVL    #1, TBK$GL_EXC_TYPE					      ; 1742
				       53  DD 00085 	    PUSHL   EXCEPTN_NAME					      ; 1743
		  0000V  CF	       01  FB 00087 	    CALLS   #1, IS_EXCEPTION					      ;
		         03	       50  E9 0008C 	    BLBC    R0, 6$						      ;
		         68	       02  D0 0008F 	    MOVL    #2, TBK$GL_EXC_TYPE					      ; 1745
		         54	  48   AB  9E 00092 6$:     MOVAB   P.AAB, BLANK					      ; 1751
		         52	  18   AC  D0 00096 7$:     MOVL    CURRENT_FP, R2					      ; 1753
		         52	  14   AC  D1 0009A 	    CMPL    FIRST_FP, R2					      ;
				       77  1B 0009E 	    BLEQU   14$							      ;
				  1C   AC  DD 000A0 	    PUSHL   CURRENT_PC						      ; 1761
		  0000G  CF	       01  FB 000A3 	    CALLS   #1, TBK$SYMBOLIZE					      ;
		         50	0000G  CF  D0 000A8 	    MOVL    TBK$MODULE_CS, R0					      ; 1762
				       07  13 000AD 	    BEQL    8$							      ;
				       50  DD 000AF 	    PUSHL   R0							      ; 1764
				  4C   AB  9F 000B1 	    PUSHAB  P.AAC						      ;
				       05  11 000B4 	    BRB     9$							      ;
				       54  DD 000B6 8$:     PUSHL   BLANK						      ; 1766
				  54   AB  9F 000B8 	    PUSHAB  P.AAD						      ;
		         6A	       02  FB 000BB 9$:     CALLS   #2, TBK$FAO_PUT					      ;
		         50	0000G  CF  D0 000BE 	    MOVL    TBK$ROUTINE_CS, R0					      ; 1767
				       07  13 000C3 	    BEQL    10$							      ;
				       50  DD 000C5 	    PUSHL   R0							      ; 1769
				  5C   AB  9F 000C7 	    PUSHAB  P.AAE						      ;
				       05  11 000CA 	    BRB     11$							      ;
				       54  DD 000CC 10$:    PUSHL   BLANK						      ; 1771
				  64   AB  9F 000CE 	    PUSHAB  P.AAF						      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:05	DBB3:[TRACE.SRC]TBKBAS.B32;3					Page 3-6
; Digital Equipment Corporation
;
		         6A	       02  FB 000D1 11$:    CALLS   #2, TBK$FAO_PUT					      ;
		         50	0000G  CF  D0 000D4 	    MOVL    TBK$GL_LINE, R0					      ; 1772
				       07  13 000D9 	    BEQL    12$							      ;
				       50  DD 000DB 	    PUSHL   R0							      ; 1774
				  6C   AB  9F 000DD 	    PUSHAB  P.AAG						      ;
				       05  11 000E0 	    BRB     13$							      ;
				       54  DD 000E2 12$:    PUSHL   BLANK						      ; 1776
				  74   AB  9F 000E4 	    PUSHAB  P.AAH						      ;
		         6A	       02  FB 000E7 13$:    CALLS   #2, TBK$FAO_PUT					      ;
				0000G  CF  DD 000EA 	    PUSHL   TBK$REL_PC						      ; 1777
				  7C   AB  9F 000EE 	    PUSHAB  P.AAI						      ;
		         6A	       02  FB 000F1 	    CALLS   #2, TBK$FAO_PUT					      ;
				  1C   AC  DD 000F4 	    PUSHL   CURRENT_PC						      ; 1778
				0084   CB  9F 000F7 	    PUSHAB  P.AAJ						      ;
		         6A	       02  FB 000FB 	    CALLS   #2, TBK$FAO_PUT					      ;
		  0000G  CF	       00  FB 000FE 	    CALLS   #0, TBK$OUT_PUT					      ; 1782
		         68	       01  D0 00103 	    MOVL    #1, TBK$GL_EXC_TYPE					      ; 1788
		    0C   A2	       52  D1 00106 	    CMPL    R2, 12(R2)						      ; 1795
				       0D  1F 0010A 	    BLSSU   15$							      ;
				       7E  D4 0010C 	    CLRL    -(SP)						      ; 1798
			    000984BC   8F  DD 0010E 	    PUSHL   #623804						      ;
		         69	       02  FB 00114 	    CALLS   #2, TBK$FAKE_MSG					      ;
				       08  11 00117 14$:    BRB     16$							      ; 1799
		    18   AC	  0C   A2  7D 00119 15$:    MOVQ    12(R2), CURRENT_FP					      ; 1803
				     FF75  31 0011E 	    BRW     7$							      ; 1753
		         50	       53  D0 00121 16$:    MOVL    EXCEPTN_NAME, R0					      ; 1811
					   04 00124 	    RET     							      ; 1571

; Routine Size:  293 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:05	DBB3:[TRACE.SRC]TBKBAS.B32;3					Page 4
; Digital Equipment Corporation
;
;	1813	ROUTINE IS_EXCEPTION( EXC_NAME ) =
;	1814	
;	1815	!++
;	1816	! Functional Description:
;	1817	!
;	1818	!	Given an exception name - the longword which encodes the
;	1819	!	type, etc, of an exception - deduce if this exception is
;	1820	!	the so-called FAULT_EXC type.  This is for the PC_TO_LINE
;	1821	!	translation - we have to know if the PC is on the instruction
;	1822	!	which caused the exception, or if it is on the next instruction.
;	1823	!
;	1824	!	The answer to the question is simply whether
;	1825	!	the given EXC_NAME is in our table of exceptions.  The only
;	1826	!	trickery is that this routine makes sure only to look at
;	1827	!	the part of the longword which encodes the error code - and
;	1828	!	not at the rest of it since that may change.
;	1829	!
;	1830	! Formal Parameters:
;	1831	!
;	1832	!	EXC_NAME - the longword system-defined exception name.
;	1833	!
;	1834	! Routine Value:
;	1835	!
;	1836	!	TRUE or FALSE.  See above.
;	1837	!
;	1838	! Side Effects:
;	1839	!	None.
;	1840	!--
;	1841	
;	1842	BEGIN
;	1843		MAP
;	1844			EXC_NAME	: BLOCK [ %UPVAL, BYTE ];
;	1845		BIND
;	1846				! The 0-ended list of exception codes.
;	1847	
;	1848			EXCEPTION_LIST 	= UPLIT WORD (
;	1849						SS$_ACCVIO,
;	1850						SS$_NOTRAN,
;	1851						SS$_RADRMOD,
;	1852						SS$_ROPRAND,
;	1853						SS$_OPCDEC,
;	1854						SS$_OPCCUS,
;	1855						SS$_BREAK,
;	1856						0    )
;	1857					: VECTOR[, WORD ];
;	1858	
;	1859		! Simply loop thru the list checking each one,
;	1860		! ending when the 0 one is encountered.
;	1861	
;	1862		INCR I FROM 0
;	1863			DO
;	1864			BEGIN
;	1865			LOCAL
;	1866				LIST_ENTRY : BLOCK [ %UPVAL, BYTE ];
;	1867	

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:05	DBB3:[TRACE.SRC]TBKBAS.B32;3					Page 4-1
; Digital Equipment Corporation
;
;	1868			IF( (LIST_ENTRY = .EXCEPTION_LIST[ .I ]) EQL 0 )
;	1869			THEN
;	1870				EXITLOOP;
;	1871	
;	1872			IF( .EXC_NAME[ STS$V_CODE ] EQL .LIST_ENTRY[ STS$V_CODE ] )
;	1873			THEN
;	1874				RETURN(TRUE);
;	1875			END;
;	1876	
;	1877		! Entry not found in the exception list.
;	1878	
;	1879		RETURN(FALSE);
;	1880	END;



							    .PSECT  TBK$PLIT,NOWRT,  SHR,  PIC,0

					      00090 P.AAK:  .WORD   12, 1577, 1100, 1108, 1084, 1076, 1044, 0		      ;

						    EXCEPTION_LIST=	P.AAK


							    .PSECT  TBK$CODE,NOWRT,  SHR,  PIC,0

					 0004 00125 IS_EXCEPTION:
							    .WORD   Save R2						      ; 1813
				       50  D4 00127 	    CLRL    I							      ; 1862
		         51	0000'CF40  3C 00129 1$:     MOVZWL  EXCEPTION_LIST[I], LIST_ENTRY			      ; 1868
				       19  13 0012F 	    BEQL    3$							      ;
	   51	         0C	       03  EF 00131 	    EXTZV   #3, #12, LIST_ENTRY, R2				      ; 1872
				       52     00135									      ;
      04   AC	         0C	       03  ED 00136 	    CMPZV   #3, #12, EXC_NAME, R2				      ;
				       52     0013B									      ;
				       04  12 0013C 	    BNEQ    2$							      ;
		         50	       01  D0 0013E 	    MOVL    #1, R0						      ; 1874
					   04 00141 	    RET     							      ;
	   DF	         50 7FFFFFFF   8F  F3 00142 2$:     AOBLEQ  #2147483647, I, 1$					      ; 1862
				       50  D4 0014A 3$:     CLRL    R0							      ; 1879
					   04 0014C 	    RET     							      ; 1813

; Routine Size:  40 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:05	DBB3:[TRACE.SRC]TBKBAS.B32;3					Page 5
; Digital Equipment Corporation
;
;	1881	%IF TBK_BAS2
;     L 1882	%THEN
;     U 1883	
;     U 1884	GLOBAL ROUTINE LIST_DST =
;     U 1885	
;     U 1886	!++
;     U 1887	!--
;     U 1888	BEGIN
;     U 1889		LOCAL
;     U 1890			nt_count,
;     U 1891			DST_REC_ID,
;     U 1892			DST_RECRD : REF DST_RECORD;
;     U 1893		$FAO_TT_OUT('listing off the DST');
;     U 1894		WHILE( (DST_RECRD = TBK$GET_NXT_DST( DST_REC_ID )) NEQ 0 )
;     U 1895			DO
;     U 1896			BEGIN
;     U 1897	
;     U 1898			! Process each record depending on its DST type.
;     U 1899	%IF TBK_BAS2
;     U 1900	%THEN
;     U 1901			! For diagnostic purposes we list out the entire record.
;     U 1902	
;     U 1903			IF( .DST_RECRD[DSTR_TYPE] EQL DSC$K_DTYPE_MOD)
;     U 1904			THEN
;     U 1905				BEGIN
;     U 1906				$FAO_TT_OUT('MC for module ');
;     U 1907				pr_cs(dst_recrd[dstr_name]);
;     U 1908				end;
;     U 1909			$FAO_TT_OUT( 'DST Rec Id=!XL, is at !XL, for !UD bytes.',
;     U 1910				.DST_REC_ID, .DST_RECRD, .DST_RECRD[ DSTR_SIZE ] );
;     U 1911	
;     U 1912			! Dump the reocrd in bytes.
;     U 1913	
;     U 1914			INCR I FROM 0 TO .DST_RECRD[ DSTR_SIZE ]
;     U 1915				DO
;     U 1916				$FAO_TT_OUT('!XB ',.DST_RECRD[ .I, 0, 8, 0 ] );
;     U 1917	
;     U 1918	%FI
;     U 1919	
;     U 1920			CASE .DST_RECRD[ DSTR_TYPE ] FROM DST_DST_LOWEST TO DST_DST_HIGHEST OF
;     U 1921	
;     U 1922			    SET
;     U 1923	
;     U 1924			    [DSC$K_DTYPE_MOD]:	! Module Begin Record.
;     U 1925	
;     U 1926				BEGIN
;     U 1927				LOCAL
;     U 1928					NEW_PTR : REF MC_RECORD;
;     U 1929				END;
;     U 1930	
;     U 1931			    [DSC$K_DTYPE_EOM]:	! Module End Record.
;     U 1932	
;     U 1933				BEGIN
;     U 1934	
;     U 1935				END;

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:05	DBB3:[TRACE.SRC]TBKBAS.B32;3					Page 5-1
; Digital Equipment Corporation
;
;     U 1936	
;     U 1937			    [DSC$K_DTYPE_RTN,		! Routine DSTs.
;     U 1938			     DSC$K_DTYPE_SLB]:		! Labels in FORTRAN and BLISS.
;     U 1939	
;     U 1940				BEGIN
;     U 1941	
;     U 1942				! Just tally up the needed statistics
;     U 1943				! so that we can build the other data 
;     U 1944				! structures later.
;     U 1945	
;     U 1946				NT_COUNT = .NT_COUNT +1;
;     U 1947				END;
;     U 1948	
;     U 1949			    [DSC$K_DTYPE_EOR,	! BLISS-only End-of-Routine.
;     U 1950			     DSC$K_DTYPE_FLD]:	! BLISS-only FIELD records.
;     U 1951	
;     U 1952				! We can safely ignore these for now.
;     U 1953				;
;     U 1954	
;     U 1955			    [DSC$K_DTYPE_LBL]:		! Label or Literal DSTs. (MARS only)
;     U 1956	
;     U 1957				BEGIN
;     U 1958	
;     U 1959				NT_COUNT = .NT_COUNT +1;
;     U 1960				END;
;     U 1961	
;     U 1962			    [DSC$K_DTYPE_PCT]:	! Psect DSTs.
;     U 1963				BEGIN
;     U 1964				BIND
;     U 1965				    PSECT_LENGTH
;     U 1966						=	! Pick up the field length, which
;     U 1967							! is after the NAME so must be
;     U 1968							! dynamically located.
;     U 1969	
;     U 1970						(.DST_RECRD[ DSTR_NAME ]	! The symbol-name count,
;     U 1971						+ DST_RECRD[ DSTR_NAME ]	!  plus its address,
;     U 1972						+ 1 ) : LONG;			!  addresses the LENGTH.
;     U 1973	
;     U 1974	%IF tbk_bas2
;     U 1975	%THEN
;     U 1976				$FAO_TT_OUT('PSECT begins: !XL, ends !XL',
;     U 1977					.DST_RECRD[ DSTR_VALUE ],
;     U 1978					.DST_RECRD[DSTR_VALUE]+.PSECT_LENGTH+1 );
;     U 1979	%FI
;     U 1980				nt_count = .nt_count +1;
;     U 1981				END;
;     U 1982		
;     U 1983			    [INRANGE, OUTRANGE]:
;     U 1984	
;     U 1985				BEGIN
;     U 1986	
;     U 1987				! The only reason for not making the "SRM types"
;     U 1988				! part of the above CASE is because of the huge
;     U 1989				! case table which gets generated otherwise.
;     U 1990	

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:05	DBB3:[TRACE.SRC]TBKBAS.B32;3					Page 5-2
; Digital Equipment Corporation
;
;     U 1991				IF( .DST_RECRD[ DSTR_TYPE ] EQL DSC$K_DTYPE_Z )
;     U 1992				THEN
;     U 1993					BEGIN
;     U 1994	
;     U 1995					! BLISS type ZERO records.
;     U 1996	%IF TBK_bas2
;     U 1997	%then
;     U 1998					$FAO_TT_OUT('ignoring Z record');
;     U 1999	%FI
;     U 2000					! Whatever symbol this is, it contributes
;     U 2001					! a name, for sure, and either a literal
;     U 2002					! or a static.  We assume the worst!
;     U 2003	
;     U 2004					NT_COUNT = .NT_COUNT +1;
;     U 2005					END
;     U 2006				ELSE
;     U 2007				IF( .DST_RECRD[ DSTR_TYPE ] LEQ DST_TYP_HIGHEST )
;     U 2008				THEN
;     U 2009					BEGIN
;     U 2010	
;     U 2011					! These types are candidates for
;     U 2012					! the LVT and NT tables only.
;     U 2013	
;     U 2014					NT_COUNT = .NT_COUNT +1;
;     U 2015					END
;     U 2016				ELSE
;     U 2017					BEGIN
;     U 2018	
;     U 2019					! Probably an error in the DST data.
;     U 2020					$FAO_TT_OUT('Unknown DST record type: !XB',
;     U 2021						.DST_RECRD[ DSTR_TYPE ] );
;     U 2022					END;
;     U 2023	
;     U 2024				END;
;     U 2025			    TES;
;     U 2026	
;     U 2027			! Go back and process the next DST record.
;     U 2028	
;     U 2029			END;
;     U 2030	
;     U 2031		$FAO_TT_OUT('DST listed OK');
;     U 2032		RETURN( 1 );
;     U 2033	END;
;     U 2034	
;     U 2035	%FI

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:05	DBB3:[TRACE.SRC]TBKBAS.B32;3					Page 6
; Digital Equipment Corporation
;
;	2036	%IF TBK_BAS2
;     L 2037	%THEN
;     U 2038		! This routine is only used by DEBUGging output routines.
;     U 2039	
;     U 2040	ROUTINE PR_CS( ADDR )  : NOVALUE =
;     U 2041	
;     U 2042	
;     U 2043	!++
;     U 2044	! Functional Description:
;     U 2045	!	Print out a counted string in an
;     U 2046	!	unambiguous way for debugging purposes.
;     U 2047	!--
;     U 2048	
;     U 2049	BEGIN
;     U 2050		MAP
;     U 2051			ADDR : REF VECTOR[,BYTE];
;     U 2052	
;     U 2053		! Don't get fooled!
;     U 2054	
;     U 2055		IF( .ADDR EQL 0 )
;     U 2056		THEN
;     U 2057			$FAO_TT_OUT( '**** PR_CS AT 0 **** ' )
;     U 2058		ELSE
;     U 2059			$FAO_TT_OUT( 'Name(!UB.): "!AC".  ' , .ADDR[0], ADDR[0] );
;     U 2060	END;
;     U 2061	
;     U 2062	%FI

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:05	DBB3:[TRACE.SRC]TBKBAS.B32;3					Page 7
; Digital Equipment Corporation
;
;	2063	END
;	2064	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  TBK$PLIT       	   160  NOWRT,  RD ,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(0)
;  TBK$CODE       	   333  NOWRT,  RD ,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(0)
;  $CODE$         	     0  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        14         0       228





; Size:		333 code + 160 data bytes
; Run Time:	00:16.6
; Elapsed Time:	00:21.0
; Memory Used:	335 pages
; Compilation Complete
