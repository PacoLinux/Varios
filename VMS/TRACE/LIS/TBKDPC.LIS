
; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:27	DBB3:[TRACE.SRC]TBKDPC.B32;3					Page 1
; Digital Equipment Corporation
;
;	0001	MODULE TBKDPC ( IDENT = '000013' ) =
;	0002	BEGIN
;	0003	
;	0004	!
;	0005	!			  COPYRIGHT (c) 1977 BY
;	0006	!	      DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;	0007	!
;	0008	! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
;	0009	! ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
;	0010	! INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
;	0011	! COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
;	0012	! OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
;	0013	! TRANSFERRED.
;	0014	!
;	0015	! THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
;	0016	! AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
;	0017	! CORPORATION.
;	0018	!
;	0019	! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
;	0020	! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;	0021	!
;	0022	
;	0023	!++
;	0024	! FACILITY:
;	0025	!	TRACEBACK
;	0026	!
;	0027	! ABSTRACT:
;	0028	!	analyzes PC correlation tables for DEBUG and for symbolic
;	0029	!	traceback.
;	0030	!
;	0031	! ENVIRONMENT:	VAX/VMS, user mode, interrupts disabled.
;	0032	!
;	0033	! AUTHOR:	Carol Peters, CREATION DATE:	16 September 1977
;	0034	!
;	0035	! Version	13
;	0036	!
;	0037	! MODIFIED BY:
;	0038	!		Dale Roedger, 15 June 1978: Version 13
;	0039	!
;	0040	! 02	05-10-77	CP	SIGNAL errors.
;	0041	! 03	18-11-77	CP	Add diagnostics. Correct swapped arguments
;	0042	!				in call to proc_pc_cmd. Add argument to
;	0043	!				pc_to_line for routine start address.
;	0044	! 04	22-11-77	CP	Change the third argument to pc_to_line
;	0045	!				to be the address of a location that holds
;	0046	!				the exception type.
;	0047	! 05	8-dec-77	KGP	-Changed PC_TO_LINE so that rather than requiring
;	0048	!				 that the DST be 'positioned' for its search
;	0049	!				 thru for PC correlation records, that it instead
;	0050	!				 does this itself.
;	0051	! 06	29-12-77	CP	Add routine get_line_no. Determines 
;	0052	!				whether a trace trap has occurred at the
;	0053	!				beginning of a FORTRAN line number.
;	0054	! 07	4-jan-78	KGP	-Fixed bug in GET_LINE_NO which was that
;	0055	!				 it assumed that pathnames always went

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:27	DBB3:[TRACE.SRC]TBKDPC.B32;3					Page 1-1
; Digital Equipment Corporation
;
;	0056	!				 thru atleast 1 ROUTINE name.
;	0057	! 08	19-jan-78	KGP	-Converted this module for use with TRACEBACK.
;	0058	! 09	8-mar-78	KGP	-Since TRACE and DEBUG are now completely
;	0059	!				 separate, all REQUIRE file names have changed.
;	0060	! 10	14-mar-78	KGP	-Ripped out most of PC_TO_LINE as it was
;	0061	!				 faulty and unnecessary.
;	0062	! 11	27-mar-78	KGP	-Renamed TBK$PUTMSG to TBK$FAKE_MSG
;	0063	! 12	26-APR-78	DAR	Modified require and library directives for native
;	0064	!				build.
;	0065	! 13	15-JUN-78	DAR	Changed all DBG$ symbols to TBK$.
;	0066	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:27	DBB3:[TRACE.SRC]TBKDPC.B32;3					Page 2
; Digital Equipment Corporation
;
;	0067	! TABLE OF CONTENTS:
;	0068	!
;	0069	
;	0070	FORWARD ROUTINE
;	0071		TBK$PC_TO_LINE,			! matches a PC to a line number
;	0072		PROC_PC_CMD,			! processes a string of PC correlation commands
;	0073		GET_NEXT_DPC;			! gets the next PC correlation record
;	0074	
;	0075	!
;	0076	! INCLUDE FILES:
;	0077	!
;	0078	
;	0079	LIBRARY 'SYS$LIBRARY:STARLET.L32';
;	0080	
;	0081	REQUIRE 'SRC$:TBKPCT.REQ';
;	0093	REQUIRE 'SRC$:TBKGEN.REQ';
;	0160	REQUIRE 'SRC$:TBKRST.REQ';
;	1249	REQUIRE 'SRC$:TBKSER.REQ';
;	1309	REQUIRE 'LIB$:TRACEMSG.REQ';
;	1487	
;	1488	!
;	1489	! MACROS:
;	1490	!
;	1491	
;	1492	MACRO
;	1493		first_dpc_datum	= 2, 0, 32, 0%,		! passes count and type
;	1494		current_byte	= 0, 0, 8, 1%,		! current top of record
;	1495		next_uns_byte	= 1, 0, 8, 0%,		! byte argument to command
;	1496		next_uns_word	= 1, 0, 16, 0%,		! word argument to command
;	1497		add_one_byte	= 1, 0, 8, 0%,		! increment for top of record
;	1498		add_two_bytes	= 2, 0, 8, 0%,		! ditto
;	1499		add_three_bytes	= 3, 0, 8, 0%;		! ditto
;	1500	
;	1501	!
;	1502	! EQUATED SYMBOLS:
;	1503	!
;	1504	
;	1505	LITERAL
;	1506	
;	1507	! these are temporary
;	1508		tbk$_noinfo	= 0,			! no information on line numbers
;	1509		tbk$_not_a_line	= 2,			! this is not a line number
;	1510	! end of temporary
;	1511	
;	1512		word_delta	= 1,			! delta-PC command of length word
;	1513		byte_temp_incr	= 2,			! increment current line by next byte
;	1514		word_temp_incr	= 3,			! increment current line by next word
;	1515		byte_perm_incr	= 4,			! increment line increment by next byte
;	1516		word_perm_incr	= 5,			! increment line increment by next word
;	1517		incr_to_1	= 6,			! line increment reverts to 1
;	1518	
;	1519		dbg_dpc		= 0,			! debugging aid
;	1520		dbg_dpc1	= 0,			! ditto
;	1521		tbk_dpc2	= 0;			! Diagnostic output in PC_TO_LINE
;	1522	

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:27	DBB3:[TRACE.SRC]TBKDPC.B32;3					Page 2-1
; Digital Equipment Corporation
;
;	1523	!
;	1524	! OWN STORAGE:
;	1525	!
;	1526	
;	1527	!
;	1528	! EXTERNAL REFERENCES:
;	1529	!
;	1530	
;	1531	EXTERNAL ROUTINE
;	1532		TBK$fake_MSG,
;	1533		tbk$get_dst_rec,			! gets a DST record from a DST pointer.
;	1534		tbk$get_nxt_dst,			! gets next DST record in sequence
;	1535		tbk$POSITON_DST;			! Set up the DST 'next' sequence.

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:27	DBB3:[TRACE.SRC]TBKDPC.B32;3					Page 3
; Digital Equipment Corporation
;
;	1536	GLOBAL ROUTINE tbk$pc_to_line (match_pc,
;	1537					RTN_DST_PTR,
;	1538				       excep_type_ptr,
;	1539				       line_no_ptr
;	1540				       ) =	! translates PC to line number
;	1541	
;	1542	!++
;	1543	! FUNCTIONAL DESCRIPTION:
;	1544	!	This routine matches an absolute PC address to a line number
;	1545	!	in a FORTRAN routine.  MATCH_PC is the given PC,
;	1546	!	and the location pointed to by LINE_NO_PTR
;	1547	!	is written as a result of delta-PC table analysis.
;	1548	!
;	1549	!	Each PC correlation record that exists for a single routine
;	1550	!	is sequentially analyzed until the desired PC is seen.
;	1551	!
;	1552	!	If a match cannot be made because and end of routine record or
;	1553	!	an invalid record is recognized, then this routine returns
;	1554	!	FALSE.
;	1555	!
;	1556	! FORMAL PARAMETERS:
;	1557	!
;	1558	!	match_pc_ptr	- a pointer to the PC to be matched or zero.
;	1559	!	RTN_DST_PTR	- DST of record for enclosing routine.
;	1560	!	excep_type_ptr	- pointer to type of exception, where
;	1561	!				zero, means irrelevant;
;	1562	!			  	one, means trap type exception,
;	1563	!			  	two, means fault or abort type exception.
;	1564	!	line_no_ptr	- a pointer to the line number to be matched
;	1565	!			  or zero
;	1566	!
;	1567	! IMPLICIT INPUTS:
;	1568	!
;	1569	!	The DST is already positioned to the record AFTER
;	1570	!	the ROUTINE record we want to look at line numbers for.
;	1571	!
;	1572	! IMPLICIT OUTPUTS:
;	1573	!
;	1574	!	the routine get_nxt_dst is set up to next return the record after
;	1575	!	the end of routine record or the record after the PC correlation
;	1576	!	record that matched the given parameters.
;	1577	!
;	1578	! ROUTINE VALUE:
;	1579	! COMPLETION CODES:
;	1580	!
;	1581	!	true, if success; false, if any error or if match cannot
;	1582	!	be made.
;	1583	!
;	1584	! SIDE EFFECTS:
;	1585	!
;	1586	!	The DST is positioned for a GET_NXT_DST sequence.
;	1587	!
;	1588	!--
;	1589	
;	1590		BEGIN

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:27	DBB3:[TRACE.SRC]TBKDPC.B32;3					Page 3-1
; Digital Equipment Corporation
;
;	1591	
;	1592		MAP
;	1593			rtn_dst_ptr : ref dst_record,
;	1594			excep_type_ptr	: REF VECTOR,
;	1595			line_no_ptr	: REF VECTOR;
;	1596	
;	1597		LOCAL
;	1598			dst_entry	: REF dst_record,
;	1599			dpc_entry	: REF BLOCK [, BYTE],
;	1600	
;	1601			current_line,
;	1602			new_line,
;	1603			increment,
;	1604			new_increment,
;	1605			start_pc,
;	1606			next_pc,
;	1607			RTN_NT_PTR : REF NT_RECORD;
;	1608	
;	1609		! Before we can fetch the DST's PC correlation tables,
;	1610		! we must first 'position' the DST to be pointing to 
;	1611		! the record after the BEGIN_ROUTINE DST record for the
;	1612		! routine we assume the %line <number> referrs to.
;	1613	
;	1614		IF( TBK$POSITON_DST(.RTN_DST_PTR) EQL 0 )
;	1615		THEN
;	1616			BEGIN
;	1617	%IF TBK_DPC2
;     L 1618	%THEN
;     U 1619			$FAO_TT_OUT('can't position DST to !XL',.rtn_dst_ptr);
;     U 1620	%FI
;	1621			RETURN(FALSE);
;	1622			END;
;	1623	
;	1624		IF( .RTN_DST_PTR[ DSTR_TYPE ] NEQ DSC$K_DTYPE_RTN )
;	1625		THEN
;	1626			BEGIN
;	1627	%IF TBK_DPC2
;     L 1628	%THEN
;     U 1629			$FAO_TT_OUT('dst ptr = !XL is not type _RTN',.rtn_dst_ptr);
;     U 1630	%FI
;	1631			RETURN(FALSE);
;	1632			END;
;	1633		!++
;	1634		! Initialize state variables.
;	1635		!--
;	1636		current_line = 0;
;	1637		increment = 1;
;	1638		start_pc = .rtn_dst_ptr[ dstr_value ];
;	1639	
;	1640	%IF dbg_dpc
;     L 1641	%THEN
;     U 1642		$fao_tt_out ('match PC is !XL, routine start is !XL, line number is !SL',
;     U 1643			.match_pc, .start_pc, .line_no_ptr [0]);
;     U 1644	%FI
;	1645	

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:27	DBB3:[TRACE.SRC]TBKDPC.B32;3					Page 3-2
; Digital Equipment Corporation
;
;	1646		!++
;	1647		! Get the first PC correlation record. If none can be found
;	1648		! within this routine, then return false. When one is found,
;	1649		! load the address of the second byte of the record into a
;	1650		! pointer to the PC correlation data itself.
;	1651		!--
;	1652		IF NOT get_next_dpc (dst_entry)
;	1653		THEN RETURN FALSE
;	1654		ELSE
;	1655			BEGIN
;	1656			dpc_entry = dst_entry [dstr_access];
;	1657	
;	1658	%IF dbg_dpc1
;     L 1659	%THEN
;     U 1660			$fao_tt_out ('address of corr. record is !XL', .dst_entry);
;     U 1661			$fao_tt_out ('corr. record is !SB !SB !SB !SB !SB !SB !SB !SB !SB !SB',
;     U 1662					.dpc_entry [0, 0, 8, 1], .dpc_entry [1, 0, 8, 1],
;     U 1663					.dpc_entry [2, 0, 8, 1], .dpc_entry [3, 0, 8, 1],
;     U 1664					.dpc_entry [4, 0, 8, 1], .dpc_entry [5, 0, 8, 1],
;     U 1665					.dpc_entry [6, 0, 8, 1], .dpc_entry [7, 0, 8, 1],
;     U 1666					.dpc_entry [8, 0, 8, 1], .dpc_entry [9, 0, 8, 1]);
;     U 1667	%FI
;	1668	
;	1669			END;
;	1670	
;	1671		!++
;	1672		! Call a routine that processes all PC correlation commands
;	1673		! until a delta-PC command is seen. Then process that
;	1674		! delta-PC command and return to this routine. If the processing
;	1675		! is generally successful, return true, otherwise return false.
;	1676		!--
;	1677		REPEAT
;	1678			BEGIN
;	1679			LOCAL
;	1680				LAST_LINE_NO;
;	1681	
;	1682			! Save the last idea we had for PC and line number
;	1683			! because the next processing call changes the latter
;	1684			! when a "skip line number" command is seen.
;	1685	
;	1686			LAST_LINE_NO = .CURRENT_LINE;
;	1687	
;	1688			IF NOT proc_pc_cmd (current_line,
;	1689					    increment,
;	1690					    .start_pc,
;	1691					    next_pc,
;	1692					    dpc_entry,
;	1693					    dst_entry)
;	1694			THEN RETURN FALSE;
;	1695	
;	1696			!++
;	1697			! The newly processed delta-PC command has given us
;	1698			! a matching PC and line number. According to what we
;	1699			! are searching for (a line number for a trap, or
;	1700			! a line number for a fault or abort), see whether we

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:27	DBB3:[TRACE.SRC]TBKDPC.B32;3					Page 3-3
; Digital Equipment Corporation
;
;	1701			! have an answer. Otherwise, loop through proc_pc_cmd
;	1702			! again.
;	1703			!--
;	1704			CASE .excep_type_ptr [0] FROM 1 TO 2 OF
;	1705	
;	1706				SET
;	1707	
;	1708				[trap_exc]:
;	1709					BEGIN
;	1710	
;	1711					!++
;	1712					! Searching for a line number. The PC
;	1713					! is set to the instruction following
;	1714					! the instruction that caused the trap.
;	1715					! Thus, if the PC we are trying to match
;	1716					! is greater than the PC of the current
;	1717					! line and less than or equal to the
;	1718					! PC of the next line, then the current
;	1719					! line is a reasonable chance for
;	1720					! the line number of the trap.
;	1721					!--
;	1722					IF ((.start_pc LSSA .match_pc) AND
;	1723						(.match_pc LEQA .next_pc))
;	1724					THEN
;	1725						begin
;	1726						line_no_ptr[0] = .last_line_no;
;	1727						return(TRUE);
;	1728						end;
;	1729					END;
;	1730	
;	1731	
;	1732				[fault_exc]:
;	1733					BEGIN
;	1734	
;	1735					!++
;	1736					! Searching for a line number. The PC
;	1737					! is set back to the beginning of the
;	1738					! instruction that caused the fault.
;	1739					! Thus, if the PC we are trying to
;	1740					! match is greater than or equal to the
;	1741					! PC of the current line and less than
;	1742					! the PC of the next line, then the
;	1743					! current line is a reasonable choice
;	1744					! for the line number of the fault.
;	1745					!--
;	1746					IF ((.start_pc LEQA .match_pc) AND
;	1747						(.match_pc LSSA .next_pc))
;	1748					THEN
;	1749						begin
;	1750	
;	1751						line_no_ptr[0] = .last_line_no;
;	1752	
;	1753						!++
;	1754						! WHen doing traceback, only the first
;	1755						! line, that reflects the current

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:27	DBB3:[TRACE.SRC]TBKDPC.B32;3					Page 3-4
; Digital Equipment Corporation
;
;	1756						! PC, can be the result of a fault. All
;	1757						! others should be looked at as traps.
;	1758						!--
;	1759						excep_type_ptr [0] = trap_exc;
;	1760						return(TRUE);
;	1761						end;
;	1762					END;
;	1763	
;	1764				TES;
;	1765	
;	1766			!++
;	1767			! Found nothing this round. Increment the current line
;	1768			! and the PC and continue trying.
;	1769			!--
;	1770			current_line = .current_line + .increment;
;	1771			start_pc = .next_pc;
;	1772			END;
;	1773		END;


							    .TITLE  TBKDPC
							    .IDENT  \000013\

							    .GLOBL  TBK$_RST_BEGIN, TBK$FAO_OUT, TBK$FAKE_MSG, TBK$GET_DST_REC
							    .GLOBL  TBK$GET_NXT_DST, TBK$POSITON_DST

							    .PSECT  TBK$CODE,NOWRT,  SHR,  PIC,0

					 000C 00000 	    .ENTRY  TBK$PC_TO_LINE, Save R2,R3				      ; 1536
		         5E	       14  C2 00002 	    SUBL2   #20, SP						      ;
		         52	  08   AC  D0 00005 	    MOVL    RTN_DST_PTR, R2					      ; 1614
				       52  DD 00009 	    PUSHL   R2							      ;
		  0000G  CF	       01  FB 0000B 	    CALLS   #1, TBK$POSITON_DST					      ;
				       50  D5 00010 	    TSTL    R0							      ;
				       7E  13 00012 	    BEQL    7$							      ;
		    BE   8F	  01   A2  91 00014 	    CMPB    1(R2), #190						      ; 1624
				       77  12 00019 	    BNEQ    7$							      ;
				       6E  D4 0001B 	    CLRL    CURRENT_LINE					      ; 1636
		    04   AE	       01  D0 0001D 	    MOVL    #1, INCREMENT					      ; 1637
		         53	  03   A2  D0 00021 	    MOVL    3(R2), START_PC					      ; 1638
				  10   AE  9F 00025 	    PUSHAB  DST_ENTRY						      ; 1652
		  0000V  CF	       01  FB 00028 	    CALLS   #1, GET_NEXT_DPC					      ;
		         62	       50  E9 0002D 	    BLBC    R0, 7$						      ;
      0C   AE	    10   AE	       02  C1 00030 	    ADDL3   #2, DST_ENTRY, DPC_ENTRY				      ; 1656
		         52	       6E  D0 00036 1$:     MOVL    CURRENT_LINE, LAST_LINE_NO				      ; 1686
				  10   AE  9F 00039 	    PUSHAB  DST_ENTRY						      ; 1688
				  10   AE  9F 0003C 	    PUSHAB  DPC_ENTRY						      ;
				  10   AE  9F 0003F 	    PUSHAB  NEXT_PC						      ;
				       53  DD 00042 	    PUSHL   START_PC						      ;
				  14   AE  9F 00044 	    PUSHAB  INCREMENT						      ;
				  14   AE  9F 00047 	    PUSHAB  CURRENT_LINE					      ;
		  0000V  CF	       06  FB 0004A 	    CALLS   #6, PROC_PC_CMD					      ;
		         40	       50  E9 0004F 	    BLBC    R0, 7$						      ;
		         50	  08   AE  D0 00052 	    MOVL    NEXT_PC, R0						      ; 1723
	   01	         01	  0C   BC  CF 00056 	    CASEL   @EXCEP_TYPE_PTR, #1, #1				      ; 1704

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:27	DBB3:[TRACE.SRC]TBKDPC.B32;3					Page 3-5
; Digital Equipment Corporation
;
		       0016	     0004     0005B 2$:     .WORD   3$-2$,-						      ;
								    4$-2$						      ;
		    04   AC	       53  D1 0005F 3$:     CMPL    START_PC, MATCH_PC					      ; 1722
				       24  1E 00063 	    BGEQU   6$							      ;
		         50	  04   AC  D1 00065 	    CMPL    MATCH_PC, R0					      ; 1723
				       1E  1A 00069 	    BGTRU   6$							      ;
		    10   BC	       52  D0 0006B 	    MOVL    LAST_LINE_NO, @LINE_NO_PTR				      ; 1726
				       14  11 0006F 	    BRB     5$							      ; 1727
		    04   AC	       53  D1 00071 4$:     CMPL    START_PC, MATCH_PC					      ; 1746
				       12  1A 00075 	    BGTRU   6$							      ;
		         50	  04   AC  D1 00077 	    CMPL    MATCH_PC, R0					      ; 1747
				       0C  1E 0007B 	    BGEQU   6$							      ;
		    10   BC	       52  D0 0007D 	    MOVL    LAST_LINE_NO, @LINE_NO_PTR				      ; 1751
		    0C   BC	       01  D0 00081 	    MOVL    #1, @EXCEP_TYPE_PTR					      ; 1759
		         50	       01  D0 00085 5$:     MOVL    #1, R0						      ; 1760
					   04 00088 	    RET     							      ;
		         6E	  04   AE  C0 00089 6$:     ADDL2   INCREMENT, CURRENT_LINE				      ; 1770
		         53	       50  D0 0008D 	    MOVL    R0, START_PC					      ; 1771
				       A4  11 00090 	    BRB     1$							      ; 1669
				       50  D4 00092 7$:     CLRL    R0							      ; 1536
					   04 00094 	    RET     							      ;

; Routine Size:  149 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:27	DBB3:[TRACE.SRC]TBKDPC.B32;3					Page 4
; Digital Equipment Corporation
;
;	1774	ROUTINE proc_pc_cmd
;	1775	 (line_ptr, increment_ptr, start_pc, next_pc_ptr, dpc_entry_ptr, dst_entry_ptr)=
;	1776	
;	1777	!++
;	1778	! Functional description:
;	1779	!	This routine processes PC correlation commands until a
;	1780	!	delta-Pc command is seen. The delta-PC command is also processed.
;	1781	!	Then this routine returns with all the contents of the
;	1782	!	parameter pointers updated appropriately.
;	1783	!
;	1784	!	This routine moves from PC record to PC record as necessary. If
;	1785	!	no more records are seen, this routine returns false. If
;	1786	!	an error is seen in a PC correlation record, then this
;	1787	!	routine sets the contents of line_ptr to zero and
;	1788	!	returns false.
;	1789	!
;	1790	! Inputs:
;	1791	!	line_ptr	- pointer to the current line
;	1792	!	increment_ptr	- pointer to the line increment
;	1793	!	start_pc	- PC at start of current line
;	1794	!	next_pc_ptr	- pointer to the PC of the next line
;	1795	!	dpc_entry_ptr	- pointer to address of current PC correlation record
;	1796	!	dst_entry_ptr	- pointer to address of current DST entry
;	1797	!
;	1798	! Implicit inputs:
;	1799	!	the routine get_next_dpc is set up to return the next PC
;	1800	!	correlation record, and false if no more exist for this routine.
;	1801	!
;	1802	! Implicit outputs:
;	1803	!	the contents of the line pointer, the increment pointer, the
;	1804	!	next_pc pointer, dpc_entry, and possible dst_entry are
;	1805	!	updated to new values.
;	1806	!
;	1807	! Routine value:
;	1808	!	TRUE if all goes well, otherwise FALSE.
;	1809	!
;	1810	! Side effects:
;	1811	!	More of the correlation records for this routine are read.
;	1812	!--
;	1813	
;	1814		BEGIN
;	1815	
;	1816		MAP
;	1817			line_ptr	: REF VECTOR,
;	1818			increment_ptr	: REF VECTOR,
;	1819			next_pc_ptr	: REF VECTOR;
;	1820	
;	1821		BIND
;	1822			dst_entry 	= .dst_entry_ptr : REF dst_record,
;	1823			dpc_entry	= .dpc_entry_ptr : REF BLOCK [, BYTE];
;	1824	
;	1825		REPEAT
;	1826			BEGIN
;	1827	
;	1828			!++

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:27	DBB3:[TRACE.SRC]TBKDPC.B32;3					Page 4-1
; Digital Equipment Corporation
;
;	1829			! See whether the current record is exhausted. If
;	1830			! so, get a new record. If none are available,
;	1831			! return FALSE. Otherwise, set dpc_entry to point to
;	1832			! the address of the third byte of the correlation record.
;	1833			!--
;	1834			IF dpc_entry [current_byte] GTR (.dst_entry [dstr_size]
;	1835				+ dst_entry [dstr_size])
;	1836			THEN
;	1837				BEGIN
;	1838	
;	1839	%IF dbg_dpc1
;     L 1840	%THEN
;     U 1841				$fao_tt_out ('getting another dpc record');
;     U 1842	%FI
;	1843	
;	1844				IF NOT get_next_dpc (dst_entry)
;	1845				THEN RETURN FALSE
;	1846				ELSE dpc_entry = dst_entry [dstr_access];
;	1847				END;
;	1848	
;	1849			!++
;	1850			! Now process each command, either PC correlation or
;	1851			! delta-PC one at a time. Once a delta-PC command is
;	1852			! processed, control returns from this routine to its
;	1853			! caller.
;	1854			!--
;	1855	
;	1856	%IF dbg_dpc1
;     L 1857	%THEN
;     U 1858			$fao_tt_out ('next byte is !SB, a signed byte, and !UB, an unsigned byte',
;     U 1859				.dpc_entry [0, 0, 8, 1], .dpc_entry [0, 0, 8, 0]);
;     U 1860	%FI
;	1861	
;	1862			CASE .dpc_entry [current_byte] FROM 1 TO 6 OF
;	1863	
;	1864				SET
;	1865	
;	1866				[word_delta]:
;	1867					BEGIN
;	1868	
;	1869					!++
;	1870					! Read the next two bytes as an unsigned
;	1871					! word representing a delta-PC value.
;	1872					! Update the next_pc and update the
;	1873					! dpc_entry address.
;	1874					!--
;	1875	%IF dbg_dpc1
;     L 1876	%THEN
;     U 1877					$fao_tt_out ('word_delta record');
;     U 1878	%FI
;	1879	
;	1880					next_pc_ptr [0] = .start_pc + .dpc_entry [next_uns_word];
;	1881					dpc_entry = dpc_entry [add_three_bytes];
;	1882					RETURN TRUE
;	1883					END;

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:27	DBB3:[TRACE.SRC]TBKDPC.B32;3					Page 4-2
; Digital Equipment Corporation
;
;	1884	
;	1885	
;	1886				[byte_temp_incr]:
;	1887					BEGIN
;	1888	
;	1889					!++
;	1890					! Increase the current line number by
;	1891					! the value contained in the next
;	1892					! unsigned byte.
;	1893					!--
;	1894	
;	1895	%IF dbg_dpc1
;     L 1896	%THEN
;     U 1897					$fao_tt_out ('byte line increment coming next');
;     U 1898	%FI
;	1899	
;	1900					line_ptr [0] = .line_ptr [0] + .dpc_entry [next_uns_byte];
;	1901					dpc_entry = dpc_entry [add_two_bytes];
;	1902					END;
;	1903	
;	1904	
;	1905				[word_temp_incr]:
;	1906					BEGIN
;	1907	
;	1908					!++
;	1909					! Increase the current line number by
;	1910					! the value contained in the next
;	1911					! unsigned word.
;	1912					!--
;	1913	%IF dbg_dpc1
;     L 1914	%THEN
;     U 1915					$fao_tt_out ('word line increment coming next');
;     U 1916	%FI
;	1917	
;	1918					line_ptr [0] = .line_ptr [0] + .dpc_entry [next_uns_word];
;	1919					dpc_entry = dpc_entry [add_three_bytes];
;	1920					END;
;	1921	
;	1922	
;	1923				[byte_perm_incr]:
;	1924					BEGIN
;	1925	
;	1926					!++
;	1927					! Change the line increment from its
;	1928					! present value to the value contained
;	1929					! in the next unsigned byte.
;	1930					!--
;	1931	
;	1932	%IF dbg_dpc1
;     L 1933	%THEN
;     U 1934					$fao_tt_out ('permanent byte line increment coming next');
;     U 1935	%FI
;	1936	
;	1937					increment_ptr [0] = .dpc_entry [next_uns_byte];
;	1938					dpc_entry = dpc_entry [add_two_bytes];

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:27	DBB3:[TRACE.SRC]TBKDPC.B32;3					Page 4-3
; Digital Equipment Corporation
;
;	1939					END;
;	1940	
;	1941	
;	1942				[word_perm_incr]:
;	1943					BEGIN
;	1944	
;	1945					!++
;	1946					! Change the line increment from its
;	1947					! present value to the value contained
;	1948					! in the next word.
;	1949					!--
;	1950	
;	1951	%IF dbg_dpc1
;     L 1952	%THEN
;     U 1953					$fao_tt_out ('permanent word line increment coming next');
;     U 1954	%FI
;	1955	
;	1956					increment_ptr [0] = .dpc_entry [next_uns_word];
;	1957					dpc_entry = dpc_entry [add_three_bytes];
;	1958					END;
;	1959	
;	1960	
;	1961				[incr_to_1]:
;	1962					BEGIN
;	1963	
;	1964					!++
;	1965					! Revert to a line increment of value 1.
;	1966					!--
;	1967	
;	1968	%IF dbg_dpc1
;     L 1969	%THEN
;     U 1970					$fao_tt_out ('revert to line increment of 1');
;     U 1971	%FI
;	1972	
;	1973					increment_ptr [0] = 1;
;	1974					dpc_entry = dpc_entry [add_one_byte];
;	1975					END;
;	1976	
;	1977	
;	1978				[OUTRANGE]:
;	1979					BEGIN
;	1980	
;	1981					!++
;	1982					! This is a standard delta_PC command
;	1983					! if the value is less than or equal to
;	1984					! zero. Otherwise it is an error. If okay,
;	1985					! set next_pc value, update the dpc_entry,
;	1986					! and return with success.
;	1987					!--
;	1988					IF .dpc_entry [current_byte] GTR 6
;	1989					THEN
;	1990						BEGIN
;	1991	
;	1992	%IF dbg_dpc1
;     L 1993	%THEN

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:27	DBB3:[TRACE.SRC]TBKDPC.B32;3					Page 4-4
; Digital Equipment Corporation
;
;     U 1994						$fao_tt_out ('unimplemented delta-PC command');
;     U 1995	%FI
;	1996	
;	1997						TBK$fake_MSG(TBK$_INVDSTREC,0);
;	1998						RETURN FALSE
;	1999						END;
;	2000	
;	2001	%IF dbg_dpc1
;     L 2002	%THEN
;     U 2003					$fao_tt_out ('increment PC value by !SB', - .dpc_entry [current_byte]);
;     U 2004	%FI
;	2005	
;	2006					next_pc_ptr [0] = .start_pc - .dpc_entry [current_byte];
;	2007					dpc_entry = dpc_entry [add_one_byte];
;	2008					RETURN TRUE
;	2009					END;
;	2010	
;	2011				TES;
;	2012	
;	2013			END;
;	2014		END;





					 001C 00095 PROC_PC_CMD:
							    .WORD   Save R2,R3,R4					      ; 1774
		         53	  14   AC  7D 00097 	    MOVQ    DPC_ENTRY_PTR, R3					      ; 1814
		         50	  00   B4  9A 0009B 1$:     MOVZBL  @0(R4), R0						      ; 1834
		         50	       64  C0 0009F 	    ADDL2   (R4), R0						      ;
		         50	       63  D1 000A2 	    CMPL    (R3), R0						      ;
				       0E  15 000A5 	    BLEQ    2$							      ;
				       54  DD 000A7 	    PUSHL   R4							      ; 1844
		  0000V  CF	       01  FB 000A9 	    CALLS   #1, GET_NEXT_DPC					      ;
		         79	       50  E9 000AE 	    BLBC    R0, 16$						      ;
	   63	         64	       02  C1 000B1 	    ADDL3   #2, (R4), (R3)					      ; 1846
		         52	       63  D0 000B5 2$:     MOVL    (R3), R2						      ; 1862
	   05	         01	       62  8F 000B8 	    CASEB   (R2), #1, #5					      ;
	 0048	       003E	     002D     000BC 3$:     .WORD   5$-3$,-						      ;
	 0066	       005C	     0052     000C2		    7$-3$,-						      ;
								    8$-3$,-						      ;
								    9$-3$,-						      ;
								    12$-3$,-						      ;
								    14$-3$						      ;
		         06	       62  91 000C8 	    CMPB    (R2), #6						      ; 1988
				       0F  15 000CB 	    BLEQ    4$							      ;
				       7E  D4 000CD 	    CLRL    -(SP)						      ; 1997
			    00098332   8F  DD 000CF 	    PUSHL   #623410						      ;
		  0000G  CF	       02  FB 000D5 	    CALLS   #2, TBK$FAKE_MSG					      ;
				       4E  11 000DA 	    BRB     16$							      ; 1998
		         50	       62  98 000DC 4$:     CVTBL   (R2), R0						      ; 2006
      10   BC	    0C   AC	       50  C3 000DF 	    SUBL3   R0, START_PC, @NEXT_PC_PTR				      ;
				       63  D6 000E5 	    INCL    (R3)						      ; 2007
				       0D  11 000E7 	    BRB     6$							      ; 2008

; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:27	DBB3:[TRACE.SRC]TBKDPC.B32;3					Page 4-5
; Digital Equipment Corporation
;
		         50	  01   A2  3C 000E9 5$:     MOVZWL  1(R2), R0						      ; 1880
      10   BC	    0C   AC	       50  C1 000ED 	    ADDL3   R0, START_PC, @NEXT_PC_PTR				      ;
		         63	       03  C0 000F3 	    ADDL2   #3, (R3)						      ; 1881
		         50	       01  D0 000F6 6$:     MOVL    #1, R0						      ; 1882
					   04 000F9 	    RET     							      ;
		         50	  01   A2  9A 000FA 7$:     MOVZBL  1(R2), R0						      ; 1900
		    04   BC	       50  C0 000FE 	    ADDL2   R0, @LINE_PTR					      ;
				       0F  11 00102 	    BRB     10$							      ; 1901
		         50	  01   A2  3C 00104 8$:     MOVZWL  1(R2), R0						      ; 1918
		    04   BC	       50  C0 00108 	    ADDL2   R0, @LINE_PTR					      ;
				       0F  11 0010C 	    BRB     13$							      ; 1919
		    08   BC	  01   A2  9A 0010E 9$:     MOVZBL  1(R2), @INCREMENT_PTR				      ; 1937
		         63	       02  C0 00113 10$:    ADDL2   #2, (R3)						      ; 1938
				       83  11 00116 11$:    BRB     1$							      ; 1862
		    08   BC	  01   A2  3C 00118 12$:    MOVZWL  1(R2), @INCREMENT_PTR				      ; 1956
		         63	       03  C0 0011D 13$:    ADDL2   #3, (R3)						      ; 1957
				       06  11 00120 	    BRB     15$							      ; 1862
		    08   BC	       01  D0 00122 14$:    MOVL    #1, @INCREMENT_PTR					      ; 1973
				       63  D6 00126 	    INCL    (R3)						      ; 1974
				       EC  11 00128 15$:    BRB     11$							      ; 1823
				       50  D4 0012A 16$:    CLRL    R0							      ; 1774
					   04 0012C 	    RET     							      ;

; Routine Size:  152 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:27	DBB3:[TRACE.SRC]TBKDPC.B32;3					Page 5
; Digital Equipment Corporation
;
;	2015	ROUTINE get_next_dpc (dst_rec_ptr) =	! gets next PC correlation record
;	2016	
;	2017	!++
;	2018	! Functional description:
;	2019	!	Reads DST records until either no more exist, a routine end
;	2020	!	record is seen, or another PC correlation record is seen. In
;	2021	!	the first two cases, a FALSE return is taken. In the third
;	2022	!	case, the address of the new record and a success return is
;	2023	!	taken.
;	2024	!
;	2025	! Inputs:
;	2026	!	dst_rec_ptr	- pointer for new DST PC correlation record
;	2027	!
;	2028	!
;	2029	! Implicit inputs:
;	2030	!	the routine tbk$get_nxt_dst is set up to return
;	2031	!	each DST record sequentially, and the last record
;	2032	!	that it returned was a PC correlation record.
;	2033	!
;	2034	! Implicit outputs:
;	2035	!	tbk$get_nxt_dst is now set up to return the next record after
;	2036	!	the returned record or the next record after the record that
;	2037	!	caused this routine to fail.
;	2038	!
;	2039	! Routine value:
;	2040	!	true or false
;	2041	!
;	2042	! Side effects:
;	2043	!	none
;	2044	!--
;	2045	
;	2046		BEGIN
;	2047	
;	2048		BIND
;	2049			dst_entry	= .dst_rec_ptr : REF dst_record;
;	2050	
;	2051		LOCAL
;	2052			dst_rec_id;
;	2053	
;	2054		REPEAT
;	2055			BEGIN
;	2056			dst_entry = tbk$get_nxt_dst (dst_rec_id);
;	2057			IF .dst_entry EQL 0
;	2058			THEN RETURN FALSE;
;	2059			IF .dst_entry [dstr_type] EQL dsc$k_dtype_eor
;	2060			THEN RETURN FALSE;
;	2061			IF .dst_entry [dstr_type] EQL dsc$k_dtype_dpc
;	2062			THEN RETURN TRUE;
;	2063			END;
;	2064		END;






; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:27	DBB3:[TRACE.SRC]TBKDPC.B32;3					Page 5-1
; Digital Equipment Corporation
;
					 0004 0012D GET_NEXT_DPC:
							    .WORD   Save R2						      ; 2015
		         5E	       04  C2 0012F 	    SUBL2   #4, SP						      ;
		         52	  04   AC  D0 00132 	    MOVL    DST_REC_PTR, R2					      ; 2046
				       5E  DD 00136 1$:     PUSHL   SP							      ; 2056
		  0000G  CF	       01  FB 00138 	    CALLS   #1, TBK$GET_NXT_DST					      ;
		         62	       50  D0 0013D 	    MOVL    R0, (R2)						      ;
		         50	       62  D0 00140 	    MOVL    (R2), R0						      ; 2057
				       12  13 00143 	    BEQL    2$							      ;
		    BF   8F	  01   A0  91 00145 	    CMPB    1(R0), #191						      ; 2059
				       0B  13 0014A 	    BEQL    2$							      ;
		    B9   8F	  01   A0  91 0014C 	    CMPB    1(R0), #185						      ; 2061
				       E3  12 00151 	    BNEQ    1$							      ;
		         50	       01  D0 00153 	    MOVL    #1, R0						      ; 2062
					   04 00156 	    RET     							      ;
				       50  D4 00157 2$:     CLRL    R0							      ; 2015
					   04 00159 	    RET     							      ;

; Routine Size:  45 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 04:38:27	DBB3:[TRACE.SRC]TBKDPC.B32;3					Page 6
; Digital Equipment Corporation
;
;	2065	END
;	2066	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  TBK$CODE       	   346  NOWRT,  RD ,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(0)
;  $CODE$         	     0  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]STARLET.L32;1		      2688         6         0       109





; Size:		346 code + 0 data bytes
; Run Time:	00:17.0
; Elapsed Time:	00:19.3
; Memory Used:	208 pages
; Compilation Complete
