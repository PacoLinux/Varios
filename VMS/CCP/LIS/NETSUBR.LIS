NETSUBR         - UTILITY SUBROUTINES                            22-AUG-1978 01:00:07   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (1)    3400  HISTORY
   (1)    4200  DECLARATIONS
   (1)    7500  INCREMENT A NODE COUNTER
   (1)    9900  CHECK FOR NUMERICS AND UPPERCASE ALPHABETICS
   (1)   13300  FIND NAME BLOCK
   (1)   20300  SEE IF AST MUST BE DECLARED FOR MY PROCESSING
   (1)   23700  GET POINTER TO NETWORK CONNECT BLOCK
   (1)   27600  MOVE DESTINATION NODENAME
   (1)   27700  MOVE COUNTED ASCII STRING
   (1)   31700  MOVE NSP IMAGE (I-FORMAT) FIELD
   (1)   37000  BINARY TO ASCII
   (1)   40900  COMPARE COUNTED STRINGS
   (1)   44500  CONVERT ASCII TO BINARY
NETSUBR         - UTILITY SUBROUTINES                            22-AUG-1978 01:00:07   VAX-11 MACRO X0.3-11               Page   1
X01                                                                                                                              (1)

                                     0000   100 
                                     0000   200 	.TITLE	NETSUBR - UTILITY SUBROUTINES 
                                     0000   300 	.IDENT	/X01/
                                     0000   400 
                                     0000   500 ;
                                     0000   600 ; COPYRIGHT (C) 1977, 1978
                                     0000   700 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS 01754
                                     0000   800 ;
                                     0000   900 ; THIS SOFTWARE IS FURNISHED  UNDER A LICENSE FOR USE ONLY ON A SINGLE
                                     0000  1000 ; COMPUTER  SYSTEM AND  MAY BE  COPIED ONLY WITH  THE INCLUSION OF THE
                                     0000  1100 ; ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,
                                     0000  1200 ; MAY NOT BE PROVIDED OR  OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
                                     0000  1300 ; EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE
                                     0000  1400 ; TERMS.  TITLE TO AND  OWNERSHIP OF THE  SOFTWARE  SHALL AT ALL TIMES
                                     0000  1500 ; REMAIN IN DEC.
                                     0000  1600 ;
                                     0000  1700 ; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE
                                     0000  1800 ; AND SHOULD  NOT BE CONSTRUED  AS A COMMITMENT  BY DIGITAL  EQUIPMENT
                                     0000  1900 ; CORPORATION.
                                     0000  2000 ;
                                     0000  2100 ; DEC ASSUMES  NO  RESPONSIBILITY  FOR  THE USE OR  RELIABILITY OF ITS
                                     0000  2200 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
                                     0000  2300 
                                     0000  2400 ;++
                                     0000  2500 ; FACILITY:	NETWORK ACP
                                     0000  2600 ;
                                     0000  2700 ; ABSTRACT:
                                     0000  2800 ;	THIS MODULE CONTAINS UTILITY SUBROUTINES.
                                     0000  2900 ;
                                     0000  3000 ; ENVIRONMENT:
                                     0000  3100 ;	MODE = KERNEL
                                     0000  3200 ;--
NETSUBR         - UTILITY SUBROUTINES                            22-AUG-1978 01:00:07   VAX-11 MACRO X0.3-11               Page   2
X01             HISTORY                                                                                                          (1)

                                     0000  3400 	.SBTTL	HISTORY
                                     0000  3500 ; AUTHOR:	SCOTT G. DAVIS, CREATION DATE: 01-JUN-77
                                     0000  3600 ;
                                     0000  3700 ; MODIFIED BY:
                                     0000  3800 ;
                                     0000  3900 ;	, : VERSION
                                     0000  4000 ; 01	- 
NETSUBR         - UTILITY SUBROUTINES                            22-AUG-1978 01:00:07   VAX-11 MACRO X0.3-11               Page   3
X01             DECLARATIONS                                                                                                     (1)

                                     0000  4200 	.SBTTL	DECLARATIONS
                                     0000  4300 ;
                                     0000  4400 ; INCLUDE FILES:
                                     0000  4500 ;
                                     0000  4600 	$ABDDEF
                                     0000  4700 	$DDBDEF
                                     0000  4800 	$DYNDEF
                                     0000  4900 	$IRPDEF
                                     0000  5000 	$PRDEF
                                     0000  5100 	$PSLDEF
                                     0000  5200 	$UCBDEF
                                     0000  5300 
                                     0000  5400 ;
                                     0000  5500 ; MACROS:
                                     0000  5600 ;
                                     0000  5700 
                                     0000  5800 ;
                                     0000  5900 ; EQUATED SYMBOLS:
                                     0000  6000 ;
                                     0000  6100 	
                                     0000  6200 ;
                                     0000  6300 ; AP OFFSETS FOR CVT_DTB
                                     0000  6400 ;
                           00000004  0000  6500 	COUNT	= 4			; COUNT ARG IN ARG LIST
                           00000008  0000  6600 	STRING	= 8			; STRING ARG
                           0000000C  0000  6700 	RESULT	= 12			; RESULT ADDRESS
                           00000010  0000  6800 	MAX	= 16			; MAX FIELD SIZE FOR CONVERSION
                                     0000  6900 
                                     0000  7000 ;
                                     0000  7100 ; OWN STORAGE:
                                     0000  7200 ;
NETSUBR         - UTILITY SUBROUTINES                            22-AUG-1978 01:00:07   VAX-11 MACRO X0.3-11               Page   4
X01             DECLARATIONS                                                                                                     (1)

                                 00000000  7400 	.PSECT	NET_CONNECT,NOWRT
                                     0000  7500 	.SBTTL	INCREMENT A NODE COUNTER
                                     0000  7600 ;++
                                     0000  7700 ; FUNCTIONAL DESCRIPTION:
                                     0000  7800 ;
                                     0000  7900 ; NET$DISCARD - INCREMENT COUNTER, BUT NOT BEYOND 2^15
                                     0000  8000 ;
                                     0000  8100 ; CALLING SEQUENCE:
                                     0000  8200 ;
                                     0000  8300 ;	BSB	NET$UP_COUNTER
                                     0000  8400 ;
                                     0000  8500 ; INPUT PARAMETERS:
                                     0000  8600 ;
                                     0000  8700 ;	R0 - ADDRESS OF COUNTER TO BE INCREMENTED
                                     0000  8800 ;
                                     0000  8900 ;--
                                     0000  9000 
                                     0000  9100 NET$UP_COUNTER::
                          60     B5  0000  9200 	TSTW	(R0)			; SEE IF SIGN BIT SET
                          02     19  0002  9300 	BLSS	10$			; IF LSS YES
                          60     B6  0004  9400 	INCW	(R0)			; NO - BUMP THE COUNTER
                                     0006  9500 10$:
                                 05  0006  9600 	RSB
NETSUBR         - UTILITY SUBROUTINES                            22-AUG-1978 01:00:07   VAX-11 MACRO X0.3-11               Page   5
X01             CHECK FOR NUMERICS AND UPPERCASE ALPHABETICS                                                                     (1)

                                     0007  9900 	.SBTTL	CHECK FOR NUMERICS AND UPPERCASE ALPHABETICS
                                     0007 10000 ;++
                                     0007 10100 ; FUNCTIONAL DESCRIPTION:
                                     0007 10200 ;
                                     0007 10300 ; NET$CHECK_ASCII - THIS ROUTINE CHECK A CHARACTER AS BEING VALID IN A NODE NAME
                                     0007 10400 ;
                                     0007 10500 ; CALLING SEQUENCE:
                                     0007 10600 ;
                                     0007 10700 ;	BSB	NET$CHECK_ASCII
                                     0007 10800 ;
                                     0007 10900 ; INPUT PARAMETERS:
                                     0007 11000 ;
                                     0007 11100 ;	R4 - ASCII CHARACTER IN LOW BYTE
                                     0007 11200 ;
                                     0007 11300 ; OUTPUT PARAMETERS:
                                     0007 11400 ;
                                     0007 11500 ;	R0:	LBS=> OK
                                     0007 11600 ;		LBC=> NG
                                     0007 11700 ;
                                     0007 11800 ;--
                                     0007 11900 
                                     0007 12000 NET$CHECK_ASCII::
                                     0007 12100 50$:
                          50     D4  0007 12200 	CLRL	R0			; ASSUME FAILURE
            30            54     91  0009 12300 	CMPB	R4,#^A/0/		; CHECK LOW END OF RANGE
                          13     1F  000C 12400 	BLSSU	20$			; IF LSSU NG
         5A 8F            54     91  000E 12500 	CMPB	R4,#^A/Z/		; CHECK HIGH END
                          0D     1A  0012 12600 	BGTRU	20$			; IF GTRU NG
            3A            54     91  0014 12700 	CMPB	R4,#^A/:/		; CHECK BAD VALUES BETWEEN
                          06     1F  0017 12800 	BLSSU	10$			; IF LSSU OK
         40 8F            54     91  0019 12900 	CMPB	R4,#^A/@/		; ANOTHER LIMIT
                          02     1B  001D 13000 	BLEQU	20$			; IF LEQU NG
                          50     D6  001F 13100 10$:	INCL	R0			; SUCCESS
                                 05  0021 13200 20$:	RSB				; DONE
                                     0022 13300 	.SBTTL	FIND NAME BLOCK
                                     0022 13400 ;++
                                     0022 13500 ; FUNCTIONAL DESCRIPTION:
                                     0022 13600 ;
                                     0022 13700 ; NET$FIND_NAMBLK - FIND A NAME BLOCK (SET ASIDE FOR INBOUND CONNECTS)
                                     0022 13800 ;	AND VALIDATE ARRAY ENTRIES - DECLARER OF NAME MAY HAVE EXITED
                                     0022 13900 ;
                                     0022 14000 ; CALLING SEQUENCE:
                                     0022 14100 ;
                                     0022 14200 ;	BSB/JSB	NET$FIND_NAMBLK
                                     0022 14300 ;
                                     0022 14400 ; INPUT PARAMETERS:
                                     0022 14500 ;
                                     0022 14600 ;	NONE
                                     0022 14700 ;
                                     0022 14800 ; IMPLICIT INPUTS:
                                     0022 14900 ;
                                     0022 15000 ;	NET$GQ_IMAGE IS MATCH NAME DESCRIPTOR
                                     0022 15100 ;
                                     0022 15200 ; OUTPUT PARAMETERS:
                                     0022 15300 ;
                                     0022 15400 ;	R4 - ADDRESS OF FIRST EMPTY SLOT IN NET$AL_NAMBLKS: 0=>NO SLOTS
                                     0022 15500 ;	R5 - 0 IF NO MATCH, UCB ADDRESS IF MATCH: COND CODES REFLECT R5 VALUE
NETSUBR         - UTILITY SUBROUTINES                            22-AUG-1978 01:00:07   VAX-11 MACRO X0.3-11               Page   6
X01             FIND NAME BLOCK                                                                                                  (1)

                                     0022 15600 ;
                                     0022 15700 ; IMPLICIT OUTPUTS:
                                     0022 15800 ;
                                     0022 15900 ;	NONE
                                     0022 16000 ;
                                     0022 16100 ; SIDE EFFECTS:
                                     0022 16200 ;
                                     0022 16300 ;	R0-R3,R6-R8,R10 DESTROYED
                                     0022 16400 ;
                                     0022 16500 ;--
                                     0022 16600 
                                     0022 16700 NET$FIND_NAMBLK::
                          54     D4  0022 16800 	CLRL	R4			; INIT EMPTY SLOT POINTER
            58       0000'CF     9E  0024 16900 	MOVAB	W^NET$AL_NAMBLKS,R8	; GET THE ADDRESS OF THE NAME BLOCKS
            57       0000'CF     9E  0029 17000 	MOVAB	W^NET$AL_NAMBLKE,R7	; FOR LOOP TERMINATION
                                     002E 17100 10$:
            56            58     D0  002E 17200 	MOVL	R8,R6			; COPY THE ADDRESS
            5A            86     D0  0031 17300 	MOVL	(R6)+,R10		; GET THE UCB ADDRESS, IF ANY
                          09     12  0034 17400 	BNEQ	20$			; IF NEQ NOTHING THERE
                                     0036 17500 15$:
                          54     D5  0036 17600 	TSTL	R4			; DID WE ALREADY GET AN EMPTY SLOT?
                          29     12  0038 17700 	BNEQ	30$			; IF NEQ YES
            54            58     D0  003A 17800 	MOVL	R8,R4			; SAVE THE ADDRESS
                          24     11  003D 17900 	BRB	30$			; LOOP
                                     003F 18000 20$:
         0A AA            10     91  003F 18100 	CMPB	#DYN$C_UCB,UCB$B_TYPE(R10) ; IS IT REALLY A UCB?
                          0B     12  0043 18200 	BNEQ	22$			; IF NEQ NO
         5A AA            04     E1  0045 18300 	BBC	#UCB$V_NT_NAME,UCB$W_DEVSTS(R10),22$ ; IF BC, UCB WAS RECYCLED
                          06         0049       
            86         28 AA     D1  004A 18400 	CMPL	UCB$L_PID(R10),(R6)+	; STILL THE SAME PID?
                          04     13  004E 18500 	BEQL	25$			; IF EQL YES, PROCEED
                                     0050 18600 22$:
                          68     D4  0050 18700 	CLRL	(R8)			; DECLARER WENT BYE-BYE - CLEAR SLOT
                          E2     11  0052 18800 	BRB	15$			; RECYCLE IT
                                     0054 18900 25$:
       0000'CF            66     B1  0054 19000 	CMPW	(R6),W^NET$GQ_IMAGE	; SAME NO. OF CHARS IN NAME?
                          08     12  0059 19100 	BNEQ	30$			; IF NEQ NO - TRY NEXT
       0004'DF            86     29  005B 19200 	CMPC3	(R6)+,@W^NET$GQ_IMAGE+4,(R6) ; SEE IF THE NAMES MATCH
                          66         0060       
                          09     13  0061 19300 	BEQL	40$			; IF EQL YES
                                     0063 19400 	
                                     0063 19500 30$:
            00'           57     F1  0063 19600 	ACBL	R7,S^#NET$C_NAMBLKSIZ,R8,10$ ; LOOP
            FFC5          58         0066       
                          55     D4  0069 19700 	CLRL	R5			; MATCH NOT FOUND
                                 05  006B 19800 	RSB				; DONE
                                     006C 19900 40$:
            55            5A     D0  006C 20000 	MOVL	R10,R5			; GET THE UCB ADDRESS
                                 05  006F 20100 	RSB				; DONE
NETSUBR         - UTILITY SUBROUTINES                            22-AUG-1978 01:00:07   VAX-11 MACRO X0.3-11               Page   7
X01             SEE IF AST MUST BE DECLARED FOR MY PROCESSING                                                                    (1)

                                     0070 20300 	.SBTTL	SEE IF AST MUST BE DECLARED FOR MY PROCESSING
                                     0070 20400 ;++
                                     0070 20500 ; FUNCTIONAL DESCRIPTION:
                                     0070 20600 ;
                                     0070 20700 ; NET$CHKLOCALAST - CHECK FOR NEED OF LOCAL AST
                                     0070 20800 ;
                                     0070 20900 ; CALLING SEQUENCE:
                                     0070 21000 ;
                                     0070 21100 ;	BSB	NET$CHKLOCALAST
                                     0070 21200 ;
                                     0070 21300 ; INPUT PARAMETERS:
                                     0070 21400 ;
                                     0070 21500 ;	NONE
                                     0070 21600 ;
                                     0070 21700 ; IMPLICIT INPUTS:
                                     0070 21800 ;
                                     0070 21900 ;	NET$GB_AST_FLAG
                                     0070 22000 ;
                                     0070 22100 ; OUTPUT PARAMETERS:
                                     0070 22200 ;
                                     0070 22300 ;	NONE
                                     0070 22400 ;
                                     0070 22500 ; SIDE EFFECTS:
                                     0070 22600 ;
                                     0070 22700 ;	AST MAY BE DECLARED TO PROCESS NSP MSGS FOR LOCAL LINK
                                     0070 22800 ;
                                     0070 22900 ;--
                                     0070 23000 
                                     0070 23100 NET$CHKLOCALAST::
       0000'CF            00     E5  0070 23200 	BBCC	#0,W^NET$GB_AST_FLAG,15$ ; IF BC THEN NO MSGS
                          05         0075       
       0000'CF            00     FB  0076 23300 	CALLS	#0,W^NET$LOCAL_AST	; DECLARE AN 'AST'
                                     007B 23400 15$:
                                 05  007B 23500 	RSB				; DONE
NETSUBR         - UTILITY SUBROUTINES                            22-AUG-1978 01:00:07   VAX-11 MACRO X0.3-11               Page   8
X01             GET POINTER TO NETWORK CONNECT BLOCK                                                                             (1)

                                     007C 23700 	.SBTTL	GET POINTER TO NETWORK CONNECT BLOCK
                                     007C 23800 ;++
                                     007C 23900 ; FUNCTIONAL DESCRIPTION:
                                     007C 24000 ;
                                     007C 24100 ; NET$GET_NCB - THIS ROUTINE EXTRACTS THE ADDRESS AND LENGTH OF THE NETWORK
                                     007C 24200 ; CONNECT BLOCK (NCB) FROM THE COMPLEX ACP FUNCTION BUFFER
                                     007C 24300 ;
                                     007C 24400 ; CALLING SEQUENCE:
                                     007C 24500 ;
                                     007C 24600 ;	BSB	NET$GET_NCB
                                     007C 24700 ;
                                     007C 24800 ; INPUT PARAMETERS:
                                     007C 24900 ;
                                     007C 25000 ;	R5 - UCB ADDRESS OF LOGICAL LINK
                                     007C 25100 ;
                                     007C 25200 ; IMPLICIT INPUTS:
                                     007C 25300 ;
                                     007C 25400 ;	COMPLEX ACP BUFFER
                                     007C 25500 ;
                                     007C 25600 ; OUTPUT PARAMETERS:
                                     007C 25700 ;
                                     007C 25800 ;	R10 - LENGTH OF NCB
                                     007C 25900 ;	R11 - ADDRESS OF NCB
                                     007C 26000 ;
                                     007C 26100 ;--
                                     007C 26200 
                                     007C 26300 NET$GET_NCB::
            53         4C A5     D0  007C 26400 	MOVL	UCB$L_IRP(R5),R3	; GET IRP ADDRESS
            5B         2C B3     D0  0080 26500 	MOVL	@IRP$L_SVAPTE(R3),R11	; GET ABD ADDRESS
                                     0084 26600 ;
                                     0084 26700 ; NOW PICK UP THE DEVICE NAME STRING
                                     0084 26800 ;
            5A         12 AB     3C  0084 26900 	MOVZWL	<ABD$C_LENGTH*ABD$C_NAME>+ABD$W_COUNT(R11),R10 ; LTH OF NCB
            56         10 AB     9E  0088 27000 	MOVAB	<ABD$C_LENGTH*ABD$C_NAME>+ABD$W_TEXT(R11),R6 ; OFFSET TO TEXT
            5B            86     9E  008C 27100 	MOVAB	(R6)+,R11		; COPY THE ADDRESS AND ADD 1 FOR ACCESS MODE
            7E            6B     3C  008F 27200 	MOVZWL	(R11),-(SP)		; GET OFFSET TO TEXT
            56            8E     C1  0092 27300 	ADDL3	(SP)+,R6,R11		; POINT TO DEVICE NAME STRING
                          5B         0095       
                                 05  0096 27400 	RSB				; DONE
NETSUBR         - UTILITY SUBROUTINES                            22-AUG-1978 01:00:07   VAX-11 MACRO X0.3-11               Page   9
X01             MOVE DESTINATION NODENAME                                                                                        (1)

                                     0097 27600 	.SBTTL	MOVE DESTINATION NODENAME
                                     0097 27700 	.SBTTL	MOVE COUNTED ASCII STRING
                                     0097 27800 ;++
                                     0097 27900 ; FUNCTIONAL DESCRIPTION:
                                     0097 28000 ;
                                     0097 28100 ; NET$PART_DSTNOD - MOVE IN PARTNER'S NAME AS DSTNODE
                                     0097 28200 ; NET$MOVE_DSTNOD - MOVE IN PROPER NAME AS DSTNODE
                                     0097 28300 ; NET$MOVE_STRING - MOVE A COUNTED ASCII STRING IN ITS ENTIRETY
                                     0097 28400 ;
                                     0097 28500 ; CALLING SEQUENCE:
                                     0097 28600 ;
                                     0097 28700 ;	BSB	NET$MOVE_STRING/DSTNOD
                                     0097 28800 ;
                                     0097 28900 ; INPUT PARAMETERS:
                                     0097 29000 ;
                                     0097 29100 ;	R1 - ADDRESS OF COUNTED ASCII STRING	(MOVE_STRING)
                                     0097 29200 ;	R3 - PTR TO BFR WHITHER TO MOVE STRING	(MOVE_STRING)
                                     0097 29300 ;
                                     0097 29400 ; OUTPUT PARAMETERS:
                                     0097 29500 ;
                                     0097 29600 ;	R3 - POINTS TO NEXT BYTE IN OUTPUT BFR
                                     0097 29700 ;	R0,1,2,4 CLOBBERED
                                     0097 29800 ;	R5 PRESERVED
                                     0097 29900 ;
                                     0097 30000 ;--
                                     0097 30100 
                                     0097 30200 NET$PART_DSTNOD::
            51         0C A5     9E  0097 30300 	MOVAB	UCB$T_PARTNER(R5),R1	; STRING SOURCE
                                     009B 30400 
                                     009B 30500 NET$MOVE_DSTNOD::
            53       0000'CF     9E  009B 30600 	MOVAB	W^NET$GT_DSTNODE,R3	; STRING TARGET
                                     00A0 30700 					; FALL THROUGH TO MOVE STRING
                                     00A0 30800 
                                     00A0 30900 NET$MOVE_STRING::
                          55     DD  00A0 31000 	PUSHL	R5			; SAVE R5
            50            61     9A  00A2 31100 	MOVZBL	(R1),R0			; GET THE STRING LTH
                          50     D6  00A5 31200 	INCL	R0			; ACCOUNT FOR LTH BYTE
            61            50     28  00A7 31300 	MOVC3	R0,(R1),(R3)		; MOVE THE STRING
                          63         00AA       
                          20     BA  00AB 31400 	POPR	#^M<R5>			; RESTORE R5
                                 05  00AD 31500 	RSB				; DONE
NETSUBR         - UTILITY SUBROUTINES                            22-AUG-1978 01:00:07   VAX-11 MACRO X0.3-11               Page  10
X01             MOVE NSP IMAGE (I-FORMAT) FIELD                                                                                  (1)

                                     00AE 31700 	.SBTTL	MOVE NSP IMAGE (I-FORMAT) FIELD
                                     00AE 31800 ;++
                                     00AE 31900 ; FUNCTIONAL DESCRIPTION:
                                     00AE 32000 ;
                                     00AE 32100 ; NET$MOVE_IFIELD - THIS ROUTINE GUARANTEES THE LTH OF AN IMAGE FIELD IN
                                     00AE 32200 ;		AN NSP MSG AND MOVES IT TO A DESTINATION IF OK.
                                     00AE 32300 ;		MOVED STRING INCLUDES COUNT BYTE.
                                     00AE 32400 ;
                                     00AE 32500 ; NET$MOVE_FIELD - SAME AS NET$MOVE_IFIELD, BUT COUNT BYTE NOT INCLUDED.
                                     00AE 32600 ;
                                     00AE 32700 ; CALLING SEQUENCE:
                                     00AE 32800 ;
                                     00AE 32900 ;	BSB	NET$MOVE_(I)FIELD
                                     00AE 33000 ;
                                     00AE 33100 ; INPUT PARAMETERS:
                                     00AE 33200 ;
                                     00AE 33300 ;	R3 - ADDRESS OF TARGET AREA
                                     00AE 33400 ;	R6 - MAX LTH OF FIELD
                                     00AE 33500 ;	R10 - ADDRESS OF I-FIELD
                                     00AE 33600 ;	R11 - ADDRESS OF SOURCE BUFFER + 1
                                     00AE 33700 ;
                                     00AE 33800 ; OUTPUT PARAMETERS:
                                     00AE 33900 ;
                                     00AE 34000 ;	R0 - LBS=>SUCCESS
                                     00AE 34100 ;	R0 - LBC=>FAILURE
                                     00AE 34200 ;	R3 - UPDATED
                                     00AE 34300 ;	R6 - CLOBBERED
                                     00AE 34400 ;	R10 - UPDATED
                                     00AE 34500 ;
                                     00AE 34600 ;--
                                     00AE 34700 
                                     00AE 34800 NET$MOVE_FIELD::
                          51     D4  00AE 34900 	CLRL	R1			; SET UP ADJUSTMENT FACTOR
                          03     11  00B0 35000 	BRB	FIELD_COMMON		; GO TO COMMON CODE
                                     00B2 35100  
                                     00B2 35200 NET$MOVE_IFIELD::
            51            01     9A  00B2 35300 	MOVZBL	#1,R1			; SET UP ADJUSTMENT FACTOR
                                     00B5 35400 
                                     00B5 35500 FIELD_COMMON:
                          50     D4  00B5 35600 	CLRL	R0			; ASSUME FAILURE
                                     00B7 35700 	BMSGOV	10$			; NEED A COUNT BYTE
            6A            56     91  00BC 35800 	CMPB	R6,(R10)		; FIELD TOO LARGE?
                          18     1F  00BF 35900 	BLSSU	10$			; IF LSSU YES
            8A            51     81  00C1 36000 	ADDB3	R1,(R10)+,R6		; PICK UP ADJUSTED COUNT
                          56         00C4       
            5A            51     C2  00C5 36100 	SUBL	R1,R10			; ADJUST STRING POINTER
                                     00C8 36200 	CMPAB	(R10)[R6],R11		; SUFFICIENT BYTES?
                          09     1A  00CE 36300 	BGTRU	10$			; IF GTRU NO
            6A            56     28  00D0 36400 	MOVC3	R6,(R10),(R3)		; MOVE IN THE STRING
                          63         00D3       
            5A            51     D0  00D4 36500 	MOVL	R1,R10			; UPDATE THE BFR PTR
                          50     D6  00D7 36600 	INCL	R0			; INDICATE SUCCESS
                                     00D9 36700 10$:
                                 05  00D9 36800 	RSB				; DONE
NETSUBR         - UTILITY SUBROUTINES                            22-AUG-1978 01:00:07   VAX-11 MACRO X0.3-11               Page  11
X01             BINARY TO ASCII                                                                                                  (1)

                                     00DA 37000 	.SBTTL	BINARY TO ASCII
                                     00DA 37100 ;++
                                     00DA 37200 ; FUNCTIONAL DESCRIPTION:
                                     00DA 37300 ;
                                     00DA 37400 ; NET$BIN2ASC - THIS ROUTINE CONVERTS A BINARY NUMBER TO AN
                                     00DA 37500 ;	ASCII STRING WITH ZERO SUPPESSION.
                                     00DA 37600 ;	CODE IS DUE TO BILL BROWN (JBC_BIN2ASC).
                                     00DA 37700 ;
                                     00DA 37800 ; CALLING SEQUENCE:
                                     00DA 37900 ;
                                     00DA 38000 ;	BSB	NET$BIN2ASC
                                     00DA 38100 ;
                                     00DA 38200 ; INPUT PARAMETERS:
                                     00DA 38300 ;
                                     00DA 38400 ;	R0 = NUMBER TO CONVERT
                                     00DA 38500 ;	R1 = SCRATCH
                                     00DA 38600 ;	R3 = ADDRESS OF PLACE TO STORE FIRST BYTE
                                     00DA 38700 ;
                                     00DA 38800 ; OUTPUT PARAMETERS:
                                     00DA 38900 ;
                                     00DA 39000 ;	NUMBER IS CONVERTED AND STORED
                                     00DA 39100 ;	R3 IS INCREMENTED PAST LAST BYTE STORED
                                     00DA 39200 ;
                                     00DA 39300 ; IMPLICIT OUTPUTS:
                                     00DA 39400 ;
                                     00DA 39500 ;	R0 AND R1 ARE RETURNED ZERO
                                     00DA 39600 ;
                                     00DA 39700 ;--
                                     00DA 39800 
                                     00DA 39900 NET$BIN2ASC::				; ENTER WITH JSB/BSB
                          51     D4  00DA 40000 	CLRL	R1			; ZERO HI 1/2 OF QUAD WORD
            50            0A     7B  00DC 40100 20$:	EDIV	#10,R0,R0,-(SP)		; DIVIDE BY DECIMAL RADIX
            7E            50         00DF       
            6E            30     C0  00E1 40200 	ADDL	#^A/0/,(SP)		; CONVERT TO ASCII
                          50     D5  00E4 40300 	TSTL	R0			; ANYTHING LEFT TO CONVERT
                          02     13  00E6 40400 	BEQL	30$			; BR IF NO MORE SIGNIFICANT DIGITS
                          F2     10  00E8 40500 	BSBB	20$			; RECURSE THRU ASCII CONVERT
            83            8E     F6  00EA 40600 30$:	CVTLB	(SP)+,(R3)+		; INSERT ASCII UNIT NUMBER
                                 05  00ED 40700 	RSB				; UNWIND RECURSIVE LOOP
NETSUBR         - UTILITY SUBROUTINES                            22-AUG-1978 01:00:07   VAX-11 MACRO X0.3-11               Page  12
X01             COMPARE COUNTED STRINGS                                                                                          (1)

                                     00EE 40900 	.SBTTL	COMPARE COUNTED STRINGS
                                     00EE 41000 ;++
                                     00EE 41100 ; FUNCTIONAL DESCRIPTION:
                                     00EE 41200 ;
                                     00EE 41300 ; NET$COMP_STRING - THIS ROUTINE COMPARES TWO COUNTED STRINGS.
                                     00EE 41400 ;		ON RETURN, CONDITION CODES ARE SET APPROPRIATELY.
                                     00EE 41500 ;
                                     00EE 41600 ; CALLING SEQUENCE:
                                     00EE 41700 ;
                                     00EE 41800 ;	BSB	NET$COMP_STRING
                                     00EE 41900 ;
                                     00EE 42000 ; INPUT PARAMETERS:
                                     00EE 42100 ;
                                     00EE 42200 ;	R6 - ADDRESS OF ONE STRING
                                     00EE 42300 ;	R7 - ADDRESS OF OTHER STRING
                                     00EE 42400 ;
                                     00EE 42500 ; OUTPUT PARAMETERS:
                                     00EE 42600 ;
                                     00EE 42700 ;	NONE
                                     00EE 42800 ;
                                     00EE 42900 ; IMPLICIT OUTPUTS:
                                     00EE 43000 ;
                                     00EE 43100 ;	R0 DESTROYED
                                     00EE 43200 ;
                                     00EE 43300 ; COMPLETION CODES:
                                     00EE 43400 ;
                                     00EE 43500 ;	Z-BIT SET OR CLEARED ACCORDING TO RESULT OF CMPC
                                     00EE 43600 ;
                                     00EE 43700 ;--
                                     00EE 43800 
                                     00EE 43900 NET$COMP_STRING::			; ENTER WITH JSB/BSB
            50            66     9A  00EE 44000 	MOVZBL	(R6),R0			; GET LTH OF COUNTED STRING
                          50     96  00F1 44100 	INCB	R0			; ACCOUNT FOR COUNT BYTE
            66            50     29  00F3 44200 	CMPC3	R0,(R6),(R7)		; TRY FOR STRING MATCH
                          67         00F6       
                                 05  00F7 44300 	RSB				; DONE
NETSUBR         - UTILITY SUBROUTINES                            22-AUG-1978 01:00:07   VAX-11 MACRO X0.3-11               Page  13
X01             CONVERT ASCII TO BINARY                                                                                          (1)

                                     00F8 44500 	.SBTTL	CONVERT ASCII TO BINARY
                                     00F8 44600 ;++
                                     00F8 44700 ;
                                     00F8 44800 ; FUNCTIONAL DESCRIPTION:
                                     00F8 44900 ;
                                     00F8 45000 ; NET$CVT_DTB
                                     00F8 45100 ; THE ROUTINE WORKS IN THE OBVIOUS MANNER OF ALL CONVERSION ROUTINES:
                                     00F8 45200 ; IT SCANS THE INPUT STRING AND CONVERTS EACH CHARACTER INTO ITS
                                     00F8 45300 ; NUMERICAL EQUIVALENT AND CHECKS IT FOR LEGALITY AGAINST THE RADIX.
                                     00F8 45400 ; THE NUMBER BEING ACCUMULATED IS THEN MULTIPLIED BY THE RADIX AND THE
                                     00F8 45500 ; NEW DIGIT IS ADDED IN. NON-RADIX CHARACTERS IN THE INPUT STRING OR
                                     00F8 45600 ; OVERFLOW FROM 32 BITS (UNSIGNED) CAUSE AN ERROR RETURN.
                                     00F8 45700 ;
                                     00F8 45800 ; CODE DUE TO ANDY GOLDSTEIN - [207,10]CVTATB
                                     00F8 45900 ;
                                     00F8 46000 ; CALLING SEQUENCE:
                                     00F8 46100 ;	CALL NET$CVT_DTB (COUNT,STRING,RESULT,MAX) ; CONVERT DECIMAL TO BINARY
                                     00F8 46200 ;
                                     00F8 46300 ; INPUT PARAMETERS:
                                     00F8 46400 ;	COUNT:	BYTE COUNT OF INPUT STRING
                                     00F8 46500 ;	STRING:	ADDRESS OF INPUT STRING
                                     00F8 46600 ;	MAX:	MAX BITS RETURNED IN RESULT
                                     00F8 46700 ;
                                     00F8 46800 ; OUTPUT PARAMETERS:
                                     00F8 46900 ;	RESULT:	ADDRESS TO STORE LONGWORD RESULT
                                     00F8 47000 ;
                                     00F8 47100 ; IMPLICIT OUTPUTS:
                                     00F8 47200 ;	NONE
                                     00F8 47300 ;
                                     00F8 47400 ; COMPLETION CODES:
                                     00F8 47500 ;	R0 = 1	SUCCESFUL CONVERSION
                                     00F8 47600 ;	   = 0	ILLEGAL CHARACTER OR ZERO BYTE COUNT
                                     00F8 47700 ;
                                     00F8 47800 ;--
                                     00F8 47900 
                                     00F8 48000 NET$CVT_DTB::				; ENTRY FOR DECIMAL CONVERT
                               0028  00F8 48100 	.WORD	^M<R3,R5>		; SAVE REGISTERS 2-5
                       04 AC     D5  00FA 48200 	TSTL	COUNT(AP)		; CHECK FOR ZERO COUNT
                          2A     13  00FD 48300 	BEQL	80$
                          50     7C  00FF 48400 	CLRQ	R0			; ZERO INITIAL NUMBER
                          53     7C  0101 48500 	CLRQ	R3			; AND STRING POINTER & SIGN
                                     0103 48600 
            55         08 BC43   9A  0103 48700 20$:	MOVZBL	@STRING(AP)[R3],R5	; GET NEXT CHARACTER
            55            30     C2  0108 48800 40$:	SUBL	#^A/0/,R5		; CONVERT DIGIT TO NUMBER
            0A            55     D1  010B 48900 	CMPL	R5,#10			; CHECK AGAINST RADIX
                          19     1E  010E 49000 	BGEQU	80$			; TOUGH LUCK.....
                                     0110 49100 
            50            0A     7A  0110 49200 	EMUL	#10,R0,R5,R0		; SCALE VALUE BY RADIX AND ADD DIGIT
            50            55         0113       
                          51     D5  0115 49300 	TSTL	R1			; CHECK FOR OVERFLOW
                          12     12  0117 49400 	BNEQ	90$
                                     0119 49500 
            53         04 AC     F2  0119 49600 60$:	AOBLSS	COUNT(AP),R3,20$	; LOOP FOR DIGITS
                          E5         011D       
                                     011E 49700 
            00            50     F0  011E 49800 	INSV	R0,#0,MAX(AP),@RESULT(AP) ; STORE RESULT
         0C BC         10 AC         0121       
NETSUBR         - UTILITY SUBROUTINES                            22-AUG-1978 01:00:07   VAX-11 MACRO X0.3-11               Page  14
X01             CONVERT ASCII TO BINARY                                                                                          (1)

            50            01     D0  0125 49900 	MOVL	#1,R0			; RETURN TRUE
                                 04  0128 50000 	RET
                                     0129 50100 ;
                                     0129 50200 ; TO HERE ON ANY BAD CHARACTER
                                     0129 50300 ;
                          50     D4  0129 50400 80$:	CLRL	R0			; RETURN FALSE
                                 04  012B 50500 90$:	RET
                                     012C 50600  
                                     012C 50700 	.END
NETSUBR         - UTILITY SUBROUTINES                            22-AUG-1978 01:00:07   VAX-11 MACRO X0.3-11               Page  15
SYMBOL TABLE                                                                                                                     (1)

ABD$C_ATTRIB   = 00000005            DYN$C_TQE      = 0000000F            IRP$V_SWAPIO   = 00000006            
ABD$C_FIB      = 00000001            DYN$C_TYPAHD   = 00000014            IRP$V_VIRTUAL  = 00000004            
ABD$C_LENGTH     00000008            DYN$C_UCB      = 00000010            IRP$W_ABCNT      0000003C            
ABD$C_NAME     = 00000002            DYN$C_VCB      = 00000011            IRP$W_BCNT       00000032            
ABD$C_RES      = 00000004            DYN$C_WCB      = 00000012            IRP$W_BOFF       00000030            
ABD$C_RESL     = 00000003            FIELD_COMMON     000000B5 R     03   IRP$W_CHAN       00000028            
ABD$C_WINDOW   = 00000000            GBL...         = 00000000            IRP$W_FUNC       00000020            
ABD$K_LENGTH     00000008            IRP$B_CARCON     00000038            IRP$W_OBCNT      0000003E            
ABD$L_USERVA     00000004            IRP$B_EFN        00000022            IRP$W_SIZE       00000008            
ABD$W_COUNT      00000002            IRP$B_PRI        00000023            IRP$W_STS        0000002A            
ABD$W_TEXT       00000000            IRP$B_RMOD       0000000B            IRP$W_TT_PRMPT   0000003C            
BIT...         = 00000000            IRP$B_TYPE       0000000A            MAX            = 00000010            
COUNT          = 00000004            IRP$C_LENGTH     0000004C            NET$AL_NAMBLKE   ********   X   03   
DDB$B_ACPCLASS   00000013            IRP$K_LENGTH     0000004C            NET$AL_NAMBLKS   ********   X   03   
DDB$B_TYPE       0000000A            IRP$L_AST        00000010            NET$BIN2ASC      000000DA RG    03   
DDB$C_LENGTH     00000034            IRP$L_ASTPRM     00000014            NET$CHECK_ASCII  00000007 RG    03   
DDB$K_LENGTH     00000034            IRP$L_DIAGBUF    00000044            NET$CHKLOCALAST  00000070 RG    03   
DDB$L_ACPD       00000010            IRP$L_IOQBL      00000004            NET$COMP_STRING  000000EE RG    03   
DDB$L_DDT        0000000C            IRP$L_IOQFL      00000000            NET$CVT_DTB      000000F8 RG    03   
DDB$L_LINK       00000000            IRP$L_IOSB       00000024            NET$C_NAMBLKSIZ  ********   X   03   
DDB$L_UCB        00000004            IRP$L_IOST1      00000034            NET$FIND_NAMBLK  00000022 RG    03   
DDB$T_DRVNAME    00000024            IRP$L_IOST2      00000038            NET$GB_AST_FLAG  ********   X   03   
DDB$T_NAME       00000014            IRP$L_MEDIA      00000034            NET$GET_NCB      0000007C RG    03   
DDB$W_SIZE       00000008            IRP$L_PID        0000000C            NET$GQ_IMAGE     ********   X   03   
DYN$C_ACB      = 00000002            IRP$L_SEGVBN     00000040            NET$GT_DSTNODE   ********   X   03   
DYN$C_ADP      = 00000001            IRP$L_SEQNUM     00000048            NET$LOCAL_AST    ********   X   03   
DYN$C_AQB      = 00000003            IRP$L_SVAPTE     0000002C            NET$MOVE_DSTNOD  0000009B RG    03   
DYN$C_BRDCST   = 0000001A            IRP$L_TT_TERM    00000038            NET$MOVE_FIELD   000000AE RG    03   
DYN$C_BUFIO    = 00000013            IRP$L_UCB        0000001C            NET$MOVE_IFIELD  000000B2 RG    03   
DYN$C_CEB      = 00000004            IRP$L_WIND       00000018            NET$MOVE_STRING  000000A0 RG    03   
DYN$C_CRB      = 00000005            IRP$M_BUFIO    = 00000001            NET$PART_DSTNOD  00000097 RG    03   
DYN$C_CXB      = 0000001B            IRP$M_CHAINED  = 00000020            NET$UP_COUNTER   00000000 RG    03   
DYN$C_DDB      = 00000006            IRP$M_COMPLX   = 00000008            PR$_ACCR       = 00000029            
DYN$C_DPT      = 0000001E            IRP$M_DIAGBUF  = 00000080            PR$_ACCS       = 00000028            
DYN$C_FCB      = 00000007            IRP$M_FUNC     = 00000002            PR$_ASTLVL     = 00000013            
DYN$C_FRK      = 00000008            IRP$M_MBXIO    = 00000400            PR$_ESP        = 00000001            
DYN$C_GSD      = 00000015            IRP$M_PAGIO    = 00000004            PR$_ICCS       = 00000018            
DYN$C_IDB      = 00000009            IRP$M_PHYSIO   = 00000100            PR$_ICR        = 0000001A            
DYN$C_IRP      = 0000000A            IRP$M_PRIVIO   = 00000200            PR$_IPL        = 00000012            
DYN$C_JPB      = 0000001F            IRP$M_SWAPIO   = 00000040            PR$_ISP        = 00000004            
DYN$C_KFH      = 00000026            IRP$M_VIRTUAL  = 00000010            PR$_KSP        = 00000000            
DYN$C_KFI      = 00000018            IRP$Q_NT_PRVMSK  0000003C            PR$_MAPEN      = 00000038            
DYN$C_LOG      = 0000000B            IRP$S_FCODE    = 00000006            PR$_NICR       = 00000019            
DYN$C_MTL      = 00000019            IRP$S_FMOD     = 0000000A            PR$_P0BR       = 00000008            
DYN$C_MVL      = 00000016            IRP$S_MODE     = 00000002            PR$_P0LR       = 00000009            
DYN$C_NDB      = 0000001C            IRP$V_BUFIO    = 00000000            PR$_P1BR       = 0000000A            
DYN$C_NET      = 00000017            IRP$V_CHAINED  = 00000005            PR$_P1LR       = 0000000B            
DYN$C_PBH      = 00000020            IRP$V_COMPLX   = 00000003            PR$_PCBB       = 00000010            
DYN$C_PCB      = 0000000C            IRP$V_DIAGBUF  = 00000007            PR$_PME        = 0000003D            
DYN$C_PDB      = 00000021            IRP$V_FCODE    = 00000000            PR$_RXCS       = 00000020            
DYN$C_PFL      = 00000023            IRP$V_FMOD     = 00000006            PR$_RXDB       = 00000021            
DYN$C_PIB      = 00000022            IRP$V_FUNC     = 00000001            PR$_SBIER      = 00000034            
DYN$C_PQB      = 0000000D            IRP$V_MBXIO    = 0000000A            PR$_SBIFS      = 00000030            
DYN$C_PTR      = 00000025            IRP$V_MODE     = 00000000            PR$_SBIMT      = 00000033            
DYN$C_RVT      = 0000000E            IRP$V_PAGIO    = 00000002            PR$_SBIQC      = 00000036            
DYN$C_SFT      = 00000024            IRP$V_PHYSIO   = 00000008            PR$_SBIS       = 00000031            
DYN$C_SSB      = 0000001D            IRP$V_PRIVIO   = 00000009            PR$_SBISC      = 00000032            
NETSUBR         - UTILITY SUBROUTINES                            22-AUG-1978 01:00:07   VAX-11 MACRO X0.3-11               Page  16
SYMBOL TABLE                                                                                                                     (1)

PR$_SBITA      = 00000035            UCB$B_ERTMAX     00000071            UCB$M_BSY      = 00000100            
PR$_SBR        = 0000000C            UCB$B_ESCAPE     0000004B            UCB$M_CANCEL   = 00000008            
PR$_SCBB       = 00000011            UCB$B_FEX        00000076            UCB$M_DEADMO   = 00000400            
PR$_SID        = 0000003E            UCB$B_FIPL       0000000B            UCB$M_DELMBX   = 00000002            
PR$_SIRR       = 00000014            UCB$B_LOCSRV     0000003C            UCB$M_DIAGBUF  = 00000002            
PR$_SISR       = 00000015            UCB$B_OFFNDX     00000094            UCB$M_DX_WRITE = 00000008            
PR$_SLR        = 0000000D            UCB$B_OFFRTC     00000095            UCB$M_ECC      = 00000001            
PR$_SSP        = 00000002            UCB$B_REMSRV     0000003D            UCB$M_ERLOGIP  = 00000004            
PR$_TBIA       = 00000039            UCB$B_SECTORS    0000003C            UCB$M_INT      = 00000002            
PR$_TBIS       = 0000003A            UCB$B_SLAVE      00000074            UCB$M_INTTYPE  = 00000080            
PR$_TODR       = 0000001B            UCB$B_SPR        00000075            UCB$M_JOB      = 00000001            
PR$_TXCS       = 00000022            UCB$B_STATE      00000052            UCB$M_MOUNTING = 00000200            
PR$_TXDB       = 00000023            UCB$B_TRACKS     0000003D            UCB$M_NOCNVRT  = 00000004            
PR$_USP        = 00000003            UCB$B_TYPE       0000000A            UCB$M_NT_BFROVF= 00000004            
PR$_WCSA       = 0000002C            UCB$B_VERTSZ     0000003F            UCB$M_NT_BREAK = 00000020            
PR$_WCSD       = 0000002D            UCB$C_LENGTH     00000074            UCB$M_NT_NAME  = 00000010            
PSL$C_EXEC     = 00000001            UCB$C_LOGLNK   = 00000001            UCB$M_ONLINE   = 00000010            
PSL$C_KERNEL   = 00000000            UCB$K_LENGTH     00000074            UCB$M_POWER    = 00000020            
PSL$C_SUPER    = 00000002            UCB$L_AMB        00000054            UCB$M_PRMMBX   = 00000001            
PSL$C_USER     = 00000003            UCB$L_ASTQBL     00000010            UCB$M_TIM      = 00000001            
PSL$M_CM       = 80000000            UCB$L_ASTQFL     0000000C            UCB$M_TIMOUT   = 00000040            
PSL$M_CURMOD   = 03000000            UCB$L_CPID       0000005C            UCB$M_TT_NOTIF = 00000004            
PSL$M_DV       = 00000080            UCB$L_CRB        00000020            UCB$M_TT_TIMO  = 00000002            
PSL$M_FPD      = 08000000            UCB$L_DDB        00000024            UCB$M_UNLOAD   = 00001000            
PSL$M_FU       = 00000040            UCB$L_DEVCHAR    00000034            UCB$M_VALID    = 00000800            
PSL$M_IPL      = 001F0000            UCB$L_DEVDEPEND  0000003C            UCB$S_LNKPRI   = 00000002            
PSL$M_IS       = 04000000            UCB$L_DPC        00000080            UCB$S_LTYPE    = 00000002            
PSL$M_IV       = 00000020            UCB$L_DUETIM     0000005C            UCB$T_PARTNER    0000000C            
PSL$M_PRVMOD   = 00C00000            UCB$L_DX_BFPNT   0000009C            UCB$V_BACKP    = 00000005            
PSL$M_SAFBITS  = 000037FF            UCB$L_DX_BUF     00000098            UCB$V_BSY      = 00000008            
PSL$M_TBIT     = 00000010            UCB$L_DX_RXDB    000000A0            UCB$V_CANCEL   = 00000003            
PSL$M_TP       = 40000000            UCB$L_EMB        00000078            UCB$V_DEADMO   = 0000000A            
PSL$S_CURMOD   = 00000002            UCB$L_FIRST      00000014            UCB$V_DELMBX   = 00000001            
PSL$S_IPL      = 00000005            UCB$L_FPC        0000000C            UCB$V_DIAGBUF  = 00000001            
PSL$S_PRVMOD   = 00000002            UCB$L_FQBL       00000004            UCB$V_DX_WRITE = 00000003            
PSL$V_CM       = 0000001F            UCB$L_FQFL       00000000            UCB$V_ECC      = 00000000            
PSL$V_CURMOD   = 00000018            UCB$L_FR3        00000010            UCB$V_ERLOGIP  = 00000002            
PSL$V_DV       = 00000007            UCB$L_FR4        00000014            UCB$V_INT      = 00000001            
PSL$V_FPD      = 0000001B            UCB$L_IOQBL      00000044            UCB$V_INTTYPE  = 00000007            
PSL$V_FU       = 00000006            UCB$L_IOQFL      00000040            UCB$V_JOB      = 00000000            
PSL$V_IPL      = 00000010            UCB$L_IRP        0000004C            UCB$V_LNKPRI   = 00000006            
PSL$V_IS       = 0000001A            UCB$L_LINK       0000002C            UCB$V_LTYPE    = 00000000            
PSL$V_IV       = 00000005            UCB$L_LOGADR     00000064            UCB$V_MOUNTING = 00000009            
PSL$V_PRVMOD   = 00000016            UCB$L_MAXBLOCK   00000084            UCB$V_MSGACK   = 00000004            
PSL$V_TBIT     = 00000004            UCB$L_MEDIA      0000008C            UCB$V_MSGFLO   = 00000003            
PSL$V_TP       = 0000001E            UCB$L_NT_DATSSB  00000074            UCB$V_NOCNVRT  = 00000002            
RESULT         = 0000000C            UCB$L_NT_INTSSB  00000078            UCB$V_NT_BFROVF= 00000002            
STRING         = 00000008            UCB$L_OPCNT      00000060            UCB$V_NT_BREAK = 00000005            
UCB$B_AMOD       00000053            UCB$L_OWNUIC     0000001C            UCB$V_NT_NAME  = 00000004            
UCB$B_CEX        00000077            UCB$L_PID        00000028            UCB$V_ONLINE   = 00000004            
UCB$B_CM1        0000004A            UCB$L_RQBL       00000004            UCB$V_POWER    = 00000005            
UCB$B_CM2        0000004B            UCB$L_RQFL       00000000            UCB$V_PRMMBX   = 00000000            
UCB$B_DEVCLASS   00000038            UCB$L_SVAPTE     00000068            UCB$V_SEGFLO   = 00000002            
UCB$B_DEVTYPE    00000039            UCB$L_SVPN       00000064            UCB$V_TIM      = 00000000            
UCB$B_DIPL       00000052            UCB$L_TTCHAR     0000003C            UCB$V_TIMOUT   = 00000006            
UCB$B_DX_SCTCNT  000000A6            UCB$L_VCB        00000030            UCB$V_TT_NOTIF = 00000002            
UCB$B_ERTCNT     00000070            UCB$M_BACKP    = 00000020            UCB$V_TT_TIMO  = 00000001            
NETSUBR         - UTILITY SUBROUTINES                            22-AUG-1978 01:00:07   VAX-11 MACRO X0.3-11               Page  17
SYMBOL TABLE                                                                                                                     (1)

UCB$V_UNLOAD   = 0000000C            
UCB$V_VALID    = 0000000B            
UCB$W_BCNT       0000006E            
UCB$W_BCR        00000096            
UCB$W_BOFF       0000006C            
UCB$W_BUFQUO     00000018            
UCB$W_BYTESTOGO  0000003E            
UCB$W_CHARGE     0000004A            
UCB$W_CYLINDERS  0000003E            
UCB$W_DA         0000008C            
UCB$W_DC         0000008E            
UCB$W_DEVBUFSIZ  0000003A            
UCB$W_DEVSTS     0000005A            
UCB$W_DIRSEQ     00000088            
UCB$W_DSTADDR    00000018            
UCB$W_DX_BCR     000000A4            
UCB$W_EC1        00000090            
UCB$W_EC2        00000092            
UCB$W_ERRCNT     00000072            
UCB$W_FUNC       0000007E            
UCB$W_MB_SEED    FFFFFFFC            
UCB$W_MSGCNT     00000016            
UCB$W_MSGMAX     00000014            
UCB$W_NT_CHAN    0000007C            
UCB$W_OFFSET     0000008A            
UCB$W_REFC       00000050            
UCB$W_SIZE       00000008            
UCB$W_SRCADDR    0000001A            
UCB$W_STS        00000058            
UCB$W_UNIT       00000048            
UCB$W_VPROT      0000001A            


PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            FFFFFFFE      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
NET_CONNECT      0000012C      03     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD  NOWRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
15200. BYTES LEFT IN FREE MEMORY POOL.
2994. BYTES OF RECLAIMED MEMORY.
OBJ$:NETSUBR,LIS$:NETSUBR/-SP=EXECML$/ML,M1/ML,M2/ML,SRC$:NETSUBR
52 MLB DIR RDS - 592 GETS TO DEFINE 18 MACROS. 41 INTER. FILE WRITES. 
