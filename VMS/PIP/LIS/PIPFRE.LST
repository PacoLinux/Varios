PIPFRE M0110, PIP - PRINT FREE 	MACRO M1110  22-AUG-78 01:34
TABLE OF CONTENTS

     7-    1	**** PIPFRE VERSION M0110 ****
     8-   67	PRINT FREE SPACE ON VOLUME
    10-  312	FORMAT STRINGS
PIPFRE M0110, PIP - PRINT FREE 	MACRO M1110  22-AUG-78 01:34  PAGE 7


      1						.TITLE	PIPFRE M0110, PIP - PRINT FREE SPACE ON VOLUME
						.SBTTL	**** PIPFRE VERSION M0110 ****
						.IDENT	/M0110/
      2					; ALTERED:
      3					; ANDREW C. GOLDSTEIN  1 MAR 76  14:30
      4					; ALTERED WEDNESDAY 8-JAN-75 12:30
      5					; ALTERED TUESDAY 19-NOV-74 16:40
      6					;	BLS015	21-JUN-77	PUT NMBLK$ IN IMPURE FOR IAS
      7					;
      8					; B. SCHREIBER	27-AUG-77
      9					;
     10					;	BLS025 -- ADD EXIT WITH STATUS
     11					;
     12					; B. SCHREIBER	3-JUN-78
     13					;
     14					;	BLS052 -- INTEGRATE ODS-2 CHANGES DONE BY A. GOLDSTEIN AND
     15					;		E. MARISON
     16					;
     17					; COPYRIGHT (C) 1978, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.
     18					; COPYRIGHT (C) 1977, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.
     19					; COPYRIGHT 1974, DIGITAL EQUIPMENT CORP., MAYNARD MASS.
     20
     21					; THIS SOFTWARE IS FURNISHED TO PURCHASER UNDER A LICENSE FOR USE
     22					; ON A SINGLE COMPUTER SYSTEM AND CAN BE COPIED (WITH INCLUSION
     23					; OF DEC'S COPYRIGHT NOTICE) ONLY FOR USE IN SUCH SYSTEM, EXCEPT
     24					; AS MAY OTHERWISE BE PROVIDED IN WRITING BY DEC.
     25
     26					; THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
     27					; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
     28					; EQUIPMENT CORPORATION.
     29
     30					; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY
     31					; OF ITS SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
     32					;
     33					; PETER H. LIPMAN 8-NOV-74
     34					;
     35	000000					FLDSOF			;DEFINE DESCRIPTOR POINTER OFFSETS
     36						.MCALL	CSI$
     37	000000					CSI$			;DEFINE THE CSI CONTROL BLOCK OFFSETS
     38
     39						.IF	GT,R$$11M
     40						.MACRO	OPEN$	FDB,FACC
     41						.MCALL	OFNB$
     42						OFNB$	FDB,<FACC>
     43						.ENDM	OPEN$
     44						.ENDC
     45
     46						.MCALL	CALL,RETURN,FDOP$R,FDAT$R,FDRC$R,FDBK$R,NMBLK$
     47						.MCALL	OPEN$,QIO$S,WTSE$S,READ$,WAIT$
     48
     49	000000					IMPURE
     50	000000				MAXLBN:	.BLKW	2		;MAXIMUM NO. OF BLOCKS ON VOLUME
     51	000004				NBTBLK:	.BLKW	1		;NO. OF BIT MAP BLOCKS ON VOLUME
     52	000006				MOPRM:	.BLKW	2		;PARAMETER STORAGE FOR CALL TO EDTMG
     53						.IF DF 	O$$DS2								;BLS052
     54		000002 				ODS2CD = 2		; ODS2 STRUCTURE CODE				;BLS052
     55	000012				NBLKCL:	.BLKW	1		; # OF BLOCKS/CLUSTER				;BLS052
PIPFRE M0110, PIP - PRINT FREE 	MACRO M1110  22-AUG-78 01:34  PAGE 7-1
**** PIPFRE VERSION M0110 ****

     56						.ENDC									;BLS052
     57
     58
     59	000014					IMPURE
     60
     61	000014				FRDFNB:	NMBLK$	BITMAP,SYS,1,SY,0
     62
     63	000000					.PSECT
     64
     65	000000					MSG	MFDN,<[0,0]>
PIPFRE M0110, PIP - PRINT FREE 	MACRO M1110  22-AUG-78 01:34  PAGE 8
PRINT FREE SPACE ON VOLUME

     67						.SBTTL	PRINT FREE SPACE ON VOLUME
     68
     69	000000					PURE.I
     70
     71	000000				.FREE::
     72	000000	005767 	000000G			TST	INSPEC		;NO INPUT SPECIFER ALLOWED
     73	000004	001402 				BEQ	10$		; BRANCH IF ALL OK				;BLS052
     74	000006	000167 	000404 			JMP	90$		; OTHERWISE  SYNTAX ERROR			;BLS052
     75	000012	032767 	000033 	000000G	10$:	BIT	#CS.DIF!CS.NMF!CS.WLD!CS.MOR,OUSPEC				;BLS052
     76	000020	001176 				BNE	90$		;BRANCH IF SYNTAX ERROR				;**-2
     77	000022	012701 	001000 			MOV	#1000,R1
     78	000026					CALL	.DYALC		;ALLOCATE A BUFFER TO READ THE BITMAP
     79	000032					FDRC$R	#FDBIN,#FD.RWM
     80	000044					FDBK$R	R0,.DYBUF,#1000
     81	000060					FDOP$R	R0,,#OFNPT,#FRDFNB
     82	000074	016767 	000000G	000046'		MOV	.DEFDV,FRDFNB+N.DVNM ; USE DEFAULT DEVICE
     83	000102	016767 	000000G	000050'		MOV	.DEFUN,FRDFNB+N.UNIT ; AND DEFAULT UNIT
     84	000110	012760 	000000G	000000G		MOV	#STBLK,F.STBK(R0) ;READ STATISTICS BLOCK ON OPEN
     85	000116	012767 	000005 	000004G		MOV	#MFDNSZ,OFNPT+N.DIRD ;FORCE MFD DIRECTORY NAME
     86	000124	012767 	000000'	000006G		MOV	#MFDNMG,OFNPT+N.DIRD+2
     87
     88						.IF	GT,R$$11M
     89	000132					CALL	PRSREG		;SET UP FOR CALL TO PARSE
     90	000136					CALL	.PARSE
     91	000142	103007 				BCC	20$		;BRANCH IF SUCCESSFUL
     92	000144					CALL	PRSERR		;ISSUE THE ERROR MESSAGE
     93	000150	012767 	000000G	000000G		MOV	#EX$ERR,.EXSTS	;SET ERROR STATUS
     94	000156	000167 	000000G			JMP	CLOSX
     95	000162				20$:
     96						.ENDC
     97
     98	000162					OPEN$	R0,#FO.RD!FA.SHR
     99	000174	103003 				BCC	60$
    100	000176				50$:	ERROUX	FR01,1,0	;FAILED TO OPEN BITMAP FILE
	000176	104433 				TRAP	X
	000200	000000G				.WORD	FR01SZ
	000202	000000G				.WORD	FR01MG
    101	000204	016705 	000006G		60$:	MOV	STBLK+6,R5
    102	000210	010560 	000002G			MOV	R5,F.HIBK+2(R0)	;FIX UP FDB SO EOF IS RIGHT
    103	000214	005205 				INC	R5
    104						.IF DF	O$$DS2								;BLS052
    105	000216	005760 	000002G			TST	F.EFBK+2(R0)	; IF EOF SETUP					;BLS052
    106	000222	001004 				BNE	65$		; THEN BRANCH					;BLS052
    107						.ENDC									;BLS052
    108	000224	010560 	000002G			MOV	R5,F.EFBK+2(R0)	;EOF = 1ST BYTE OF NEXT BLOCK
    109	000230	005060 	000000G			CLR	F.FFBY(R0)
    110	000234				65$:				; REF TAG					;BLS052
    111	000234					READ$	R0		;READ VBN 1
    112	000240	103471 				BCS	RDERR
    113	000242					WAIT$	R0
    114	000246	103466 				BCS	RDERR		;BRANCH IF ERROR
    115	000250	016701 	000000G			MOV	.DYBUF,R1
    116						.IF DF	O$$DS2								;BLS052
    117					;										;BLS052
    118					; ODS-2 SUPPORT									;BLS052
    119					;										;BLS052
    120	000254	105721 				TSTB	(R1)+		; BUMP TO STRUCTURE BYTE			;BLS052
PIPFRE M0110, PIP - PRINT FREE 	MACRO M1110  22-AUG-78 01:34  PAGE 8-1
PRINT FREE SPACE ON VOLUME

    121	000256	122721 	000002 			CMPB	#ODS2CD,(R1)+	; IF NOT ODS2 THEN BRANCH			;BLS052
    122	000262	001015 				BNE	70$								;BLS052
    123	000264	012167 	000012'			MOV	(R1)+,NBLKCL	; GET CULSTER SIZE				;BLS052
    124	000270	012167 	000002'			MOV	(R1)+,MAXLBN+2	; GET MAX # OF LBN ON VOLUME			;BLS052
    125	000274	011167 	000000'			MOV	(R1),MAXLBN							;BLS052
    126	000300	016067 	000002G	000004'		MOV	F.EFBK+2(R0),NBTBLK ; # OF BITMAP BLOCKS EQUALS			;BLS052
    127	000306	162767 	000002 	000004'		SUB	#2,NBTBLK	; EOF BLOCK - 2					;BLS052
    128	000314	000420 				BR	75$		; JOIN COMMON CODE				;BLS052
    129					;										;BLS052
    130	000316				70$:				; ODS1 CODE NOTE R1 = BUFFER ADDR + 2		;BLS052
    131	000316	012767 	000001 	000012'		MOV	#1,NBLKCL	; CLUSTER SIZE IS ALWAYS 1 FOR ODS1		;BLS052
    132					;										;BLS052
    133					; END OF ODS-2 SUPPORT								;BLS052
    134					;										;BLS052
    135	000324	116103 	000001 			MOVB	1(R1),R3	; NO. OF BIT MAP BLOCKS				;BLS052
    136									; AT OFFSET 3 FROM BEGINNING OF BUFFER		;BLS052
    137						.IFF									;BLS052
    138						MOVB	3(R1),R3	;NO. OF BIT MAP BLOCKS
    139						.ENDC									;BLS052
    140	000330	010367 	000004'			MOV	R3,NBTBLK
    141	000334	006303 				ASL	R3		;CALCULATE ADDRESS OF MAXLBN
    142	000336	006303 				ASL	R3
    143	000340	060301 				ADD	R3,R1
    144						.IF DF	O$$DS2								;BLS052
    145	000342	062701 	000002 			ADD	#2,R1		; R1 IS +2 FROM BEGINNING OF BUFFER		;BLS052
    146									; 4 PLUS 2 WORDS FOR EACH BIT MAP BLOCK		;BLS052
    147						.IFF									;BLS052
    148						ADD	#4,R1		; 4 PLU2 2 WORDS FOR EACH BIT MAP BLOCK		;BLS052
    149						.ENDC									;BLS052
    150	000346	012167 	000000'			MOV	(R1)+,MAXLBN							;BLS052
    151	000352	011167 	000002'			MOV	@R1,MAXLBN+2							;BLS052
    152	000356				75$:				; REF TAG					;BLS052
    153					;										;**-3
    154					; R0=FDB ADDRESS OF BITMAP, FILE IS OPEN
    155	000356					CALL	MAPFRE		;GET COUNT OF FREE BLOCKS
    156	000362	012703 	000006'			MOV	#MOPRM,R3
    157	000366	010304 				MOV	R3,R4
    158	000370	010013 				MOV	R0,@R3
    159	000372	062723 	000000G			ADD	#F.DVNM,(R3)+	;ADDRESS OF DEVICE NAME
    160	000376	016023 	000000G			MOV	F.UNIT(R0),(R3)+ ;UNIT NUMBER
    161	000402	012703 	000053'			MOV	#LO45MG,R3
    162	000406					CALL	PRTFRE
    163	000412	000167 	000000G			JMP	CLOSX
    164	000416				90$:	ERROUX	CR01		;SYNTAX ERROR
	000416	104403 				TRAP	X
	000420	000000G				.WORD	CR01SZ
	000422	000000G				.WORD	CR01MG
    165	000424				RDERR:	ERROUX	CP13,0,0	;READ ERROR
	000424	104427 				TRAP	X
	000426	000000G				.WORD	CP13SZ
	000430	000000G				.WORD	CP13MG
PIPFRE M0110, PIP - PRINT FREE 	MACRO M1110  22-AUG-78 01:34  PAGE 9
PRINT FREE SPACE ON VOLUME

    167					;+
    168					; PRINT THE FREE BLOCK INFORMATION
    169					; CALLING SEQUENCE:
    170					;	CALL	PRTFRE
    171					; INPUTS:
    172					;	R1,R2 = FREE BLOCK COUNT (R2 = LOW ORDER BITS)
    173					;	R3=FORMAT STRING FOR INITIAL MESSAGE
    174					;	R4=PARAMETER BLOCK ADDRESS FOR INITIAL MESSAGE
    175					;	MAXLBN, MAXLBN+2 = TOTAL BLOCKS ON DEVICE
    176					; OUTPUTS:
    177					;	ALL REGISTERS ALTERED
    178					; OPERATION:
    179					;	CALL EDMSG WITH FIRST PART OF MESSAGE AS SPECIFIED IN
    180					; THE FORAMT STRING AND PARAMETER BLOCK ADDRESS
    181					;	THEN IT FORMATS THE STRING:
    182					;	NNN. BLOCKS FREE, NNN. BLOCKS USED OUT OF NNN.
    183					; WHERE THE NNN VALUES ARE ALL COVERTED FROM DOUBLE PRECISION BINARY
    184					;-
    185	000432	010246 			PRTFRE:	MOV	R2,-(SP)
    186	000434	010146 				MOV	R1,-(SP)	;SP = ADR OF DBL PRECISION FREE COUNT
    187	000436	010301 				MOV	R3,R1		;SET UP TO CALL EDMSG
    188	000440	010402 				MOV	R4,R2
    189	000442	012700 	000000G			MOV	#LINBUF,R0	;CONVERTS STRING INTO OUTPUT BUFFER
    190	000446					CALL	$EDMSG
    191	000452	010601 				MOV	SP,R1		;R1=ADR OF 2 WORD FREE COUNT
    192	000454	005002 				CLR	R2		;ZERO SUPPRESS
    193	000456					CALL	$CDDMG		;CONVERT DBL PRECISION TO DECIMAL MAG
    194	000462	012701 	000005'			MOV	#LO40MG,R1
    195	000466	005002 				CLR	R2
    196	000470					CALL	$EDMSG		;". BLOCKS FREE "
    197					;
    198					; CALCULATE HOW MANY BLOCKS ARE USED
    199	000474	016701 	000000'			MOV	MAXLBN,R1
    200	000500	016702 	000002'			MOV	MAXLBN+2,R2
    201	000504	166602 	000002 			SUB	2(SP),R2
    202	000510	005601 				SBC	R1
    203	000512	162601 				SUB	(SP)+,R1
    204	000514	010216 				MOV	R2,@SP
    205	000516	010146 				MOV	R1,-(SP)
    206	000520	010601 				MOV	SP,R1		;R1=ADR OF 2 WORD USED COUNT
    207	000522	005002 				CLR	R2		;ZERO SUPPRESS
    208	000524					CALL	$CDDMG		;CONVERT TO MAGNITUDE DECIMAL
    209	000530	022626 				CMP	(SP)+,(SP)+	;CLEAR 2 WORDS FROM STACK
    210	000532	012701 	000025'			MOV	#LO41MG,R1
    211	000536	005002 				CLR	R2
    212	000540					CALL	$EDMSG		;". BLOCKS USED OUT OF "
    213	000544	012701 	000000'			MOV	#MAXLBN,R1	;R1=ADR OF 2 WORD TOTAL BLOCK COUNT
    214	000550	005002 				CLR	R2
    215	000552					CALL	$CDDMG
    216	000556	112720 	000056 			MOVB	#'.,(R0)+
    217	000562	112720 	000015 			MOVB	#15,(R0)+	;ADD CR
    218	000566	112720 	000012 			MOVB	#12,(R0)+	;AND LF
    219	000572	162700 	000000G			SUB	#LINBUF,R0	;R0=NO. OF BYTES TO WRITE
    220	000576					QIO$S	#IO.WVB,#CMOLUN,#FNAEFN,,,,<#LINBUF,R0,#0>
    221	000644	103405 				BCS	20$
    222	000646					WTSE$S	#FNAEFN
    223	000660				20$:	RETURN
PIPFRE M0110, PIP - PRINT FREE 	MACRO M1110  22-AUG-78 01:34  PAGE 10
PRINT FREE SPACE ON VOLUME

    225					;
    226					; COUNT THE FREE BLOCKS IN A BIT MAP
    227					; INPUTS:
    228					;	R0=FDB OF DESIRED BIT MAP
    229					; FDB SET UP TO GET FIRST BITMAP BLOCK						;BLS052
    230					;	NBTBLK = NO. OF BIT MAP BLOCKS TO CHECK					;BLS052
    231					; OUTPUTS:									;**-2
    232					;	R1,R2=NO. OF FREE BLOCKS
    233					;	R0 PRESERVED, R3-R5 ALTERED
    234	000662	010046 			MAPFRE:	MOV	R0,-(SP)
    235						.IF NDF	O$$DS2								;BLS052
    236						MOV	MAXLBN,R4
    237						MOV	MAXLBN+2,R5	;NUMBER OF BLOCKS TO CHECK
    238						.ENDC									;BLS052
    239	000664	016703 	000004'			MOV	NBTBLK,R3	;NUMBER OF BIT MAP BLOCKS
    240	000670	005002 				CLR	R2
    241	000672	005001 				CLR	R1
    242	000674	011600 			10$:	MOV	@SP,R0
    243	000676					CALL	BITCNT
    244						.IF NDF	O$$DS2								;BLS052
    245						ADD	R0,R2
    246						ADC	R1
    247						SUB	#10000,R5
    248						SBC	R4
    249						.ENDC									;BLS052
    250	000702					SOB	R3,10$
    251	000706	012600 				MOV	(SP)+,R0
    252	000710					RETURN
    253					;
    254						.IF DF	O$$DS2								;BLS052
    255					; UPDATE THE FREE BLOCKS BASED UPON THE BIT MAP BLOCK ABOUT TO BE READ		;BLS052
    256					; INPUTS:									;BLS052
    257					;	R0=FDB OF BIT MAP FILE, RECORD NUMBER SET TO NEXT BLOCK TO READ		;BLS052
    258					;R1,R2 CURRENT COUNT OF FREE BLOCKS						;BLS052
    259					; OUTPUTS:									;BLS052
    260					;R1,R2 UPDATED COUNT OF FREE BLOCKS						;BLS052
    261					;R1,R4,R5 ARE DESTORYED								;BLS052
    262					;R3 IS PRESERVED								;BLS052
    263						.IFF									;BLS052
    264					; COUNT THE FREE BLOCKS IN THE BIT MAP BLOCK ABOUT TO BE READ
    265					; INPUTS:
    266					;	R0=FDB OF BIT MAP FILE, RECORD NUMBER SET TO NEXT BLOCK TO READ
    267					;	R4,R5=NO. OF LOGICAL BLOCKS LEFT TO CHECK IN BITMAP
    268					; OUTPUTS:
    269					;	R0=COUNT OF FREE BLOCKS
    270					;	R1-R5 PRESERVED
    271						.ENDC									;BLS052
    272	000712				BITCNT:	READ$	R0
    273	000716	103427 				BCS	60$
    274	000720					WAIT$	R0
    275	000724	103424 				BCS	60$
    276						.IF DF	O$$DS2								;BLS052
    277	000726	010346 				MOV	R3,-(SP)	; SAVE R3					;BLS052
    278	000730	012704 	000400 			MOV	#256.,R4	;NO. OF WORDS IN BITMAP				;BLS052
    279	000734	016703 	000000G			MOV	.DYBUF,R3	;R3=ADDRESS OF BITMAP BLOCK			;BLS052
    280	000740	012705 	000020 		20$:	MOV	#16.,R5		; NO. OF BITS PER WORD				;BLS052
    281	000744	012300 				MOV	(R3)+,R0	; GET NEXT WORD TO R0				;BLS052
PIPFRE M0110, PIP - PRINT FREE 	MACRO M1110  22-AUG-78 01:34  PAGE 10-1
PRINT FREE SPACE ON VOLUME

    282	000746	000241 			30$:	CLC									;BLS052
    283	000750	006000 				ROR	R0								;BLS052
    284	000752	103003 				BCC	40$								;BLS052
    285	000754	066702 	000012'			ADD	NBLKCL,R2	; UPDATE # OF FREE BLOCKS			;BLS052
    286	000760	005501 				ADC	R1		; 						;BLS052
    287	000762				40$:	SOB	R5,30$		; BRANCH IF MORE BITS				;BLS052
    288	000766					SOB	R4,20$		; BRANCH IF MORE WORDS				;BLS052
    289	000772	012603 				MOV	(SP)+,R3	; RESTORE R3					;BLS052
    290						.IFF									;BLS052
    291						JSR	R5,.SAVR1	;SAVE REGISTERS R1-R5
    292						CLR	R0		;INIT FREE BLOCK COUNTER
    293						TST	R4		;IF HIGH ORDER BITS OF LBN COUNT NOT 0
    294						BEQ	10$
    295						MOV	#10000,R5	;GUARANTEE THAT WE CHECK ALL BITS
    296					10$:	MOV	#256.,R4	;NO. OF WORDS
    297						MOV	.DYBUF,R3	;R3=ADDRESS OF BITMAP BLOCK
    298					20$:	MOV	#16.,R2		;NO. OF BITS PER WORD
    299						MOV	(R3)+,R1	;GET NEXT WORD TO R1
    300					30$:	CLC
    301						ROR	R1
    302						BCC	40$
    303						INC	R0		;COUNT BITS THAT ARE ON
    304					40$:	DEC	R5
    305						BEQ	50$		;BRANCH IF RUN OUT OF BLOCKS TO CHECK
    306						SOB	R2,30$
    307						SOB	R4,20$
    308						.ENDC									;BLS052
    309	000774				50$:	RETURN
    310	000776	000167 	177422 		60$:	JMP	RDERR
    311
    312						.SBTTL	FORMAT STRINGS
    313	000000					.PSECT
    314
    315	000000					MSGZ	LO40,<. BLOCKS FREE, >
    316	000000					MSGZ	LO41,<. BLOCKS USED OUT OF >
    317	000000					MSGZ	LO45,<%N%N%2A%O: HAS >
    318						.EVEN
    319					;
    320					;
    321		000001 				.END
PIPFRE M0110, PIP - PRINT FREE 	MACRO M1110  22-AUG-78 01:34  PAGE 10-2
SYMBOL TABLE

AB.CDT  000105   	C.CMLD= 000002   	F.HIBK= ****** GX	N.FID = 000000   	S.APPD= 000010
AB.CHU  000064   	C.DEVD= 000006   	F.RACC= ****** GX	N.FLID= 000016   	S.FIDS= 000014
AB.EXP  000122   	C.DIRD= 000012   	F.STBK= ****** GX	N.FNAM= 000006   	S.FNAM= 000006
AB.FNU  000000   	C.DSDS= 000006   	F.UNIT= ****** GX	N.FNMD= 000010   	S.FNB = 000036
AB.FP   000062   	C.FILD= 000016   	INSPEC= ****** GX	N.FTYP= 000014   	S.FNBW= 000017
AB.FSQ  000002   	C.MKW1= 000024   	IO.WVB= ****** GX	N.FVER= 000016   	S.FNTY= 000004
AB.GC   000061   	C.MKW2= 000026   	LINBUF= ****** GX	N.NEXT= 000022   	S.FTYP= 000002
AB.NAM  000006   	C.SIZE= 000054   	LO40MG= 000005R     003	N.SPEC= 000014   	S.NFEN= 000020
AB.PC   000060   	C.STAT= 000001   	LO40SZ= 000020   	N.STAT= 000020   	X     = 000027
AB.RDT  000070   	C.SWAD= 000022   	LO41MG= 000025R     003	N.UNIT= 000034   	$CDDMG= ****** GX
AB.REV  000066   	C.TYPR= 000000   	LO41SZ= 000026   	ODS2CD= 000002   	$EDMSG= ****** GX
AB.UAT  000020   	EX$ERR= ****** GX	LO45MG= 000053R     003	OFNPT = ****** GX	$$$ARG= 000002
BITCNT  000712R     004	FA.SHR= ****** GX	LO45SZ= 000020   	OUSPEC= ****** GX	.DEFDV= ****** GX
CLOSX = ****** GX	FDBIN = ****** GX	MAPFRE  000662R     004	O$$DS2= 000001   	.DEFUN= ****** GX
CMOLUN= ****** GX	FD.RWM= ****** GX	MAXLBN  000000R     002	PAR$$$= 000000   	.DYALC= ****** GX
CP13MG= ****** GX	FNAEFN= ****** GX	MFDNMG= 000000R     003	PRSERR= ****** GX	.DYBUF= ****** GX
CP13SZ= ****** GX	FO.RD = ****** GX	MFDNSZ= 000005   	PRSREG= ****** GX	.EXSTS= ****** GX
CR01MG= ****** GX	FRDFNB  000014R     002	MOPRM   000006R     002	PRTFRE  000432R     004	.FREE   000000RG    004
CR01SZ= ****** GX	FR01MG= ****** GX	NBLKCL  000012R     002	RDERR   000424R     004	.OPFNB= ****** G
CS.DIF= 000002   	FR01SZ= ****** GX	NBTBLK  000004R     002	R$$DPB= 000001   	.PARSE= ****** GX
CS.DVF= 000004   	F.BKDS= ****** GX	NB.NXD= 020000   	R$$DYM= 000001   	.READ = ****** G
CS.EQU= 000040   	F.DFNB= ****** GX	NB.WLV= 010000   	R$$EIS= 000000   	.WAIT = ****** G
CS.INP= 000001   	F.DSPT= ****** GX	N.DEVD= 000000   	R$$MSG= 000000   	...PC1= 000000
CS.MOR= 000020   	F.DVNM= ****** GX	N.DID = 000024   	R$$VMS= 000001   	...PC2= 000050R     002
CS.NMF= 000001   	F.EFBK= ****** GX	N.DIRD= 000004   	R$$11M= 000001   	...PC3= 000000
CS.OUT= 000002   	F.FACC= ****** GX	N.DVNM= 000032   	STBLK = ****** GX	...TPC= 000036
CS.WLD= 000010   	F.FFBY= ****** GX

. ABS.	000131	   000
      	000000	   001
IMPURE	000052	   002
MSGSTR	000073	   003
PURE$I	001002	   004
ERRORS DETECTED:  0

VIRTUAL MEMORY USED:  5545 WORDS  ( 22 PAGES)
DYNAMIC MEMORY:  6996 WORDS  ( 26 PAGES)
ELAPSED TIME:  00:00:31
OBJ$:PIPFRE,LIS$:PIPFRE/-SP=SRC$:PIPMAC,PIPFRE
