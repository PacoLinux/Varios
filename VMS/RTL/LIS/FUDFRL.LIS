
; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 1
;
;00100  0001	MODULE FOR$$FUDF_RL (	! FORTRAN list-directed input, UDF level
;00200  0002		IDENT = '0-21'	! File: FUDFRL.B32
;00300  0003			) =
;00400  0004	BEGIN
;00500  0005	
;00600  0006	!
;00700  0007	!			  COPYRIGHT (c) 1977 BY
;00800  0008	!	      DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;00900  0009	!
;01000  0010	! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
;01100  0011	! ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
;01200  0012	! INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
;01300  0013	! COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
;01400  0014	! OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
;01500  0015	! TRANSFERRED.
;01600  0016	!
;01700  0017	! THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
;01800  0018	! AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
;01900  0019	! CORPORATION.
;02000  0020	!
;02100  0021	! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
;02200  0022	! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;02300  0023	!
;02400  0024	
;02500  0025	!++
;02600  0026	! FACILITY:	FORTRAN support library - not user callable
;02700  0027	!
;02800  0028	! ABSTRACT:
;02900  0029	!
;03000  0030	!	This module implements FORTRAN read list-directed I/O statement
;03100  0031	!	at the UDF level of abstraction.  This module calls the list-
;03200  0032	!	directed record routines at the record level to read a record.
;03300  0033	!
;03400  0034	! ENVIRONMENT:	User access mode, reentrant AST level or not
;03500  0035	!
;03600  0036	! AUTHOR: Jonathan M. Taylor,	CREATION DATE: 5-SEP-77
;03700  0037	!
;03800  0038	! MODIFIED BY:
;03900  0039	!
;04000  0040	! 	JMT, 5-SEP-77 : VERSION 0
;04100  0041	! 1	- original 
;04200  0042	! 0-3	- Removed parameters to record level routines JMT 17-OCT-77
;04300  0043	! 0-4	- Use FOR$K_abcmnoxyz as EXTERNAL LITERALs.  TNH 27-Oct-77
;04400  0044	! 0-5	- improvements to readability, functionality, speed, etc.  JMT 7-Nov-77
;04500  0045	! 0-6	- Add code for COMPLEX conversions, fix leading comma bug.  JMT 14-Nov-77
;04600  0046	! 0-7	- Bug fixes for COMPLEX data types.  JMT 16-Nov-77
;04700  0047	! 0-8	- Bug fix for D to F conversion.  JMT 21-Nov-77
;04800  0048	! 0-9	- Bug fix for string constants. JMT 6-Dec-77
;04900  0049	! 0-10	- Bug fix for floating conversion.  JMT 7-Dec-77
;05000  0050	! 0-11	- Make LIB$ routines addressing_mode (general). JMT 8-Dec-77
;05100  0051	! 0-12	- Use FOR$$GET_VM, FREE_VM.  JMT 14-Jan-78
;05200  0052	! 0-13	- Put error in ISB$B_ERR_NO, don't signal! JMT 14-Jan-78
;05300  0053	! 0-14	- Change order of parameters in calls to input conversion routines.
;05400  0054	!	  JMT 15-Feb-78
;05500  0055	! 0-16	- Fix complex bug.  JMT 9-Mar-78

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 1-1
;
;05600  0056	! 0-17	- Global register CCB.  JMT 8-Apr-78
;05700  0057	! 0-18	- Change to STARLET library.  DGP 20-Apr-78
;05800  0058	! 0-19	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
;05900  0059	! 0-20	- Change STARLET to RTLSTARLE to avoid conflicts.  DGP 1-May-78
;05910  0060	! 0-21	- Use JSB linkage.  TNH 22-May-78
;06000  0061	!--

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 2
;
;00100  0062	!
;00200  0063	! LINKAGES:
;00300  0064	!
;00500  0065	REQUIRE 'RTLIN:FLNK';		! define all linkages
; %PRINT:	File: FLNK.B32; Version 1, edit 12, TNH 2-Aug-78
;00600  0287	
;00700  0288	!
;00800  0289	! TABLE OF CONTENTS:
;00900  0290	!
;01000  0291	
;01100  0292	FORWARD ROUTINE
;01200  0293	
;01300  0294	    ! UDF routines
;01400  0295	    !
;01500  0296	    FOR$$UDF_RL0: JSB_UDF0 NOVALUE,
;01600  0297	    FOR$$UDF_RL1: CALL_CCB NOVALUE,
;01700  0298	    FOR$$UDF_RL9: JSB_UDF9 NOVALUE,
;01800  0299	
;01900  0300	    ! routines used by FOR$$UDF_RL0 and FOR$$UDF_RL1
;02000  0301	    !
;02100  0302	    GETCONST: CALL_CCB,
;02200  0303	    CONVERTTYPE,
;02300  0304	    GETFIELD: CALL_CCB,
;02400  0305	    SKIPBLANKS: CALL_CCB,
;02500  0306	    DELIM: CALL_CCB;
;02600  0307	
;02700  0308	!
;02800  0309	! INCLUDE FILES:
;02900  0310	!
;03000  0311		REQUIRE 'RTLML:FERR';		! FORTRAN error number definitions
; %PRINT:	Filename: FERR.MDL! Version 0, edit 36, TNH 19-June-78
;03100  0429		REQUIRE 'RTLML:FISB';
; %PRINT:	File: FISB.MDL which produces FISB.B32! Version 1, EDIT 16, DGP 02-Jun-78
;03200  0638		REQUIRE 'RTLML:FLUB';
; %PRINT:	File: FLUB.MDL which produces FLUB.B32! Version 0, edit 30, TNH, 17-June-78
;03300  0806		REQUIRE 'RTLIN:FMAC';
; %PRINT:	Filename: FMAC.B32; Version 1, edit 29, TNH, 7-JUN-78
; %PRINT:	 REQUIRE FILE: LPSECT.B32, VERSION 01-5, TNH, 27-Jun-78
;03400  0986		LIBRARY	'RTLSTARLE';	! STARLET library for macros and symbols
;03500  0987	
;03600  0988	!
;03700  0989	! MACROS:
;03800  0990	!
;03900  0991	
;04000  0992	MACRO
;04100  0993	
;04200  0994	    THISCHAR =
;04300M 0995		(IF .CCB[ISB$A_BUF_PTR] GEQA .CCB[ISB$A_BUF_END]
;04400M 0996		THEN
;04500M 0997			-1
;04600M 0998		ELSE
;04700M 0999			.(.CCB[ISB$A_BUF_PTR])<0,8>) %,
;04800  1000	
;04900  1001	    NEXTCHAR =
;05000M 1002		BEGIN

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 2-1
;
;05100M 1003		CCB[ISB$A_BUF_PTR] = .CCB[ISB$A_BUF_PTR] + 1;
;05200M 1004		THISCHAR
;05300M 1005		END %;
;05400  1006	
;05500  1007	!
;05600  1008	! EQUATED SYMBOLS:
;05700  1009	!
;05800  1010	
;05900  1011	LITERAL
;06000  1012	
;06100  1013	    K_NULL	= 0,			! types of constants which may appear in input record
;06200  1014	    K_LOG	= 1,
;06300  1015	    K_INT	= 2,
;06400  1016	    K_REAL	= 3,
;06500  1017	    K_COMP	= 4,
;06600  1018	    K_CHAR	= 5,
;06700  1019	
;06800  1020	    K_TAB	= 9;			! ASCII TAB
;06900  1021	
;07000  1022	BUILTIN
;07100  1023	    ACTUALCOUNT;
;07200  1024	
;07300  1025	!
;07400  1026	! PSECT declarations
;07500  1027	!
;07600  1028	    DECLARE_PSECTS (FOR);		 ! declare PSECTS for FOR$ facility
;07700  1029	
;07800  1030	!
;07900  1031	! OWN STORAGE:
;08000  1032	!	NONE
;08100  1033	
;08200  1034	!
;08300  1035	! EXTERNAL REFERENCES:
;08400  1036	!
;08500  1037	
;08600  1038	EXTERNAL ROUTINE
;08700  1039	
;08800  1040	    FOR$$GET_VM,
;08900  1041	    FOR$$FREE_VM: NOVALUE,
;09000  1042	    LIB$SIG_TO_RET: ADDRESSING_MODE (GENERAL),
;09100  1043	    MTH$DFLOTJ: ADDRESSING_MODE (GENERAL),
;09200  1044	    MTH$JIDINT: ADDRESSING_MODE (GENERAL),
;09300  1045	    MTH$SNGL: ADDRESSING_MODE (GENERAL),
;09400  1046	
;09500  1047	    ! conversion routines
;09600  1048	    !
;09700  1049	    FOR$CNV_IN_L,
;09800  1050	    FOR$CNV_IN_I,
;09900  1051	    FOR$CNV_IN_DEFG,
;10000  1052	
;10100  1053	    ! record level routines for list-directed input
;10200  1054	    !
;10300  1055	    FOR$$REC_RSL0: JSB_REC0 NOVALUE,
;10400  1056	    FOR$$REC_RSL1: JSB_REC1 NOVALUE,
;10500  1057	    FOR$$REC_RSL9: JSB_REC9 NOVALUE;

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 2-2
;

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 3
;
;00100  1058	GLOBAL ROUTINE FOR$$UDF_RL0 (
;00200  1059		FORMAT_ADR)
;00300  1060		: JSB_UDF0 NOVALUE =
;00400  1061	
;00500  1062	!++
;00600  1063	! FUNCTIONAL DESCRIPTION:
;00700  1064	!
;00800  1065	!	Perform UDF level read list-directed I/O initialization.
;00900  1066	!	Initialize module "own" storage in the ISB.
;01000  1067	!	Call record level processor to get first input record.
;01100  1068	!
;01110  1069	! CALLING SEQUENCE:
;01120  1070	!
;01130  1071	!	JSB FOR$$UDF_RL0 ()
;01140  1072	!
;01200  1073	! FORMAL PARAMETERS:
;01300  1074	!
;01400  1075	!	FORMAT_ADR.rl.r		Not used
;01500  1076	!
;01600  1077	! IMPLICIT INPUTS:
;01700  1078	!
;01800  1079	!	CCB			Pointer to current logical unit block (LUB)
;01900  1080	!
;02000  1081	! IMPLICIT OUTPUTS:
;02100  1082	!
;02200  1083	!	ISB$V_SLASH		0: no slash seen in this record
;02300  1084	!	ISB$V_LIS_HEAP		0: no heap storage allocated for string constant
;02400  1085	!	ISB$W_LIS_REP		0: no repeat count yet seen
;02500  1086	!
;02600  1087	! ROUTINE VALUE:
;02700  1088	! COMPLETION CODES:
;02800  1089	!
;02900  1090	!	NONE
;03000  1091	!
;03100  1092	! SIDE EFFECTS:
;03200  1093	!
;03300  1094	!	NONE
;03400  1095	!
;03500  1096	!--
;03600  1097	
;03700  1098	    BEGIN
;03800  1099	
;03900  1100	    EXTERNAL REGISTER
;04000  1101		CCB: REF BLOCK[, BYTE];
;04100  1102	
;04200  1103	    !+
;04300  1104	    ! Initialize module own storage used between calls to FOR$$UDF_RL1.
;04400  1105	    !-
;04500  1106	
;04600  1107	    CCB[ISB$V_SLASH] = 0;
;04700  1108	    CCB[ISB$W_LIS_REP] = 0;
;04800  1109	    CCB[ISB$V_LIS_HEAP] = 0;
;04900  1110	
;05000  1111	    !+
;05100  1112	    ! Call record level routine to read the first record.

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 3-1
;
;05200  1113	    !-
;05300  1114	
;05400  1115	    FOR$$REC_RSL0 ();
;05500  1116	
;05600  1117	    END;


							    .TITLE  FOR$$FUDF_RL
							    .IDENT  \0-21\

							    .EXTRN  FOR$$GET_VM, FOR$$FREE_VM, LIB$SIG_TO_RET, MTH$DFLOTJ
							    .EXTRN  MTH$JIDINT, MTH$SNGL, FOR$CNV_IN_L, FOR$CNV_IN_I
							    .EXTRN  FOR$CNV_IN_DEFG, FOR$$REC_RSL0, FOR$$REC_RSL1
							    .EXTRN  FOR$$REC_RSL9

							    .PSECT  FOR$CODE,NOWRT,  SHR,  PIC,2

		    D7   AB	       04  8A 00000 FOR$$UDF_RL0::
							    BICB2   #4, -41(CCB)					      ; 1107
				  D1   AB  B4 00004 	    CLRW    -47(CCB)						      ; 1108
		    D7   AB	       20  8A 00007 	    BICB2   #32, -41(CCB)					      ; 1109
				     0000G 30 0000B 	    BSBW    FOR$$REC_RSL0					      ; 1115
					   05 0000E 	    RSB     							      ; 1058

; Routine Size:  15 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 4
;
;00100  1118	GLOBAL ROUTINE FOR$$UDF_RL1 (
;00200  1119		ELEM_TYPE,
;00300  1120		ELEM_SIZE,
;00400  1121		ELEM_ADR,
;00500  1122		FC_FLAG)
;00600  1123		: CALL_CCB NOVALUE =
;00700  1124	
;00800  1125	!++
;00900  1126	! FUNCTIONAL DESCRIPTION:
;01000  1127	!
;01100  1128	!	Return the next input value to the user I/O list element.
;01200  1129	!	The value obtained from the input record is converted to
;01300  1130	!	the type of the list element.
;01400  1131	!
;01410  1132	! CALLING SEQUENCE:
;01420  1133	!
;01430  1134	!	CALL FOR$$UDF_RL1 (elem_type.rlu.v, elem_size.rlu.v, elem_adr.wx.r [,fc_flag.rb.v])
;01440  1135	!
;01500  1136	! FORMAL PARAMETERS:
;01600  1137	!
;01700  1138	!	ELEM_TYPE.rlu.v		Type code of user I/O list element
;01800  1139	!	ELEM_SIZE.rlu.v		Size of user I/O list element
;01900  1140	!	ELEM_ADR.wx.r		Address of user I/O list element,
;02000  1141	!				x = b,w,l,wu,lu,f,c,fc, or t.
;02100  1142	!	[FC_FLAG]		if present, then:
;02200  1143	!				    0 - real part of COMPLEX type
;02300  1144	!				    1 - imaginary part of COMPLEX type
;02400  1145	!
;02500  1146	! IMPLICIT INPUTS:
;02600  1147	!
;02700  1148	!	OTS$$A_CUR_LUB		Pointer to current logical unit block (LUB)
;02800  1149	!
;02900  1150	! IMPLICIT OUTPUTS:
;03000  1151	!
;03100  1152	!	ISB$W_LIS_HEAP		repeat count
;03200  1153	!	ISB$B_LIS_CTYPE		type of constant found
;03300  1154	!	ISB$L_CONSBLOCK		value of constant seen
;03400  1155	!	ISB$V_HEAP		on if heap storage allocated by module
;03500  1156	!	ISB$V_SLASH		on if slash seen (ignore all future calls)
;03600  1157	!
;03700  1158	! ROUTINE VALUE:
;03800  1159	! COMPLETION CODES:
;03900  1160	!
;04000  1161	!	NONE
;04100  1162	!
;04200  1163	! SIDE EFFECTS:
;04300  1164	!
;04400  1165	!	SIGNALs FOR$_LISIO_SYN if a bum repeat count or an error
;04500  1166	!	occurs when converting the constant from external form to
;04600  1167	!	the type of the list element.
;04700  1168	!
;04800  1169	!--
;04900  1170	
;05000  1171	    BEGIN
;05100  1172	

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 4-1
;
;05200  1173	    EXTERNAL REGISTER
;05300  1174		CCB: REF BLOCK[, BYTE];
;05400  1175	
;05500  1176	    MAP
;05600  1177		ELEM_ADR: REF VECTOR;
;05700  1178	    LOCAL
;05800  1179		CHARCONS: VECTOR[256, BYTE];
;05900  1180	
;06000  1181	
;06100  1182	    !+
;06200  1183	    ! If we're being called to get the second part of a COMPLEX number,
;06300  1184	    ! just return since the call for the first part actually got
;06400  1185	    ! both parts!
;06500  1186	    !-
;06600  1187	
;06700  1188	    IF ACTUALCOUNT() GTR (FC_FLAG - ELEM_TYPE)/%UPVAL
;06800  1189	    THEN
;06900  1190		IF .FC_FLAG THEN RETURN;
;07000  1191	
;07100  1192	
;07200  1193	    !+
;07300  1194	    ! If a slash has been seen previously, just return as rest of record
;07400  1195	    ! is ignored.
;07500  1196	    !-
;07600  1197	
;07700  1198	    IF .CCB[ISB$V_SLASH] THEN RETURN;
;07800  1199	
;07900  1200	    !+
;08000  1201	    ! If no currently active repeat count, find the next constant.
;08100  1202	    !-
;08200  1203	
;08300  1204	    IF .CCB[ISB$W_LIS_REP] EQL 0
;08400  1205	    THEN
;08500  1206		BEGIN
;08600  1207	
;08700  1208		!+
;08800  1209		! Find a constant.  If a string constant is seen, have GETCONST
;08900  1210		! store it in stack-local CHARCONS.
;09000  1211		!-
;09100  1212	
;09200  1213		SKIPBLANKS ();
;09300  1214		CCB[ISB$L_LIS_CON0] = CHARCONS;	! kludgy way to pass address of local storage
;09400  1215		CCB[ISB$B_LIS_CTYPE] = GETCONST (CCB[ISB$L_CONSBLOCK], 1);
;09500  1216	
;09600  1217		!+
;09700  1218		! If the next character after the constant is a star then the
;09800  1219		! constant is really a repeat count.  Make sure the repeat count
;09900  1220		! is legal and store away in the ISB for future calls.
;10000  1221		!-
;10100  1222	
;10200  1223		IF THISCHAR EQL %C'*'
;10300  1224		THEN
;10400  1225		    BEGIN
;10500  1226		    CCB[ISB$A_BUF_PTR] = .CCB[ISB$A_BUF_PTR] + 1;
;10600  1227		    CCB[ISB$W_LIS_REP] =

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 4-2
;
;10700  1228		    (IF .CCB[ISB$B_LIS_CTYPE] NEQ K_INT
;10800  1229			OR .CCB[ISB$L_LIS_CON0] LEQ 0
;10900  1230		    THEN
;11000  1231			BEGIN
;11100  1232			CCB[ISB$B_ERR_NO] = FOR$K_LISIO_SYN;
;11200  1233			1
;11300  1234			END
;11400  1235		    ELSE
;11500  1236			.CCB[ISB$L_LIS_CON0]);
;11600  1237	
;11700  1238		    !+
;11800  1239		    ! Now that repeat count is taken care of, get the "real"
;11900  1240		    ! constant!
;12000  1241		    !-
;12100  1242	
;12200  1243		    CCB[ISB$L_LIS_CON0] = CHARCONS;
;12300  1244		    CCB[ISB$B_LIS_CTYPE] = GETCONST (CCB[ISB$L_CONSBLOCK], 1);
;12400  1245	
;12500  1246		    !+
;12600  1247		    ! If we just got a string constant (preceded by a repeat count),
;12700  1248		    ! then the string must be stored to preserve it between calls
;12800  1249		    ! to this routine.
;12900  1250		    !-
;13000  1251	
;13100  1252		    IF .CCB[ISB$B_LIS_CTYPE] EQL K_CHAR
;13200  1253		    THEN
;13300  1254			BEGIN
;13400  1255			LOCAL
;13500  1256			    T;
;13600  1257			T = FOR$$GET_VM (256);
;13700  1258			CH$MOVE (255, CHARCONS, .T);
;13800  1259			CCB[ISB$L_LIS_CON0] = .T;
;13900  1260			CCB[ISB$V_LIS_HEAP] = 1;
;14000  1261			END
;14100  1262		    END
;14200  1263		ELSE
;14300  1264		    CCB[ISB$W_LIS_REP] = 1;
;14400  1265		END;
;14500  1266	    IF .CCB[ISB$B_LIS_CTYPE] NEQ K_NULL
;14600  1267	    THEN
;14700  1268		IF NOT CONVERTTYPE (.CCB[ISB$B_LIS_CTYPE],
;14800  1269					CCB[ISB$L_CONSBLOCK],
;14900  1270					IF ACTUALCOUNT() GTR (FC_FLAG-ELEM_TYPE)/%UPVAL
;15000  1271					THEN
;15100  1272					    DSC$K_DTYPE_FC
;15200  1273					ELSE
;15300  1274					    .ELEM_TYPE,
;15400  1275					.ELEM_ADR,
;15500  1276					.ELEM_SIZE)
;15600  1277		THEN
;15700  1278		    CCB[ISB$B_ERR_NO] = FOR$K_LISIO_SYN;
;15800  1279	
;15900  1280	    !+
;16000  1281	    ! If repeat count goes to zero deallocate heap if there is one.
;16100  1282	    !-

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 4-3
;
;16200  1283	
;16300  1284	    IF
;16400  1285		(CCB[ISB$W_LIS_REP] = .CCB[ISB$W_LIS_REP] - 1) EQL 0
;16500  1286	    THEN
;16600  1287		IF .CCB[ISB$V_LIS_HEAP]
;16700  1288		THEN
;16800  1289		    BEGIN
;16900  1290		    FOR$$FREE_VM (256, .CCB[ISB$L_LIS_CON0]);
;17000  1291		    CCB[ISB$V_LIS_HEAP] = 0;
;17100  1292		    END;
;17200  1293	
;17300  1294	    !+
;17400  1295	    ! Skip over blanks and tabs until a real character is seen
;17500  1296	    ! or end-of-record is reached.  This puts us in a good position
;17600  1297	    ! for the next call.
;17700  1298	    !-
;17800  1299	
;17900  1300		BEGIN
;18000  1301		LOCAL
;18100  1302		    C;
;18200  1303	
;18300  1304		C = THISCHAR;
;18400  1305		WHILE .C EQL %C' ' OR .C EQL K_TAB DO
;18500  1306		    C = NEXTCHAR;
;18600  1307		IF .C EQL ','
;18700  1308		THEN
;18800  1309		    CCB[ISB$A_BUF_PTR] = .CCB[ISB$A_BUF_PTR] + 1;
;18900  1310		END;
;19000  1311	
;19100  1312	    END;





					 007C 0000F 	    .ENTRY  FOR$$UDF_RL1, Save R2,R3,R4,R5,R6			      ; 1118
		         5E 	FF00   CE  9E 00011 	    MOVAB   -256(SP), SP					      ;
		         03 	       6C  91 00016 	    CMPB    (AP), #3						      ; 1188
				       05  1B 00019 	    BLEQU   1$							      ;
		         01 	  10   AC  E9 0001B 	    BLBC    FC_FLAG, 1$						      ; 1190
					   04 0001F 	    RET     							      ;
	   01 	    D7   AB	       02  E1 00020 1$:     BBC     #2, -41(CCB), 2$					      ; 1198
					   04 00025 	    RET     							      ;
				  D1   AB  B5 00026 2$:     TSTW    -47(CCB)						      ; 1204
				       7E  12 00029 	    BNEQ    8$							      ;
		  0000V  CF	       00  FB 0002B 	    CALLS   #0, SKIPBLANKS					      ; 1213
		    C4   AB	       6E  9E 00030 	    MOVAB   CHARCONS, -60(CCB)					      ; 1214
				       01  DD 00034 	    PUSHL   #1							      ; 1215
				  C4   AB  9F 00036 	    PUSHAB  -60(CCB)						      ;
		  0000V  CF	       02  FB 00039 	    CALLS   #2, GETCONST					      ;
		    D3   AB	       50  90 0003E 	    MOVB    R0, -45(CCB)					      ;
		    BC   AB	  B8   AB  D1 00042 	    CMPL    -72(CCB), -68(CCB)					      ; 1223
				       05  1F 00047 	    BLSSU   3$							      ;
		         50 	       01  CE 00049 	    MNEGL   #1, R0						      ;
				       04  11 0004C 	    BRB     4$							      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 4-4
;
		         50 	  B8   BB  9A 0004E 3$:     MOVZBL  @-72(CCB), R0					      ;
		         2A 	       50  D1 00052 4$:     CMPL    R0, #42						      ;
				       54  12 00055 	    BNEQ    9$							      ;
				  B8   AB  D6 00057 	    INCL    -72(CCB)						      ; 1226
		         02 	  D3   AB  91 0005A 	    CMPB    -45(CCB), #2					      ; 1228
				       05  12 0005E 	    BNEQ    5$							      ;
				  C4   AB  D5 00060 	    TSTL    -60(CCB)						      ; 1229
				       09  14 00063 	    BGTR    6$							      ;
		    A4   AB	       3B  90 00065 5$:     MOVB    #59, -92(CCB)					      ; 1232
		         50 	       01  D0 00069 	    MOVL    #1, R0						      ; 1228
				       04  11 0006C 	    BRB     7$							      ;
		         50 	  C4   AB  D0 0006E 6$:     MOVL    -60(CCB), R0					      ;
		    D1   AB	       50  B0 00072 7$:     MOVW    R0, -47(CCB)					      ; 1227
		    C4   AB	       6E  9E 00076 	    MOVAB   CHARCONS, -60(CCB)					      ; 1243
				       01  DD 0007A 	    PUSHL   #1							      ; 1244
				  C4   AB  9F 0007C 	    PUSHAB  -60(CCB)						      ;
		  0000V  CF	       02  FB 0007F 	    CALLS   #2, GETCONST					      ;
		    D3   AB	       50  90 00084 	    MOVB    R0, -45(CCB)					      ;
		         05 	  D3   AB  91 00088 	    CMPB    -45(CCB), #5					      ; 1252
				       21  12 0008C 	    BNEQ    10$							      ;
		         7E 	0100   8F  3C 0008E 	    MOVZWL  #256, -(SP)						      ; 1257
		  0000G  CF	       01  FB 00093 	    CALLS   #1, FOR$$GET_VM					      ;
		         56 	       50  D0 00098 	    MOVL    R0, T						      ;
	   66 	         6E 	00FF   8F  28 0009B 	    MOVC3   #255, CHARCONS, (T)					      ; 1258
		    C4   AB	       56  D0 000A1 	    MOVL    T, -60(CCB)						      ; 1259
		    D7   AB	       20  88 000A5 	    BISB2   #32, -41(CCB)					      ; 1260
				       04  11 000A9 8$:     BRB     10$							      ; 1223
		    D1   AB	       01  B0 000AB 9$:     MOVW    #1, -47(CCB)					      ; 1264
				  D3   AB  95 000AF 10$:    TSTB    -45(CCB)						      ; 1266
				       25  13 000B2 	    BEQL    13$							      ;
				  08   AC  DD 000B4 	    PUSHL   ELEM_SIZE						      ; 1268
				  0C   AC  DD 000B7 	    PUSHL   ELEM_ADR						      ;
		         03 	       6C  91 000BA 	    CMPB    (AP), #3						      ; 1270
				       04  1B 000BD 	    BLEQU   11$							      ;
				       0C  DD 000BF 	    PUSHL   #12							      ;
				       03  11 000C1 	    BRB     12$							      ;
				  04   AC  DD 000C3 11$:    PUSHL   ELEM_TYPE						      ;
				  C4   AB  9F 000C6 12$:    PUSHAB  -60(CCB)						      ; 1269
		         7E 	  D3   AB  9A 000C9 	    MOVZBL  -45(CCB), -(SP)					      ; 1268
		  0000V  CF	       05  FB 000CD 	    CALLS   #5, CONVERTTYPE					      ;
		         04 	       50  E8 000D2 	    BLBS    R0, 13$						      ;
		    A4   AB	       3B  90 000D5 	    MOVB    #59, -92(CCB)					      ; 1278
		         50 	  D1   AB  3C 000D9 13$:    MOVZWL  -47(CCB), R0					      ; 1285
				       50  D7 000DD 	    DECL    R0							      ;
		    D1   AB	       50  B0 000DF 	    MOVW    R0, -47(CCB)					      ;
				       50  D5 000E3 	    TSTL    R0							      ;
				       29  12 000E5 	    BNEQ    17$							      ;
	   24 	    D7   AB	       05  E1 000E7 	    BBC     #5, -41(CCB), 17$					      ; 1287
				  C4   AB  DD 000EC 	    PUSHL   -60(CCB)						      ; 1290
		         7E 	0100   8F  3C 000EF 	    MOVZWL  #256, -(SP)						      ;
		  0000G  CF	       02  FB 000F4 	    CALLS   #2, FOR$$FREE_VM					      ;
		    D7   AB	       20  8A 000F9 	    BICB2   #32, -41(CCB)					      ; 1291
				       11  11 000FD 	    BRB     17$							      ; 1304
		         50 	  B8   BB  9A 000FF 14$:    MOVZBL  @-72(CCB), C					      ;
		         20 	       50  D1 00103 15$:    CMPL    C, #32						      ; 1305

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 4-5
;
				       05  13 00106 	    BEQL    16$							      ;
		         09 	       50  D1 00108 	    CMPL    C, #9						      ;
				       0F  12 0010B 	    BNEQ    18$							      ;
				  B8   AB  D6 0010D 16$:    INCL    -72(CCB)						      ; 1306
		    BC   AB	  B8   AB  D1 00110 17$:    CMPL    -72(CCB), -68(CCB)					      ;
				       E8  1F 00115 	    BLSSU   14$							      ;
		         50 	       01  CE 00117 	    MNEGL   #1, C						      ;
				       E7  11 0011A 	    BRB     15$							      ;
		         2C 	       50  D1 0011C 18$:    CMPL    C, #44						      ; 1307
				       03  12 0011F 	    BNEQ    19$							      ;
				  B8   AB  D6 00121 	    INCL    -72(CCB)						      ; 1309
					   04 00124 19$:    RET     							      ; 1118

; Routine Size:  278 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 5
;
;00100  1313	GLOBAL ROUTINE FOR$$UDF_RL9
;00200  1314		: JSB_UDF9 NOVALUE =
;00300  1315	
;00400  1316	!++
;00500  1317	! FUNCTIONAL DESCRIPTION:
;00600  1318	!
;00700  1319	!	List directed input UDF termination:
;00800  1320	!	If any heap storage was allocated by RL1, deallocate it.
;00900  1321	!
;00910  1322	! CALLING SEQUENCE:
;00920  1323	!
;00930  1324	!	JSB FOR$$UDF_RL9 ()
;00940  1325	!
;01000  1326	! FORMAL PARAMETERS:
;01100  1327	!
;01200  1328	!	NONE
;01300  1329	!
;01400  1330	! IMPLICIT INPUTS:
;01500  1331	!
;01510  1332	!	CCB				Adr. of LUB/ISB/RAB
;01600  1333	!	CCB[ISB$V_LIS_HEAP]		1 if storage currently allocated
;01700  1334	!	CCB[ISB$A_LIS_CON0]		address of allocated storage
;01800  1335	!
;01900  1336	! IMPLICIT OUTPUTS:
;02000  1337	!
;02100  1338	!	CCB[ISB$V_LIS_HEAP]		0
;02200  1339	!
;02300  1340	! ROUTINE VALUE:
;02400  1341	! COMPLETION CODES:
;02500  1342	!
;02600  1343	!	NONE
;02700  1344	!
;02800  1345	! SIDE EFFECTS:
;02900  1346	!
;03000  1347	!	NONE
;03100  1348	!
;03200  1349	!--
;03300  1350	
;03400  1351	    BEGIN
;03500  1352	
;03600  1353	    EXTERNAL REGISTER
;03700  1354		CCB: REF BLOCK[, BYTE];
;03800  1355	
;03900  1356	    IF .CCB[ISB$V_LIS_HEAP]
;04000  1357	    THEN
;04100  1358		BEGIN
;04200  1359		FOR$$FREE_VM (256, .CCB[ISB$L_LIS_CON0]);
;04300  1360		CCB[ISB$V_LIS_HEAP] = 0;
;04400  1361		END;
;04500  1362	    END;






; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 5-1
;
	   11 	    D7   AB	       05  E1 00125 FOR$$UDF_RL9::
							    BBC     #5, -41(CCB), 1$					      ; 1356
				  C4   AB  DD 0012A 	    PUSHL   -60(CCB)						      ; 1359
		         7E 	0100   8F  3C 0012D 	    MOVZWL  #256, -(SP)						      ;
		  0000G  CF	       02  FB 00132 	    CALLS   #2, FOR$$FREE_VM					      ;
		    D7   AB	       20  8A 00137 	    BICB2   #32, -41(CCB)					      ; 1360
					   05 0013B 1$:     RSB     							      ; 1313

; Routine Size:  23 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 6
;
;00100  1363	ROUTINE CONVERTTYPE (
;00200  1364		IN_TYPE,
;00300  1365		IN_BLOCK,
;00400  1366		OUT_TYPE,
;00500  1367		OUT_BLOCK,
;00600  1368		OUT_SIZE) =
;00700  1369	
;00800  1370	!++
;00900  1371	! Functional description:
;01000  1372	!
;01100  1373	!	Convert the constant recovered from the input record to the
;01200  1374	!	type the user requested.  If the input and output types
;01300  1375	!	are both string constant, copy the string to the users area.
;01400  1376	!
;01500  1377	! Formal parameters:
;01600  1378	!
;01700  1379	!	IN_TYPE.rx.v		{L*1, I*4, R*8, C*8, CHAR}
;01800  1380	!	IN_BLOCK.rl.r		address of the input constant
;01900  1381	!				OR if the input is a char constant, then
;02000  1382	!				the address of a pointer to the char constant.
;02100  1383	!	OUT_TYPE.rl.v		{WU, LU, B, W, L, F, D, FC, or T}
;02200  1384	!	OUT_ADR.wy.r		address of output area in user program
;02300  1385	!	OUT_SIZE.rl.v		size of users output area (used for strings only)
;02400  1386	!
;02500  1387	! Returned value:
;02600  1388	!	returns success(1) or failure(0) when conversion error occurs.
;02700  1389	!
;02800  1390	!--
;02900  1391	
;03000  1392	    BEGIN
;03100  1393	
;03200  1394	    MACRO
;03300  1395		B_0	=	0,0,8,0 %,	! first byte
;03400  1396		W_0	=	0,0,16,1 %,	! first word (sign extend)
;03500  1397		W_1	=	0,16,16,0 %,	! second word
;03600  1398		L_0	=	0,0,32,0 %,	! fisst longword
;03700  1399		L_1	=	4,0,32,0 %,	! second longword
;03800  1400	
;03900  1401		! fields used to access flag bits in FLAG
;04000  1402		!
;04100  1403		LOAD_FIRST_WORD	=	0,0,1,0 %,
;04200  1404		LOAD_SEC_WORD	=	0,1,1,0 %,
;04300  1405		LOAD_SEC_LONG	=	0,2,1,0 %,
;04400  1406	
;04500  1407		CONV_J_TO_D	=	0,3,1,0 %,
;04600  1408		CONV_D_TO_J	=	0,4,1,0 %,
;04700  1409		CONV_D_TO_F	=	0,5,1,0 %,
;04800  1410		CONV_J_TO_I	=	0,6,1,0 %,
;04900  1411		CONV_I_TO_L	=	0,7,1,0 %,
;05000  1412	
;05100  1413		STOR_FIRST_BYTE	=	0,8,1,0 %,
;05200  1414		STOR_FIRST_WORD	=	0,9,1,0 %,
;05300  1415		STOR_SEC_WORD	=	0,10,1,0 %,
;05400  1416		STOR_SEC_LONG	=	0,11,1,0 %;
;05500  1417	

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 6-1
;
;05600  1418	    LOCAL
;05700  1419		FLAGS: BLOCK[1],
;05800  1420		T: BLOCK[8, BYTE];		! Local temp storage for intermediate results
;05900  1421	
;06000  1422	    MAP
;06100  1423		IN_BLOCK: REF BLOCK[8, BYTE],	! Contains input value
;06200  1424		OUT_BLOCK: REF BLOCK[8, BYTE];	! Contains output value
;06300  1425	
;06400  1426	    BIND
;06500  1427		FLAG_TAB = UPLIT WORD
;06600  1428		!
;06700  1429		!			I N P U T  D A T A  T Y P E
;06800  1430		!
;06900  1431		!	  LOG		  INT		  REAL		  CMPLX
;07000  1432		!
;07100  1433		(	%O'1101',	%O'1103',	%O'1127',	%O'1123',	! WU
;07200  1434			%O'3001',	%O'3003',	%O'3027',	%O'3023',	! LU
;07300  1435			0,		0,		0,		0,		! QU (not used)
;07400  1436			%O'701',	%O'703',	%O'727',	%O'723',	! B
;07500  1437			%O'1101',	%O'1103',	%O'1127',	%O'1123',	! W
;07600  1438			%O'3001',	%O'3003',	%O'3027',	%O'3023',	! L
;07700  1439			0,		0,		0,		0,		! Q (not used)
;07800  1440			%O'3051',	%O'3053',	%O'3047',	%O'3003',	! F
;07900  1441			%O'7011',	%O'7013',	%O'7007',	%O'7003',	! D
;08000  1442			%O'7051',	%O'7053',	%O'7047',	%O'7007')	! FC
;08100  1443	
;08200  1444		: VECTOR[, WORD];
;08300  1445	
;08400  1446	    ENABLE
;08500  1447		LIB$SIG_TO_RET ();
;08600  1448	
;08700  1449	    IF .IN_TYPE EQL K_CHAR AND .OUT_TYPE EQL DSC$K_DTYPE_T
;08800  1450	    THEN
;08900  1451		BEGIN
;09000  1452		CH$COPY (255, ..IN_BLOCK, %C' ', .OUT_SIZE, .OUT_BLOCK);
;09100  1453		RETURN 1;
;09200  1454		END;
;09300  1455	
;09400  1456	    IF .IN_TYPE EQL K_CHAR OR .OUT_TYPE EQL DSC$K_DTYPE_T
;09500  1457	    THEN
;09600  1458		RETURN 0;			! type mis-match!
;09700  1459	
;09800  1460	    FLAGS[L_0] = .FLAG_TAB[(.OUT_TYPE - DSC$K_DTYPE_WU) * 4 +
;09900  1461					(.IN_TYPE - K_LOG)];
;10000  1462	
;10100  1463	    IF .FLAGS[LOAD_FIRST_WORD]		! load first word and sign extend
;10200  1464	    THEN
;10300  1465		T[L_0] = .IN_BLOCK[W_0];
;10400  1466	
;10500  1467	    IF .FLAGS[LOAD_SEC_WORD]		! load second word
;10600  1468	    THEN
;10700  1469		T[W_1] = .IN_BLOCK[W_1];
;10800  1470	
;10900  1471	    IF .FLAGS[LOAD_SEC_LONG]		! load third and fourth words
;11000  1472	    THEN

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 6-2
;
;11100  1473		T[L_1] = .IN_BLOCK[L_1];
;11200  1474	
;11300  1475	    IF .FLAGS[CONV_J_TO_D]		! convert J to D
;11400  1476	    THEN
;11500  1477		BEGIN
;11600  1478		REGISTER
;11700  1479		    R0 = 0,
;11800  1480		    R1 = 1;
;11900  1481		MTH$DFLOTJ (T[L_0]);
;12000  1482		T[L_0] = .R0;
;12100  1483		T[L_1] = .R1;
;12200  1484		END;
;12300  1485	
;12400  1486	    IF .FLAGS[CONV_D_TO_J]		! convert D to J
;12500  1487	    THEN
;12600  1488		T[L_0] = MTH$JIDINT (T[L_0]);
;12700  1489	
;12800  1490	    IF .FLAGS[CONV_D_TO_F]		! convert D to F (round)
;12900  1491	    THEN
;13000  1492		BEGIN
;13100  1493		T[L_0] = MTH$SNGL (T[L_0]);
;13200  1494		T[L_1] = 0;
;13300  1495		END;
;13400  1496	
;13500  1497	    IF .FLAGS[CONV_J_TO_I]		! convert J to I (truncate)
;13600  1498	    THEN
;13700  1499		IF .T[0, 15, 1, 1] NEQ .T[0, 16, 16, 1]
;13800  1500		THEN
;13900  1501		    RETURN 0;
;14000  1502	
;14100  1503	    IF .FLAGS[CONV_I_TO_L]		! convert I to L (truncate)
;14200  1504	    THEN
;14300  1505		IF .T[0, 7, 1, 1] NEQ .T[0, 8, 8, 1]
;14400  1506		THEN
;14500  1507		    RETURN 0;
;14600  1508	
;14700  1509	    IF .FLAGS[STOR_FIRST_BYTE]	! store one byte
;14800  1510	    THEN
;14900  1511		OUT_BLOCK[B_0] = .T[B_0];
;15000  1512	
;15100  1513	    IF .FLAGS[STOR_FIRST_WORD]	! store one word
;15200  1514	    THEN
;15300  1515		OUT_BLOCK[W_0] = .T[W_0];
;15400  1516	
;15500  1517	    IF .FLAGS[STOR_SEC_WORD]		! store second word
;15600  1518	    THEN
;15700  1519		OUT_BLOCK[W_1] = .T[W_1];
;15800  1520	
;15900  1521	    IF .FLAGS[STOR_SEC_LONG]		! store third and fourth words
;16000  1522	    THEN
;16100  1523		OUT_BLOCK[L_1] = .T[L_1];
;16200  1524	
;16300  1525	    RETURN 1;
;16400  1526	    END;


; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 6-3
;


    0617  0603  0601  0253  0257  0243  0241  0013C P.AAA:  .WORD   577, 579, 599, 595, 1537, 1539, 1559, 1555, 0, 0, 0, 0, - ;
    01C3  01C1  0000  0000  0000  0000  0613  0014A		    449, 451, 471, 467, 577, 579, 599, 595, 1537, 1539, -     ;
    0601  0253  0257  0243  0241  01D3  01D7  00158		    1559, 1555, 0, 0, 0, 0, 1577, 1579, 1575, 1539, 3593, -   ;
    0000  0000  0000  0000  0613  0617  0603  00166		    3595, 3591, 3587, 3625, 3627, 3623, 3591		      ;
    0E07  0E0B  0E09  0603  0627  062B  0629  00174									      ;
		0E07  0E27  0E2B  0E29  0E03  00182									      ;

						    FLAG_TAB=		P.AAA


					 007C 0018C CONVERTTYPE:
							    .WORD   Save R2,R3,R4,R5,R6					      ; 1363
		         5E 	       08  C2 0018E 	    SUBL2   #8, SP						      ;
		         6D 000000E0   EF  DE 00191 	    MOVAL   17$, (FP)						      ; 1392
				       56  D4 00198 	    CLRL    R6							      ; 1449
		         05 	  04   AC  D1 0019A 	    CMPL    IN_TYPE, #5						      ;
				       19  12 0019E 	    BNEQ    1$							      ;
				       56  D6 001A0 	    INCL    R6							      ;
		         0E 	  0C   AC  D1 001A2 	    CMPL    OUT_TYPE, #14					      ;
				       11  12 001A6 	    BNEQ    1$							      ;
		         50 	  08   BC  D0 001A8 	    MOVL    @IN_BLOCK, R0					      ; 1452
	   20 	         60 	00FF   8F  2C 001AC 	    MOVC5   #255, (R0), #32, OUT_SIZE, @OUT_BLOCK		      ;
		    10   BC	  14   AC     001B2									      ;
				     00B7  31 001B6 	    BRW     15$							      ; 1453
		         03 	       56  E9 001B9 1$:     BLBC    R6, 3$						      ; 1456
				     00B5  31 001BC 2$:     BRW     16$							      ;
		         0E 	  0C   AC  D1 001BF 3$:     CMPL    OUT_TYPE, #14					      ;
				       F7  13 001C3 	    BEQL    2$							      ;
		         50 	  0C   AC  D0 001C5 	    MOVL    OUT_TYPE, R0					      ; 1460
		         50 	  04 BC40  DE 001C9 	    MOVAL   @IN_TYPE[R0], R0					      ;
		         52 	FF4F CF40  3C 001CE 	    MOVZWL  FLAG_TAB-26[R0], FLAGS				      ;
		         04 	       52  E9 001D4 	    BLBC    FLAGS, 4$						      ; 1463
		         6E 	  08   BC  32 001D7 	    CVTWL   @IN_BLOCK, T					      ; 1465
	   0A 	         52 	       01  E1 001DB 4$:     BBC     #1, FLAGS, 5$					      ; 1467
      08   BC	         10 	       10  EF 001DF 	    EXTZV   #16, #16, @IN_BLOCK, R0				      ; 1469
				       50     001E4									      ;
		    02   AE	       50  B0 001E5 	    MOVW    R0, T+2						      ;
	   09 	         52 	       02  E1 001E9 5$:     BBC     #2, FLAGS, 6$					      ; 1471
		         50 	  08   AC  D0 001ED 	    MOVL    IN_BLOCK, R0					      ; 1473
		    04   AE	  04   A0  D0 001F1 	    MOVL    4(R0), T+4						      ;
	   0C 	         52 	       03  E1 001F6 6$:     BBC     #3, FLAGS, 7$					      ; 1475
				       5E  DD 001FA 	    PUSHL   SP							      ; 1481
	      00000000G  00	       01  FB 001FC 	    CALLS   #1, MTH$DFLOTJ					      ;
		         6E 	       50  7D 00203 	    MOVQ    R0, T						      ; 1482
	   0C 	         52 	       04  E1 00206 7$:     BBC     #4, FLAGS, 8$					      ; 1486
				       5E  DD 0020A 	    PUSHL   SP							      ; 1488
	      00000000G  00	       01  FB 0020C 	    CALLS   #1, MTH$JIDINT					      ;
		         6E 	       50  D0 00213 	    MOVL    R0, T						      ;
	   0F 	         52 	       05  E1 00216 8$:     BBC     #5, FLAGS, 9$					      ; 1490
				       5E  DD 0021A 	    PUSHL   SP							      ; 1493
	      00000000G  00	       01  FB 0021C 	    CALLS   #1, MTH$SNGL					      ;
		         6E 	       50  D0 00223 	    MOVL    R0, T						      ;
				  04   AE  D4 00226 	    CLRL    T+4							      ; 1494

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 6-4
;
	   0C 	         52 	       06  E1 00229 9$:     BBC     #6, FLAGS, 10$					      ; 1497
		         50 	  02   AE  32 0022D 	    CVTWL   T+2, R0						      ; 1499
      01   AE	         01 	       07  EC 00231 	    CMPV    #7, #1, T+1, R0					      ;
				       50     00236									      ;
				       3B  12 00237 	    BNEQ    16$							      ;
	   0B 	         52 	       07  E1 00239 10$:    BBC     #7, FLAGS, 11$					      ; 1503
		         50 	  01   AE  98 0023D 	    CVTBL   T+1, R0						      ; 1505
	   6E 	         01 	       07  EC 00241 	    CMPV    #7, #1, T, R0					      ;
				       50     00245									      ;
				       2C  12 00246 	    BNEQ    16$							      ;
	   04 	         52 	       08  E1 00248 11$:    BBC     #8, FLAGS, 12$					      ; 1509
		    10   BC	       6E  90 0024C 	    MOVB    T, @OUT_BLOCK					      ; 1511
	   04 	         52 	       09  E1 00250 12$:    BBC     #9, FLAGS, 13$					      ; 1513
		    10   BC	       6E  B0 00254 	    MOVW    T, @OUT_BLOCK					      ; 1515
	   07 	         52 	       0A  E1 00258 13$:    BBC     #10, FLAGS, 14$					      ; 1517
	   10 	         10 	  02   AE  F0 0025C 	    INSV    T+2, #16, #16, @OUT_BLOCK				      ; 1519
				  10   BC     00261									      ;
	   09 	         52 	       0B  E1 00263 14$:    BBC     #11, FLAGS, 15$					      ; 1521
		         50 	  10   AC  D0 00267 	    MOVL    OUT_BLOCK, R0					      ; 1523
		    04   A0	  04   AE  D0 0026B 	    MOVL    T+4, 4(R0)						      ;
		         50 	       01  D0 00270 15$:    MOVL    #1, R0						      ; 1525
					   04 00273 	    RET     							      ;
				       50  D4 00274 16$:    CLRL    R0							      ; 1363
					   04 00276 	    RET     							      ;
					 0000 00277 17$:    .WORD   Save nothing					      ; 1392
				       7E  D4 00279 	    CLRL    -(SP)						      ;
				       5E  DD 0027B 	    PUSHL   SP							      ;
		         7E 	  04   AC  7D 0027D 	    MOVQ    4(AP), -(SP)					      ;
	      00000000G  00	       03  FB 00281 	    CALLS   #3, LIB$SIG_TO_RET					      ;
					   04 00288 	    RET     							      ;

; Routine Size:  253 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 7
;
;00100  1527	ROUTINE GETCONST (
;00200  1528		CONSBLOCK,
;00300  1529		STRINGFLAG)
;00400  1530		: CALL_CCB =
;00500  1531	
;00600  1532	!++
;00700  1533	! FUNCTIONAL DESCRIPTION:
;00800  1534	!
;00900  1535	!	Obtain a value from the external record using the format conversion
;01000  1536	!	routines.  The conversion chosen is dependent on the contents of the
;01100  1537	!	field of the record:
;01200  1538	!		LOGICAL if the first char is 'T' or 'F';
;01300  1539	!		FLOATING if the field contains 'E', 'D', or '.';
;01400  1540	!		COMPLEX if the first char is '(';
;01500  1541	!		CHAR if first char is ';
;01600  1542	!		INTEGER otherwise.
;01700  1543	!
;01800  1544	! FORMAL PARAMETERS:
;01900  1545	!
;02000  1546	!	CONSBLOCK.mb.r		Two longword block in which to store
;02100  1547	!				the constant found.
;02200  1548	!	STRINGFLAG		0	if caller wishes not to have strings
;02300  1549	!					returned to him.
;02400  1550	!				1	if caller wants string returned:
;02500  1551	!					CONSBLOCK[0] contains the address of
;02600  1552	!					the 255 byte area to store the string.
;02700  1553	!
;02800  1554	! IMPLICIT INPUTS:
;02900  1555	!
;03000  1556	!
;03100  1557	! IMPLICIT OUTPUTS:
;03200  1558	!
;03300  1559	!	If a string constant is seen and STRINGFLAG is one, the
;03400  1560	!	string will be stored starting at the address specified in
;03500  1561	!	CONSBLOCK[0].  The string will always be 255 bytes long (blank
;03600  1562	!	padded).
;03700  1563	!
;03800  1564	! ROUTINE VALUE:
;03900  1565	!
;04000  1566	!	The type of the constant seen is returned (as a small number)
;04100  1567	!	as the routine value.
;04200  1568	!
;04300  1569	! COMPLETION CODES:
;04400  1570	!
;04500  1571	!	NONE
;04600  1572	!
;04700  1573	! SIDE EFFECTS:
;04800  1574	!
;04900  1575	!	SIGNALs FOR$LISIO_SYN if a conversion error occurs.
;05000  1576	!
;05100  1577	!--
;05200  1578	
;05300  1579	    BEGIN
;05400  1580	
;05500  1581	    EXTERNAL REGISTER

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 7-1
;
;05600  1582		CCB: REF BLOCK[, BYTE];
;05700  1583	
;05800  1584	    MAP
;05900  1585		CONSBLOCK: REF VECTOR [2];
;06000  1586	    LOCAL
;06100  1587		CTYPE: BYTE,			! local type of constant seen
;06200  1588		DSC: BLOCK[8, BYTE];
;06300  1589	
;06400  1590	    !+
;06500  1591	    ! The first character indicates what type of constant this is.
;06600  1592	    ! Perform the appropriate action.
;06700  1593	    !-
;06800  1594	
;06900  1595	    SELECTONE THISCHAR OF
;07000  1596		SET
;07100  1597	
;07200  1598		!+
;07300  1599		! Complex constant
;07400  1600		!-
;07500  1601	
;07600  1602		[ %C'(' ]:
;07700  1603		    BEGIN
;07800  1604		    LOCAL
;07900  1605			L_CONSBLOCK: VECTOR[2],
;08000  1606			B_CTYPE: BYTE,
;08100  1607			B_ERR_FLAG: BYTE;
;08200  1608	
;08300  1609		    !+
;08400  1610		    ! Set error flag to 0, skip over the '('.
;08500  1611		    !-
;08600  1612	
;08700  1613		    B_ERR_FLAG = 0;
;08800  1614		    CCB[ISB$A_BUF_PTR] = .CCB[ISB$A_BUF_PTR] + 1;
;08900  1615	
;09000  1616		    !+
;09100  1617		    ! Skip over any leading blanks and commas.  If a comma is seen
;09200  1618		    ! this is an error.
;09300  1619		    !-
;09400  1620	
;09500  1621		    IF DELIM ()
;09600  1622		    THEN
;09700  1623			B_ERR_FLAG = .B_ERR_FLAG + 1;
;09800  1624	
;09900  1625		    !+
;10000  1626		    ! Get the next constant from the input record.  Strings
;10100  1627		    ! are not allowed at this time!
;10200  1628		    !-
;10300  1629	
;10400  1630		    B_CTYPE = GETCONST (L_CONSBLOCK, 0);
;10500  1631	
;10600  1632		    !+
;10700  1633		    ! If GETCONST found an error, increment our error counter
;10800  1634		    ! otherwise convert the constant just read into a REAL*4
;10900  1635		    ! quantity and store in CONSBLOCK[0].
;11000  1636		    !-

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 7-2
;
;11100  1637	
;11200  1638		    IF .B_CTYPE EQL K_NULL
;11300  1639		    THEN
;11400  1640			B_ERR_FLAG = .B_ERR_FLAG + 1
;11500  1641		    ELSE
;11600  1642			IF NOT CONVERTTYPE (.B_CTYPE,
;11700  1643					    L_CONSBLOCK,
;11800  1644					    DSC$K_DTYPE_F,
;11900  1645					    CONSBLOCK[0])
;12000  1646			THEN
;12100  1647			    B_ERR_FLAG = .B_ERR_FLAG + 1;
;12200  1648	
;12300  1649		    !+
;12400  1650		    ! Must be a comma here.
;12500  1651		    !-
;12600  1652	
;12700  1653		    IF NOT DELIM ()
;12800  1654		    THEN
;12900  1655			B_ERR_FLAG = .B_ERR_FLAG + 1;
;13000  1656	
;13100  1657		    !+
;13200  1658		    ! Get the imaginary part and convert it to a REAL*4 quantity.
;13300  1659		    ! Store the 4-byte result into CONSBLOCK[1].
;13400  1660		    !-
;13500  1661	
;13600  1662		    B_CTYPE = GETCONST (L_CONSBLOCK, 0);
;13700  1663		    IF .B_CTYPE EQL K_NULL
;13800  1664		    THEN
;13900  1665			B_ERR_FLAG = .B_ERR_FLAG + 1
;14000  1666		    ELSE
;14100  1667			IF NOT CONVERTTYPE (.B_CTYPE,
;14200  1668					    L_CONSBLOCK,
;14300  1669					    DSC$K_DTYPE_F,
;14400  1670					    CONSBLOCK[1])
;14500  1671			THEN
;14600  1672			    B_ERR_FLAG = B_ERR_FLAG + 1;
;14700  1673	
;14800  1674		    !+
;14900  1675		    ! Skip blanks here. Better not be a comma!
;15000  1676		    !-
;15100  1677	
;15200  1678		    IF DELIM ()
;15300  1679		    THEN
;15400  1680			B_ERR_FLAG = .B_ERR_FLAG + 1;
;15500  1681	
;15600  1682		    !+
;15700  1683		    ! Check for the required ')'
;15800  1684		    !-
;15900  1685	
;16000  1686		    IF .(.CCB[ISB$A_BUF_PTR])<0,8> EQL %C')'
;16100  1687		    THEN
;16200  1688			CCB[ISB$A_BUF_PTR] = .CCB[ISB$A_BUF_PTR] + 1
;16300  1689		    ELSE
;16400  1690			B_ERR_FLAG = .B_ERR_FLAG + 1;
;16500  1691	

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 7-3
;
;16600  1692		    !+
;16700  1693		    ! If any errors occured return NULL else COMPLEX type.
;16800  1694		    !-
;16900  1695	
;17000  1696		    RETURN ((IF .B_ERR_FLAG EQL 0
;17100  1697			    THEN
;17200  1698				K_COMP
;17300  1699			    ELSE
;17400  1700				BEGIN
;17500  1701				CCB[ISB$B_ERR_NO] = FOR$K_LISIO_SYN;
;17600  1702				K_NULL
;17700  1703				END));
;17800  1704		    END;
;17900  1705	
;18000  1706		!+
;18100  1707		! Logical constant.
;18200  1708		! Point descriptor DSC to the field and set type to LOG.
;18300  1709		!-
;18400  1710	
;18500  1711		[ %C'T', %C'F' ]:
;18600  1712		    BEGIN
;18700  1713		    GETFIELD (DSC);
;18800  1714		    CTYPE = K_LOG;
;18900  1715		    END;
;19000  1716	
;19100  1717		!+
;19200  1718		! Slash seen.
;19300  1719		! Set V_SLASH and return NULL value seen.
;19400  1720		!-
;19500  1721	
;19600  1722		[ %C'/' ]:
;19700  1723		    BEGIN
;19800  1724		    CCB[ISB$V_SLASH] = 1;
;19900  1725		    RETURN K_NULL;
;20000  1726		    END;
;20100  1727	
;20200  1728		!+
;20300  1729		! Comma or EOL.
;20400  1730		! Indicates null field.  Return NULL value seen.
;20500  1731		!-
;20600  1732	
;20700  1733		[ %C',', -1 ]:
;20800  1734		    RETURN K_NULL;
;20900  1735	
;21000  1736		!+
;21100  1737		! String constant.
;21200  1738		! Gather up the string (handling double 's intelligently).
;21300  1739		! If STRINGFLAG is 1, store the string through CONSBLOCK[0].
;21400  1740		! The string returned is always 255 bytes long (blank padded).
;21500  1741		! If the string read is longer than 255 chars, SIGNAL LISIO_SYN
;21600  1742		! and ignore the rest of the characters after the 255th.
;21700  1743		!-
;21800  1744	
;21900  1745		[ %C'''' ]:
;22000  1746		    BEGIN

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 7-4
;
;22100  1747		    LOCAL
;22200  1748			C,			! Local character holder
;22300  1749			A_BUF_PTR,		! if STRINGFLAG, points to callers buffer
;22400  1750			A_BUF_END;		! if STRINGFLAG, points to end of buffer
;22500  1751	
;22600  1752		    !+
;22700  1753		    ! Initialize locals
;22800  1754		    !-
;22900  1755	
;23000  1756		    IF .STRINGFLAG
;23100  1757		    THEN
;23200  1758			BEGIN
;23300  1759			A_BUF_PTR = .CONSBLOCK[0];
;23400  1760			A_BUF_END = .A_BUF_PTR + 255;
;23500  1761			END;
;23600  1762		    C = NEXTCHAR;
;23700  1763	
;23800  1764		    !+
;23900  1765		    ! Loop forever.  Loop logic does an EXITLOOP when the
;24000  1766		    ! closing quote character is found.
;24100  1767		    !-
;24200  1768	
;24300  1769		    WHILE 1 DO
;24400  1770			BEGIN
;24500  1771	
;24600  1772			!+
;24700  1773			! If End-Of-Line is seen read another record, get the
;24800  1774			! first character and continue looping.
;24900  1775			!-
;25000  1776	
;25100  1777			IF .C LSS 0
;25200  1778			THEN
;25300  1779			    BEGIN
;25400  1780			    FOR$$REC_RSL1 ();
;25500  1781			    C = THISCHAR;
;25600  1782			    END
;25700  1783	
;25800  1784			ELSE
;25900  1785	
;26000  1786			    BEGIN
;26100  1787			    IF .C EQL %C''''
;26200  1788			    THEN
;26300  1789				BEGIN
;26400  1790				C = NEXTCHAR;
;26500  1791				IF .C NEQ %C''''
;26600  1792				THEN
;26700  1793				    EXITLOOP;
;26800  1794				END;
;26900  1795	
;27000  1796			    !+
;27100  1797			    ! If the buffer just overflowed, SIGNAL LISIO_SYN.
;27200  1798			    ! If the buffer overflowed sometime previous to this
;27300  1799			    ! iteration, don't do anything with the character.
;27400  1800			    ! Otherwise (less than 255 chars seen), continue to
;27500  1801			    ! Store bytes in the users buffer.

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 7-5
;
;27600  1802			    !-
;27700  1803	
;27800  1804			    IF .STRINGFLAG
;27900  1805			    THEN
;28000  1806				BEGIN
;28100  1807				IF .A_BUF_PTR LSSP .A_BUF_END
;28200  1808				THEN
;28300  1809			            CH$WCHAR (.C, .A_BUF_PTR)
;28400  1810				ELSE
;28500  1811				IF .A_BUF_PTR EQLP .A_BUF_END
;28600  1812				THEN
;28700  1813				    CCB[ISB$B_ERR_NO] = FOR$K_LISIO_SYN;
;28800  1814	
;28900  1815				A_BUF_PTR = .A_BUF_PTR + 1;
;29000  1816				END;
;29100  1817			    C = NEXTCHAR;
;29200  1818			    END;
;29300  1819			END;			! End of main loop
;29400  1820	
;29500  1821		    !+
;29600  1822		    ! Blank pad the string to a length of 255 bytes.
;29700  1823		    !-
;29800  1824	
;29900  1825		    IF .STRINGFLAG
;30000  1826		    THEN
;30100  1827			CH$FILL (%C' ', CH$DIFF(.A_BUF_END, .A_BUF_PTR), .A_BUF_PTR);
;30200  1828		    RETURN K_CHAR;
;30300  1829		    END;
;30400  1830	
;30500  1831		!+
;30600  1832		! It's an integer or real constant (I hope).
;30700  1833		! Gather the constant and return its type.
;30800  1834		!-
;30900  1835	
;31000  1836		[ OTHERWISE ]:
;31100  1837		    BEGIN
;31200  1838		    CTYPE = GETFIELD (DSC);
;31300  1839		    IF .DSC[DSC$W_LENGTH] EQL 0
;31400  1840		    THEN
;31500  1841			RETURN K_NULL;
;31600  1842		    END;
;31700  1843		TES;
;31800  1844	
;31900  1845	    !+
;32000  1846	    ! Now that we have the LOG, INT, or REAL constant (as a string pointed
;32100  1847	    ! to by DSC), it must be converted into binary.  Use the library
;32200  1848	    ! input conversion routines to store the resultant value into
;32300  1849	    ! CONSBLOCK[0].  Return the type of constant seen as routine value.
;32400  1850	    !-
;32500  1851	
;32600  1852	    RETURN (
;32700  1853		IF NOT (CASE .CTYPE FROM K_LOG TO K_REAL OF
;32800  1854		    SET
;32900  1855	
;33000  1856		    [ K_LOG ]:

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 7-6
;
;33100  1857			FOR$CNV_IN_L;
;33200  1858	
;33300  1859		    [ K_INT ]:
;33400  1860			FOR$CNV_IN_I;
;33500  1861	
;33600  1862		    [ K_REAL ]:
;33700  1863			FOR$CNV_IN_DEFG;
;33800  1864		    TES) (DSC, CONSBLOCK[0], 0)
;33900  1865		THEN
;34000  1866		    BEGIN
;34100  1867		    CCB[ISB$B_ERR_NO] = FOR$K_LISIO_SYN;
;34200  1868		    K_NULL
;34300  1869		    END
;34400  1870		ELSE
;34500  1871		    .CTYPE );
;34600  1872	    END;





					 01FC 00289 GETCONST:
							    .WORD   Save R2,R3,R4,R5,R6,R7,R8				      ; 1527
		         58 	0000V  CF  9E 0028B 	    MOVAB   DELIM, R8						      ;
		         5E 	       14  C2 00290 	    SUBL2   #20, SP						      ;
		    BC   AB	  B8   AB  D1 00293 	    CMPL    -72(CCB), -68(CCB)					      ; 1595
				       05  1F 00298 	    BLSSU   1$							      ;
		         56 	       01  CE 0029A 	    MNEGL   #1, R6						      ;
				       04  11 0029D 	    BRB     2$							      ;
		         56 	  B8   BB  9A 0029F 1$:     MOVZBL  @-72(CCB), R6					      ;
		         28 	       56  D1 002A3 2$:     CMPL    R6, #40						      ;
				       03  13 002A6 	    BEQL    3$							      ;
				     0086  31 002A8 	    BRW     14$							      ;
				       6E  94 002AB 3$:     CLRB    B_ERR_FLAG						      ; 1613
				  B8   AB  D6 002AD 	    INCL    -72(CCB)						      ; 1614
		         68 	       00  FB 002B0 	    CALLS   #0, DELIM						      ; 1621
		         02 	       50  E9 002B3 	    BLBC    R0, 4$						      ;
				       6E  96 002B6 	    INCB    B_ERR_FLAG						      ; 1623
				       7E  D4 002B8 4$:     CLRL    -(SP)						      ; 1630
				  08   AE  9F 002BA 	    PUSHAB  L_CONSBLOCK						      ;
		    C8   AF	       02  FB 002BD 	    CALLS   #2, GETCONST					      ;
		         52 	       50  90 002C1 	    MOVB    R0, B_CTYPE						      ;
				       13  13 002C4 	    BEQL    5$							      ; 1638
				  04   AC  DD 002C6 	    PUSHL   CONSBLOCK						      ; 1642
				       0A  DD 002C9 	    PUSHL   #10							      ;
				  0C   AE  9F 002CB 	    PUSHAB  L_CONSBLOCK						      ;
		         7E 	       52  9A 002CE 	    MOVZBL  B_CTYPE, -(SP)					      ;
		  FEB6   CF	       04  FB 002D1 	    CALLS   #4, CONVERTTYPE					      ;
		         02 	       50  E8 002D6 	    BLBS    R0, 6$						      ;
				       6E  96 002D9 5$:     INCB    B_ERR_FLAG						      ; 1647
		         68 	       00  FB 002DB 6$:     CALLS   #0, DELIM						      ; 1653
		         02 	       50  E8 002DE 	    BLBS    R0, 7$						      ;
				       6E  96 002E1 	    INCB    B_ERR_FLAG						      ; 1655
				       7E  D4 002E3 7$:     CLRL    -(SP)						      ; 1662
				  08   AE  9F 002E5 	    PUSHAB  L_CONSBLOCK						      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 7-7
;
		    9D   AF	       02  FB 002E8 	    CALLS   #2, GETCONST					      ;
		         52 	       50  90 002EC 	    MOVB    R0, B_CTYPE						      ;
				       04  12 002EF 	    BNEQ    8$							      ; 1663
				       6E  96 002F1 	    INCB    B_ERR_FLAG						      ; 1665
				       1C  11 002F3 	    BRB     9$							      ; 1663
	   7E 	    04   AC	       04  C1 002F5 8$:     ADDL3   #4, CONSBLOCK, -(SP)				      ; 1670
				       0A  DD 002FA 	    PUSHL   #10							      ; 1667
				  0C   AE  9F 002FC 	    PUSHAB  L_CONSBLOCK						      ;
		         7E 	       52  9A 002FF 	    MOVZBL  B_CTYPE, -(SP)					      ;
		  FE85   CF	       04  FB 00302 	    CALLS   #4, CONVERTTYPE					      ;
		         07 	       50  E8 00307 	    BLBS    R0, 9$						      ;
		         50 	  01   AE  9E 0030A 	    MOVAB   B_ERR_FLAG+1, R0					      ; 1672
		         6E 	       50  90 0030E 	    MOVB    R0, B_ERR_FLAG					      ;
		         68 	       00  FB 00311 9$:     CALLS   #0, DELIM						      ; 1678
		         02 	       50  E9 00314 	    BLBC    R0, 10$						      ;
				       6E  96 00317 	    INCB    B_ERR_FLAG						      ; 1680
		         29 	  B8   BB  91 00319 10$:    CMPB    @-72(CCB), #41					      ; 1686
				       05  12 0031D 	    BNEQ    11$							      ;
				  B8   AB  D6 0031F 	    INCL    -72(CCB)						      ; 1688
				       02  11 00322 	    BRB     12$							      ; 1686
				       6E  96 00324 11$:    INCB    B_ERR_FLAG						      ; 1690
				       6E  95 00326 12$:    TSTB    B_ERR_FLAG						      ; 1696
				       03  13 00328 	    BEQL    13$							      ;
				     00F1  31 0032A 	    BRW     38$							      ;
		         50 	       04  D0 0032D 13$:    MOVL    #4, R0						      ;
					   04 00330 	    RET     							      ;
	      00000046   8F	       56  D1 00331 14$:    CMPL    R6, #70						      ; 1595
				       09  13 00338 	    BEQL    15$							      ;
	      00000054   8F	       56  D1 0033A 	    CMPL    R6, #84						      ;
				       0E  12 00341 	    BNEQ    16$							      ;
				  0C   AE  9F 00343 15$:    PUSHAB  DSC							      ; 1713
		  0000V  CF	       01  FB 00346 	    CALLS   #1, GETFIELD					      ;
		         57 	       01  90 0034B 	    MOVB    #1, CTYPE						      ; 1714
				     00A2  31 0034E 	    BRW     32$							      ; 1595
		         2F 	       56  D1 00351 16$:    CMPL    R6, #47						      ;
				       07  12 00354 	    BNEQ    18$							      ;
		    D7   AB	       04  88 00356 	    BISB2   #4, -41(CCB)					      ; 1724
				     00CB  31 0035A 17$:    BRW     40$							      ; 1725
	      FFFFFFFF   8F	       56  D1 0035D 18$:    CMPL    R6, #-1						      ; 1595
				       F4  13 00364 	    BEQL    17$							      ;
		         2C 	       56  D1 00366 	    CMPL    R6, #44						      ;
				       EF  13 00369 	    BEQL    17$							      ;
		         27 	       56  D1 0036B 	    CMPL    R6, #39						      ;
				       73  12 0036E 	    BNEQ    31$							      ;
		         4E 	  08   AC  E9 00370 	    BLBC    STRINGFLAG, 27$					      ; 1756
		         53 	  04   BC  D0 00374 	    MOVL    @CONSBLOCK, A_BUF_PTR				      ; 1759
		         54 	00FF   C3  9E 00378 	    MOVAB   255(R3), A_BUF_END					      ; 1760
				       43  11 0037D 	    BRB     27$							      ; 1762
		         52 	  B8   BB  9A 0037F 19$:    MOVZBL  @-72(CCB), C					      ;
				       52  D5 00383 20$:    TSTL    C							      ; 1777
				       05  18 00385 	    BGEQ    21$							      ;
				     0000G 30 00387 	    BSBW    FOR$$REC_RSL1					      ; 1780
				       39  11 0038A 	    BRB     28$							      ; 1781
		         27 	       52  D1 0038C 21$:    CMPL    C, #39						      ; 1787
				       18  12 0038F 	    BNEQ    24$							      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 7-8
;
				  B8   AB  D6 00391 	    INCL    -72(CCB)						      ; 1790
		    BC   AB	  B8   AB  D1 00394 	    CMPL    -72(CCB), -68(CCB)					      ;
				       05  1F 00399 	    BLSSU   22$							      ;
		         52 	       01  CE 0039B 	    MNEGL   #1, C						      ;
				       04  11 0039E 	    BRB     23$							      ;
		         52 	  B8   BB  9A 003A0 22$:    MOVZBL  @-72(CCB), C					      ;
		         27 	       52  D1 003A4 23$:    CMPL    C, #39						      ; 1791
				       28  12 003A7 	    BNEQ    29$							      ;
		         15 	  08   AC  E9 003A9 24$:    BLBC    STRINGFLAG, 27$					      ; 1804
		         54 	       53  D1 003AD 	    CMPL    A_BUF_PTR, A_BUF_END				      ; 1807
				       05  1E 003B0 	    BGEQU   25$							      ;
		         63 	       52  90 003B2 	    MOVB    C, (A_BUF_PTR)					      ; 1809
				       09  11 003B5 	    BRB     26$							      ; 1807
		         54 	       53  D1 003B7 25$:    CMPL    A_BUF_PTR, A_BUF_END				      ; 1811
				       04  12 003BA 	    BNEQ    26$							      ;
		    A4   AB	       3B  90 003BC 	    MOVB    #59, -92(CCB)					      ; 1813
				       53  D6 003C0 26$:    INCL    A_BUF_PTR						      ; 1815
				  B8   AB  D6 003C2 27$:    INCL    -72(CCB)						      ; 1817
		    BC   AB	  B8   AB  D1 003C5 28$:    CMPL    -72(CCB), -68(CCB)					      ;
				       B3  1F 003CA 	    BLSSU   19$							      ;
		         52 	       01  CE 003CC 	    MNEGL   #1, C						      ;
				       B2  11 003CF 	    BRB     20$							      ;
		         0A 	  08   AC  E9 003D1 29$:    BLBC    STRINGFLAG, 30$					      ; 1825
	   50 	         54 	       53  C3 003D5 	    SUBL3   A_BUF_PTR, A_BUF_END, R0				      ; 1827
	   20 	         6E 	       00  2C 003D9 	    MOVC5   #0, (SP), #32, R0, (A_BUF_PTR)			      ;
		         63 	       50     003DD									      ;
		         50 	       05  D0 003DF 30$:    MOVL    #5, R0						      ; 1828
					   04 003E2 	    RET     							      ;
				  0C   AE  9F 003E3 31$:    PUSHAB  DSC							      ; 1838
		  0000V  CF	       01  FB 003E6 	    CALLS   #1, GETFIELD					      ;
		         57 	       50  90 003EB 	    MOVB    R0, CTYPE						      ;
				  0C   AE  B5 003EE 	    TSTW    DSC							      ; 1839
				       35  13 003F1 	    BEQL    40$							      ;
	   02 	         01 	       57  8F 003F3 32$:    CASEB   CTYPE, #1, #2					      ; 1853
	 0014 	       000D 	     0006     003F7 33$:    .WORD   34$-33$,-						      ;
								    35$-33$,-						      ;
								    36$-33$						      ;
		         50 	0000G  CF  9E 003FD 34$:    MOVAB   FOR$CNV_IN_L, R0					      ;
				       0C  11 00402 	    BRB     37$							      ;
		         50 	0000G  CF  9E 00404 35$:    MOVAB   FOR$CNV_IN_I, R0					      ;
				       05  11 00409 	    BRB     37$							      ;
		         50 	0000G  CF  9E 0040B 36$:    MOVAB   FOR$CNV_IN_DEFG, R0					      ;
				       7E  D4 00410 37$:    CLRL    -(SP)						      ; 1864
				  04   AC  DD 00412 	    PUSHL   CONSBLOCK						      ;
				  14   AE  9F 00415 	    PUSHAB  DSC							      ;
		         60 	       03  FB 00418 	    CALLS   #3, (R0)						      ;
		         06 	       50  E8 0041B 	    BLBS    R0, 39$						      ;
		    A4   AB	       3B  90 0041E 38$:    MOVB    #59, -92(CCB)					      ; 1867
				       04  11 00422 	    BRB     40$							      ; 1852
		         50 	       57  9A 00424 39$:    MOVZBL  CTYPE, R0						      ;
					   04 00427 	    RET     							      ;
				       50  D4 00428 40$:    CLRL    R0							      ; 1527
					   04 0042A 	    RET     							      ;

; Routine Size:  418 bytes

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 7-9
;



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 8
;
;00100  1873	ROUTINE GETFIELD (
;00200  1874		DSC)
;00300  1875		: CALL_CCB =
;00400  1876	
;00500  1877	!++
;00600  1878	! FUNCTIONAL DESCRIPTION:
;00700  1879	!
;00800  1880	!	Determine the length and type of the field pointed to by ISB$A_BUF_PTR.
;00900  1881	!	Point string descriptor DSC to the field.
;01000  1882	!	Return the type as the routine value.
;01100  1883	!
;01200  1884	! FORMAL PARAMETERS:
;01300  1885	!
;01400  1886	!	DSC.wl.r		String descriptor to point to field
;01500  1887	!
;01600  1888	! IMPLICIT INPUTS:
;01700  1889	!
;01800  1890	!	NONE
;01900  1891	!
;02000  1892	! IMPLICIT OUTPUTS:
;02100  1893	!
;02200  1894	!	NONE
;02300  1895	!
;02400  1896	! ROUTINE VALUE:
;02500  1897	!
;02600  1898	!	Returns the type of constant seen (as a small integer).
;02700  1899	!
;02800  1900	! COMPLETION CODES:
;02900  1901	!
;03000  1902	!	NONE
;03100  1903	!
;03200  1904	! SIDE EFFECTS:
;03300  1905	!
;03400  1906	!	NONE
;03500  1907	!
;03600  1908	!--
;03700  1909	
;03800  1910	    BEGIN
;03900  1911	
;04000  1912	    EXTERNAL REGISTER
;04100  1913		CCB: REF BLOCK[, BYTE];
;04200  1914	
;04300  1915	    MAP
;04400  1916		DSC: REF BLOCK[8, BYTE];
;04500  1917	
;04600  1918	    LOCAL
;04700  1919		T,				! type of constant seen
;04800  1920		C;				! local character holder
;04900  1921	
;05000  1922	    !+
;05100  1923	    ! Point the descriptor pointer to the start of the field.
;05200  1924	    !-
;05300  1925	
;05400  1926	    DSC[DSC$A_POINTER] = .CCB[ISB$A_BUF_PTR];
;05500  1927	

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 8-1
;
;05600  1928	    !+
;05700  1929	    ! Assume type INTeger.
;05800  1930	    !-
;05900  1931	
;06000  1932	    T = K_INT;
;06100  1933	    C = THISCHAR;
;06200  1934	
;06300  1935	    !+
;06400  1936	    ! Skip through the string looking for delimiters and the letters  E,D, or .
;06500  1937	    ! If E, D, or . is seen the type becomes REAL.  If a delimiter is seen,
;06600  1938	    ! or we hit EOL, we've reached the end of the constant.
;06700  1939	    !-
;06800  1940	
;06900  1941	    WHILE .C GEQ 0 DO
;07000  1942		BEGIN
;07100  1943		IF NOT CH$FAIL (CH$FIND_CH (6, UPLIT (' 	,/*)'), .C))
;07200  1944		THEN
;07300  1945		    EXITLOOP;
;07400  1946		IF NOT CH$FAIL (CH$FIND_CH (3, UPLIT ('ED.'), .C))
;07500  1947		THEN
;07600  1948		    T = K_REAL;
;07700  1949		C = NEXTCHAR;
;07800  1950		END;
;07900  1951	
;08000  1952	    DSC[DSC$W_LENGTH] = CH$DIFF (.CCB[ISB$A_BUF_PTR], .DSC[DSC$A_POINTER]);
;08100  1953	
;08200  1954	    RETURN .T;
;08300  1955	
;08400  1956	    END;



					      0042B	    .BLKB   1
	      00  00  29  2A  2F  2C  09  20  0042C P.AAB:  .ASCII  \ \<9>\,/*)\<0><0>					      ;
			      00  2E  44  45  00434 P.AAC:  .ASCII  \ED.\<0>						      ;



					 001C 00438 GETFIELD:
							    .WORD   Save R2,R3,R4					      ; 1873
		         53 	  04   AC  D0 0043A 	    MOVL    DSC, R3						      ; 1926
		    04   A3	  B8   AB  D0 0043E 	    MOVL    -72(CCB), 4(R3)					      ;
		         54 	       02  D0 00443 	    MOVL    #2, T						      ; 1932
				       28  11 00446 	    BRB     6$							      ; 1933
		         52 	  B8   BB  9A 00448 1$:     MOVZBL  @-72(CCB), C					      ;
				       52  D5 0044C 2$:     TSTL    C							      ; 1941
				       2C  19 0044E 	    BLSS    7$							      ;
      D7   AF	         06 	       52  3A 00450 	    LOCC    C, #6, P.AAB					      ; 1943
				       02  12 00455 	    BNEQ    3$							      ;
				       51  D4 00457 	    CLRL    R1							      ;
				       51  D5 00459 3$:     TSTL    R1							      ;
				       1F  12 0045B 	    BNEQ    7$							      ;
      D2   AF	         03 	       52  3A 0045D 	    LOCC    C, #3, P.AAC					      ; 1946
				       02  12 00462 	    BNEQ    4$							      ;
				       51  D4 00464 	    CLRL    R1							      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 8-2
;
				       51  D5 00466 4$:     TSTL    R1							      ;
				       03  13 00468 	    BEQL    5$							      ;
		         54 	       03  D0 0046A 	    MOVL    #3, T						      ; 1948
				  B8   AB  D6 0046D 5$:     INCL    -72(CCB)						      ; 1949
		    BC   AB	  B8   AB  D1 00470 6$:     CMPL    -72(CCB), -68(CCB)					      ;
				       D1  1F 00475 	    BLSSU   1$							      ;
		         52 	       01  CE 00477 	    MNEGL   #1, C						      ;
				       D0  11 0047A 	    BRB     2$							      ;
	   63 	    B8   AB	  04   A3  A3 0047C 7$:     SUBW3   4(R3), -72(CCB), (R3)				      ; 1952
		         50 	       54  D0 00482 	    MOVL    T, R0						      ; 1954
					   04 00485 	    RET     							      ; 1873

; Routine Size:  78 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 9
;
;00100  1957	ROUTINE SKIPBLANKS
;00200  1958		: CALL_CCB =
;00300  1959	
;00400  1960	!++
;00500  1961	! FUNCTIONAL DESCRIPTION:
;00600  1962	!
;00700  1963	!	Skip over blanks, tabs, and EOLs and return  the first
;00800  1964	!	"real" character.
;00900  1965	!
;01000  1966	! FORMAL PARAMETERS:
;01100  1967	!
;01200  1968	!	NONE
;01300  1969	!
;01400  1970	! IMPLICIT INPUTS:
;01500  1971	!
;01600  1972	!	ISB$A_BUF_PTR		points to first char to scan
;01700  1973	!
;01800  1974	! IMPLICIT OUTPUTS:
;01900  1975	!
;02000  1976	!	NONE
;02100  1977	!
;02200  1978	! ROUTINE VALUE:
;02300  1979	!
;02400  1980	!	Return the first real char found.
;02500  1981	!
;02600  1982	! COMPLETION CODES:
;02700  1983	!
;02800  1984	!	NONE
;02900  1985	!
;03000  1986	! SIDE EFFECTS:
;03100  1987	!
;03200  1988	!	Will cause a record to be read if no data is found in the current
;03300  1989	!	record.
;03400  1990	!
;03500  1991	!--
;03600  1992	
;03700  1993	    BEGIN
;03800  1994	
;03900  1995	    EXTERNAL REGISTER
;04000  1996		CCB: REF BLOCK[, BYTE];
;04100  1997	
;04200  1998	    LOCAL
;04300  1999		C;
;04400  2000	
;04500  2001	    WHILE 1 DO
;04600  2002		BEGIN
;04700  2003		C = THISCHAR;
;04800  2004		WHILE .C EQL %C' ' OR .C EQL K_TAB DO
;04900  2005		    C = NEXTCHAR;
;05000  2006		IF .C GEQ 0 THEN RETURN .C;
;05100  2007		FOR$$REC_RSL1 ();
;05200  2008		END;
;05300  2009	    END;



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 9-1
;



					 0004 00486 SKIPBLANKS:
							    .WORD   Save R2						      ; 1957
				       11  11 00488 	    BRB     4$							      ; 2003
		         52 	  B8   BB  9A 0048A 1$:     MOVZBL  @-72(CCB), C					      ;
		         20 	       52  D1 0048E 2$:     CMPL    C, #32						      ; 2004
				       05  13 00491 	    BEQL    3$							      ;
		         09 	       52  D1 00493 	    CMPL    C, #9						      ;
				       0F  12 00496 	    BNEQ    5$							      ;
				  B8   AB  D6 00498 3$:     INCL    -72(CCB)						      ; 2005
		    BC   AB	  B8   AB  D1 0049B 4$:     CMPL    -72(CCB), -68(CCB)					      ;
				       E8  1F 004A0 	    BLSSU   1$							      ;
		         52 	       01  CE 004A2 	    MNEGL   #1, C						      ;
				       E7  11 004A5 	    BRB     2$							      ;
				       52  D5 004A7 5$:     TSTL    C							      ; 2006
				       04  19 004A9 	    BLSS    6$							      ;
		         50 	       52  D0 004AB 	    MOVL    C, R0						      ;
					   04 004AE 	    RET     							      ;
				     0000G 30 004AF 6$:     BSBW    FOR$$REC_RSL1					      ; 2007
				       E7  11 004B2 	    BRB     4$							      ; 2001

; Routine Size:  46 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 10
;
;00100  2010	ROUTINE DELIM
;00200  2011		: CALL_CCB =
;00300  2012	
;00400  2013	!++
;00500  2014	! FUNCTIONAL DESCRIPTION:
;00600  2015	!
;00700  2016	!	Process blanks, tabs, EOLs and commas.
;00800  2017	!
;00900  2018	! FORMAL PARAMETERS:
;01000  2019	!
;01100  2020	!	NONE
;01200  2021	!
;01300  2022	! IMPLICIT INPUTS:
;01400  2023	!
;01500  2024	!	ISB$A_BUF_PTR		points to first char to scan
;01600  2025	!
;01700  2026	! IMPLICIT OUTPUTS:
;01800  2027	!
;01900  2028	!	NONE
;02000  2029	!
;02100  2030	! ROUTINE VALUE:
;02200  2031	!
;02300  2032	!	1	if 1 comma encountered
;02400  2033	!	0	if no commas or 2 commas (null field)
;02500  2034	! COMPLETION CODES:
;02600  2035	!
;02700  2036	!	NONE
;02800  2037	!
;02900  2038	! SIDE EFFECTS:
;03000  2039	!
;03100  2040	!	NONE
;03200  2041	!
;03300  2042	!--
;03400  2043	
;03500  2044	    BEGIN
;03600  2045	
;03700  2046	    EXTERNAL REGISTER
;03800  2047		CCB: REF BLOCK[, BYTE];
;03900  2048	
;04000  2049	    IF SKIPBLANKS() NEQ %C',' THEN RETURN 0;
;04100  2050	    CCB[ISB$A_BUF_PTR] = .CCB[ISB$A_BUF_PTR] + 1;
;04200  2051	    RETURN (SKIPBLANKS () NEQ %C',');
;04300  2052	    END;





					 0000 004B4 DELIM:  .WORD   Save nothing					      ; 2010
		    CC   AF	       00  FB 004B6 	    CALLS   #0, SKIPBLANKS					      ; 2049
		         2C 	       50  D1 004BA 	    CMPL    R0, #44						      ;
				       14  12 004BD 	    BNEQ    2$							      ;
				  B8   AB  D6 004BF 	    INCL    -72(CCB)						      ; 2050
		    C0   AF	       00  FB 004C2 	    CALLS   #0, SKIPBLANKS					      ; 2051
				       51  D4 004C6 	    CLRL    R1							      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:26:26	DBB3:[RTL.SRC]FUDFRL.B32;8					Page 10-1
;
		         2C 	       50  D1 004C8 	    CMPL    R0, #44						      ;
				       02  13 004CB 	    BEQL    1$							      ;
				       51  D6 004CD 	    INCL    R1							      ;
		         50 	       51  D0 004CF 1$:     MOVL    R1, R0						      ;
					   04 004D2 	    RET     							      ;
				       50  D4 004D3 2$:     CLRL    R0							      ; 2010
					   04 004D5 	    RET     							      ;

; Routine Size:  34 bytes


;04400  2053	
;04500  2054	
;04600  2055	END
;04700  2056	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  FOR$CODE       	  1238  NOWRT,  RD ,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]STARLET.L32;1		      2688         6         0       109





; Size:		1145 code + 93 data bytes
; Run Time:	00:33.6
; Elapsed Time:	02:01.2
; Memory Used:	278 pages
; Compilation Complete
