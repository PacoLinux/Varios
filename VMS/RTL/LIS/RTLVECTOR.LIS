RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page   1
0-29                                                                                                                             (1)

                                     0000   100 ; PARAMETER file to define RTLVECTOR symbol.
                                     0000   200 ; which when assembled in front of ALLGBL.MAR produces
                                     0000   300 ; the transfer vectors for the RTL instead of all the GLOBALs
                                     0000   400 
                           00000001  0000   500 	RTLVECTOR = 1
                                     0000   100 .IF NDF	RTLVECTOR
                                     0000   200 	.TITLE	ALLGBL - Define all GLOBAL entry points available to users
                                     0000   300 .IFF
                                     0000   400 	.TITLE	RTLVECTOR - Define entry vectors for RTL
                                     0000   500 .ENDC
                                     0000   600 	.IDENT	/0-29/		; File: ALLGBL.MAR or RTLVECTOR.MAR+ALLGBL.MAR
                                     0000   700 
                                     0000   800 ; 0-1	- Remove all internal entry points.  TNH 23-June-78
                                     0000   900 ; 0-2	- Define entry vector macro.  TNH 23-June-78
                                     0000  1000 ; 0-6	- Remove LIB$INITIALIZE, change INI_DEC to JSB.  TNH 26-June-78
                                     0000  1100 ; 0-7	- Make 8 byte vectors.  TNH 27-June-78
                                     0000  1200 ; 0-8	- Add PSECTs.  TNH 28-June-78
                                     0000  1300 ; 0-9	- Add FUTURE.  TNH 28-June-78
                                     0000  1400 ; 0-10	- Add LIB$CVT_ATx.  TNH 28-June-78
                                     0000  1500 ; 0-11	- Rearrange contents of vector for FORTRAN.  TNH 4-July-78
                                     0000  1600 ;	- NOTE: incompatible with 0-10.!!!!
                                     0000  1700 ; 0-14	- Make vector be contiguous.  TNH 7-July-78
                                     0000  1800 ; 0-16	- Change LIB$SCOPY, OTS$SCOPY.  TNH 10-July-78
                                     0000  1900 ; 0-17	- Remove user vector page.  TNH 27-July-78
                                     0000  2000 ;	NOTE: Incompatible with 0-16!!!!!!!!!!!!!
                                     0000  2100 ; 0-19	- Remove LIB$K_VERSION.  TNH 1-Aug-78
                                     0000  2200 ; 0-20	- Make DXDD and R_DD FUTURE.  TNH 1-Aug-78
                                     0000  2300 ; 0-21	- Fix FURURE to FUTURE.  TNH 1-Aug-78
                                     0000  2400 ; 0-22	- Add FOR$$CB_PUSH, FOR$$CB_POP, FOR$$ERRSNS_SAV vectors. TNH 1-Aug-78
                                     0000  2500 ; 0-25	- Declare .PSECT with proper attributes.  TNH 2-Aug-78
                                     0000  2600 ; 0-26	- Remove FOR$$CLOSE_FILE entry vector.  TNH 2-Aug-78
                                     0000  2700 ; 0-27	- Include FOR$$CB_RET, called from FOR$$ERROR which is loaded
                                     0000  2800 ;	  from default OBJ library if compatibility routines.  TNH 2-Aug-78
                                     0000  2900 ; 0-28	- Add FOR$$CB_GET and remove LIB$SCOPY_xxDDn FUTUREs.  TNH 2-Aug-78
                                     0000  3000 ; 0-29	- Add comments about $$ entry points.  TNH 3-Aug-78
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page   2
0-29                                                                                                                             (2)

                                     0000   100 ;+
                                     0000   200 ; Define MAC to either generate .EXTRN declarations or entry vector
                                     0000   300 ; depending on whether the symbol RTLVECTOR is defined or not.
                                     0000   400 ;
                                     0000   500 ; To assemble RTLVECTOR, use @MARVECTOR.COM.
                                     0000   600 ;
                                     0000   700 ;
                                     0000   800 ; call:	MAC	VEC_TYPE, VEC_AREA, SYMBOL, MASK
                                     0000   900 ;
                                     0000  1000 ; where	VEC_TYPE is:	CALL	- call entry point transfer vector
                                     0000  1100 ;			JSB	- JSB entry point transfer vector
                                     0000  1200 ;			NOVECT	- do not have a transfer vector
                                     0000  1300 ;			SYM	- this is a symbol, not an entry point
                                     0000  1400 ;			FUTURE	- this is a proposed entry point, not yet
                                     0000  1500 ;				implemented, but space reserved.
                                     0000  1600 ;	VEC_AREA is:	FOR	- FORTRAN entry points
                                     0000  1700 ;			LIB	- library entry points
                                     0000  1800 ;			MTH	- Math library entry points
                                     0000  1900 ;			OTS	- Language independent entry points
                                     0000  2000 ;	SYMBOL is:	any entry point symbol
                                     0000  2100 ;	MASK is:	optional entry mask if not same as SYMBOL
                                     0000  2200 ;
                                     0000  2300 ;	Each entry vector is 8 bytes long for speed and for future
                                     0000  2400 ;	where we may need to branch more than 32K away or may need to
                                     0000  2500 ;	dispatch to another global section.
                                     0000  2600 ;
                                     0000  2700 ;	ALLOCATION OF VECTOR SPACE:
                                     0000  2800 
                                     0000  2900 ;	Vector space is allocated primarily by facility, with each
                                     0000  3000 ;	facility packed adjacent to the next.
                                     0000  3100 ;	In future releases, the facilities will be come more mixed up.
                                     0000  3200 ;	However, this is not problem, since the RTL will be one
                                     0000  3300 ;	shared image section now and forever, since it is attached
                                     0000  3400 ;	to the end of the user program and is therefore able
                                     0000  3500 ;	to grow indefinitely in future releases without requiring
                                     0000  3600 ;	re-linking of user programs because of  help from
                                     0000  3700 ;	its friends (the LINKER and image activator).
                                     0000  3800 ;
                                     0000  3900 ;	The order and size of vector space is:
                                     0000  4000 ;
                                     0000  4100 ;	FOR$	69 entry points
                                     0000  4200 ;	MTH$	53 entry points
                                     0000  4300 ;	OTS$	14 entry points
                                     0000  4400 ;	LIB$	35 entry points
                                     0000  4500 ;
                                     0000  4600 ;	PSECT names are of form $$VEC_n_fac
                                     0000  4700 ;	where: n is increasing number for alphabetic sorting by linker
                                     0000  4800 ;		and fac is facility prefix.
                                     0000  4900 ;-
                                     0000  5000 
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page   3
0-29                                                                                                                             (3)

                                     0000   100 .MACRO	MAC	VEC_TYPE, VEC_AREA, SYMBOL, MASK
                                     0000   200 .IF NDF	RTLVECTOR			; Just generate .EXTRN references?
                                     0000   300     .IF DIF VEC_TYPE, FUTURE		; except if future entry point
                                     0000   400 	.EXTRN	SYMBOL			; yes
                                     0000   500     .ENDC
                                     0000   600 .IFF					; or generate entry VECTOR?
                                     0000   700     .IF IDN	VEC_TYPE, JSB
                                     0000   800 	.TRANSFER	SYMBOL
                                     0000   900 	BRW	SYMBOL			; branch to JSB routine
                                     0000  1000 	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0000  1100     .ENDC
                                     0000  1200 
                                     0000  1300     .IF IDN	VEC_TYPE, CALL
                                     0000  1400 	.TRANSFER	SYMBOL
                                     0000  1500       .IF B MASK
                                     0000  1600 	.MASK	SYMBOL
                                     0000  1700       .IFF
                                     0000  1800 	.MASK	MASK			; get mask from other name
                                     0000  1900       .ENDC
                                     0000  2000 	BRW	SYMBOL+2		; branch to CALL+2 routine
                                     0000  2100 	.BYTE	0,0,0			; fill out to 8 bytes
                                     0000  2200     .ENDC
                                     0000  2300 
                                     0000  2400     .IF IDN	VEC_TYPE, FUTURE	; Reserve space for future vector?
                                     0000  2500 	.BYTE	0,0,0,0,0,0,0,0		; leave 8 bytes
                                     0000  2600     .ENDC
                                     0000  2700 
                                     0000  2800 .ENDC
                                     0000  2900 .ENDM
                                     0000  3000 
                                     0000  3100 	.LIST	MEB			; generate listing for code generated
                                     0000  3200 
                                     0000  3300 
                                     0000  3400 .IF NDF	RTLVECTOR
                                     0000  3500 	.ENTRY	START, ^M<>
                                     0000  3600 	RET
                                     0000  3700 .IFF					; RTLVECTOR
                                 00000000  3800 	.PSECT	RTL$$VECTOR PIC,USR,CON,REL,LCL,SHR,EXE,RD,NOWRT,PAGE
                                     0000  3900 START:					; always define START for .END
                                     0000  4000 .ENDC
                                     0000  4100 
                                     0000  4200 
                                     0000  4300 
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page   4
0-29                                                                                                                             (4)

                                     0000   100 ;+
                                     0000   200 ; FORTRAN compatibility routines - do not VECTOR
                                     0000   300 ;-
                                     0000   400 
                                     0000   500 
                                     0000   600 ; MODULE:COM$ASSIGN
                                     0000   700 	MAC	NOVECT	COM	ASSIGN
                                     0000   800 
                                     0000   900 ; MODULE:COM$CLOSE
                                     0000  1000 	MAC	NOVECT	COM	CLOSE
                                     0000  1100 
                                     0000  1200 ; MODULE:COM$ERRSET
                                     0000  1300 	MAC	NOVECT	COM	ERRSET
                                     0000  1400 
                                     0000  1500 ; MODULE:COM$ERRTST
                                     0000  1600 	MAC	NOVECT	COM	ERRTST
                                     0000  1700 
                                     0000  1800 ; MODULE:COM$FDBSET
                                     0000  1900 	MAC	NOVECT	COM	FDBSET
                                     0000  2000 
                                     0000  2100 ; MODULE:COM$IRAD50
                                     0000  2200 	MAC	NOVECT	COM	IRAD50
                                     0000  2300 
                                     0000  2400 ; MODULE:COM$R50ASC
                                     0000  2500 	MAC	NOVECT	COM	R50ASC
                                     0000  2600 
                                     0000  2700 ; MODULE:COM$RAD50
                                     0000  2800 	MAC	NOVECT	COM	RAD50
                                     0000  2900 
                                     0000  3000 ; MODULE:COM$USEREX
                                     0000  3100 	MAC	NOVECT	COM	USEREX
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page   5
0-29                                                                                                                             (5)

                                     0000   100 ;+
                                     0000   200 ; FORTRAN entry points
                                     0000   300 ; Put most frequently used FORTRAN entry points together first,
                                     0000   400 ; ie. I/O and OPEN and CLOSE.
                                     0000   500 ;-
                                     0000   600 
                                     0000   700 ; MODULE:FOR$CLOSE
                                     0000   800 	MAC	CALL	FOR	FOR$CLOSE
                               0000' 0000       	.MASK	FOR$CLOSE
                          FFFD'  31  0002       	BRW	FOR$CLOSE+2		; branch to CALL+2 routine
                           00 00 00  0005       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0008   900 ; MODULE:FOR$ENTRY
                                     0008  1000 	MAC	CALL	FOR	FOR$DECODE_MF	FOR$$IO_BEG
                               0000' 0008       	.MASK	FOR$$IO_BEG			; get FOR$$IO_BEG from other name
                          FFF5'  31  000A       	BRW	FOR$DECODE_MF+2		; branch to CALL+2 routine
                           00 00 00  000D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0010  1100 
                                     0010  1200 	MAC	CALL	FOR	FOR$DECODE_MO	FOR$$IO_BEG
                               0000' 0010       	.MASK	FOR$$IO_BEG			; get FOR$$IO_BEG from other name
                          FFED'  31  0012       	BRW	FOR$DECODE_MO+2		; branch to CALL+2 routine
                           00 00 00  0015       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0018  1300 	MAC	CALL	FOR	FOR$ENCODE_MF	FOR$$IO_BEG
                               0000' 0018       	.MASK	FOR$$IO_BEG			; get FOR$$IO_BEG from other name
                          FFE5'  31  001A       	BRW	FOR$ENCODE_MF+2		; branch to CALL+2 routine
                           00 00 00  001D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0020  1400 	MAC	CALL	FOR	FOR$ENCODE_MO	FOR$$IO_BEG
                               0000' 0020       	.MASK	FOR$$IO_BEG			; get FOR$$IO_BEG from other name
                          FFDD'  31  0022       	BRW	FOR$ENCODE_MO+2		; branch to CALL+2 routine
                           00 00 00  0025       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0028  1500 
                                     0028  1600 ;+
                                     0028  1700 ; ***************************************************************
                                     0028  1800 ; The following 32 entry points are arranged so that the compiler
                                     0028  1900 ; could load a base register with the address of FOR$IO_END
                                     0028  2000 ; and reach the initialization and element transmit routines
                                     0028  2100 ; using byte displacement.
                                     0028  2200 ;-
                                     0028  2300 
                                     0028  2400 	MAC	FUTURE	FOR
            00 00 00 00 00 00 00 00  0028       	.BYTE	0,0,0,0,0,0,0,0		; leave 8 bytes
                                     0030  2500 	MAC	FUTURE	FOR
            00 00 00 00 00 00 00 00  0030       	.BYTE	0,0,0,0,0,0,0,0		; leave 8 bytes
                                     0038  2600 	MAC	CALL	FOR	FOR$READ_DF	FOR$$IO_BEG
                               0000' 0038       	.MASK	FOR$$IO_BEG			; get FOR$$IO_BEG from other name
                          FFC5'  31  003A       	BRW	FOR$READ_DF+2		; branch to CALL+2 routine
                           00 00 00  003D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0040  2700 
                                     0040  2800 	MAC	CALL	FOR	FOR$READ_DO	FOR$$IO_BEG
                               0000' 0040       	.MASK	FOR$$IO_BEG			; get FOR$$IO_BEG from other name
                          FFBD'  31  0042       	BRW	FOR$READ_DO+2		; branch to CALL+2 routine
                           00 00 00  0045       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0048  2900 	MAC	CALL	FOR	FOR$READ_DU	FOR$$IO_BEG
                               0000' 0048       	.MASK	FOR$$IO_BEG			; get FOR$$IO_BEG from other name
                          FFB5'  31  004A       	BRW	FOR$READ_DU+2		; branch to CALL+2 routine
                           00 00 00  004D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0050  3000 	MAC	CALL	FOR	FOR$READ_SF	FOR$$IO_BEG
                               0000' 0050       	.MASK	FOR$$IO_BEG			; get FOR$$IO_BEG from other name
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page   6
0-29                                                                                                                             (5)

                          FFAD'  31  0052       	BRW	FOR$READ_SF+2		; branch to CALL+2 routine
                           00 00 00  0055       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0058  3100 	MAC	CALL	FOR	FOR$READ_SL	FOR$$IO_BEG
                               0000' 0058       	.MASK	FOR$$IO_BEG			; get FOR$$IO_BEG from other name
                          FFA5'  31  005A       	BRW	FOR$READ_SL+2		; branch to CALL+2 routine
                           00 00 00  005D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0060  3200 
                                     0060  3300 	MAC	CALL	FOR	FOR$READ_SO	FOR$$IO_BEG
                               0000' 0060       	.MASK	FOR$$IO_BEG			; get FOR$$IO_BEG from other name
                          FF9D'  31  0062       	BRW	FOR$READ_SO+2		; branch to CALL+2 routine
                           00 00 00  0065       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0068  3400 	MAC	CALL	FOR	FOR$READ_SU	FOR$$IO_BEG
                               0000' 0068       	.MASK	FOR$$IO_BEG			; get FOR$$IO_BEG from other name
                          FF95'  31  006A       	BRW	FOR$READ_SU+2		; branch to CALL+2 routine
                           00 00 00  006D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0070  3500 	MAC	CALL	FOR	FOR$WRITE_DF	FOR$$IO_BEG
                               0000' 0070       	.MASK	FOR$$IO_BEG			; get FOR$$IO_BEG from other name
                          FF8D'  31  0072       	BRW	FOR$WRITE_DF+2		; branch to CALL+2 routine
                           00 00 00  0075       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0078  3600 	MAC	CALL	FOR	FOR$WRITE_DO	FOR$$IO_BEG
                               0000' 0078       	.MASK	FOR$$IO_BEG			; get FOR$$IO_BEG from other name
                          FF85'  31  007A       	BRW	FOR$WRITE_DO+2		; branch to CALL+2 routine
                           00 00 00  007D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0080  3700 
                                     0080  3800 	MAC	CALL	FOR	FOR$WRITE_DU	FOR$$IO_BEG
                               0000' 0080       	.MASK	FOR$$IO_BEG			; get FOR$$IO_BEG from other name
                          FF7D'  31  0082       	BRW	FOR$WRITE_DU+2		; branch to CALL+2 routine
                           00 00 00  0085       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0088  3900 	MAC	CALL	FOR	FOR$WRITE_SF	FOR$$IO_BEG
                               0000' 0088       	.MASK	FOR$$IO_BEG			; get FOR$$IO_BEG from other name
                          FF75'  31  008A       	BRW	FOR$WRITE_SF+2		; branch to CALL+2 routine
                           00 00 00  008D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0090  4000 	MAC	CALL	FOR	FOR$WRITE_SL	FOR$$IO_BEG
                               0000' 0090       	.MASK	FOR$$IO_BEG			; get FOR$$IO_BEG from other name
                          FF6D'  31  0092       	BRW	FOR$WRITE_SL+2		; branch to CALL+2 routine
                           00 00 00  0095       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0098  4100 	MAC	CALL	FOR	FOR$WRITE_SO	FOR$$IO_BEG
                               0000' 0098       	.MASK	FOR$$IO_BEG			; get FOR$$IO_BEG from other name
                          FF65'  31  009A       	BRW	FOR$WRITE_SO+2		; branch to CALL+2 routine
                           00 00 00  009D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     00A0  4200 
                                     00A0  4300 	MAC	CALL	FOR	FOR$WRITE_SU	FOR$$IO_BEG
                               0000' 00A0       	.MASK	FOR$$IO_BEG			; get FOR$$IO_BEG from other name
                          FF5D'  31  00A2       	BRW	FOR$WRITE_SU+2		; branch to CALL+2 routine
                           00 00 00  00A5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     00A8  4400 
                                     00A8  4500 ; MODULE:FOR$IO_END
                                     00A8  4600 	MAC	CALL	FOR	FOR$IO_END
                               0000' 00A8       	.MASK	FOR$IO_END
                          FF55'  31  00AA       	BRW	FOR$IO_END+2		; branch to CALL+2 routine
                           00 00 00  00AD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     00B0  4700 
                                     00B0  4800 ; MODULE:FOR$IO_ELEM
                                     00B0  4900 
                                     00B0  5000 	MAC	CALL	FOR	FOR$IO_F_R
                               0000' 00B0       	.MASK	FOR$IO_F_R
                          FF4D'  31  00B2       	BRW	FOR$IO_F_R+2		; branch to CALL+2 routine
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page   7
0-29                                                                                                                             (5)

                           00 00 00  00B5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     00B8  5100 	MAC	CALL	FOR	FOR$IO_F_V
                               0000' 00B8       	.MASK	FOR$IO_F_V
                          FF45'  31  00BA       	BRW	FOR$IO_F_V+2		; branch to CALL+2 routine
                           00 00 00  00BD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     00C0  5200 	MAC	CALL	FOR	FOR$IO_D_R
                               0000' 00C0       	.MASK	FOR$IO_D_R
                          FF3D'  31  00C2       	BRW	FOR$IO_D_R+2		; branch to CALL+2 routine
                           00 00 00  00C5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     00C8  5300 	MAC	CALL	FOR	FOR$IO_D_V
                               0000' 00C8       	.MASK	FOR$IO_D_V
                          FF35'  31  00CA       	BRW	FOR$IO_D_V+2		; branch to CALL+2 routine
                           00 00 00  00CD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     00D0  5400 
                                     00D0  5500 	MAC	CALL	FOR	FOR$IO_L_R
                               0000' 00D0       	.MASK	FOR$IO_L_R
                          FF2D'  31  00D2       	BRW	FOR$IO_L_R+2		; branch to CALL+2 routine
                           00 00 00  00D5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     00D8  5600 	MAC	CALL	FOR	FOR$IO_L_V
                               0000' 00D8       	.MASK	FOR$IO_L_V
                          FF25'  31  00DA       	BRW	FOR$IO_L_V+2		; branch to CALL+2 routine
                           00 00 00  00DD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     00E0  5700 	MAC	CALL	FOR	FOR$IO_B_R
                               0000' 00E0       	.MASK	FOR$IO_B_R
                          FF1D'  31  00E2       	BRW	FOR$IO_B_R+2		; branch to CALL+2 routine
                           00 00 00  00E5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     00E8  5800 	MAC	CALL	FOR	FOR$IO_B_V
                               0000' 00E8       	.MASK	FOR$IO_B_V
                          FF15'  31  00EA       	BRW	FOR$IO_B_V+2		; branch to CALL+2 routine
                           00 00 00  00ED       	.BYTE	0,0,0			; fill out to 8 bytes
                                     00F0  5900 
                                     00F0  6000 	MAC	CALL	FOR	FOR$IO_T_DS
                               0000' 00F0       	.MASK	FOR$IO_T_DS
                          FF0D'  31  00F2       	BRW	FOR$IO_T_DS+2		; branch to CALL+2 routine
                           00 00 00  00F5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     00F8  6100 
                                     00F8  6200 	MAC	CALL	FOR	FOR$IO_W_R
                               0000' 00F8       	.MASK	FOR$IO_W_R
                          FF05'  31  00FA       	BRW	FOR$IO_W_R+2		; branch to CALL+2 routine
                           00 00 00  00FD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0100  6300 	MAC	CALL	FOR	FOR$IO_W_V
                               0000' 0100       	.MASK	FOR$IO_W_V
                          FEFD'  31  0102       	BRW	FOR$IO_W_V+2		; branch to CALL+2 routine
                           00 00 00  0105       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0108  6400 	MAC	FUTURE	FOR
            00 00 00 00 00 00 00 00  0108       	.BYTE	0,0,0,0,0,0,0,0		; leave 8 bytes
                                     0110  6500 	MAC	FUTURE	FOR
            00 00 00 00 00 00 00 00  0110       	.BYTE	0,0,0,0,0,0,0,0		; leave 8 bytes
                                     0118  6600 	MAC	FUTURE	FOR
            00 00 00 00 00 00 00 00  0118       	.BYTE	0,0,0,0,0,0,0,0		; leave 8 bytes
                                     0120  6700 	MAC	FUTURE	FOR
            00 00 00 00 00 00 00 00  0120       	.BYTE	0,0,0,0,0,0,0,0		; leave 8 bytes
                                     0128  6800 ;+
                                     0128  6900 ; End of 32 entry region with FOR$IO_END as middle.
                                     0128  7000 ; *************************************************
                                     0128  7100 ;-
                                     0128  7200 
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page   8
0-29                                                                                                                             (5)

                                     0128  7300 	MAC	FUTURE	FOR
            00 00 00 00 00 00 00 00  0128       	.BYTE	0,0,0,0,0,0,0,0		; leave 8 bytes
                                     0130  7400 	MAC	FUTURE	FOR
            00 00 00 00 00 00 00 00  0130       	.BYTE	0,0,0,0,0,0,0,0		; leave 8 bytes
                                     0138  7500 	MAC	CALL	FOR	FOR$IO_T_V_DS
                               0000' 0138       	.MASK	FOR$IO_T_V_DS
                          FEC5'  31  013A       	BRW	FOR$IO_T_V_DS+2		; branch to CALL+2 routine
                           00 00 00  013D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0140  7600 	MAC	CALL	FOR	FOR$IO_FC_R
                               0000' 0140       	.MASK	FOR$IO_FC_R
                          FEBD'  31  0142       	BRW	FOR$IO_FC_R+2		; branch to CALL+2 routine
                           00 00 00  0145       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0148  7700 	MAC	CALL	FOR	FOR$IO_FC_V
                               0000' 0148       	.MASK	FOR$IO_FC_V
                          FEB5'  31  014A       	BRW	FOR$IO_FC_V+2		; branch to CALL+2 routine
                           00 00 00  014D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0150  7800 	MAC	CALL	FOR	FOR$IO_LU_R
                               0000' 0150       	.MASK	FOR$IO_LU_R
                          FEAD'  31  0152       	BRW	FOR$IO_LU_R+2		; branch to CALL+2 routine
                           00 00 00  0155       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0158  7900 	MAC	CALL	FOR	FOR$IO_LU_V
                               0000' 0158       	.MASK	FOR$IO_LU_V
                          FEA5'  31  015A       	BRW	FOR$IO_LU_V+2		; branch to CALL+2 routine
                           00 00 00  015D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0160  8000 	MAC	CALL	FOR	FOR$IO_WU_R
                               0000' 0160       	.MASK	FOR$IO_WU_R
                          FE9D'  31  0162       	BRW	FOR$IO_WU_R+2		; branch to CALL+2 routine
                           00 00 00  0165       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0168  8100 	MAC	CALL	FOR	FOR$IO_WU_V
                               0000' 0168       	.MASK	FOR$IO_WU_V
                          FE95'  31  016A       	BRW	FOR$IO_WU_V+2		; branch to CALL+2 routine
                           00 00 00  016D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0170  8200 	MAC	CALL	FOR	FOR$IO_X_DA
                               0000' 0170       	.MASK	FOR$IO_X_DA
                          FE8D'  31  0172       	BRW	FOR$IO_X_DA+2		; branch to CALL+2 routine
                           00 00 00  0175       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0178  8300 
                                     0178  8400 ; MODULE:FOR$OPEN
                                     0178  8500 	MAC	CALL	FOR	FOR$OPEN
                               0000' 0178       	.MASK	FOR$OPEN
                          FE85'  31  017A       	BRW	FOR$OPEN+2		; branch to CALL+2 routine
                           00 00 00  017D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0180  8600 
                                     0180  8700 ;+
                                     0180  8800 ; Rest of FOR$ entries alphabetical order
                                     0180  8900 ;-
                                     0180  9000 
                                     0180  9100 ; MODULE:FOR$BACKSPACE
                                     0180  9200 	MAC	CALL	FOR	FOR$BACKSPACE
                               0000' 0180       	.MASK	FOR$BACKSPACE
                          FE7D'  31  0182       	BRW	FOR$BACKSPACE+2		; branch to CALL+2 routine
                           00 00 00  0185       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0188  9300 
                                     0188  9400 ; MODULE:FOR$CNVOI
                                     0188  9500 	MAC	CALL	FOR	FOR$CNV_OUT_I
                               0000' 0188       	.MASK	FOR$CNV_OUT_I
                          FE75'  31  018A       	BRW	FOR$CNV_OUT_I+2		; branch to CALL+2 routine
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page   9
0-29                                                                                                                             (5)

                           00 00 00  018D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0190  9600 	MAC	CALL	FOR	FOR$CNV_OUT_L
                               0000' 0190       	.MASK	FOR$CNV_OUT_L
                          FE6D'  31  0192       	BRW	FOR$CNV_OUT_L+2		; branch to CALL+2 routine
                           00 00 00  0195       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0198  9700 	MAC	CALL	FOR	FOR$CNV_OUT_O
                               0000' 0198       	.MASK	FOR$CNV_OUT_O
                          FE65'  31  019A       	BRW	FOR$CNV_OUT_O+2		; branch to CALL+2 routine
                           00 00 00  019D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     01A0  9800 	MAC	CALL	FOR	FOR$CNV_OUT_Z
                               0000' 01A0       	.MASK	FOR$CNV_OUT_Z
                          FE5D'  31  01A2       	BRW	FOR$CNV_OUT_Z+2		; branch to CALL+2 routine
                           00 00 00  01A5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     01A8  9900 
                                     01A8 10000 ; MODULE:FOR$CNV_OUT
                                     01A8 10100 	MAC	CALL	FOR	FOR$CNV_OUT_D
                               0000' 01A8       	.MASK	FOR$CNV_OUT_D
                          FE55'  31  01AA       	BRW	FOR$CNV_OUT_D+2		; branch to CALL+2 routine
                           00 00 00  01AD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     01B0 10200 	MAC	CALL	FOR	FOR$CNV_OUT_E
                               0000' 01B0       	.MASK	FOR$CNV_OUT_E
                          FE4D'  31  01B2       	BRW	FOR$CNV_OUT_E+2		; branch to CALL+2 routine
                           00 00 00  01B5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     01B8 10300 	MAC	CALL	FOR	FOR$CNV_OUT_F
                               0000' 01B8       	.MASK	FOR$CNV_OUT_F
                          FE45'  31  01BA       	BRW	FOR$CNV_OUT_F+2		; branch to CALL+2 routine
                           00 00 00  01BD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     01C0 10400 	MAC	CALL	FOR	FOR$CNV_OUT_G
                               0000' 01C0       	.MASK	FOR$CNV_OUT_G
                          FE3D'  31  01C2       	BRW	FOR$CNV_OUT_G+2		; branch to CALL+2 routine
                           00 00 00  01C5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     01C8 10500 
                                     01C8 10600 ; MODULE:FOR$DATE
                                     01C8 10700 	MAC	NOVECT	FOR	FOR$DATE
                                     01C8 10800 
                                     01C8 10900 ; MODULE:FOR$DATE_T_DS
                                     01C8 11000 	MAC	NOVECT	FOR	FOR$DATE_T_DS
                                     01C8 11100 
                                     01C8 11200 ; MODULE:FOR$DEFINE_FILE
                                     01C8 11300 	MAC	CALL	FOR	FOR$DEF_FILE
                               0000' 01C8       	.MASK	FOR$DEF_FILE
                          FE35'  31  01CA       	BRW	FOR$DEF_FILE+2		; branch to CALL+2 routine
                           00 00 00  01CD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     01D0 11400 	MAC	CALL	FOR	FOR$DEF_FILE_W
                               0000' 01D0       	.MASK	FOR$DEF_FILE_W
                          FE2D'  31  01D2       	BRW	FOR$DEF_FILE_W+2		; branch to CALL+2 routine
                           00 00 00  01D5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     01D8 11500 
                                     01D8 11600 ; MOUDLE FOR$ENDFILE
                                     01D8 11700 	MAC	CALL	FOR	FOR$ENDFILE
                               0000' 01D8       	.MASK	FOR$ENDFILE
                          FE25'  31  01DA       	BRW	FOR$ENDFILE+2		; branch to CALL+2 routine
                           00 00 00  01DD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     01E0 11800 
                                     01E0 11900 ; MODULE:FOR$ENODEF
                                     01E0 12000 	MAC	SYM	FOR	FOR$K_ADJARRDIM
                                     01E0 12100 	MAC	SYM	FOR	FOR$K_ARRREFOUT
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  10
0-29                                                                                                                             (5)

                                     01E0 12200 	MAC	SYM	FOR	FOR$K_ATTREANON
                                     01E0 12300 	MAC	SYM	FOR	FOR$K_BACERR
                                     01E0 12400 
                                     01E0 12500 	MAC	SYM	FOR	FOR$K_CLOERR
                                     01E0 12600 	MAC	SYM	FOR	FOR$K_DECSTROVE
                                     01E0 12700 	MAC	SYM	FOR	FOR$K_DUPFILSPE
                                     01E0 12800 	MAC	SYM	FOR	FOR$K_ENDDURREA
                                     01E0 12900 	MAC	SYM	FOR	FOR$K_ENDFILERR
                                     01E0 13000 	MAC	SYM	FOR	FOR$K_ERRDURREA
                                     01E0 13100 	MAC	SYM	FOR	FOR$K_ERRDURWRI
                                     01E0 13200 	MAC	SYM	FOR	FOR$K_FAC_NO
                                     01E0 13300 
                                     01E0 13400 	MAC	SYM	FOR	FOR$K_FILNAMSPE
                                     01E0 13500 	MAC	SYM	FOR	FOR$K_FILNOTFOU
                                     01E0 13600 	MAC	SYM	FOR	FOR$K_FLOOVE
                                     01E0 13700 	MAC	SYM	FOR	FOR$K_FLOUND
                                     01E0 13800 
                                     01E0 13900 	MAC	SYM	FOR	FOR$K_FLOZERDIV
                                     01E0 14000 	MAC	SYM	FOR	FOR$K_FORVARMIS
                                     01E0 14100 	MAC	SYM	FOR	FOR$K_INCOPECLO
                                     01E0 14200 	MAC	SYM	FOR	FOR$K_INCRECLEN
                                     01E0 14300 	MAC	SYM	FOR	FOR$K_INFFORLOO
                                     01E0 14400 	MAC	SYM	FOR	FOR$K_INPCONERR
                                     01E0 14500 	MAC	SYM	FOR	FOR$K_INPRECTOO
                                     01E0 14600 	MAC	SYM	FOR	FOR$K_INPSTAREQ
                                     01E0 14700 	MAC	SYM	FOR	FOR$K_INSVIRMEM
                                     01E0 14800 	MAC	SYM	FOR	FOR$K_INTOVF
                                     01E0 14900 	MAC	SYM	FOR	FOR$K_INTZERDIV
                                     01E0 15000 	MAC	SYM	FOR	FOR$K_INVARGFOR
                                     01E0 15100 	MAC	SYM	FOR	FOR$K_INVLOGUNI
                                     01E0 15200 	MAC	SYM	FOR	FOR$K_KEYVALERR
                                     01E0 15300 	MAC	SYM	FOR	FOR$K_LISIO_SYN
                                     01E0 15400 	MAC	SYM	FOR	FOR$K_MAXLUNERR
                                     01E0 15500 	MAC	SYM	FOR	FOR$K_MAX_ERR
                                     01E0 15600 	MAC	SYM	FOR	FOR$K_MINLUNERR
                                     01E0 15700 	MAC	SYM	FOR	FOR$K_MIXFILACC
                                     01E0 15800 	MAC	SYM	FOR	FOR$K_MORONEREC
                                     01E0 15900 	MAC	SYM	FOR	FOR$K_NOTFORSPE
                                     01E0 16000 	MAC	SYM	FOR	FOR$K_NO_SUCDEV
                                     01E0 16100 	MAC	SYM	FOR	FOR$K_OPEDEFREQ
                                     01E0 16200 	MAC	SYM	FOR	FOR$K_OPEFAI
                                     01E0 16300 
                                     01E0 16400 	MAC	SYM	FOR	FOR$K_OUTCONERR
                                     01E0 16500 	MAC	SYM	FOR	FOR$K_OUTSTAOVE
                                     01E0 16600 	MAC	SYM	FOR	FOR$K_RECIO_OPE
                                     01E0 16700 	MAC	SYM	FOR	FOR$K_RECNUMOUT
                                     01E0 16800 	MAC	SYM	FOR	FOR$K_RECSPEERR
                                     01E0 16900 	MAC	SYM	FOR	FOR$K_REWERR
                                     01E0 17000 	MAC	SYM	FOR	FOR$K_SEGRECFOR
                                     01E0 17100 	MAC	SYM	FOR	FOR$K_SYNERRFOR
                                     01E0 17200 	MAC	SYM	FOR	FOR$K_UNIALROPE
                                     01E0 17300 	MAC	SYM	FOR	FOR$K_VFEVALERR
                                     01E0 17400 	MAC	SYM	FOR	FOR$K_WRIREAFIL
                                     01E0 17500 
                                     01E0 17600 ; MODULE:FOR$ERRSNS		; See also end where FOR$$ERRSNS_SAV declared
                                     01E0 17700 	MAC	CALL	FOR	FOR$ERRSNS
                               0000' 01E0       	.MASK	FOR$ERRSNS
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  11
0-29                                                                                                                             (5)

                          FE1D'  31  01E2       	BRW	FOR$ERRSNS+2		; branch to CALL+2 routine
                           00 00 00  01E5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     01E8 17800 	MAC	CALL	FOR	FOR$ERRSNS_W
                               0000' 01E8       	.MASK	FOR$ERRSNS_W
                          FE15'  31  01EA       	BRW	FOR$ERRSNS_W+2		; branch to CALL+2 routine
                           00 00 00  01ED       	.BYTE	0,0,0			; fill out to 8 bytes
                                     01F0 17900 
                                     01F0 18000 ; MODULE:FOR$EXIT
                                     01F0 18100 	MAC	CALL	FOR	FOR$EXIT
                               0000' 01F0       	.MASK	FOR$EXIT
                          FE0D'  31  01F2       	BRW	FOR$EXIT+2		; branch to CALL+2 routine
                           00 00 00  01F5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     01F8 18200 	MAC	CALL	FOR	FOR$EXIT_W
                               0000' 01F8       	.MASK	FOR$EXIT_W
                          FE05'  31  01FA       	BRW	FOR$EXIT_W+2		; branch to CALL+2 routine
                           00 00 00  01FD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0200 18300 
                                     0200 18400 ; MODULE:FOR$FCNVIR
                                     0200 18500 	MAC	CALL	FOR	FOR$CNV_IN_DEFG
                               0000' 0200       	.MASK	FOR$CNV_IN_DEFG
                          FDFD'  31  0202       	BRW	FOR$CNV_IN_DEFG+2		; branch to CALL+2 routine
                           00 00 00  0205       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0208 18600 
                                     0208 18700 ; MODULE:FOR$FIND
                                     0208 18800 	MAC	CALL	FOR	FOR$FIND
                               0000' 0208       	.MASK	FOR$FIND
                          FDF5'  31  020A       	BRW	FOR$FIND+2		; branch to CALL+2 routine
                           00 00 00  020D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0210 18900 
                                     0210 19000 ; MODULE:FOR$FORCNVII
                                     0210 19100 	MAC	CALL	FOR	FOR$CNV_IN_I
                               0000' 0210       	.MASK	FOR$CNV_IN_I
                          FDED'  31  0212       	BRW	FOR$CNV_IN_I+2		; branch to CALL+2 routine
                           00 00 00  0215       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0218 19200 	MAC	CALL	FOR	FOR$CNV_IN_L
                               0000' 0218       	.MASK	FOR$CNV_IN_L
                          FDE5'  31  021A       	BRW	FOR$CNV_IN_L+2		; branch to CALL+2 routine
                           00 00 00  021D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0220 19300 	MAC	CALL	FOR	FOR$CNV_IN_O
                               0000' 0220       	.MASK	FOR$CNV_IN_O
                          FDDD'  31  0222       	BRW	FOR$CNV_IN_O+2		; branch to CALL+2 routine
                           00 00 00  0225       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0228 19400 	MAC	CALL	FOR	FOR$CNV_IN_Z
                               0000' 0228       	.MASK	FOR$CNV_IN_Z
                          FDD5'  31  022A       	BRW	FOR$CNV_IN_Z+2		; branch to CALL+2 routine
                           00 00 00  022D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0230 19500 
                                     0230 19600 ; MODULE:FOR$IDATE
                                     0230 19700 	MAC	NOVECT	FOR	FOR$IDATE
                                     0230 19800 
                                     0230 19900 ; MODULE:FOR$INI_DES
                                     0230 20000 	MAC	JSB	FOR	FOR$INI_DES1_R2
                          FDCD'  31  0230       	BRW	FOR$INI_DES1_R2			; branch to JSB routine
                     00 00 00 00 00  0233       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0238 20100 	MAC	JSB	FOR	FOR$INI_DES2_R3
                          FDC5'  31  0238       	BRW	FOR$INI_DES2_R3			; branch to JSB routine
                     00 00 00 00 00  023B       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  12
0-29                                                                                                                             (5)

                                     0240 20200 	MAC	JSB	FOR	FOR$INI_DESC_R6
                          FDBD'  31  0240       	BRW	FOR$INI_DESC_R6			; branch to JSB routine
                     00 00 00 00 00  0243       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0248 20300 
                                     0248 20400 ; MODULE:FOR$JDATE
                                     0248 20500 	MAC	NOVECT	FOR	FOR$JDATE
                                     0248 20600 
                                     0248 20700 ; MODULE:FOR$MSGDEF
                                     0248 20800 	MAC	SYM	FOR	FOR$_ADJARRDIM
                                     0248 20900 	MAC	SYM	FOR	FOR$_ATTREANON
                                     0248 21000 	MAC	SYM	FOR	FOR$_BACERR
                                     0248 21100 	MAC	SYM	FOR	FOR$_CLOERR
                                     0248 21200 
                                     0248 21300 	MAC	SYM	FOR	FOR$_DUPFILSPE
                                     0248 21400 	MAC	SYM	FOR	FOR$_ENDDURREA
                                     0248 21500 	MAC	SYM	FOR	FOR$_ENDFILERR
                                     0248 21600 	MAC	SYM	FOR	FOR$_ERRDURREA
                                     0248 21700 
                                     0248 21800 	MAC	SYM	FOR	FOR$_ERRDURWRI
                                     0248 21900 	MAC	SYM	FOR	FOR$_FILNAMSPE
                                     0248 22000 	MAC	SYM	FOR	FOR$_FILNOTFOU
                                     0248 22100 	MAC	SYM	FOR	FOR$_FORVARMIS
                                     0248 22200 
                                     0248 22300 	MAC	SYM	FOR	FOR$_INCOPECLO
                                     0248 22400 	MAC	SYM	FOR	FOR$_INCRECLEN
                                     0248 22500 	MAC	SYM	FOR	FOR$_INFFORLOO
                                     0248 22600 	MAC	SYM	FOR	FOR$_INPCONERR
                                     0248 22700 
                                     0248 22800 	MAC	SYM	FOR	FOR$_INPRECTOO
                                     0248 22900 	MAC	SYM	FOR	FOR$_INPSTAREQ
                                     0248 23000 	MAC	SYM	FOR	FOR$_INSVIRMEM
                                     0248 23100 	MAC	SYM	FOR	FOR$_INVARGFOR
                                     0248 23200 
                                     0248 23300 	MAC	SYM	FOR	FOR$_INVLOGUNI
                                     0248 23400 	MAC	SYM	FOR	FOR$_KEYVALERR
                                     0248 23500 	MAC	SYM	FOR	FOR$_LISIO_SYN
                                     0248 23600 	MAC	SYM	FOR	FOR$_MIXFILACC
                                     0248 23700 
                                     0248 23800 	MAC	SYM	FOR	FOR$_MORONEREC
                                     0248 23900 	MAC	SYM	FOR	FOR$_NOTFORSPE
                                     0248 24000 	MAC	SYM	FOR	FOR$_NO_SUCDEV
                                     0248 24100 	MAC	SYM	FOR	FOR$_OPEDEFREQ
                                     0248 24200 
                                     0248 24300 	MAC	SYM	FOR	FOR$_OPEFAI
                                     0248 24400 	MAC	SYM	FOR	FOR$_OUTCONERR
                                     0248 24500 	MAC	SYM	FOR	FOR$_OUTSTAOVE
                                     0248 24600 	MAC	SYM	FOR	FOR$_RECIO_OPE
                                     0248 24700 
                                     0248 24800 	MAC	SYM	FOR	FOR$_RECNUMOUT
                                     0248 24900 	MAC	SYM	FOR	FOR$_RECSPEERR
                                     0248 25000 	MAC	SYM	FOR	FOR$_REWERR
                                     0248 25100 	MAC	SYM	FOR	FOR$_SEGRECFOR
                                     0248 25200 
                                     0248 25300 	MAC	SYM	FOR	FOR$_SYNERRFOR
                                     0248 25400 	MAC	SYM	FOR	FOR$_UNIALROPE
                                     0248 25500 	MAC	SYM	FOR	FOR$_VFEVALERR
                                     0248 25600 	MAC	SYM	FOR	FOR$_WRIREAFIL
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  13
0-29                                                                                                                             (5)

                                     0248 25700 
                                     0248 25800 ; MODULE:FOR$PAUSE
                                     0248 25900 	MAC	CALL	FOR	FOR$PAUSE
                               0000' 0248       	.MASK	FOR$PAUSE
                          FDB5'  31  024A       	BRW	FOR$PAUSE+2		; branch to CALL+2 routine
                           00 00 00  024D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0250 26000 
                                     0250 26100 ; MODULE:FOR$RANDOM
                                     0250 26200 	MAC	NOVECT	FOR	FOR$IRAN
                                     0250 26300 	MAC	NOVECT	FOR	FOR$RANDU
                                     0250 26400 	MAC	NOVECT	FOR	FOR$RANDU_W
                                     0250 26500 
                                     0250 26600 ; MODULE:FOR$REWIND
                                     0250 26700 	MAC	CALL	FOR	FOR$REWIND
                               0000' 0250       	.MASK	FOR$REWIND
                          FDAD'  31  0252       	BRW	FOR$REWIND+2		; branch to CALL+2 routine
                           00 00 00  0255       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0258 26800 
                                     0258 26900 ; MODULE:FOR$SECNDS
                                     0258 27000 	MAC	CALL	FOR	FOR$SECNDS
                               0000' 0258       	.MASK	FOR$SECNDS
                          FDA5'  31  025A       	BRW	FOR$SECNDS+2		; branch to CALL+2 routine
                           00 00 00  025D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0260 27100 
                                     0260 27200 ; MODULE:FOR$STOP
                                     0260 27300 	MAC	CALL	FOR	FOR$STOP
                               0000' 0260       	.MASK	FOR$STOP
                          FD9D'  31  0262       	BRW	FOR$STOP+2		; branch to CALL+2 routine
                           00 00 00  0265       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0268 27400 
                                     0268 27500 ; MODULE:FOR$TIME
                                     0268 27600 	MAC	NOVECT	FOR	FOR$TIME
                                     0268 27700 
                                     0268 27800 ; MODULE:FOR$TIME_T_DS
                                     0268 27900 	MAC	NOVECT	FOR	FOR$TIME_T_DS
                                     0268 28000 
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  14
0-29                                                                                                                             (6)

                                     0268   100 ;+
                                     0268   200 ; Mathematical library entry points
                                     0268   300 ; Include the frequently used ones first (ones with JSBs)
                                     0268   400 ;-
                                     0268   500 
                                     0268   600 ; MODULE:MTH$ACOS
                                     0268   700 	MAC	CALL	MTH	MTH$ACOS
                               0000' 0268       	.MASK	MTH$ACOS
                          FD95'  31  026A       	BRW	MTH$ACOS+2		; branch to CALL+2 routine
                           00 00 00  026D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0270   800 	MAC	JSB	MTH	MTH$ACOS_R5
                          FD8D'  31  0270       	BRW	MTH$ACOS_R5			; branch to JSB routine
                     00 00 00 00 00  0273       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0278   900 
                                     0278  1000 ; MODULE:MTH$ALOG
                                     0278  1100 	MAC	CALL	MTH	MTH$ALOG
                               0000' 0278       	.MASK	MTH$ALOG
                          FD85'  31  027A       	BRW	MTH$ALOG+2		; branch to CALL+2 routine
                           00 00 00  027D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0280  1200 	MAC	CALL	MTH	MTH$ALOG10
                               0000' 0280       	.MASK	MTH$ALOG10
                          FD7D'  31  0282       	BRW	MTH$ALOG10+2		; branch to CALL+2 routine
                           00 00 00  0285       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0288  1300 	MAC	JSB	MTH	MTH$ALOG10_R5
                          FD75'  31  0288       	BRW	MTH$ALOG10_R5			; branch to JSB routine
                     00 00 00 00 00  028B       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0290  1400 	MAC	JSB	MTH	MTH$ALOG_R5
                          FD6D'  31  0290       	BRW	MTH$ALOG_R5			; branch to JSB routine
                     00 00 00 00 00  0293       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0298  1500 
                                     0298  1600 ; MODULE:MTH$ASIN
                                     0298  1700 	MAC	CALL	MTH	MTH$ASIN
                               0000' 0298       	.MASK	MTH$ASIN
                          FD65'  31  029A       	BRW	MTH$ASIN+2		; branch to CALL+2 routine
                           00 00 00  029D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     02A0  1800 	MAC	JSB	MTH	MTH$ASIN_R5
                          FD5D'  31  02A0       	BRW	MTH$ASIN_R5			; branch to JSB routine
                     00 00 00 00 00  02A3       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     02A8  1900 
                                     02A8  2000 ; MODULE:MTH$ATAN
                                     02A8  2100 	MAC	CALL	MTH	MTH$ATAN
                               0000' 02A8       	.MASK	MTH$ATAN
                          FD55'  31  02AA       	BRW	MTH$ATAN+2		; branch to CALL+2 routine
                           00 00 00  02AD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     02B0  2200 	MAC	CALL	MTH	MTH$ATAN2
                               0000' 02B0       	.MASK	MTH$ATAN2
                          FD4D'  31  02B2       	BRW	MTH$ATAN2+2		; branch to CALL+2 routine
                           00 00 00  02B5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     02B8  2300 	MAC	JSB	MTH	MTH$ATAN_R4
                          FD45'  31  02B8       	BRW	MTH$ATAN_R4			; branch to JSB routine
                     00 00 00 00 00  02BB       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     02C0  2400 
                                     02C0  2500 ; MODULE:MTH$DACOS
                                     02C0  2600 	MAC	CALL	MTH	MTH$DACOS
                               0000' 02C0       	.MASK	MTH$DACOS
                          FD3D'  31  02C2       	BRW	MTH$DACOS+2		; branch to CALL+2 routine
                           00 00 00  02C5       	.BYTE	0,0,0			; fill out to 8 bytes
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  15
0-29                                                                                                                             (6)

                                     02C8  2700 	MAC	JSB	MTH	MTH$DACOS_R9
                          FD35'  31  02C8       	BRW	MTH$DACOS_R9			; branch to JSB routine
                     00 00 00 00 00  02CB       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     02D0  2800 
                                     02D0  2900 ; MODULE:MTH$DASIN
                                     02D0  3000 	MAC	CALL	MTH	MTH$DASIN
                               0000' 02D0       	.MASK	MTH$DASIN
                          FD2D'  31  02D2       	BRW	MTH$DASIN+2		; branch to CALL+2 routine
                           00 00 00  02D5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     02D8  3100 	MAC	JSB	MTH	MTH$DASIN_R9
                          FD25'  31  02D8       	BRW	MTH$DASIN_R9			; branch to JSB routine
                     00 00 00 00 00  02DB       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     02E0  3200 
                                     02E0  3300 ; MODULE:MTH$DATAN
                                     02E0  3400 	MAC	CALL	MTH	MTH$DATAN
                               0000' 02E0       	.MASK	MTH$DATAN
                          FD1D'  31  02E2       	BRW	MTH$DATAN+2		; branch to CALL+2 routine
                           00 00 00  02E5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     02E8  3500 	MAC	CALL	MTH	MTH$DATAN2
                               0000' 02E8       	.MASK	MTH$DATAN2
                          FD15'  31  02EA       	BRW	MTH$DATAN2+2		; branch to CALL+2 routine
                           00 00 00  02ED       	.BYTE	0,0,0			; fill out to 8 bytes
                                     02F0  3600 	MAC	JSB	MTH	MTH$DATAN_R7
                          FD0D'  31  02F0       	BRW	MTH$DATAN_R7			; branch to JSB routine
                     00 00 00 00 00  02F3       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     02F8  3700 
                                     02F8  3800 ; MODULE:MTH$DEXP
                                     02F8  3900 	MAC	CALL	MTH	MTH$DEXP
                               0000' 02F8       	.MASK	MTH$DEXP
                          FD05'  31  02FA       	BRW	MTH$DEXP+2		; branch to CALL+2 routine
                           00 00 00  02FD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0300  4000 	MAC	JSB	MTH	MTH$DEXP_R7
                          FCFD'  31  0300       	BRW	MTH$DEXP_R7			; branch to JSB routine
                     00 00 00 00 00  0303       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  16
0-29                                                                                                                             (7)

                                     0308   100 ; MODULE:MTH$DLOG
                                     0308   200 	MAC	CALL	MTH	MTH$DLOG
                               0000' 0308       	.MASK	MTH$DLOG
                          FCF5'  31  030A       	BRW	MTH$DLOG+2		; branch to CALL+2 routine
                           00 00 00  030D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0310   300 	MAC	CALL	MTH	MTH$DLOG10
                               0000' 0310       	.MASK	MTH$DLOG10
                          FCED'  31  0312       	BRW	MTH$DLOG10+2		; branch to CALL+2 routine
                           00 00 00  0315       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0318   400 	MAC	JSB	MTH	MTH$DLOG10_R8
                          FCE5'  31  0318       	BRW	MTH$DLOG10_R8			; branch to JSB routine
                     00 00 00 00 00  031B       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0320   500 	MAC	JSB	MTH	MTH$DLOG_R8
                          FCDD'  31  0320       	BRW	MTH$DLOG_R8			; branch to JSB routine
                     00 00 00 00 00  0323       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0328   600 
                                     0328   700 ; MODULE:MTH$DSINCOS
                                     0328   800 	MAC	CALL	MTH	MTH$DCOS
                               0000' 0328       	.MASK	MTH$DCOS
                          FCD5'  31  032A       	BRW	MTH$DCOS+2		; branch to CALL+2 routine
                           00 00 00  032D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0330   900 	MAC	JSB	MTH	MTH$DCOS_R7
                          FCCD'  31  0330       	BRW	MTH$DCOS_R7			; branch to JSB routine
                     00 00 00 00 00  0333       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0338  1000 	MAC	CALL	MTH	MTH$DSIN
                               0000' 0338       	.MASK	MTH$DSIN
                          FCC5'  31  033A       	BRW	MTH$DSIN+2		; branch to CALL+2 routine
                           00 00 00  033D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0340  1100 	MAC	JSB	MTH	MTH$DSIN_R7
                          FCBD'  31  0340       	BRW	MTH$DSIN_R7			; branch to JSB routine
                     00 00 00 00 00  0343       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0348  1200 
                                     0348  1300 ; MODULE:MTH$DSQRT
                                     0348  1400 	MAC	CALL	MTH	MTH$DSQRT
                               0000' 0348       	.MASK	MTH$DSQRT
                          FCB5'  31  034A       	BRW	MTH$DSQRT+2		; branch to CALL+2 routine
                           00 00 00  034D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0350  1500 	MAC	JSB	MTH	MTH$DSQRT_R5
                          FCAD'  31  0350       	BRW	MTH$DSQRT_R5			; branch to JSB routine
                     00 00 00 00 00  0353       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0358  1600 
                                     0358  1700 ; MODULE:MTH$EXP
                                     0358  1800 	MAC	CALL	MTH	MTH$EXP
                               0000' 0358       	.MASK	MTH$EXP
                          FCA5'  31  035A       	BRW	MTH$EXP+2		; branch to CALL+2 routine
                           00 00 00  035D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0360  1900 	MAC	JSB	MTH	MTH$EXP_R4
                          FC9D'  31  0360       	BRW	MTH$EXP_R4			; branch to JSB routine
                     00 00 00 00 00  0363       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0368  2000 
                                     0368  2100 ; MODULE:MTH$SINCOS
                                     0368  2200 	MAC	CALL	MTH	MTH$COS
                               0000' 0368       	.MASK	MTH$COS
                          FC95'  31  036A       	BRW	MTH$COS+2		; branch to CALL+2 routine
                           00 00 00  036D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0370  2300 	MAC	JSB	MTH	MTH$COS_R4
                          FC8D'  31  0370       	BRW	MTH$COS_R4			; branch to JSB routine
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  17
0-29                                                                                                                             (7)

                     00 00 00 00 00  0373       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0378  2400 	MAC	CALL	MTH	MTH$SIN
                               0000' 0378       	.MASK	MTH$SIN
                          FC85'  31  037A       	BRW	MTH$SIN+2		; branch to CALL+2 routine
                           00 00 00  037D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0380  2500 	MAC	JSB	MTH	MTH$SIN_R4
                          FC7D'  31  0380       	BRW	MTH$SIN_R4			; branch to JSB routine
                     00 00 00 00 00  0383       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0388  2600 
                                     0388  2700 ; MODULE:MTH$SQRT
                                     0388  2800 	MAC	CALL	MTH	MTH$SQRT
                               0000' 0388       	.MASK	MTH$SQRT
                          FC75'  31  038A       	BRW	MTH$SQRT+2		; branch to CALL+2 routine
                           00 00 00  038D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0390  2900 	MAC	JSB	MTH	MTH$SQRT_R2
                          FC6D'  31  0390       	BRW	MTH$SQRT_R2			; branch to JSB routine
                     00 00 00 00 00  0393       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0398  3000 
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  18
0-29                                                                                                                             (8)

                                     0398   100 ;+
                                     0398   200 ; Language independent support entry points
                                     0398   300 ; Include them after frequently used math routines, since
                                     0398   400 ; they have the power routines.
                                     0398   500 ;-
                                     0398   600 
                                     0398   700 
                                     0398   800 ; MODULE:OTS$DIVC
                                     0398   900 	MAC	CALL	OTS	OTS$DIVC
                               0000' 0398       	.MASK	OTS$DIVC
                          FC65'  31  039A       	BRW	OTS$DIVC+2		; branch to CALL+2 routine
                           00 00 00  039D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     03A0  1000 
                                     03A0  1100 ; MODULE:OTS$LINKAGE
                                     03A0  1200 	MAC	SYM	OTS	OTS$LINKAGE
                                     03A0  1300 
                                     03A0  1400 ; MODULE:OTS$MSGDEF
                                     03A0  1500 	MAC	SYM	OTS	OTS$_FATINTERR
                                     03A0  1600 	MAC	SYM	OTS	OTS$_INTDATCOR
                                     03A0  1700 	MAC	SYM	OTS	OTS$_INVSTRDES
                                     03A0  1800 	MAC	SYM	OTS	OTS$_USEFLORES
                                     03A0  1900 
                                     03A0  2000 ; MODULE:OTS$POWCJ
                                     03A0  2100 	MAC	CALL	OTS	OTS$POWCJ
                               0000' 03A0       	.MASK	OTS$POWCJ
                          FC5D'  31  03A2       	BRW	OTS$POWCJ+2		; branch to CALL+2 routine
                           00 00 00  03A5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     03A8  2200 
                                     03A8  2300 ; MODULE:OTS$POWDD
                                     03A8  2400 	MAC	CALL	OTS	OTS$POWDD
                               0000' 03A8       	.MASK	OTS$POWDD
                          FC55'  31  03AA       	BRW	OTS$POWDD+2		; branch to CALL+2 routine
                           00 00 00  03AD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     03B0  2500 	MAC	CALL	OTS	OTS$POWDR
                               0000' 03B0       	.MASK	OTS$POWDR
                          FC4D'  31  03B2       	BRW	OTS$POWDR+2		; branch to CALL+2 routine
                           00 00 00  03B5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     03B8  2600 	MAC	CALL	OTS	OTS$POWRD
                               0000' 03B8       	.MASK	OTS$POWRD
                          FC45'  31  03BA       	BRW	OTS$POWRD+2		; branch to CALL+2 routine
                           00 00 00  03BD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     03C0  2700 
                                     03C0  2800 ; MODULE:OTS$POWDJ
                                     03C0  2900 	MAC	CALL	OTS	OTS$POWDJ
                               0000' 03C0       	.MASK	OTS$POWDJ
                          FC3D'  31  03C2       	BRW	OTS$POWDJ+2		; branch to CALL+2 routine
                           00 00 00  03C5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     03C8  3000 
                                     03C8  3100 ; MODULE:OTS$POWII
                                     03C8  3200 	MAC	CALL	OTS	OTS$POWII
                               0000' 03C8       	.MASK	OTS$POWII
                          FC35'  31  03CA       	BRW	OTS$POWII+2		; branch to CALL+2 routine
                           00 00 00  03CD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     03D0  3300 
                                     03D0  3400 ; MODULE:OTS$POWJJ
                                     03D0  3500 	MAC	CALL	OTS	OTS$POWJJ
                               0000' 03D0       	.MASK	OTS$POWJJ
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  19
0-29                                                                                                                             (8)

                          FC2D'  31  03D2       	BRW	OTS$POWJJ+2		; branch to CALL+2 routine
                           00 00 00  03D5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     03D8  3600 
                                     03D8  3700 ; MODULE:OTS$POWRJ
                                     03D8  3800 	MAC	CALL	OTS	OTS$POWRJ
                               0000' 03D8       	.MASK	OTS$POWRJ
                          FC25'  31  03DA       	BRW	OTS$POWRJ+2		; branch to CALL+2 routine
                           00 00 00  03DD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     03E0  3900 
                                     03E0  4000 ; MODULE:OTS$POWRR
                                     03E0  4100 	MAC	CALL	OTS	OTS$POWRR
                               0000' 03E0       	.MASK	OTS$POWRR
                          FC1D'  31  03E2       	BRW	OTS$POWRR+2		; branch to CALL+2 routine
                           00 00 00  03E5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     03E8  4200 
                                     03E8  4300 ; MODULE:OTS$SCOPY
                                     03E8  4400 	MAC	CALL	OTS	OTS$SCOPY_DXDX
                               0000' 03E8       	.MASK	OTS$SCOPY_DXDX
                          FC15'  31  03EA       	BRW	OTS$SCOPY_DXDX+2		; branch to CALL+2 routine
                           00 00 00  03ED       	.BYTE	0,0,0			; fill out to 8 bytes
                                     03F0  4500 	MAC	JSB	OTS	OTS$SCOPY_DXDX6
                          FC0D'  31  03F0       	BRW	OTS$SCOPY_DXDX6			; branch to JSB routine
                     00 00 00 00 00  03F3       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     03F8  4600 	MAC	CALL	OTS	OTS$SCOPY_R_DX
                               0000' 03F8       	.MASK	OTS$SCOPY_R_DX
                          FC05'  31  03FA       	BRW	OTS$SCOPY_R_DX+2		; branch to CALL+2 routine
                           00 00 00  03FD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0400  4700 	MAC	JSB	OTS	OTS$SCOPY_R_DX6
                          FBFD'  31  0400       	BRW	OTS$SCOPY_R_DX6			; branch to JSB routine
                     00 00 00 00 00  0403       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0408  4800 	MAC	CALL	OTS	OTS$SGET1_DD
                               0000' 0408       	.MASK	OTS$SGET1_DD
                          FBF5'  31  040A       	BRW	OTS$SGET1_DD+2		; branch to CALL+2 routine
                           00 00 00  040D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0410  4900 	MAC	JSB	OTS	OTS$SGET1_DD_R6
                          FBED'  31  0410       	BRW	OTS$SGET1_DD_R6			; branch to JSB routine
                     00 00 00 00 00  0413       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0418  5000 	MAC	CALL	OTS	OTS$SFREE1_DD
                               0000' 0418       	.MASK	OTS$SFREE1_DD
                          FBE5'  31  041A       	BRW	OTS$SFREE1_DD+2		; branch to CALL+2 routine
                           00 00 00  041D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0420  5100 	MAC	JSB	OTS	OTS$SFREE1_DD6
                          FBDD'  31  0420       	BRW	OTS$SFREE1_DD6			; branch to JSB routine
                     00 00 00 00 00  0423       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0428  5200 	MAC	CALL	OTS	OTS$SFREEN_DD
                               0000' 0428       	.MASK	OTS$SFREEN_DD
                          FBD5'  31  042A       	BRW	OTS$SFREEN_DD+2		; branch to CALL+2 routine
                           00 00 00  042D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0430  5300 	MAC	JSB	OTS	OTS$SFREEN_DD6
                          FBCD'  31  0430       	BRW	OTS$SFREEN_DD6			; branch to JSB routine
                     00 00 00 00 00  0433       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  20
0-29                                                                                                                             (9)

                                     0438   100 ;+
                                     0438   200 ; Now define the rest of the Math entry points
                                     0438   300 ;-
                                     0438   400 
                                     0438   500 ; MODULE:MTH$ABS
                                     0438   600 	MAC	NOVECT	MTH	MTH$ABS
                                     0438   700 	MAC	NOVECT	MTH	MTH$DABS
                                     0438   800 	MAC	NOVECT	MTH	MTH$IIABS
                                     0438   900 	MAC	NOVECT	MTH	MTH$JIABS
                                     0438  1000 
                                     0438  1100 ; MODULE:MTH$AINT
                                     0438  1200 	MAC	NOVECT	MTH	MTH$AINT
                                     0438  1300 
                                     0438  1400 ; MODULE:MTH$AMOD
                                     0438  1500 	MAC	NOVECT	MTH	MTH$AMOD
                                     0438  1600 
                                     0438  1700 ; MODULE:MTH$ANINT
                                     0438  1800 	MAC	NOVECT	MTH	MTH$ANINT
                                     0438  1900 
                                     0438  2000 ; MODULE:MTH$BITOPS
                                     0438  2100 	MAC	NOVECT	MTH	MTH$IIAND
                                     0438  2200 	MAC	NOVECT	MTH	MTH$IIEOR
                                     0438  2300 	MAC	NOVECT	MTH	MTH$IIOR
                                     0438  2400 	MAC	NOVECT	MTH	MTH$IISHFT
                                     0438  2500 
                                     0438  2600 	MAC	NOVECT	MTH	MTH$INOT
                                     0438  2700 	MAC	NOVECT	MTH	MTH$JIAND
                                     0438  2800 	MAC	NOVECT	MTH	MTH$JIEOR
                                     0438  2900 	MAC	NOVECT	MTH	MTH$JIOR
                                     0438  3000 
                                     0438  3100 	MAC	NOVECT	MTH	MTH$JISHFT
                                     0438  3200 	MAC	NOVECT	MTH	MTH$JNOT
                                     0438  3300 
                                     0438  3400 ; MODULE:MTH$CABS
                                     0438  3500 	MAC	CALL	MTH	MTH$CABS
                               0000' 0438       	.MASK	MTH$CABS
                          FBC5'  31  043A       	BRW	MTH$CABS+2		; branch to CALL+2 routine
                           00 00 00  043D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0440  3600 
                                     0440  3700 ; MODULE:MTH$CEXP
                                     0440  3800 	MAC	CALL	MTH	MTH$CEXP
                               0000' 0440       	.MASK	MTH$CEXP
                          FBBD'  31  0442       	BRW	MTH$CEXP+2		; branch to CALL+2 routine
                           00 00 00  0445       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0448  3900 
                                     0448  4000 ; MODULE:MTH$CLOG
                                     0448  4100 	MAC	CALL	MTH	MTH$CLOG
                               0000' 0448       	.MASK	MTH$CLOG
                          FBB5'  31  044A       	BRW	MTH$CLOG+2		; branch to CALL+2 routine
                           00 00 00  044D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0450  4200 
                                     0450  4300 ; MODULE:MTH$CONJG
                                     0450  4400 	MAC	NOVECT	MTH	MTH$CONJG
                                     0450  4500 
                                     0450  4600 ; MODULE:MTH$CONVER
                                     0450  4700 	MAC	NOVECT	MTH	MTH$AIMAG
                                     0450  4800 	MAC	NOVECT	MTH	MTH$CMPLX
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  21
0-29                                                                                                                             (9)

                                     0450  4900 	MAC	NOVECT	MTH	MTH$DBLE
                                     0450  5000 	MAC	NOVECT	MTH	MTH$DFLOTI
                                     0450  5100 
                                     0450  5200 	MAC	NOVECT	MTH	MTH$DFLOTJ
                                     0450  5300 	MAC	NOVECT	MTH	MTH$FLOATI
                                     0450  5400 	MAC	NOVECT	MTH	MTH$FLOATJ
                                     0450  5500 	MAC	NOVECT	MTH	MTH$IIDINT
                                     0450  5600 
                                     0450  5700 	MAC	NOVECT	MTH	MTH$IIFIX
                                     0450  5800 	MAC	NOVECT	MTH	MTH$IINT
                                     0450  5900 	MAC	NOVECT	MTH	MTH$JIDINT
                                     0450  6000 	MAC	NOVECT	MTH	MTH$JIFIX
                                     0450  6100 
                                     0450  6200 	MAC	NOVECT	MTH	MTH$JINT
                                     0450  6300 	MAC	NOVECT	MTH	MTH$REAL
                                     0450  6400 	MAC	NOVECT	MTH	MTH$SNGL
                                     0450  6500 
                                     0450  6600 ; MODULE:MTH$COSH
                                     0450  6700 	MAC	CALL	MTH	MTH$COSH
                               0000' 0450       	.MASK	MTH$COSH
                          FBAD'  31  0452       	BRW	MTH$COSH+2		; branch to CALL+2 routine
                           00 00 00  0455       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0458  6800 
                                     0458  6900 ; MODULE:MTH$CSINCOS
                                     0458  7000 	MAC	CALL	MTH	MTH$CCOS
                               0000' 0458       	.MASK	MTH$CCOS
                          FBA5'  31  045A       	BRW	MTH$CCOS+2		; branch to CALL+2 routine
                           00 00 00  045D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0460  7100 	MAC	CALL	MTH	MTH$CSIN
                               0000' 0460       	.MASK	MTH$CSIN
                          FB9D'  31  0462       	BRW	MTH$CSIN+2		; branch to CALL+2 routine
                           00 00 00  0465       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0468  7200 
                                     0468  7300 ; MODULE:MTH$CSQRT
                                     0468  7400 	MAC	CALL	MTH	MTH$CSQRT
                               0000' 0468       	.MASK	MTH$CSQRT
                          FB95'  31  046A       	BRW	MTH$CSQRT+2		; branch to CALL+2 routine
                           00 00 00  046D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0470  7500 
                                     0470  7600 ; MODULE:MTH$DCOSH
                                     0470  7700 	MAC	CALL	MTH	MTH$DCOSH
                               0000' 0470       	.MASK	MTH$DCOSH
                          FB8D'  31  0472       	BRW	MTH$DCOSH+2		; branch to CALL+2 routine
                           00 00 00  0475       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0478  7800 
                                     0478  7900 ; MODULE:MTH$DIM
                                     0478  8000 	MAC	NOVECT	MTH	MTH$DDIM
                                     0478  8100 	MAC	NOVECT	MTH	MTH$DIM
                                     0478  8200 	MAC	NOVECT	MTH	MTH$IIDIM
                                     0478  8300 	MAC	NOVECT	MTH	MTH$JIDIM
                                     0478  8400 
                                     0478  8500 ; MODULE:MTH$DINT
                                     0478  8600 	MAC	NOVECT	MTH	MTH$DINT
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  22
0-29                                                                                                                            (11)

                                     0478   100 
                                     0478   200 ; MODULE:MTH$DMAX1
                                     0478   300 	MAC	NOVECT	MTH	MTH$DMAX1
                                     0478   400 
                                     0478   500 ; MODULE:MTH$DMIN1
                                     0478   600 	MAC	NOVECT	MTH	MTH$DMIN1
                                     0478   700 
                                     0478   800 ; MODULE:MTH$DMOD
                                     0478   900 	MAC	NOVECT	MTH	MTH$DMOD
                                     0478  1000 
                                     0478  1100 ; MODULE:MTH$DNINT
                                     0478  1200 	MAC	NOVECT	MTH	MTH$DNINT
                                     0478  1300 
                                     0478  1400 ; MODULE:MTH$DPROD
                                     0478  1500 	MAC	NOVECT	MTH	MTH$DPROD
                                     0478  1600 
                                     0478  1700 ; MODULE:MTH$DSIGN
                                     0478  1800 	MAC	NOVECT	MTH	MTH$DSIGN
                                     0478  1900 
                                     0478  2000 ; MODULE:MTH$DSINH
                                     0478  2100 	MAC	CALL	MTH	MTH$DSINH
                               0000' 0478       	.MASK	MTH$DSINH
                          FB85'  31  047A       	BRW	MTH$DSINH+2		; branch to CALL+2 routine
                           00 00 00  047D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0480  2200 
                                     0480  2300 ; MODULE:MTH$DTAN
                                     0480  2400 	MAC	CALL	MTH	MTH$DTAN
                               0000' 0480       	.MASK	MTH$DTAN
                          FB7D'  31  0482       	BRW	MTH$DTAN+2		; branch to CALL+2 routine
                           00 00 00  0485       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0488  2500 
                                     0488  2600 ; MODULE:MTH$DTANH
                                     0488  2700 	MAC	CALL	MTH	MTH$DTANH
                               0000' 0488       	.MASK	MTH$DTANH
                          FB75'  31  048A       	BRW	MTH$DTANH+2		; branch to CALL+2 routine
                           00 00 00  048D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0490  2800 
                                     0490  2900 ; MODULE:MTH$IIDNNT
                                     0490  3000 	MAC	NOVECT	MTH	MTH$IIDNNT
                                     0490  3100 
                                     0490  3200 ; MODULE:MTH$IISIGN
                                     0490  3300 	MAC	NOVECT	MTH	MTH$IISIGN
                                     0490  3400 
                                     0490  3500 ; MODULE:MTH$IMAX0
                                     0490  3600 	MAC	NOVECT	MTH	MTH$AIMAX0
                                     0490  3700 	MAC	NOVECT	MTH	MTH$IMAX0
                                     0490  3800 
                                     0490  3900 ; MODULE:MTH$IMIN0
                                     0490  4000 	MAC	NOVECT	MTH	MTH$AIMIN0
                                     0490  4100 	MAC	NOVECT	MTH	MTH$IMIN0
                                     0490  4200 
                                     0490  4300 ; MODULE:MTH$ININT
                                     0490  4400 	MAC	NOVECT	MTH	MTH$ININT
                                     0490  4500 
                                     0490  4600 ; MODULE:MTH$JIDNNT
                                     0490  4700 	MAC	NOVECT	MTH	MTH$JIDNNT
                                     0490  4800 
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  23
0-29                                                                                                                            (11)

                                     0490  4900 ; MODULE:MTH$JISIGN
                                     0490  5000 	MAC	NOVECT	MTH	MTH$JISIGN
                                     0490  5100 
                                     0490  5200 ; MODULE:MTH$JMAX0
                                     0490  5300 	MAC	NOVECT	MTH	MTH$AJMAX0
                                     0490  5400 	MAC	NOVECT	MTH	MTH$JMAX0
                                     0490  5500 
                                     0490  5600 ; MODULE:MTH$JMIN0
                                     0490  5700 	MAC	NOVECT	MTH	MTH$AJMIN0
                                     0490  5800 	MAC	NOVECT	MTH	MTH$JMIN0
                                     0490  5900 
                                     0490  6000 ; MODULE:MTH$JNINT
                                     0490  6100 	MAC	NOVECT	MTH	MTH$JNINT
                                     0490  6200 
                                     0490  6300 ; MODULE:MTH$MAX1
                                     0490  6400 	MAC	NOVECT	MTH	MTH$AMAX1
                                     0490  6500 	MAC	NOVECT	MTH	MTH$IMAX1
                                     0490  6600 	MAC	NOVECT	MTH	MTH$JMAX1
                                     0490  6700 
                                     0490  6800 ; MODULE:MTH$MIN1
                                     0490  6900 	MAC	NOVECT	MTH	MTH$AMIN1
                                     0490  7000 	MAC	NOVECT	MTH	MTH$IMIN1
                                     0490  7100 	MAC	NOVECT	MTH	MTH$JMIN1
                                     0490  7200 
                                     0490  7300 ; MODULE:MTH$MOD
                                     0490  7400 	MAC	NOVECT	MTH	MTH$IMOD
                                     0490  7500 	MAC	NOVECT	MTH	MTH$JMOD
                                     0490  7600 
                                     0490  7700 ; MODULE:MTH$MSGDEF
                                     0490  7800 	MAC	SYM	MTH	MTH$_FLOOVEMAT
                                     0490  7900 	MAC	SYM	MTH	MTH$_FLOUNDMAT
                                     0490  8000 	MAC	SYM	MTH	MTH$_INVARGMAT
                                     0490  8100 	MAC	SYM	MTH	MTH$_LOGZERNEG
                                     0490  8200 
                                     0490  8300 	MAC	SYM	MTH	MTH$_SINCOSSIG
                                     0490  8400 	MAC	SYM	MTH	MTH$_SQUROONEG
                                     0490  8500 	MAC	SYM	MTH	MTH$_UNDEXP
                                     0490  8600 	MAC	SYM	MTH	MTH$_WRONUMARG
                                     0490  8700 
                                     0490  8800 ; MODULE:MTH$RANDOM
                                     0490  8900 	MAC	CALL	MTH	MTH$RANDOM
                               0000' 0490       	.MASK	MTH$RANDOM
                          FB6D'  31  0492       	BRW	MTH$RANDOM+2		; branch to CALL+2 routine
                           00 00 00  0495       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0498  9000 
                                     0498  9100 ; MODULE:MTH$SIGN
                                     0498  9200 	MAC	NOVECT	MTH	MTH$SIGN
                                     0498  9300 
                                     0498  9400 ; MODULE:MTH$SINH
                                     0498  9500 	MAC	CALL	MTH	MTH$SINH
                               0000' 0498       	.MASK	MTH$SINH
                          FB65'  31  049A       	BRW	MTH$SINH+2		; branch to CALL+2 routine
                           00 00 00  049D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     04A0  9600 
                                     04A0  9700 ; MODULE:MTH$TAN
                                     04A0  9800 	MAC	CALL	MTH	MTH$TAN
                               0000' 04A0       	.MASK	MTH$TAN
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  24
0-29                                                                                                                            (11)

                          FB5D'  31  04A2       	BRW	MTH$TAN+2		; branch to CALL+2 routine
                           00 00 00  04A5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     04A8  9900 
                                     04A8 10000 ; MODULE:MTH$TANH
                                     04A8 10100 	MAC	CALL	MTH	MTH$TANH
                               0000' 04A8       	.MASK	MTH$TANH
                          FB55'  31  04AA       	BRW	MTH$TANH+2		; branch to CALL+2 routine
                           00 00 00  04AD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     04B0 10200 
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  25
0-29                                                                                                                            (12)

                                     04B0   100 ;+
                                     04B0   200 ; General library entry points LIB$
                                     04B0   300 ;-
                                     04B0   400 
                                     04B0   500 
                                     04B0   600 ; MODULE:LIB$AST_IN_PROG
                                     04B0   700 	MAC	CALL	LIB	LIB$AST_IN_PROG
                               0000' 04B0       	.MASK	LIB$AST_IN_PROG
                          FB4D'  31  04B2       	BRW	LIB$AST_IN_PROG+2		; branch to CALL+2 routine
                           00 00 00  04B5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     04B8   800 ; MODULE:LIB$CHAR
                                     04B8   900 	MAC	NOVECT	LIB	LIB$CHAR
                                     04B8  1000 
                                     04B8  1100 ; MODULE:LIB$CRC
                                     04B8  1200 	MAC	CALL	LIB	LIB$CRC
                               0000' 04B8       	.MASK	LIB$CRC
                          FB45'  31  04BA       	BRW	LIB$CRC+2		; branch to CALL+2 routine
                           00 00 00  04BD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     04C0  1300 
                                     04C0  1400 ; MODULE:LIB$CRC_TABLE
                                     04C0  1500 	MAC	CALL	LIB	LIB$CRC_TABLE
                               0000' 04C0       	.MASK	LIB$CRC_TABLE
                          FB3D'  31  04C2       	BRW	LIB$CRC_TABLE+2		; branch to CALL+2 routine
                           00 00 00  04C5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     04C8  1600 
                                     04C8  1700 ; MODULE:LIB$CVTDF
                                     04C8  1800 	MAC	NOVECT	LIB	LIB$CVTDF
                                     04C8  1900 
                                     04C8  2000 ; MODULE:LIB$CVT_ATx			; NOTE: part of VMS exec sources
                                     04C8  2100 ; so make sure .EXTRN finds, since documented in RTL Reference manual
                                     04C8  2200 ; but do not put in sharable image section. 
                                     04C8  2300 	MAC	NOVECT	LIB	LIB$CVT_DTB
                                     04C8  2400 	MAC	NOVECT	LIB	LIB$CVT_HTB
                                     04C8  2500 	MAC	NOVECT	LIB	LIB$CVT_OTB
                                     04C8  2600 
                                     04C8  2700 ; MODULE:LIB$DEC_OVER
                                     04C8  2800 	MAC	CALL	LIB	LIB$DEC_OVER
                               0000' 04C8       	.MASK	LIB$DEC_OVER
                          FB35'  31  04CA       	BRW	LIB$DEC_OVER+2		; branch to CALL+2 routine
                           00 00 00  04CD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     04D0  2900 
                                     04D0  3000 ; MODULE:LIB$ESTABLISH
                                     04D0  3100 	MAC	CALL	LIB	LIB$ESTABLISH
                               0000' 04D0       	.MASK	LIB$ESTABLISH
                          FB2D'  31  04D2       	BRW	LIB$ESTABLISH+2		; branch to CALL+2 routine
                           00 00 00  04D5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     04D8  3200 
                                     04D8  3300 ; MODULE:LIB$EXTV
                                     04D8  3400 	MAC	CALL	LIB	LIB$EXTV
                               0000' 04D8       	.MASK	LIB$EXTV
                          FB25'  31  04DA       	BRW	LIB$EXTV+2		; branch to CALL+2 routine
                           00 00 00  04DD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     04E0  3500 
                                     04E0  3600 ; MODULE:LIB$EXTZV
                                     04E0  3700 	MAC	CALL	LIB	LIB$EXTZV
                               0000' 04E0       	.MASK	LIB$EXTZV
                          FB1D'  31  04E2       	BRW	LIB$EXTZV+2		; branch to CALL+2 routine
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  26
0-29                                                                                                                            (12)

                           00 00 00  04E5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     04E8  3800 
                                     04E8  3900 ; MODULE:LIB$FFC
                                     04E8  4000 	MAC	CALL	LIB	LIB$FFC
                               0000' 04E8       	.MASK	LIB$FFC
                          FB15'  31  04EA       	BRW	LIB$FFC+2		; branch to CALL+2 routine
                           00 00 00  04ED       	.BYTE	0,0,0			; fill out to 8 bytes
                                     04F0  4100 
                                     04F0  4200 ; MODULE:LIB$FFS
                                     04F0  4300 	MAC	CALL	LIB	LIB$FFS
                               0000' 04F0       	.MASK	LIB$FFS
                          FB0D'  31  04F2       	BRW	LIB$FFS+2		; branch to CALL+2 routine
                           00 00 00  04F5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     04F8  4400 
                                     04F8  4500 ; MODULE:LIB$FIXUP_FLT
                                     04F8  4600 	MAC	CALL	LIB	LIB$FIXUP_FLT
                               0000' 04F8       	.MASK	LIB$FIXUP_FLT
                          FB05'  31  04FA       	BRW	LIB$FIXUP_FLT+2		; branch to CALL+2 routine
                           00 00 00  04FD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0500  4700 
                                     0500  4800 ; MODULE:LIB$FLT_UNDER
                                     0500  4900 	MAC	CALL	LIB	LIB$FLT_UNDER
                               0000' 0500       	.MASK	LIB$FLT_UNDER
                          FAFD'  31  0502       	BRW	LIB$FLT_UNDER+2		; branch to CALL+2 routine
                           00 00 00  0505       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0508  5000 
                                     0508  5100 ; MODULE:LIB$GET_INPUT
                                     0508  5200 	MAC	CALL	LIB	LIB$GET_INPUT
                               0000' 0508       	.MASK	LIB$GET_INPUT
                          FAF5'  31  050A       	BRW	LIB$GET_INPUT+2		; branch to CALL+2 routine
                           00 00 00  050D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0510  5300 	MAC	CALL	LIB	LIB$GET_COMMAND
                               0000' 0510       	.MASK	LIB$GET_COMMAND
                          FAED'  31  0512       	BRW	LIB$GET_COMMAND+2		; branch to CALL+2 routine
                           00 00 00  0515       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0518  5400 
                                     0518  5500 ; MODULE:LIB$ICHAR
                                     0518  5600 	MAC	NOVECT	LIB	LIB$ICHAR
                                     0518  5700 
                                     0518  5800 ; MODULE:LIB$INDEX
                                     0518  5900 	MAC	CALL	LIB	LIB$INDEX
                               0000' 0518       	.MASK	LIB$INDEX
                          FAE5'  31  051A       	BRW	LIB$INDEX+2		; branch to CALL+2 routine
                           00 00 00  051D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0520  6000 
                                     0520  6100 ; MODULE:LIB$INITIALIZE
                                     0520  6200 	MAC	NOVECT	LIB	LIB$INITIALIZE
                                     0520  6300 
                                     0520  6400 ; MODULE:LIB$INSV
                                     0520  6500 	MAC	CALL	LIB	LIB$INSV
                               0000' 0520       	.MASK	LIB$INSV
                          FADD'  31  0522       	BRW	LIB$INSV+2		; branch to CALL+2 routine
                           00 00 00  0525       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0528  6600 
                                     0528  6700 ; MODULE:LIB$INT_OVER
                                     0528  6800 	MAC	CALL	LIB	LIB$INT_OVER
                               0000' 0528       	.MASK	LIB$INT_OVER
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  27
0-29                                                                                                                            (12)

                          FAD5'  31  052A       	BRW	LIB$INT_OVER+2		; branch to CALL+2 routine
                           00 00 00  052D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0530  6900 
                                     0530  7000 ; MODULE:LIB$LEN
                                     0530  7100 	MAC	NOVECT	LIB	LIB$LEN
                                     0530  7200 
                                     0530  7300 ; MODULE:LIB$LOCC
                                     0530  7400 	MAC	CALL	LIB	LIB$LOCC
                               0000' 0530       	.MASK	LIB$LOCC
                          FACD'  31  0532       	BRW	LIB$LOCC+2		; branch to CALL+2 routine
                           00 00 00  0535       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0538  7500 
                                     0538  7600 ; MODULE:LIB$LOOKUP_KEY
                                     0538  7700 	MAC	NOVECT	LIB	LIB$LOOKUP_KEY
                                     0538  7800 
                                     0538  7900 ; MODULE:LIB$MATCHC
                                     0538  8000 	MAC	CALL	LIB	LIB$MATCHC
                               0000' 0538       	.MASK	LIB$MATCHC
                          FAC5'  31  053A       	BRW	LIB$MATCHC+2		; branch to CALL+2 routine
                           00 00 00  053D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0540  8100 
                                     0540  8200 ; MODULE:LIB$MATCH_COND
                                     0540  8300 	MAC	CALL	LIB	LIB$MATCH_COND
                               0000' 0540       	.MASK	LIB$MATCH_COND
                          FABD'  31  0542       	BRW	LIB$MATCH_COND+2		; branch to CALL+2 routine
                           00 00 00  0545       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0548  8400 
                                     0548  8500 ; MODULE:LIB$MOVTC
                                     0548  8600 	MAC	CALL	LIB	LIB$MOVTC
                               0000' 0548       	.MASK	LIB$MOVTC
                          FAB5'  31  054A       	BRW	LIB$MOVTC+2		; branch to CALL+2 routine
                           00 00 00  054D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0550  8700 
                                     0550  8800 ; MODULE:LIB$MOVTUC
                                     0550  8900 	MAC	CALL	LIB	LIB$MOVTUC
                               0000' 0550       	.MASK	LIB$MOVTUC
                          FAAD'  31  0552       	BRW	LIB$MOVTUC+2		; branch to CALL+2 routine
                           00 00 00  0555       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0558  9000 
                                     0558  9100 ; MODULE:LIB$MSGDEF
                                     0558  9200 	MAC	SYM	LIB	LIB$_AMBKEY
                                     0558  9300 	MAC	SYM	LIB	LIB$_ATTCONSTO
                                     0558  9400 	MAC	SYM	LIB	LIB$_BADBLOADR
                                     0558  9500 	MAC	SYM	LIB	LIB$_BADBLOSIZ
                                     0558  9600 
                                     0558  9700 	MAC	SYM	LIB	LIB$_BADSTA
                                     0558  9800 	MAC	SYM	LIB	LIB$_FATERRLIB
                                     0558  9900 	MAC	SYM	LIB	LIB$_INPSTRTRU
                                     0558 10000 	MAC	SYM	LIB	LIB$_INSVIRMEM
                                     0558 10100 
                                     0558 10200 	MAC	SYM	LIB	LIB$_INTLOGERR
                                     0558 10300 	MAC	SYM	LIB	LIB$_INVARG
                                     0558 10400 	MAC	SYM	LIB	LIB$_INVSTRDES
                                     0558 10500 	MAC	SYM	LIB	LIB$_NORMAL
                                     0558 10600 
                                     0558 10700 	MAC	SYM	LIB	LIB$_NOTFOU
                                     0558 10800 	MAC	SYM	LIB	LIB$_PUSSTAOVE
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  28
0-29                                                                                                                            (12)

                                     0558 10900 	MAC	SYM	LIB	LIB$_SIGNO_ARG
                                     0558 11000 	MAC	SYM	LIB	LIB$_STRTRU
                                     0558 11100 
                                     0558 11200 	MAC	SYM	LIB	LIB$_UNRKEY
                                     0558 11300 	MAC	SYM	LIB	LIB$_USEFLORES
                                     0558 11400 
                                     0558 11500 ; MODULE:LIB$PUT_OUTPUT
                                     0558 11600 	MAC	CALL	LIB	LIB$PUT_OUTPUT
                               0000' 0558       	.MASK	LIB$PUT_OUTPUT
                          FAA5'  31  055A       	BRW	LIB$PUT_OUTPUT+2		; branch to CALL+2 routine
                           00 00 00  055D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0560 11700 
                                     0560 11800 ; MODULE:LIB$REVERT
                                     0560 11900 	MAC	CALL	LIB	LIB$REVERT
                               0000' 0560       	.MASK	LIB$REVERT
                          FA9D'  31  0562       	BRW	LIB$REVERT+2		; branch to CALL+2 routine
                           00 00 00  0565       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0568 12000 
                                     0568 12100 ; MODULE:LIB$SCANC
                                     0568 12200 	MAC	CALL	LIB	LIB$SCANC
                               0000' 0568       	.MASK	LIB$SCANC
                          FA95'  31  056A       	BRW	LIB$SCANC+2		; branch to CALL+2 routine
                           00 00 00  056D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0570 12300 
                                     0570 12400 ; MODULE:LIB$SCOPY
                                     0570 12500 	MAC	CALL	LIB	LIB$SCOPY_DXDX
                               0000' 0570       	.MASK	LIB$SCOPY_DXDX
                          FA8D'  31  0572       	BRW	LIB$SCOPY_DXDX+2		; branch to CALL+2 routine
                           00 00 00  0575       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0578 12600 	MAC	JSB	LIB	LIB$SCOPY_DXDX6
                          FA85'  31  0578       	BRW	LIB$SCOPY_DXDX6			; branch to JSB routine
                     00 00 00 00 00  057B       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0580 12700 	MAC	CALL	LIB	LIB$SCOPY_R_DX
                               0000' 0580       	.MASK	LIB$SCOPY_R_DX
                          FA7D'  31  0582       	BRW	LIB$SCOPY_R_DX+2		; branch to CALL+2 routine
                           00 00 00  0585       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0588 12800 	MAC	JSB	LIB	LIB$SCOPY_R_DX6
                          FA75'  31  0588       	BRW	LIB$SCOPY_R_DX6			; branch to JSB routine
                     00 00 00 00 00  058B       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0590 12900 	MAC	CALL	LIB	LIB$SGET1_DD
                               0000' 0590       	.MASK	LIB$SGET1_DD
                          FA6D'  31  0592       	BRW	LIB$SGET1_DD+2		; branch to CALL+2 routine
                           00 00 00  0595       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0598 13000 	MAC	JSB	LIB	LIB$SGET1_DD_R6
                          FA65'  31  0598       	BRW	LIB$SGET1_DD_R6			; branch to JSB routine
                     00 00 00 00 00  059B       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     05A0 13100 	MAC	CALL	LIB	LIB$SFREE1_DD
                               0000' 05A0       	.MASK	LIB$SFREE1_DD
                          FA5D'  31  05A2       	BRW	LIB$SFREE1_DD+2		; branch to CALL+2 routine
                           00 00 00  05A5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     05A8 13200 	MAC	JSB	LIB	LIB$SFREE1_DD6
                          FA55'  31  05A8       	BRW	LIB$SFREE1_DD6			; branch to JSB routine
                     00 00 00 00 00  05AB       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     05B0 13300 	MAC	CALL	LIB	LIB$SFREEN_DD
                               0000' 05B0       	.MASK	LIB$SFREEN_DD
                          FA4D'  31  05B2       	BRW	LIB$SFREEN_DD+2		; branch to CALL+2 routine
                           00 00 00  05B5       	.BYTE	0,0,0			; fill out to 8 bytes
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  29
0-29                                                                                                                            (12)

                                     05B8 13400 	MAC	JSB	LIB	LIB$SFREEN_DD6
                          FA45'  31  05B8       	BRW	LIB$SFREEN_DD6			; branch to JSB routine
                     00 00 00 00 00  05BB       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     05C0 13500 	MAC	FUTURE	LIB	LIB$SHOW_SCOPY
            00 00 00 00 00 00 00 00  05C0       	.BYTE	0,0,0,0,0,0,0,0		; leave 8 bytes
                                     05C8 13600 
                                     05C8 13700 ; MODULE:LIB$SIGNAL
                                     05C8 13800 	MAC	CALL	LIB	LIB$SIGNAL
                               0000' 05C8       	.MASK	LIB$SIGNAL
                          FA35'  31  05CA       	BRW	LIB$SIGNAL+2		; branch to CALL+2 routine
                           00 00 00  05CD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     05D0 13900 	MAC	CALL	LIB	LIB$STOP
                               0000' 05D0       	.MASK	LIB$STOP
                          FA2D'  31  05D2       	BRW	LIB$STOP+2		; branch to CALL+2 routine
                           00 00 00  05D5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     05D8 14000 
                                     05D8 14100 ; MODULE:LIB$SIG_TO_RET
                                     05D8 14200 
                                     05D8 14300 	MAC	CALL	LIB	LIB$SIG_TO_RET
                               0000' 05D8       	.MASK	LIB$SIG_TO_RET
                          FA25'  31  05DA       	BRW	LIB$SIG_TO_RET+2		; branch to CALL+2 routine
                           00 00 00  05DD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     05E0 14400 
                                     05E0 14500 ; MODULE:LIB$SKPC
                                     05E0 14600 	MAC	CALL	LIB	LIB$SKPC
                               0000' 05E0       	.MASK	LIB$SKPC
                          FA1D'  31  05E2       	BRW	LIB$SKPC+2		; branch to CALL+2 routine
                           00 00 00  05E5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     05E8 14700 
                                     05E8 14800 ; MODULE:LIB$SPANC
                                     05E8 14900 	MAC	CALL	LIB	LIB$SPANC
                               0000' 05E8       	.MASK	LIB$SPANC
                          FA15'  31  05EA       	BRW	LIB$SPANC+2		; branch to CALL+2 routine
                           00 00 00  05ED       	.BYTE	0,0,0			; fill out to 8 bytes
                                     05F0 15000 
                                     05F0 15100 ; MODULE:LIB$TPARSE
                                     05F0 15200 	MAC	NOVECT	LIB	LIB$TPARSE
                                     05F0 15300 
                                     05F0 15400 ; MODULE:LIB$VM
                                     05F0 15500 	MAC	CALL	LIB	LIB$FREE_VM
                               0000' 05F0       	.MASK	LIB$FREE_VM
                          FA0D'  31  05F2       	BRW	LIB$FREE_VM+2		; branch to CALL+2 routine
                           00 00 00  05F5       	.BYTE	0,0,0			; fill out to 8 bytes
                                     05F8 15600 	MAC	CALL	LIB	LIB$GET_VM
                               0000' 05F8       	.MASK	LIB$GET_VM
                          FA05'  31  05FA       	BRW	LIB$GET_VM+2		; branch to CALL+2 routine
                           00 00 00  05FD       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0600 15700 	MAC	FUTURE	LIB	LIB$SHOW_VM
            00 00 00 00 00 00 00 00  0600       	.BYTE	0,0,0,0,0,0,0,0		; leave 8 bytes
                                     0608 15800 
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  30
0-29                                                                                                                            (13)

                                     0608   100 ;+
                                     0608   200 ; Internal entry points which need vectors because the non-shared
                                     0608   300 ; library must call these procedures in shared library, rather
                                     0608   400 ; than getting a copy of the procedure from the object library.
                                     0608   500 ; Note: the instances of $$ entry vectors is to be minimized.
                                     0608   600 ; The only cases where it hurts to have two copies of a procedure
                                     0608   700 ; is when the procedure has statically allocated (OWN) data
                                     0608   800 ; which is used as a process-wide resource.
                                     0608   810 ; Note: in order to prevent linker data truncation errors, all modules
                                     0608   820 ; which are shared and are also linked in as private copies when
                                     0608   830 ; $$entry points are referenced by non-shared routines called by the user
                                     0608   840 ; must declare external references to code as general (not word dispalcement)
                                     0608   850 ; even if the reference is to the same PSECT!!!!!
                                     0608   860 ; Modules which have this dual life are: FOR$$ERROR, FOR$$VM, FOR$$SIGNAL.
                                     0608   870 ; ******************************************************************
                                     0608   880 ; MAINTENANCE NOTE: The following $$ entry vectors can not have their
                                     0608   890 ; specs changed, even though $$, since that would cause user programs
                                     0608   892 ; with compatibility (unshared) routines to have to re-link in order to
                                     0608   894 ; work correctly.  Worse we would not want to increase the major ID in
                                     0608   896 ; order for the image activator to catch the incompatibility, since
                                     0608   898 ; that would cause all users to have to relink.
                                     0608   900 ;-
                                     0608  1000 
                                     0608  1100 ; MODULE:FOR$$CB
                                     0608  1200 	MAC	JSB	FOR	FOR$$CB_PUSH
                          F9F5'  31  0608       	BRW	FOR$$CB_PUSH			; branch to JSB routine
                     00 00 00 00 00  060B       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0610  1300 	MAC	JSB	FOR	FOR$$CB_POP
                          F9ED'  31  0610       	BRW	FOR$$CB_POP			; branch to JSB routine
                     00 00 00 00 00  0613       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0618  1400 	MAC	JSB	FOR	FOR$$CB_RET
                          F9E5'  31  0618       	BRW	FOR$$CB_RET			; branch to JSB routine
                     00 00 00 00 00  061B       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0620  1500 	MAC	JSB	FOR	FOR$$CB_GET	; Added for non-shared code
                          F9DD'  31  0620       	BRW	FOR$$CB_GET			; branch to JSB routine
                     00 00 00 00 00  0623       	.BYTE	0,0,0,0,0		; fill out to 8 bytes
                                     0628  1600 						; to load CCB from OTS$$A_CUR_LUB
                                     0628  1700 
                                     0628  1800 
                                     0628  1900 ; MODULE:FOR$ERRSNS			; See also above FOR$ERRSNS, FOR$ERRSNS_W
                                     0628  2000 	MAC	CALL	FOR	FOR$$ERRSNS_SAV
                               0000' 0628       	.MASK	FOR$$ERRSNS_SAV
                          F9D5'  31  062A       	BRW	FOR$$ERRSNS_SAV+2		; branch to CALL+2 routine
                           00 00 00  062D       	.BYTE	0,0,0			; fill out to 8 bytes
                                     0630  2100 
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  31
0-29                                                                                                                            (15)

                                     0630   100 
                                     0630   200 
                                     0630   300 	.END	START			; start address
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  32
SYMBOL TABLE                                                                                                                    (15)

FOR$$CB_GET      ********   X   02   FOR$PAUSE        ********   X   02   LIB$SPANC        ********   X   02   
FOR$$CB_POP      ********   X   02   FOR$READ_DF      ********   X   02   LIB$STOP         ********   X   02   
FOR$$CB_PUSH     ********   X   02   FOR$READ_DO      ********   X   02   MTH$ACOS         ********   X   02   
FOR$$CB_RET      ********   X   02   FOR$READ_DU      ********   X   02   MTH$ACOS_R5      ********   X   02   
FOR$$ERRSNS_SAV  ********   X   02   FOR$READ_SF      ********   X   02   MTH$ALOG         ********   X   02   
FOR$$IO_BEG      ********   X   02   FOR$READ_SL      ********   X   02   MTH$ALOG10       ********   X   02   
FOR$BACKSPACE    ********   X   02   FOR$READ_SO      ********   X   02   MTH$ALOG10_R5    ********   X   02   
FOR$CLOSE        ********   X   02   FOR$READ_SU      ********   X   02   MTH$ALOG_R5      ********   X   02   
FOR$CNV_IN_DEFG  ********   X   02   FOR$REWIND       ********   X   02   MTH$ASIN         ********   X   02   
FOR$CNV_IN_I     ********   X   02   FOR$SECNDS       ********   X   02   MTH$ASIN_R5      ********   X   02   
FOR$CNV_IN_L     ********   X   02   FOR$STOP         ********   X   02   MTH$ATAN         ********   X   02   
FOR$CNV_IN_O     ********   X   02   FOR$WRITE_DF     ********   X   02   MTH$ATAN2        ********   X   02   
FOR$CNV_IN_Z     ********   X   02   FOR$WRITE_DO     ********   X   02   MTH$ATAN_R4      ********   X   02   
FOR$CNV_OUT_D    ********   X   02   FOR$WRITE_DU     ********   X   02   MTH$CABS         ********   X   02   
FOR$CNV_OUT_E    ********   X   02   FOR$WRITE_SF     ********   X   02   MTH$CCOS         ********   X   02   
FOR$CNV_OUT_F    ********   X   02   FOR$WRITE_SL     ********   X   02   MTH$CEXP         ********   X   02   
FOR$CNV_OUT_G    ********   X   02   FOR$WRITE_SO     ********   X   02   MTH$CLOG         ********   X   02   
FOR$CNV_OUT_I    ********   X   02   FOR$WRITE_SU     ********   X   02   MTH$COS          ********   X   02   
FOR$CNV_OUT_L    ********   X   02   LIB$AST_IN_PROG  ********   X   02   MTH$COSH         ********   X   02   
FOR$CNV_OUT_O    ********   X   02   LIB$CRC          ********   X   02   MTH$COS_R4       ********   X   02   
FOR$CNV_OUT_Z    ********   X   02   LIB$CRC_TABLE    ********   X   02   MTH$CSIN         ********   X   02   
FOR$DECODE_MF    ********   X   02   LIB$DEC_OVER     ********   X   02   MTH$CSQRT        ********   X   02   
FOR$DECODE_MO    ********   X   02   LIB$ESTABLISH    ********   X   02   MTH$DACOS        ********   X   02   
FOR$DEF_FILE     ********   X   02   LIB$EXTV         ********   X   02   MTH$DACOS_R9     ********   X   02   
FOR$DEF_FILE_W   ********   X   02   LIB$EXTZV        ********   X   02   MTH$DASIN        ********   X   02   
FOR$ENCODE_MF    ********   X   02   LIB$FFC          ********   X   02   MTH$DASIN_R9     ********   X   02   
FOR$ENCODE_MO    ********   X   02   LIB$FFS          ********   X   02   MTH$DATAN        ********   X   02   
FOR$ENDFILE      ********   X   02   LIB$FIXUP_FLT    ********   X   02   MTH$DATAN2       ********   X   02   
FOR$ERRSNS       ********   X   02   LIB$FLT_UNDER    ********   X   02   MTH$DATAN_R7     ********   X   02   
FOR$ERRSNS_W     ********   X   02   LIB$FREE_VM      ********   X   02   MTH$DCOS         ********   X   02   
FOR$EXIT         ********   X   02   LIB$GET_COMMAND  ********   X   02   MTH$DCOSH        ********   X   02   
FOR$EXIT_W       ********   X   02   LIB$GET_INPUT    ********   X   02   MTH$DCOS_R7      ********   X   02   
FOR$FIND         ********   X   02   LIB$GET_VM       ********   X   02   MTH$DEXP         ********   X   02   
FOR$INI_DES1_R2  ********   X   02   LIB$INDEX        ********   X   02   MTH$DEXP_R7      ********   X   02   
FOR$INI_DES2_R3  ********   X   02   LIB$INSV         ********   X   02   MTH$DLOG         ********   X   02   
FOR$INI_DESC_R6  ********   X   02   LIB$INT_OVER     ********   X   02   MTH$DLOG10       ********   X   02   
FOR$IO_B_R       ********   X   02   LIB$LOCC         ********   X   02   MTH$DLOG10_R8    ********   X   02   
FOR$IO_B_V       ********   X   02   LIB$MATCHC       ********   X   02   MTH$DLOG_R8      ********   X   02   
FOR$IO_D_R       ********   X   02   LIB$MATCH_COND   ********   X   02   MTH$DSIN         ********   X   02   
FOR$IO_D_V       ********   X   02   LIB$MOVTC        ********   X   02   MTH$DSINH        ********   X   02   
FOR$IO_END       ********   X   02   LIB$MOVTUC       ********   X   02   MTH$DSIN_R7      ********   X   02   
FOR$IO_FC_R      ********   X   02   LIB$PUT_OUTPUT   ********   X   02   MTH$DSQRT        ********   X   02   
FOR$IO_FC_V      ********   X   02   LIB$REVERT       ********   X   02   MTH$DSQRT_R5     ********   X   02   
FOR$IO_F_R       ********   X   02   LIB$SCANC        ********   X   02   MTH$DTAN         ********   X   02   
FOR$IO_F_V       ********   X   02   LIB$SCOPY_DXDX   ********   X   02   MTH$DTANH        ********   X   02   
FOR$IO_LU_R      ********   X   02   LIB$SCOPY_DXDX6  ********   X   02   MTH$EXP          ********   X   02   
FOR$IO_LU_V      ********   X   02   LIB$SCOPY_R_DX   ********   X   02   MTH$EXP_R4       ********   X   02   
FOR$IO_L_R       ********   X   02   LIB$SCOPY_R_DX6  ********   X   02   MTH$RANDOM       ********   X   02   
FOR$IO_L_V       ********   X   02   LIB$SFREE1_DD    ********   X   02   MTH$SIN          ********   X   02   
FOR$IO_T_DS      ********   X   02   LIB$SFREE1_DD6   ********   X   02   MTH$SINH         ********   X   02   
FOR$IO_T_V_DS    ********   X   02   LIB$SFREEN_DD    ********   X   02   MTH$SIN_R4       ********   X   02   
FOR$IO_WU_R      ********   X   02   LIB$SFREEN_DD6   ********   X   02   MTH$SQRT         ********   X   02   
FOR$IO_WU_V      ********   X   02   LIB$SGET1_DD     ********   X   02   MTH$SQRT_R2      ********   X   02   
FOR$IO_W_R       ********   X   02   LIB$SGET1_DD_R6  ********   X   02   MTH$TAN          ********   X   02   
FOR$IO_W_V       ********   X   02   LIB$SIGNAL       ********   X   02   MTH$TANH         ********   X   02   
FOR$IO_X_DA      ********   X   02   LIB$SIG_TO_RET   ********   X   02   OTS$DIVC         ********   X   02   
FOR$OPEN         ********   X   02   LIB$SKPC         ********   X   02   OTS$POWCJ        ********   X   02   
RTLVECTOR       - Define entry vectors for RTL                   21-AUG-1978 18:52:09   VAX-11 MACRO X0.3-11               Page  33
SYMBOL TABLE                                                                                                                    (15)

OTS$POWDD        ********   X   02   
OTS$POWDJ        ********   X   02   
OTS$POWDR        ********   X   02   
OTS$POWII        ********   X   02   
OTS$POWJJ        ********   X   02   
OTS$POWRD        ********   X   02   
OTS$POWRJ        ********   X   02   
OTS$POWRR        ********   X   02   
OTS$SCOPY_DXDX   ********   X   02   
OTS$SCOPY_DXDX6  ********   X   02   
OTS$SCOPY_R_DX   ********   X   02   
OTS$SCOPY_R_DX6  ********   X   02   
OTS$SFREE1_DD    ********   X   02   
OTS$SFREE1_DD6   ********   X   02   
OTS$SFREEN_DD    ********   X   02   
OTS$SFREEN_DD6   ********   X   02   
OTS$SGET1_DD     ********   X   02   
OTS$SGET1_DD_R6  ********   X   02   
RTLVECTOR      = 00000001            
START            00000000 R     02   


PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
RTL$$VECTOR      00000630      02       PIC   USR   CON   REL   LCL   SHR   EXE   RD  NOWRT PAGE  


THERE WERE NO ERRORS OR WARNINGS.
23770. BYTES LEFT IN FREE MEMORY POOL.
OBJ$:RTLVECTOR,LIS$:RTLVECTOR/-SP=SRC$:RTLVECTOR,ALLGBL
0 MLB DIR RDS - 0 GETS TO DEFINE 0 MACROS. 262 INTER. FILE WRITES. 
