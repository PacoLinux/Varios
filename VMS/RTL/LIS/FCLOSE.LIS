
; Bliss-32 10.1-416	Monday 21-AUG-1978 19:14:40	DBB3:[RTL.SRC]FCLOSE.B32;14					Page 1
;
;00100  0001	MODULE FOR$CLOSE (	! FORTRAN CLOSE and default CLOSE
;00200  0002		IDENT = '0-36'	! File: FCLOSE.B32
;00300  0003			) =
;00400  0004	BEGIN
;00500  0005	
;00600  0006	!
;00700  0007	! COPYRIGHT (C) 1977
;00800  0008	! DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS 01754
;00900  0009	!
;01000  0010	! THIS SOFTWARE IS FURNISHED  UNDER A LICENSE FOR USE ONLY ON A SINGLE
;01100  0011	! COMPUTER  SYSTEM AND  MAY BE  COPIED ONLY WITH  THE INCLUSION OF THE
;01200  0012	! ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,
;01300  0013	! MAY NOT BE PROVIDED OR  OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
;01400  0014	! EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE
;01500  0015	! TERMS.  TITLE TO AND  OWNERSHIP OF THE  SOFTWARE  SHALL AT ALL TIMES
;01600  0016	! REMAIN IN DEC.
;01700  0017	!
;01800  0018	! THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE
;01900  0019	! AND SHOULD  NOT BE CONSTRUED  AS A COMMITMENT  BY DIGITAL  EQUIPMENT
;02000  0020	! CORPORATION.
;02100  0021	!
;02200  0022	! DEC ASSUMES  NO  RESPONSIBILITY  FOR  THE USE OR  RELIABILITY OF ITS
;02300  0023	! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
;02400  0024	
;02500  0025	!++
;02600  0026	! FACILITY: FORTRAN Support Library - user callable
;02700  0027	!
;02800  0028	! ABSTRACT:
;02900  0029	!
;03000  0030	!	This module closes a file on a specified logical unit
;03100  0031	!	(LUN) and deallocates the I/O statement block (ISB) and
;03200  0032	!	RMS Record Access Block (RAB) conrol blocks which were
;03300  0033	!	allocatd by OPEN or default OPEN for this LUN.
;03400  0034	!
;03500  0035	! ENVIRONMENT: User access level; re-entrant, AST level or not.
;03600  0036	!
;03700  0037	! AUTHOR:	Thomas N. Hastings, CREATION DATE: 28-Apr-77; Version 01
;03800  0038	!
;03900  0039	! MODIFIED BY:
;04000  0040	!
;04100  0041	! Thomas N. Hastings, 28-Apr-77, Version 01
;04200  0042	! 01	- original
;04300  0043	! 0-13	- unwind cleanup TNH
;04400  0044	! 0-14	- set spool bit and FAB$V_DLT, not FAB$V_TMP 17-SEP-77 TNH
;04500  0045	! 0-15	- Return success, instead of 0, so ERR= will work.  TNH 27-SEP-77
;04600  0046	! 0-15	- Deallocate dynamic record buffer allocated at OPEN.  JMT 19-OCT-77
;04700  0047	! 0-17	- Use FOR$K_abcmno17yz as E17TERNAL LITERALs.  TNH 27-Oct-77
;04800  0048	! 0-18	- Add code for CLOSE deletes files.  JMT 5-Nov-77
;04900  0049	! 0-19	- Deallocate name block on CLOSE.  JMT 10-Nov-77
;05000  0050	! 0-20	- Report any errors from FREE_VM. JMT 10-Nov-77
;05100  0051	! 0-21	- Set LUB$A_FAB correctly for error status reporting.  JMT 16-Nov-77
;05200  0052	! 0-22	- Call FOR$$SIG_FATINT.  TNH 1-Dec-77
;05300  0053	! 0-23	- Make some global refernces addressing_mode (general). JMT 8-Dec-77
;05400  0054	! 0-24	- Change CB_POP to CB_RET!  JMT 14-Dec-77
;05500  0055	! 0-25	- Change LIB$FREE_VM to FOR$$FREE_VM.  JMT 18-Dec-77

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:14:40	DBB3:[RTL.SRC]FCLOSE.B32;14					Page 1-1
;
;05600  0056	! 0-26	- Put the file close code in a seperate procedure so that
;05700  0057	!	  the exit handler can call to close files.  JMT 11-Jan-78
;05800  0058	! 0-28	- Global register CCB.  JMT 8-Apr-78
;05900  0059	! 0-30	- Change to STARLET library. DGP 20-Apr-78
;06000  0060	! 0-31	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
;06100  0061	! 0-32	- Change STARLET to RTLSTARLE to avoid conflicts.  DGP 1-May-78
;06200  0062	! 0-33	- Use JSB linkages.  TNH 22-May-78
;06300  0063	! 0-34	- Remove EXTERNAL FOR$$SIG_FATINT since not used.  TNH 10-June-78
;06400  0064	! 0-35	- Fix close error message bug and PRINT.  TNH 17-June-78
;06500  0065	! 0-36	- Fix DELETE.  TNH 17-June-78
;06600  0066	!--

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:14:40	DBB3:[RTL.SRC]FCLOSE.B32;14					Page 2
;
;00100  0067	!
;00200  0068	! LINKAGES:
;00300  0069	!
;00400  0070	REQUIRE 'RTLIN:FLNK';		! define all linkages
; %PRINT:	File: FLNK.B32; Version 1, edit 12, TNH 2-Aug-78
;00500  0292	
;00600  0293	!
;00700  0294	! TABLE OF CONTENTS:
;00800  0295	!
;00900  0296	
;01000  0297	FORWARD ROUTINE
;01100  0298		FOR$CLOSE,			! FORTRAN CLOSE statement
;01200  0299		FOR$$CLOSE_FILE: CALL_CCB NOVALUE;! FORTRAN internal file close
;01300  0300	
;01400  0301	BUILTIN
;01500  0302		ACTUALPARAMETER,	! needed for variable length
;01600  0303					! parameter list
;01700  0304		ACTUALCOUNT;		!
;01800  0305	
;01900  0306	!
;02000  0307	! INCLUDE FILES:
;02100  0308	!
;02200  0309		REQUIRE 'RTLML:FERR';		! FORTRAN error number definitions
; %PRINT:	Filename: FERR.MDL! Version 0, edit 36, TNH 19-June-78
;02300  0427		REQUIRE 'RTLML:FISB';		! I/O statement control block
; %PRINT:	File: FISB.MDL which produces FISB.B32! Version 1, EDIT 16, DGP 02-Jun-78
;02400  0636		REQUIRE 'RTLML:FLUB';		! logical unit block definitions
; %PRINT:	File: FLUB.MDL which produces FLUB.B32! Version 0, edit 30, TNH, 17-June-78
;02500  0804		REQUIRE 'RTLIN:FMAC';		! macros
; %PRINT:	Filename: FMAC.B32; Version 1, edit 29, TNH, 7-JUN-78
; %PRINT:	 REQUIRE FILE: LPSECT.B32, VERSION 01-5, TNH, 27-Jun-78
;02600  0984		REQUIRE 'RTLIN:FOPN';		! definitions of OPEN/CLOSE parameters
; %PRINT:	Filename: FOPN.B32; version 0, edit 22, TNH, 30-May-78
;02700  1123		REQUIRE 'RTLML:FPAR';		! FORTRAN inter-module paramters
; %PRINT:	File: FPAR.MDL! version 0, edit 11, TNH, 30-May-78
;02800  1225		LIBRARY 'RTLSTARLE';	! STARLET library for macros and symbols
;02900  1226	!
;03000  1227	! MACROS:
;03100  1228	!
;03200  1229	!	None
;03300  1230	
;03400  1231	!
;03500  1232	! EQUATED SYMBOLS:
;03600  1233	!
;03700  1234	!	None
;03800  1235	
;03900  1236	!
;04000  1237	! PSECT DECLARATIONS:
;04100  1238	!
;04200  1239	
;04300  1240		DECLARE_PSECTS (FOR);	! declare PSECTs for FOR$ facility
;04400  1241	
;04500  1242	!
;04600  1243	! OWN STORAGE:
;04700  1244	!

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:14:40	DBB3:[RTL.SRC]FCLOSE.B32;14					Page 2-1
;
;04800  1245	!	None
;04900  1246	
;05000  1247	!
;05100  1248	! EXTERNAL REFERENCES:
;05200  1249	!
;05300  1250	
;05400  1251	EXTERNAL ROUTINE
;05500  1252		FOR$$FREE_VM: NOVALUE,		! Return VM and signal if error.
;05600  1253		FOR$$OPECLO_ARG: NOVALUE, 	! Get OPEN/CLOSE arguments
;05700  1254		FOR$$SIGNAL_STO: NOVALUE,	! Convert FORTRAN error#
;05800  1255						! to 32 condition code and SIGNAL_STOP
;05900  1256		FOR$$ERR_OPECLO,		! OPEN/CLOSE error condition handler
;06000  1257						! resignals or unwinds depending on whether user specified ERR=
;06100  1258						! (in OPEN module)
;06200  1259		FOR$$CB_PUSH: JSB_CB_PUSH NOVALUE,	! Push down active I/O and allocate
;06300  1260						! LUB/ISB/RAB if not already for unit.
;06400  1261		FOR$$CB_RET: JSB_CB_RET NOVALUE;	! Deallocate LUB/ISB/RAB
;06500  1262						! after popping back previous LUB/ISB/RAB, if any
;06600  1263						! then flag this logical unit as nolonger having a LUB/ISB/RAB

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:14:40	DBB3:[RTL.SRC]FCLOSE.B32;14					Page 3
;
;00100  1264	GLOBAL ROUTINE FOR$CLOSE	(	! FORTRAN CLOSE statement
;00200  1265			KEYWD,		! keyword code - repeated arguments
;00300  1266			INFO)		! value of keyword (optional)
;00400  1267			=		! value is TRUE iff successful,
;00500  1268					! FALSE if error and err= present.
;00600  1269	
;00700  1270	!++
;00800  1271	! ABSTRACT:
;00900  1272	!
;01000  1273	!	Interpret CLOSE statement keywords:
;01100  1274	!	attributes specified in the encoded keyword parameters.
;01200  1275	!	The keywords are UNIT=, DISPOSE=, and ERR=.
;01300  1276	!	DISPOSE= may have one of, 'SAVE', 'PRINT', or 'DELETE' values
;01400  1277	!	which overrides the DISPOSE= specification of the OPEN
;01500  1278	!	on that LUN.  Call FOR$$CLOSE_FILE to RMS close the file.
;01600  1279	!	Flag the logical unit as closed.
;01700  1280	!	Deallocate LUB/ISB/RAB for this LUN
;01800  1281	!
;01900  1282	! FORMAL PARAMETERS:
;02000  1283	!
;02100  1284	! The following pair is repeated for each user specified keyword:
;02200  1285	!	KEYWD.rlu.v	Contains KEY<7:0>, ARGTYPE<15:8>, and
;02300  1286	!			possibly INFO<31:16>
;02400  1287	!	INFO.rlu.v	Optional informaion if need more
;02500  1288	!			than 16 bits.
;02600  1289	!
;02700  1290	! IMPLICIT INPUTS:
;02800  1291	!
;02900  1292	!	OTS$$A_CUR_LUB	Current active LUB to be pushed down or 0
;03000  1293	!			if no LUB has an I/O statement in progress (usual).
;03100  1294	!	LUB$V_OPENED	1 if LUN is opened, 0 if already closed.
;03200  1295	!	LUB$W_IFI	RMS internal file id of file on this LUN.
;03300  1296	!			Needed as input to $CLOSE.
;03400  1297	!	LUB$V_SCRATCH	1 if this is a scratch file.
;03500  1298	!	LUB$V_READ_ONLY	1 if this file was specified READONLY in FORTRAN OPEN
;03600  1299	!
;03700  1300	! IMPLICIT OUTPUTS:
;03800  1301	!
;03900  1302	!
;04000  1303	! COMPLETION STATUS:
;04100  1304	!
;04200  1305	!	TRUE if success, FALSE if failure and ERR= keyword present
;04300  1306	!
;04400  1307	! SIDE EFFECTS:
;04500  1308	!
;04600  1309	!	Deallocates LUB/ISB/RAB
;04700  1310	!	SIGNALs or SIGNAL_STOPs the following errors unless
;04800  1311	!	ERR= is present.
;04900  1312	!	SIGNAL_STOPs  FOR$_CLOERR (28 = 'CLOSE ERROR')
;05000  1313	!	SIGNAL_STOPs  FOR$_INCOPECLO (46 = 'INCONSISTENT OPEN/CLOSE
;05100  1314	!	STATEMENT SPECIFICATONS')
;05200  1315	!--
;05300  1316	
;05400  1317	    BEGIN
;05500  1318	

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:14:40	DBB3:[RTL.SRC]FCLOSE.B32;14					Page 3-1
;
;05600  1319	    GLOBAL REGISTER
;05700  1320		CCB = 11: REF BLOCK[, BYTE];
;05800  1321	
;05900  1322	    MAP
;06000  1323		KEYWD: BLOCKVECTOR [100,1];	! Use of formal arg list
;06100  1324					! as VECTOR of blocks, each
;06200  1325					! block = 1 longword.
;06300  1326	    LOCAL
;06400  1327		L_UNWIND_ACTION: VOLATILE,	! Unwind action code for handler
;06500  1328		CLOS: VOLATILE VECTOR[CLOS$K_KEY_MAX+1],	! close parameter array
;06600  1329		NAM_DSC: DSC$DESCRIPTOR;		! string desc for ASCIZ
;06700  1330	
;06800  1331	
;06900  1332	    ENABLE			! Establish error handler to
;07000  1333					! RESIGNAL or UNWIND if ERR= present
;07100  1334		FOR$$ERR_OPECLO (L_UNWIND_ACTION, CLOS);	! Pass unwind action and
;07200  1335							! pass CLOS array with  ERR= flag in CLOS[OPEN$K_ERR]
;07300  1336	
;07400  1337	    !+
;07500  1338	    ! Set cleanup action on UNWIND to no-operation (since LUB/ISB/RAB
;07600  1339	    ! not pushed down yet)
;07700  1340	    !-
;07800  1341	
;07900  1342	    L_UNWIND_ACTION = FOR$K_UNWINDNOP;
;08000  1343	
;08100  1344	    !+
;08200  1345	    ! Scan user parameter list and copy in sorted order to CLOS
;08300  1346	    ! array.SIGNAL_STOP FOR$_INVARGFOR (48'=INVALID ARGUMENT TO FORTRAN I/O SYSTEM')
;08400  1347	    ! after scanning all parameters to see if ERR= is present
;08500  1348	    ! and setting CLOS[OPEN$K_ERR] accordingly to 1 or 0
;08600  1349	    !-
;08700  1350	
;08800  1351	    FOR$$OPECLO_ARG(KEYWD, ACTUALCOUNT(), CLOS, CLOS$K_KEY_MAX, NAM_DSC);
;08900  1352	
;09000  1353	    !+
;09100  1354	    ! Allocate LUB/ISB/RAB for unit 1:99 if not already setup
;09200  1355	    ! Push down active I/O if on another unit. If unit already has
;09300  1356	    ! active I/O, SIGNAL_STOP FOR$_RECIO_OPE (40 = 'RECURSIVE I/O OPERATION')
;09400  1357	    ! If logical unit outside legal range, SIGNAL_STOP FOR$_INVLOGUNI (32='INVALID LOGICAL UNIT NUMBER')
;09500  1358	    ! Stores new LUB/ISB/RAB address in OTS Common OTS$$A_CUR_LUB
;09600  1359	    ! Finally indicate that UNWIND cleanup action is now to be to
;09700  1360	    ! ret current LUB/ISB/RAB since it has now been sucessfully pushed.
;09800  1361	    ! On return, CCB points to current control block.
;09900  1362	    !-
;10000  1363	
;10100  1364	    FOR$$CB_PUSH (.CLOS[OPEN$K_UNIT], OPEN$K_LUN_MIN);
;10200  1365	    L_UNWIND_ACTION = FOR$K_UNWINDRET;
;10300  1366	
;10400  1367	    !+
;10500  1368	    ! Check if file already CLOSEd (or not OPEN)
;10600  1369	    !-
;10700  1370	
;10800  1371	    IF .CCB[LUB$V_OPENED]
;10900  1372	    THEN
;11000  1373		BEGIN

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:14:40	DBB3:[RTL.SRC]FCLOSE.B32;14					Page 3-2
;
;11100  1374	
;11200  1375		!+
;11300  1376		! DISPOSE
;11400  1377		!-
;11500  1378	
;11600  1379		CASE .CLOS[OPEN$K_DISPOSE] FROM 0 TO OPEN$K_DIS_PRI OF
;11700  1380		    SET
;11800  1381		    [0]:	;		! DISPOSE not specified
;11900  1382		    [OPEN$K_DIS_SAV]:		! DISPOSE = 'SAVE'
;12000  1383			BEGIN
;12100  1384			IF .CCB[LUB$V_SCRATCH] THEN FOR$$SIGNAL_STO (FOR$K_INCOPECLO);
;12200  1385			CCB[LUB$V_DELETE] = 0;! Make sure these things are off!!!
;12300  1386			CCB[LUB$V_PRINT] = 0;
;12400  1387			END;
;12500  1388		    [OPEN$K_DIS_DEL]:		! DISPOSE = 'DELETE'
;12600  1389			BEGIN
;12700  1390			IF .CCB[LUB$V_READ_ONLY]
;12800  1391			THEN
;12900  1392			    FOR$$SIGNAL_STO (FOR$K_INCOPECLO);
;13000  1393			CCB[LUB$V_DELETE] = 1;
;13100  1394			CCB[LUB$V_PRINT] = 0;
;13200  1395			END;
;13300  1396		    [OPEN$K_DIS_PRI]:		! DISPOSE = 'PRINT'
;13400  1397			BEGIN
;13500  1398			IF .CCB[LUB$V_READ_ONLY] OR .CCB[LUB$V_SCRATCH]
;13600  1399			THEN
;13700  1400			    FOR$$SIGNAL_STO (FOR$K_INCOPECLO);
;13800  1401			CCB[LUB$V_PRINT] = 1;
;13900  1402			CCB[LUB$V_DELETE] = 0;
;14000  1403			END;
;14100  1404		    [OUTRANGE]: FOR$$SIGNAL_STO (FOR$K_INVARGFOR);
;14200  1405		    TES;
;14300  1406	
;14400  1407		!+
;14500  1408		! Call procedure FOR$$CLOSE_FILE to RMS close the file.
;14600  1409		!-
;14700  1410	
;14800  1411		FOR$$CLOSE_FILE ();
;14900  1412	
;15000  1413		!+
;15100  1414		! Return the virtual memory allocated at OPEN for the record buffer.
;15200  1415		!-
;15300  1416	
;15400  1417		FOR$$FREE_VM (.CCB[LUB$W_RBUF_SIZE], .CCB[LUB$A_RBUF_ADR]);
;15500  1418	
;15600  1419		!+
;15700  1420		! Return memory allocated for resultant name string.
;15800  1421		!-
;15900  1422	
;16000  1423		FOR$$FREE_VM (.CCB[LUB$B_RSL], .CCB[LUB$A_RSN]);
;16100  1424	
;16200  1425		END;
;16300  1426	
;16400  1427	    !+
;16500  1428	    ! Pop back previous LUB or indicate that no I/O statement

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:14:40	DBB3:[RTL.SRC]FCLOSE.B32;14					Page 3-3
;
;16600  1429	    ! is currently active (OTS$$A_CUR_LUB = 0).
;16700  1430	    ! Then (after back pointer in LUB has been used for POP) 
;16800  1431	    ! deallocate LUB/ISB/RAB for this logical unit
;16900  1432	    !-
;17000  1433	
;17100  1434	    FOR$$CB_RET ();
;17200  1435	    RETURN SS$_NORMAL;		! RETURN success from FOR$CLOSE
;17300  1436	    END;			! END of FOR$CLOSE routine


							    .TITLE  FOR$CLOSE
							    .IDENT  \0-36\

							    .EXTRN  FOR$$FREE_VM, FOR$$OPECLO_ARG, FOR$$SIGNAL_STO
							    .EXTRN  FOR$$ERR_OPECLO, FOR$$CB_PUSH, FOR$$CB_RET

							    .PSECT  FOR$CODE,NOWRT,  SHR,  PIC,2

					 080C 00000 	    .ENTRY  FOR$CLOSE, Save R2,R3,R11				      ; 1264
		         53 	0000G  CF  9E 00002 	    MOVAB   FOR$$SIGNAL_STO, R3					      ;
		         5E 	       1C  C2 00007 	    SUBL2   #28, SP						      ;
				  08   AE  7C 0000A 	    CLRQ    CLOS						      ; 1317
				  10   AE  7C 0000D 	    CLRQ    CLOS						      ;
				  18   AE  D4 00010 	    CLRL    L_UNWIND_ACTION					      ;
		         6D 0000009A   EF  DE 00013 	    MOVAL   12$, (FP)						      ;
		    18   AE	       01  D0 0001A 	    MOVL    #1, L_UNWIND_ACTION					      ; 1342
				       5E  DD 0001E 	    PUSHL   SP							      ; 1351
				       03  DD 00020 	    PUSHL   #3							      ;
				  10   AE  9F 00022 	    PUSHAB  CLOS						      ;
		         7E 	       6C  9A 00025 	    MOVZBL  (AP), -(SP)						      ;
				  04   AC  9F 00028 	    PUSHAB  KEYWD						      ; 1264
		  0000G  CF	       05  FB 0002B 	    CALLS   #5, FOR$$OPECLO_ARG					      ; 1351
		         52 	  0C   AE  D0 00030 	    MOVL    CLOS+4, R2						      ; 1364
				       50  D4 00034 	    CLRL    R0							      ;
				     0000G 30 00036 	    BSBW    FOR$$CB_PUSH					      ;
		    18   AE	       02  D0 00039 	    MOVL    #2, L_UNWIND_ACTION					      ; 1365
		         52 	  FC   AB  9E 0003D 	    MOVAB   -4(CCB), R2						      ; 1371
		         68 	       62  E9 00041 	    BLBC    (R2), 11$						      ;
	   03 	         00 	  10   AE  CF 00044 	    CASEL   CLOS+8, #0, #3					      ; 1379
	 001E 	       000F 	     0046     00049 1$:     .WORD   10$-1$,-						      ;
				     0031     0004F		    2$-1$,-						      ;
								    4$-1$,-						      ;
								    7$-1$						      ;
				       30  DD 00051 	    PUSHL   #48							      ; 1404
		         63 	       01  FB 00053 	    CALLS   #1, FOR$$SIGNAL_STO					      ;
				       37  11 00056 	    BRB     10$							      ; 1379
	   05 	         62 	       05  E1 00058 2$:     BBC     #5, (R2), 3$					      ; 1384
				       2E  DD 0005C 	    PUSHL   #46							      ;
		         63 	       01  FB 0005E 	    CALLS   #1, FOR$$SIGNAL_STO					      ;
		         62 	  40   8F  8A 00061 3$:     BICB2   #64, (R2)						      ; 1385
				       0D  11 00065 	    BRB     6$							      ; 1386
	   05 	         62 	       02  E1 00067 4$:     BBC     #2, (R2), 5$					      ; 1390
				       2E  DD 0006B 	    PUSHL   #46							      ; 1392
		         63 	       01  FB 0006D 	    CALLS   #1, FOR$$SIGNAL_STO					      ;
		         62 	  40   8F  88 00070 5$:     BISB2   #64, (R2)						      ; 1393

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:14:40	DBB3:[RTL.SRC]FCLOSE.B32;14					Page 3-4
;
		         62 	  80   8F  8A 00074 6$:     BICB2   #128, (R2)						      ; 1394
				       15  11 00078 	    BRB     10$							      ; 1379
	   04 	         62 	       02  E0 0007A 7$:     BBS     #2, (R2), 8$					      ; 1398
	   05 	         62 	       05  E1 0007E 	    BBC     #5, (R2), 9$					      ;
				       2E  DD 00082 8$:     PUSHL   #46							      ; 1400
		         63 	       01  FB 00084 	    CALLS   #1, FOR$$SIGNAL_STO					      ;
		         62 	  80   8F  88 00087 9$:     BISB2   #128, (R2)						      ; 1401
		         62 	  40   8F  8A 0008B 	    BICB2   #64, (R2)						      ; 1402
		  0000V  CF	       00  FB 0008F 10$:    CALLS   #0, FOR$$CLOSE_FILE					      ; 1411
				  EC   AB  DD 00094 	    PUSHL   -20(CCB)						      ; 1417
		         7E 	  DA   AB  3C 00097 	    MOVZWL  -38(CCB), -(SP)					      ;
		  0000G  CF	       02  FB 0009B 	    CALLS   #2, FOR$$FREE_VM					      ;
				  F8   AB  DD 000A0 	    PUSHL   -8(CCB)						      ; 1423
		         7E 	  F7   AB  9A 000A3 	    MOVZBL  -9(CCB), -(SP)					      ;
		  0000G  CF	       02  FB 000A7 	    CALLS   #2, FOR$$FREE_VM					      ;
				     0000G 30 000AC 11$:    BSBW    FOR$$CB_RET						      ; 1434
		         50 	       01  D0 000AF 	    MOVL    #1, R0						      ; 1435
					   04 000B2 	    RET     							      ; 1264
					 0000 000B3 12$:    .WORD   Save nothing					      ; 1317
		         50 	  08   AC  D0 000B5 	    MOVL    8(AP), R0						      ;
		         50 	  04   A0  D0 000B9 	    MOVL    4(R0), R0						      ;
				  EC   A0  9F 000BD 	    PUSHAB  CLOS						      ;
				  FC   A0  9F 000C0 	    PUSHAB  L_UNWIND_ACTION					      ;
				       02  DD 000C3 	    PUSHL   #2							      ;
				       5E  DD 000C5 	    PUSHL   SP							      ;
		         7E 	  04   AC  7D 000C7 	    MOVQ    4(AP), -(SP)					      ;
		  0000G  CF	       03  FB 000CB 	    CALLS   #3, FOR$$ERR_OPECLO					      ;
					   04 000D0 	    RET     							      ;

; Routine Size:  209 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:14:40	DBB3:[RTL.SRC]FCLOSE.B32;14					Page 4
;
;00100  1437	GLOBAL ROUTINE FOR$$CLOSE_FILE		! FORTRAN internal file closer
;00200  1438		: CALL_CCB NOVALUE =
;00300  1439	
;00400  1440	!++
;00500  1441	! ABSTRACT:
;00600  1442	!
;00700  1443	!	Close the file pointed to by CCB with attributes
;00800  1444	!	specified in the LUB.
;00900  1445	!
;01000  1446	!--
;01100  1447	
;01200  1448	    BEGIN
;01300  1449	
;01400  1450	    EXTERNAL REGISTER
;01500  1451		CCB: REF BLOCK[, BYTE];
;01600  1452	
;01700  1453	    LOCAL
;01800  1454		NAM_BLOCK: BLOCK[NAM$C_BLN, BYTE],	! local name block for delete
;01900  1455		FAB_BLOCK: BLOCK[FAB$C_BLN, BYTE],	! allocate LOCAL FAB
;02000  1456		FAB: REF BLOCK[FAB$C_BLN, BYTE];	! declare FAB base pointer
;02100  1457	
;02200  1458		!+
;02300  1459		! Initialize FAB
;02400  1460		! Copy FAB address into the LUB for proper error status reporting.
;02500  1461		!-
;02600  1462	
;02700  1463		FAB = FAB_BLOCK;
;02800  1464		CH$FILL (0, FAB$C_BLN, .FAB);
;02900  1465		FAB[FAB$B_BID] = FAB$C_BID;
;03000  1466		FAB[FAB$B_BLN] = FAB$C_BLN;
;03100  1467		CCB[LUB$A_FAB] = .FAB;
;03200  1468	
;03300  1469		!+
;03400  1470		! If DELETE or PRINT was specified in CLOSE or OPEN, copy the directory ID
;03500  1471		! into the NAM block and link into FAB.
;03600  1472		! Set pointer to resultant name string (in case this is print
;03700  1473		! so spooler will use in banner).
;03800  1474		!-
;03900  1475	
;04000  1476		IF .CCB[LUB$V_DELETE] OR .CCB[LUB$V_PRINT]
;04100  1477		THEN
;04200  1478		    BEGIN
;04300  1479		    CH$FILL (0, NAM$C_BLN, NAM_BLOCK);
;04400  1480		    NAM_BLOCK[NAM$B_BID] = NAM$C_BID;
;04500  1481		    NAM_BLOCK[NAM$B_BLN] = NAM$C_BLN;
;04600  1482		    CH$MOVE (NAM$S_DID, CCB[LUB$W_DID], NAM_BLOCK[NAM$W_DID]);
;04700  1483		    FAB[FAB$L_NAM] = NAM_BLOCK;
;04800  1484		    FAB[FAB$V_NAM] = 1;
;04900  1485		    NAM_BLOCK[NAM$L_RSA] = .CCB[LUB$A_RSN];
;05000  1486		    NAM_BLOCK[NAM$B_RSL] = .CCB[LUB$B_RSL];
;05100  1487	
;05200  1488		    !+
;05300  1489		    ! If V_DELETE is on in the LUB, set the DLT bit in the FAB.
;05400  1490		    !-
;05500  1491	

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:14:40	DBB3:[RTL.SRC]FCLOSE.B32;14					Page 4-1
;
;05600  1492		    IF .CCB[LUB$V_DELETE]
;05700  1493		    THEN
;05800  1494			FAB[FAB$V_DLT] = 1;
;05900  1495	
;06000  1496		    !+
;06100  1497		    ! If V_PRINT is on in the LUB, set the SPL bit in the FAB.
;06200  1498		    !-
;06300  1499	
;06400  1500		    IF .CCB[LUB$V_PRINT]
;06500  1501		    THEN
;06600  1502			FAB[FAB$V_SPL] = 1;
;06700  1503		    END;		! End of PRINT and DELETE
;06800  1504	
;06900  1505		!+
;07000  1506		! Copy remembered RMS internal file id from LUB to FAB.
;07100  1507		! Perform CLOSE.  If error, SIGNAL_STOP FOR$CLOERR (28 = 'CLOSE ERROR')
;07200  1508		!-
;07300  1509	
;07400  1510		FAB[FAB$W_IFI] = .CCB[LUB$W_IFI];
;07500  1511		IF NOT $CLOSE(FAB=.FAB)
;07600  1512		THEN
;07700  1513		    FOR$$SIGNAL_STO (FOR$K_CLOERR);
;07800  1514	
;07900  1515		!+
;08000  1516		! Indicate that FAB error status is not meaningful anymore.
;08100  1517		!-
;08200  1518	
;08300  1519		CCB[LUB$A_FAB] = 0;
;08400  1520	
;08500  1521		RETURN;
;08600  1522		END;



							    .EXTRN  SYS$CLOSE

					 007C 000D1 	    .ENTRY  FOR$$CLOSE_FILE, Save R2,R3,R4,R5,R6		      ; 1437
		         5E 	FF78   CE  9E 000D3 	    MOVAB   -136(SP), SP					      ;
		         56 	       6E  9E 000D8 	    MOVAB   FAB_BLOCK, FAB					      ; 1463
	   00 	         6E 	       00  2C 000DB 	    MOVC5   #0, (SP), #0, #80, (FAB)				      ; 1464
		         66 	0050   8F     000DF									      ;
		         66 	5003   8F  B0 000E3 	    MOVW    #20483, (FAB)					      ; 1465
		    E8   AB	       56  D0 000E8 	    MOVL    FAB, -24(CCB)					      ; 1467
	   05 	    FC   AB	       06  E0 000EC 	    BBS     #6, -4(CCB), 1$					      ; 1476
	   39 	    FC   AB	       07  E1 000F1 	    BBC     #7, -4(CCB), 3$					      ;
	   00 	         6E 	       00  2C 000F6 1$:     MOVC5   #0, (SP), #0, #56, NAM_BLOCK			      ; 1479
		    50   AE	       38     000FA									      ;
		    50   AE	3802   8F  B0 000FD 	    MOVW    #14338, NAM_BLOCK					      ; 1480
      7A   AE	    F0   AB	       06  28 00103 	    MOVC3   #6, -16(CCB), NAM_BLOCK+42				      ; 1482
		    28   A6	  50   AE  9E 00109 	    MOVAB   NAM_BLOCK, 40(FAB)					      ; 1483
		    07   A6	       01  88 0010E 	    BISB2   #1, 7(FAB)						      ; 1484
		    54   AE	  F8   AB  D0 00112 	    MOVL    -8(CCB), NAM_BLOCK+4				      ; 1485
		    53   AE	  F7   AB  90 00117 	    MOVB    -9(CCB), NAM_BLOCK+3				      ; 1486
	   05 	    FC   AB	       06  E1 0011C 	    BBC     #6, -4(CCB), 2$					      ; 1492
		    05   A6	  80   8F  88 00121 	    BISB2   #128, 5(FAB)					      ; 1494

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:14:40	DBB3:[RTL.SRC]FCLOSE.B32;14					Page 4-2
;
	   04 	    FC   AB	       07  E1 00126 2$:     BBC     #7, -4(CCB), 3$					      ; 1500
		    05   A6	       20  88 0012B 	    BISB2   #32, 5(FAB)						      ; 1502
		    02   A6	  D8   AB  B0 0012F 3$:     MOVW    -40(CCB), 2(FAB)					      ; 1510
				       56  DD 00134 	    PUSHL   FAB							      ; 1511
	      00000000G  9F	       01  FB 00136 	    CALLS   #1, @#SYS$CLOSE					      ;
		         07 	       50  E8 0013D 	    BLBS    R0, 4$						      ;
				       1C  DD 00140 	    PUSHL   #28							      ; 1513
		  0000G  CF	       01  FB 00142 	    CALLS   #1, FOR$$SIGNAL_STO					      ;
				  E8   AB  D4 00147 4$:     CLRL    -24(CCB)						      ; 1519
					   04 0014A 	    RET     							      ; 1437

; Routine Size:  122 bytes


;08700  1523	
;08800  1524	END				! END of FOR$CLOSE module
;08900  1525	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  FOR$CODE       	   331  NOWRT,  RD ,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]STARLET.L32;1		      2688        20         0       120





; Size:		331 code + 0 data bytes
; Run Time:	00:14.0
; Elapsed Time:	00:30.2
; Memory Used:	201 pages
; Compilation Complete
