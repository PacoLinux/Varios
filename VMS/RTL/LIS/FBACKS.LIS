
; Bliss-32 10.1-416	Monday 21-AUG-1978 19:13:42	DBB3:[RTL.SRC]FBACKS.B32;11					Page 1
;
;00100  0001	MODULE FOR$BACKSPACE (		! FORTRAN BACKSPACE statement 
;00200  0002			IDENT = '0-14'
;00300  0003			) =
;00400  0004	BEGIN
;00500  0005	
;00600  0006	!
;00700  0007	!			  COPYRIGHT (c) 1977 BY
;00800  0008	!	      DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;00900  0009	!
;01000  0010	! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
;01100  0011	! ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
;01200  0012	! INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
;01300  0013	! COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
;01400  0014	! OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
;01500  0015	! TRANSFERRED.
;01600  0016	!
;01700  0017	! THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
;01800  0018	! AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
;01900  0019	! CORPORATION.
;02000  0020	!
;02100  0021	! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
;02200  0022	! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;02300  0023	!
;02400  0024	
;02500  0025	!++
;02600  0026	! FACILITY:  FORTRAN Support Library
;02700  0027	!
;02800  0028	! ABSTRACT:
;02900  0029	!
;03000  0030	!	This module contains routine FOR$BACKSPACE (unit.rlu.v),
;03100  0031	!	which implements the FORTRAN BACKSPACE statement.
;03200  0032	!
;03300  0033	! ENVIRONMENT:  User Mode - AST re-entrant
;03400  0034	!
;03500  0035	! AUTHOR:	Jonathan M. Taylor, CREATION DATE: 17-OCT-1977
;03600  0036	!
;03700  0037	! MODIFIED BY:
;03800  0038	!
;03900  0039	! 0-1	- original JMT 17-OCT-77
;04000  0040	! 0-2	- Change call to FOR$$CB_POP not _RET! JMT 19-OCT-77
;04100  0041	! 0-3	- Use FOR$K_abcmnoxyz as EXTERNAL LITERALs.  TNH 27-Oct-77
;04200  0042	! 0-4	- Bug fix: check that file is unformatted before trying to
;04300  0043	!	  look for segmented record info.  JMT 2-Nov-77
;04400  0044	! 0-5	- Bug fix.  No error when reading ENDFILE records.  JMT 10-Nov-77
;04500  0045	! 0-6	- Use FERR not FENO.  TNH 6-Dec-77
;04600  0046	! 0-7	- Change NOSPANREC to SPANNED.  JMT 15-Dec-77
;04700  0047	! 0-9	- Global register CCB.  JMT 8-Apr-78
;04800  0048	! 0-10	- Change to STARLET library.  DGP 20-Apr-78
;04900  0049	! 0-11	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
;05000  0050	! 0-12	- Change STARLET to RTLSTARLE to avoid conflicts.  DGP 1-May-78
;05010  0051	! 0-13	- Use JSB linkage.  TNH 22-May-78
;05020  0052	! 0-14	- Pass OPEN$K_LUN_MIN to FOR$$CB_PUSH.  TNH 22-May-78
;05100  0053	!--

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:13:42	DBB3:[RTL.SRC]FBACKS.B32;11					Page 2
;
;00100  0054	!
;00200  0055	! LINKAGES:
;00300  0056	!
;00500  0057	REQUIRE 'RTLIN:FLNK';		! define all linkages
; %PRINT:	File: FLNK.B32; Version 1, edit 12, TNH 2-Aug-78
;00600  0279	
;00700  0280	!
;00800  0281	! TABLE OF CONTENTS:
;00900  0282	!
;01000  0283	
;01100  0284	FORWARD ROUTINE
;01200  0285		FOR$BACKSPACE: NOVALUE;	! FORTRAN BACKSPACE statement
;01300  0286	
;01400  0287	!
;01500  0288	! INCLUDE FILES:
;01600  0289	!
;01700  0290		REQUIRE	'RTLML:FERR';		! FORTRAN error numbers
; %PRINT:	Filename: FERR.MDL! Version 0, edit 36, TNH 19-June-78
;01800  0408		REQUIRE 'RTLML:FISB';		! Define ISB offsets
; %PRINT:	File: FISB.MDL which produces FISB.B32! Version 1, EDIT 16, DGP 02-Jun-78
;01900  0617		REQUIRE 'RTLML:FLUB';		! Define LUB offsets
; %PRINT:	File: FLUB.MDL which produces FLUB.B32! Version 0, edit 30, TNH, 17-June-78
;02000  0785		REQUIRE 'RTLIN:FMAC';		! Define macros
; %PRINT:	Filename: FMAC.B32; Version 1, edit 29, TNH, 7-JUN-78
; %PRINT:	 REQUIRE FILE: LPSECT.B32, VERSION 01-5, TNH, 27-Jun-78
;02010  0965		REQUIRE 'RTLIN:FOPN';		! Define min. lun
; %PRINT:	Filename: FOPN.B32; version 0, edit 22, TNH, 30-May-78
;02100  1104		REQUIRE 'RTLML:FPAR';		! Inter-module parameters
; %PRINT:	File: FPAR.MDL! version 0, edit 11, TNH, 30-May-78
;02300  1206		LIBRARY 'RTLSTARLE';	! STARLET library for macros and symbols
;02400  1207	!
;02500  1208	! MACROS:
;02600  1209	!
;02700  1210	
;02800  1211	!
;02900  1212	! EQUATED SYMBOLS:
;03000  1213	!
;03100  1214	
;03200  1215	!
;03300  1216	! PSECT DECLARATIONS:
;03400  1217	!
;03500  1218	
;03600  1219		DECLARE_PSECTS (FOR);		! declare PSECTs for FOR$ facility
;03700  1220	
;03800  1221	!
;03900  1222	! OWN STORAGE:
;04000  1223	!
;04100  1224	
;04200  1225	!
;04300  1226	! EXTERNAL REFERENCES:
;04400  1227	!
;04500  1228	EXTERNAL ROUTINE
;04600  1229		FOR$$SIGNAL_STO: NOVALUE,		! convert error number and SIGNAL
;04700  1230		FOR$$CB_PUSH: JSB_CB_PUSH NOVALUE,		! Create LUB/ISB/RAB if needed
;04800  1231		FOR$$CB_POP: JSB_CB_POP NOVALUE,		! Return I/O system to previous state

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:13:42	DBB3:[RTL.SRC]FBACKS.B32;11					Page 2-1
;
;04900  1232		FOR$$ERR_OPECLO;		! Condition handler

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:13:42	DBB3:[RTL.SRC]FBACKS.B32;11					Page 3
;
;00100  1233	GLOBAL ROUTINE FOR$BACKSPACE (		! FORTRAN BACKSPACE statement 
;00200  1234		UNIT)
;00300  1235		: NOVALUE =
;00400  1236	!++
;00500  1237	! FUNCTIONAL DESCRIPTION:
;00600  1238	!
;00700  1239	!
;00800  1240	! FORMAL PARAMETERS:
;00900  1241	!
;01000  1242	!	UNIT.rl.v		logical unit to perform backspace
;01100  1243	!
;01200  1244	! IMPLICIT INPUTS:
;01300  1245	!
;01400  1246	!	NONE
;01500  1247	!
;01600  1248	! IMPLICIT OUTPUTS:
;01700  1249	!
;01800  1250	!	NONE
;01900  1251	!
;02000  1252	! ROUTINE VALUE:
;02100  1253	! COMPLETION CODES:
;02200  1254	!
;02300  1255	!	NONE
;02400  1256	!
;02500  1257	! SIDE EFFECTS:
;02600  1258	!
;02700  1259	!	SIGNAL_STOPs FOR$_BACERR if RMS REWIND error or RMS $GET error.
;02800  1260	!
;02900  1261	!--
;03000  1262	
;03100  1263	    BEGIN
;03200  1264	
;03300  1265	    GLOBAL REGISTER
;03400  1266		CCB = 11: REF BLOCK[, BYTE];
;03500  1267	
;03600  1268	    LOCAL
;03700  1269		L_UNWIND_ACTION: VOLATILE;	! UNWIND action code for FOR$$ERR_OPECLO
;03800  1270						! LUB base pointer
;03900  1271	
;04000  1272	    ENABLE
;04100  1273		FOR$$ERR_OPECLO (L_UNWIND_ACTION);
;04200  1274						! LUB cleanup with no END or ERR=
;04300  1275	
;04400  1276	    !+
;04500  1277	    ! Unwind action is NO-OP (no LUB to pop).
;04600  1278	    !-
;04700  1279	
;04800  1280	    L_UNWIND_ACTION = FOR$K_UNWINDNOP;
;04900  1281	
;05000  1282	    !-
;05100  1283	    ! Get a LUB for this logical unit.
;05200  1284	    ! On return, CCB points to the current control block.
;05300  1285	    !-
;05400  1286	
;05500  1287	    FOR$$CB_PUSH (.UNIT, OPEN$K_LUN_MIN);

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:13:42	DBB3:[RTL.SRC]FBACKS.B32;11					Page 3-1
;
;05600  1288	
;05700  1289	    !+
;05800  1290	    ! Unwind action (in case error occurs) is to pop the LUB/RAB/ISB.
;05900  1291	    !-
;06000  1292	
;06100  1293	    L_UNWIND_ACTION = FOR$K_UNWINDPOP;
;06200  1294	
;06300  1295	    !+
;06400  1296	    ! Check the LUB.  IF file not open or it's open for
;06500  1297	    ! direct access, then BACKSPACE is a no-op.
;06600  1298	    !-
;06700  1299	
;06800  1300	    IF .CCB[LUB$V_OPENED] AND .CCB[LUB$V_DIRECT] EQL 0
;06900  1301	    THEN
;07000  1302		BEGIN
;07100  1303	
;07200  1304		!+
;07300  1305		! If the file was opened for APPEND (ACCESS='APPEND') then fail.
;07400  1306		! If RMS can't rewind the file then fail.
;07500  1307		!-
;07600  1308	
;07700  1309		IF .CCB[LUB$V_APPEND] OR NOT $REWIND (RAB=.CCB)
;07800  1310		THEN
;07900  1311		    FOR$$SIGNAL_STO (FOR$K_BACERR);
;08000  1312	
;08100  1313		!+
;08200  1314		! Now read records until we're positioned one record before
;08300  1315		! the last record read.
;08400  1316		!-
;08500  1317	
;08600  1318		IF .CCB[LUB$L_LOG_RECNO] GTRU 1	! i.e. we're sitting somewhere in the file
;08700  1319		THEN
;08800  1320		    BEGIN
;08900  1321		    LOCAL I;			! local temp for counting
;09000  1322	
;09100  1323		    I = .CCB[LUB$L_LOG_RECNO] - 1;	! Point to previous record
;09200  1324		    CCB[LUB$L_LOG_RECNO] = 1;
;09300  1325	
;09400  1326		    WHILE .CCB[LUB$L_LOG_RECNO] LSSU .I
;09500  1327		    DO
;09600  1328			BEGIN
;09700  1329	
;09800  1330			!+
;09900  1331			! Call RMS to get next record.
;10000  1332			!-
;10100  1333	
;10200  1334			IF NOT $GET (RAB = .CCB)
;10300  1335			THEN
;10400  1336			    FOR$$SIGNAL_STO (FOR$K_BACERR);
;10500  1337	
;10600  1338			!+
;10700  1339			! If segmented record control, check the validity
;10800  1340			! of the records and for end-of-file.  Read the
;10900  1341			! following segments of the segmented record until
;11000  1342			! last record control info is seen.

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:13:42	DBB3:[RTL.SRC]FBACKS.B32;11					Page 3-2
;
;11100  1343			!-
;11200  1344	
;11300  1345			IF .CCB[LUB$V_UNFORMAT] AND .CCB[LUB$V_SEGMENTED]
;11400  1346			THEN
;11500  1347			    UNTIL
;11600  1348				BEGIN
;11700  1349				IF .CCB[RAB$W_RSZ] EQL 0 OR
;11800  1350				    (.CCB[RAB$W_RSZ] GEQU 2 AND .(.CCB[RAB$L_RBF])<2,14> NEQ 0)
;11900  1351				THEN
;12000  1352				    FOR$$SIGNAL_STO (FOR$K_BACERR);
;12100  1353	
;12200  1354				.(.CCB[RAB$L_RBF])<1,1>
;12300  1355				END
;12400  1356			    DO
;12500  1357				IF NOT $GET (RAB = .CCB)
;12600  1358				THEN
;12700  1359				    FOR$$SIGNAL_STO (FOR$K_BACERR);
;12800  1360	
;12900  1361			CCB[LUB$L_LOG_RECNO] = .CCB[LUB$L_LOG_RECNO] + 1;
;13000  1362			END;
;13100  1363		    END;
;13200  1364		END;
;13300  1365	
;13400  1366	    !+
;13500  1367	    ! Return I/O system to previous state.
;13600  1368	    !-
;13700  1369	
;13800  1370	    FOR$$CB_POP ();
;13900  1371	
;14000  1372	    RETURN;
;14100  1373	    END;


							    .TITLE  FOR$BACKSPACE
							    .IDENT  \0-14\

							    .EXTRN  FOR$$SIGNAL_STO, FOR$$CB_PUSH, FOR$$CB_POP, FOR$$ERR_OPECLO
							    .EXTRN  SYS$REWIND, SYS$GET

							    .PSECT  FOR$CODE,NOWRT,  SHR,  PIC,2

					 087C 00000 	    .ENTRY  FOR$BACKSPACE, Save R2,R3,R4,R5,R6,R11		      ; 1233
		         56 00000000G  9F  9E 00002 	    MOVAB   @#SYS$GET, R6					      ;
		         55 	0000G  CF  9E 00009 	    MOVAB   FOR$$SIGNAL_STO, R5					      ;
				       7E  D4 0000E 	    CLRL    L_UNWIND_ACTION					      ; 1263
		         6D 00000096   EF  DE 00010 	    MOVAL   10$, (FP)						      ;
		         6E 	       01  D0 00017 	    MOVL    #1, L_UNWIND_ACTION					      ; 1280
		         52 	  04   AC  D0 0001A 	    MOVL    UNIT, R2						      ; 1287
				       50  D4 0001E 	    CLRL    R0							      ;
				     0000G 30 00020 	    BSBW    FOR$$CB_PUSH					      ;
				       6E  D4 00023 	    CLRL    L_UNWIND_ACTION					      ; 1293
		         53 	  FC   AB  9E 00025 	    MOVAB   -4(CCB), R3						      ; 1300
		         7C 	       63  E9 00029 	    BLBC    (R3), 9$						      ;
	   78 	         63 	       04  E0 0002C 	    BBS     #4, (R3), 9$					      ;
	   0C 	         63 	       0D  E0 00030 	    BBS     #13, (R3), 1$					      ; 1309

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:13:42	DBB3:[RTL.SRC]FBACKS.B32;11					Page 3-3
;
				       5B  DD 00034 	    PUSHL   CCB							      ;
	      00000000G  9F	       01  FB 00036 	    CALLS   #1, @#SYS$REWIND					      ;
		         05 	       50  E8 0003D 	    BLBS    R0, 2$						      ;
				       17  DD 00040 1$:     PUSHL   #23							      ; 1311
		         65 	       01  FB 00042 	    CALLS   #1, FOR$$SIGNAL_STO					      ;
		         01 	  E0   AB  D1 00045 2$:     CMPL    -32(CCB), #1					      ; 1318
				       5D  1B 00049 	    BLEQU   9$							      ;
	   54 	    E0   AB	       01  C3 0004B 	    SUBL3   #1, -32(CCB), I					      ; 1323
		    E0   AB	       01  D0 00050 	    MOVL    #1, -32(CCB)					      ; 1324
		         54 	  E0   AB  D1 00054 3$:     CMPL    -32(CCB), I						      ; 1326
				       4E  1E 00058 	    BGEQU   9$							      ;
				       5B  DD 0005A 	    PUSHL   CCB							      ; 1334
		         66 	       01  FB 0005C 	    CALLS   #1, SYS$GET						      ;
		         05 	       50  E8 0005F 	    BLBS    R0, 4$						      ;
				       17  DD 00062 	    PUSHL   #23							      ; 1336
		         65 	       01  FB 00064 	    CALLS   #1, FOR$$SIGNAL_STO					      ;
	   38 	         63 	       09  E1 00067 4$:     BBC     #9, (R3), 8$					      ; 1345
	   34 	         63 	       0B  E1 0006B 	    BBC     #11, (R3), 8$					      ;
		         52 	  28   AB  9E 0006F 	    MOVAB   40(R11), R2						      ; 1350
		         52 	  28   AB  9E 00073 	    MOVAB   40(R11), R2						      ; 1354
				  22   AB  B5 00077 5$:     TSTW    34(CCB)						      ; 1349
				       0E  13 0007A 	    BEQL    6$							      ;
		         02 	  22   AB  B1 0007C 	    CMPW    34(CCB), #2						      ; 1350
				       0D  1F 00080 	    BLSSU   7$							      ;
		  FFFC   8F	  00   B2  B3 00082 	    BITW    @0(R2), #65532					      ;
				       05  13 00088 	    BEQL    7$							      ;
				       17  DD 0008A 6$:     PUSHL   #23							      ; 1352
		         65 	       01  FB 0008C 	    CALLS   #1, FOR$$SIGNAL_STO					      ;
	   0F 	    00   B2	       01  E0 0008F 7$:     BBS     #1, @0(R2), 8$					      ; 1354
				       5B  DD 00094 	    PUSHL   CCB							      ; 1357
		         66 	       01  FB 00096 	    CALLS   #1, SYS$GET						      ;
		         DB 	       50  E8 00099 	    BLBS    R0, 5$						      ;
				       17  DD 0009C 	    PUSHL   #23							      ; 1359
		         65 	       01  FB 0009E 	    CALLS   #1, FOR$$SIGNAL_STO					      ;
				       D4  11 000A1 	    BRB     5$							      ; 1347
				  E0   AB  D6 000A3 8$:     INCL    -32(CCB)						      ; 1361
				       AC  11 000A6 	    BRB     3$							      ; 1326
				     0000G 30 000A8 9$:     BSBW    FOR$$CB_POP						      ; 1370
					   04 000AB 	    RET     							      ; 1233
					 0000 000AC 10$:    .WORD   Save nothing					      ; 1263
		         50 	  08   AC  D0 000AE 	    MOVL    8(AP), R0						      ;
		         50 	  04   A0  D0 000B2 	    MOVL    4(R0), R0						      ;
				  FC   A0  9F 000B6 	    PUSHAB  L_UNWIND_ACTION					      ;
				       01  DD 000B9 	    PUSHL   #1							      ;
				       5E  DD 000BB 	    PUSHL   SP							      ;
		         7E 	  04   AC  7D 000BD 	    MOVQ    4(AP), -(SP)					      ;
		  0000G  CF	       03  FB 000C1 	    CALLS   #3, FOR$$ERR_OPECLO					      ;
					   04 000C6 	    RET     							      ;

; Routine Size:  199 bytes


;14200  1374	
;14300  1375	END
;14400  1376	ELUDOM

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:13:42	DBB3:[RTL.SRC]FBACKS.B32;11					Page 3-4
;






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  FOR$CODE       	   199  NOWRT,  RD ,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]STARLET.L32;1		      2688         5         0       111





; Size:		199 code + 0 data bytes
; Run Time:	00:11.0
; Elapsed Time:	00:26.0
; Memory Used:	203 pages
; Compilation Complete
