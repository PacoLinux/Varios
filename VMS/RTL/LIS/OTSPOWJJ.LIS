OTS$POWJJ       - INTEGER*4 ** INTEGER*4 power routine           21-AUG-1978 19:10:11   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (2)      92  HISTORY		; Detailed Current Edit History
   (3)     102  DECLARATIONS
   (4)     136  OTS$POWJJ - longword to power longword giving l
OTS$POWJJ       - INTEGER*4 ** INTEGER*4 power routine           21-AUG-1978 19:10:11   VAX-11 MACRO X0.3-11               Page   1
0-11                                                                                                                             (1)

                                     0000     1 	.TITLE	OTS$POWJJ - INTEGER*4 ** INTEGER*4 power routine
                                     0000     2 	.IDENT	/0-11/		; File OTSPOWJJ.MAR
                                     0000     3 
                                     0000     4 ;
                                     0000     5 ; Copyright (C) 1977
                                     0000     6 ; Digital Equipment Corporation, Maynard, Massachusetts 01754
                                     0000     7 ;
                                     0000     8 ; This software is furnished under a license for use only on a single
                                     0000     9 ; computer  system  and  may be copied only with the inclusion of the
                                     0000    10 ; above copyright notice. This software, or any other copies thereof,
                                     0000    11 ; may not be provided or otherwise made available to any other person
                                     0000    12 ; except for use on such system and to one who agree to these license 
                                     0000    13 ; terms.  Title to  and  ownership of the software shall at all times 
                                     0000    14 ; remain in DEC.
                                     0000    15 ;
                                     0000    16 ; The information in the software is subject to change without notice
                                     0000    17 ; and should  not  be construed  as a commitment by Digital Equipment 
                                     0000    18 ; Corporation.
                                     0000    19 ;
                                     0000    20 ; DEC assumes  no  responsibility  for the use or  reliability of its
                                     0000    21 ; software on equipment which is not supplied by DEC.
                                     0000    22 ;
                                     0000    23 ;
                                     0000    24 ; FACILITY: Language support library - user callable
                                     0000    25 ;++
                                     0000    26 ; ABSTRACT:
                                     0000    27 ;
                                     0000    28 ;	Integer longword base to integer longword power.
                                     0000    29 ;	Integer overflow can occur if the result exceeds a longword.
                                     0000    30 ;	Undefined exponentation can occur if base is 0 and power is 0 or negative.
                                     0000    31 ;
                                     0000    32 ;
                                     0000    33 ;--
                                     0000    34 ;
                                     0000    35 ; VERSION: 0
                                     0000    36 ;
                                     0000    37 ; HISTORY:
                                     0000    38 ; AUTHOR:
                                     0000    39 ;	Thomas N. Hastings, 5-May-77: Version 0
                                     0000    40 ;
                                     0000    41 ; MODIFIED BY: SUSAN HUBBARD AZIBERT
                                     0000    42 ;
                                     0000    43 ;
                                     0000    44 ;
OTS$POWJJ       - INTEGER*4 ** INTEGER*4 power routine           21-AUG-1978 19:10:11   VAX-11 MACRO X0.3-11               Page   2
0-11            HISTORY  ; Detailed Current Edit History                                                                         (2)

                                     0000    46 	.SBTTL	HISTORY		; Detailed Current Edit History
                                     0000    47 
                                     0000    48 
                                     0000    49 ; Edit History for Version 01 of OTS$POWJJ
                                     0000    50 ; version 04 - changed module name to forpowJJ
                                     0000    51 ; version 06 - changed error routine from MTH$ERROR to MTH$$ERROR
                                     0000    52 ; version 07 - removed W^ on call to MTH$$ERROR, save code with MOVZBL.
                                     0000    53 ; version 08 - change MTH$$ERROR to MTH$$SIGNAL - JMT
                                     0000    54 ; 0-11	- fix case instruction bug.  JMT 28-Feb-78
OTS$POWJJ       - INTEGER*4 ** INTEGER*4 power routine           21-AUG-1978 19:10:11   VAX-11 MACRO X0.3-11               Page   3
0-11            DECLARATIONS                                                                                                     (3)

                                     0000    56 	.SBTTL	DECLARATIONS
                                     0000    57 
                                     0000    58 ;
                                     0000    59 ; INCLUDE FILES:
                                     0000    60 ;
                                     0000    61 
                                     0000    62 ;	oerr.mar			; OTS error codes
                                     0000    63 ;
                                     0000    64 ; EXTERNAL SYMBOLS:
                                     0000    65 ;
                                     0000    66 
                                     0000    67 	.GLOBL MTH$$SIGNAL		; Math error routine
                                     0000    68 ;
                                     0000    69 ; MACROS:
                                     0000    70 ;
                                     0000    71 
                                     0000    72 ;
                                     0000    73 ; EQUATED SYMBOLS:
                                     0000    74 ;
                           00000004  0000    75 	base = 4			; base input formal - by-value
                           00000008  0000    76 	exp = 8				; exponent intpu formal - by-value
                                     0000    77 
                                     0000    78 ;
                                     0000    79 ; OWN STORAGE:
                                     0000    80 ;
                                     0000    81 
                                     0000    82 ;
                                     0000    83 ; PSECT DECLARATIONS:
                                     0000    84 ;
                                     0000    85 
                                 00000000    86 	.PSECT	OTS$CODE PIC,SHR,LONG,EXE,NOWRT
                                     0000    87 					; program section for OTS$ code
                                     0000    88 
OTS$POWJJ       - INTEGER*4 ** INTEGER*4 power routine           21-AUG-1978 19:10:11   VAX-11 MACRO X0.3-11               Page   4
0-11            OTS$POWJJ - longword to power longword giving l                                                                  (4)

                                     0000    90 	.SBTTL	OTS$POWJJ - longword to power longword giving longword result
                                     0000    91 
                                     0000    92 ;++
                                     0000    93 ; FUNCTIONAL DESCRIPTION:
                                     0000    94 ;
                                     0000    95 ;	Signed longword result = signed longword base ** signed longword exponent
                                     0000    96 ;	The signed longword result is given by:
                                     0000    97 ;
                                     0000    98 ;	base	exponent	result
                                     0000    99 ;
                                     0000   100 ;	any	> 0		product (base * 2**i) where i is each
                                     0000   101 ;				non-zero bit position in exponent
                                     0000   102 ;
                                     0000   103 ;	> 0	= 0		1
                                     0000   104 ;	= 0	= 0		Undefined exponentation
                                     0000   105 ;	< 0	= 0		1
                                     0000   106 ;
                                     0000   107 ;	> 1	< 0		0
                                     0000   108 ;	= 1	< 0	 	1
                                     0000   109 ;	= 0	< 0		Undefined exponentation
                                     0000   110 ;	= -1	< 0 and even	1
                                     0000   111 ;	= -1	< 0 and odd	-1
                                     0000   112 ;	< -1	< 0		1
                                     0000   113 ;
                                     0000   114 ;	Integer overflow can occur.
                                     0000   115 ;	Undefined exponentiation occurs if base is 0 and 
                                     0000   116 ;	exponent is 0 or negative.
                                     0000   117 ;
                                     0000   118 ; CALLING SEQUENCE:
                                     0000   119 ;
                                     0000   120 ;	Power.ww.v = OTSS$POWJJ (base.rw.v,  exponent.rw.v)
                                     0000   121 ;
                                     0000   122 ; INPUT PARAMETERS:
                                     0000   123 ;	NONE
                                     0000   124 ;
                                     0000   125 ; IMPLICIT INPUTS:
                                     0000   126 ;	NONE
                                     0000   127 ;
                                     0000   128 ; OUTPUT PARAMETERS:
                                     0000   129 ;	NONE
                                     0000   130 ;
                                     0000   131 ; IMPLICIT OUTPUTS:
                                     0000   132 ;	NONE
                                     0000   133 ;
                                     0000   134 ; FUNCTION VALUE:
                                     0000   135 ;
                                     0000   136 ;	longword integer base ** exponent
                                     0000   137 ;
                                     0000   138 ; SIDE EFFECTS:
                                     0000   139 ;
                                     0000   140 ;	SIGNALs SS$_ARITH with integer overflow hardware code if
                                     0000   141 ;	integer overflow.
                                     0000   142 ;	SIGNALs MTH$_UNDEXP (82 = ' UNDEFINED EXPONENTATION') if
                                     0000   143 ;	base is 0 and exponent is 0 or negative.
                                     0000   144 ;
                                     0000   145 ;--
                                     0000   146 
OTS$POWJJ       - INTEGER*4 ** INTEGER*4 power routine           21-AUG-1978 19:10:11   VAX-11 MACRO X0.3-11               Page   5
0-11            OTS$POWJJ - longword to power longword giving l                                                                  (4)

                                     0000   147 
                                     0000   148 
                               4004' 0000   149 	.ENTRY OTS$POWJJ, ^M<IV, R2>	; enable integer overflow
            50            01     D0  0002   150 	MOVL	#1, R0			; R0 = initial result
            52         08 AC     D0  0005   151 	MOVL	exp(AP), R2		; R2 = exponent
                          1D     15  0009   152 	BLEQ	EXPLEQ			; branch if exponent =< 0
                                     000B   153 
                                     000B   154 ;+
                                     000B   155 ; Exponent > 0.
                                     000B   156 ; Scan each exponent bit from right, squaring base each time thru loop.
                                     000B   157 ; For each 1-bit in exponent, multiply current base into partial result.
                                     000B   158 ;-
                                     000B   159 
            51         04 AC     D0  000B   160 	MOVL	base(AP), R1		; R1 = base
            0B            52     E8  000F   161 	BLBS	R2, PARTIAL		; branch if exponent is odd
            52         FF 8F     78  0012   162 SQUAR:	ASHL	#-1, R2, R2		; R2 = exponent/2
                          52         0016       
            51            51     C4  0017   163 SQUAR1:	MULL	R1, R1			; R1 = current power of base
                                     001A   164 					; integer overflow will trap
                                     001A   165 					; and SIGNAL SS$_ARITH
            F5            52     E9  001A   166 	BLBC	R2, SQUAR		; loop if next bit in exponent is 0
                                     001D   167 PARTIAL:				; next bit in exponent is a 1
            50            51     C4  001D   168 	MULL	R1, R0			; R0 = new partial result
                                     0020   169 					; integer overflow will trap
                                     0020   170 					; and SIGNAL SS$_ARITH
            52         FF 8F     78  0020   171 	ASHL	#-1, R2, R2		; R2 = exponent/2
                          52         0024       
                          F0     12  0025   172 	BNEQ	SQUAR1			; loop if more exponent bits are 1
                                 04  0027   173 	RET				; return, R0<15:0> = base ** exp
                                     0028   174 					; R0<31:16> = 0
                                     0028   175 
                                     0028   176 ;+
                                     0028   177 ; Exponent is =< 0.
                                     0028   178 ;-
                                     0028   179 
                          08     19  0028   180 EXPLEQ:	BLSS	EXPLSS			; branch if exponent < 0
                                     002A   181 
                                     002A   182 ;+
                                     002A   183 ; Exponent is = 0.
                                     002A   184 ; Undefined exponentation if base = 0 too, else return 1
                                     002A   185 ;-
                                     002A   186 
            51         04 AC     D0  002A   187 	MOVL	base(AP), R1		; R1 = base
                          1B     13  002E   188 	BEQL	UNDEFINED		; undefined if base = 0 too
                          18     11  0030   189 	BRB	POWJJX			; return with result = 1
                                     0032   190 					; since base ** 0 = 1
                                     0032   191 
                                     0032   192 ;+
                                     0032   193 ; exponent =< 0.
                                     0032   194 ; Result is given by the following table:
                                     0032   195 ;
                                     0032   196 ;	Base	Result
                                     0032   197 ;	<-1	0
                                     0032   198 ;	-1	1 or -1 depending on exponent being even or odd
                                     0032   199 ;	0	Undefined exponentation
                                     0032   200 ;	1	1
                                     0032   201 ;	>1	0
OTS$POWJJ       - INTEGER*4 ** INTEGER*4 power routine           21-AUG-1978 19:10:11   VAX-11 MACRO X0.3-11               Page   6
0-11            OTS$POWJJ - longword to power longword giving l                                                                  (4)

                                     0032   202 ;-
                                     0032   203 
                                     0032   204 EXPLSS:
   FFFFFFFF 8F         04 AC     CF  0032   205 	CASEL	base(AP), #-1, #2	; Case on value of base
                          02         003A       
                               0009' 003B   206 10$:	.WORD	MINUS1-10$		; [-1]: return R0 = -1 or 1 depending
                                     003D   207 					; on exponent being odd or even
                               0010' 003D   208 	.WORD	UNDEFINED-10$		; [0]: Undefined exponentation
                               000F' 003F   209 	.WORD	POWJJX-10$		; [+1]: return R0 = 1
                          50     D4  0041   210 	CLRL	R0			; [< -1 or > +1]: return R0 = 0
                                 04  0043   211 	RET
                                     0044   212 
            03            52     E9  0044   213 MINUS1:	BLBC	R2, POWJJX		; if exponent is even, return R0 = 1
            50            01     CE  0047   214 	MNEGL	#1, R0			; else return R0 = -1
                                 04  004A   215 POWJJX:	RET				; return
                                     004B   216 
                                     004B   217 ;+
                                     004B   218 ; Undefined exponentation error - 0**0 or 0**(-n)
                                     004B   219 ;-
                                     004B   220 
                                     004B   221 UNDEFINED:
                          50     D4  004B   222 	CLRL	R0			; if error, return result = 0
            7E         52 8F     9A  004D   223 	MOVZBL	#MTH__UNDEXP, -(SP)	; FORTRAN error #
   00000000'EF            01     FB  0051   224 	CALLS	#1, MTH$$SIGNAL		; convert to 32-bit condition code
                                     0058   225 					; and SIGNAL MTH$_UNDEXP
                                     0058   226 					; Note: 2nd arg not needed since no
                                     0058   227 					; JSB OTS$POWRJ is possible.
                                 04  0058   228 	RET
                                     0059   229 
                                     0059   230 
                                     0059   231 	.END
OTS$POWJJ       - INTEGER*4 ** INTEGER*4 power routine           21-AUG-1978 19:10:11   VAX-11 MACRO X0.3-11               Page   7
SYMBOL TABLE                                                                                                                     (4)

BASE           = 00000004            
EXP            = 00000008            
EXPLEQ           00000028 R     02   
EXPLSS           00000032 R     02   
FOR$K_ERR_PREFX= 00000018            
MINUS1           00000044 R     02   
MTH$$SIGNAL      ********  GX   01   
MTH$K_ERR_PREFX= 00000016            
MTH__FLOOVEMAT = 00000058            
MTH__FLOUNDMAT = 00000059            
MTH__INVARG    = 00000051            
MTH__LOGZERNEG = 00000053            
MTH__SINSIGLOS = 00000057            
MTH__SQUROONEG = 00000054            
MTH__UNDEXP    = 00000052            
MTH__WRONUMARG = 00000050            
OTS$POWJJ        00000000 RG    02   
PARTIAL          0000001D R     02   
POWJJX           0000004A R     02   
SQUAR            00000012 R     02   
SQUAR1           00000017 R     02   
UNDEFINED        0000004B R     02   


PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
OTS$CODE         00000059      02       PIC   USR   CON   REL   LCL   SHR   EXE   RD  NOWRT LONG  


THERE WERE NO ERRORS OR WARNINGS.
27862. BYTES LEFT IN FREE MEMORY POOL.
OBJ$:OTSPOWJJ,LIS$:OTSPOWJJ/-SP=LIB$:S/ML,SRC$:P,OTSPOWJJ
0 MLB DIR RDS - 0 GETS TO DEFINE 0 MACROS. 2 INTER. FILE WRITES. 
