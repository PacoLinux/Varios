FOR$FORCNVII    ; FORTRAN INTEGER INPUT CONVERSION ROUTINE       21-AUG-1978 18:53:55   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (2)      97  HISTORY		; Detailed Current Edit History
   (3)     113  DECLARATIONS
   (4)     192  FOR$CNVN_IN_L		; L format input conversion rout
   (5)     247  FOR$CNV_IN_O		; O format input conversion routi
   (6)     293  FOR$CNV_IN_Z		; H format input conversion routi
   (7)     339  FOR$CNV_IN_I		; I format input conversion routi
   (8)     383  FCNVII_COMMON		; common routine for FCNVII
FOR$FORCNVII    ; FORTRAN INTEGER INPUT CONVERSION ROUTINE       21-AUG-1978 18:53:55   VAX-11 MACRO X0.3-11               Page   1
01-8                                                                                                                             (1)

                                     0000     1 	.TITLE	FOR$FORCNVII	; FORTRAN INTEGER INPUT CONVERSION ROUTINE
                                     0000     2 	.IDENT	/01-8/		; File: FORCNVII.MAR
                                     0000     3 
                                     0000     4 ;
                                     0000     5 ; Copyright (C) 1977
                                     0000     6 ; Digital Equipment Corporation, Maynard, Massachusetts 01754
                                     0000     7 ;
                                     0000     8 ; This software is furnished under a license for use only on a single
                                     0000     9 ; computer  system  and  may be copied only with the inclusion of the
                                     0000    10 ; above copyright notice. This software, or any other copies thereof,
                                     0000    11 ; may not be provided or otherwise made available to any other person
                                     0000    12 ; except for use on such system and to one who agree to these license 
                                     0000    13 ; terms.  Title to  and  ownership of the software shall at all times 
                                     0000    14 ; remain in DEC.
                                     0000    15 ;
                                     0000    16 ; The information in the software is subject to change without notice
                                     0000    17 ; and should  not  be construed  as a commitment by Digital Equipment 
                                     0000    18 ; Corporation.
                                     0000    19 ;
                                     0000    20 ; DEC assumes  no  responsibility  for the use or  reliability of its
                                     0000    21 ; software on equipment which is not supplied by DEC.
                                     0000    22 ;
                                     0000    23 ;
                                     0000    24 ; FACILITY: FORTRAN LIBRARY
                                     0000    25 ;++
                                     0000    26 ; ABSTRACT:
                                     0000    27 ;
                                     0000    28 ; Procedures to perform Fortran Iw, Lw, Ow and Hw formatted input conversion.
                                     0000    29 ; FOR$CNV_IN_I, FOR$CNV_IN_L, FOR$CNV_IN_O and FOR$CNV_IN_Z are input conversion
                                     0000    30 ; routines which take a fixed length string descriptor and perform the data
                                     0000    31 ; conversion editing and transmission according to the input format specified
                                     0000    32 ; also by their arguments. The result returned is a longword value passed as
                                     0000    33 ; a parameter. The call is standard call by reference. If an error occurs,
                                     0000    34 ; FOR$_INPCONERR is returned.
                                     0000    35 ;
                                     0000    36 ;--
                                     0000    37 ;
                                     0000    38 ; VERSION: 01
                                     0000    39 ;
                                     0000    40 ; HISTORY:
                                     0000    41 ;
                                     0000    42 ; AUTHOR:
                                     0000    43 ;	Peter Yuo, 9-May-77: Version 01
                                     0000    44 ;
                                     0000    45 ; MODIFIED BY:
                                     0000    46 ;
                                     0000    47 ; 01-3	Peter Yuo, 27-May-77
                                     0000    48 ;
                                     0000    49 ;
FOR$FORCNVII    ; FORTRAN INTEGER INPUT CONVERSION ROUTINE       21-AUG-1978 18:53:55   VAX-11 MACRO X0.3-11               Page   2
01-8            HISTORY  ; Detailed Current Edit History                                                                         (2)

                                     0000    51 	.SBTTL	HISTORY		; Detailed Current Edit History
                                     0000    52 
                                     0000    53 
                                     0000    54 ; Edit History for Version 01 of FOR$FCNVII
                                     0000    55 ;
                                     0000    56 ; 01-3	Peter Yuo, 27-May-77
                                     0000    57 
                                     0000    58 ; 01-4	P. Yuo, 26-Aug-77
                                     0000    59 ;	All blanks field for L-format input will return "T" instead
                                     0000    60 ;	of error
                                     0000    61 ; 01-5	Fix above mentioned code to return "F" for all blanks!  JMT 27-Jan-78
                                     0000    62 ; 01-6	Return SS$_NORMAL and FOR$INPCONERR instead of 1 and 0.
                                     0000    63 ;	JMT 30-Jan-78
                                     0000    64 ; 01-7	Change order of input parameters to conform to standard.  JMT 15-Feb-78
                                     0000    65 ; 01-8	Fixes for speed improvement.  JMT 27-Mar-78
FOR$FORCNVII    ; FORTRAN INTEGER INPUT CONVERSION ROUTINE       21-AUG-1978 18:53:55   VAX-11 MACRO X0.3-11               Page   3
01-8            DECLARATIONS                                                                                                     (3)

                                     0000    67 	.SBTTL	DECLARATIONS
                                     0000    68 
                                     0000    69 ;
                                     0000    70 ; INCLUDE FILES:
                                     0000    71 ;
                                     0000    72 
                                     0000    73 ;
                                     0000    74 ; EXTERNAL SYMBOLS:
                                     0000    75 ;
                                     0000    76 	.DSABL	GBL
                                     0000    77 	.EXTRN	FOR$_INPCONERR
                                     0000    78 
                                     0000    79 ;
                                     0000    80 ; MACROS:
                                     0000    81 ;
                                     0000    82 
                                     0000    83 ;
                                     0000    84 ; PSECT DECLARATIONS:
                                     0000    85 ;
                                     0000    86 
                                 00000000    87 	.PSECT	FOR$CODE	PIC, SHR, LONG, EXE, NOWRT
                                     0000    88 
                                     0000    89 
                                     0000    90 ;
                                     0000    91 ; EQUATED SYMBOLS:
                                     0000    92 ;
                                     0000    93 
                           0000407C  0000    94 	REGMASK		= ^M<IV, R2, R3, R4, R5, R6>
                                     0000    95 					; register save mask, enables integer overflow
                           00000000  0000    96 	V_NEGATIVE	= 0		; 0th bit position of flag register
                                     0000    97 
                                     0000    98 ;
                                     0000    99 ; OWN STORAGE:
                                     0000   100 ;
                                     0000   101 
                                     0000   102 TABLE:
                                 00  0000   103 	.BYTE	0			; "0"
                                 01  0001   104 	.BYTE	1			; "1"
                                 02  0002   105 	.BYTE	2			; "2"
                                 03  0003   106 	.BYTE	3			; "3"
                                 04  0004   107 	.BYTE	4			; "4"
                                 05  0005   108 	.BYTE	5			; "5"
                                 06  0006   109 	.BYTE	6			; "6"
                                 07  0007   110 	.BYTE	7			; "7"
                                 08  0008   111 	.BYTE	8			; "8"
                                 09  0009   112 	.BYTE	9			; "9"
                                 FF  000A   113 	.BYTE	-1			; illegal
                                 FF  000B   114 	.BYTE	-1			; illegal
                                 FF  000C   115 	.BYTE	-1			; illegal
                                 FF  000D   116 	.BYTE	-1			; illegal
                                 FF  000E   117 	.BYTE	-1			; illegal
                                 FF  000F   118 	.BYTE	-1			; illegal
                                 FF  0010   119 	.BYTE	-1			; illegal
                                 0A  0011   120 	.BYTE	10			; "A"
                                 0B  0012   121 	.BYTE	11			; "B"
                                 0C  0013   122 	.BYTE	12			; "C"
                                 0D  0014   123 	.BYTE	13			; "D"
FOR$FORCNVII    ; FORTRAN INTEGER INPUT CONVERSION ROUTINE       21-AUG-1978 18:53:55   VAX-11 MACRO X0.3-11               Page   4
01-8            DECLARATIONS                                                                                                     (3)

                                 0E  0015   124 	.BYTE	14			; "E"
                                 0F  0016   125 	.BYTE	15			; "F"
                                     0017   126 
                                     0017   127 ; REGISTER USAGE:
                                     0017   128 ;
                                     0017   129 ; Before scaling:
                                     0017   130 ;	R0 - W and then #CHAR_REMAINING, # of remaining bytes in input string
                                     0017   131 ;	     (not counting the current one)
                                     0017   132 ;	R1 - POINTER_TO_INPUT, address of next available byte (one beyond the
                                     0017   133 ;	     current one)
                                     0017   134 ;	R2 - radix
                                     0017   135 ;	R3 - ASCII(current_char) - ASCII("0")
                                     0017   136 ;	R4/R5 - ACC 64 bit accumulator
                                     0017   137 ;	R6 - flag register
                                     0017   138 ;
                                     0017   139 ; ABBREVIATION USED:
                                     0017   140 ;
                                     0017   141 ;	W - width of the input string
                                     0017   142 ;	ACC - 64 bit accumulator
                                     0017   143 ;	HP(ACC) - ACC[63:32], higher part of ACC, must be zero, otherwise overflow
                                     0017   144 ;
FOR$FORCNVII    ; FORTRAN INTEGER INPUT CONVERSION ROUTINE       21-AUG-1978 18:53:55   VAX-11 MACRO X0.3-11               Page   5
01-8            FOR$CNVN_IN_L  ; L format input conversion rout                                                                  (4)

                                     0017   146 	.SBTTL	FOR$CNVN_IN_L		; L format input conversion routine
                                     0017   147 ;++
                                     0017   148 ; FUNCTIONAL DESCRIPTION:
                                     0017   149 ;
                                     0017   150 ;	Perform logical input conversion.
                                     0017   151 ;
                                     0017   152 ; CALLING SEQUENCE:
                                     0017   153 ;
                                     0017   154 ;	Fits.wlc.v	= FOR$CNV_IN_L (in_str.rt.ds, value.wl.r)
                                     0017   155 ;
                                     0017   156 ;
                                     0017   157 ; INPUT PARAMETERS:
                                     0017   158 ;
                           00000004  0017   159 	in_str	= 4			; input string, in_str.rt.ds
                                     0017   160 ;
                                     0017   161 ; IMPLICIT INPUTS:
                                     0017   162 ;	NONE
                                     0017   163 ;
                                     0017   164 ; OUTPUT PARAMETERS:
                                     0017   165 ;
                           00000008  0017   166 	value	= 8			; return value, value.wl.r
                                     0017   167 ;
                                     0017   168 ; IMPLICIT OUTPUTS:
                                     0017   169 ;	NONE
                                     0017   170 ;
                                     0017   171 ; COMPLETION CODES:
                                     0017   172 ;
                                     0017   173 ;	FOR$_INPCONERR - error if illegal character in input string, zero output parameter
                                     0017   174 ;	SS$_NORMAL - success
                                     0017   175 ;
                                     0017   176 ; SIDE EFFECTS:
                                     0017   177 ;	NONE
                                     0017   178 ;
                                     0017   179 ;--
                                     0017   180 
                                     0017   181 
                                     0017   182 
                               407C' 0017   183 	.ENTRY	FOR$CNV_IN_L, REGMASK	; entry for FOR$CNV_IN_L
                                     0019   184 					; enables integer overflow
            50         04 BC     7D  0019   185 	MOVQ	@in_str(AP), R0		; R0 = width of the input string
                                     001D   186 					; R1 = address of the input string
                       08 BC     D4  001D   187 	CLRL	@value(AP)		; clear in case of error
            50            20     3B  0020   188 	SKPC	#^A/ /, R0, (R1)	; skip blanks
                          61         0023       
                                     0024   189 					; R0 = #CHAR_REMAINING
                                     0024   190 					; R1 = POINT_TO_INPUT
                                     0024   191 					; Z-bit is set if R0 = 0
                          10     13  0024   192 	BEQL	10$			; return "F" if no non-blank char
         46 8F            61     91  0026   193 	CMPB	(R1), #^A/F/		; = "F" ?
                          0A     13  002A   194 	BEQL	10$			; branch if yes
         54 8F            61     91  002C   195 	CMPB	(R1), #^A/T/		; = "T" ?
                          70     12  0030   196 	BNEQ	ERROR			; branch to ERROR if not "T" or "F"
         08 BC            01     CE  0032   197 	MNEGL	#1, @value(AP)		; result = @value(AP) = -1 for "T"
            50            01     CE  0036   198 10$:	MNEGL	#1, R0			; success return code
                                 04  0039   199 	RET				; return
FOR$FORCNVII    ; FORTRAN INTEGER INPUT CONVERSION ROUTINE       21-AUG-1978 18:53:55   VAX-11 MACRO X0.3-11               Page   6
01-8            FOR$CNV_IN_O  ; O format input conversion routi                                                                  (5)

                                     003A   201 	.SBTTL	FOR$CNV_IN_O		; O format input conversion routine
                                     003A   202 ;++
                                     003A   203 ; FUNCTIONAL DESCRIPTION:
                                     003A   204 ;
                                     003A   205 ;	Perform octal input conversion. Set radix to 8 and then
                                     003A   206 ;	call common subroutine FCNVII_COMMON to process the input string
                                     003A   207 ;
                                     003A   208 ; CALLING SEQUENCE:
                                     003A   209 ;
                                     003A   210 ;	Fits.wlc.v	= FOR$CNV_IN_O (in_str.rt.ds, value.wl.r)
                                     003A   211 ;
                                     003A   212 ;
                                     003A   213 ; INPUT PARAMETERS:
                                     003A   214 ;
                           00000004  003A   215 	in_str	= 4			; input string, in_str.rt.ds
                                     003A   216 ;
                                     003A   217 ; IMPLICIT INPUTS:
                                     003A   218 ;	NONE
                                     003A   219 ;
                                     003A   220 ; OUTPUT PARAMETERS:
                                     003A   221 ;
                           00000008  003A   222 	value	= 8			; return value, value.wl.r
                                     003A   223 ;
                                     003A   224 ; IMPLICIT OUTPUTS:
                                     003A   225 ;	NONE
                                     003A   226 ;
                                     003A   227 ; COMPLETION CODES:
                                     003A   228 ;
                                     003A   229 ;	FOR$_INPCONERR - error if illegal character in input string, zero output parameter
                                     003A   230 ;	SS$_NORMAL - success
                                     003A   231 ;
                                     003A   232 ; SIDE EFFECTS:
                                     003A   233 ;	NONE
                                     003A   234 ;
                                     003A   235 ;--
                                     003A   236 
                                     003A   237 
                                     003A   238 
                               407C' 003A   239 	.ENTRY	FOR$CNV_IN_O, REGMASK	; entry for FOR$CNV_IN_O
                                     003C   240 					; enables integer overflow
            52            08     D0  003C   241 	MOVL	#8, R2			; R2 = radix = 8
                          0C     11  003F   242 	BRB	FCNVII_COMMON		; branch to common subroutine FCNVII_COMMON
                                     0041   243 					; and return from there with result
                                     0041   244 					; in @value(AP)
                                     0041   245 
FOR$FORCNVII    ; FORTRAN INTEGER INPUT CONVERSION ROUTINE       21-AUG-1978 18:53:55   VAX-11 MACRO X0.3-11               Page   7
01-8            FOR$CNV_IN_Z  ; H format input conversion routi                                                                  (6)

                                     0041   247 	.SBTTL	FOR$CNV_IN_Z		; H format input conversion routine
                                     0041   248 ;++
                                     0041   249 ; FUNCTIONAL DESCRIPTION:
                                     0041   250 ;
                                     0041   251 ;	Perform hexidecimal input conversion. Set radix to 16 and then
                                     0041   252 ;	call common subroutine FCNVII_COMMON to process the input string
                                     0041   253 ;
                                     0041   254 ; CALLING SEQUENCE:
                                     0041   255 ;
                                     0041   256 ;	Fits.wlc.v	= FOR$CNV_IN_Z (in_str.rt.ds, value.wl.r)
                                     0041   257 ;
                                     0041   258 ;
                                     0041   259 ; INPUT PARAMETERS:
                                     0041   260 ;
                           00000004  0041   261 	in_str	= 4			; input string, in_str.rt.ds
                                     0041   262 ;
                                     0041   263 ; IMPLICIT INPUTS:
                                     0041   264 ;	NONE
                                     0041   265 ;
                                     0041   266 ; OUTPUT PARAMETERS:
                                     0041   267 ;
                           00000008  0041   268 	value	= 8			; return value, value.wl.r
                                     0041   269 ;
                                     0041   270 ; IMPLICIT OUTPUTS:
                                     0041   271 ;	NONE
                                     0041   272 ;
                                     0041   273 ; COMPLETION CODES:
                                     0041   274 ;
                                     0041   275 ;	FOR$_INPCONERR - error if illegal character in input string, zero output parameter
                                     0041   276 ;	SS$_NORMAL - success
                                     0041   277 ;
                                     0041   278 ; SIDE EFFECTS:
                                     0041   279 ;	NONE
                                     0041   280 ;
                                     0041   281 ;--
                                     0041   282 
                                     0041   283 
                                     0041   284 
                               407C' 0041   285 	.ENTRY	FOR$CNV_IN_Z, REGMASK	; entry for FOR$CNV_IN_Z
                                     0043   286 					; enables integer overflow
            52            10     D0  0043   287 	MOVL	#16, R2			; R2 = radix = 16
                          05     11  0046   288 	BRB	FCNVII_COMMON		; branch to common subroutine FCNVII_COMMON
                                     0048   289 					; and return from there with result
                                     0048   290 					; in @value(AP)
                                     0048   291 
FOR$FORCNVII    ; FORTRAN INTEGER INPUT CONVERSION ROUTINE       21-AUG-1978 18:53:55   VAX-11 MACRO X0.3-11               Page   8
01-8            FOR$CNV_IN_I  ; I format input conversion routi                                                                  (7)

                                     0048   293 	.SBTTL	FOR$CNV_IN_I		; I format input conversion routine
                                     0048   294 ;++
                                     0048   295 ; FUNCTIONAL DESCRIPTION:
                                     0048   296 ;
                                     0048   297 ;	Perform decimal input conversion. Set radix to 10 and then
                                     0048   298 ;	call common subroutine FCNVII_COMMON to process the input string
                                     0048   299 ;
                                     0048   300 ; CALLING SEQUENCE:
                                     0048   301 ;
                                     0048   302 ;	Fits.wlc.v	= FOR$CNV_IN_I (in_str.rt.ds, value.wl.r)
                                     0048   303 ;
                                     0048   304 ;
                                     0048   305 ; INPUT PARAMETERS:
                                     0048   306 ;
                           00000004  0048   307 	in_str	= 4			; input string, in_str.rt.ds
                                     0048   308 ;
                                     0048   309 ; IMPLICIT INPUTS:
                                     0048   310 ;	NONE
                                     0048   311 ;
                                     0048   312 ; OUTPUT PARAMETERS:
                                     0048   313 ;
                           00000008  0048   314 	value	= 8			; return value, value.wl.r
                                     0048   315 ;
                                     0048   316 ; IMPLICIT OUTPUTS:
                                     0048   317 ;	NONE
                                     0048   318 ;
                                     0048   319 ; COMPLETION CODES:
                                     0048   320 ;
                                     0048   321 ;	FOR$_INPCONERR - error if illegal character in input string, zero output parameter
                                     0048   322 ;	SS$_NORMAL - success
                                     0048   323 ;
                                     0048   324 ; SIDE EFFECTS:
                                     0048   325 ;	NONE
                                     0048   326 ;
                                     0048   327 ;--
                                     0048   328 
                                     0048   329 
                                     0048   330 
                               407C' 0048   331 	.ENTRY	FOR$CNV_IN_I, REGMASK	; entry for FOR$CNV_IN_I
                                     004A   332 					; enables integer overflow
            52            0A     D0  004A   333 	MOVL	#10, R2			; R2 = radix = 10
                                     004D   334 ;
                                     004D   335 ; Fall through to COMMON to do the conversion
FOR$FORCNVII    ; FORTRAN INTEGER INPUT CONVERSION ROUTINE       21-AUG-1978 18:53:55   VAX-11 MACRO X0.3-11               Page   9
01-8            FCNVII_COMMON  ; common routine for FCNVII                                                                       (8)

                                     004D   337 	.SBTTL	FCNVII_COMMON		; common routine for FCNVII
                                     004D   338 
                                     004D   339 ;+
                                     004D   340 ; Algorithmic steps:
                                     004D   341 ;	1. Initialization
                                     004D   342 ;	2. Scan for first non-blank character.
                                     004D   343 ;	   If there is no non-blank character, return with result = 0.
                                     004D   344 ;	   If it is not I format conversion then go to step 4
                                     004D   345 ;	   else if current_char is not a "-" or "+" then go to step 4
                                     004D   346 ;		else if current_char is a "-" then set negative flag.
                                     004D   347 ;	3. Skip over "-" or "+" sign.
                                     004D   348 ;	4. Loop to collect digits, treating blanks as zeroes until the string
                                     004D   349 ;	   is exhausted.
                                     004D   350 ;-
                                     004D   351 
                                     004D   352 ;+
                                     004D   353 ; Initialization
                                     004D   354 ;-
                                     004D   355 
                                     004D   356 FCNVII_COMMON:
            50         04 BC     7D  004D   357 	MOVQ	@in_str(AP), R0		; R0 = width of the input string
                                     0051   358 					; R1 = address of the input string
                       08 BC     D4  0051   359 	CLRL	@value(AP)		; clear answer in case of error
                          54     7C  0054   360 	CLRQ	R4			; R4/R5 = ACC = 0
                          56     D4  0056   361 	CLRL	R6			; clear flag register
                                     0058   362 
                                     0058   363 
FOR$FORCNVII    ; FORTRAN INTEGER INPUT CONVERSION ROUTINE       21-AUG-1978 18:53:55   VAX-11 MACRO X0.3-11               Page  10
01-8            FCNVII_COMMON  ; common routine for FCNVII                                                                       (9)

                                     0058   365 ;+
                                     0058   366 ; Scan for first non-blank character. If there is no non-blank character, return a
                                     0058   367 ; zero. Otherwise, depending on the radix and also what current character is,
                                     0058   368 ; different actions will be taken.
                                     0058   369 ;-
                                     0058   370 
            50            20     3B  0058   371 	SKPC	#^A/ /, R0, (R1)	; skip blanks
                          61         005B       
                                     005C   372 					; R0 = #CHAR_REMAINING
                                     005C   373 					; R1 = POINTER_TO_INPUT
                                     005C   374 					; Z bit is set if R0 = 0
                          4C     13  005C   375 	BEQL	DONE			; branch to DONE if no non-blank
                                     005E   376 					; char is found
            0A            52     D1  005E   377 	CMPL	R2, #10 		; check if the radix is 10 (i.e. Is it a 
                                     0061   378 					; I format conversion)
                          12     12  0061   379 	BNEQ	DIGIT_LOOP		; no, branch to DIGIT_LOOP
            2D            61     91  0063   380 	CMPB	(R1), #^A/-/		; is the current char a "-" sign?
                          04     12  0066   381 	BNEQ	10$			; no, branch to 10$
            56            00     E3  0068   382 	BBCS	#V_NEGATIVE, R6, DECIMAL
                          05         006B       
                                     006C   383 					; set negative flag and continue
                                     006C   384 
            2B            61     91  006C   385 10$:	CMPB	(R1), #^A/+/		; is current char a "+" sign?
                          04     12  006F   386 	BNEQ	DIGIT_LOOP		; no, branch to check if it is a digit
                                     0071   387 
                                     0071   388 ;+
                                     0071   389 ; skip over "-" or "+" sign
                                     0071   390 ;-
                                     0071   391 
                                     0071   392 DECIMAL:
                          50     D7  0071   393 	DECL	R0			; R0 = #CHAR_REMAINING
                          51     D6  0073   394 	INCL	R1			; R1 = POINTER_TO_INPUT
FOR$FORCNVII    ; FORTRAN INTEGER INPUT CONVERSION ROUTINE       21-AUG-1978 18:53:55   VAX-11 MACRO X0.3-11               Page  11
01-8            FCNVII_COMMON  ; common routine for FCNVII                                                                      (10)

                                     0075   396 ;+
                                     0075   397 ; Loop to collect digits, treat blanks as zeroes, until the string is exhausted
                                     0075   398 ; then branch to DONE
                                     0075   399 ;-
                                     0075   400 
                                     0075   401 DIGIT_LOOP:
                          50     D7  0075   402 	DECL	R0			; R0 = #CHAR_REMAINING
                          31     19  0077   403 	BLSS	DONE			; branch to DONE if the string is exhausted
                                     0079   404 
                                     0079   405 ;+
                                     0079   406 ; Get next character, converting blanks into zeroes
                                     0079   407 ;-
                                     0079   408 
            53            81     9A  0079   409 	MOVZBL	(R1)+, R3		; get current char and adjust POINTER_TO_INPUT 
            20            53     D1  007C   410 	CMPL	R3, #^A/ /		; compare char with blank
                          03     12  007F   411 	BNEQ	CHECK_DIGIT		; branch if not blank
            53            30     D0  0081   412 	MOVL	#^A/0/, R3		; convert blank into zero
                                     0084   413 
                                     0084   414 ;+
                                     0084   415 ; Check if current char is a legal digit, accumulate it in ACC if yes and
                                     0084   416 ; then branch to DIGIT_LOOP if no overflow. Otherwise fall into ERROR.
                                     0084   417 ;-
                                     0084   418 
                                     0084   419 CHECK_DIGIT:
            53            30     C2  0084   420 	SUBL	#^A/0/,	R3		; R3 = ASCII(current_char) - ASCII("0")
                          19     19  0087   421 	BLSS	ERROR			; branch if current char is under "0" in
                                     0089   422 					; ASCII table
            16            53     D1  0089   423 	CMPL	R3, #<^A/F/ - ^A/0/>	; compare with ASCII("F") - ASCII("0")
                          14     14  008C   424 	BGTR	ERROR			; branch if current char is above "F" in
                                     008E   425 					; ASCII table
            53       FF6D CF43   9A  008E   426 	MOVZBL	TABLE[R3], R3		; get correspongind binary value
            52            53     D1  0094   427 	CMPL	R3, R2			; is current digit a legal digit in this radix
                          09     1A  0097   428 	BGTRU	ERROR			; branch to ERROR if not
            54            52     7A  0099   429 	EMUL	R2, R4, R3, R4		; R2 = radix
            54            53         009C       
                                     009E   430 					; R4 = LP(ACC), only LP(ACC) will be used in EMUL,
                                     009E   431 					; since R5 (=HP(ACC)) must be zero
                                     009E   432 					; R3 = current digit
                                     009E   433 					; R4/R5 = ACC = ACC * radix + current_digit
                          55     D5  009E   434 	TSTL	R5			; compare R5 with 0, since a non-zero value
                                     00A0   435 					; in HP(ACC) meand overflow
                          D3     13  00A0   436 	BEQL	DIGIT_LOOP		; if no overflow branch back to get more
                                     00A2   437 					; character. Otherwise fall into ERROR
FOR$FORCNVII    ; FORTRAN INTEGER INPUT CONVERSION ROUTINE       21-AUG-1978 18:53:55   VAX-11 MACRO X0.3-11               Page  12
01-8            FCNVII_COMMON  ; common routine for FCNVII                                                                      (11)

                                     00A2   439 ;+
                                     00A2   440 ; ERROR return
                                     00A2   441 ;-
                                     00A2   442 
            50   00000000'8F     D0  00A2   443 ERROR:	MOVL	#FOR$_INPCONERR, R0	; R0 = error return code
                                 04  00A9   444 	RET				; return
                                     00AA   445 
                                     00AA   446 ;+
                                     00AA   447 ; DONE
                                     00AA   448 ;-
                                     00AA   449 
            50            01     D0  00AA   450 DONE:	MOVL	#1, R0			; return function value of SS$_NORMAL
            56            00     E0  00AD   451 	BBS	#V_NEGATIVE, R6, 1$	; branch if "-" was seen
                          05         00B0       
         08 BC            54     D0  00B1   452 	MOVL	R4, @value(AP)		; otherwise, R4 is the result
                                 04  00B5   453 	RET
                                     00B6   454 
         08 BC            54     CE  00B6   455 1$:	MNEGL	R4, @value(AP)		; answer is -R4
                                 04  00BA   456 	RET
                                     00BB   457 
                                     00BB   458 	.END
FOR$FORCNVII    ; FORTRAN INTEGER INPUT CONVERSION ROUTINE       21-AUG-1978 18:53:55   VAX-11 MACRO X0.3-11               Page  13
SYMBOL TABLE                                                                                                                    (11)

CHECK_DIGIT      00000084 R     02   
DECIMAL          00000071 R     02   
DIGIT_LOOP       00000075 R     02   
DONE             000000AA R     02   
ERROR            000000A2 R     02   
FCNVII_COMMON    0000004D R     02   
FOR$CNV_IN_I     00000048 RG    02   
FOR$CNV_IN_L     00000017 RG    02   
FOR$CNV_IN_O     0000003A RG    02   
FOR$CNV_IN_Z     00000041 RG    02   
FOR$K_ERR_PREFX= 00000018            
FOR$_INPCONERR   ********   X   01   
IN_STR         = 00000004            
MTH$K_ERR_PREFX= 00000016            
MTH__FLOOVEMAT = 00000058            
MTH__FLOUNDMAT = 00000059            
MTH__INVARG    = 00000051            
MTH__LOGZERNEG = 00000053            
MTH__SINSIGLOS = 00000057            
MTH__SQUROONEG = 00000054            
MTH__UNDEXP    = 00000052            
MTH__WRONUMARG = 00000050            
REGMASK        = 0000407C            
TABLE            00000000 R     02   
VALUE          = 00000008            
V_NEGATIVE     = 00000000            


PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
FOR$CODE         000000BB      02       PIC   USR   CON   REL   LCL   SHR   EXE   RD  NOWRT LONG  


THERE WERE NO ERRORS OR WARNINGS.
27724. BYTES LEFT IN FREE MEMORY POOL.
OBJ$:FORCNVII,LIS$:FORCNVII/-SP=LIB$:S/ML,SRC$:P,FORCNVII
0 MLB DIR RDS - 0 GETS TO DEFINE 0 MACROS. 4 INTER. FILE WRITES. 
