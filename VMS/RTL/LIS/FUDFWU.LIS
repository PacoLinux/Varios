
; Bliss-32 10.1-416	Monday 21-AUG-1978 19:31:56	DBB3:[RTL.SRC]FUDFWU.B32;6					Page 1
;
;00100  0001	MODULE FOR$$UDF_WU (	! FORTRAN Write unformatted UDF
;00200  0002		IDENT = '0-09'	! File: FUDFWU.B32
;00300  0003			) =
;00400  0004	BEGIN
;00500  0005	
;00600  0006	!
;00700  0007	! COPYRIGHT (C) 1977
;00800  0008	! DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS 01754
;00900  0009	!
;01000  0010	! THIS SOFTWARE IS FURNISHED  UNDER A LICENSE FOR USE ONLY ON A SINGLE
;01100  0011	! COMPUTER  SYSTEM AND  MAY BE  COPIED ONLY WITH  THE INCLUSION OF THE
;01200  0012	! ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,
;01300  0013	! MAY NOT BE PROVIDED OR  OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
;01400  0014	! EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE
;01500  0015	! TERMS.  TITLE TO AND  OWNERSHIP OF THE  SOFTWARE  SHALL AT ALL TIMES
;01600  0016	! REMAIN IN DEC.
;01700  0017	!
;01800  0018	! THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE
;01900  0019	! AND SHOULD  NOT BE CONSTRUED  AS A COMMITMENT  BY DIGITAL  EQUIPMENT
;02000  0020	! CORPORATION.
;02100  0021	!
;02200  0022	! DEC ASSUMES  NO  RESPONSIBILITY  FOR  THE USE OR  RELIABILITY OF ITS
;02300  0023	! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
;02400  0024	
;02500  0025	!++
;02600  0026	! FACILITY:  FORTRAN Support Library - not user callable
;02700  0027	!
;02800  0028	! ABSTRACT:
;02900  0029	!
;03000  0030	!	This module implements FORTRAN Write unformatted I/O
;03100  0031	!	statements (sequential access - S, direct access - D,
;03200  0032	!	at the User data Formatter level of
;03300  0033	!	abstraction (UDF level is 2nd level). This module
;03400  0034	!	calls the appropriate write record
;03500  0035	!	routine at the record handling level of abstraction (REC
;03600  0036	!	level is 3rd level) to write a record.
;03700  0037	!
;03800  0038	! ENVIRONMENT:  User access mode; reentrant AST level or not.
;03900  0039	!
;04000  0040	! AUTHOR:  Thomas N. Hastings;	 CREATION DATE: 20-Feb-77
;04100  0041	!
;04200  0042	! MODIFIED BY:
;04300  0043	!	Thomas N. Hastings, 12-Mar-77: Version 01
;04400  0044	! 01	-  original
;04500  0045	! 0-4	- Removed parameters to record level routines JMT 17-OCT-77
;04600  0046	! 0-05	- Use FOR$K_abcmno05yz as E05TERNAL LITERALs.  TNH 27-Oct-77
;04700  0047	! 0-06	- Global register CCB.  JMT 8-Apr-78
;04800  0048	! 0-07	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
;04810  0049	! 0-08	- Use JSB linkages.  TNH 22-May-78
;04820  0050	! 0-09	- PIC dispatch tables.  TNH 7-June-78
;04900  0051	!--

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:31:56	DBB3:[RTL.SRC]FUDFWU.B32;6					Page 2
;
;00100  0052	!
;00200  0053	! LINKAGES:
;00300  0054	!
;00500  0055	REQUIRE 'RTLIN:FLNK';		! Define all linkages
; %PRINT:	File: FLNK.B32; Version 1, edit 12, TNH 2-Aug-78
;00600  0277	
;00700  0278	!
;00800  0279	! TABLE OF CONTENTS:
;00900  0280	!
;01000  0281	
;01100  0282	FORWARD ROUTINE
;01200  0283		FOR$$UDF_WU0: JSB_UDF0 NOVALUE,	! initialization
;01300  0284		FOR$$UDF_WU1: CALL_CCB NOVALUE,	! format one user I/O list element
;01400  0285		FOR$$UDF_WU9: JSB_UDF9 NOVALUE;	! end of user I/O list - finish
;01500  0286	
;01600  0287	!
;01700  0288	! INCLUDE FILES:
;01800  0289	!
;01900  0290		REQUIRE 'RTLML:FISB';		! I/O statement block (ISB) offsets 
; %PRINT:	File: FISB.MDL which produces FISB.B32! Version 1, EDIT 16, DGP 02-Jun-78
;02000  0499		REQUIRE 'RTLML:FLUB';		! Logical unit block (LUB)
; %PRINT:	File: FLUB.MDL which produces FLUB.B32! Version 0, edit 30, TNH, 17-June-78
;02100  0667		REQUIRE 'RTLIN:FMAC';		! Macros
; %PRINT:	Filename: FMAC.B32; Version 1, edit 29, TNH, 7-JUN-78
; %PRINT:	 REQUIRE FILE: LPSECT.B32, VERSION 01-5, TNH, 27-Jun-78
;02200  0847					! type codes
;02300  0848		REQUIRE 'RTLIN:ODBG';		! OTS debugging macros
; %PRINT:	Filename: NODBG.B32; Version 0, edit 20, JMT, 17-Jan-78
;02400  0924	
;02500  0925	!
;02600  0926	! MACROS:
;02700  0927	!
;02800  0928	
;02900  0929	
;03000  0930	!
;03100  0931	! EQUATED SYMBOLS:
;03200  0932	!
;03300  0933	
;03400  0934							! all other FORTRAN data type codes are larger valued
;03500  0935	
;03600  0936	!
;03700  0937	! PSECT DECLARATIONS:
;03800  0938	!
;03900  0939	
;04000  0940		DECLARE_PSECTS (FOR);	! declare PSECTs for FOR$ facility
;04100  0941	
;04200  0942	!
;04300  0943	! OWN STORAGE:
;04400  0944	!
;04500  0945	!	None
;04600  0946	!
;04700  0947	! EXTERNAL REFERENCES:
;04800  0948	!
;04900  0949	
;05000  0950	EXTERNAL 

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:31:56	DBB3:[RTL.SRC]FUDFWU.B32;6					Page 2-1
;
;05100  0951		FOR$$AA_REC_PR0:ADR_VECTOR,	! PIC array of record processor
;05200  0952						! procedure-initializations in REC
;05300  0953						! level of abstraction. Indexed by
;05400  0954						! I/O statement type (ISB$B_STTM_TYPE)
;05500  0955		FOR$$AA_REC_PR1:ADR_VECTOR,	! PIC array of record processor procedures
;05600  0956						! Write a record in REC level of
;05700  0957						! abstraction. Indexed by I/O statement
;05800  0958						! type (ISB$B_STTM_TYPE)
;05900  0959		FOR$$AA_REC_PR9:ADR_VECTOR;	! PIC array of record processor procedures
;06000  0960						! Write last record in REC level of
;06100  0961						! abstraction. Indexed by I/O
;06200  0962						! statement type (ISB$B_STTM_TYPE)

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:31:56	DBB3:[RTL.SRC]FUDFWU.B32;6					Page 3
;
;00100  0963	GLOBAL ROUTINE FOR$$UDF_WU0 	! Write unformatted UDF initialization
;00200  0964		: JSB_UDF0 NOVALUE =
;00300  0965	
;00400  0966	!++
;00500  0967	! FUNCTIONAL DESCRIPTION:
;00600  0968	!
;00700  0969	! Initialize Write unformatted User data formatter (UDF)
;00800  0970	!
;00810  0971	! CALLING SEQUENCE:
;00820  0972	!
;00830  0973	!	JSB FOR$$UDF_WU0 ()
;00840  0974	!
;00900  0975	! FORMAL PARAMETERS:
;01000  0976	!
;01100  0977	!	None.
;01200  0978	!
;01300  0979	! IMPLICIT INPUTS:
;01400  0980	!
;01500  0981	!	CCB			Pointer to current logical unit block
;02000  0982	!	ISB$B_STTM_TYPE		I/O statement type code - set by
;02100  0983	!				each I/O statement initialization
;02200  0984	!
;02300  0985	! IMPLICIT OUTPUTS:
;02400  0986	!
;02500  0987	!	ISB$A_BUF_PTR		Adr. of next byte of output
;02600  0988	!				data buffer
;02700  0989	!	ISB$A_BUF_END		Adr. of end+1 byte position of output buffer
;02800  0990	!
;02900  0991	! ROUTINE VALUE:
;03000  0992	! COMPLETION CODES:
;03100  0993	!
;03200  0994	!	NONE
;03300  0995	!
;03400  0996	! SIDE EFFECTS:
;03500  0997	!
;03600  0998	!	NONE
;03700  0999	!
;03800  1000	!--

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:31:56	DBB3:[RTL.SRC]FUDFWU.B32;6					Page 4
;
;00100  1001	    BEGIN
;00200  1002	
;00300  1003	    EXTERNAL REGISTER
;00400  1004		CCB: REF BLOCK[, BYTE];
;00500  1005	
;00600  1006	    !+
;00700  1007	    ! Print input formals and implicit inputs if debugging
;00800  1008	    !-
;00900  1009	
;01000  1010	    INPUT_FORMALS (FOR$$UDF_WU0);
;01100  1011	    IMPLICIT_INPUTS (FOR$$UDF_WU0, 'OTS$$A_CUR_LUB', .OTS$$A_CUR_LUB, '.CCB[ISB$B_STTM_TYPE]', .CCB[ISB$B_STTM_TYPE]
;01200  1012	
;01300  1013	    !+
;01400  1014	    ! Initialize Record processing level of abstraction.
;01500  1015	    ! Set pointer to current (ISB$A_BUF_PTR)  and last+1
;01600  1016	    ! (ISB$A_BUF_END) character position for user data in
;01700  1017	    ! output buffer
;01800  1018	    !-
;01900  1019	
;02000  1020	    JSB_REC0 (FOR$$AA_REC_PR0 + .FOR$$AA_REC_PR0[.CCB[ISB$B_STTM_TYPE]]);
;02100  1021	
;02200  1022	    !+
;02300  1023	    ! Print function value, output formals, and implicit outputs, if debugging
;02400  1024	    !-
;02500  1025	
;02600  1026	    FUNCTION_VALUE (FOR$$UDF_WU0);
;02700  1027	    OUTPUT_FORMALS (FOR$$UDF_WU0);
;02800  1028	    IMPLICIT_OUTPUT  (FOR$$UDF_WU0,
;02900P 1029		'.CCB[ISB$A_BUF_PTR]', .CCB[ISB$A_BUF_PTR],
;03000P 1030		'.CCB[ISB$A_BUF_END]', .CCB[ISB$A_BUF_END]);
;03100  1031	    RETURN;
;03200  1032	    END;		! End of FOR$$UDF_WU0 routine


							    .TITLE  FOR$$UDF_WU
							    .IDENT  \0-09\

							    .EXTRN  FOR$$AA_REC_PR0, FOR$$AA_REC_PR1, FOR$$AA_REC_PR9

							    .PSECT  FOR$CODE,NOWRT,  SHR,  PIC,2

		         50 	  A5   AB  9A 00000 FOR$$UDF_WU0::
							    MOVZBL  -91(CCB), R0					      ; 1020
		         50 	0000GCF40  32 00004 	    CVTWL   FOR$$AA_REC_PR0[R0], R0				      ;
				0000GCF40  16 0000A 	    JSB     FOR$$AA_REC_PR0[R0]					      ;
					   05 0000F 	    RSB     							      ; 0963

; Routine Size:  16 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:31:56	DBB3:[RTL.SRC]FUDFWU.B32;6					Page 5
;
;00100  1033	GLOBAL ROUTINE FOR$$UDF_WU1 (	! Copy one user output element
;00200  1034		ELEM_TYPE,		! Type code of user I/O list element
;00300  1035		ELEM_SIZE,		! No. of addressable units in element
;00400  1036		ELEM_ADR)		! Adr. of element
;00500  1037		: CALL_CCB NOVALUE =
;00600  1038	
;00700  1039	!++
;00800  1040	! FUNCTIONAL DESCRIPTION:
;00900  1041	!
;01000  1042	!	FOR$$UDF_WU1 copies a single user I/O list element
;01100  1043	!	and places it in the current output buffer.
;01200  1044	!	If the entire user element will not fit in the buffer,
;01300  1045	!	only part if copied and the buffer is output by calling
;01400  1046	!	the proper record level (3rd level of abstraction).
;01500  1047	!	FOR$$UDF_WU is the same for sequential and direct.
;01600  1048	!	Only the record level of abstraction is different for sequential
;01700  1049	!	and direct.  In fact direct can not output more than one record.
;01800  1050	!
;01810  1051	! CALLING SEQUENCE:
;01820  1052	!
;01830  1053	!	CALL FOR$$UDF_WU1 (elem_type.rlu.v, elem_size.rlu.v, elem_adr.rx.r)
;01840  1054	!
;01900  1055	! FORMAL PARAMETERS:
;02000  1056	!
;02100  1057	!	ELEM_TYPE.rlu.v		Type code of user I/O list
;02200  1058	!				element. Form: ELEM_TYPE_x
;02300  1059	!				x = B,W,L,WU,LU,F,D,FC or T.
;02400  1060	!	ELEM_SIZE.rlu.v		Size of user I/O list element
;02500  1061	!				in addressable machine units
;02600  1062	!	ELEM_ADR.rx.r		Adr. of user I/O list element
;02700  1063	!				x = b, w, l, wu, lu, f, d, fc or t.
;02800  1064	!
;02900  1065	! IMPLICIT INPUTS:
;03000  1066	!
;03100  1067	!	OTS$$A_CUR_LUB		Pointer to current logical unit block
;03200  1068	!				(LUB). Used to setup base pointer ISB
;03300  1069	!				to current I/O statement block
;03400  1070	!	ISB$B_STTM_TYPE		I/O statement type code - set by each
;03500  1071	!				I/O statement initialization
;03600  1072	!
;03700  1073	! The following ISB locations are set only by previous calls to
;03800  1074	! FOR$$UDF_WU{0,1}, i.e., are effectively OWN.
;03900  1075	!
;04000  1076	!	ISB$A_BUF_PTR		Pointer to next char. position
;04100  1077	!				in user data part of output buffer
;04200  1078	!	ISB$A_BUF_END		Adr. of last+1 byte position of output buffer
;04300  1079	!
;04400  1080	! IMPLICIT OUTPUTS:
;04500  1081	!
;04600  1082	!
;04700  1083	! The following ISB locations are set only by previous calls
;04800  1084	! to FOR$$UDF_WU{0,1}, i.e., are effectively OWN.
;04900  1085	!
;05000  1086	!	ISB$A_BUF_PTR		Pointer to next char. position
;05100  1087	!				in user data part of output buffer

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:31:56	DBB3:[RTL.SRC]FUDFWU.B32;6					Page 5-1
;
;05200  1088	!
;05300  1089	! FUNCTIONAL VALUE:
;05400  1090	!
;05500  1091	!	NONE
;05600  1092	!
;05700  1093	! SIDE EFFECTS:
;05800  1094	!
;05900  1095	!	SIGNAL_STOPs FOR$_RECTOOBIG (66='RECORD TOO BIG')
;06000  1096	!--
;06100  1097	
;06200  1098	    BEGIN
;06300  1099	
;06400  1100	    EXTERNAL REGISTER
;06500  1101		CCB: REF BLOCK[, BYTE];
;06600  1102	
;06700  1103	    LOCAL
;06800  1104		TMP_ELEM_SIZE,		! temp no. ob bytes left in user element to copy
;06900  1105		TMP_ELEM_ADR,		! temp adr. of rest of user element to copy
;07000  1106		TMP_DIFF;		! temp. no. of bytes to move each time in loop
;07100  1107	
;07200  1108	    !+
;07300  1109	    ! Print input formals, implicits inputs, if debugging
;07400  1110	    !-
;07500  1111	
;07600  1112	    INPUT_FORMALS (FOR$$UDF_WU1, '.ELEM_TYPE', .ELEM_TYPE, '.ELEM_SIZE', .ELEM_SIZE, '.ELEM_ADR', .ELEM_ADR,
;07700P 1113		'.ELEM_ADR[0] (ref)', (IF .ELEM_ADR NEQ 0 THEN .ELEM_ADR[0] ELSE 0));
;07800  1114	    IMPLICIT_INPUTS ( FOR$$UDF_WU1, '.OTS$$A_CUR_LUB', .OTS$$A_CUR_LUB,
;07900P 1115		'.CCB[ISB$B_STTM_TYPE]', .CCB[ISB$B_STTM_TYPE],
;08000P 1116		'.CCB[ISB$A_BUF_PTR]', .CCB[ISB$A_BUF_PTR],
;08100P 1117		'.CCB[ISB$A_BUF_END]', .CCB[ISB$A_BUF_END]);
;08200  1118	
;08300  1119	    !+
;08400  1120	    ! Copy as much of user element as will fit into buffer.  If it won't all fit
;08500  1121	    ! (sequential only since it will be an error for direct) call the
;08600  1122	    ! record level and output the record and continue copying the user element.
;08700  1123	    !-
;08800  1124	
;08900  1125	    TMP_ELEM_SIZE = .ELEM_SIZE;
;09000  1126	    TMP_ELEM_ADR = .ELEM_ADR;
;09100  1127	    WHILE .CCB[ISB$A_BUF_PTR] + .TMP_ELEM_SIZE GTRA .CCB[ISB$A_BUF_END] DO
;09200  1128		BEGIN
;09300  1129		TMP_DIFF = .CCB[ISB$A_BUF_END] - .CCB[ISB$A_BUF_PTR];
;09400  1130		CCB[ISB$A_BUF_PTR] = CH$MOVE (.TMP_DIFF, .TMP_ELEM_ADR, .CCB[ISB$A_BUF_PTR]);
;09500  1131		TMP_ELEM_SIZE = .TMP_ELEM_SIZE - .TMP_DIFF;
;09600  1132		TMP_ELEM_ADR = .TMP_ELEM_ADR + .TMP_DIFF;
;09700  1133		JSB_REC1 (FOR$$AA_REC_PR1 + .FOR$$AA_REC_PR1[.CCB[ISB$B_STTM_TYPE]]);
;09800  1134		END;
;09900  1135	
;10000  1136	    !+
;10100  1137	    ! Copy the remainder of the user element that will fit into the output buffer
;10200  1138	    ! Update buffer pointer (ISB$A_BUF_PTR) to point to last byte+1 moved.
;10300  1139	    !-
;10400  1140	
;10500  1141	    CCB[ISB$A_BUF_PTR] = CH$MOVE (.TMP_ELEM_SIZE, .TMP_ELEM_ADR, .CCB[ISB$A_BUF_PTR]);
;10600  1142	

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:31:56	DBB3:[RTL.SRC]FUDFWU.B32;6					Page 5-2
;
;10700  1143	    !-
;10800  1144	
;10900  1145	    FUNCTION_VALUE (FOR$$UDF_WF1);
;11000  1146	    OUTPUT_FORMALS (FOR$$UDF_WF1);
;11100  1147	    IMPLICIT_OUTPUT (FOR$$UDF_WF1, '.CCB[ISB$A_PTR_END]', .CCB[ISB$A_PTR_END],
;11200P 1148		'.CCB[ISB$A_BUF_PTR]', .CCB[ISB$A_BUF_PTR]);
;11300  1149	    RETURN;		! Return from FOR$$UDF_WF1 routine
;11400  1150	    END;		!	End of FOR$$UDF_WU1





					 01FC 00010 	    .ENTRY  FOR$$UDF_WU1, Save R2,R3,R4,R5,R6,R7,R8		      ; 1033
		         56 	  08   AC  7D 00012 	    MOVQ    ELEM_SIZE, TMP_ELEM_SIZE				      ; 1125
	   50 	         56 	  B8   AB  C1 00016 1$:     ADDL3   -72(CCB), TMP_ELEM_SIZE, R0				      ; 1127
		    BC   AB	       50  D1 0001B 	    CMPL    R0, -68(CCB)					      ;
				       26  1B 0001F 	    BLEQU   2$							      ;
	   58 	    BC   AB	  B8   AB  C3 00021 	    SUBL3   -72(CCB), -68(CCB), TMP_DIFF			      ; 1129
      B8   BB	         67 	       58  28 00027 	    MOVC3   TMP_DIFF, (TMP_ELEM_ADR), @-72(CCB)			      ; 1130
		    B8   AB	       53  D0 0002C 	    MOVL    R3, -72(CCB)					      ;
		         56 	       58  C2 00030 	    SUBL2   TMP_DIFF, TMP_ELEM_SIZE				      ; 1131
		         57 	       58  C0 00033 	    ADDL2   TMP_DIFF, TMP_ELEM_ADR				      ; 1132
		         50 	  A5   AB  9A 00036 	    MOVZBL  -91(CCB), R0					      ; 1133
		         50 	0000GCF40  32 0003A 	    CVTWL   FOR$$AA_REC_PR1[R0], R0				      ;
				0000GCF40  16 00040 	    JSB     FOR$$AA_REC_PR1[R0]					      ;
				       CF  11 00045 	    BRB     1$							      ; 1127
      B8   BB	         67 	       56  28 00047 2$:     MOVC3   TMP_ELEM_SIZE, (TMP_ELEM_ADR), @-72(CCB)		      ; 1141
		    B8   AB	       53  D0 0004C 	    MOVL    R3, -72(CCB)					      ;
					   04 00050 	    RET     							      ; 1033

; Routine Size:  65 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:31:56	DBB3:[RTL.SRC]FUDFWU.B32;6					Page 6
;
;00100  1151	GLOBAL ROUTINE FOR$$UDF_WU9  ! unformatted output - end of I/O list call
;00200  1152		: JSB_UDF9 NOVALUE =
;00300  1153	
;00400  1154	
;00500  1155	!++
;00600  1156	! FUNCTIONAL DESCRIPTION:
;00700  1157	!
;00800  1158	!	FOR$$UDF_WU9 performs end of I/O list output formatting.
;00900  1159	!
;00910  1160	! CALLING SEQUENCE:
;00920  1161	!
;00930  1162	!	JSB FOR$$UDF_WU9 ()
;00940  1163	!
;01000  1164	! FORMAL PARAMETERS:
;01100  1165	!
;01200  1166	!	NONE
;01300  1167	!
;01400  1168	! IMPLICIT INPUTS:
;01500  1169	!
;01600  1170	!	See FOR$$UDF_WU1
;01700  1171	!
;01800  1172	!
;01900  1173	! IMPLICIT OUTPUTS:
;02000  1174	!
;02100  1175	!	See FOR$$UDF_WU1
;02200  1176	!
;02300  1177	! FUNCTION VALUE:
;02400  1178	!
;02500  1179	!	NONE
;02600  1180	!
;02700  1181	! SIDE EFFECTS:
;02800  1182	!
;02900  1183	!	See FOR$$UDF_WU1
;03000  1184	!--
;03100  1185	
;03200  1186	    BEGIN
;03300  1187	
;03400  1188	    EXTERNAL REGISTER
;03500  1189		CCB: REF BLOCK[, BYTE];
;03600  1190	
;03700  1191	    !+
;03800  1192	    ! Call record level of abstraction to output buffer from beginning up to but not including ISB$A_BUF_PTR
;03900  1193	    !-
;04000  1194	
;04100  1195	    JSB_REC9 (FOR$$AA_REC_PR9 + .FOR$$AA_REC_PR9[.CCB[ISB$B_STTM_TYPE]]);
;04200  1196	    RETURN;
;04300  1197	    END;	! End of FOR$$UDF_WU9 Routine





		         50 	  A5   AB  9A 00051 FOR$$UDF_WU9::
							    MOVZBL  -91(CCB), R0					      ; 1195
		         50 	0000GCF40  32 00055 	    CVTWL   FOR$$AA_REC_PR9[R0], R0				      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:31:56	DBB3:[RTL.SRC]FUDFWU.B32;6					Page 6-1
;
				0000GCF40  16 0005B 	    JSB     FOR$$AA_REC_PR9[R0]					      ;
					   05 00060 	    RSB     							      ; 1151

; Routine Size:  16 bytes


;04400  1198	
;04500  1199	
;04600  1200	END		! End of FOR$$UDF_WU Module
;04700  1201	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  FOR$CODE       	    97  NOWRT,  RD ,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)





; Size:		97 code + 0 data bytes
; Run Time:	00:07.8
; Elapsed Time:	00:23.7
; Memory Used:	56 pages
; Compilation Complete
