MTH$DSQRT       ; Double Floating Point Square Root routine      21-AUG-1978 19:05:21   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (2)     100  HISTORY	; Detailed Current Edit History
   (3)     100  DECLARATIONS	; Declarative Part of Module
   (4)     100  MTH$DSQRT  - Standard Double Precision Floating
   (5)     100  MTH$DSQRT_R5  - Special DSQRT routine
MTH$DSQRT       ; Double Floating Point Square Root routine      21-AUG-1978 19:05:21   VAX-11 MACRO X0.3-11               Page   1
01-9                                                                                                                             (1)

                                     0000   100 	.TITLE	MTH$DSQRT 	; Double Floating Point Square Root routine
                                     0000   200 				; (DSQRT)
                                     0000   300 	.IDENT /01-9/		; File: MTHDSQRT.MAR
                                     0000   400 ;
                                     0000   500 ; Copyright (C) 1977
                                     0000   600 ; Digital Equipment Corporation, Maynard, Massachusetts 01754
                                     0000   700 ;
                                     0000   800 ; This  software  is furnished under a license for use only on a single
                                     0000   900 ; computer  system  and  may  be  copied only with the inclusion of the
                                     0000  1000 ; above copyright notice.  This software, or  any other copies thereof,
                                     0000  1100 ; may not  be  provided or otherwise made available to any other person
                                     0000  1200 ; except  for  use on such system and to one who agree to these license 
                                     0000  1300 ; terms.  Title  to  and  ownership of the software shall  at all times 
                                     0000  1400 ; remain in DEC.
                                     0000  1500 ;
                                     0000  1600 ; The information  in  the software is subject to change without notice
                                     0000  1700 ; and should  not  be  construed  as  a commitment by Digital Equipment 
                                     0000  1800 ; Corporation.
                                     0000  1900 ;
                                     0000  2000 ; DEC assumes  no  responsibility  for  the use  or  reliability of its
                                     0000  2100 ; software on equipment which is not supplied by DEC.
                                     0000  2200 ;
                                     0000  2300 ;
                                     0000  2400 ; FACILITY: MATH LIBRARY
                                     0000  2500 ;++
                                     0000  2600 ; ABSTRACT:
                                     0000  2700 ;
                                     0000  2800 ; MTH$DSQRT is a function which  returns the floating point square root
                                     0000  2900 ; of its single precision floating point argument. The call is standard
                                     0000  3000 ; call-by-reference.
                                     0000  3100 ; MTH$DSQRT_R5  is  a  special routine  which  is the same as MTH$DSQRT
                                     0000  3200 ; except  a  faster non-standard JSB call is used with the  argument in
                                     0000  3300 ; R0 and no registers are saved.
                                     0000  3400 ;
                                     0000  3500 ;--
                                     0000  3600 ;
                                     0000  3700 ; VERSION: 01
                                     0000  3800 ;
                                     0000  3900 ; HISTORY:
                                     0000  4000 ; AUTHOR:
                                     0000  4100 ;	Peter Yuo, 15-Oct-76: Version 01
                                     0000  4200 ;
                                     0000  4300 ; MODIFIED BY:
                                     0000  4400 ;
                                     0000  4500 ; 01-1	Peter Yuo, 22-May-77
                                     0000  4600 ; 01-2	Peter Yuo, 31-May-77
                                     0000  4700 ;
                                     0000  4800 ;
MTH$DSQRT       ; Double Floating Point Square Root routine      21-AUG-1978 19:05:21   VAX-11 MACRO X0.3-11               Page   2
01-9            HISTORY ; Detailed Current Edit History                                                                          (2)

                                     0000   100 	.SBTTL	HISTORY	; Detailed Current Edit History
                                     0000   200 
                                     0000   300 
                                     0000   400 ; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:
                                     0000   500 ;	1. Last DIVD is rounded instead of truncated. Results should be
                                     0000   600 ;	   correct within 2 LSB's.
                                     0000   700 ;
                                     0000   800 ; Edit History for Version 01 of MTH$DSQRT 
                                     0000   900 ;
                                     0000  1000 ; 01-1	Code saving after code review March 1977
                                     0000  1100 ; 01-2	ROTL shift in garbage into highest bit. Use ASHL instead.
                                     0000  1200 ;	ADDL instruction after ADJUST has been changed into ADDW to prevent
                                     0000  1300 ;	overflow if R1<31:16> = FFFF and R0<31:16> = FFFF
                                     0000  1400 
                                     0000  1500 ; 01-3	Finish error handling 10-June-1977
                                     0000  1600 ; 0-4	MTH$$ERROR changed to MTH$$SIGNAL.
                                     0000  1700 ;	MTH$_... changed to MTH__....
                                     0000  1800 ;	Changed error handling mechanism. Put error result in R0:R1 before
                                     0000  1900 ;	calling MTH$$SIGNAL in order to allow user modify error result.
                                     0000  2000 ; 01-5	- Return -0.0 on negative arg.  TNH 20-Dec-77
                                     0000  2100 ; 01-6	- Remove undefined $15 global.  TNH 20-Dec-77
                                     0000  2200 ; 01-7	- Add Rich Lary's code bums.  JMT 26-Jan-78
                                     0000  2300 ; 01-9	- Move .ENTRY symbol definition to module header.  TNH 14-Aug-78
MTH$DSQRT       ; Double Floating Point Square Root routine      21-AUG-1978 19:05:21   VAX-11 MACRO X0.3-11               Page   3
01-9            DECLARATIONS ; Declarative Part of Module                                                                        (3)

                                     0000   100 	.SBTTL	DECLARATIONS	; Declarative Part of Module
                                     0000   200 
                                     0000   300 ;
                                     0000   400 ; INCLUDE FILES:	OTSPARAMS.MAR
                                     0000   500 ;
                                     0000   600 ; EXTERNAL SYMBOLS:	MTH$JACKET_HDLR
                                     0000   700 ;
                                     0000   800 	.DSABL	GBL			; Declare all externals
                                     0000   900 	.EXTRN	MTH$$SIGNAL		; SIGNAL SEVERE error
                                     0000  1000 ;
                                     0000  1100 ; EQUATED SYMBOLS:	
                                     0000  1110 ;
                                     0000  1120 
                           0000403C  0000  1130 	ACMASK = ^M<IV, R2, R3, R4, R5>	; register save mask and IV enable
                                     0000  1200 ;
                                     0000  1300 ; MACROS:	none
                                     0000  1400 ;
                                     0000  1500 ; PSECT DECLARATIONS:
                                     0000  1600 
                                 00000000  1700 	.PSECT	MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
                                     0000  1800 					; program section for math routines
                                     0000  1900 ;
                                     0000  2000 ; OWN STORAGE:	none
                                     0000  2100 ;
                                     0000  2200 ; CONSTANTS:
                                     0000  2300 
                                     0000  2400 ;
                                     0000  2500 ; Constants A and B chosen for k = odd
                                     0000  2600 ;
                           13CD5FD4  0000  2700 	LF_ODD_A_E63	=	^X13CD5FD4
                           3C4A2018  0000  2800 	LF_ODD_B_EM63	=	^X3C4A2018
                                     0000  2900 ;
                                     0000  3000 ; Constants A and B chosen for k = even
                                     0000  3100 ;
                           F61A4015  0000  3200 	LF_EVEN_A	=	^XF61A4015
                           4B231FD7  0000  3300 	LF_EVEN_B_EM64	=	^X4B231FD7
MTH$DSQRT       ; Double Floating Point Square Root routine      21-AUG-1978 19:05:21   VAX-11 MACRO X0.3-11               Page   4
01-9            MTH$DSQRT  - Standard Double Precision Floating                                                                  (4)

                                     0000   100 	.SBTTL	MTH$DSQRT  - Standard Double Precision Floating DSQRT
                                     0000   200 
                                     0000   300 
                                     0000   400 ;++
                                     0000   500 ; FUNCTIONAL DESCRIPTION:
                                     0000   600 ;
                                     0000   700 ; DSQRT  - double precision floating point function
                                     0000   800 ;
                                     0000   900 ; DSQRT(X) is computed using the following approximation technique:
                                     0000  1000 ;
                                     0000  1100 ;	If X <= 0 , error.  Let X = |X|.
                                     0000  1200 ;
                                     0000  1300 ;	Let X = 2**K * F where F is the fractional part.
                                     0000  1400 ;
                                     0000  1500 ;	If K = even, X = 2**(2P) * F,
                                     0000  1600 ;		DSQRT(X) = 2**P * DSQRT(F), 1/2 =< F < 1
                                     0000  1700 ;
                                     0000  1800 ;	If K = odd, X = 2**(2P+1) * F = 2**(2P+2) * (F/2),
                                     0000  1900 ;		DSQRT(X) = 2**(P+1) * DSQRT(F/2), 1/4 =< F/2 < 1/2.
                                     0000  2000 ;
                                     0000  2100 ;	Let F' = A*F + B,
                                     0000  2200 ;			  A = 0.453730314(octal),
                                     0000  2300 ;			  B = 0.327226214(octal), for K = even.
                                     0000  2400 ;	       = A*(F/2) + B,
                                     0000  2500 ;			  A = 0.650117146(octal),
                                     0000  2600 ;			  B = 0.230170444(octal), for K = odd.
                                     0000  2700 ;	and
                                     0000  2800 ;	    K' = P,	 for K = even
                                     0000  2900 ;	       = P + 1	 for K = odd.
                                     0000  3000 ;
                                     0000  3100 ;	Let Y0 = 2**K' * F' as a staight line approximation wthin the
                                     0000  3200 ;	given interval using coefficients A and B which minimize the
                                     0000  3300 ;	absolute error at the midpoint and endpoint.
                                     0000  3400 ;
                                     0000  3500 ;	Starting with Y0, three Newton-Raphson iterations are performed.
                                     0000  3600 ;
                                     0000  3700 ;	Y[n+1] = (1/2) * ( Y[n] + X/Y[n])
                                     0000  3800 ;
                                     0000  3900 ;	The relative error is < 10**-17.
                                     0000  4000 ;
                                     0000  4100 ; CALLING SEQUENCE:
                                     0000  4200 ;
                                     0000  4300 ;	dsqrt.wd.v = MTH$DSQRT(x.rd.r)
                                     0000  4400 ;
                                     0000  4500 ; INPUT PARAMETERS:
                                     0000  4600 
                           00000004  0000  4700 	LONG = 4			; define longword multiplier
                           00000004  0000  4800 	x = 1 * LONG			; Contents of x is the argument
                                     0000  4900 
                                     0000  5000 ; IMPLICIT INPUTS:	none
                                     0000  5100 ;
                                     0000  5200 ; OUTPUT PARAMETERS:
                                     0000  5300 ;
                                     0000  5400 ;	VALUE:	double precision square root of the argument
                                     0000  5500 ;
                                     0000  5600 ; IMPLICIT OUTPUTS:	none
                                     0000  5700 ;
MTH$DSQRT       ; Double Floating Point Square Root routine      21-AUG-1978 19:05:21   VAX-11 MACRO X0.3-11               Page   5
01-9            MTH$DSQRT  - Standard Double Precision Floating                                                                  (4)

                                     0000  5800 ; COMPLETION CODES:	none
                                     0000  5900 ;
                                     0000  6000 ; SIDE EFFECTS:
                                     0000  6100 ;
                                     0000  6200 ; Signals: MTH$_SQUROONEG if X < 0.0 with reserved operand in R0/R1
                                     0000  6300 ; (copied to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
                                     0000  6400 ; Associated message is: "SQUARE ROOT OF NEGATIVE VALUE". Result is reserved
                                     0000  6500 ; operand -0.0 unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1
                                     0000  6600 ;
                                     0000  6700 ; NOTE: This procedure disables floating point underflow, enables integer
                                     0000  6800 ; overflow, causes no floating overflow or other arithmetic traps, and
                                     0000  6900 ; preserves enables across the call.
                                     0000  7000 ;
                                     0000  7100 ;---
                                     0000  7200 
                                     0000  7300 
                               403C' 0000  7400 	.ENTRY	MTH$DSQRT, ACMASK	; standard call-by-reference entry
                                     0002  7500 					; disable DV (and FU), enable IV
                                     0002  7600 	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
                                     0002      
            6D       0000'CF     3E  0002       	MOVAW	W^MTH$$JACKET_HND, (FP)
                                     0007       					; set handler address to jacket
                                     0007       					; handler
                                     0007       
                                     0007  7700 					; case of an error in special routine
            50         04 BC     70  0007  7800 	MOVD	@x(AP), R0		; R0/R1 = arg 
                          01     10  000B  7900 	BSBB	MTH$DSQRT_R5 		; call kernel DSQRT rountine
                                 04  000D  8000 	RET				; return - result in R0/R1
MTH$DSQRT       ; Double Floating Point Square Root routine      21-AUG-1978 19:05:21   VAX-11 MACRO X0.3-11               Page   6
01-9            MTH$DSQRT_R5  - Special DSQRT routine                                                                            (5)

                                     000E   100 	.SBTTL	MTH$DSQRT_R5  - Special DSQRT routine
                                     000E   200 
                                     000E   300 ; Special DSQRT - used by the standard routine, and directly.
                                     000E   400 ;
                                     000E   500 ; CALLING SEQUENCE:
                                     000E   600 ;	save anything in R2:R5
                                     000E   700 ;	MOVD	..., R0			; input in R0/R1
                                     000E   800 ;	JSB	MTH$DSQRT_R5
                                     000E   900 ;	return with result in R0/R1
                                     000E  1000 ; Note: This routine is written to avoid causing any integer overflows, floating
                                     000E  1100 ; overflows, floating underflows or divide by 0 conditions, whether enabled or
                                     000E  1200 ; not.
                                     000E  1300 ;
                                     000E  1400 ; REGISTERS USED:
                                     000E  1500 ;	R0/R1 - Floating argument then result
                                     000E  1600 ;	R2/R3 - scratch
                                     000E  1700 ;	R4/R5 - hold X during calc of F', K'.
                                     000E  1800 
                                     000E  2100 MTH$DSQRT_R5::				; JSB routine for DSQRT
            54            50     70  000E  2200 	MOVD	R0, R4			; test sign of X and save it in R4/R5.
                          5D     15  0011  2300 	BLEQ	ZERO_NEG		; branch to ZERO_NEG if X =< 0
                                     0013  2400 ;
                                     0013  2500 ; X > 0
                                     0013  2600 ;
            51            50     3C  0013  2700 POS:	MOVZWL	R0, R1			; isolate low 16 bits (sign,exp,>fract) in R2
                          51     94  0016  2800 	CLRB	R1			; R1 now has sign and left 7 exp bits
            50            51     AA  0018  2900 	BICW	R1, R0			; clear sign and left 7 exp bits
                          50     95  001B  3000 	TSTB	R0			; check low bit of exp
                          10     18  001D  3100 	BGEQ	EVEN			; and branch if 1
            50   13CD5FD4 8F     44  001F  3200 	MULF	#LF_ODD_A_E63, R0	; add 64 (half of bias) to (exponent-2)
                                     0026  3300 					; and start approximation calc
            50   3C4A2018 8F     40  0026  3400 	ADDF	#LF_ODD_B_EM63, R0	; R0 = (first approx) * 2**-64
                          13     11  002D  3500 	BRB	ADJUST			; go adjust
                                     002F  3600 
                                     002F  3700 EVEN:
            50       2000 8F     A0  002F  3800 	ADDW	#^X2000, R0		; exp is 0 - make it 64 (2**-64) for legality
            50   F61A4015 8F     44  0034  3900 	MULF	#LF_EVEN_A, R0
            50   4B231FD7 8F     40  003B  4000 	ADDF	#LF_EVEN_B_EM64, R0	; R0 = (first approx) * 2**-64
                                     0042  4100 ADJUST:
            51            1F     9C  0042  4200 	ROTL	#31, R1, R1		; divide R1 (exp+bias) by 2,
                          51         0045       
                                     0046  4300 					; giving (exp/2+64)
            50            51     A0  0046  4400 	ADDW	R1, R0			; insert exp/2 in first approx and
                                     0049  4500 					; re-bias it.
                                     0049  4600 
                                     0049  4700 ; first iteration - single precision is sufficient
                                     0049  4800 ;
            54            50     47  0049  4900 	DIVF3	R0, R4, R1		; R1 = X/Y0
                          51         004C       
            50            51     40  004D  5000 	ADDF	R1, R0			; R0 = Y0 + X/Y0
            50       0080 8F     A2  0050  5100 	SUBW	#^X80, R0		; R0 = Y1 = (1/2)(Y0 + X/Y0)
                                     0055  5200 					; no overflow possible
                                     0055  5300 
                                     0055  5400 ; second iteration, do in double precision to get truncated( rather than
                                     0055  5500 ; rounded) result.
                                     0055  5600 ;
                          51     D4  0055  5700 	CLRL	R1			; lower part (X) = 0
MTH$DSQRT       ; Double Floating Point Square Root routine      21-AUG-1978 19:05:21   VAX-11 MACRO X0.3-11               Page   7
01-9            MTH$DSQRT_R5  - Special DSQRT routine                                                                            (5)

            54            50     67  0057  5800 	DIVD3	R0, R4, R2		; R2/R3 = X/Y1
                          52         005A       
            50            52     60  005B  5900 	ADDD	R2, R0			; R0/R1 = Y1 + higher_part(X/Y1)
            50       0080 8F     A2  005E  6000 	SUBW	#^X80, R0		; R0/R1 = Y2 = (1/2) (Y1+X/Y1)
                                     0063  6100 
                                     0063  6200 ; third iteration, do in double precision.
                                     0063  6300 ;
            54            50     67  0063  6400 	DIVD3	R0, R4, R2		; R2/R3 = X/Y2
                          52         0066       
            50            52     60  0067  6500 	ADDD	R2, R0			; R0 = Y2+X/Y2
            50       0080 8F     A2  006A  6600 	SUBW	#^X80, R0		; R0/R1 = DSQRT(X) =
                                     006F  6700 					; (1/2) (Y2+X/Y2)
                                 05  006F  6800 SQRTX:	RSB				; return, R0/R1 = result
                                     0070  6900 
                                     0070  7000 ; X =< 0
                                     0070  7100 ;
                                     0070  7200 ZERO_NEG:
                          FD     13  0070  7300 	BEQL	SQRTX			; return with R0 = result = 0
                          6E     DD  0072  7400 	PUSHL	(SP)			; return PC from JSB routine
            7E         54 8F     9A  0074  7500 	MOVZBL	#MTH__SQUROONEG, -(SP)	; condition value
            01            0F     78  0078  7600 	ASHL	#15, #1, R0		; R0 = result = reserved operand -0.0
                          50         007B       
                                     007C  7700 					; R0 goes to signal mechanism vector
                                     007C  7800 					; (CHF$L_MCH_R0/R1) so error handler
                                     007C  7900 					; can modify the result.
       0000'CF            02     FB  007C  8000 	CALLS	#2, W^MTH$$SIGNAL	; signal error and use real user's PC
                                     0081  8100 					; independent of CALL vs JSB
                                 05  0081  8200 	RSB				; return - R0 restored from CHF$L_MCH_R0/R1
                                     0082  8300 
                                     0082  8400 	.END
MTH$DSQRT       ; Double Floating Point Square Root routine      21-AUG-1978 19:05:21   VAX-11 MACRO X0.3-11               Page   8
SYMBOL TABLE                                                                                                                     (5)

ACMASK         = 0000403C            
ADJUST           00000042 R     02   
EVEN             0000002F R     02   
FOR$K_ERR_PREFX= 00000018            
LF_EVEN_A      = F61A4015            
LF_EVEN_B_EM64 = 4B231FD7            
LF_ODD_A_E63   = 13CD5FD4            
LF_ODD_B_EM63  = 3C4A2018            
LONG           = 00000004            
MTH$$JACKET_HND  ********   X   02   
MTH$$SIGNAL      ********   X   01   
MTH$DSQRT        00000000 RG    02   
MTH$DSQRT_R5     0000000E RG    02   
MTH$K_ERR_PREFX= 00000016            
MTH__FLOOVEMAT = 00000058            
MTH__FLOUNDMAT = 00000059            
MTH__INVARG    = 00000051            
MTH__LOGZERNEG = 00000053            
MTH__SINSIGLOS = 00000057            
MTH__SQUROONEG = 00000054            
MTH__UNDEXP    = 00000052            
MTH__WRONUMARG = 00000050            
POS              00000013 R     02   
SQRTX            0000006F R     02   
X              = 00000004            
ZERO_NEG         00000070 R     02   


PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
MTH$CODE         00000082      02       PIC   USR   CON   REL   LCL   SHR   EXE   RD  NOWRT LONG  


THERE WERE NO ERRORS OR WARNINGS.
27780. BYTES LEFT IN FREE MEMORY POOL.
OBJ$:MTHDSQRT,LIS$:MTHDSQRT/-SP=LIB$:S/ML,SRC$:P,MTHDSQRT
0 MLB DIR RDS - 0 GETS TO DEFINE 0 MACROS. 3 INTER. FILE WRITES. 
