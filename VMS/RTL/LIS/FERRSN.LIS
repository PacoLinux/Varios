
; Bliss-32 10.1-416	Monday 21-AUG-1978 19:16:46	DBB3:[RTL.SRC]FERRSN.B32;8					Page 1
;
;00100  0001	MODULE FOR$ERRSNS (	! FORTRAN ERRSNS and save error info
;00200  0002		IDENT = '0-11',	! File: FERRSN.B32
;00300  0003		LINKAGE (FORTRAN)
;00400  0004			) =
;00500  0005	BEGIN
;00600  0006	
;00700  0007	!
;00800  0008	!			  COPYRIGHT (c) 1977 BY
;00900  0009	!	      DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;01000  0010	!
;01100  0011	! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
;01200  0012	! ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
;01300  0013	! INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
;01400  0014	! COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
;01500  0015	! OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
;01600  0016	! TRANSFERRED.
;01700  0017	!
;01800  0018	! THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
;01900  0019	! AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
;02000  0020	! CORPORATION.
;02100  0021	!
;02200  0022	! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
;02300  0023	! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;02400  0024	!
;02500  0025	
;02600  0026	!++
;02700  0027	! FACILITY:  FORTRAN Support Library
;02800  0028	!
;02900  0029	! ABSTRACT:
;03000  0030	!
;03100  0031	!
;03200  0032	!	Return information about last FORTRAN error (ERRSNS).
;03300  0033	!	Also an internal routine to save that information when
;03400  0034	!	an error occurs in OWN storage.
;03500  0035	!
;03600  0036	! ENVIRONMENT:  User Mode - AST re-entrant
;03700  0037	!
;03800  0038	! AUTHOR:  Thomas N. Hastings, CREATION DATE:  8-Nov-1977
;03900  0039	!
;04000  0040	! MODIFIED BY:
;04100  0041	!
;04200  0042	! 	Thomas N. Hastings, 8-Nov-1977: VERSION 0
;04300  0043	! 01	- original
;04400  0044	! 0-4	- Fixed loop limit bug.  TNH 01-Dec-77
;04500  0045	! 0-5	- Add optional 5th parameter.  TNH 16-Dec-77
;04600  0046	! 0-6	- FOR$$ERRSNS_SAV takes 5 parameters.  TNH 30-Dec-77.
;04700  0047	! 0-7	- Fix access violation in FOR$ERRSNS_W.  TNH 15-Feb-78.
;04800  0048	! 0-8	- Change to STARLET library.  DGP 20-Apr-78
;04900  0049	! 0-09	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
;05000  0050	! 0-10	- Change STARLET to RTLSTARLE to avoid conflicts.  DGP 1-May-78
;05010  0051	! 0-11	- Accept either FORTRAN error number or 32-bit condition value.  TNH 10-June-78
;05100  0052	!--

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:16:46	DBB3:[RTL.SRC]FERRSN.B32;8					Page 2
;
;00100  0053	!
;00200  0054	! TABLE OF CONTENTS:
;00300  0055	!
;00400  0056	
;00500  0057	FORWARD ROUTINE
;00600  0058		FOR$ERRSNS: NOVALUE,		! Return error information about last error
;00700  0059		FOR$ERRSNS_W: NOVALUE,		! Same except word size args
;00800  0060		FOR$$ERRSNS_SAV: NOVALUE;	! Internal routine to save information
;00900  0061	
;01000  0062	!
;01100  0063	! INCLUDE FILES:
;01200  0064	!
;01300  0065		REQUIRE 'RTLML:FERR';		! FORTRAN error numbers
; %PRINT:	Filename: FERR.MDL! Version 0, edit 36, TNH 19-June-78
;01400  0183		REQUIRE 'RTLIN:LPSECT';	! Declare PSECT macro
; %PRINT:	 REQUIRE FILE: LPSECT.B32, VERSION 01-5, TNH, 27-Jun-78
;01500  0237		REQUIRE 'RTLML:MERR';		! Math library error numbers
; %PRINT:	Filename: MERR.MDL! Version 0, edit 4, TNH 30-Jan-78
;01600  0283		LIBRARY 'RTLSTARLE';	! STARLET library for macros and symbols
;01700  0284	!
;01800  0285	! MACROS:
;01900  0286	!
;02000  0287	
;02100  0288	!
;02200  0289	! EQUATED SYMBOLS:
;02300  0290	!
;02400  0291	!	The following offsets are used to access OWN vectors, LOCAL vectors, and formals:
;02500  0292	!
;02600  0293	LITERAL
;02700  0294		NPARMAX = 5;			! No. of parameters max.
;02800  0295	!
;02900  0296	! PSECT DECLARATIONS:
;03000  0297	!
;03100  0298	
;03200  0299		DECLARE_PSECTS (FOR);		! declare PSECTs for FOR$ facility
;03300  0300	
;03400  0301	!
;03500  0302	! OWN STORAGE:
;03600  0303	!
;03700  0304	OWN
;03800  0305		LAST_ERROR_INFO: VECTOR [NPARMAX+1],	! Last error info (non-AST level)
;03900  0306		LAST_AST_INFO: VECTOR [NPARMAX+1];	! Last error info (AST level)
;04000  0307							! 0th entry not used
;04100  0308	
;04200  0309	!
;04300  0310	! EXTERNAL REFERENCES:
;04400  0311	!
;04500  0312	
;04600  0313	EXTERNAL ROUTINE
;04700  0314		LIB$AST_IN_PROG: ADDRESSING_MODE (GENERAL);	! TRUE if AST in progress

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:16:46	DBB3:[RTL.SRC]FERRSN.B32;8					Page 3
;
;00100  0315	GLOBAL ROUTINE FOR$ERRSNS (	! FORTRAN get last error info
;00200  0316		FORT_ERR_NO,		! Optional adr. to get FORTRAN error no.
;00300  0317		RMS_STS,		! Optional adr. ro get RMS status
;00400  0318		RMS_STV,		! Optional adr. to get RMS/VMS value
;00500  0319		FORT_LUN,		! Optional adr. to get FORTRAN logical unit number
;00600  0320		VAX_11_COND_VAL)	! Optional adr. to get VAX-11 condition value
;00700  0321		:NOVALUE =			! No value returned
;00800  0322	!++
;00900  0323	! FUNCTIONAL DESCRIPTION:
;01000  0324	!
;01100  0325	!	Returns information about last FORTRAN error, if any, and clears it to 0
;01200  0326	!	Separate data bases are kept for AST and non-AST level
;01300  0327	!	so that they do not conflict.  That is the last error returned
;01400  0328	!	is that which occurred at the level of the caller (AST level
;01500  0329	!	or not AST level).  Therefore a modular re-entrant procedure
;01600  0330	!	can CALL FOR$ERRSNS and still remain AST re-entrant
;01700  0331	!	provided that FOR$ERRSNS is called after an I/O statement
;01800  0332	!	with no intervening calls (which might call FOR$ERRSNS).
;01900  0333	!	All parameters are optional.  A call with no parameters
;02000  0334	!	has the effect of clearing the error information at the current level.
;02100  0335	!	It is good practice to CALL FOR$ERRSNS before doing
;02200  0336	!	I/O to initialize the OWN storage.  Otherwise a previous
;02300  0337	!	I/O error may have left error information in the OWN storage.
;02400  0338	!	Note: successful I/O operations do not affect the
;02500  0339	!	error information OWN storage.
;02600  0340	!
;02700  0341	! FORMAL PARAMETERS:
;02800  0342	!
;02900  0343	!	[FORT_ERR_NO.wlu.r	Optional adr. to receive FORTRAN error no.
;03000  0344	!	[RMS_STS.wlu.r		Optional adr. to receive RMS status
;03100  0345	!	[RMS_STV.wlu.r		Optional adr. to receive RMS/VMS value
;03200  0346	!	[FORT_LUN.wlu.r	Optional adr. to receive FORTRAN logical unit no.
;03300  0347	!	[VAX_11_COND_VAL.wlc.r]]]]] Optional adr. to receive VAX-11 condition value
;03400  0348	!
;03500  0349	! IMPLICIT INPUTS:
;03600  0350	!
;03700  0351	!	VMS info whether an AST is in progress or not (using LIB$AST_IN_PROG)
;03800  0352	!	Either LAST_ERROR_INFO vector or LAST_AST_INFO vector
;03900  0353	!
;04000  0354	! IMPLICIT OUTPUTS:
;04100  0355	!
;04200  0356	!	Either LAST_ERROR_INFO vector or LAST_AST_INFO vector is cleared
;04300  0357	!	depending on the level of the caller (AST or in progress or not)
;04400  0358	!
;04500  0359	! ROUTINE VALUE:
;04600  0360	! COMPLETION CODES:
;04700  0361	!
;04800  0362	!	NONE
;04900  0363	!
;05000  0364	! SIDE EFFECTS:
;05100  0365	!
;05200  0366	!	The OWN storage used to remember the last error is set to 0.
;05300  0367	!--
;05400  0368	
;05500  0369	    BEGIN

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:16:46	DBB3:[RTL.SRC]FERRSN.B32;8					Page 3-1
;
;05600  0370	    LOCAL
;05700  0371		LAST_INFO: REF VECTOR[NPARMAX+1,LONG];	! Base pointer to either LAST_ERROR_INFO or LAST_AST_INFO
;05800  0372	
;05900  0373	
;06000  0374	    !+
;06100  0375	    ! Determine whether an AST is in progress or not and set up
;06200  0376	    ! base pointer LAST_INFO to point to OWN storage for that level.
;06300  0377	    !-
;06400  0378	
;06500  0379	    LAST_INFO = (IF LIB$AST_IN_PROG () THEN LAST_AST_INFO ELSE LAST_ERROR_INFO);
;06600  0380	
;06700  0381	    !+
;06800  0382	    ! Copy appropriate OWN storage to the caller's parameters
;06900  0383	    ! which are present and clear each OWN storage location.
;07000  0384	    !-
;07100  0385	
;07200  0386	    INCR I FROM 1 TO NPARMAX DO
;07300  0387		BEGIN
;07400  0388		IF NOT NULLPARAMETER (.I) THEN ACTUALPARAMETER(.I) = .LAST_INFO[.I];
;07500  0389		LAST_INFO[.I] = 0;
;07600  0390		END;
;07700  0391	
;07800  0392	    !+
;07900  0393	    ! Return
;08000  0394	    !-
;08100  0395	
;08200  0396	    RETURN
;08300  0397	    END;


							    .TITLE  FOR$ERRSNS
							    .IDENT  \0-11\

							    .PSECT  FOR$DATA,NOEXE,  PIC,2

					      00000 LAST_ERROR_INFO:
							    .BLKB   24
					      00018 LAST_AST_INFO:
							    .BLKB   24

							    .EXTRN  LIB$AST_IN_PROG

							    .PSECT  FOR$CODE,NOWRT,  SHR,  PIC,2

					 0004 00000 	    .ENTRY  FOR$ERRSNS, Save R2					      ; 0315
	      00000000G  00	       00  FB 00002 	    CALLS   #0, LIB$AST_IN_PROG					      ; 0379
		         09 	       50  E9 00009 	    BLBC    R0, 1$						      ;
		         52 00000000'  EF  9E 0000C 	    MOVAB   LAST_AST_INFO, LAST_INFO				      ;
				       07  11 00013 	    BRB     2$							      ;
		         52 00000000'  EF  9E 00015 1$:     MOVAB   LAST_ERROR_INFO, LAST_INFO				      ;
		         50 	       01  D0 0001C 2$:     MOVL    #1, I						      ; 0386
	   6C 	         08 	       00  ED 0001F 3$:     CMPZV   #0, #8, (AP), I					      ; 0388
				       50     00023									      ;
				       0D  19 00024 	    BLSS    4$							      ;
				     6C40  D5 00026 	    TSTL    (AP)[I]						      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:16:46	DBB3:[RTL.SRC]FERRSN.B32;8					Page 3-2
;
				       08  13 00029 	    BEQL    4$							      ;
		         51 	     6C40  D0 0002B 	    MOVL    (AP)[I], R1						      ;
		         61 	     6240  D0 0002F 	    MOVL    (LAST_INFO)[I], (R1)				      ;
				     6240  D4 00033 4$:     CLRL    (LAST_INFO)[I]					      ; 0389
	   E5 	         50 	       05  F3 00036 	    AOBLEQ  #5, I, 3$						      ; 0386
					   04 0003A 	    RET     							      ; 0315

; Routine Size:  59 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:16:46	DBB3:[RTL.SRC]FERRSN.B32;8					Page 4
;
;00100  0398	GLOBAL ROUTINE FOR$ERRSNS_W (	! FORTRAN get last error info - WORD values
;00200  0399					! This routine same as FOR$ERRSNS except for data size.
;00300  0400		FORT_ERR_NO,		! Optional adr. to get FORTRAN error no.
;00400  0401		RMS_STS,		! Optional adr. ro get RMS status
;00500  0402		RMS_STV,		! Optional adr. to get RMS/VMS value
;00600  0403		FORT_LUN,		! Optional adr. to get FORTRAN logical unit number
;00700  0404		VAX_11_COND_VAL)	! Optional adr. to get VAX-11 condition value
;00800  0405		:NOVALUE =			! No value returned
;00900  0406	!++
;01000  0407	! FUNCTIONAL DESCRIPTION:
;01100  0408	!
;01200  0409	!	FOR$ERRSNS and FOR$ERRSNS_W are the same routines except
;01300  0410	!	for the data size returned.
;01400  0411	!	Returns information about last FORTRAN error, if any, and clears it to 0
;01500  0412	!	Separate data bases are kept for AST and non-AST level
;01600  0413	!	so that they do not conflict.  That is the last error returned
;01700  0414	!	is that which occurred at the level of the caller (AST level
;01800  0415	!	or not AST level).  Therefore a modular re-entrant procedure
;01900  0416	!	can CALL FOR$ERRSNS_W and still remain AST re-entrant
;02000  0417	!	provided that FOR$ERRSNS_W is called after an I/O statement
;02100  0418	!	with no intervening calls (which might call FOR$ERRSNS_W).
;02200  0419	!	All parameters are optional.  A call with no parameters
;02300  0420	!	has the effect of clearing the error information at the current level.
;02400  0421	!	It is good practice to CALL FOR$ERRSNS_W before doing
;02500  0422	!	I/O to initialize the OWN storage.  Otherwise a previous
;02600  0423	!	I/O error may have left error information in the OWN storage.
;02700  0424	!	Note: successful I/O operations do not affect the
;02800  0425	!	error information OWN storage.
;02900  0426	!
;03000  0427	! FORMAL PARAMETERS:
;03100  0428	!
;03200  0429	!	[FORT_ERR_NO.wwu.r	Optional adr. to receive FORTRAN error no.
;03300  0430	!	[RMS_STS.wwu.r		Optional adr. to receive RMS status
;03400  0431	!	[RMS_STV.wwu.r		Optional adr. to receive RMS/VMS value
;03500  0432	!	[FORT_LUN.wwu.r		Optional adr. to receive FORTRAN logical unit no.
;03600  0433	!	[VAX_11_COND_VAL.wwu.r]]]]] Optional adr. to receive VAX-11 condition value<15:0>
;03700  0434	!
;03800  0435	! IMPLICIT INPUTS:
;03900  0436	!
;04000  0437	!	VMS info whether an AST is in progress or not (using LIB$AST_IN_PROG)
;04100  0438	!	Either LAST_ERROR_INFO vector or LAST_AST_INFO vector
;04200  0439	!
;04300  0440	! IMPLICIT OUTPUTS:
;04400  0441	!
;04500  0442	!	Either LAST_ERROR_INFO vector or LAST_AST_INFO vector is cleared
;04600  0443	!	depending on the level of the caller (AST or in progress or not)
;04700  0444	!
;04800  0445	! ROUTINE VALUE:
;04900  0446	! COMPLETION CODES:
;05000  0447	!
;05100  0448	!	NONE
;05200  0449	!
;05300  0450	! SIDE EFFECTS:
;05400  0451	!
;05500  0452	!	The OWN storage used to remember the last error is set to 0.

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:16:46	DBB3:[RTL.SRC]FERRSN.B32;8					Page 4-1
;
;05600  0453	!--
;05700  0454	
;05800  0455	    BEGIN
;05900  0456	    LOCAL
;06000  0457		NPARMAX_LONGS: VECTOR[NPARMAX,LONG];	! Five longwords to contain results from FOR$ERRSNS
;06100  0458	
;06200  0459	
;06300  0460	    !+
;06400  0461	    ! Get ERRSNS data into longword LOCAL storage
;06500  0462	    !-
;06600  0463	
;06700  0464	    FOR$ERRSNS (NPARMAX_LONGS[0], NPARMAX_LONGS[1], NPARMAX_LONGS[2],
;06800  0465		NPARMAX_LONGS[3], NPARMAX_LONGS[4]);
;06900  0466	
;07000  0467	    !+
;07100  0468	    ! Copy longwords back to caller's word parameters
;07200  0469	    ! Parameters are 1-origin, VECTOR is 0-origin.
;07300  0470	    !-
;07400  0471	
;07500  0472	    INCR I FROM 1 TO NPARMAX DO
;07600  0473		IF NOT NULLPARAMETER (.I) THEN ACTUALPARAMETER(.I)<0,16> = .NPARMAX_LONGS[.I-1];
;07700  0474	
;07800  0475	    !+
;07900  0476	    ! Return
;08000  0477	    !-
;08100  0478	
;08200  0479	    RETURN
;08300  0480	    END;





					 0000 0003B 	    .ENTRY  FOR$ERRSNS_W, Save nothing				      ; 0398
		         5E 	       14  C2 0003D 	    SUBL2   #20, SP						      ;
				  10   AE  9F 00040 	    PUSHAB  NPARMAX_LONGS+16					      ; 0465
				  10   AE  9F 00043 	    PUSHAB  NPARMAX_LONGS+12					      ;
				  10   AE  9F 00046 	    PUSHAB  NPARMAX_LONGS+8					      ; 0464
				  10   AE  9F 00049 	    PUSHAB  NPARMAX_LONGS+4					      ;
				  10   AE  9F 0004C 	    PUSHAB  NPARMAX_LONGS					      ;
		    AD   AF	       05  FB 0004F 	    CALLS   #5, FOR$ERRSNS					      ;
		         50 	       01  D0 00053 	    MOVL    #1, I						      ; 0472
	   6C 	         08 	       00  ED 00056 1$:     CMPZV   #0, #8, (AP), I					      ; 0473
				       50     0005A									      ;
				       10  19 0005B 	    BLSS    2$							      ;
				     6C40  D5 0005D 	    TSTL    (AP)[I]						      ;
				       0B  13 00060 	    BEQL    2$							      ;
		         51 	     6C40  D0 00062 	    MOVL    (AP)[I], R1						      ;
	   10 	         00 	  FC AE40  F0 00066 	    INSV    NPARMAX_LONGS-4[I], #0, #16, (R1)			      ;
				       61     0006C									      ;
	   E5 	         50 	       05  F3 0006D 2$:     AOBLEQ  #5, I, 1$						      ; 0472
					   04 00071 	    RET     							      ; 0398

; Routine Size:  55 bytes


; Bliss-32 10.1-416	Monday 21-AUG-1978 19:16:46	DBB3:[RTL.SRC]FERRSN.B32;8					Page 4-2
;


; Bliss-32 10.1-416	Monday 21-AUG-1978 19:16:46	DBB3:[RTL.SRC]FERRSN.B32;8					Page 5
;
;00100  0481	GLOBAL ROUTINE FOR$$ERRSNS_SAV (	! Internal FORTRAN routine to save last error info
;00200  0482					! Called whenever an error occurs
;00300  0483		FORT_ERR_NO,		! FORTRAN error number (0:120) or 32-bit cond value
;00310  0484					! for some other facility other than FOR$.
;00400  0485		RMS_STS,		! value to set RMS status
;00500  0486		RMS_STV,		! value to set RMS/VMS value
;00600  0487		FORT_LUN,		! value to set FORTRAN logical unit number
;00700  0488		VAX_11_COND_VAL)	! value to set VAX-11 condition value
;00800  0489		:NOVALUE =			! No value returned
;00900  0490	!++
;01000  0491	! FUNCTIONAL DESCRIPTION:
;01100  0492	!
;01200  0493	!	Called on every error condition.  Sets FORTRAN error info OWN storage
;01300  0494	!	for use in sub-sequent calls by FOR$ERRSNS and FOR$ERRSNS_W.
;01400  0495	!	Separate data bases are kept for AST and non-AST level
;01500  0496	!	so that they do not conflict.  That is the last error returned
;01600  0497	!	is that which occurred at the level of the caller (AST level
;01700  0498	!	or not AST level).  Therefore a modular re-entrant procedure
;01800  0499	!	can CALL FOR$ERRSNS_SAV and still remain AST re-entrant
;01900  0500	!	Note: successful I/O operations do not affect the
;02000  0501	!	error information OWN storage.
;02100  0502	!	Non-FORTRAN specific errors should be indicated with:
;02200  0503	!		FORT_ERR_NO = 32-bit condition value (not FOR$ facility)
;02300  0504	!		VAX_11_COND_VAL = same, ie. OTS$_FATINTERR, OTS$_INTDATCOR
;02310  0505	!	In this case, the FORTRAN error number stored will be FOR$K_NOTFORSPE
;02320  0506	!	which has a value of 1 and indicated a non-FORTRAN specific error.
;02400  0507	!
;02500  0508	! FORMAL PARAMETERS:
;02600  0509	!
;02700  0510	!	FORT_ERR_NO.rlu.v	value to specify FORTRAN error number (0:120)
;02710  0511	!				or 32-bit condition value for another facility error.
;03000  0512	!	RMS_STS.wlu.v		value to set RMS status
;03100  0513	!	RMS_STV.wlu.v		value to set RMS/VMS value
;03200  0514	!	FORT_LUN.wlu.v		value to set FORTRAN logical unit no.
;03300  0515	!	VAX_11_COND_VAL.wlc.v	value to set VAX-11 condition value
;03500  0516	!
;03600  0517	! IMPLICIT INPUTS:
;03700  0518	!
;03800  0519	!	VMS info whether an AST is in progress or not (using LIB$AST_IN_PROG)
;03900  0520	!
;04000  0521	! IMPLICIT OUTPUTS:
;04100  0522	!
;04200  0523	!	Either LAST_ERROR_INFO vector or LAST_AST_INFO vector is set
;04300  0524	!	depending on the level of the caller (AST or in progress or not)
;04400  0525	!
;04500  0526	! ROUTINE VALUE:
;04600  0527	! COMPLETION CODES:
;04700  0528	!
;04800  0529	!	NONE
;04900  0530	!
;05000  0531	! SIDE EFFECTS:
;05100  0532	!
;05200  0533	!	The OWN storage used to remember the last error is set.
;05300  0534	!--
;05400  0535	

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:16:46	DBB3:[RTL.SRC]FERRSN.B32;8					Page 5-1
;
;05500  0536	    BEGIN
;05600  0537	    MAP
;05700  0538		VAX_11_COND_VAL : BLOCK[4, BYTE];	! Condition value
;05800  0539	    LOCAL
;05900  0540		LAST_INFO: REF VECTOR[NPARMAX+1,LONG];	! Base pointer to either LAST_ERROR_INFO or LAST_AST_INFO
;06000  0541	
;06100  0542	
;06200  0543	    !+
;06300  0544	    ! Determine whether an AST is in progress or not and set up
;06400  0545	    ! base pointer LAST_INFO to point to OWN storage for that level.
;06500  0546	    !-
;06600  0547	
;06700  0548	    LAST_INFO = (IF LIB$AST_IN_PROG () THEN LAST_AST_INFO ELSE LAST_ERROR_INFO);
;06800  0549	
;06900  0550	    !+
;07000  0551	    ! Copy all formals to OWN storage
;07100  0552	    !-
;07200  0553	
;07300  0554	    INCR I FROM 1 TO NPARMAX DO
;07400  0555		LAST_INFO[.I] = ACTUALPARAMETER(.I);
;07410  0556	
;07420  0557	    !+
;07430  0558	    ! Check FORTRAN error number, if already a 32-bit condition value
;07440  0559	    ! change to FOR$K_NOTFORSPE to indicate a non-FORTRAN specific error
;07450  0560	    ! (error number = 1).
;07460  0561	    !-
;07470  0562	
;07480  0563	    IF .FORT_ERR_NO GTRU FOR$K_MAX_ERR
;07490  0564	    THEN
;07495  0565		LAST_INFO[1] = FOR$K_NOTFORSPE;
;07500  0566	
;07600  0567	    !+
;07700  0568	    ! Return
;07800  0569	    !-
;07900  0570	
;08000  0571	    RETURN
;08100  0572	    END;





					 0000 00072 	    .ENTRY  FOR$$ERRSNS_SAV, Save nothing			      ; 0481
	      00000000G  00	       00  FB 00074 	    CALLS   #0, LIB$AST_IN_PROG					      ; 0548
		         09 	       50  E9 0007B 	    BLBC    R0, 1$						      ;
		         51 00000000'  EF  9E 0007E 	    MOVAB   LAST_AST_INFO, LAST_INFO				      ;
				       07  11 00085 	    BRB     2$							      ;
		         51 00000000'  EF  9E 00087 1$:     MOVAB   LAST_ERROR_INFO, LAST_INFO				      ;
		         50 	       01  D0 0008E 2$:     MOVL    #1, I						      ; 0554
		       6140 	     6C40  D0 00091 3$:     MOVL    (AP)[I], (LAST_INFO)[I]				      ; 0555
	   F7 	         50 	       05  F3 00096 	    AOBLEQ  #5, I, 3$						      ; 0554
	      0000005D   8F	  04   AC  D1 0009A 	    CMPL    FORT_ERR_NO, #93					      ; 0563
				       04  1B 000A2 	    BLEQU   4$							      ;
		    04   A1	       01  D0 000A4 	    MOVL    #1, 4(LAST_INFO)					      ; 0565
					   04 000A8 4$:     RET     							      ; 0481

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:16:46	DBB3:[RTL.SRC]FERRSN.B32;8					Page 5-2
;

; Routine Size:  55 bytes


;08200  0573	END				! end of module
;08300  0574	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  FOR$DATA       	    48    WRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
;  FOR$CODE       	   169  NOWRT,  RD ,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]STARLET.L32;1		      2688         0         0       107





; Size:		169 code + 48 data bytes
; Run Time:	00:06.5
; Elapsed Time:	00:16.6
; Memory Used:	141 pages
; Compilation Complete
