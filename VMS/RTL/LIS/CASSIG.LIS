
; Bliss-32 10.1-416	Monday 21-AUG-1978 19:11:06	DBB3:[RTL.SRC]CASSIG.B32;18					Page 1
;
;00100  0001	MODULE COM$ASSIGN (	! FORTRAN  compatibility CALL ASSIGN routine
;00200  0002		IDENT = '0-18',	! File: CASSIG.B32
;00300  0003		LINKAGE (FORTRAN)	! Call-by reference
;00400  0004			) =
;00500  0005	BEGIN
;00600  0006	
;00700  0007	!
;00800  0008	!			  COPYRIGHT (c) 1977 BY
;00900  0009	!	      DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;01000  0010	!
;01100  0011	! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
;01200  0012	! ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
;01300  0013	! INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
;01400  0014	! COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
;01500  0015	! OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
;01600  0016	! TRANSFERRED.
;01700  0017	!
;01800  0018	! THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
;01900  0019	! AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
;02000  0020	! CORPORATION.
;02100  0021	!
;02200  0022	! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
;02300  0023	! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;02400  0024	!
;02500  0025	
;02600  0026	!++
;02700  0027	! FACILITY:  FORTRAN Compatibility Library
;02800  0028	!
;02900  0029	! ABSTRACT:
;03000  0030	!
;03100  0031	!	Assign logical name to unit to be in effect until call CLOSE
;03200  0032	!
;03300  0033	! ENVIRONMENT:  User Mode - AST re-entrant
;03400  0034	!
;03500  0035	! AUTHOR:  Thomas N. Hastings, CREATION DATE:  8-Aug-1977
;03600  0036	!
;03700  0037	! MODIFIED BY:
;03800  0038	!
;03900  0039	! 	Thomas N. Hastings, 31-Oct-1977: VERSION 0
;04000  0040	! 01	- original
;04100  0041	! 0-3	- changed file name to FASSIG.B32.  TNH 7-Nov-77
;04200  0042	! 0-5	- Use FOR$$SIG_FATINT.  TNH 1-Dec-77
;04300  0043	! 0-6	- Change file name.  TNH 2-Dec-77
;04400  0044	! 0-7	- PSECT COM$, clear core.  TNH 8-Dec-77
;04500  0045	! 0-8	- Setup NAME_DSC_PTR if array.  TNH 9-Dec-77
;04600  0046	! 0-9	- PSECT F4PCOMPAT$CODE.  TNH 9-Jan-78.
;04700  0047	! 0-10	- Global register CCB.  JMT 8-Apr-78
;04800  0048	! 0-11	- Change to STARLET library. DGP 20-Apr-78
;04900  0049	! 0-12	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
;05000  0050	! 0-13	- Change STARLET to RTLSTARLE to avoid conflicts.  DGP 1-May-78
;05100  0051	! 0-14	- Use JSB linkage.  TNH 22-May-78
;05200  0052	! 0-15	- Pass OPEN$K_LUN_MIN to CB_PUSH.  TNH 22-May-78
;05300  0053	! 0-16	- Treat 0 count as if not present.  TNH 12-June-78
;05400  0054	! 0-18	- Copy FOR$$OPEN_FNAME from FOPEN.B32 and make local routine.
;05500  0055	!	  Therefore do not need to make a $$ entry point.  TNH 1-Aug-78

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:11:06	DBB3:[RTL.SRC]CASSIG.B32;18					Page 1-1
;
;05600  0056	!--

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:11:06	DBB3:[RTL.SRC]CASSIG.B32;18					Page 2
;
;00100  0057	!
;00200  0058	! LINKAGES:
;00300  0059	!
;00400  0060	REQUIRE 'RTLIN:FLNK';		! Define all linkages
; %PRINT:	File: FLNK.B32; Version 1, edit 12, TNH 2-Aug-78
;00500  0282	
;00600  0283	!
;00700  0284	! TABLE OF CONTENTS:
;00800  0285	!
;00900  0286	
;01000  0287	FORWARD ROUTINE
;01100  0288		ASSIGN: NOVALUE,	!  Assign logical name - no prefix
;01200  0289		OPEN_FNAME: NOVALUE;	!  Edit filename string (like OPEN)
;01300  0290	
;01400  0291	!
;01500  0292	! INCLUDE FILES:
;01600  0293	!
;01700  0294		REQUIRE 'RTLML:FERR';		! FORTRAN error number definitions
; %PRINT:	Filename: FERR.MDL! Version 0, edit 36, TNH 19-June-78
;01800  0412		REQUIRE	'RTLML:FLUB';		! FORTRAN logical unit block definitions
; %PRINT:	File: FLUB.MDL which produces FLUB.B32! Version 0, edit 30, TNH, 17-June-78
;01900  0580		REQUIRE 'RTLIN:FMAC';		! Define macros
; %PRINT:	Filename: FMAC.B32; Version 1, edit 29, TNH, 7-JUN-78
; %PRINT:	 REQUIRE FILE: LPSECT.B32, VERSION 01-5, TNH, 27-Jun-78
;02000  0760		REQUIRE 'RTLIN:FOPN';		! Decalre OPEN parameters
; %PRINT:	Filename: FOPN.B32; version 0, edit 22, TNH, 30-May-78
;02100  0899		REQUIRE 'RTLML:FPAR';		! Define inter-module parameters
; %PRINT:	File: FPAR.MDL! version 0, edit 11, TNH, 30-May-78
;02200  1001		LIBRARY 'RTLSTARLE';	! All STARLET macros and symbols
;02300  1002	!
;02400  1003	! MACROS:
;02500  1004	!
;02600  1005	
;02700  1006	!
;02800  1007	! EQUATED SYMBOLS:
;02900  1008	!
;03000  1009	
;03100  1010	!
;03200  1011	! PSECT DECLARATIONS:
;03300  1012	!
;03400  1013	
;03500  1014		DECLARE_PSECTS (F4PCOMPAT);	! declare PSECTs for COM$ facility
;03600  1015						! F4PCOMPAT$CODE, F4PCOMPAT$DATA
;03700  1016	
;03800  1017	!
;03900  1018	! OWN STORAGE:
;04000  1019	!
;04100  1020	
;04200  1021	!
;04300  1022	! EXTERNAL REFERENCES:
;04400  1023	!
;04500  1024	
;04600  1025	EXTERNAL ROUTINE
;04700  1026		FOR$$SIGNAL_STO: NOVALUE ADDRESSING_MODE (GENERAL),	! SIGNAL_STOP errors
;04800  1027		FOR$$GET_VM: ADDRESSING_MODE (GENERAL),			! Allocate virtual memory for current unit

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:11:06	DBB3:[RTL.SRC]CASSIG.B32;18					Page 2-1
;
;04900  1028		FOR$$FREE_VM: NOVALUE ADDRESSING_MODE (GENERAL),	! deallocate virtual memory for current unit
;05000  1029		FOR$$CB_PUSH: JSB_CB_PUSH NOVALUE ADDRESSING_MODE (GENERAL),	! Push down current logical unit if any 
;05100  1030									! and allocate LUB/ISB/RAB if not already
;05200  1031		FOR$$CB_POP: JSB_CB_POP NOVALUE ADDRESSING_MODE (GENERAL),	! Pop up current logical unit
;05300  1032		FOR$$ERR_OPECLO: NOVALUE;				! Error handler

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:11:06	DBB3:[RTL.SRC]CASSIG.B32;18					Page 3
;
;00100  1033	GLOBAL ROUTINE ASSIGN (		!  Assign logical name to unit
;00200  1034		LOGICAL_UNIT,		! Adr. of word containing logical unit
;00300  1035		NAME_ARRAYORDSC,	! Optional adr of array of ASCIZ cgaracters or adr if descr,
;00400  1036		NAME_COUNT)		! Optional adr. of word containing character count
;00500  1037		: NOVALUE =
;00600  1038	!++
;00700  1039	! FUNCTIONAL DESCRIPTION:
;00800  1040	!
;00900  1041	!	Assign filename string to logical unit until CALL CLOSE.
;01000  1042	!	Leading, trailing and imbedded spaces are removed.
;01100  1043	!	Lowercase is converted to upper case.
;01200  1044	!
;01300  1045	! FORMAL PARAMETERS:
;01400  1046	!
;01500  1047	!	LOGICAL_UNIT.rw.r		Adr. of word containing logical unit
;01600  1048	!	[NAME_ARRAYORDSC.rt{ra|ds}	Adr. of array of characters or adr. of descriptor of file name
;01700  1049	!	[NAME_COUNTrw.r]]		Optional adr. or word containing cont of no. of characters
;01800  1050	!					If count is 0, or arg omitted, scan array for null.
;01900  1051	!
;02000  1052	! IMPLICIT INPUTS:
;02100  1053	!
;02200  1054	!	OTS$$A_CUR_LUB			Adr. of current LUB/ISB/RAB
;02300  1055	!	LUB$A_FAB			Adr. of FAB if assigned to LUB
;02400  1056	!
;02500  1057	! IMPLICIT OUTPUTS:
;02600  1058	!
;02700  1059	!	LUB$A_FAB			Set to adr. of allocated FAB
;02800  1060	!
;02900  1061	! ROUTINE VALUE:
;03000  1062	! COMPLETION CODES:
;03100  1063	!
;03200  1064	!	NONE
;03300  1065	!
;03400  1066	! SIDE EFFECTS:
;03500  1067	!
;03600  1068	!	Allocate LUB/ISB/RAB and FAB  and RMS name block if not already
;03700  1069	!	SIGNAL_STOPs the following errors:
;03800  1070	!	FOR$_INSVIRMEM = INSUFFICIENT VIRTUAL MEMORY
;03900  1071	!	FOR$_UNIALROPE = UNIT ALREADY OPENED
;04000  1072	!	OTS$_FATINTERR = FATAL INTERNAL ERROR IN RUN-TIME LIBRARY
;04100  1073	!--
;04200  1074	
;04300  1075	    BEGIN
;04400  1076	    GLOBAL REGISTER
;04500  1077		CCB = 11: REF BLOCK[, BYTE];
;04600  1078	
;04700  1079	    MAP
;04800  1080		LOGICAL_UNIT: REF VECTOR[1, WORD],	! Pass word by-reference
;04900  1081		NAME_COUNT: REF VECTOR[1, WORD];	! Pass word by-reference
;05000  1082	    LOCAL
;05100  1083		FAB: REF BLOCK[FAB$K_BLN, BYTE],	! base ptr to FAB
;05200  1084		NAME_DSC_PTR: REF DSC$DESCRIPTOR,	! Pointer to name descriptor - either points to callers
;05300  1085						! descriptor or to LOCAL NAME_DSC if caller passes by reference.
;05400  1086		NAME_DSC: DSC$DESCRIPTOR,	! String descriptor for file name
;05500  1087		L_UNWIND_ACTION: VOLATILE;	! Unwind action for error handler

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:11:06	DBB3:[RTL.SRC]CASSIG.B32;18					Page 3-1
;
;05600  1088	    ENABLE
;05700  1089		FOR$$ERR_OPECLO (L_UNWIND_ACTION);	! Enable error handler
;05800  1090	
;05900  1091	    !+
;06000  1092	    ! Indicate no unwind action until LUB/ISB/RAB successfully pushed down
;06100  1093	    !-
;06200  1094	
;06300  1095	    L_UNWIND_ACTION = FOR$K_UNWINDNOP;
;06400  1096	
;06500  1097	    !+
;06600  1098	    ! Pushdown I/O system and allocate LUB/ISB/RAB for logical unit if not already allocated
;06700  1099	    ! SIGNAL_STOP if any errors.
;06800  1100	    ! If no errors, change error UNWIND action to pop LUB/ISB/RAB if an unwind should occur.
;06900  1101	    ! On return, CCB points to the current control block
;07000  1102	    !-
;07100  1103	
;07200  1104	    FOR$$CB_PUSH (.LOGICAL_UNIT[0], OPEN$K_LUN_MIN);
;07300  1105	    L_UNWIND_ACTION = FOR$K_UNWINDPOP;
;07400  1106	
;07500  1107	    !+
;07600  1108	    ! If unit already opened, SIGNAL_STOP FOR$_UNIALROPE (43 = 'UNIT ALREADY OPENED')
;07700  1109	    !-
;07800  1110	
;07900  1111	    IF .CCB[LUB$V_OPENED] THEN FOR$$SIGNAL_STO (FOR$K_UNIALROPE);
;08000  1112	
;08100  1113	    !+
;08200  1114	    ! If filename present, build a descriptor for string
;08300  1115	    !-
;08400  1116	
;08500  1117	    IF NOT NULLPARAMETER (2)
;08600  1118	    THEN
;08700  1119		BEGIN
;08800  1120	
;08900  1121		!+
;09000  1122		! Assume NAMEARRAYORDSC is adr. of descriptor (caller using a string expression)
;09100  1123		! Note: the detection of whether a descriptor or not is not completely fool proof.
;09200  1124		!-
;09300  1125	
;09400  1126		NAME_DSC_PTR = .NAME_ARRAYORDSC;
;09500  1127		IF .NAME_DSC_PTR[DSC$W_LENGTH] GTRU 255 OR .NAME_DSC_PTR[DSC$B_DTYPE] NEQU DSC$K_DTYPE_T
;09600  1128							OR .NAME_DSC_PTR[DSC$B_CLASS] NEQU DSC$K_CLASS_S
;09700  1129		THEN
;09800  1130	
;09900  1131		    !+
;10000  1132		    ! NAME_ARRAY really is an array, not a descriptor.
;10100  1133		    ! Set pointer to LOCAL string descriptor NAME_DSC which will be filled in.
;10200  1134		    ! Set length from NAME_COUNT if present and not 0, else scan string for null.
;10300  1135		    ! Set pointer to start of string.
;10400  1136		    !-
;10500  1137	
;10600  1138		    BEGIN
;10700  1139		    NAME_DSC_PTR = NAME_DSC;
;10800  1140		    NAME_DSC[DSC$A_POINTER] = .NAME_ARRAYORDSC;
;10900  1141		    NAME_DSC[DSC$W_LENGTH] =
;11000  1142			(IF NOT NULLPARAMETER (3)

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:11:06	DBB3:[RTL.SRC]CASSIG.B32;18					Page 3-2
;
;11100  1143			 THEN
;11200  1144			    IF .NAME_COUNT[0] NEQ 0
;11300  1145			    THEN
;11400  1146				.NAME_COUNT[0]
;11500  1147			    ELSE
;11600  1148				MINU ((CH$FIND_CH (OPEN$K_STR_MAX, .NAME_ARRAYORDSC, 0) - .NAME_ARRAYORDSC), OPEN$K_STR_MAX)
;11700  1149			 ELSE
;11800  1150			    MINU ((CH$FIND_CH (OPEN$K_STR_MAX, .NAME_ARRAYORDSC, 0) - .NAME_ARRAYORDSC), OPEN$K_STR_MAX));
;11900  1151		    END;
;12000  1152	
;12100  1153		!+
;12200  1154		! If FAB not already allocated (no previous CALL FDBSET or CALL ASSIGN) set one up.
;12300  1155		! Clear FAB$B_FNS and FAB$L_FNA to indicate filename string not allocated.
;12400  1156		!_
;12500  1157	
;12600  1158		IF (FAB = .CCB[LUB$A_FAB]) EQL 0
;12700  1159		THEN
;12800  1160		    BEGIN
;12900  1161		    FAB = FOR$$GET_VM (FAB$K_BLN);
;13000  1162		    CH$FILL (0, FAB$K_BLN, .FAB);
;13100  1163		    CCB[LUB$A_FAB] = .FAB;
;13200  1164		    FAB[FAB$B_BID] = FAB$C_BID;
;13300  1165		    FAB[FAB$B_BLN] = FAB$K_BLN;
;13400  1166		    END
;13500  1167	
;13600  1168		ELSE
;13700  1169	
;13800  1170		    !+
;13900  1171		    ! FAB already setup and a filename string already present (previous CALL ASSIGN) deallocate it.
;14000  1172		    !-
;14100  1173	
;14200  1174		    BEGIN
;14300  1175		    IF .FAB[FAB$L_FNA] NEQA 0
;14400  1176		    THEN
;14500  1177			BEGIN
;14600  1178			FOR$$FREE_VM (.FAB[FAB$B_FNS], .FAB[FAB$L_FNA]);
;14700  1179			FAB[FAB$B_FNS] = 0;
;14800  1180			FAB[FAB$L_FNA] = 0;
;14900  1181			END;
;15000  1182		    END;
;15100  1183	
;15200  1184		!+
;15300  1185		! Copy string from user to dynamically allocated area
;15400  1186		! and set FAB to point to string.  Strip out leading, embedded and trailing spaces.
;15500  1187		! Convert lower case to upper case.  OPEN_FNAME expects FAB to be already allocatted
;15600  1188		! with no filename allocated.
;15700  1189		!-
;15800  1190	
;15900  1191		OPEN_FNAME (.NAME_DSC_PTR, .FAB);
;16000  1192		END;
;16100  1193	
;16200  1194	
;16300  1195	    !+
;16400  1196	    ! Pop LUB/ISB/RAB to previous if any.
;16500  1197	    !-

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:11:06	DBB3:[RTL.SRC]CASSIG.B32;18					Page 3-3
;
;16600  1198	
;16700  1199	    FOR$$CB_POP ();
;16800  1200	    RETURN				! return to caller leaving FAB allocated.
;16900  1201	    END;


							    .TITLE  COM$ASSIGN
							    .IDENT  \0-18\

							    .EXTRN  FOR$$SIGNAL_STO, FOR$$GET_VM, FOR$$FREE_VM, FOR$$CB_PUSH
							    .EXTRN  FOR$$CB_POP, FOR$$ERR_OPECLO

							    .PSECT  F4PCOMPAT$CODE,NOWRT,  SHR,  PIC,2

					 08FC 00000 	    .ENTRY  ASSIGN, Save R2,R3,R4,R5,R6,R7,R11			      ; 1033
		         5E 	       08  C2 00002 	    SUBL2   #8, SP						      ;
				       7E  D4 00005 	    CLRL    L_UNWIND_ACTION					      ; 1075
		         6D 000000D1   EF  DE 00007 	    MOVAL   12$, (FP)						      ;
		         6E 	       01  D0 0000E 	    MOVL    #1, L_UNWIND_ACTION					      ; 1095
		         52 	  04   BC  3C 00011 	    MOVZWL  @LOGICAL_UNIT, R2					      ; 1104
				       50  D4 00015 	    CLRL    R0							      ;
			    00000000G  00  16 00017 	    JSB     FOR$$CB_PUSH					      ;
				       6E  D4 0001D 	    CLRL    L_UNWIND_ACTION					      ; 1105
		         09 	  FC   AB  E9 0001F 	    BLBC    -4(CCB), 1$						      ; 1111
				       22  DD 00023 	    PUSHL   #34							      ;
	      00000000G  00	       01  FB 00025 	    CALLS   #1, FOR$$SIGNAL_STO					      ;
		         02 	       6C  91 0002C 1$:     CMPB    (AP), #2						      ; 1117
				       03  1E 0002F 	    BGEQU   3$							      ;
				     00A3  31 00031 2$:     BRW     11$							      ;
				  08   AC  D5 00034 3$:     TSTL    8(AP)						      ;
				       F8  13 00037 	    BEQL    2$							      ;
		         52 	  08   AC  D0 00039 	    MOVL    NAME_ARRAYORDSC, R2					      ; 1126
		         57 	       52  D0 0003D 	    MOVL    R2, NAME_DSC_PTR					      ;
		  00FF   8F	       67  B1 00040 	    CMPW    (NAME_DSC_PTR), #255				      ; 1127
				       0C  1A 00045 	    BGTRU   4$							      ;
		         0E 	  02   A7  91 00047 	    CMPB    2(NAME_DSC_PTR), #14				      ;
				       06  12 0004B 	    BNEQ    4$							      ;
		         01 	  03   A7  91 0004D 	    CMPB    3(NAME_DSC_PTR), #1					      ; 1128
				       3B  13 00051 	    BEQL    8$							      ;
		         57 	  04   AE  9E 00053 4$:     MOVAB   NAME_DSC, NAME_DSC_PTR				      ; 1139
		    08   AE	       52  D0 00057 	    MOVL    R2, NAME_DSC+4					      ; 1140
		         03 	       6C  91 0005B 	    CMPB    (AP), #3						      ; 1142
				       10  1F 0005E 	    BLSSU   5$							      ;
				  0C   AC  D5 00060 	    TSTL    12(AP)						      ;
				       0B  13 00063 	    BEQL    5$							      ;
				  0C   BC  B5 00065 	    TSTW    @NAME_COUNT						      ; 1144
				       06  13 00068 	    BEQL    5$							      ;
		         51 	  0C   BC  3C 0006A 	    MOVZWL  @NAME_COUNT, R1					      ;
				       1A  11 0006E 	    BRB     7$							      ;
	   62 	  0064   8F	       00  3A 00070 5$:     LOCC    #0, #100, (R2)					      ; 1150
				       02  12 00076 	    BNEQ    6$							      ;
				       51  D4 00078 	    CLRL    R1							      ;
		         51 	       52  C2 0007A 6$:     SUBL2   R2, R1						      ;
	      00000064   8F	       51  D1 0007D 	    CMPL    R1, #100						      ;
				       04  1B 00084 	    BLEQU   7$							      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:11:06	DBB3:[RTL.SRC]CASSIG.B32;18					Page 3-4
;
		         51 	  64   8F  9A 00086 	    MOVZBL  #100, R1						      ;
		    04   AE	       51  B0 0008A 7$:     MOVW    R1, NAME_DSC					      ; 1141
		         56 	  E8   AB  D0 0008E 8$:     MOVL    -24(CCB), FAB					      ; 1158
				       21  12 00092 	    BNEQ    9$							      ;
		         7E 	  50   8F  9A 00094 	    MOVZBL  #80, -(SP)						      ; 1161
	      00000000G  00	       01  FB 00098 	    CALLS   #1, FOR$$GET_VM					      ;
		         56 	       50  D0 0009F 	    MOVL    R0, FAB						      ;
	   00 	         6E 	       00  2C 000A2 	    MOVC5   #0, (SP), #0, #80, (FAB)				      ; 1162
		         66 	0050   8F     000A6									      ;
		    E8   AB	       56  D0 000AA 	    MOVL    FAB, -24(CCB)					      ; 1163
		         66 	5003   8F  B0 000AE 	    MOVW    #20483, (FAB)					      ; 1164
				       19  11 000B3 	    BRB     10$							      ; 1158
				  2C   A6  D5 000B5 9$:     TSTL    44(FAB)						      ; 1175
				       14  13 000B8 	    BEQL    10$							      ;
				  2C   A6  DD 000BA 	    PUSHL   44(FAB)						      ; 1178
		         7E 	  34   A6  9A 000BD 	    MOVZBL  52(FAB), -(SP)					      ;
	      00000000G  00	       02  FB 000C1 	    CALLS   #2, FOR$$FREE_VM					      ;
				  34   A6  94 000C8 	    CLRB    52(FAB)						      ; 1179
				  2C   A6  D4 000CB 	    CLRL    44(FAB)						      ; 1180
				       56  DD 000CE 10$:    PUSHL   FAB							      ; 1191
				       57  DD 000D0 	    PUSHL   NAME_DSC_PTR					      ;
		  0000V  CF	       02  FB 000D2 	    CALLS   #2, OPEN_FNAME					      ;
			    00000000G  00  16 000D7 11$:    JSB     FOR$$CB_POP						      ; 1199
					   04 000DD 	    RET     							      ; 1033
					 0000 000DE 12$:    .WORD   Save nothing					      ; 1075
		         50 	  08   AC  D0 000E0 	    MOVL    8(AP), R0						      ;
		         50 	  04   A0  D0 000E4 	    MOVL    4(R0), R0						      ;
				  F4   A0  9F 000E8 	    PUSHAB  L_UNWIND_ACTION					      ;
				       01  DD 000EB 	    PUSHL   #1							      ;
				       5E  DD 000ED 	    PUSHL   SP							      ;
		         7E 	  04   AC  7D 000EF 	    MOVQ    4(AP), -(SP)					      ;
		  0000G  CF	       03  FB 000F3 	    CALLS   #3, FOR$$ERR_OPECLO					      ;
					   04 000F8 	    RET     							      ;

; Routine Size:  249 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:11:06	DBB3:[RTL.SRC]CASSIG.B32;18					Page 4
;
;00100  1202	ROUTINE OPEN_FNAME (	! Copy filename, strip out spaces
;00200  1203		FNAME_DSC,			! Adr. of unedited file name descriptor
;00300  1204		FAB)			! Adr. of current FAB
;00400  1205		:NOVALUE =			! Value returned is RMS completion code
;00500  1206	!++
;00600  1207	! FUNCTIONAL DESCRIPTION:
;00700  1208	!	Copies filename string suppressing leading, trailing and embedded blanks to current FAB.
;00800  1209	!	Embedded blanks can occur if FORTRAN program concatenates strings together.
;00900  1210	!	Allocates just enough storage for edited string and stores lenfth/address in FAB
;01000  1211	!	Lower case letters are converted to uppercase since RMS logical names do not do that.
;01100  1212	!	Note: this is a copy of routine FOR$$OPEN_FNAME
;01200  1213	!	which is in module FOPEN.B32.  However, calling that one
;01300  1214	!	would require a $$ entry vector (or putting FOR$$OPEN_FNAME
;01400  1215	!	in a separate module) so that there woule not be a multilply
;01500  1216	!	defined symbol FOR$OPEN if user calls FOR$OPEN.
;01600  1217	!
;01700  1218	! FORMAL PARAMETERS:
;01800  1219	!
;01900  1220	!	FNAME_DSC.rt.ds		Adr. of filename descriptor
;02000  1221	!	FAB.mz.r	Adr. of FAB
;02100  1222	!
;02200  1223	! IMPLICIT INPUTS:
;02300  1224	!
;02400  1225	!	NONE
;02500  1226	!
;02600  1227	! IMPLICIT OUTPUTS:
;02700  1228	!
;02800  1229	!	FAB$B_FNS	Size of string allocated
;02900  1230	!	FAB$L_FNA	Adr. of string
;03000  1231	!
;03100  1232	! ROUTINE VALUE:
;03200  1233	! COMPLETION CODES:
;03300  1234	!
;03400  1235	!	NONE
;03500  1236	!
;03600  1237	! SIDE EFFECTS:
;03700  1238	!
;03800  1239	!	Allocates storage for edited filename string.
;03900  1240	!--
;04000  1241	
;04100  1242	    BEGIN
;04200  1243	    MAP
;04300  1244		FNAME_DSC: REF DSC$DESCRIPTOR,
;04400  1245		FAB: REF BLOCK[FAB$C_BLN, BYTE];
;04500  1246	    LOCAL
;04600  1247		P,		! temporary source string pointer
;04700  1248		Q,		! temporary destination string pointer
;04800  1249		LENGTH;		! length of edited string
;04900  1250	
;05000  1251	    !+
;05100  1252	    ! Count number of characters in string.  Set length in FAB.
;05200  1253	    !-
;05300  1254	
;05400  1255	    P = .FNAME_DSC[DSC$A_POINTER];
;05500  1256	    LENGTH = .FNAME_DSC[DSC$W_LENGTH];

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:11:06	DBB3:[RTL.SRC]CASSIG.B32;18					Page 4-1
;
;05600  1257	    INCR I FROM 1 TO .LENGTH DO
;05700  1258		IF RBYTE_A(P) EQLU %C' ' THEN LENGTH = .LENGTH - 1;
;05800  1259	
;05900  1260	    IF .LENGTH EQLU 0 THEN FOR$$SIGNAL_STO (FOR$K_FILNAMSPE);
;06000  1261	    IF .LENGTH GTRU 255 THEN FOR$$SIGNAL_STO (FOR$K_INVARGFOR);
;06100  1262	
;06200  1263	    !+
;06300  1264	    ! Allocate # of non-blank characters and save address and length in FAB
;06400  1265	    !-
;06500  1266	
;06600  1267	    FAB[FAB$L_FNA] = FOR$$GET_VM (.LENGTH);
;06700  1268	    FAB[FAB$B_FNS] = .LENGTH;
;06800  1269	
;06900  1270	    !+
;07000  1271	    ! Copy string converting lower case to upper case and stripping out blanks
;07100  1272	    !-
;07200  1273	
;07300  1274	    P = .FNAME_DSC[DSC$A_POINTER];
;07400  1275	    Q = .FAB[FAB$L_FNA];
;07500  1276	    INCR I FROM 1 TO .FNAME_DSC[DSC$W_LENGTH] DO
;07600  1277		BEGIN
;07700  1278		LOCAL T;
;07800  1279		IF (T = RBYTE_A (P)) NEQU %C' '
;07900  1280		THEN
;08000  1281		    CH_WCHAR_A (Q) =
;08100  1282			(IF .T GEQU %C'a' AND .T LEQU %C'z'
;08200  1283			 THEN
;08300  1284			    .T - (%C'a' - %C'A')
;08400  1285			 ELSE
;08500  1286			    .T)
;08600  1287		END;
;08700  1288	
;08800  1289	    RETURN;
;08900  1290	    END;		! End of OPEN_FNAME routine





					 00FC 000F9 OPEN_FNAME:
							    .WORD   Save R2,R3,R4,R5,R6,R7				      ; 1202
		         57 00000000G  00  9E 000FB 	    MOVAB   FOR$$SIGNAL_STO, R7					      ;
		         53 	  04   AC  D0 00102 	    MOVL    FNAME_DSC, R3					      ; 1255
		         55 	  04   A3  D0 00106 	    MOVL    4(R3), P						      ;
		         56 	       63  3C 0010A 	    MOVZWL  (R3), R6						      ; 1256
		         54 	       56  D0 0010D 	    MOVL    R6, LENGTH						      ;
		         51 	       54  D0 00110 	    MOVL    LENGTH, R1						      ; 1257
				       50  D4 00113 	    CLRL    I							      ;
				       07  11 00115 	    BRB     2$							      ;
		         20 	       85  91 00117 1$:     CMPB    (P)+, #32						      ; 1258
				       02  12 0011A 	    BNEQ    2$							      ;
				       54  D7 0011C 	    DECL    LENGTH						      ;
	   F5 	         50 	       51  F3 0011E 2$:     AOBLEQ  R1, I, 1$						      ; 1257
				       54  D5 00122 	    TSTL    LENGTH						      ; 1260
				       05  12 00124 	    BNEQ    3$							      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:11:06	DBB3:[RTL.SRC]CASSIG.B32;18					Page 4-2
;
				       2B  DD 00126 	    PUSHL   #43							      ;
		         67 	       01  FB 00128 	    CALLS   #1, FOR$$SIGNAL_STO					      ;
	      000000FF   8F	       54  D1 0012B 3$:     CMPL    LENGTH, #255					      ; 1261
				       05  1B 00132 	    BLEQU   4$							      ;
				       30  DD 00134 	    PUSHL   #48							      ;
		         67 	       01  FB 00136 	    CALLS   #1, FOR$$SIGNAL_STO					      ;
		         52 	  08   AC  D0 00139 4$:     MOVL    FAB, R2						      ; 1267
				       54  DD 0013D 	    PUSHL   LENGTH						      ;
	      00000000G  00	       01  FB 0013F 	    CALLS   #1, FOR$$GET_VM					      ;
		    2C   A2	       50  D0 00146 	    MOVL    R0, 44(R2)						      ;
		    34   A2	       54  90 0014A 	    MOVB    LENGTH, 52(R2)					      ; 1268
		         55 	  04   A3  D0 0014E 	    MOVL    4(R3), P						      ; 1274
		         51 	  2C   A2  D0 00152 	    MOVL    44(R2), Q						      ; 1275
				       54  D4 00156 	    CLRL    I							      ; 1276
				       25  11 00158 	    BRB     7$							      ;
		         50 	       85  9A 0015A 5$:     MOVZBL  (P)+, T						      ; 1279
		         20 	       50  D1 0015D 	    CMPL    T, #32						      ;
				       1D  13 00160 	    BEQL    7$							      ;
		         52 	       51  D0 00162 	    MOVL    Q, T						      ; 1281
				       51  D6 00165 	    INCL    Q							      ;
	      00000061   8F	       50  D1 00167 	    CMPL    T, #97						      ; 1282
				       0C  1F 0016E 	    BLSSU   6$							      ;
	      0000007A   8F	       50  D1 00170 	    CMPL    T, #122						      ;
				       03  1A 00177 	    BGTRU   6$							      ;
		         50 	       20  C2 00179 	    SUBL2   #32, R0						      ; 1284
		         62 	       50  90 0017C 6$:     MOVB    R0, (T)						      ; 1281
	   D7 	         54 	       56  F3 0017F 7$:     AOBLEQ  R6, I, 5$						      ; 1276
					   04 00183 	    RET     							      ; 1202

; Routine Size:  139 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:11:06	DBB3:[RTL.SRC]CASSIG.B32;18					Page 5
;
;00100  1291	END
;00200  1292	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  F4PCOMPAT$CODE 	   388  NOWRT,  RD ,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]STARLET.L32;1		      2688        13         0       114





; Size:		388 code + 0 data bytes
; Run Time:	00:13.6
; Elapsed Time:	00:31.8
; Memory Used:	203 pages
; Compilation Complete
