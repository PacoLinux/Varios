
; Bliss-32 10.1-416	Monday 21-AUG-1978 19:12:21	DBB3:[RTL.SRC]CFDBSE.B32;11					Page 1
;
;00100  0001	MODULE COM$FDBSET (		! FORTRAN compatibility CALL FDBSET
;00200  0002		IDENT = '0-16',		! File: CFDBSE.B32
;00300  0003		LINKAGE (FORTRAN)	! Call-by-reference
;00400  0004		) =
;00500  0005	BEGIN
;00600  0006	
;00700  0007	!
;00800  0008	!			  COPYRIGHT (c) 1977 BY
;00900  0009	!	      DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;01000  0010	!
;01100  0011	! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
;01200  0012	! ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
;01300  0013	! INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
;01400  0014	! COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
;01500  0015	! OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
;01600  0016	! TRANSFERRED.
;01700  0017	!
;01800  0018	! THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
;01900  0019	! AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
;02000  0020	! CORPORATION.
;02100  0021	!
;02200  0022	! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
;02300  0023	! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;02400  0024	!
;02500  0025	
;02600  0026	!++
;02700  0027	! FACILITY:  FORTRAN Compatibility Library
;02800  0028	!
;02900  0029	! ABSTRACT:
;03000  0030	!
;03100  0031	!	Set RMS FAB quantities which are equivalent
;03200  0032	!	of the FCS-11 FDB (File data block).
;03300  0033	!
;03400  0034	! ENVIRONMENT:  User Mode - AST re-entrant
;03500  0035	!
;03600  0036	! AUTHOR:  Thomas N. Hastings, CREATION DATE:  5-Dec-1977
;03700  0037	!
;03800  0038	! MODIFIED BY:
;03900  0039	!
;04000  0040	! 	Thomas N. Hastings, 4-Dec-1977: VERSION 0
;04100  0041	! 0-1	- original
;04200  0042	! 0-2	- Use FOR$$GET_VM routine.  TNH 5-Dec-77
;04300  0043	! 0-4	- Setup RAB, LOGICAL_UNIT[0].  TNH 6-Dec-77
;04400  0044	! 0-5	- PSECT COM$, Pop LUB.  TNH 8-Dec-77
;04500  0045	! 0-6	- Fix dot problems in P.  TNH 9-Dec-77
;04600  0046	! 0-7	- Turn on V_OLD_FILE on APPEND and READONLY.  Now you can
;04700  0047	!	  say 'A' for append and default open with a WRITE.  JMT 5-Jan-78
;04800  0048	! 0-8	- PSECT F4PCOMPAT$CODE.  TNH 9-Jan-78
;04900  0049	! 0-9	- String args as char by-ref or by-decscr.  TNH 18-Jan-78
;05000  0050	! 0-10	- Global register CCB.  JMT 8-Apr-78
;05100  0051	! 0-12	- Change to STARLET library. DGP 20-Apr-78
;05200  0052	! 0-13	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
;05300  0053	! 0-14	- Change STARLET to RTLSTARLE to avoid conflicts.  DGP 1-May-78
;05310  0054	! 0-15	- Use JSB linkages.  TNH 22-MAY-78
;05320  0055	! 0-16	- Pass OPEN$K_LUN_MIN to FOR$$CB_PUSH.  TNH 22-May-78

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:12:21	DBB3:[RTL.SRC]CFDBSE.B32;11					Page 1-1
;
;05400  0056	!--

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:12:21	DBB3:[RTL.SRC]CFDBSE.B32;11					Page 2
;
;00100  0057	!
;00200  0058	! LINKAGES:
;00300  0059	!
;00500  0060	REQUIRE 'RTLIN:FLNK';		! Define all linkages
; %PRINT:	File: FLNK.B32; Version 1, edit 12, TNH 2-Aug-78
;00600  0282	
;00700  0283	!
;00800  0284	! TABLE OF CONTENTS:
;00900  0285	!
;01000  0286	
;01100  0287	FORWARD ROUTINE
;01200  0288		FDBSET: NOVALUE;		! Set FDB equivalent data
;01300  0289	
;01400  0290	!
;01500  0291	! INCLUDE FILES:
;01600  0292	!
;01700  0293		REQUIRE 'RTLML:FERR';		! Define FORTRAN error numbers
; %PRINT:	Filename: FERR.MDL! Version 0, edit 36, TNH 19-June-78
;01800  0411		REQUIRE 'RTLML:FISB';		! Define length of ISB
; %PRINT:	File: FISB.MDL which produces FISB.B32! Version 1, EDIT 16, DGP 02-Jun-78
;01900  0620		REQUIRE 'RTLML:FLUB';		! Define FORTRAN logical unit block
; %PRINT:	File: FLUB.MDL which produces FLUB.B32! Version 0, edit 30, TNH, 17-June-78
;02000  0788		REQUIRE 'RTLIN:FMAC';		! Define macros DSC$DESCRIPTOR and DECLARE_PSECTS
; %PRINT:	Filename: FMAC.B32; Version 1, edit 29, TNH, 7-JUN-78
; %PRINT:	 REQUIRE FILE: LPSECT.B32, VERSION 01-5, TNH, 27-Jun-78
;02050  0968		REQUIRE 'RTLIN:FOPN';		! Define min. logical unit number
; %PRINT:	Filename: FOPN.B32; version 0, edit 22, TNH, 30-May-78
;02100  1107		REQUIRE 'RTLML:FPAR';		! Define FORTRAN inter-module parameters
; %PRINT:	File: FPAR.MDL! version 0, edit 11, TNH, 30-May-78
;02200  1209		LIBRARY 'RTLSTARLE';	! STARLET library for macros and symbols
;02300  1210	!
;02400  1211	! MACROS:
;02500  1212	!
;02600  1213	
;02700  1214	MACRO
;02800  1215		BYTE_BY_REF = 0, 0, 8, 0 %;	! First byte in descriptor.
;02900  1216						! used to fetch first byte of character by-reference.
;03000  1217	!
;03100  1218	! EQUATED SYMBOLS:
;03200  1219	!
;03300  1220	
;03400  1221	!
;03500  1222	! PSECT DECLARATIONS:
;03600  1223	!
;03700  1224	
;03800  1225		DECLARE_PSECTS (F4PCOMPAT);	! declare PSECTs for COM$ facility
;03900  1226						! F4PCOMPAT$CODE and F4PCOMPAT$DATA
;04000  1227	
;04100  1228	!
;04200  1229	! OWN STORAGE:
;04300  1230	!
;04400  1231	
;04500  1232	!
;04600  1233	! EXTERNAL REFERENCES:
;04700  1234	!

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:12:21	DBB3:[RTL.SRC]CFDBSE.B32;11					Page 2-1
;
;04800  1235	
;04900  1236	EXTERNAL ROUTINE
;05000  1237		FOR$$ERR_OPECLO: NOVALUE ADDRESSING_MODE (GENERAL),	! Error handler for OPEN/CLOSE
;05100  1238		FOR$$CB_PUSH: JSB_CB_PUSH NOVALUE ADDRESSING_MODE (GENERAL),	! Allocate LUB/ISB/RAB if necessary
;05200  1239		FOR$$CB_POP: JSB_CB_POP NOVALUE ADDRESSING_MODE (GENERAL),	! Pop LUB/ISB/RAB
;05300  1240		FOR$$GET_VM: ADDRESSING_MODE (GENERAL),			! Allocate virtual memory
;05400  1241		FOR$$SIGNAL_STO: NOVALUE ADDRESSING_MODE (GENERAL);	! SIGNAL_STOP errors

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:12:21	DBB3:[RTL.SRC]CFDBSE.B32;11					Page 3
;
;00100  1242	GLOBAL ROUTINE FDBSET (	! FORTRAN compatibility set FDB equivalent
;00200  1243		LOGICAL_UNIT,	! Adr. of logical unit no.
;00300  1244		MODE_LITERAL,	! Adr. of descr. of mode literal string or adr. of character
;00400  1245		SHARE_LITERAL,	! Adr. of descr. of share literal string or adr. of character
;00500  1246		NUM_BUF,	! Adr. of number of buffers
;00600  1247		INIT_ALLOC,	! Adr. of initial block to allocate
;00700  1248		EXTEND_BLK_CNT)	! Adr. of number of blocks to extend
;00800  1249		: NOVALUE =	! No value is returned
;00900  1250	
;01000  1251	!++
;01100  1252	! FUNCTIONAL DESCRIPTION:
;01200  1253	!
;01300  1254	!	Set RMS FAB (File access block) and Language support library LUB
;01400  1255	!	(logical unit block) with OPEN-like parameters for unit LOGICAL_UNIT.
;01500  1256	!	This procedure is provided for compatibility with CALL FDBSET
;01600  1257	!	on PDP-11 systems with FCS-11 which set FDB (File descriptor block).
;01700  1258	
;01800  1259	! FORMAL PARAMETERS:
;01900  1260	!
;02000  1261	!	LOGICAL_UNIT.rw.r	Adr. of word containing logical unit number.
;02100  1262	!	[MODE_LITERAL.rt.{ds|r}	Adr. of string descr. which can be:
;02200  1263	!				'NEW', 'OLD', 'READONLY', 'APPEND', 'MODIFY',
;02300  1264	!				'INHIBIT SUPERSEDE', 'UNKNOWN'
;02400  1265	!				Only the first char is looked at.
;02500  1266	!	[SHARE_LITERAL.rt.{ds|r}	Adr. of string descr. which can be: 'SHARE'
;02600  1267	!				Only the first character is looked at.
;02700  1268	!	[NUM_BUF.rw.r		Adr. of word containing number of buffers
;02800  1269	!	[INIT_ALLOC.rw.r	Adr. of word containing no of 
;02900  1270	!				blocks for initial allocation
;03000  1271	!	[EXTEND_BLK_CNT.rw.r]]]]]	Adr. of word containing no. of blocks
;03100  1272	!				for file extended allocation.
;03200  1273	!
;03300  1274	! IMPLICIT INPUTS:
;03400  1275	!
;03500  1276	!	OTS$$A_CUR_LUB		Contains address of current LUB/ISB/RAB or 0.
;03600  1277	!	OTS$$AA_LUB_TAB	Table of LUB/ISB/RABs by logical unit
;03700  1278	!
;03800  1279	! IMPLICIT OUTPUTS:
;03900  1280	!
;04000  1281	!	FAB allocated and set, LUB/ISB/RAB allocated and LUB set
;04100  1282	!
;04200  1283	! ROUTINE VALUE:
;04300  1284	! COMPLETION CODES:
;04400  1285	!
;04500  1286	!	NONE
;04600  1287	!
;04700  1288	! SIDE EFFECTS:
;04800  1289	!
;04900  1290	!	Allocates LUB/ISB/RAB and/or FAB, if not already allocated.
;05000  1291	!--
;05100  1292	
;05200  1293	    BEGIN
;05300  1294	    GLOBAL REGISTER
;05400  1295		CCB = 11: REF BLOCK[, BYTE];
;05500  1296	

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:12:21	DBB3:[RTL.SRC]CFDBSE.B32;11					Page 3-1
;
;05600  1297	    MAP
;05700  1298		LOGICAL_UNIT: REF VECTOR[1, WORD],
;05800  1299		MODE_LITERAL: REF DSC$DESCRIPTOR,
;05900  1300		SHARE_LITERAL: REF DSC$DESCRIPTOR,
;06000  1301		NUM_BUF: REF VECTOR[1, WORD],
;06100  1302		INIT_ALLOC: REF VECTOR[1, WORD],
;06200  1303		EXTEND_BLK_CNT: REF VECTOR[1,WORD];
;06300  1304	    LOCAL
;06400  1305		FAB: REF BLOCK [FAB$C_BLN, BYTE],	! base pointer to FAB
;06500  1306		L_UNWIND_ACTION: VOLATILE;		! Action flag for handler on unwind
;06600  1307	    ENABLE
;06700  1308		FOR$$ERR_OPECLO (L_UNWIND_ACTION);	! Don't pass 2nd arg (OPEN-CLOSE array)
;06800  1309							! since never an ERR=
;06900  1310	
;07000  1311	    !+
;07100  1312	    ! Push down current logical unit block if any, and allocate LUB/ISB/RAB
;07200  1313	    ! for this unit if not already allocated.  Unwind action is a no-op
;07300  1314	    ! until LUB/ISB/RAB pushed down and LOGICAL_UNIT LUB flagged as current.
;07400  1315	    ! Then unwind action on errors is to POP the LUB/ISB/RAB.
;07500  1316	    ! On return CCB points to current control block.
;07600  1317	    !-
;07700  1318	
;07800  1319	    L_UNWIND_ACTION = FOR$K_UNWINDNOP;
;07900  1320	    FOR$$CB_PUSH (.LOGICAL_UNIT[0], OPEN$K_LUN_MIN);
;08000  1321	    L_UNWIND_ACTION = FOR$K_UNWINDPOP;
;08100  1322	
;08200  1323	    !+
;08300  1324	    ! If unit already opened, SIGNAL_STOP FOR$_UNIALROPE (34='UNIT ALREADY OPEN')
;08400  1325	    !-
;08500  1326	
;08600  1327	    IF .CCB[LUB$V_OPENED] THEN FOR$$SIGNAL_STO (FOR$K_UNIALROPE);
;08700  1328	
;08800  1329	    !+
;08900  1330	    ! Allocate zeroed FAB if not already allocated and save address in LUB.
;09000  1331	    !-
;09100  1332	
;09200  1333	    IF (FAB = .CCB[LUB$A_FAB]) EQLA 0
;09300  1334	    THEN
;09400  1335		BEGIN
;09500  1336		FAB = FOR$$GET_VM (FAB$K_BLN);
;09600  1337		CH$FILL (0, FAB$K_BLN, .FAB);
;09700  1338		FAB[FAB$B_BID] = FAB$C_BID;
;09800  1339		FAB[FAB$B_BLN] = FAB$K_BLN;
;09900  1340		CCB[LUB$A_FAB] = .FAB;
;10000  1341		END;
;10100  1342	
;10200  1343	    !+
;10300  1344	    ! If MODE_LITERAL is present, dispatch on first character of string literal
;10400  1345	    ! Accept either character by-descriptor or string by-descriptor.
;10500  1346	    ! If first byte of descriptor is GEQ ASCII A, assume character by-reference
;10600  1347	    ! otherwise string by-descriptor.
;10700  1348	    !-
;10800  1349	
;10900  1350	    IF NOT NULLPARAMETER (2)
;11000  1351	    THEN

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:12:21	DBB3:[RTL.SRC]CFDBSE.B32;11					Page 3-2
;
;11100  1352		BEGIN
;11200  1353		BIND LEGAL_CHAR = UPLIT ('AIMNORU');
;11300  1354		LOCAL P;			! Temporary char pointer
;11400  1355		P = CH$FIND_CH (7, LEGAL_CHAR, (IF .MODE_LITERAL[BYTE_BY_REF] GEQ %C'A'
;11500  1356						THEN
;11600  1357						    .MODE_LITERAL[BYTE_BY_REF]			! character by-ref
;11700  1358						ELSE
;11800  1359						    .(.MODE_LITERAL[DSC$A_POINTER])));	! character by-descr.
;11900  1360		IF CH$FAIL (.P) THEN FOR$$SIGNAL_STO (FOR$K_INVARGFOR);
;12000  1361	
;12100  1362		CASE .P - LEGAL_CHAR FROM 0 TO 6 OF
;12200  1363		    SET
;12300  1364		    [0]:			! 'APPEND'
;12400  1365			BEGIN
;12500  1366			CCB[RAB$V_EOF] = 1;
;12600  1367			CCB[RAB$B_RAC] = RAB$C_SEQ;
;12700  1368			CCB[LUB$V_OLD_FILE] = 1;
;12800  1369			CCB[LUB$V_APPEND] = 1;
;12900  1370			END;
;13000  1371	
;13100  1372		    [1]:			! \\\'INHIBIT SUPERSEDE\\\
;13200  1373				;		! Nothing for now\\\
;13300  1374	
;13400  1375		    [2]:			! 'MODIFY'
;13500  1376			CCB[LUB$V_OLD_FILE] = 1;
;13600  1377	
;13700  1378		    [3]:			! 'NEW'
;13800  1379				;		! nothing special to do
;13900  1380	
;14000  1381		    [4]:			! 'OLD'
;14100  1382			CCB[LUB$V_OLD_FILE] = 1;
;14200  1383	
;14300  1384		    [5]:			! 'READONLY'
;14400  1385			BEGIN
;14500  1386			FAB[FAB$B_FAC] = FAB$M_GET;
;14600  1387			CCB[LUB$V_OLD_FILE] = 1;
;14700  1388			CCB[LUB$V_READ_ONLY] = 1;
;14800  1389			END;
;14900  1390	
;15000  1391		    [6]:			! 'UNKNOWN'
;15100  1392			FAB[FAB$V_CIF] = 1;
;15200  1393	
;15300  1394		    TES;
;15400  1395		END;				! End MODE_LITERAL
;15500  1396	
;15600  1397	    !+
;15700  1398	    ! SHARE_LITERAL.  If present and first character equal to 'S',
;15800  1399	    ! set for sharing put, get, and update.
;15900  1400	    ! If MODE_LITERAL is present, dispatch on first character of string literal
;16000  1401	    ! Accept either character by-descriptor or string by-descriptor.
;16100  1402	    ! If first byte of descriptor is GEQ ASCII A, assume character by-reference
;16200  1403	    ! otherwise string by-descriptor.
;16300  1404	    !-
;16400  1405	
;16500  1406	    IF NOT NULLPARAMETER (3)

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:12:21	DBB3:[RTL.SRC]CFDBSE.B32;11					Page 3-3
;
;16600  1407	    THEN
;16700  1408		BEGIN
;16800  1409		IF (IF .SHARE_LITERAL[BYTE_BY_REF] GEQ %C'A'
;16900  1410		    THEN
;17000  1411			.SHARE_LITERAL[BYTE_BY_REF]			! character by-reference
;17100  1412		    ELSE
;17200  1413			.(.SHARE_LITERAL[DSC$A_POINTER])<0,8>)		! string by-descr.
;17300  1414		    NEQ %C'S' THEN FOR$$SIGNAL_STO (FOR$K_INVARGFOR);
;17400  1415	
;17500  1416		FAB[FAB$B_SHR] = FAB$M_GET + FAB$M_PUT + FAB$M_UPD;
;17600  1417		END;
;17700  1418	
;17800  1419	    !+
;17900  1420	    ! NUM_BUF.  If number of buffers arg is present, set RAB buffer count.
;18000  1421	    !-
;18100  1422	
;18200  1423	    IF NOT NULLPARAMETER (4) THEN CCB[RAB$B_MBF] = .NUM_BUF[0];
;18300  1424	
;18400  1425	    !+
;18500  1426	    ! INIT_ALLOC.  If initial allocation arg is present, set FAB$L_ALQ
;18600  1427	    ! with magnitude of arg and set contiguous best try bit.
;18700  1428	    !-
;18800  1429	
;18900  1430	    IF NOT NULLPARAMETER (5) 
;19000  1431	    THEN 
;19100  1432		BEGIN
;19200  1433		FAB[FAB$L_ALQ] = ABS (.INIT_ALLOC[0]);    
;19300  1434		FAB[FAB$V_CBT] = 1;
;19400  1435		END;
;19500  1436	
;19600  1437	    !+
;19700  1438	    ! EXTEND_BLK_CNT.  If extend allocation count is present, set FAB$W_DEQ.
;19800  1439	    !-
;19900  1440	
;20000  1441	    IF NOT NULLPARAMETER (6) THEN FAB[FAB$W_DEQ] = ABS (.EXTEND_BLK_CNT[0]);
;20100  1442	
;20200  1443	    !+
;20300  1444	    ! Pop (but do not deallocate) LUB/ISB/RAB and return with FAB allocated.
;20400  1445	    !-
;20500  1446	
;20600  1447	    FOR$$CB_POP ();
;20700  1448	    RETURN;
;20800  1449	    END;


							    .TITLE  COM$FDBSET
							    .IDENT  \0-16\

							    .PSECT  F4PCOMPAT$CODE,NOWRT,  SHR,  PIC,2

	      00  55  52  4F  4E  4D  49  41  00000 P.AAA:  .ASCII  \AIMNORU\<0>					      ;

						    LEGAL_CHAR=		P.AAA
							    .EXTRN  FOR$$ERR_OPECLO, FOR$$CB_PUSH, FOR$$CB_POP, FOR$$GET_VM
							    .EXTRN  FOR$$SIGNAL_STO

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:12:21	DBB3:[RTL.SRC]CFDBSE.B32;11					Page 3-4
;

					 09FC 00008 	    .ENTRY  FDBSET, Save R2,R3,R4,R5,R6,R7,R8,R11		      ; 1242
		         58 00000000G  00  9E 0000A 	    MOVAB   FOR$$SIGNAL_STO, R8					      ;
				       7E  D4 00011 	    CLRL    L_UNWIND_ACTION					      ; 1293
		         6D 00000118   EF  DE 00013 	    MOVAL   20$, (FP)						      ;
		         6E 	       01  D0 0001A 	    MOVL    #1, L_UNWIND_ACTION					      ; 1319
		         52 	  04   BC  3C 0001D 	    MOVZWL  @LOGICAL_UNIT, R2					      ; 1320
				       50  D4 00021 	    CLRL    R0							      ;
			    00000000G  00  16 00023 	    JSB     FOR$$CB_PUSH					      ;
				       6E  D4 00029 	    CLRL    L_UNWIND_ACTION					      ; 1321
		         57 	  FC   AB  9E 0002B 	    MOVAB   -4(CCB), R7						      ; 1327
		         05 	       67  E9 0002F 	    BLBC    (R7), 1$						      ;
				       22  DD 00032 	    PUSHL   #34							      ;
		         68 	       01  FB 00034 	    CALLS   #1, FOR$$SIGNAL_STO					      ;
		         56 	  E8   AB  D0 00037 1$:     MOVL    -24(CCB), FAB					      ; 1333
				       1F  12 0003B 	    BNEQ    2$							      ;
		         7E 	  50   8F  9A 0003D 	    MOVZBL  #80, -(SP)						      ; 1336
	      00000000G  00	       01  FB 00041 	    CALLS   #1, FOR$$GET_VM					      ;
		         56 	       50  D0 00048 	    MOVL    R0, FAB						      ;
	   00 	         6E 	       00  2C 0004B 	    MOVC5   #0, (SP), #0, #80, (FAB)				      ; 1337
		         66 	0050   8F     0004F									      ;
		         66 	5003   8F  B0 00053 	    MOVW    #20483, (FAB)					      ; 1338
		    E8   AB	       56  D0 00058 	    MOVL    FAB, -24(CCB)					      ; 1340
		         02 	       6C  91 0005C 2$:     CMPB    (AP), #2						      ; 1350
				       66  1F 0005F 	    BLSSU   12$							      ;
				  08   AC  D5 00061 	    TSTL    8(AP)						      ;
				       61  13 00064 	    BEQL    12$							      ;
		         50 	  08   AC  D0 00066 	    MOVL    MODE_LITERAL, R0					      ; 1355
		    41   8F	       60  91 0006A 	    CMPB    (R0), #65						      ;
				       05  1F 0006E 	    BLSSU   3$							      ;
		         50 	       60  9A 00070 	    MOVZBL  (R0), R0						      ;
				       04  11 00073 	    BRB     4$							      ;
		         50 	  04   B0  D0 00075 3$:     MOVL    @4(R0), R0						      ;
      82   AF	         07 	       50  3A 00079 4$:     LOCC    R0, #7, LEGAL_CHAR					      ;
				       02  12 0007E 	    BNEQ    5$							      ;
				       51  D4 00080 	    CLRL    R1							      ;
		         52 	       51  D0 00082 5$:     MOVL    R1, P						      ;
				       05  12 00085 	    BNEQ    6$							      ; 1360
				       30  DD 00087 	    PUSHL   #48							      ;
		         68 	       01  FB 00089 	    CALLS   #1, FOR$$SIGNAL_STO					      ;
		         50 	FF70   CF  9E 0008C 6$:     MOVAB   LEGAL_CHAR, R0					      ; 1242
	   50 	         52 	       50  C3 00091 	    SUBL3   R0, P, R0						      ; 1362
	   06 	         00 	       50  CF 00095 	    CASEL   R0, #0, #6						      ;
	 001C 	       002E 	     000E     00099 7$:     .WORD   8$-7$,-						      ;
	 0021 	       001C 	     002E     0009F		    12$-7$,-						      ;
				     002A     000A5		    9$-7$,-						      ;
								    12$-7$,-						      ;
								    9$-7$,-						      ;
								    10$-7$,-						      ;
								    11$-7$						      ;
		    05   AB	       01  88 000A7 8$:     BISB2   #1, 5(CCB)						      ; 1366
				  1E   AB  94 000AB 	    CLRB    30(CCB)						      ; 1367
		         67 	2008   8F  A8 000AE 	    BISW2   #8200, (R7)						      ; 1369
				       12  11 000B3 	    BRB     12$							      ; 1362
		         67 	       08  88 000B5 9$:     BISB2   #8, (R7)						      ; 1382

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:12:21	DBB3:[RTL.SRC]CFDBSE.B32;11					Page 3-5
;
				       0D  11 000B8 	    BRB     12$							      ; 1362
		    16   A6	       02  90 000BA 10$:    MOVB    #2, 22(FAB)						      ; 1386
		         67 	       0C  88 000BE 	    BISB2   #12, (R7)						      ; 1388
				       04  11 000C1 	    BRB     12$							      ; 1362
		    07   A6	       02  88 000C3 11$:    BISB2   #2, 7(FAB)						      ; 1392
		         03 	       6C  91 000C7 12$:    CMPB    (AP), #3						      ; 1406
				       27  1F 000CA 	    BLSSU   16$							      ;
				  0C   AC  D5 000CC 	    TSTL    12(AP)						      ;
				       22  13 000CF 	    BEQL    16$							      ;
		         50 	  0C   AC  D0 000D1 	    MOVL    SHARE_LITERAL, R0					      ; 1409
		    41   8F	       60  91 000D5 	    CMPB    (R0), #65						      ;
				       05  1F 000D9 	    BLSSU   13$							      ;
		         50 	       60  9A 000DB 	    MOVZBL  (R0), R0						      ;
				       04  11 000DE 	    BRB     14$							      ;
		         50 	  04   B0  9A 000E0 13$:    MOVZBL  @4(R0), R0						      ;
		    53   8F	       50  91 000E4 14$:    CMPB    R0, #83						      ; 1414
				       05  13 000E8 	    BEQL    15$							      ;
				       30  DD 000EA 	    PUSHL   #48							      ;
		         68 	       01  FB 000EC 	    CALLS   #1, FOR$$SIGNAL_STO					      ;
		    17   A6	       0B  90 000EF 15$:    MOVB    #11, 23(FAB)					      ; 1416
		         04 	       6C  91 000F3 16$:    CMPB    (AP), #4						      ; 1423
				       0A  1F 000F6 	    BLSSU   17$							      ;
				  10   AC  D5 000F8 	    TSTL    16(AP)						      ;
				       05  13 000FB 	    BEQL    17$							      ;
		    36   AB	  10   BC  90 000FD 	    MOVB    @NUM_BUF, 54(CCB)					      ;
		         05 	       6C  91 00102 17$:    CMPB    (AP), #5						      ; 1430
				       11  1F 00105 	    BLSSU   18$							      ;
				  14   AC  D5 00107 	    TSTL    20(AP)						      ;
				       0C  13 0010A 	    BEQL    18$							      ;
		         50 	  14   BC  3C 0010C 	    MOVZWL  @INIT_ALLOC, R0					      ; 1433
		    10   A6	       50  D0 00110 	    MOVL    R0, 16(FAB)						      ;
		    06   A6	       20  88 00114 	    BISB2   #32, 6(FAB)						      ; 1434
		         06 	       6C  91 00118 18$:    CMPB    (AP), #6						      ; 1441
				       0D  1F 0011B 	    BLSSU   19$							      ;
				  18   AC  D5 0011D 	    TSTL    24(AP)						      ;
				       08  13 00120 	    BEQL    19$							      ;
		         50 	  18   BC  3C 00122 	    MOVZWL  @EXTEND_BLK_CNT, R0					      ;
		    14   A6	       50  B0 00126 	    MOVW    R0, 20(FAB)						      ;
			    00000000G  00  16 0012A 19$:    JSB     FOR$$CB_POP						      ; 1447
					   04 00130 	    RET     							      ; 1242
					 0000 00131 20$:    .WORD   Save nothing					      ; 1293
		         50 	  08   AC  D0 00133 	    MOVL    8(AP), R0						      ;
		         50 	  04   A0  D0 00137 	    MOVL    4(R0), R0						      ;
				  FC   A0  9F 0013B 	    PUSHAB  L_UNWIND_ACTION					      ;
				       01  DD 0013E 	    PUSHL   #1							      ;
				       5E  DD 00140 	    PUSHL   SP							      ;
		         7E 	  04   AC  7D 00142 	    MOVQ    4(AP), -(SP)					      ;
	      00000000G  00	       03  FB 00146 	    CALLS   #3, FOR$$ERR_OPECLO					      ;
					   04 0014D 	    RET     							      ;

; Routine Size:  326 bytes


;20900  1450	
;21000  1451	END			! End of module

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:12:21	DBB3:[RTL.SRC]CFDBSE.B32;11					Page 3-6
;
;21100  1452	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  F4PCOMPAT$CODE 	   334  NOWRT,  RD ,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]STARLET.L32;1		      2688        19         0       119





; Size:		326 code + 8 data bytes
; Run Time:	00:14.0
; Elapsed Time:	00:30.3
; Memory Used:	241 pages
; Compilation Complete
