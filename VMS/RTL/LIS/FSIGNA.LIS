
; Bliss-32 10.1-416	Monday 21-AUG-1978 19:24:36	DBB3:[RTL.SRC]FSIGNA.B32;9					Page 1
;
;00100  0001	MODULE FOR$$SIGNAL (	! FORTRAN SIGNAL, SIGNAL_STOP and SIG_NO_LUB
;00200  0002		IDENT = '0-31'	! File: FSIGNA.B32
;00300  0003			) =
;00400  0004	BEGIN
;00500  0005	
;00600  0006	!
;00700  0007	!			  COPYRIGHT (c) 1977 BY
;00800  0008	!	      DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;00900  0009	!
;01000  0010	! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
;01100  0011	! ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
;01200  0012	! INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
;01300  0013	! COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
;01400  0014	! OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
;01500  0015	! TRANSFERRED.
;01600  0016	!
;01700  0017	! THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
;01800  0018	! AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
;01900  0019	! CORPORATION.
;02000  0020	!
;02100  0021	! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
;02200  0022	! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;02300  0023	!
;02400  0024	
;02500  0025	!++
;02600  0026	! FACILITY:  FORTRAN Support Library
;02700  0027	!
;02800  0028	! ABSTRACT:
;02900  0029	!
;03000  0030	!	FORTRAN support routines to convert FORTRAN error code
;03100  0031	!	to 32-bit VAX error code, and SIGNAL or SIGNAL_STOP
;03200  0032	!	extra information in format compatible for SYS$PUT_MESSAGE:
;03300  0033	!
;03400  0034	! ENVIRONMENT:  User Mode - AST re-entrant
;03500  0035	!		Note: this module is both shared and non-shared.
;03600  0036	!		If compatibility routine calls it, a non-shared copy is included.
;03700  0037	!		Hence, JSB to FOR$$CB_GET instead of accessing OTS$$A_CUR_LUB directly.
;03800  0038	!
;03900  0039	! AUTHOR:  Thomas N. Hastings, CREATION DATE:  8-Aug-1977
;04000  0040	!
;04100  0041	! MODIFIED BY:
;04200  0042	!
;04300  0043	! 	Thomas N. Hastings, 8-Aug-1977: VERSION 0
;04400  0044	! 0-01	- original
;04500  0045	! 0-09	- make work with GETMSG.  TNH 6Oct-77
;04600  0046	! 0-11	- store proper facility error code.  TNH 7-Oct-77
;04700  0047	! 0-12	- Use new STSDEF symbols.  TNH 15-Oct-77
;04800  0048	! 0-13	- Set severity code to SEVERE or ERROR.  TNH 27-Oct-77
;04900  0049	! 0-16	- Make internal common routine to do all.  TNH 22-Nov-77
;05000  0050	! 0-18	- Create FOR$$SIG_FATINT entry.  TNH 01-DEC-77
;05100  0051	! 0-19	- Signal ERROR only for error 63.  TNH 6-Dec-77
;05200  0052	! 0-20	- Only signal error numbers, not cond vals.  TNH 29-Dec-77
;05300  0053	! 0-21	- Make FOR$$SIG_NO_LUB unit no optional.  TNH 30-Dec-77
;05400  0054	! 0-22	- Call LIB$SIGNAL when FOR$$SIGNAL called.  TNH 5-Jan-77
;05500  0055	!	Also put unit before string descriptor in signal arg list.

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:24:36	DBB3:[RTL.SRC]FSIGNA.B32;9					Page 1-1
;
;05600  0056	! 0-23	- Make string descriptor point to 0 word if no string is around.
;05700  0057	!	  JMT 28-Feb-78
;05800  0058	! 0-24	- Bug fix! Forgot to apply 0-23 to SIG_NO_LUB!  JMT 31-Mar-78
;05900  0059	! 0-25	- Change to STARLET library. DGP 20-Apr-78
;06000  0060	! 0-26	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
;06100  0061	! 0-27	- Change STARLET to RTLSTARLE to avoid conflicts.  DGP 1-May-78
;06200  0062	! 0-28	- Go back to allowing 32-bit cond val or FORTRAN error #.  TNH 10-June-78
;06300  0063	!	  and add FOR$$SIG_DATCOR.
;06400  0064	! 0-29	- Make zeroed descriptor be UPLIT.  TNH 27-June-78
;06500  0065	! 0-30	- JSB to FOR$$CB_GET instead of referencing OTS$$A_CUR_LUB directly.  TNH 2-Aug-78
;06600  0066	! 0-31	- Make EXTERNALs all be ADDRESSING_MODE (GENERAL).  TNH 3-Aug-78
;06700  0067	!--

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:24:36	DBB3:[RTL.SRC]FSIGNA.B32;9					Page 2
;
;00100  0068	!
;00200  0069	! LINKAGES:
;00300  0070	!
;00400  0071	REQUIRE 'RTLIN:FLNK';			! Define routine linkages
; %PRINT:	File: FLNK.B32; Version 1, edit 12, TNH 2-Aug-78
;00500  0293	
;00600  0294	!
;00700  0295	! TABLE OF CONTENTS:
;00800  0296	!
;00900  0297	
;01000  0298	FORWARD ROUTINE
;01100  0299		FOR$$SIGNAL: NOVALUE,		! SIGNAL 32-bit error code and LUB data
;01200  0300		FOR$$SIGNAL_STO: NOVALUE,	! SIGNAL_STOP 32-bit error code and LUB data
;01300  0301		FOR$$SIG_FATINT: NOVALUE,	! SIGNAL_STOP OTS$_FATINTERR (FATAL
;01400  0302						! INTERNAL ERROR IN RUN-TIME LIBRAY)
;01500  0303		FOR$$SIG_DATCOR: NOVALUE,	! SIGNAL_STOP OTS$_INTDATCOR (INTERNAL
;01600  0304						! DATA CORRUPTED IN RUN-TIME LIBRARY)
;01700  0305		DO_SIGNAL: NOVALUE,		! Do the work for FOR$$SIGNAL, FOR$$SIGNAL_STO
;01800  0306		FOR$$SIG_NO_LUB: NOVALUE,	!  SIGNAL_STOP with no LUB setup.
;01900  0307		COND_VALUE;			! Return 32-bit condition value given FORTRAN error #
;02000  0308	
;02100  0309	!
;02200  0310	! INCLUDE FILES:
;02300  0311	!
;02400  0312		REQUIRE 'RTLML:FERR';		! Define FORTRAN error numbers
; %PRINT:	Filename: FERR.MDL! Version 0, edit 36, TNH 19-June-78
;02500  0430		REQUIRE 'RTLML:FISB';		! ISB definitions
; %PRINT:	File: FISB.MDL which produces FISB.B32! Version 1, EDIT 16, DGP 02-Jun-78
;02600  0639		REQUIRE 'RTLML:FLUB';		! LUB definitions
; %PRINT:	File: FLUB.MDL which produces FLUB.B32! Version 0, edit 30, TNH, 17-June-78
;02700  0807		REQUIRE 'RTLIN:FMAC';		! FORTRAN macros
; %PRINT:	Filename: FMAC.B32; Version 1, edit 29, TNH, 7-JUN-78
; %PRINT:	 REQUIRE FILE: LPSECT.B32, VERSION 01-5, TNH, 27-Jun-78
;02800  0987		REQUIRE 'RTLIN:ODBG';		! Debugging macros
; %PRINT:	Filename: NODBG.B32; Version 0, edit 20, JMT, 17-Jan-78
;02900  1063		LIBRARY 'RTLSTARLE';	! STARLET library for macros and symbols
;03000  1064	!
;03100  1065	! MACROS:
;03200  1066	!
;03300  1067	
;03400  1068	!
;03500  1069	! EQUATED SYMBOLS:
;03600  1070	!
;03700  1071	LITERAL
;03800  1072		K_NO_FAO_SIGARG = 3;	! No. of FAO args in signal arg list
;03900  1073					! used by SYS$PUT_MESSAGE
;04000  1074	!
;04100  1075	! PSECT DECLARATIONS:
;04200  1076	!
;04300  1077	
;04400  1078		DECLARE_PSECTS (FOR);		! declare PSECTs for FOR$ facility
;04500  1079	
;04600  1080	!
;04700  1081	! OWN STORAGE:
;04800  1082	!

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:24:36	DBB3:[RTL.SRC]FSIGNA.B32;9					Page 2-1
;
;04900  1083	BIND
;05000  1084		ZEROED_DSC = UPLIT (REP 8 OF BYTE (0));
;05100  1085	
;05200  1086	!
;05300  1087	! EXTERNAL REFERENCES:
;05400  1088	!
;05500  1089	
;05600  1090	!+
;05700  1091	! MAINTENANCE NOTE:  Since this module is called by FORTRAN compatibility
;05800  1092	! routines which are un-shared and the entry points are not vectored,
;05900  1093	! a separate copy of this module is linked with the user program when
;06000  1094	! the user calls a FORTRAN compatibility routine.  In order to prevent
;06100  1095	! data truncation errors from the linker, all external references are
;06200  1096	! of addressing mode general (rather than word displacement) even for
;06300  1097	! the same PSECT.
;06400  1098	!-
;06500  1099	
;06600  1100	
;06700  1101	EXTERNAL ROUTINE
;06800  1102		FOR$$CB_GET: JSB_CB_GET NOVALUE ADDRESSING_MODE (GENERAL),	! Set CCB to adr. of current LUB/ISB/RAB
;06900  1103		FOR$$ERRSNS_SAV: NOVALUE ADDRESSING_MODE (GENERAL),	! Save error info for FOR$ERRSNS.
;07000  1104		LIB$SIGNAL: NOVALUE ADDRESSING_MODE(GENERAL),	! SIGNAL error and continue
;07100  1105		LIB$STOP: NOVALUE ADDRESSING_MODE(GENERAL);	! SIGNAL error and STOP
;07200  1106	
;07300  1107	EXTERNAL LITERAL
;07400  1108		OTS$_FATINTERR: UNSIGNED (%BPVAL),	! Condition value FATAL INTERNAL ERROR IN RUN-TIME LIBRARY
;07500  1109		OTS$_INTDATCOR: UNSIGNED (%BPVAL);	! Condition value INTERNAL DATA CORRUPTED IN RUN-TIME LIBRARY
;07600  1110	
;07700  1111	BUILTIN
;07800  1112		ACTUALCOUNT;				! Actual no. of parameters

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:24:36	DBB3:[RTL.SRC]FSIGNA.B32;9					Page 3
;
;00100  1113	GLOBAL ROUTINE FOR$$SIGNAL (	! SIGNAL FORTRAN error and continue
;00200  1114		FORT_ERR_NO)		! FORTRAN error code 0:120 or 32-bit cond value
;00300  1115		:NOVALUE =		! No value returned.
;00400  1116	!++
;00500  1117	! FUNCTIONAL DESCRIPTION:
;00600  1118	!
;00700  1119	!	Convert FORTRAN error code number to 32-bit VAX-11 error code.
;00800  1120	!	The following SIGNAL arguments are obtained from the argument list and
;00900  1121	!	current FAB (if any) and the current LUB/ISB/RAB (must be present):
;01000  1122	
;01100  1123	!		6 = No. of SIGNAL args passed to LIB$SIGNAL
;01200  1124	!		VAX-11 error code: 
;01300  1125	!			STS$V_SEVERITY = STS$K_SEVERE
;01400  1126	!				except for error FOR$K_OUTCONERR (63='OUTPUT CONVERSION ERROR')
;01500  1127	!				in which case the severity is set to ERROR
;01600  1128	!			This means that all errors stop the image by default, except 63.
;01700  1129	!			Thus user must do something explicit
;01800  1130	!			in order to continue.
;01900  1131	!			STS$V_CODE = FORTRAN error number
;02000  1132	!			STS$V_FAC_SP = 1 (facility specific error messages
;02100  1133	!			STS$V_FAC_NO = FORTRAN facility no. (FOR$K_FAC_NO)
;02200  1134	!		3 = # of following FAO arguments for FORTRAN error message
;02300  1135	!		FORTRAN unit number
;02400  1136	!		Adr. of resultant file name string descriptor or 0
;02500  1137	!		User PC of call to library (set to 0 here, rewritten by handler before RESIGNAL)
;02600  1138	!		RMS FAB or RAB error status (STS) if false
;02700  1139	!		RMS FAB or RAB STARLET error status (STV) if false
;02800  1140	!
;02900  1141	!
;03000  1142	!	Note: The above format is that expected by SYS$PUT_MESSAGE.
;03100  1143	!
;03200  1144	! FORMAL PARAMETERS:
;03300  1145	!
;03400  1146	!	FORT_ERR_NO.rlu.v	FORTRAN error code (0:120) or 32-bit cond value
;03500  1147	!
;03600  1148	! IMPLICIT INPUTS:
;03700  1149	!
;03800  1150	!	OTS$$A_CUR_LUB		Adr. of current LUB/ISB/RAB
;03900  1151	!				Obtained by JSB to FOR$$CB_GET.
;04000  1152	!	{FAB,RAB}$L_STS		RMS error status
;04100  1153	!	{FAB,RAB}$L_STV		RMS error value or operating system error code
;04200  1154	!
;04300  1155	! IMPLICIT OUTPUTS:
;04400  1156	!
;04500  1157	!	{FAB,RAB}$L_STS		RMS error status - set to 0
;04600  1158	!	{FAB,RAB}$L_STV		RMS error value or operating system error code - set to 0
;04700  1159	!	FORTRAN error #, RMS STS, RMS STV, logical unit number saved in
;04800  1160	!				OWN storage in FOR$ERRSNS module for later
;04900  1161	!				call by user to ERRSNS.
;05000  1162	!
;05100  1163	! COMPLETION CODES:
;05200  1164	!
;05300  1165	!	NONE
;05400  1166	!
;05500  1167	! SIDE EFFECTS:

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:24:36	DBB3:[RTL.SRC]FSIGNA.B32;9					Page 3-1
;
;05600  1168	!
;05700  1169	!	Converts FORTRAN error code to 32-bit VAX-11 error code and SIGNALs.
;05800  1170	!	Saves error info in FOR$ERRSNS OWN storage.
;05900  1171	!--
;06000  1172	
;06100  1173	    BEGIN
;06200  1174	    DO_SIGNAL (.FORT_ERR_NO, LIB$SIGNAL);
;06300  1175	    RETURN
;06400  1176	    END;


							    .TITLE  FOR$$SIGNAL
							    .IDENT  \0-31\

							    .PSECT  FOR$CODE,NOWRT,  SHR,  PIC,2

					  00# 00000 P.AAA:  .BYTE   0[8]						      ;

						    ZEROED_DSC=		P.AAA
							    .EXTRN  FOR$$CB_GET, FOR$$ERRSNS_SAV, LIB$SIGNAL, LIB$STOP
							    .EXTRN  OTS$_FATINTERR, OTS$_INTDATCOR

					 0000 00008 	    .ENTRY  FOR$$SIGNAL, Save nothing				      ; 1113
			    00000000G  00  9F 0000A 	    PUSHAB  LIB$SIGNAL						      ; 1174
				  04   AC  DD 00010 	    PUSHL   FORT_ERR_NO						      ;
		  0000V  CF	       02  FB 00013 	    CALLS   #2, DO_SIGNAL					      ;
					   04 00018 	    RET     							      ; 1113

; Routine Size:  17 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:24:36	DBB3:[RTL.SRC]FSIGNA.B32;9					Page 4
;
;00100  1177	GLOBAL ROUTINE FOR$$SIGNAL_STO (	! SIGNAL_STOP FORTRAN error and STOP
;00200  1178		FORT_ERR_NO)		! FORTRAN error code 0:120 or 32-bit cond value
;00300  1179		:NOVALUE =		! No value returned.
;00400  1180	!++
;00500  1181	! FUNCTIONAL DESCRIPTION:
;00600  1182	!
;00700  1183	!	Convert FORTRAN error code number to 32-bit VAX-11 error code.
;00800  1184	!	See description for FOR$$SIGNAL above which is identical,
;00900  1185	!	except that FOR$$SIGNAL_STO calls LIB$STOP instead of LIB$SIGNAL.
;01000  1186	!--
;01100  1187	
;01200  1188	    BEGIN
;01300  1189	    DO_SIGNAL (.FORT_ERR_NO, LIB$STOP);
;01400  1190	    RETURN
;01500  1191	    END;





					 0000 00019 	    .ENTRY  FOR$$SIGNAL_STO, Save nothing			      ; 1177
			    00000000G  00  9F 0001B 	    PUSHAB  LIB$STOP						      ; 1189
				  04   AC  DD 00021 	    PUSHL   FORT_ERR_NO						      ;
		  0000V  CF	       02  FB 00024 	    CALLS   #2, DO_SIGNAL					      ;
					   04 00029 	    RET     							      ; 1177

; Routine Size:  17 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:24:36	DBB3:[RTL.SRC]FSIGNA.B32;9					Page 5
;
;00100  1192	GLOBAL ROUTINE FOR$$SIG_FATINT		! SIGNAL_STOP OTS$_FATINTERR and STOP
;00200  1193		:NOVALUE =		! No value returned.
;00300  1194	!++
;00400  1195	! FUNCTIONAL DESCRIPTION:
;00500  1196	!
;00600  1197	!	SIGNAL_STOP OTS$_FATINTERR = FATAL INTERNAL ERROR IN RUN-TIME LIBRARY.
;00700  1198	!	See description for FOR$$SIGNAL above which is identical,
;00800  1199	!	except that FOR$$SIG_FATINT calls LIB$STOP instead of LIB$SIGNAL.
;00900  1200	!	Note: the current LUB (if any) is ignored and no UNIT is printed.
;01000  1201	!--
;01100  1202	
;01200  1203	    BEGIN
;01300  1204	    FOR$$SIG_NO_LUB (OTS$_FATINTERR);
;01400  1205	    RETURN
;01500  1206	    END;





					 0000 0002A 	    .ENTRY  FOR$$SIG_FATINT, Save nothing			      ; 1192
			    00000000G  8F  DD 0002C 	    PUSHL   #OTS$_FATINTERR					      ; 1204
		  0000V  CF	       01  FB 00032 	    CALLS   #1, FOR$$SIG_NO_LUB					      ;
					   04 00037 	    RET     							      ; 1192

; Routine Size:  14 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:24:36	DBB3:[RTL.SRC]FSIGNA.B32;9					Page 6
;
;00100  1207	GLOBAL ROUTINE FOR$$SIG_DATCOR		! SIGNAL_STOP OTS$_INTDATCOR and STOP
;00200  1208		:NOVALUE =		! No value returned.
;00300  1209	!++
;00400  1210	! FUNCTIONAL DESCRIPTION:
;00500  1211	!
;00600  1212	!	SIGNAL_STOP OTS$_INTDATCOR = INTERNAL DATA CORRUPTED IN RUN-TIME LIBRARY.
;00700  1213	!	See description for FOR$$SIGNAL above which is identical,
;00800  1214	!	except that FOR$$SIG_DATCOR calls LIB$STOP instead of LIB$SIGNAL.
;00900  1215	!	Note: the current LUB (if any) is ignored and no UNIT is printed.
;01000  1216	!--
;01100  1217	
;01200  1218	    BEGIN
;01300  1219	    FOR$$SIG_NO_LUB (OTS$_INTDATCOR);
;01400  1220	    RETURN
;01500  1221	    END;





					 0000 00038 	    .ENTRY  FOR$$SIG_DATCOR, Save nothing			      ; 1207
			    00000000G  8F  DD 0003A 	    PUSHL   #OTS$_INTDATCOR					      ; 1219
		  0000V  CF	       01  FB 00040 	    CALLS   #1, FOR$$SIG_NO_LUB					      ;
					   04 00045 	    RET     							      ; 1207

; Routine Size:  14 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:24:36	DBB3:[RTL.SRC]FSIGNA.B32;9					Page 7
;
;00100  1222	ROUTINE DO_SIGNAL (		! Internal routine to do work for FOR$$SIGNAL and FOR$$SIGNAL_STO
;00200  1223		FORT_ERR_NO,		! Value of FORTRAN error number (0:120) or 32-bit cond value
;00300  1224		SIGNAL_ROUTINE)		! adr. of LIB$SIGNAL or LIB$STOP
;00400  1225		: NOVALUE =		! No value returned
;00500  1226	!++
;00600  1227	! FUNCTIONAL DESCRIPTION:
;00700  1228	!
;00800  1229	!	Converts error code number to 32-bit VAX-11 error code.
;00900  1230	!	See description of FOR$$SIGNAL above.
;01000  1231	!
;01100  1232	! FORMAL PARAMETERS:
;01200  1233	!
;01300  1234	!	FORT_ERR_NO.rlu.v	FORTRAN error code (0:120) or 32-bit cond value
;01400  1235	!	SIGNAL_ROUTINE		Adr. of LIB$SIGNAL or LIB$STOP
;01500  1236	!
;01600  1237	! IMPLICIT INPUTS:
;01700  1238	!
;01800  1239	!	OTS$$A_CUR_LUB		Adr. of current LUB/ISB/RAB
;01900  1240	!				Obtained by JSB to FOR$$CB_GET.
;02000  1241	!	{FAB,RAB}$L_STS		RMS error status
;02100  1242	!	{FAB,RAB}$L_STV		RMS error value or operating system error code
;02200  1243	!
;02300  1244	! IMPLICIT OUTPUTS:
;02400  1245	!
;02500  1246	!	{FAB,RAB}$L_STS		RMS error status - set to 0
;02600  1247	!	{FAB,RAB}$L_STV		RMS error value or operating system error code - set to 0
;02700  1248	!	FORTRAN error #, RMS STS, RMS STV, logical unit number saved in
;02800  1249	!				OWN storage in FOR$ERRSNS module for later
;02900  1250	!				call by user to ERRSNS.
;03000  1251	!
;03100  1252	! COMPLETION CODES:
;03200  1253	!
;03300  1254	!	NONE
;03400  1255	!
;03500  1256	! SIDE EFFECTS:
;03600  1257	!
;03700  1258	!	Converts FORTRAN error code to 32-bit VAX-11 error code and SIGNALs.
;03800  1259	!	Saves error info in FOR$ERRSNS OWN storage.
;03900  1260	!--
;04000  1261	

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:24:36	DBB3:[RTL.SRC]FSIGNA.B32;9					Page 8
;
;00100  1262	    BEGIN
;00200  1263	
;00300  1264	    GLOBAL REGISTER
;00400  1265		CCB = K_CCB_REG: REF BLOCK [,BYTE];	! Adr. of current LUB/ISB/RAB
;00500  1266	
;00600  1267	    LOCAL
;00700  1268		FILE_NAME_DSC: DSC$DESCRIPTOR,	! File name descriptor for resultant file name
;00800  1269		RABORFAB: REF BLOCK[, BYTE],
;00900  1270		STS,				! RMS RAB or FAB error status
;01000  1271		STV,				! RMS RAB or FAB error status
;01100  1272		VAX_11_COND_VAL: BLOCK[4,BYTE];	! 32-bit VAX-11 error code
;01200  1273	    MAP
;01300  1274		FORT_ERR_NO: BLOCK [4,BYTE];	! Maybe already a 32-bit VAX-11 error code
;01400  1275	
;01500  1276	    FOR$$CB_GET ();			! Set CCB to adr. of current LUB/ISB/RAB
;01600  1277	
;01700  1278	    !+
;01800  1279	    ! Convert FORTRAN error code to 32-bit VAX-11 error code. 
;01900  1280	    ! Conversion is done by copying FORTRAN error number to code field,
;02000  1281	    ! setting the severity code to SEVERE,
;02100  1282	    ! for all errors except FOR$_OUTCONERR (63='OUTPUT CONVERSION ERROR')
;02200  1283	    ! which is set to ERROR instead so that image will continue
;02300  1284	    ! by default since output field is flagged with ***s.
;02400  1285	    ! All other continuable errors are signaled SEVERE so that user
;02500  1286	    ! must take overt action in order to continue past the error.
;02600  1287	    ! setting the facility code to FOR$K_FAC_NO,
;02700  1288	    ! and setting the facility specific bit (STS$V_FAC_SP).
;02800  1289	    !-
;02900  1290	
;03000  1291	    VAX_11_COND_VAL = COND_VALUE (.FORT_ERR_NO);
;03100  1292	
;03200  1293	    !+
;03300  1294	    ! Get RMS error status from RAB or if not error there from FAB (if any).
;03400  1295	    ! Then set error status longwords to 0 so will not be found again.
;03500  1296	    ! Note: this code depends on the fact that FAB$L_STS/STV have the same offsets
;03600  1297	    ! as RAB$L_STS/STV.
;03700  1298	    !-
;03800  1299	
;03900  1300	    RABORFAB = .CCB;
;04000  1301	    IF (.CCB[RAB$L_STS] OR .CCB[RAB$L_STS] EQL 0) AND .CCB[LUB$A_FAB] NEQA 0
;04100  1302	    THEN
;04200  1303		RABORFAB = .CCB[LUB$A_FAB];
;04300  1304	
;04400  1305	    IF NOT .RABORFAB[RAB$L_STS]
;04500  1306	    THEN
;04600  1307		BEGIN
;04700  1308		STS = .RABORFAB[RAB$L_STS];
;04800  1309		STV = .RABORFAB[RAB$L_STV];
;04900  1310		END
;05000  1311	
;05100  1312	    ELSE		! Neither FAB nor RAB have errors, report 0 for now \\\\
;05200  1313		STS = STV = 0;
;05300  1314	
;05400  1315	    RABORFAB[RAB$L_STS] = 0;
;05500  1316	    RABORFAB[RAB$L_STV] = 0;

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:24:36	DBB3:[RTL.SRC]FSIGNA.B32;9					Page 8-1
;
;05600  1317	
;05700  1318	    !+
;05800  1319	    ! Save FORTRAN error number, RMS STS, RMS STV, logical unit number and VAX-11 condition value
;05900  1320	    !-
;06000  1321	
;06100  1322	    FOR$$ERRSNS_SAV (.FORT_ERR_NO, .STS, .STV, .CCB[LUB$B_LUN], .VAX_11_COND_VAL);
;06200  1323	
;06300  1324	    !+
;06400  1325	    ! Set up resultant file name descriptor that gets put in signal arg list.
;06500  1326	    ! If no resultant name string is around, use a dummy string of length 0.
;06600  1327	    !-
;06700  1328	
;06800  1329	    FILE_NAME_DSC[DSC$W_LENGTH] = .CCB[LUB$B_RSL];
;06900  1330	    FILE_NAME_DSC[DSC$B_DTYPE] = FILE_NAME_DSC[DSC$B_CLASS] = 0;
;07000  1331	    FILE_NAME_DSC[DSC$A_POINTER] =
;07100  1332		( IF .CCB[LUB$B_RSL] EQLU 0
;07200  1333		  THEN
;07300  1334		      0
;07400  1335		  ELSE
;07500  1336		      .CCB[LUB$A_RSN]);
;07600  1337	
;07700  1338	    !+
;07800  1339	    ! Call LIB$STOP to STOP the error or LIB$SIGNAL to SIGNAL the error.
;07900  1340	    ! Order of args is same as defined in FPAR.MDL for use with SYS$PUT_MESSAGE
;08000  1341	    !-
;08100  1342	
;08200  1343	    (.SIGNAL_ROUTINE) (
;08300  1344		.VAX_11_COND_VAL,	! 32-bit VAX-11 error code
;08400  1345		K_NO_FAO_SIGARG,	! no. of FAO arguments following in FORTRAN error message
;08500  1346		.CCB[LUB$B_LUN],	! FORTRAN unit number
;08600  1347		FILE_NAME_DSC,
;08700  1348		0,			! Leave room for user PC to be filled in
;08800  1349					! by FORTRAN specific handler established on user call
;08900  1350		.STS,			! RMS FAB or RAB STS or 0
;09000  1351		.STV);			! RMS FAB or RAB STV or 0
;09100  1352	
;09200  1353	    !+
;09300  1354	    ! Return
;09400  1355	    !-
;09500  1356	
;09600  1357	    RETURN
;09700  1358	    END;			! End of FOR$$SIGNAL_STO routine





					 081C 00046 DO_SIGNAL:
							    .WORD   Save R2,R3,R4,R11					      ; 1222
		         5E 	       08  C2 00048 	    SUBL2   #8, SP						      ;
			    00000000G  00  16 0004B 	    JSB     FOR$$CB_GET						      ; 1276
				  04   AC  DD 00051 	    PUSHL   FORT_ERR_NO						      ; 1291
		  0000V  CF	       01  FB 00054 	    CALLS   #1, COND_VALUE					      ;
		         54 	       50  D0 00059 	    MOVL    R0, VAX_11_COND_VAL					      ;
		         50 	       5B  D0 0005C 	    MOVL    CCB, RABORFAB					      ; 1300

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:24:36	DBB3:[RTL.SRC]FSIGNA.B32;9					Page 8-2
;
		         05 	  08   AB  E8 0005F 	    BLBS    8(CCB), 1$						      ; 1301
				  08   AB  D5 00063 	    TSTL    8(CCB)						      ;
				       09  12 00066 	    BNEQ    2$							      ;
				  E8   AB  D5 00068 1$:     TSTL    -24(CCB)						      ;
				       04  13 0006B 	    BEQL    2$							      ;
		         50 	  E8   AB  D0 0006D 	    MOVL    -24(CCB), RABORFAB					      ; 1303
		         06 	  08   A0  E8 00071 2$:     BLBS    8(RABORFAB), 3$					      ; 1305
		         52 	  08   A0  7D 00075 	    MOVQ    8(RABORFAB), STS					      ; 1308
				       02  11 00079 	    BRB     4$							      ; 1305
				       52  7C 0007B 3$:     CLRQ    STS							      ; 1313
				  08   A0  7C 0007D 4$:     CLRQ    8(RABORFAB)						      ; 1315
				       54  DD 00080 	    PUSHL   VAX_11_COND_VAL					      ; 1322
		         7E 	  F6   AB  98 00082 	    CVTBL   -10(CCB), -(SP)					      ;
				       0C  BB 00086 	    PUSHR   #^M<R2,R3>						      ;
				  04   AC  DD 00088 	    PUSHL   FORT_ERR_NO						      ;
	      00000000G  00	       05  FB 0008B 	    CALLS   #5, FOR$$ERRSNS_SAV					      ;
		         6E 	  F7   AB  9B 00092 	    MOVZBW  -9(CCB), FILE_NAME_DSC				      ; 1329
				  02   AE  B4 00096 	    CLRW    FILE_NAME_DSC+2					      ; 1330
				  F7   AB  95 00099 	    TSTB    -9(CCB)						      ; 1332
				       04  12 0009C 	    BNEQ    5$							      ;
				       50  D4 0009E 	    CLRL    R0							      ;
				       04  11 000A0 	    BRB     6$							      ;
		         50 	  F8   AB  D0 000A2 5$:     MOVL    -8(CCB), R0						      ;
		    04   AE	       50  D0 000A6 6$:     MOVL    R0, FILE_NAME_DSC+4					      ; 1331
				       0C  BB 000AA 	    PUSHR   #^M<R2,R3>						      ; 1343
				       7E  D4 000AC 	    CLRL    -(SP)						      ;
				  0C   AE  9F 000AE 	    PUSHAB  FILE_NAME_DSC					      ;
		         7E 	  F6   AB  98 000B1 	    CVTBL   -10(CCB), -(SP)					      ;
				       03  DD 000B5 	    PUSHL   #3							      ;
				       54  DD 000B7 	    PUSHL   VAX_11_COND_VAL					      ;
		    08   BC	       07  FB 000B9 	    CALLS   #7, @SIGNAL_ROUTINE					      ;
					   04 000BD 	    RET     							      ; 1222

; Routine Size:  120 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:24:36	DBB3:[RTL.SRC]FSIGNA.B32;9					Page 9
;
;00100  1359	GLOBAL ROUTINE FOR$$SIG_NO_LUB (	! SIGNAL_STOP FORTRAN error and STOP
;00200  1360		FORT_ERR_NO,		! FORTRAN error code 0:120 or 32-bit cond value
;00300  1361		FORT_LUN)		! Optional FORTRAN logical unit number
;00400  1362					! VAX-11 error code
;00500  1363		:NOVALUE =		! No value returned.
;00600  1364	!++
;00700  1365	! FUNCTIONAL DESCRIPTION:
;00800  1366	!
;00900  1367	!	Convert FORTRAN error code number to 32-bit VAX-11 error code.
;01000  1368	!	The following SIGNAL_STOP arguments are obtained from the
;01100  1369	!	argument list only since no LUB/ISB/RAB yet:
;01200  1370	!
;01300  1371	!		VAX-11 error code: 
;01400  1372	!			STS$V_SEVERITY = STS$K_SEVERE
;01500  1373	!			STS$V_CODE = FORTRAN error number
;01600  1374	!			STS$V_FAC_SP = 1 (facility specific error messages
;01700  1375	!			STS$V_FAC_NO = FORTRAN facility no. (FOR$K_FAC_NO)
;01800  1376	!		3 = No. of following FAO arguments
;01900  1377	!		FORTRAN unit number
;02000  1378	!		0 (no adr. of file name string)
;02100  1379	!		User PC of call to library (set to 0 here, rewritten by handler before RESIGNAL)
;02200  1380	!
;02300  1381	! FORMAL PARAMETERS:
;02400  1382	!
;02500  1383	!	FORT_ERR_NO.rlu.v	FORTRAN error code (0:120) or 32-bit cond value
;02600  1384	!				32-bit VAX-11 error code with LH already set.
;02700  1385	!	[FORT_LUN.rlu.v]	Optional unit number, 0 used if not present
;02800  1386	!
;02900  1387	! IMPLICIT INPUTS:
;03000  1388	!
;03100  1389	!	NONE
;03200  1390	!
;03300  1391	! IMPLICIT OUTPUTS:
;03400  1392	!
;03500  1393	!	NONE
;03600  1394	!
;03700  1395	! COMPLETION CODES:
;03800  1396	!
;03900  1397	!	NONE
;04000  1398	!
;04100  1399	! SIDE EFFECTS:
;04200  1400	!
;04300  1401	!	Converts FORTRAN error code to 32-bit VAX-11 error code and SIGNAL_STOPs.
;04400  1402	!--

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:24:36	DBB3:[RTL.SRC]FSIGNA.B32;9					Page 10
;
;00100  1403	    BEGIN
;00200  1404	    LOCAL
;00300  1405		VAX_11_COND_VAL: BLOCK[4,BYTE];	! 32-bit VAX-11 error code
;00400  1406	    MAP
;00500  1407		FORT_ERR_NO: BLOCK[,BYTE];	! Mabe 32-bit VAX-11 error code
;00600  1408	
;00700  1409	    !+
;00800  1410	    ! Convert FORTRAN error code to 32-bit VAX-11 error code unless
;00900  1411	    ! already converted by the caller.  Conversion is done
;01000  1412	    ! by copying FORTRAN error number to code field,
;01100  1413	    ! setting the severity code to SEVERE,
;01200  1414	    ! setting the facility code to FOR$K_FAC_NO,
;01300  1415	    ! and setting the facility specific bit (STS$V_FAC_SP).
;01400  1416	    !-
;01500  1417	
;01600  1418	    VAX_11_COND_VAL = COND_VALUE (.FORT_ERR_NO);
;01700  1419	
;01800  1420	    !+
;01900  1421	    ! Save FORTRAN error #, RMS STS = 0, RMS STV = 0, logical unit number, and VAX-11 condition value.
;02000  1422	    ! If FORT_LUN not present, use 0 (e.g., INVALID ARG TO FORTRAN I/O SYSTEM)
;02100  1423	    !-
;02200  1424	
;02300  1425	    FOR$$ERRSNS_SAV (.FORT_ERR_NO, 0, 0, 
;02400  1426		(IF ACTUALCOUNT () GTRU 1 THEN .FORT_LUN ELSE 0), .VAX_11_COND_VAL);
;02500  1427	
;02600  1428	    !+
;02700  1429	    ! Call LIB$STOP to SIGNAL_STOP the error
;02800  1430	    ! Order of args is same as defined in FPAR.MDL for use with SYS$PUT_MESSAGE
;02900  1431	    !-
;03000  1432	
;03100  1433	    LIB$STOP (
;03200  1434		.VAX_11_COND_VAL,	! 32-bit VAX-11 error code
;03300  1435		K_NO_FAO_SIGARG,	! no. of FAO arguments following in FORTRAN error message
;03400  1436		.FORT_LUN,		! FORTRAN logical unit number
;03500  1437		ZEROED_DSC,		! No file name is available, so send none
;03600  1438					! but must make list have same offsets for handlers to change user PC
;03700  1439		0,			! Leave room for user PC to be filled in
;03800  1440					! by FORTRAN specific handler established on user call
;03900  1441		0,0);			! For now include 0 RMS error codes \\\\
;04000  1442	
;04100  1443	    !+
;04200  1444	    ! Return
;04300  1445	    !-
;04400  1446	
;04500  1447	    RETURN
;04600  1448	    END;			! End of FOR$$SIG_NO_LUB routine





					 0004 000BE 	    .ENTRY  FOR$$SIG_NO_LUB, Save R2				      ; 1359
				  04   AC  DD 000C0 	    PUSHL   FORT_ERR_NO						      ; 1418
		  0000V  CF	       01  FB 000C3 	    CALLS   #1, COND_VALUE					      ;
		         52 	       50  D0 000C8 	    MOVL    R0, VAX_11_COND_VAL					      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:24:36	DBB3:[RTL.SRC]FSIGNA.B32;9					Page 10-1
;
				       52  DD 000CB 	    PUSHL   VAX_11_COND_VAL					      ; 1425
		         01 	       6C  91 000CD 	    CMPB    (AP), #1						      ; 1426
				       05  1B 000D0 	    BLEQU   1$							      ;
				  08   AC  DD 000D2 	    PUSHL   FORT_LUN						      ;
				       02  11 000D5 	    BRB     2$							      ;
				       7E  D4 000D7 1$:     CLRL    -(SP)						      ;
				       7E  7C 000D9 2$:     CLRQ    -(SP)						      ; 1425
				  04   AC  DD 000DB 	    PUSHL   FORT_ERR_NO						      ;
	      00000000G  00	       05  FB 000DE 	    CALLS   #5, FOR$$ERRSNS_SAV					      ;
				       7E  7C 000E5 	    CLRQ    -(SP)						      ; 1433
				       7E  D4 000E7 	    CLRL    -(SP)						      ;
				FF13   CF  9F 000E9 	    PUSHAB  ZEROED_DSC						      ; 1359
				  08   AC  DD 000ED 	    PUSHL   FORT_LUN						      ; 1433
				       03  DD 000F0 	    PUSHL   #3							      ;
				       52  DD 000F2 	    PUSHL   VAX_11_COND_VAL					      ;
	      00000000G  00	       07  FB 000F4 	    CALLS   #7, LIB$STOP					      ;
					   04 000FB 	    RET     							      ; 1359

; Routine Size:  62 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 19:24:36	DBB3:[RTL.SRC]FSIGNA.B32;9					Page 11
;
;00100  1449	ROUTINE COND_VALUE (	! Internal routine to convert from FORTRAN error # 
;00200  1450					! to VAX-11 condition value
;00300  1451		FORT_ERR_NO)		! Value of FORTRAN error # (0:120) or 32-bit cond value
;00400  1452		 =			! Value is 32-bit VAX-11 condition value
;00500  1453	!++
;00600  1454	! FUNCTIONAL DESCRIPTION:
;00700  1455	!
;00800  1456	!	Converts from FORTRAN error number to 32-bit VAX-11 condition value
;00900  1457	!	complete with proper severity and all other fields set.
;01000  1458	!	If already a 32-bit condition value (ie GTRU FOR$K_ERR_MAX),
;01100  1459	!	no converions is done.  Instead the FORTRAN error # is FOR$K_NOTFORSPE
;01200  1460	!	which has a value of 1 and indicates a non-FORTRAN specific error.
;01300  1461	!
;01400  1462	! FORMAL PARAMETERS:
;01500  1463	!
;01600  1464	!	FORT_ERR_NO		! Value of FORTRAN error # (0:120) or 32-bit cond value
;01700  1465	!
;01800  1466	! IMPLICIT INPUTS:
;01900  1467	!
;02000  1468	!	NONE
;02100  1469	!
;02200  1470	! IMPLICIT OUTPUTS:
;02300  1471	!
;02400  1472	!	NONE
;02500  1473	!
;02600  1474	! ROUTINE VALUE:
;02700  1475	! COMPLETION CODES:
;02800  1476	!
;02900  1477	!	32-bit VAX-11 condition value.
;03000  1478	!
;03100  1479	! SIDE EFFECTS:
;03200  1480	!
;03300  1481	!	NONE
;03400  1482	!--
;03500  1483	
;03600  1484	    BEGIN
;03700  1485	    MAP
;03800  1486		FORT_ERR_NO: BLOCK [4, BYTE];		! Could be a condition value
;03900  1487	    LOCAL
;04000  1488		VAX_11_COND_VAL: BLOCK [4, BYTE];	! 32-bit VAX-11 error condition value
;04100  1489	
;04200  1490	    !+
;04300  1491	    ! Convert FORTRAN error code to 32-bit VAX-11 error code, unless already
;04400  1492	    ! a 32-bit condition value (some other facility than FOR$ in LH).
;04500  1493	    ! Conversion is done by copying FORTRAN error number to code field,
;04600  1494	    ! setting the severity code to SEVERE, except error 63 (OUTPUT CONVERIOSN ERROR)
;04700  1495	    ! in which case the severity is set to ERROR.
;04800  1496	    ! Thus the user must do something explicit in order to continue
;04900  1497	    ! for all errors, except 63 (but it has ***s so error flagged).
;05000  1498	    ! Therefore the user will not inadverantly use data which had errors in it.
;05100  1499	    ! setting the facility code to FOR$K_FAC_NO,
;05200  1500	    ! and setting the facility specific bit (STS$V_FAC_SP).
;05300  1501	    !-
;05400  1502	
;05500  1503	    IF .FORT_ERR_NO LEQU FOR$K_MAX_ERR

; Bliss-32 10.1-416	Monday 21-AUG-1978 19:24:36	DBB3:[RTL.SRC]FSIGNA.B32;9					Page 11-1
;
;05600  1504	    THEN
;05700  1505		BEGIN
;05800  1506		VAX_11_COND_VAL = 0;
;05900  1507		VAX_11_COND_VAL[STS$V_SEVERITY] = (IF .FORT_ERR_NO EQL FOR$K_OUTCONERR 
;06000  1508						  THEN 
;06100  1509							STS$K_ERROR 
;06200  1510						  ELSE 
;06300  1511							STS$K_SEVERE);	
;06400  1512		VAX_11_COND_VAL[STS$V_CODE] = .FORT_ERR_NO;
;06500  1513		VAX_11_COND_VAL[STS$V_FAC_SP] = 1;
;06600  1514		VAX_11_COND_VAL[STS$V_FAC_NO] = FOR$K_FAC_NO;
;06700  1515		END
;06800  1516	    ELSE
;06900  1517		VAX_11_COND_VAL = .FORT_ERR_NO;
;07000  1518	
;07100  1519	    RETURN .VAX_11_COND_VAL
;07200  1520	    END;			! End of COND_VALUE routine





					 0000 000FC COND_VALUE:
							    .WORD   Save nothing					      ; 1449
	      0000005D   8F	  04   AC  D1 000FE 	    CMPL    FORT_ERR_NO, #93					      ; 1503
				       27  1A 00106 	    BGTRU   3$							      ;
				       51  D4 00108 	    CLRL    VAX_11_COND_VAL					      ; 1506
		         3F 	  04   AC  D1 0010A 	    CMPL    FORT_ERR_NO, #63					      ; 1507
				       05  12 0010E 	    BNEQ    1$							      ;
		         50 	       02  D0 00110 	    MOVL    #2, R0						      ;
				       03  11 00113 	    BRB     2$							      ;
		         50 	       04  D0 00115 1$:     MOVL    #4, R0						      ;
	   03 	         00 	       50  F0 00118 2$:     INSV    R0, #0, #3, VAX_11_COND_VAL				      ;
				       51     0011C									      ;
	   0C 	         03 	  04   AC  F0 0011D 	    INSV    FORT_ERR_NO, #3, #12, VAX_11_COND_VAL		      ; 1512
				       51     00122									      ;
		         51 	8000   8F  A8 00123 	    BISW2   #32768, VAX_11_COND_VAL				      ; 1513
	   0C 	         10 	       18  F0 00128 	    INSV    #24, #16, #12, VAX_11_COND_VAL			      ; 1514
				       51     0012C									      ;
				       04  11 0012D 	    BRB     4$							      ; 1503
		         51 	  04   AC  D0 0012F 3$:     MOVL    FORT_ERR_NO, VAX_11_COND_VAL			      ; 1517
		         50 	       51  D0 00133 4$:     MOVL    VAX_11_COND_VAL, R0					      ; 1519
					   04 00136 	    RET     							      ; 1449

; Routine Size:  59 bytes


;07300  1521	END				! End of module
;07400  1522	ELUDOM







; Bliss-32 10.1-416	Monday 21-AUG-1978 19:24:36	DBB3:[RTL.SRC]FSIGNA.B32;9					Page 11-2
;
;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  FOR$CODE       	   311  NOWRT,  RD ,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]STARLET.L32;1		      2688        12         0       110





; Size:		303 code + 8 data bytes
; Run Time:	00:13.3
; Elapsed Time:	00:27.5
; Memory Used:	191 pages
; Compilation Complete
