FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (2)      42  DECLARATIONS
   (3)     100  FAL$DECODE_MSG - DECODE DAP MESSAGE
   (4)     253  CNF_MSG - DECODE CONFIGURATION MESSAGE
   (5)     311  ATT_MSG - DECODE ATTRIBUTES MESSAGE
   (6)     466  ACC_MSG - DECODE ACCESS MESSAGE
   (9)     538  CTL_MSG - DECODE CONTROL MESSAGE
   (10)    651  CON_MSG - DECODE CONTINUE TRANSFER MESSAGE
   (11)    677  ACK_MSG - DECODE ACKNOWLEDGE MESSAGE
   (12)    686  CMP_MSG - DECODE ACCESS COMPLETE MESSAGE
   (13)    729  DAT_MSG - DECODE DATA MESSAGE
   (14)    754  STS_MSG - DECODE STATUS MESSAGE
   (15)    788  STORE_FIELD - STORE NEXT FIELD ROUTINES
   (16)    887  STORE_EXT - STORE EXTENSIBLE FIELD
   (17)    916  STORE_FIX - STORE FIXED LENGTH FIELD
   (18)    936  STORE_IMG - STORE IMAGE FIELD
   (19)    952  STORE_ROM - STORE REST OF MESSAGE
   (20)    989  ERROR PROCESSSING AND EXIT ROUTINES
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page   1
X0.1-16                                                                                                                          (1)

                                     0000     1 	.TITLE	FALDECODE - DECODE DAP MESSAGE
                                     0000     2 	.IDENT	/X0.1-16/
                                     0000     3 
                                     0000     4 ;
                                     0000     5 ;			  COPYRIGHT (c) 1977, 1978 BY
                                     0000     6 ;	      DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
                                     0000     7 ;
                                     0000     8 ; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
                                     0000     9 ; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
                                     0000    10 ; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
                                     0000    11 ; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
                                     0000    12 ; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
                                     0000    13 ; TRANSFERRED.
                                     0000    14 ;
                                     0000    15 ; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
                                     0000    16 ; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
                                     0000    17 ; CORPORATION.
                                     0000    18 ;
                                     0000    19 ; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
                                     0000    20 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
                                     0000    21 ;
                                     0000    22 
                                     0000    23 ;++
                                     0000    24 ; FACILITY: DECNET FILE ACCESS LISTENER (FAL)
                                     0000    25 ;
                                     0000    26 ; ABSTRACT:
                                     0000    27 ;
                                     0000    28 ;	THIS MODULE DECODES DAP MESSAGES INTO THE FORMAT OF THE DAP
                                     0000    29 ;	CONTROL BLOCK ($DAPDEF).
                                     0000    30 ;
                                     0000    31 ; ENVIRONMENT:
                                     0000    32 ;
                                     0000    33 ;	THE FAL IMAGE EXECUTES IN THE CONTEXT OF A PROCESS CREATED BY
                                     0000    34 ;	NETACP. IT RUNS IN USER MODE AND REQUIRES NETWORK PRIVILEGE.
                                     0000    35 ;
                                     0000    36 ; AUTHOR: JAMES A. KRYCKA,	CREATION DATE: 16-JUN-77
                                     0000    37 ;
                                     0000    38 ; MODIFICATIONS:
                                     0000    39 ;
                                     0000    40 ;--
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page   2
X0.1-16         DECLARATIONS                                                                                                     (2)

                                     0000    42 	.SBTTL	DECLARATIONS
                                     0000    43 
                                     0000    44 ;
                                     0000    45 ; INCLUDE FILES:
                                     0000    46 ;
                                     0000    47 	$DAPDEF				; DEFINE DAP CONTROL BLOCK SYMBOLS
                                     0000    48 	$DAPFLDDEF			; DEFINE DAP FIELD ID SYMBOLS
                                     0000    49 ;	.LIST	MEB
                                     0000    50 ;
                                     0000    51 ; MACROS:
                                     0000    52 ;
                                     0000    53 ;++
                                     0000    54 ; STORE_FIELD OBTAINS THE NEXT FIELD (IF ANY) FROM THE DAP MESSAGE BEING
                                     0000    55 ; PARSED, CONVERTS IT TO AN APPROPRIATE FORMAT, AND STORES THE RESULT IN THE
                                     0000    56 ; DESIGNATED FIELD OF THE DAP CONTROL BLOCK. THE ARGUMENTS (CODED IN-LINE) ARE:
                                     0000    57 ;	FORMAT	= FORMAT OR STRUCTURE OF THE INPUT FIELD. CHOICES ARE:
                                     0000    58 ;		  K_EXT	= EXTENSIBLE FIELD (BIT7 OF EACH BYTE USED TO
                                     0000    59 ;			  SIGNIFY TERMINATION/CONTINUATION (0/1) OF FIELD)
                                     0000    60 ;		  K_FIX	= FIXED LENGTH FIELD
                                     0000    61 ;		  K_IMG	= IMAGE FIELD (COUNTED STRING)
                                     0000    62 ;		  K_ROM	= REST-OF-MESSAGE IS TAKEN AS THE NEXT FIELD
                                     0000    63 ;	SIZE	= SIZE IN BYTES OF DESTINATION FIELD IN DAP CONTROL BLOCK
                                     0000    64 ;	NAME	= SYMBOLIC NAME OF DAP FIELD USED TO CREATE SYMBOLIC
                                     0000    65 ;		  DAP OFFSET AND FIELD ID VALUES
                                     0000    66 ;	MASK	= BYTE FLAG MASK TO CONTROL FIELD PROCESSING
                                     0000    67 ;--
                                     0000    68 
                                     0000    69 	.MACRO	STORE_FIELD FORMAT,SIZE,NAME,MASK=0
                                     0000    70 	BSBW	STORE_FIELD
                                     0000    71 	.BYTE	SIZE
                                     0000    72 TMP1..=.
                                     0000    73 	.IIF EQ	<SIZE-1>,	.BYTE	DAP$B_'NAME
                                     0000    74 	.IIF EQ	<SIZE-2>,	.BYTE	DAP$W_'NAME
                                     0000    75 	.IIF EQ	<SIZE-4>,	.BYTE	DAP$L_'NAME
                                     0000    76 	.IIF EQ	<SIZE-8>,	.BYTE	DAP$Q_'NAME
                                     0000    77 TMP2..=.
                                     0000    78 	.IIF EQ	<TMP2..-TMP1..>,.BYTE	DAP$T_'NAME
                                     0000    79 	.BYTE	DAP$_'NAME
                                     0000    80 	.BYTE	FORMAT!MASK
                                     0000    81 	.ENDM	STORE_FIELD
                                     0000    82 
                                     0000    83 ;
                                     0000    84 ; EQUATED SYMBOLS:
                                     0000    85 ;
                           00000000  0000    86 K_EXT=0			; EXTENSIBLE FIELD FORMAT
                           00000001  0000    87 K_FIX=1			; FIXED LENGTH FIELD FORMAT
                           00000002  0000    88 K_IMG=2			; IMAGE FIELD FORMAT
                           00000003  0000    89 K_ROM=3			; REST-OF-MESSAGE FIELD FORMAT
                           00000004  0000    90 V_DESC=4		; STORE ONLY QUADWORD DESCRIPTOR OF SRC FIELD
                           00000005  0000    91 V_TRUNC=5		; IF SRC FIELD SIZE GTR DST FIELD SIZE, TRUNCATE
                                     0000    92 			;  EXTRA BYTES (INSTEAD OF DECLARING AN ERROR)
                           00000010  0000    93 M_DESC=<1@V_DESC>	; MASK FOR V_DESC
                           00000020  0000    94 M_TRUNC=<1@V_TRUNC>	; MASK FOR V_TRUNC
                                     0000    95 ;
                                     0000    96 ; OWN STORAGE:
                                     0000    97 ;
                                     0000    98 ;	NONE
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page   3
X0.1-16         FAL$DECODE_MSG - DECODE DAP MESSAGE                                                                              (3)

                                     0000   100 	.SBTTL	FAL$DECODE_MSG - DECODE DAP MESSAGE
                                 00000000   101 	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE
                                     0000   102 
                                     0000   103 ;++
                                     0000   104 ; FUNCTIONAL DESCRIPTION:
                                     0000   105 ;
                                     0000   106 ;	FAL$DECODE IS RESPONSIBLE FOR CONVERTING A DAP MESSAGE INTO
                                     0000   107 ;	THE FORMAT OF THE DAP CONTROL BLOCK.
                                     0000   108 ;
                                     0000   109 ; CALLING SEQUENCE:
                                     0000   110 ;
                                     0000   111 ;	CALLS	#1,FAL$DECODE_MSG
                                     0000   112 ;
                                     0000   113 ; INPUT PARAMETERS:
                                     0000   114 ;
                                     0000   115 ;	4(AP)	ADDRESS OF DAP CONTROL BLOCK
                                     0000   116 ;
                                     0000   117 ; IMPLICIT INPUTS:
                                     0000   118 ;
                                     0000   119 ;	NONE
                                     0000   120 ;
                                     0000   121 ; OUTPUT PARAMETERS:
                                     0000   122 ;
                                     0000   123 ;	R0	COMPLETION CODE
                                     0000   124 ;	R1	DESTROYED
                                     0000   125 ;
                                     0000   126 ; IMPLICIT OUTPUTS:
                                     0000   127 ;
                                     0000   128 ;	VARIOUS FIELDS OF THE DAP CONTROL BLOCK ARE UPDATED.
                                     0000   129 ;
                                     0000   130 ; COMPLETION CODES:
                                     0000   131 ;
                                     0000   132 ;	R0	1 = SUCCESS; 0 = FAILURE
                                     0000   133 ;
                                     0000   134 ; SIDE EFFECTS:
                                     0000   135 ;
                                     0000   136 ;	NONE
                                     0000   137 ;
                                     0000   138 ;--
                                     0000   139 
                               0FFC' 0000   140 	.ENTRY	FAL$DECODE_MSG,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
                                     0002   141 					; ENTRY POINT
                                     0002   142 
                                     0002   143 ;
                                     0002   144 ; PERFORM INITIALIZATION.
                                     0002   145 ;
                                     0002   146 
            59         04 AC     D0  0002   147 	MOVL	4(AP),R9		; GET ADDRESS OF DAP CONTROL BLOCK
         08 A9            01     D0  0006   148 	MOVL	#1,DAP$L_DCODE_STS(R9)	; ASSUME SUCCESS
            5A         10 A9     7D  000A   149 	MOVQ	DAP$Q_MSG_BUF1(R9),R10	; R10 = SIZE OF MESSAGE
                                     000E   150 					; R11 = ADDRESS OF START-OF-MESSAGE
                                     000E   151 					;	(I.E., NEXT BYTE)
         18 A9            5A     7D  000E   152 	MOVQ	R10,DAP$Q_MSG_BUF2(R9)	; STORE IN RESULT DESCRIPTOR
            5A            5B     C0  0012   153 	ADDL2	R11,R10			; R10 = ADDRESS OF END-OF-MESSAGE + 1
                                     0015   154 					;	(I.E., LAST BYTE + 1)
                                     0015   155 					; R11 = ADDRESS OF START-OF-MESSAGE
                                     0015   156 					;	(I.E., NEXT BYTE)
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page   4
X0.1-16         FAL$DECODE_MSG - DECODE DAP MESSAGE                                                                              (3)

                                     0015   157 
                                     0015   158 ;
                                     0015   159 ; DECODE THE DAP MESSAGE HEADER (OPERATOR PORTION OF THE MESSAGE).
                                     0015   160 ;
                                     0015   161 
                       20 A9     D4  0015   162 	CLRL	DAP$L_OPERATOR(R9)	; ZERO DAP HEADER FIELDS
                                     0018   163 
                                     0018   164 ;
                                     0018   165 ; PROCESS DAP MESSAGE TYPE FIELD (REQUIRED).
                                     0018   166 ;
                                     0018   167 
                                     0018   168 		ASSUME DAP$K_CNF_MSG EQ 1
                                     0018   169 		ASSUME DAP$K_ATT_MSG EQ 2
                                     0018   170 		ASSUME DAP$K_ACC_MSG EQ 3
                                     0018   171 		ASSUME DAP$K_CTL_MSG EQ 4
                                     0018   172 		ASSUME DAP$K_CON_MSG EQ 5
                                     0018   173 		ASSUME DAP$K_ACK_MSG EQ 6
                                     0018   174 		ASSUME DAP$K_CMP_MSG EQ 7
                                     0018   175 		ASSUME DAP$K_DAT_MSG EQ 8
                                     0018   176 		ASSUME DAP$K_STS_MSG EQ 9
                                     0018   177 
            58       048A'CF     9E  0018   178 	MOVAB	W^ERROR_FORMAT,R8	; SPECIFY ROUTINE TO EXECUTE ON EOM
                                     001D   179 	STORE_FIELD	K_FIX,1,TYPE	; SAVE TYPE FIELD
                          66     95  0024   180 	TSTB	(R6)			; CHECK FOR VALUE TOO LOW
                          5F     13  0026   181 	BEQL	HDR_INVALID		; BRANCH ON ERROR
            09            66     91  0028   182 	CMPB	(R6),#DAP$K_STS_MSG	; CHECK FOR VALUE TOO HIGH
                          5A     1A  002B   183 	BGTRU	HDR_INVALID		; BRANCH ON ERROR
         0A A9            66     90  002D   184 	MOVB	(R6),DAP$B_MSG_TYPE(R9)	; SAVE MESSAGE TYPE IN DAP$L_DCODE_STS
                                     0031   185 
                                     0031   186 ;
                                     0031   187 ; PROCESS THE DAP MESSAGE FLAGS FIELD (USUALLY REQUIRED).
                                     0031   188 ; THIS IS A MENU FIELD WHEREBY EACH BIT SET DENOTES THAT ITS ASSOCIATED
                                     0031   189 ; FIELD IS INCLUDED IN THE MESSAGE.
                                     0031   190 ;
                                     0031   191 
            58         8D'AF     9E  0031   192 	MOVAB	B^HDR_FORMAT,R8		; SPECIFY ROUTINE TO EXECUTE ON EOM
                                     0035   193 	STORE_FIELD	K_EXT,1,FLAGS	; SAVE FLAGS FIELD
            04            66     93  003C   194 	BITB	(R6),#DAP$K_FLAGS_I	; CHECK FOR INVALID BITS
                          46     12  003F   195 	BNEQ	HDR_INVALID		; BRANCH ON ERROR
                                     0041   196 
                                     0041   197 ;
                                     0041   198 ; PROCESS THE STREAMID AND LENGTH FIELDS (OPTIONAL).
                                     0041   199 ;
                                     0041   200 
            58       048A'CF     9E  0041   201 	MOVAB	W^ERROR_FORMAT,R8	; SPECIFY ROUTINE TO EXECUTE ON EOM
            66            00     E1  0046   202 	BBC	#DAP$V_STREAMID,(R6),10$ ; BRANCH IF NOT SPECIFIED
                          0B         0049       
                                     004A   203 	STORE_FIELD	K_FIX,1,STREAMID ; SAVE STREAMID VALUE
                          66     95  0051   204 	TSTB	(R6)			; CURRENTLY, MULTI-STREAMS ARE
                                     0053   205 					; NOT SUPPORTED, SO CHECK VALUE
                          35     12  0053   206 	BNEQ	HDR_UNSUPPORT		; BRANCH ON ERROR
         21 A9            01     E1  0055   207 10$:	BBC	#DAP$V_LENGTH,DAP$B_FLAGS(R9),20$ ; BRANCH IF NOT SPECIFIED
                          16         0059       
                                     005A   208 	STORE_FIELD	K_FIX,1,LENGTH	; SAVE LENGTH FIELD
            50            66     9A  0061   209 	MOVZBL	(R6),R0			; GET OPERAND LENGTH VALUE
            5B            50     C1  0064   210 	ADDL3	R0,R11,R1		; COMPUTE NEW END-OF-MESSAGE + 1 ADDRESS
                          51         0067       
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page   5
X0.1-16         FAL$DECODE_MSG - DECODE DAP MESSAGE                                                                              (3)

            5A            51     D1  0068   211 	CMPL	R1,R10			; ERROR IF NOT ENOUGH BYTES IN BUFFER
                          1A     1A  006B   212 	BGTRU	HDR_INVALID		;  TO CONTAIN MESSAGE
            5A            51     D0  006D   213 	MOVL	R1,R10			; UPDATE END-OF-MESSAGE ADDRESS
                                     0070   214 
                                     0070   215 ;
                                     0070   216 ; DISPATCH TO APPROPRIATE ROUTINE TO PROCESS THE MESSAGE BODY (OPERAND
                                     0070   217 ; PORTION OF THE MESSAGE). NOTE, THE TYPE FIELD VALUE HAS BEEN FOUND TO BE
                                     0070   218 ; WITHIN THE CASE RANGE.
                                     0070   219 ;
                                     0070   220 
                                     0070   221 20$:	$CASEB	SELECTOR=DAP$B_MSG_TYPE(R9),BASE=#DAP$K_CNF_MSG, DISPL=<-
                                     0070   222 		CNF_MSG-		; CONFIGURATION MESSAGE
                                     0070   223 		ATT_MSG-		; ATTRIBUTES MESSAGE
                                     0070   224 		ACC_MSG-		; ACCESS MESSAGE
                                     0070   225 		CTL_MSG-		; CONTROL MESSAGE
                                     0070   226 		CON_MSG-		; CONTINUE TRANSFER MESSAGE
                                     0070   227 		ACK_MSG-		; ACKNOWLEDGE MESSAGE
                                     0070   228 		CMP_MSG-		; ACCESS COMPLETE MESSAGE
                                     0070   229 		DAT_MSG-		; DATA MESSAGE
                                     0070   230 		STS_MSG-		; STATUS MESSAGE
                                     0070   231 	>				;
                                     0087   232 
                                     0087   233 ;
                                     0087   234 ; BRANCH HERE ON EXCEPTION CONDITION.
                                     0087   235 ;
                                     0087   236 
                                     0087   237 HDR_INVALID:				;
                          0406   31  0087   238 	BRW	ERROR_INVALID		; BRANCH AID
                                     008A   239 HDR_UNSUPPORT:				;
                          040F   31  008A   240 	BRW	ERROR_UNSUPPORT		; BRANCH AID
                                     008D   241 HDR_FORMAT:				; EOM ON FLAGS FIELD ENCOUNTERED
                                     008D   242 					;  VALID ONLY IF OPERAND PART OF
                                     008D   243 					;  MESSAGE MAY BE ZERO LENGTH
                                 91  008D   244 	CMPB	DAP$B_MSG_TYPE(R9),-	; OK IF ACKNOWLEDGE MESSAGE
            06         0A A9         008E   245 		#DAP$K_ACK_MSG		; "
                          09     13  0091   246 	BEQL	10$			; "
                                 91  0093   247 	CMPB	DAP$B_MSG_TYPE(R9),-	; OK IF ATTRIBUTES MESSAGE
            02         0A A9         0094   248 		#DAP$K_ATT_MSG		; "
                          03     13  0097   249 	BEQL	10$			; "
                          03EE   31  0099   250 	BRW	ERROR_FORMAT		; BRANCH AID
                          040A   31  009C   251 10$:	BRW	EXIT_SUCCESS		; BRANCH AID
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page   6
X0.1-16         CNF_MSG - DECODE CONFIGURATION MESSAGE                                                                           (4)

                                     009F   253 	.SBTTL	CNF_MSG - DECODE CONFIGURATION MESSAGE
                                     009F   254 
                                     009F   255 ;++
                                     009F   256 ; DECODE THE OPERAND FIELDS OF THE CONFIGURATION MESSAGE.
                                     009F   257 ;--
                                     009F   258 
                                     009F   259 CNF_MSG:				; CONTROL POINT
            58       048A'CF     9E  009F   260 	MOVAB	W^ERROR_FORMAT,R8	; SPECIFY ROUTINE TO EXECUTE ON EOM
                                     00A4   261 
                                     00A4   262 ;
                                     00A4   263 ; PROCESS THE BUFFER SIZE FIELD (REQUIRED).
                                     00A4   264 ;
                                     00A4   265 
                                     00A4   266 	STORE_FIELD	K_FIX,2,BUFSIZ	; SAVE BUFFER SIZE FIELD
                                     00AB   267 
                                     00AB   268 ;
                                     00AB   269 ; PROCESS SYSTEM SOFTWARE AND DAP PROTOCOL VERSION NUMBER FIELDS (REQUIRED).
                                     00AB   270 ; THESE FIELDS ARE FOR INFORMATION PURPOSES ONLY; HENCE NO BOUNDS
                                     00AB   271 ; CHECKING ON THEIR VALUES IS PERFORMED.
                                     00AB   272 ;
                                     00AB   273 
                                     00AB   274 	STORE_FIELD	K_FIX,1,OSTYPE	; SAVE OPERATING SYSTEM TYPE FIELD
                                     00B2   275 	STORE_FIELD	K_FIX,1,FILESYS	; SAVE FILE SYSTEM TYPE FIELD
                                     00B9   276 	STORE_FIELD	K_FIX,1,VERNUM	; SAVE DAP VERSION # FIELD
                                     00C0   277 	STORE_FIELD	K_FIX,1,ECONUM	; SAVE ECO VERSION # FIELD
                                     00C7   278 	STORE_FIELD	K_FIX,1,USRNUM	; SAVE USER PROTOCOL VERSION # FIELD
                                     00CE   279 	STORE_FIELD	K_FIX,1,SOFTVER	; SAVE DEC SOFTWARE RELEASE # FIELD
                                     00D5   280 	STORE_FIELD	K_FIX,1,USRSOFT	; SAVE USER SOFTWARE RELEASE # FIELD
                                     00DC   281 
                                     00DC   282 ;
                                     00DC   283 ; PROCESS THE SYSTEM CAPABILITIES FIELD (REQUIRED).
                                     00DC   284 ; BITS SET THAT ARE NOT DEFINED IN DAP V4.1 ARE IGNORED (NOT FLAGGED AS
                                     00DC   285 ; AN ERROR) TO FACILITATE COMPATIBILITY WITH LATER IMPLEMENTATIONS OF DAP
                                     00DC   286 ; ON OTHER SYSTEMS.
                                     00DC   287 ;
                                     00DC   288 
                                     00DC   289 	STORE_FIELD	K_EXT,8,SYSCAP,<M_TRUNC> ; SAVE SYSTEM CAPABILITIES FIELD
                                     00E3   290 
                                     00E3   291 ;
                                     00E3   292 ; SET FLAG IF PARTNER IMPLEMENTED TO DAP SPEC AFTER V4.1.
                                     00E3   293 ;
                                     00E3   294 
            50         28 A9     9A  00E3   295 	MOVZBL	DAP$B_VERNUM(R9),R0	; COMBINE VERSION NUMBER AND ECO
            50            08     78  00E7   296 	ASHL	#8,R0,R0		;  NUMBER FIELDS INTO ONE VALUE
                          50         00EA       
            50         29 A9     80  00EB   297 	ADDB2	DAP$B_ECONUM(R9),R0	;  "
       0401 8F            50     B1  00EF   298 	CMPW	R0,#^X0401		; DID PARTNER IMPLEMENT AFTER DAP V4.1?
                          04     1B  00F4   299 	BLEQU	10$			; BRANCH IF NO
                                     00F6   300 	SSB	#DAP$V_AFTER_V41,DAP$Q_DCODE_FLG(R9) ; SET FLAG
                                     00FA   301 
                                     00FA   302 ;
                                     00FA   303 ; SET FLAG IF PARTNER IS VAX/VMS.
                                     00FA   304 ;
                                     00FA   305 
            07         26 A9     91  00FA   306 10$:	CMPB	DAP$B_OSTYPE(R9),#DAP$K_VAXVMS
                          04     12  00FE   307 	BNEQ	20$			; BRANCH IF PARTNER IS NOT VAX/VMS
                                     0100   308 	SSB	#DAP$V_VAXVMS,DAP$Q_DCODE_FLG(R9) ; SET FLAG
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page   7
X0.1-16         CNF_MSG - DECODE CONFIGURATION MESSAGE                                                                           (4)

                          03A2   31  0104   309 20$:	BRW	EXIT_SUCCESS		; MESSAGE PARSED SUCCESSFULLY!
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page   8
X0.1-16         ATT_MSG - DECODE ATTRIBUTES MESSAGE                                                                              (5)

                                     0107   311 	.SBTTL	ATT_MSG - DECODE ATTRIBUTES MESSAGE
                                     0107   312 
                                     0107   313 ;++
                                     0107   314 ; DECODE THE OPERAND FIELDS OF THE ATTRIBUTES MESSAGE.
                                     0107   315 ;--
                                     0107   316 
                                     0107   317 ATT_MSG:				; CONTROL POINT
                                     0107   318 
                                     0107   319 ;
                                     0107   320 ; APPLY DEFAULT VALUES TO OPTIONAL FIELDS AS DEFINED IN THE CORPORATE
                                     0107   321 ; DAP SPECIFICATION.
                                     0107   322 ;
                                     0107   323 
         3C A9            02     90  0107   324 	MOVB	#DAP$M_IMAGE,DAP$B_DATATYPE(R9)
         3D A9            00     90  010B   325 	MOVB	#DAP$K_SEQ,DAP$B_ORG(R9)
         3E A9            01     90  010F   326 	MOVB	#DAP$K_FIX,DAP$B_RFM(R9)
         40 A9       0200 8F     B0  0113   327 	MOVW	#DAP$K_BLS_D,DAP$W_BLS(R9)
                       38 A9     D4  0119   328 	CLRL	DAP$L_ATTMENU(R9)
                       3F A9     94  011C   329 	CLRB	DAP$B_RAT(R9)
                       42 A9     B4  011F   330 	CLRW	DAP$W_MRS(R9)
                       44 A9     D4  0122   331 	CLRL	DAP$L_ALQ(R9)
                       48 A9     94  0125   332 	CLRB	DAP$B_BKS(R9)
                       49 A9     94  0128   333 	CLRB	DAP$B_FSZ(R9)
                       4C A9     D4  012B   334 	CLRL	DAP$L_MRN(R9)
                       50 A9     7C  012E   335 	CLRQ	DAP$Q_RUNSYS(R9)
                       4A A9     B4  0131   336 	CLRW	DAP$W_DEQ(R9)
                       58 A9     D4  0134   337 	CLRL	DAP$L_FOP(R9)
                       5C A9     D4  0137   338 	CLRL	DAP$L_DEV(R9)
                                     013A   339 
                                     013A   340 ;
                                     013A   341 ; PROCESS THE ATTRIBUTES MENU FIELD (OPTIONAL).
                                     013A   342 ; EACH BIT SET DENOTES THAT ITS ASSOCIATED FIELD FOLLOWS IN THE MESSAGE.
                                     013A   343 ;
                                     013A   344 
                                     013A   345 		ASSUME DAP$V_DATATYPE+1 EQ DAP$V_ORG
                                     013A   346 		ASSUME DAP$V_ORG+1 EQ DAP$V_RFM
                                     013A   347 		ASSUME DAP$V_RFM+1 EQ DAP$V_RAT
                                     013A   348 		ASSUME DAP$V_RAT+1 EQ DAP$V_BLS
                                     013A   349 		ASSUME DAP$V_BLS+1 EQ DAP$V_MRS
                                     013A   350 		ASSUME DAP$V_MRS+1 EQ DAP$V_ALQ
                                     013A   351 		ASSUME DAP$V_ALQ+1 EQ DAP$V_BKS
                                     013A   352 		ASSUME DAP$V_BKS+1 EQ DAP$V_FSZ
                                     013A   353 		ASSUME DAP$V_FSZ+1 EQ DAP$V_MRN
                                     013A   354 		ASSUME DAP$V_MRN+1 EQ DAP$V_RUNSYS
                                     013A   355 		ASSUME DAP$V_RUNSYS+1 EQ DAP$V_DEQ
                                     013A   356 		ASSUME DAP$V_DEQ+1 EQ DAP$V_FOP
                                     013A   357 		ASSUME DAP$V_FOP+2 EQ DAP$V_DEV
                                     013A   358 
            58       04A9'CF     9E  013A   359 	MOVAB	W^EXIT_SUCCESS,R8	; ALL DONE IF EOM
                                     013F   360 	STORE_FIELD	K_EXT,4,ATTMENU	; SAVE ATTRIBUTES MENU FIELD
            58       048A'CF     9E  0146   361 	MOVAB	W^ERROR_FORMAT,R8	; SPECIFY ROUTINE TO EXECUTE ON EOM
            5C            66     D0  014B   362 	MOVL	(R6),AP			; COPY MENU TO SCRATCH REGISTER
   0001A000 8F            5C     D3  014E   363 	BITL	AP,#DAP$K_ATTMENU_I	; SCREEN OUT INVALID BITS
                          03     13  0155   364 	BEQL	ATT_LOOP		; BRANCH IF ALL BITS VALID
                          0336   31  0157   365 	BRW	ERROR_INVALID		; BRANCH ON ERROR
                                     015A   366 ATT_LOOP:				;
            0F            00     EA  015A   367 	FFS	#0,#DAP$V_DEV+1,AP,R0	; GET POSITION OF NEXT BIT SET
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page   9
X0.1-16         ATT_MSG - DECODE ATTRIBUTES MESSAGE                                                                              (5)

            50            5C         015D       
                                     015F   368 	CSB	R0,AP			; CLEAR MENU BIT JUST FOUND
                       F4 AF     9F  0163   369 	PUSHAB	B^ATT_LOOP		; PUSH RETURN ADDRESS ON STACK
                                     0166   370 	$CASEB	SELECTOR=R0,DISPL=<-	; NEXT FIELD:
                                     0166   371 		10$-			; DATATYPE
                                     0166   372 		20$-			; ORG
                                     0166   373 		30$-			; RFM
                                     0166   374 		40$-			; RAT
                                     0166   375 		50$-			; BLS
                                     0166   376 		60$-			; MRS
                                     0166   377 		70$-			; ALQ
                                     0166   378 		80$-			; BKS
                                     0166   379 		90$-			; FSZ
                                     0166   380 		100$-			; MRN
                                     0166   381 		110$-			; RUNSYS
                                     0166   382 		120$-			; DEQ
                                     0166   383 		130$-			; FOP
                                     0166   384 		ATT_LOOP-		; BSZ--CANNOT REACH HERE
                                     0166   385 		150$-			; DEV
                                     0166   386 	>				;
                          031E   31  0188   387 	BRW	EXIT_SUCCESS		; MESSAGE PARSED SUCCESSFULLY!
                                     018B   388 
                                     018B   389 ;
                                     018B   390 ; PROCESS THE FIELDS SPECIFIED IN THE MENU (OPTIONAL).
                                     018B   391 ;
                                     018B   392 
                                     018B   393 50$:	STORE_FIELD	K_FIX,2,BLS	; SAVE BLOCK SIZE FIELD
                                 05  0192   394 	RSB				;
                                     0193   395 60$:	STORE_FIELD	K_FIX,2,MRS	; SAVE MAXIMUM RECORD SIZE FIELD
                                 05  019A   396 	RSB				;
                                     019B   397 70$:	STORE_FIELD	K_IMG,4,ALQ	; SAVE ALLOCATION QUANTITY FIELD
                                 05  01A2   398 	RSB				;
                                     01A3   399 80$:	STORE_FIELD	K_FIX,1,BKS	; SAVE BUCKET SIZE FIELD
                                 05  01AA   400 	RSB				;
                                     01AB   401 90$:	STORE_FIELD	K_FIX,1,FSZ	; SAVE FIXED CONTROL AREA SIZE FIELD
                                 05  01B2   402 	RSB				;
                                     01B3   403 100$:	STORE_FIELD	K_IMG,4,MRN	; SAVE MAXIMUM RECORD NUMBER FIELD
                                 05  01BA   404 	RSB				;
                                     01BB   405 110$:	STORE_FIELD	K_IMG,8,RUNSYS,<M_DESC> ; SAVE DESCRIPTOR OF
                                     01C2   406 					      ;  RUN-TIME SYSTEM FIELD
                                 05  01C2   407 	RSB				;
                                     01C3   408 120$:	STORE_FIELD	K_FIX,2,DEQ	; SAVE DEFAULT EXTENSION QUANTITY FIELD
                                 05  01CA   409 	RSB				;
                                     01CB   410 10$:	STORE_FIELD	K_EXT,1,DATATYPE ; SAVE DATA TYPE FIELD
         84 8F            66     93  01D2   411 	BITB	(R6),#DAP$K_DATATYP_I	; CHECK FOR INVALID BITS
                          63     12  01D6   412 	BNEQ	ATT_INVALID		; BRANCH ON ERROR
                                 05  01D8   413 	RSB				;
                                     01D9   414 20$:	STORE_FIELD	K_FIX,1,ORG	; SAVE FILE ORGANIZATION FIELD
                                     01E0   415 
                                     01E0   416 		ASSUME	DAP$K_SEQ EQ 0
                                     01E0   417 		ASSUME	DAP$K_REL EQ 16
                                     01E0   418 		ASSUME	DAP$K_IDX EQ 32
                                     01E0   419 
                          66     95  01E0   420 	TSTB	(R6)			; CHECK FOR VALID VALUE
                          0C     13  01E2   421 	BEQL	25$			; BRANCH IF OK
            10            66     91  01E4   422 	CMPB	(R6),#DAP$K_REL		; CHECK FOR VALID VALUE
                          07     13  01E7   423 	BEQL	25$			; BRANCH IF OK
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  10
X0.1-16         ATT_MSG - DECODE ATTRIBUTES MESSAGE                                                                              (5)

            20            66     91  01E9   424 	CMPB	(R6),#DAP$K_IDX		; CHECK FOR UNSUPPORTED VALUE
                          50     13  01EC   425 	BEQL	ATT_UNSUPPORT		; BRANCH ON ERROR
                          4B     11  01EE   426 	BRB	ATT_INVALID		; BRANCH ON ERROR
                                 05  01F0   427 25$:	RSB				;
                                     01F1   428 30$:	STORE_FIELD	K_FIX,1,RFM	; SAVE RECORD FORMAT FIELD
                                     01F8   429 
                                     01F8   430 		ASSUME DAP$K_UDF EQ 0
                                     01F8   431 		ASSUME DAP$K_FIX EQ 1
                                     01F8   432 		ASSUME DAP$K_VAR EQ 2
                                     01F8   433 		ASSUME DAP$K_VFC EQ 3
                                     01F8   434 		ASSUME DAP$K_STM EQ 4
                                     01F8   435 		ASSUME DAP$K_LSA EQ 5
                                     01F8   436 
            05            66     91  01F8   437 	CMPB	(R6),#DAP$K_LSA		; CHECK FOR VALID VALUE
                          3E     1A  01FB   438 	BGTRU	ATT_INVALID		; BRANCH IF OUT-OF-RANGE
            03            66     91  01FD   439 	CMPB	(R6),#DAP$K_VFC		; CHECK FOR SUPPORTED VALUE
                          3C     1A  0200   440 	BGTRU	ATT_UNSUPPORT		; BRANCH IF OUT-OF-RANGE
                                 05  0202   441 	RSB				;
                                     0203   442 40$:	STORE_FIELD	K_EXT,1,RAT	; SAVE RECORD ATTRIBUTES FIELD
            20            66     93  020A   443 	BITB	(R6),#DAP$K_RAT_I	; CHECK FOR INVALID BITS
                          2C     12  020D   444 	BNEQ	ATT_INVALID		; BRANCH ON ERROR
                                 05  020F   445 	RSB				;
                                     0210   446 130$:	STORE_FIELD	K_EXT,4,FOP	; SAVE FILE OPTIONS FIELD
   01020024 8F            66     D3  0217   447 	BITL	(R6),#DAP$K_FOP_I	; CHECK FOR INVALID BITS
                          1B     12  021E   448 	BNEQ	ATT_INVALID		; BRANCH ON ERROR
   00001010 8F            66     D3  0220   449 	BITL	(R6),#<DAP$M_DLK!DAP$M_FID> ; CHECK FOR UNSUPPORTED BITS
                          15     12  0227   450 	BNEQ	ATT_UNSUPPORT		; BRANCH ON ERROR
                                 05  0229   451 	RSB				;
                                     022A   452 150$:	STORE_FIELD	K_EXT,4,DEV	; SAVE DEVICE CHARACTERISTICS FIELD
   04000040 8F            66     D3  0231   453 	BITL	(R6),#DAP$K_DEV_I	; CHECK FOR INVALID BITS
                          01     12  0238   454 	BNEQ	ATT_INVALID		; BRANCH ON ERROR
                                 05  023A   455 	RSB				;
                                     023B   456 
                                     023B   457 ;
                                     023B   458 ; BRANCH HERE ON EXCEPTION CONDITION.
                                     023B   459 ;
                                     023B   460 
                                     023B   461 ATT_INVALID:				;
                          0252   31  023B   462 	BRW	ERROR_INVALID		; BRANCH AID
                                     023E   463 ATT_UNSUPPORT:				;
                          025B   31  023E   464 	BRW	ERROR_UNSUPPORT		; BRANCH AID
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  11
X0.1-16         ACC_MSG - DECODE ACCESS MESSAGE                                                                                  (6)

                                     0241   466 	.SBTTL	ACC_MSG - DECODE ACCESS MESSAGE
                                     0241   467 
                                     0241   468 ;++
                                     0241   469 ; DECODE THE OPERAND FIELDS OF THE ACCESS MESSAGE.
                                     0241   470 ;--
                                     0241   471 
                                     0241   472 ACC_MSG:				; CONTROL POINT
                                     0241   473 
                                     0241   474 ;
                                     0241   475 ; PROCESS THE ACCFUNC FIELD (REQUIRED).
                                     0241   476 ;
                                     0241   477 
            58       048A'CF     9E  0241   478 	MOVAB	W^ERROR_FORMAT,R8	; SPECIFY ROUTINE TO EXECUTE ON EOM
                                     0246   479 	STORE_FIELD	K_FIX,1,ACCFUNC	; SAVE ACCESS FUNCTION FIELD
                                     024D   480 
                                     024D   481 		ASSUME DAP$K_OPEN EQ 1
                                     024D   482 		ASSUME DAP$K_CREATE EQ 2
                                     024D   483 		ASSUME DAP$K_ERASE EQ 4
                                     024D   484 		ASSUME DAP$K_SUBMIT EQ 7
                                     024D   485 		ASSUME DAP$K_EXECUTE EQ 8
                                     024D   486 
                                     024D   487 	$CASEB	SELECTOR=(R6),BASE=#DAP$K_OPEN,DISPL=<- ; CHECK VALUE
                                     024D   488 		10$-			; $OPEN
                                     024D   489 		10$-			; $CREATE
                                     024D   490 		ERROR_INVALID-		; $RENAME
                                     024D   491 		10$-			; $ERASE
                                     024D   492 		ERROR_INVALID-		; RESERVED
                                     024D   493 		ERROR_INVALID-		; DIR_LIST
                                     024D   494 		10$-			; SUBMIT COMMAND FILE
                                     024D   495 		10$-			; EXECUTE COMMAND FILE
                                     024D   496 	>
                          41     11  0261   497 	BRB	ACC_INVALID		; VALUE OUT-OF-RANGE
                                     0263   498 
                                     0263   499 ;
                                     0263   500 ; PROCESS THE ACCOPT AND FILESPEC FIELDS (REQUIRED).
                                     0263   501 ;
                                     0263   502 
                                     0263   503 10$:	STORE_FIELD	K_EXT,1,ACCOPT	; SAVE ACCESS OPTIONS FIELD
            08            66     93  026A   504 	BITB	(R6),#DAP$K_ACCOPT_I	; CHECK FOR INVALID BITS
                          35     12  026D   505 	BNEQ	ACC_INVALID		; BRANCH ON ERROR
                                     026F   506 	STORE_FIELD	K_IMG,8,FILESPEC,<M_DESC>
                                     0276   507 					; SAVE DESCRIPTOR OF THE
                                     0276   508 					;  FILE SPECIFICATION FIELD
         80 8F            66     91  0276   509 	CMPB	(R6),#128		; CHECK FOR STRING TOO LONG
                          28     1A  027A   510 	BGTRU	ACC_INVALID		; BRANCH ON ERROR
                                     027C   511 
                                     027C   512 ;
                                     027C   513 ; PROCESS THE FAC AND SHR FIELDS (OPTIONAL).
                                     027C   514 ;
                                     027C   515 
         62 A9            02     90  027C   516 	MOVB	#DAP$M_GET,DAP$B_FAC(R9) ; APPLY DEFAULT FAC VALUE
                       63 A9     94  0280   517 	CLRB	DAP$B_SHR(R9)		; APPLY DEFAULT SHR VALUE
                                     0283   518 					; ***** CONTRARY TO DAP SPEC *****
                                     0283   519 
            58       04A9'CF     9E  0283   520 	MOVAB	W^EXIT_SUCCESS,R8	; ALL DONE IF EOM
                                     0288   521 	STORE_FIELD	K_EXT,1,FAC	; SAVE FILE ACCESS FIELD
         40 8F            66     93  028F   522 	BITB	(R6),#DAP$K_FAC_I	; CHECK FOR INVALID BITS
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  12
X0.1-16         ACC_MSG - DECODE ACCESS MESSAGE                                                                                  (6)

                          0F     12  0293   523 	BNEQ	ACC_INVALID		; BRANCH ON ERROR
                                     0295   524 	STORE_FIELD	K_EXT,1,SHR	; SAVE FILE SHARING FIELD
         90 8F            66     93  029C   525 	BITB	(R6),#DAP$K_SHR_I	; CHECK FOR INVALID BITS
                          02     12  02A0   526 	BNEQ	ACC_INVALID		; BRANCH ON ERROR
                          68     17  02A2   527 	JMP	(R8)			; MESSAGE PARSED SUCCESSFULLY!
                                     02A4   528 
                                     02A4   529 ;
                                     02A4   530 ; BRANCH HERE ON  EXCEPTION CONDITION.
                                     02A4   531 ;
                                     02A4   532 
                                     02A4   533 ACC_INVALID:				;
                          01E9   31  02A4   534 	BRW	ERROR_INVALID		; BRANCH AID
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  13
X0.1-16         CTL_MSG - DECODE CONTROL MESSAGE                                                                                 (9)

                                     02A7   538 	.SBTTL	CTL_MSG - DECODE CONTROL MESSAGE
                                     02A7   539 
                                     02A7   540 ;++
                                     02A7   541 ; DECODE THE OPERAND FIELDS OF THE CONTROL MESSAGE.
                                     02A7   542 ;--
                                     02A7   543 
                                     02A7   544 CTL_MSG:				; CONTROL POINT
                                     02A7   545 
                                     02A7   546 ;
                                     02A7   547 ; APPLY DEFAULT VALUES TO OPTIONAL FIELDS AS DEFINED IN THE CORPORATE
                                     02A7   548 ; DAP SPECIFICATION.
                                     02A7   549 ;
                       70 A9     7C  02A7   550 	CLRQ	DAP$Q_KEY(R9)
                       78 A9     D4  02AA   551 	CLRL	DAP$L_ROP(R9)
                                     02AD   552 
                                     02AD   553 ;
                                     02AD   554 ; PROCESS THE CTLFUNC FIELD (REQUIRED).
                                     02AD   555 ;
                                     02AD   556 
            58       048A'CF     9E  02AD   557 	MOVAB	W^ERROR_FORMAT,R8	; SPECIFY ROUTINE TO EXECUTE ON EOM
                                     02B2   558 	STORE_FIELD	K_FIX,1,CTLFUNC	; SAVE CONTROL FUNCTION FIELD
                                     02B9   559 
                                     02B9   560 		ASSUME DAP$K_GET_READ EQ 1
                                     02B9   561 		ASSUME DAP$K_CONNECT EQ 2
                                     02B9   562 		ASSUME DAP$K_UPDATE EQ 3
                                     02B9   563 		ASSUME DAP$K_PUT_WRITE EQ 4
                                     02B9   564 		ASSUME DAP$K_DELETE EQ 5
                                     02B9   565 		ASSUME DAP$K_REWIND EQ 6
                                     02B9   566 		ASSUME DAP$K_SPACE EQ 11
                                     02B9   567 		ASSUME DAP$K_FIND EQ 14
                                     02B9   568 
                                     02B9   569 	$CASEB	SELECTOR=(R6),BASE=#DAP$K_GET_READ,DISPL=<- ; CHECK VALUE
                                     02B9   570 		20$-			; $GET OR $READ
                                     02B9   571 		10$-			; $CONNECT
                                     02B9   572 		20$-			; $UPDATE
                                     02B9   573 		20$-			; $PUT OR $WRITE
                                     02B9   574 		20$-			; $DELETE
                                     02B9   575 		20$-			; $REWIND
                                     02B9   576 		ERROR_INVALID-		; RESERVED FOR $TRUNCATE
                                     02B9   577 		ERROR_INVALID-		; RESERVED
                                     02B9   578 		ERROR_INVALID-		; RESERVED FOR $RELEASE
                                     02B9   579 		ERROR_INVALID-		; RESERVED FOR $FREE
                                     02B9   580 		20$-			; $SPACE
                                     02B9   581 		ERROR_INVALID-		; RESERVED FOR $FLUSH
                                     02B9   582 		ERROR_INVALID-		; RESERVED FOR $NXTVOL
                                     02B9   583 		20$-			; $FIND
                                     02B9   584 	>				; RESERVED FOR $EXTEND, $DISPLAY
                          62     11  02D9   585 	BRB	CTL_INVALID		; VALUE OUT-OF-RANGE
                                     02DB   586 
                                     02DB   587 ;
                                     02DB   588 ; PROCESS THE CONTROL MENU FIELD (OPTIONAL).
                                     02DB   589 ; EACH BIT SET DENOTES THAT ITS ASSOCIATED FIELD FOLLOWS IN THE MESSAGE.
                                     02DB   590 ;
                                     02DB   591 ; ***** THE CORPORATE DAP SPECIFICATION DOES IS NOT CLEAR ON HOW TO DEFAULT
                                     02DB   592 ; ***** THE RAC FIELD. THE INTERPRETATION USED HERE IS TO DEFAULT TO
                                     02DB   593 ; ***** SEQUENTIAL FILE ACCESS ON $CONNECT AND TO USE PREVIOUS VALUE FOR
                                     02DB   594 ; ***** ALL OTHER CONTROL MESSAGE FUNCTIONS.
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  14
X0.1-16         CTL_MSG - DECODE CONTROL MESSAGE                                                                                 (9)

                                     02DB   595 ;
                                     02DB   596 
                                     02DB   597 		ASSUME DAP$V_RAC+1 EQ DAP$V_KEY
                                     02DB   598 		ASSUME DAP$V_KEY+2 EQ DAP$V_ROP
                                     02DB   599 
         6E A9            03     90  02DB   600 10$:	MOVB	#DAP$K_SEQ_FILE,DAP$B_RAC(R9) ; RAC DEFAULT FOR $CONNECT
            58       04A9'CF     9E  02DF   601 20$:	MOVAB	W^EXIT_SUCCESS,R8	; ALL DONE IN EOM
                                     02E4   602 	STORE_FIELD	K_EXT,1,CTLMENU	; SAVE CONTROL MENU FIELD
            58       048A'CF     9E  02EB   603 	MOVAB	W^ERROR_FORMAT,R8	; SPECIFY ROUTINE TO EXECUTE ON EOM
            5C            66     9A  02F0   604 	MOVZBL	(R6),AP			; COPY MENU TO SCRATCH REGISTER
         54 8F            5C     93  02F3   605 	BITB	AP,#DAP$K_CTLMENU_I	; SCREEN OUT INVALID BITS
                          03     13  02F7   606 	BEQL	CTL_LOOP		; BRANCH IF ALL BITS VALID
                          0194   31  02F9   607 	BRW	ERROR_INVALID		; BRANCH ON ERROR
                                     02FC   608 CTL_LOOP:				;
            04            00     EA  02FC   609 	FFS	#0,#DAP$V_ROP+1,AP,R0	; GET POSITION OF NEXT BIT SET
            50            5C         02FF       
                                     0301   610 	CSB	R0,AP			; CLEAR MENU BIT JUST FOUND
                       F4 AF     9F  0305   611 	PUSHAB	B^CTL_LOOP		; PUSH RETURN ADDRESS ON STACK
                                     0308   612 	$CASEB	SELECTOR=R0,DISPL=<-	; NEXT FIELD:
                                     0308   613 		10$-			; RAC
                                     0308   614 		20$-			; KEY
                                     0308   615 		CTL_LOOP-		; KRF - CANNOT REACH HERE
                                     0308   616 		40$-			; ROP
                                     0308   617 	>				;
                                     0314   618 	
                          0192   31  0314   619 	BRW	EXIT_SUCCESS		; MESSAGE PARSED SUCCESSFULLY!
                                     0317   620 
                                     0317   621 ;
                                     0317   622 ; PROCESS THE FIELDS SPECIFIED IN THE MENU (OPTIONAL).
                                     0317   623 ;
                                     0317   624 
                                     0317   625 10$:	STORE_FIELD	K_FIX,1,RAC	; SAVE RECORD ACCESS FIELD
                                     031E   626 
                                     031E   627 		ASSUME DAP$K_SEQ_ACC EQ 0
                                     031E   628 		ASSUME DAP$K_KEY_ACC EQ 1
                                     031E   629 		ASSUME DAP$K_RFA_ACC EQ 2
                                     031E   630 		ASSUME DAP$K_SEQ_FILE EQ 3
                                     031E   631 		ASSUME DAP$K_BLK_VBN EQ 4
                                     031E   632 		ASSUME DAP$K_BLK_FILE EQ 5
                                     031E   633 
            05            66     91  031E   634 	CMPB	(R6),#DAP$K_BLK_FILE	; CHECK FOR VALUE TOO HIGH
                          1A     1A  0321   635 	BGTRU	CTL_INVALID		; BRANCH ON ERROR
                                 05  0323   636 	RSB				;
                                     0324   637 20$:	STORE_FIELD	K_IMG,8,KEY	; SAVE KEY FIELD
                                 05  032B   638 	RSB				;
                                     032C   639 40$:	STORE_FIELD	K_EXT,4,ROP	; SAVE RECORD OPTIONS FIELD
   00000802 8F            66     D3  0333   640 	BITL	(R6),#DAP$K_ROP_I	; CHECK FOR INVALID BITS
                          01     12  033A   641 	BNEQ	CTL_INVALID		; BRANCH ON ERROR
                                 05  033C   642 	RSB				;
                                     033D   643 
                                     033D   644 ;
                                     033D   645 ; BRANCH HERE ON  EXCEPTION CONDITION.
                                     033D   646 ;
                                     033D   647 
                                     033D   648 CTL_INVALID:				;
                          0150   31  033D   649 	BRW	ERROR_INVALID		; BRANCH AID
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  15
X0.1-16         CON_MSG - DECODE CONTINUE TRANSFER MESSAGE                                                                      (10)

                                     0340   651 	.SBTTL	CON_MSG - DECODE CONTINUE TRANSFER MESSAGE
                                     0340   652 
                                     0340   653 ;++
                                     0340   654 ; DECODE THE OPERAND FIELDS OF THE CONTINUE TRANSFER MESSAGE.
                                     0340   655 ;--
                                     0340   656 
                                     0340   657 CON_MSG:				; CONTROL POINT
                                     0340   658 
                                     0340   659 ;
                                     0340   660 ; PROCESS THE CONFUNC FIELD (REQUIRED).
                                     0340   661 ;
                                     0340   662 
            58       048A'CF     9E  0340   663 	MOVAB	W^ERROR_FORMAT,R8	; SPECIFY ROUTINE TO EXECUTE ON EOM
                                     0345   664 	STORE_FIELD	K_FIX,1,CONFUNC	; SAVE CONTINUE TRANSFER FUNCTION FIELD
                                     034C   665 
                                     034C   666 		ASSUME	DAP$K_RETRY EQ 1
                                     034C   667 		ASSUME 	DAP$K_SKIP_REC EQ 2
                                     034C   668 		ASSUME	DAP$K_ABORT EQ 3
                                     034C   669 
                                     034C   670 	$CASEB	SELECTOR=(R6),BASE=#DAP$K_RETRY,DISPL=<- ; CHECK VALUE
                                     034C   671 		EXIT_SUCCESS-		; RETRY FUNCTION
                                     034C   672 		EXIT_SUCCESS-		; SKIP RECORD
                                     034C   673 		EXIT_SUCCESS-		; ABORT TRANSFER
                                     034C   674 	>				; VALUE OUT-OF-RANGE
                          0137   31  0356   675 	BRW	ERROR_INVALID		; BRANCH AID
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  16
X0.1-16         ACK_MSG - DECODE ACKNOWLEDGE MESSAGE                                                                            (11)

                                     0359   677 	.SBTTL	ACK_MSG - DECODE ACKNOWLEDGE MESSAGE
                                     0359   678 
                                     0359   679 ;++
                                     0359   680 ; THERE ARE NO OPERAND FIELDS IN THE ACKNOWLEDGE MESSAGE.
                                     0359   681 ;--
                                     0359   682 
                                     0359   683 ACK_MSG:				; CONTROL POINT
                          014D   31  0359   684 	BRW	EXIT_SUCCESS		; MESSAGE PARSED SUCCESSFULLY!
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  17
X0.1-16         CMP_MSG - DECODE ACCESS COMPLETE MESSAGE                                                                        (12)

                                     035C   686 	.SBTTL	CMP_MSG - DECODE ACCESS COMPLETE MESSAGE
                                     035C   687 
                                     035C   688 ;++
                                     035C   689 ; DECODE THE OPERAND FIELDS OF THE ACCESS COMPLETE MESSAGE.
                                     035C   690 ;--
                                     035C   691 
                                     035C   692 CMP_MSG:				; CONTROL POINT
                                     035C   693 
                                     035C   694 ;
                                     035C   695 ; PROCESS THE CMPFUNC FIELD (REQUIRED).
                                     035C   696 ;
                                     035C   697 
            58       048A'CF     9E  035C   698 	MOVAB	W^ERROR_FORMAT,R8	; SPECIFY ROUTINE TO EXECUTE ON EOM
                                     0361   699 
                                     0361   700 		ASSUME DAP$K_CLOSE EQ 1
                                     0361   701 		ASSUME DAP$K_RESPONSE EQ 2
                                     0361   702 		ASSUME DAP$K_PURGE EQ 3
                                     0361   703 		ASSUME DAP$K_DISCON EQ 4
                                     0361   704 
                                     0361   705 	STORE_FIELD	K_FIX,1,CMPFUNC	; SAVE ACCESS COMPLETE FUNCTION FIELD
                          66     95  0368   706 	TSTB	(R6)			; CHECK FOR VALUE TOO LOW
                          20     13  036A   707 	BEQL	CMP_INVALID		; BRANCH ON ERROR
            04            66     91  036C   708 	CMPB	(R6),#DAP$K_DISCON	; CHECK FOR VALUE TOO HIGH
                          1B     1A  036F   709 	BGTRU	CMP_INVALID		; BRANCH ON ERROR
                                     0371   710 
                                     0371   711 ;
                                     0371   712 ; PROCESS THE FOP FIELD (OPTIONAL).
                                     0371   713 ;
                                     0371   714 
                     0084 C9     D4  0371   715 	CLRL	DAP$L_FOP2(R9)		; APPLY DEFAULT VALUE
            58       04A9'CF     9E  0375   716 	MOVAB	W^EXIT_SUCCESS,R8	; ALL DONE IF EOM
                                     037A   717 	STORE_FIELD	K_EXT,4,FOP2	; SAVE FILE OPTIONS FIELD
   01020024 8F            66     D3  0381   718 	BITL	(R6),#DAP$K_FOP_I	; CHECK FOR INVALID BITS
                          02     12  0388   719 	BNEQ	CMP_INVALID		; BRANCH ON ERROR
                          68     17  038A   720 	JMP	(R8)			; MESSAGE PARSED SUCCESSFULLY!
                                     038C   721 
                                     038C   722 ;
                                     038C   723 ; BRANCH HERE ON  EXCEPTION CONDITION.
                                     038C   724 ;
                                     038C   725 
                                     038C   726 CMP_INVALID:				;
                          0101   31  038C   727 	BRW	ERROR_INVALID		; BRANCH AID
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  18
X0.1-16         DAT_MSG - DECODE DATA MESSAGE                                                                                   (13)

                                     038F   729 	.SBTTL	DAT_MSG - DECODE DATA MESSAGE
                                     038F   730 
                                     038F   731 ;++
                                     038F   732 ; DECODE THE OPERAND FIELDS OF THE DATA MESSAGE.
                                     038F   733 ;--
                                     038F   734 
                                     038F   735 DAT_MSG:				; CONTROL POINT
                                     038F   736 
                                     038F   737 ;
                                     038F   738 ; PROCESS THE RECORD NUMBER FIELD (REQUIRED).
                                     038F   739 ;
                                     038F   740 
            58       048A'CF     9E  038F   741 	MOVAB	W^ERROR_FORMAT,R8	; SPECIFY ROUTINE TO EXECUTE ON EOM
                                     0394   742 	STORE_FIELD	K_IMG,8,NUMBER	; SAVE RECORD NUMBER FIELD
                                     039B   743 
                                     039B   744 ;
                                     039B   745 ; PROCESS THE FILEDATA FIELD (OPTIONAL FOR ZERO LENGTH RECORD).
                                     039B   746 ;
                                     039B   747 
                     0090 C9     D4  039B   748 	CLRL	DAP$Q_FILEDATA(R9)	; APPLY DEFAULT VALUE TO DESCRIPTOR
       0094 C9       0090 C9     9E  039F   749 	MOVAB	DAP$Q_FILEDATA(R9),DAP$Q_FILEDATA+4(R9) ; OF FIELD
            58       04A9'CF     9E  03A6   750 	MOVAB	W^EXIT_SUCCESS,R8	; ALL DONE IF EOM
                                     03AB   751 	STORE_FIELD	K_ROM,8,FILEDATA,<M_DESC> ; SAVE FILE DATA FIELD
                          68     17  03B2   752 	JMP	(R8)			; MESSAGE PARSED SUCCESSFULLY!
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  19
X0.1-16         STS_MSG - DECODE STATUS MESSAGE                                                                                 (14)

                                     03B4   754 	.SBTTL	STS_MSG - DECODE STATUS MESSAGE
                                     03B4   755 
                                     03B4   756 ;++
                                     03B4   757 ; DECODE THE OPERAND FIELDS OF THE STATUS MESSAGE.
                                     03B4   758 ;--
                                     03B4   759 
                                     03B4   760 STS_MSG:				; CONTROL POINT
                                     03B4   761 
                                     03B4   762 ;
                                     03B4   763 ; APPLY DEFAULT VALUES TO OPTIONAL FIELDS AS DEFINED IN THE CORPORATE
                                     03B4   764 ; DAP SPECIFICATION.
                                     03B4   765 ;
                                     03B4   766 
                     009C C9     7C  03B4   767 	CLRQ	DAP$Q_RFA(R9)
                     00A4 C9     D4  03B8   768 	CLRL	DAP$L_RECNUM(R9)
                     00A8 C9     D4  03BC   769 	CLRL	DAP$L_STV(R9)
                                     03C0   770 
                                     03C0   771 ;
                                     03C0   772 ; PROCESS THE STSCODE FIELD (REQUIRED).
                                     03C0   773 ;
                                     03C0   774 
            58       048A'CF     9E  03C0   775 	MOVAB	W^ERROR_FORMAT,R8	; SPECIFY ROUTINE TO EXECUTE ON EOM
                                     03C5   776 	STORE_FIELD	K_FIX,2,STSCODE	; SAVE STATUS CODE FIELD
                                     03CC   777 
                                     03CC   778 ;
                                     03CC   779 ; PROCESS THE RFA, RECNUM, AND STV FIELDS (OPTIONAL).
                                     03CC   780 ;
                                     03CC   781 
            58       04A9'CF     9E  03CC   782 	MOVAB	W^EXIT_SUCCESS,R8	; ALL DONE IF EOM
                                     03D1   783 	STORE_FIELD	K_IMG,8,RFA	; SAVE RECORD FILE ADDRESS FIELD
                                     03D8   784 	STORE_FIELD	K_IMG,4,RECNUM	; SAVE RECORD NUMBER FIELD
                                     03DF   785 	STORE_FIELD	K_IMG,4,STV	; SAVE SECONDARY STATUS FIELD
                          68     17  03E6   786 	JMP	(R8)			; MESSAGE PARSED SUCCESSFULLY!
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  20
X0.1-16         STORE_FIELD - STORE NEXT FIELD ROUTINES                                                                         (15)

                                     03E8   788 	.SBTTL	STORE_FIELD - STORE NEXT FIELD ROUTINES
                                 000003E8   789 	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE
                                     03E8   790 
                                     03E8   791 ;++
                                     03E8   792 ; FUNCTIONAL DESCRIPTION:
                                     03E8   793 ;
                                     03E8   794 ;	STORE_FIELD INVOKED FROM THE STORE_FIELD MACRO RESULTS IN THE
                                     03E8   795 ;	EXECUTION OF ONE OF THE FOLLOWING ROUTINES:
                                     03E8   796 ;
                                     03E8   797 ;	STORE_EXT INTERPRETS THE NEXT FIELD OF THE DAP MESSAGE AS AN
                                     03E8   798 ;	EXTENSIBLE FIELD OF 1 TO 32 BYTES AND STORES THE DATA PORTION OF
                                     03E8   799 ;	THE FIELD IN THE DESIGNATED FIELD OF THE DAP CONTROL BLOCK.
                                     03E8   800 ;
                                     03E8   801 ;	STORE_FIX INTERPRETS THE NEXT FIELD OF THE DAP MESSAGE AS A
                                     03E8   802 ;	FIXED LENGTH FIELD OF 1 TO 255 BYTES AND STORES THE STRING IN THE
                                     03E8   803 ;	DESIGNATED FIELD OF THE DAP CONTROL BLOCK.
                                     03E8   804 ;
                                     03E8   805 ;	STORE_IMG INTERPRETS THE NEXT FIELD OF THE DAP MESSAGE AS AN
                                     03E8   806 ;	IMAGE FIELD OF 1 TO 256 BYTES AND STORES THE DATA PORTION OF THE
                                     03E8   807 ;	FIELD IN THE DESIGNATED FIELD OF THE DAP CONTROL BLOCK.
                                     03E8   808 ;
                                     03E8   809 ;	STORE_ROM INTERPRETS THE NEXT FIELD OF THE DAP MESSAGE AS A
                                     03E8   810 ;	BINARY FIELD OF 1 TO 65535 BYTES CONSISTING OF THE REST OF THE
                                     03E8   811 ;	MESSAGE AND STORES THE STRING IN THE DESIGNATED FIELD OF THE DAP
                                     03E8   812 ;	CONTROL BLOCK.
                                     03E8   813 ;
                                     03E8   814 ; CALLING SEQUENCE:
                                     03E8   815 ;
                                     03E8   816 ;	BSB/JSB	STORE_FIELD
                                     03E8   817 ;
                                     03E8   818 ; INPUT PARAMETERS:
                                     03E8   819 ;
                                     03E8   820 ;	R8	ADDRESS OF ROUTINE TO EXECUTE IF END-OF-MESSAGE ENCOUNTERED
                                     03E8   821 ;	R9	ADDRESS OF DAP CONTROL BLOCK
                                     03E8   822 ;	R10	ADDRESS OF LAST BYTE + 1 OF DAP MESSAGE BEING PARSED
                                     03E8   823 ;	R11	ADDRESS OF NEXT BYTE OF DAP MESSAGE BEING PARSED
                                     03E8   824 ;
                                     03E8   825 ;	IN-LINE CODED ARGUMENTS:
                                     03E8   826 ;
                                     03E8   827 ;	BYTE0	SIZE IN BYTES OF THE DESTINATION FIELD IN DAP CONTROL BLOCK
                                     03E8   828 ;	BYTE1	OFFSET OF DESTINATION FIELD IN DAP CONTROL BLOCK
                                     03E8   829 ;	BYTE2	DAP FIELD IDENTIFIER (USED TO BUILD DAP STATUS CODE ON ERROR)
                                     03E8   830 ;	BYTE3	FLAGS THAT DIRECT PROCESSING OF FIELD
                                     03E8   831 ;
                                     03E8   832 ; IMPLICIT INPUTS:
                                     03E8   833 ;
                                     03E8   834 ;	NONE
                                     03E8   835 ;
                                     03E8   836 ; OUTPUT PARAMETERS:
                                     03E8   837 ;
                                     03E8   838 ;	R0-R5	DESTROYED
                                     03E8   839 ;	R6	ADDRESS OF DESTINATION FIELD IN DAP CONTROL BLOCK
                                     03E8   840 ;	R7	FIELD ID VALUE
                                     03E8   841 ;	R8-R10	UNCHANGED
                                     03E8   842 ;	R11	UPDATED NEXT BYTE POINTER
                                     03E8   843 ;
                                     03E8   844 ; IMPLICIT OUTPUTS:
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  21
X0.1-16         STORE_FIELD - STORE NEXT FIELD ROUTINES                                                                         (15)

                                     03E8   845 ;
                                     03E8   846 ;	SPECIFIED FIELD OF DAP CONTROL BLOCK IS UPDATED.
                                     03E8   847 ;
                                     03E8   848 ; COMPLETION CODES:
                                     03E8   849 ;
                                     03E8   850 ;	NONE
                                     03E8   851 ;
                                     03E8   852 ; SIDE EFFECTS:
                                     03E8   853 ;
                                     03E8   854 ;	IF END-OF-MESSAGE IS ENCOUNTERED, CONTROL IS GIVEN TO SPECIFIED
                                     03E8   855 ;	ACTION ROUTINE.
                                     03E8   856 ;
                                     03E8   857 ;	IF A PARSE ERROR IS DETECTED, CONTROL IS GIVEN TO AN APPROPRIATE
                                     03E8   858 ;	ERROR ROUTINE.
                                     03E8   859 ;
                                     03E8   860 ;--
                                     03E8   861 
                                     03E8   862 STORE_FIELD:				; CONTROL POINT
                                     03E8   863 
                                     03E8   864 ;
                                     03E8   865 ; OBTAIN THE IN-LINE CODED ARGUMENTS, CHECK FOR END-OF-MESSAGE, AND
                                     03E8   866 ; TRANSFER CONTROL TO APPROPRIATE ROUTINE.
                                     03E8   867 ;
                                     03E8   868 
            50            6E     D0  03E8   869 	MOVL	(SP),R0			; GET ADDRESS OF IN-LINE ARGUMENTS
            55            80     9A  03EB   870 	MOVZBL	(R0)+,R5		; GET DST FIELD SIZE
            56            80     9A  03EE   871 	MOVZBL	(R0)+,R6		; GET DST FIELD OFFSET
            56            59     C0  03F1   872 	ADDL2	R9,R6			; COMPUTE DST FIELD ADDRESS
            57            80     9A  03F4   873 	MOVZBL	(R0)+,R7		; GET DAP FIELD ID VALUE
            52            80     9A  03F7   874 	MOVZBL	(R0)+,R2		; GET FLAGS MASK VALUE
            6E            50     D0  03FA   875 	MOVL	R0,(SP)			; BUMP RETURN ADDRESS PAST ARGUMENT LIST
            5A            5B     D1  03FD   876 	CMPL	R11,R10			; IS THERE AT LEAST ONE BYTE LEFT?
                          11     18  0400   877 	BGEQ	10$			; BRANCH IF END-OF-MESSAGE
            02            00     EF  0402   878 	EXTZV	#0,#2,R2,R1		; GET INDEX OF ROUTINE
            51            52         0405       
                                     0407   879 	$CASEB	SELECTOR=R1,DISPL=<-	; FIELD FORMAT:
                                     0407   880 		STORE_EXT-		; EXTENSIBLE
                                     0407   881 		STORE_FIX-		; FIXED LENGTH
                                     0407   882 		STORE_IMG-		; IMAGE
                                     0407   883 		STORE_ROM-		; REST-OF-MESSAGE
                                     0407   884 	>				;
                          68     17  0413   885 10$:	JMP	(R8)			; JUMP TO DESIGNATED EOM ROUTINE
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  22
X0.1-16         STORE_EXT - STORE EXTENSIBLE FIELD                                                                              (16)

                                     0415   887 	.SBTTL	STORE_EXT - STORE EXTENSIBLE FIELD
                                     0415   888 
                                     0415   889 ;++
                                     0415   890 ; THIS ROUTINE INTERPRETS THE NEXT FIELD OF THE DAP MESSAGE AS AN
                                     0415   891 ; EXTENSIBLE FIELD OF 1 TO 32 BYTES WHERE BIT7 OF EACH BYTE DETERMINES
                                     0415   892 ; WHETHER TO CONTINUE (1) THE FIELD TO THE NEXT BYTE OR TO TERMINATE (0)
                                     0415   893 ; THE FIELD. FIRST, THE FIELD IS COMPRESSED IN PLACE (I.E., BIT7 OF EACH
                                     0415   894 ; BYTE IS DISCARDED AND THE REMAINING BITS ARE SQUEEZED TOGETHER). THEN,
                                     0415   895 ; THE RESULTANT STRING IS COPIED TO THE SPECIFIED FIELD IN THE DAP CONTROL
                                     0415   896 ; BLOCK.
                                     0415   897 ;--
                                     0415   898 
                                     0415   899 STORE_EXT:				; CONTROL POINT
            54            5B     D0  0415   900 	MOVL	R11,R4			; COPY SRC FIELD ADDRESS
                          50     D4  0418   901 	CLRL	R0			; INITIALIZE BIT POSITION INDEX
                          0A     11  041A   902 	BRB	20$			; BRANCH TO END OF LOOP BECAUSE
                                     041C   903 					;  FIRST 7 BITS ARE IN PROPER POSITION
            5A            5B     D1  041C   904 10$:	CMPL	R11,R10			; ERROR IF END-OF-MESSAGE IS REACHED
                          69     18  041F   905 	BGEQ	ERROR_FORMAT		;  BEFORE END-OF-FIELD IS REACHED
            50            6B     F0  0421   906 	INSV	(R11),R0,#7,(R4)	; PERFORM IN PLACE COMPACTION
            64            07         0424       
            50            07     C0  0426   907 20$:	ADDL2	#7,R0			; UPDATE BIT POSITION INDEX
            8B            07     E0  0429   908 	BBS	#7,(R11)+,10$		; LOOP IF FIELD IS CONTINUED TO NEXT BYTE
                          EF         042C       
            5B            54     C3  042D   909 	SUBL3	R4,R11,R3		; COMPUTE SIZE OF SRC FIELD IN BYTES
                          53         0430       
            20            53     D1  0431   910 	CMPL	R3,#32			; 'INSV' SIZE CAN NOT BE GTRU 32
                          54     14  0434   911 	BGTR	ERROR_FORMAT		; BRANCH ON ERROR
            50            00     F0  0436   912 	INSV	#0,R0,R3,(R4)		; ZERO FILL REST OF SRC FIELD
            64            53         0439       
                                     043B   913 					;  (1 BIT FOR EACH BYTE COMPRESSED)
                          31     11  043B   914 	BRB	MOVE_FIELD		; COPY STRING TO DST FIELD
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  23
X0.1-16         STORE_FIX - STORE FIXED LENGTH FIELD                                                                            (17)

                                     043D   916 	.SBTTL	STORE_FIX - STORE FIXED LENGTH FIELD
                                     043D   917 
                                     043D   918 ;++
                                     043D   919 ; THIS ROUTINE INTERPRETS THE NEXT FIELD OF THE DAP MESSAGE AS A FIXED
                                     043D   920 ; LENGTH FIELD OF 1 TO 255 BYTES AND COPIES THE STRING TO THE SPECIFIED
                                     043D   921 ; FIELD IN THE DAP CONTROL BLOCK.
                                     043D   922 ;--
                                     043D   923 
                                     043D   924 STORE_FIX:				; CONTROL POINT
            01            55     D1  043D   925 	CMPL	R5,#1			; BRANCH IF FIELD IS LONGER THAN
                          04     14  0440   926 	BGTR	10$			;  ONE BYTE
            66            8B     90  0442   927 	MOVB	(R11)+,(R6)		; STORE FIELD IN DAP CONTROL BLOCK
                                 05  0445   928 	RSB				; EXIT
            54            5B     D0  0446   929 10$:	MOVL	R11,R4			; COPY SRC FIELD ADDRESS
            55            5A     F1  0449   930 	ACBL	R10,R5,R11,20$		; BRANCH IF <R5+R11> LEQ <R10>
            0002          5B         044C       
                          39     11  044F   931 	BRB	ERROR_FORMAT		; ERROR IF NOT ENOUGH BYTES IN
                                     0451   932 					;  MESSAGE TO CONTAIN FIELD
            64            55     28  0451   933 20$:	MOVC3	R5,(R4),(R6)		; STORE FIELD IN DAP CONTROL BLOCK
                          66         0454       
                                 05  0455   934 	RSB				; EXIT
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  24
X0.1-16         STORE_IMG - STORE IMAGE FIELD                                                                                   (18)

                                     0456   936 	.SBTTL	STORE_IMG - STORE IMAGE FIELD
                                     0456   937 
                                     0456   938 ;++
                                     0456   939 ; THIS ROUTINE INTERPRETS THE NEXT FIELD OF THE DAP MESSAGE AS AN IMAGE
                                     0456   940 ; FIELD OF 1 TO 256 BYTES WHERE THE FIRST BYTE CONTAINS A COUNT OF THE
                                     0456   941 ; NUMBER OF DATA BYTES TO FOLLOW. THE DATA PORTION OF THE FIELD IS COPIED
                                     0456   942 ; TO THE SPECIFIED FIELD OF THE DAP CONTROL BLOCK.
                                     0456   943 ;--
                                     0456   944 
                                     0456   945 STORE_IMG:				; CONTROL POINT
            53            8B     9A  0456   946 	MOVZBL	(R11)+,R3		; GET BYTE COUNT OF SRC FIELD
            54            5B     D0  0459   947 	MOVL	R11,R4			; COPY ADDRESS OF DATA STRING
            53            5A     F1  045C   948 	ACBL	R10,R3,R11,MOVE_FIELD	; OK IF <R3+R11> LEQ <R10>
            000C          5B         045F       
                          26     11  0462   949 	BRB	ERROR_FORMAT		; ERROR IF NOT ENOUGH BYTES IN
                                     0464   950 					;  MESSAGE TO CONTAIN FIELD
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  25
X0.1-16         STORE_ROM - STORE REST OF MESSAGE                                                                               (19)

                                     0464   952 	.SBTTL	STORE_ROM - STORE REST OF MESSAGE
                                     0464   953 
                                     0464   954 ;++
                                     0464   955 ; THIS ROUTINE INTERPRETS THE NEXT FIELD OF THE DAP MESSAGE AS A BINARY
                                     0464   956 ; FIELD OF 1 TO 65535 BYTES CONSISTING OF THE REST OF THE MESSAGE. THE
                                     0464   957 ; STRING IS COPIED TO THE SPECIFIED FIELD OF THE DAP CONTROL BLOCK.
                                     0464   958 ;--
                                     0464   959 
                                     0464   960 STORE_ROM:				; CONTROL POINT
            5A            5B     C3  0464   961 	SUBL3	R11,R10,R3		; COMPUTE SRC FIELD SIZE
                          53         0467       
            54            5B     D0  0468   962 	MOVL	R11,R4			; COPY SRC FIELD ADDRESS
            5B            5A     D0  046B   963 	MOVL	R10,R11			; ADVANCE NEXT BYTE POINTER TO EOM
                                     046E   964 
                                     046E   965 ;
                                     046E   966 ; <R3,R4> CONTAINS DESCRIPTOR OF SRC FIELD, AND
                                     046E   967 ; <R5,R6> CONTAINS DESCRIPTOR OF DST FIELD.
                                     046E   968 ;
                                     046E   969 
                                     046E   970 MOVE_FIELD:				; COPY SRC FIELD TO DST FIELD WITH
                                     046E   971 					;  ZERO FILL
            52            04     E0  046E   972 	BBS	#V_DESC,R2,DESCRIPTOR	; BRANCH IF ONLY DESCRIPTOR DESIRED
                          14         0471       
            64            53     2C  0472   973 	MOVC5	R3,(R4),#0,R5,(R6)	; MOVE FIELD TO DAP CONTROL BLOCK
            55            00         0475       
                          66         0477       
                          0B     15  0478   974 	BLEQ	20$			; DONE IF ALL SRC BYTES ARE COPIED
                                     047A   975 					;  (I.E., SRC SIZE LEQ DST SIZE)
            52            05     E0  047A   976 	BBS	#V_TRUNC,R2,20$		; DONE IF EXTRA BYTES ARE TO BE
                          07         047D       
                                     047E   977 					;  TRUNCATED; NOTE:
                                     047E   978 					;  R0 = # UNMOVED BYTES
                                     047E   979 					;  R1 = ADDRESS OF UNMOVED STRING
                          81     95  047E   980 10$:	TSTB	(R1)+			; ERROR IF ANY UNMOVED BYTES ARE
                          0E     12  0480   981 	BNEQ	ERROR_INVALID		;  NON-ZERO
            F9            50     F5  0482   982 	SOBGTR	R0,10$			; CONTINUE UNTIL ALL EXTRA BYTES
                                     0485   983 					;  ARE CHECKED
                                 05  0485   984 20$:	RSB				; EXIT
                                     0486   985 DESCRIPTOR:				; DST FIELD IS A DESCRIPTOR
            66            53     7D  0486   986 	MOVQ	R3,(R6)			; STORE ONLY QUADWORD DESCRIPTOR
                                 05  0489   987 	RSB				;  OF SRC FIELD AND EXIT
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  26
X0.1-16         ERROR PROCESSSING AND EXIT ROUTINES                                                                             (20)

                                     048A   989 	.SBTTL	ERROR PROCESSSING AND EXIT ROUTINES
                                     048A   990 
                                     048A   991 ;
                                     048A   992 ; ERROR PROCESSING
                                     048A   993 ;
                                     048A   994 
                                     048A   995 ERROR_FORMAT:				; FORMAT OF MESSAGE IN INCORRECT
         0B A9            08     90  048A   996 	MOVB	#DAP$_FORMAT,DAP$B_MAC_CODE(R9)
                          10     11  048E   997 	BRB	ERROR_COMMON		; JOIN COMMON CODE
                                     0490   998 ERROR_INVALID:				; FIELD OF MESSAGE HAS INVALID VALUE
         0B A9            09     90  0490   999 	MOVB	#DAP$_INVALID,DAP$B_MAC_CODE(R9)
                          0A     11  0494  1000 	BRB	ERROR_COMMON		; JOIN COMMON CODE
                                     0496  1001 ERROR_SYNC:				; MESSAGE RECEIVED IS OUT-OF-SEQUENCE
         0B A9            0A     90  0496  1002 	MOVB	#DAP$_MSG_SYNC,DAP$B_MAC_CODE(R9)
                          04     11  049A  1003 	BRB	ERROR_COMMON		; JOIN COMMON CODE
                                     049C  1004 ERROR_UNSUPPORT:			; FIELD OF MESSAGE HAS UNSUPPORTED VALUE
         0B A9            02     90  049C  1005 	MOVB	#DAP$_UNSUPPORT,DAP$B_MAC_CODE(R9)
                                     04A0  1006 ERROR_COMMON:				;
         09 A9            57     90  04A0  1007 	MOVB	R7,DAP$B_FIELD_ID(R9)	; STORE ID OF FIELD IN ERROR
                       08 A9     94  04A4  1008 	CLRB	DAP$L_DCODE_STS(R9)	; INDICATE FAILURE
                          11     11  04A7  1009 	BRB	EXIT_COMMON		; JOIN COMMON CODE
                                     04A9  1010 
                                     04A9  1011 ;
                                     04A9  1012 ; MESSAGE PARSE HAS BEEN SUCCESSFUL SO FAR, ...
                                     04A9  1013 ; MAKE FINAL VALIDITY CHECKS AND UPDATE MESSAGE DESCRIPTORS.
                                     04A9  1014 ;
                                     04A9  1015 
                                     04A9  1016 EXIT_SUCCESS:				; ENTER HERE ON SUCCESSFUL PARSE
            57            00     9A  04A9  1017 	MOVZBL	#DAP$_UNKNOWN,R7	; SET FIELD ID TO 'UNKNOWN'
            5A            5B     D1  04AC  1018 	CMPL	R11,R10			; BRANCH IF THERE ARE ANY UNPARSED
                          D9     12  04AF  1019 	BNEQ	ERROR_FORMAT		;  BYTES LEFT IN DAP MESSAGE
            50         0A A9     9A  04B1  1020 	MOVZBL	DAP$B_MSG_TYPE(R9),R0	; GET DAP MESSAGE TYPE
                          50     E1  04B5  1021 	BBC	R0,DAP$L_MSG_MASK(R9),-	; BRANCH IF THIS IS NOT A VALID
            DC         0C A9         04B7  1022 		ERROR_SYNC		;  MESSAGE TO RECEIVE
                                     04BA  1023 EXIT_COMMON:				; NOTE: ADDRESS OF MESSAGE JUST PARSED
                                     04BA  1024 					;  IS CORRECT IN DESCRIPTOR
                                 C3  04BA  1025 	SUBL3	DAP$Q_MSG_BUF2+4(R9),-	; COMPUTE SIZE OF MESSAGE JUST PARSED
            5A         1C A9         04BB  1026 		R10,DAP$Q_MSG_BUF2(R9)	;  AND STORE IT IN DESCRIPTOR
                       18 A9         04BE       
         14 A9            5A     D0  04C0  1027 	MOVL	R10,DAP$Q_MSG_BUF1+4(R9); STORE ADDRESS OF NEXT (BLOCKED)
                                     04C4  1028 					;  MESSAGE IN BUFFER TO PARSE
                                 C2  04C4  1029 	SUBL2	DAP$Q_MSG_BUF2(R9),-	; STORE SIZE OF NEXT (BLOCKED)
         10 A9         18 A9         04C5  1030 		DAP$Q_MSG_BUF1(R9)	;  MESSAGE IN BUFFER TO PARSE
            50         08 A9     D0  04C9  1031 	MOVL	DAP$L_DCODE_STS(R9),R0	; GET RETURN STATUS CODE
                                 04  04CD  1032 	RET				; RETURN TO CALLER
                                     04CE  1033 	.END
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  27
SYMBOL TABLE                                                                                                                    (20)

$$COUNT        = 00000004            DAP$K_CLOSE    = 00000001            DAP$L_DCODE_STS  00000008            
ACC_INVALID      000002A4 R     03   DAP$K_CMP_MSG  = 00000007            DAP$L_DEV        0000005C            
ACC_MSG          00000241 R     03   DAP$K_CNF_MSG  = 00000001            DAP$L_FOP        00000058            
ACK_MSG          00000359 R     03   DAP$K_CONNECT  = 00000002            DAP$L_FOP2       00000084            
ATT_INVALID      0000023B R     03   DAP$K_CON_MSG  = 00000005            DAP$L_MRN        0000004C            
ATT_LOOP         0000015A R     03   DAP$K_CREATE   = 00000002            DAP$L_MSG_MASK   0000000C            
ATT_MSG          00000107 R     03   DAP$K_CTLMENU_I= 00000054            DAP$L_OPERATOR   00000020            
ATT_UNSUPPORT    0000023E R     03   DAP$K_CTL_MSG  = 00000004            DAP$L_RECNUM     000000A4            
BIT...         = 00000000            DAP$K_DATATYP_I= 00000084            DAP$L_ROP        00000078            
CMP_INVALID      0000038C R     03   DAP$K_DAT_MSG  = 00000008            DAP$L_STV        000000A8            
CMP_MSG          0000035C R     03   DAP$K_DELETE   = 00000005            DAP$M_ALQ      = 00000040            
CNF_MSG          0000009F R     03   DAP$K_DEV_I    = 04000040            DAP$M_BKS      = 00000080            
CON_MSG          00000340 R     03   DAP$K_DISCON   = 00000004            DAP$M_BLS      = 00000010            
CTL_INVALID      0000033D R     03   DAP$K_ECONUM_V = 00000002            DAP$M_CBT      = 00800000            
CTL_LOOP         000002FC R     03   DAP$K_ERASE    = 00000004            DAP$M_CIF      = 00010000            
CTL_MSG          000002A7 R     03   DAP$K_EXECUTE  = 00000008            DAP$M_CTG      = 00000080            
DAP$B_ACCFUNC    00000060            DAP$K_FAC_I    = 00000040            DAP$M_DATATYPE = 00000001            
DAP$B_ACCOPT     00000061            DAP$K_FIND     = 0000000E            DAP$M_DEQ      = 00000800            
DAP$B_BKS        00000048            DAP$K_FIX      = 00000001            DAP$M_DEV      = 00004000            
DAP$B_CMPFUNC    00000080            DAP$K_FLAGS_I  = 00000004            DAP$M_DLK      = 00000010            
DAP$B_CONFUNC    0000007C            DAP$K_FOP_I    = 01020024            DAP$M_DLT      = 00400000            
DAP$B_CTLFUNC    0000006C            DAP$K_GET_READ = 00000001            DAP$M_DMO      = 00002000            
DAP$B_CTLMENU    0000006D            DAP$K_IDX      = 00000020            DAP$M_EMBEDDED = 00000010            
DAP$B_DATATYPE   0000003C            DAP$K_KEY_ACC  = 00000001            DAP$M_FID      = 00001000            
DAP$B_ECONUM     00000029            DAP$K_LSA      = 00000005            DAP$M_FOP      = 00001000            
DAP$B_FAC        00000062            DAP$K_OPEN     = 00000001            DAP$M_FSZ      = 00000100            
DAP$B_FIELD_ID   00000009            DAP$K_PURGE    = 00000003            DAP$M_GET      = 00000002            
DAP$B_FILESYS    00000027            DAP$K_PUT_WRITE= 00000004            DAP$M_IMAGE    = 00000002            
DAP$B_FLAGS      00000021            DAP$K_RAT_I    = 00000020            DAP$M_KEY      = 00000002            
DAP$B_FSZ        00000049            DAP$K_REL      = 00000010            DAP$M_MRN      = 00000200            
DAP$B_LENGTH     00000023            DAP$K_RESPONSE = 00000002            DAP$M_MRS      = 00000020            
DAP$B_MAC_CODE   0000000B            DAP$K_RETRY    = 00000001            DAP$M_MXV      = 00080000            
DAP$B_MSG_TYPE   0000000A            DAP$K_REWIND   = 00000006            DAP$M_NEF      = 00000200            
DAP$B_ORG        0000003D            DAP$K_RFA_ACC  = 00000002            DAP$M_NIL      = 00000040            
DAP$B_OSTYPE     00000026            DAP$K_RMS32    = 00000003            DAP$M_NONFATAL = 00000001            
DAP$B_RAC        0000006E            DAP$K_ROP_I    = 00000802            DAP$M_ORG      = 00000002            
DAP$B_RAT        0000003F            DAP$K_SEQ      = 00000000            DAP$M_POS      = 00000008            
DAP$B_RFM        0000003E            DAP$K_SEQ_ACC  = 00000000            DAP$M_RAC      = 00000001            
DAP$B_SHR        00000063            DAP$K_SEQ_FILE = 00000003            DAP$M_RAT      = 00000008            
DAP$B_SOFTVER    0000002B            DAP$K_SHR_I    = 00000090            DAP$M_RCK      = 00008000            
DAP$B_STREAMID   00000022            DAP$K_SKIP_REC = 00000002            DAP$M_RFM      = 00000004            
DAP$B_TYPE       00000020            DAP$K_SOFTVER_V= 00000001            DAP$M_ROP      = 00000008            
DAP$B_USRNUM     0000002A            DAP$K_SPACE    = 0000000B            DAP$M_RUNSYS   = 00000400            
DAP$B_USRSOFT    0000002C            DAP$K_STM      = 00000004            DAP$M_RWC      = 00000002            
DAP$B_VERNUM     00000028            DAP$K_STS_MSG  = 00000009            DAP$M_RWO      = 00000001            
DAP$C_BLN        000000C0            DAP$K_SUBMIT   = 00000007            DAP$M_SCF      = 00200000            
DAP$K_ABORT    = 00000003            DAP$K_SYSCAP_V = E00660E7            DAP$M_SPL      = 00100000            
DAP$K_ACCOPT_I = 00000008            DAP$K_UDF      = 00000000            DAP$M_SQO      = 00040000            
DAP$K_ACC_MSG  = 00000003            DAP$K_UPDATE   = 00000003            DAP$M_SUP      = 00000100            
DAP$K_ACK_MSG  = 00000006            DAP$K_USRNUM_V = 00000000            DAP$M_TMD      = 00000800            
DAP$K_ATTMENU_I= 0001A000            DAP$K_USRSOFT_V= 00000000            DAP$M_TMP      = 00000400            
DAP$K_ATT_MSG  = 00000002            DAP$K_VAR      = 00000002            DAP$M_WCK      = 00004000            
DAP$K_BLK_FILE = 00000005            DAP$K_VAXVMS   = 00000007            DAP$Q_DCODE_FLG  00000000            
DAP$K_BLK_VBN  = 00000004            DAP$K_VERNUM_V = 00000004            DAP$Q_FILEDATA   00000090            
DAP$K_BLN        000000C0            DAP$K_VFC      = 00000003            DAP$Q_FILESPEC   00000064            
DAP$K_BLS_D    = 00000200            DAP$L_ALQ        00000044            DAP$Q_KEY        00000070            
DAP$K_BUFSIZ_V = 00001100            DAP$L_ATTMENU    00000038            DAP$Q_MSG_BUF1   00000010            
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  28
SYMBOL TABLE                                                                                                                    (20)

DAP$Q_MSG_BUF2   00000018            DAP$V_FID      = 0000000C            DAP$W_BUFSIZ     00000024            
DAP$Q_NUMBER     00000088            DAP$V_FILALL   = 00000000            DAP$W_DEQ        0000004A            
DAP$Q_RFA        0000009C            DAP$V_FOP      = 0000000C            DAP$W_MRS        00000042            
DAP$Q_RUNSYS     00000050            DAP$V_FOPDLT   = 0000001F            DAP$W_STSCODE    00000098            
DAP$Q_SYSCAP     00000030            DAP$V_FOPSCF   = 0000001E            DAP$_ACCFUNC   = 00000010            
DAP$Q_VERSION    00000028            DAP$V_FOPSPL   = 0000001D            DAP$_ACCOPT    = 00000011            
DAP$S_TMP1..   = 0000000A            DAP$V_FSZ      = 00000008            DAP$_ALQ       = 00000017            
DAP$S_TMP2..   = 00000015            DAP$V_FTN      = 00000000            DAP$_ATTMENU   = 00000010            
DAP$S_TMP3..   = 00000002            DAP$V_GET      = 00000001            DAP$_BKS       = 00000018            
DAP$S_TMP4..   = 00000008            DAP$V_IMAGE    = 00000001            DAP$_BLS       = 00000015            
DAP$V_AFTER_V41= 00000020            DAP$V_KEY      = 00000001            DAP$_BUFSIZ    = 00000010            
DAP$V_ALQ      = 00000006            DAP$V_LENGTH   = 00000001            DAP$_CMPFUNC   = 00000010            
DAP$V_APPEND   = 0000000D            DAP$V_MRN      = 00000009            DAP$_CONFUNC   = 00000010            
DAP$V_ASCII    = 00000000            DAP$V_MRS      = 00000005            DAP$_CTLFUNC   = 00000010            
DAP$V_BIO      = 00000005            DAP$V_MSGBLK   = 00000012            DAP$_CTLMENU   = 00000011            
DAP$V_BKS      = 00000007            DAP$V_MXV      = 00000013            DAP$_DATATYPE  = 00000011            
DAP$V_BLK      = 00000003            DAP$V_NEF      = 00000009            DAP$_DEQ       = 0000001C            
DAP$V_BLS      = 00000004            DAP$V_NIL      = 00000006            DAP$_DEV       = 0000001F            
DAP$V_CBT      = 00000017            DAP$V_NONFATAL = 00000000            DAP$_ECONUM    = 00000014            
DAP$V_CIF      = 00000010            DAP$V_ORG      = 00000001            DAP$_FAC       = 00000013            
DAP$V_CR       = 00000001            DAP$V_POS      = 00000003            DAP$_FILEDATA  = 00000011            
DAP$V_CTG      = 00000007            DAP$V_PRIV     = 00000005            DAP$_FILESPEC  = 00000012            
DAP$V_DATATYPE = 00000000            DAP$V_PRN      = 00000002            DAP$_FILESYS   = 00000012            
DAP$V_DEL      = 00000002            DAP$V_PUT      = 00000000            DAP$_FILE_CLOS = 00000007            
DAP$V_DEQ      = 0000000B            DAP$V_RAC      = 00000000            DAP$_FILE_OPEN = 00000004            
DAP$V_DEV      = 0000000E            DAP$V_RANREC   = 00000006            DAP$_FILE_XFER = 00000005            
DAP$V_DEVALL   = 0000000C            DAP$V_RANVBN   = 00000007            DAP$_FLAGS     = 00000008            
DAP$V_DEVAVL   = 00000010            DAP$V_RAT      = 00000003            DAP$_FOP       = 0000001D            
DAP$V_DEVCCL   = 00000001            DAP$V_RCK      = 0000000F            DAP$_FOP2      = 00000011            
DAP$V_DEVDIR   = 00000003            DAP$V_RELORG   = 00000002            DAP$_FORMAT    = 00000008            
DAP$V_DEVDMT   = 0000000B            DAP$V_RFM      = 00000002            DAP$_FSZ       = 00000019            
DAP$V_DEVELG   = 00000011            DAP$V_ROP      = 00000003            DAP$_INVALID   = 00000009            
DAP$V_DEVFOD   = 00000007            DAP$V_RUNSYS   = 0000000A            DAP$_KEY       = 00000013            
DAP$V_DEVFOR   = 00000017            DAP$V_RWC      = 00000001            DAP$_LENGTH    = 0000000A            
DAP$V_DEVGEN   = 00000019            DAP$V_RWO      = 00000000            DAP$_MRN       = 0000001A            
DAP$V_DEVIDV   = 0000000D            DAP$V_SCF      = 00000015            DAP$_MRS       = 00000016            
DAP$V_DEVMBX   = 00000012            DAP$V_SEQORG   = 00000001            DAP$_MSG_SYNC  = 0000000A            
DAP$V_DEVMNT   = 0000000A            DAP$V_SEQREC   = 00000005            DAP$_NUMBER    = 00000010            
DAP$V_DEVNET   = 00000018            DAP$V_SPL      = 00000014            DAP$_ORG       = 00000012            
DAP$V_DEVODV   = 0000000E            DAP$V_SQO      = 00000012            DAP$_OSTYPE    = 00000011            
DAP$V_DEVRCK   = 00000015            DAP$V_STREAMID = 00000000            DAP$_PENDING   = 00000000            
DAP$V_DEVREC   = 00000000            DAP$V_STSRTN   = 00000011            DAP$_RAC       = 00000012            
DAP$V_DEVRND   = 00000014            DAP$V_STS_RETRV= 00000002            DAP$_RAT       = 00000014            
DAP$V_DEVRTM   = 00000013            DAP$V_STS_STORE= 00000001            DAP$_RECNUM    = 00000013            
DAP$V_DEVSDI   = 00000004            DAP$V_SUBMIT   = 0000000E            DAP$_RFA       = 00000012            
DAP$V_DEVSHR   = 00000008            DAP$V_SUP      = 00000008            DAP$_RFM       = 00000013            
DAP$V_DEVSPL   = 00000009            DAP$V_TMD      = 0000000B            DAP$_ROP       = 00000015            
DAP$V_DEVSQD   = 00000005            DAP$V_TMP      = 0000000A            DAP$_RUNSYS    = 0000001B            
DAP$V_DEVSWL   = 0000000F            DAP$V_TMP1..   = 00000001            DAP$_SHR       = 00000014            
DAP$V_DEVTRM   = 00000002            DAP$V_TMP2..   = 0000000B            DAP$_SOFTVER   = 00000016            
DAP$V_DEVWCK   = 00000016            DAP$V_TMP3..   = 00000006            DAP$_STREAMID  = 00000009            
DAP$V_DLK      = 00000004            DAP$V_TMP4..   = 00000018            DAP$_STSCODE   = 00000010            
DAP$V_DLT      = 00000016            DAP$V_TRN      = 00000004            DAP$_STV       = 00000014            
DAP$V_DMO      = 0000000D            DAP$V_UPD      = 00000003            DAP$_SUCCESS   = 00000001            
DAP$V_EMBEDDED = 00000004            DAP$V_VAXVMS   = 00000021            DAP$_SYSCAP    = 00000018            
DAP$V_EOF      = 00000000            DAP$V_WCK      = 0000000E            DAP$_TYPE      = 00000008            
DAP$V_EXEC     = 00000004            DAP$W_BLS        00000040            DAP$_UNKNOWN   = 00000000            
FALDECODE       - DECODE DAP MESSAGE                             22-AUG-1978 01:11:25   VAX-11 MACRO X0.3-11               Page  29
SYMBOL TABLE                                                                                                                    (20)

DAP$_UNSUPPORT = 00000002            
DAP$_USRNUM    = 00000015            
DAP$_USRSOFT   = 00000017            
DAP$_VERNUM    = 00000013            
DAT_MSG          0000038F R     03   
DESCRIPTOR       00000486 R     03   
ERROR_COMMON     000004A0 R     03   
ERROR_FORMAT     0000048A R     03   
ERROR_INVALID    00000490 R     03   
ERROR_SYNC       00000496 R     03   
ERROR_UNSUPPORT  0000049C R     03   
EXIT_COMMON      000004BA R     03   
EXIT_SUCCESS     000004A9 R     03   
FAL$DECODE_MSG   00000000 RG    03   
GBL...         = 00000000            
HDR_FORMAT       0000008D R     03   
HDR_INVALID      00000087 R     03   
HDR_UNSUPPORT    0000008A R     03   
K_EXT          = 00000000            
K_FIX          = 00000001            
K_IMG          = 00000002            
K_ROM          = 00000003            
MOVE_FIELD       0000046E R     03   
M_DESC         = 00000010            
M_TRUNC        = 00000020            
STORE_EXT        00000415 R     03   
STORE_FIELD      000003E8 R     03   
STORE_FIX        0000043D R     03   
STORE_IMG        00000456 R     03   
STORE_ROM        00000464 R     03   
STS_MSG          000003B4 R     03   
TMP1..         = 000003E3 R     03   
TMP2..         = 000003E4 R     03   
V_DESC         = 00000004            
V_TRUNC        = 00000005            


PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            000000C0      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
FAL$CODE         000004CE      03     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD  NOWRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
8692. BYTES LEFT IN FREE MEMORY POOL.
8412. BYTES OF RECLAIMED MEMORY.
OBJ$:FALDECODE,LIS$:FALDECODE/-SP=LIB$:FAL.MLB/ML,SRC$:FALDECODE
24 MLB DIR RDS - 773 GETS TO DEFINE 16 MACROS. 69 INTER. FILE WRITES. 
