FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (2)      42  DECLARATIONS
   (3)      78  ACTION ROUTINES
   (4)     155  FAL$INITIALIZE
   (5)     231  FAL$NEXT_MSG
   (6)     286  FAL$CNF
   (7)     355  FAL$ATT
   (8)     446  FAL$ACC
   (9)     496  FAL$OPEN
   (10)    657  FAL$CREATE
   (11)    706  FAL$CTL
   (12)    805  FAL$RETRV_REC
   (13)    868  FAL$CONNECT
   (14)    912  FAL$CON
   (15)    940  FAL$CMP
   (16)    962  FAL$CLOSE
   (17)   1010  FAL$STORE_REC
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page   1
X0.1-25                                                                                                                          (1)

                                     0000     1 	.TITLE	FALACTION - STATE TABLE ACTION ROUTINES
                                     0000     2 	.IDENT	/X0.1-25/
                                     0000     3 
                                     0000     4 ;
                                     0000     5 ;			  COPYRIGHT (c) 1977, 1978 BY
                                     0000     6 ;	      DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
                                     0000     7 ;
                                     0000     8 ; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
                                     0000     9 ; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
                                     0000    10 ; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
                                     0000    11 ; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
                                     0000    12 ; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
                                     0000    13 ; TRANSFERRED.
                                     0000    14 ;
                                     0000    15 ; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
                                     0000    16 ; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
                                     0000    17 ; CORPORATION.
                                     0000    18 ;
                                     0000    19 ; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
                                     0000    20 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
                                     0000    21 ;
                                     0000    22 
                                     0000    23 ;++
                                     0000    24 ; FACILITY: DECNET FILE ACCESS LISTENER (FAL)
                                     0000    25 ;
                                     0000    26 ; ABSTRACT:
                                     0000    27 ;
                                     0000    28 ;	THIS MODULE CONTAINS ACTION ROUTINES CALLED BY THE STATE TABLE
                                     0000    29 ;	PARSER.
                                     0000    30 ;
                                     0000    31 ; ENVIRONMENT:
                                     0000    32 ;
                                     0000    33 ;	THE FAL IMAGE EXECUTES IN THE CONTEXT OF A PROCESS CREATED BY
                                     0000    34 ;	NETACP. IT RUNS IN USER MODE AND REQUIRES NETWORK PRIVILEGE.
                                     0000    35 ;
                                     0000    36 ; AUTHOR: JAMES A. KRYCKA,	CREATION DATE: 16-JUN-77
                                     0000    37 ;
                                     0000    38 ; MODIFICATIONS:
                                     0000    39 ;
                                     0000    40 ;--
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page   2
X0.1-25         DECLARATIONS                                                                                                     (2)

                                     0000    42 	.SBTTL	DECLARATIONS
                                     0000    43 
                                     0000    44 ;
                                     0000    45 ; INCLUDE FILES:
                                     0000    46 ;
                                     0000    47 	$FALWRKDEF			; DEFINE FAL WORK AREA SYMBOLS
                                     0000    48 	$FALSTBDEF			; DEFINE STATISTICS BLOCK SYMBOLS
                                     0000    49 	$DAPDEF				; DEFINE DAP CONTROL BLOCK SYMBOLS
                                     0000    50 ;	$DAPFLDDEF			; DEFINE DAP FIELD ID SYMBOLS
                                     0000    51 	$DEVDEF				; DEFINE DEVICE CHARACTERISTICS
                                     0000    52 	$FABDEF				; DEFINE FAB CONTROL BLOCK SYMBOLS
                                     0000    53 ;	$NAMDEF				; DEFINE NAM CONTROL BLOCK SYMBOLS
                                     0000    54 	$RABDEF				; DEFINE RAB CONTROL BLOCK SYMBOLS
                                     0000    55 ;	MISC_SYMBOLS			; DEFINE MISCELLANEOUS FAL SYMBOLS
                                     0000    56 ;	.LIST	MEB
                                     0000    57 ;
                                     0000    58 ; MACROS:
                                     0000    59 ;
                                     0000    60 ;	NONE
                                     0000    61 ;
                                     0000    62 ; EQUATED SYMBOLS:
                                     0000    63 ;
                           00000010  0000    64 DAP$_CONFUNC=16				; ***** TEMPORARY *****
                           00000010  0000    65 DAP$_CMPFUNC=16				; ***** TEMPROARY *****
                           00000000  0000    66 NAM$B_BID=0				; ***** TEMPORARY *****
                           00000001  0000    67 NAM$B_BLN=1				; ***** TEMPORARY *****
                           00000002  0000    68 NAM$B_RSS=2				; ***** TEMPORARY *****
                           00000004  0000    69 NAM$L_RSA=4				; ***** TEMPORARY *****
                           00000002  0000    70 NAM$C_BID=2				; ***** TEMPORARY *****
                           00000038  0000    71 NAM$C_BLN=^X38				; ***** TEMPORARY *****
                           00000003  0000    72 MBXEFN=3				; ***** TEMPORARY *****
                                     0000    73 ;
                                     0000    74 ; OWN STORAGE:
                                     0000    75 ;
                                     0000    76 ;	NONE
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page   3
X0.1-25         ACTION ROUTINES                                                                                                  (3)

                                     0000    78 	.SBTTL	ACTION ROUTINES
                                 00000000    79 	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE
                                     0000    80 
                                     0000    81 ;++
                                     0000    82 ; FUNCTIONAL DESCRIPTION:
                                     0000    83 ;
                                     0000    84 ;	THE FOLLOWING ROUTINES ARE ACTION ROUTINES INVOKED BY THE
                                     0000    85 ;	STATE TRANSITION TABLE PARSER.
                                     0000    86 ;
                                     0000    87 ;	THE INPUT PARAMETERS AND COMPLETION CODES ARE THE SAME FOR
                                     0000    88 ;	ALL OF THE ACTION ROUTINES.
                                     0000    89 ;
                                     0000    90 ; CALLING SEQUENCE:
                                     0000    91 ;
                                     0000    92 ;	BSB/JSB	FAL$INITIALIZE
                                     0000    93 ;	BSB/JSB	FAL$NEXT_MSG
                                     0000    94 ;	BSB/JSB	FAL$INT_MSG
                                     0000    95 ;	BSB/JSB	FAL$OUT_OF_SEQ
                                     0000    96 ;	BSB/JSB	FAL$CNF
                                     0000    97 ;	BSB/JSB	FAL$ATT
                                     0000    98 ;	BSB/JSB	FAL$ACC
                                     0000    99 ;	BSB/JSB	FAL$OPEN
                                     0000   100 ;	BSB/JSB	FAL$CREATE
                                     0000   101 ;	BSB/JSB	FAL$ERASE
                                     0000   102 ;	BSB/JSB	FAL$EXECUTE
                                     0000   103 ;	BSB/JSB	FAL$SUBMIT
                                     0000   104 ;	BSB/JSB	FAL$CTL
                                     0000   105 ;	BSB/JSB	FAL$RETRV_REC
                                     0000   106 ;	BSB/JSB	FAL$MODE
                                     0000   107 ;	BSB/JSB	FAL$LISTEN
                                     0000   108 ;	BSB/JSB	FAL$CONNECT
                                     0000   109 ;	BSB/JSB	FAL$UPDATE
                                     0000   110 ;	BSB/JSB	FAL$DELETE
                                     0000   111 ;	BSB/JSB	FAL$REWIND
                                     0000   112 ;	BSB/JSB	FAL$TRUNCATE
                                     0000   113 ;	BSB/JSB	FAL$SPACE
                                     0000   114 ;	BSB/JSB	FAL$FIND
                                     0000   115 ;	BSB/JSB	FAL$CON
                                     0000   116 ;	BSB/JSB	FAL$ADVANCE
                                     0000   117 ;	BSB/JSB	FAL$CMP
                                     0000   118 ;	BSB/JSB	FAL$CLOSE
                                     0000   119 ;	BSB/JSB	FAL$PURGE
                                     0000   120 ;	BSB/JSB	FAL$DISCONNECT
                                     0000   121 ;	BSB/JSB	FAL$RESPONSE
                                     0000   122 ;	BSB/JSB	FAL$STORE_REC
                                     0000   123 ;
                                     0000   124 ; INPUT PARAMETERS:
                                     0000   125 ;
                                     0000   126 ;	R0	1 (FOR SUCCESS)
                                     0000   127 ;	R8	ADDRESS OF FAL WORK AREA
                                     0000   128 ;	R9	ADDRESS OF DAP CONTROL BLOCK
                                     0000   129 ;	R10	ADDRESS OF FAB CONTROL BLOCK
                                     0000   130 ;	R11	ADDRESS OF RAB CONTROL BLOCK
                                     0000   131 ;
                                     0000   132 ; IMPLICIT INPUTS:
                                     0000   133 ;
                                     0000   134 ;	NONE
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page   4
X0.1-25         ACTION ROUTINES                                                                                                  (3)

                                     0000   135 ;
                                     0000   136 ; OUTPUT PARAMETERS:
                                     0000   137 ;
                                     0000   138 ;	R0	COMPLETION CODE
                                     0000   139 ;	R1-R7	DESTROYED
                                     0000   140 ;
                                     0000   141 ; IMPLICIT OUTPUTS:
                                     0000   142 ;
                                     0000   143 ;	NONE
                                     0000   144 ;
                                     0000   145 ; COMPLETION CODES:
                                     0000   146 ;
                                     0000   147 ;	R0	1 = SUCCESS; 0 = FAILURE
                                     0000   148 ;
                                     0000   149 ; SIDE EFFECTS:
                                     0000   150 ;
                                     0000   151 ;	NONE
                                     0000   152 ;
                                     0000   153 ;--
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page   5
X0.1-25         FAL$INITIALIZE                                                                                                   (4)

                                     0000   155 	.SBTTL	FAL$INITIALIZE
                                     0000   156 
                                     0000   157 FAL$INITIALIZE::			; CONTROL POINT
                                     0000   158 
                                     0000   159 ;
                                     0000   160 ; INITIALIZE FAL FLAGS.
                                     0000   161 ;
                                     0000   162 
            68            0C     8A  0000   163 	BICB2	#<1@FAL$V_ATT_MSG!1@FAL$V_CONNECT>,FAL$Q_FLG(R8)
                       01 A8     94  0003   164 	CLRB	FAL$Q_FLG+1(R8)
                                     0006   165 
                                     0006   166 ;
                                     0006   167 ; INITIALIZE DAP CONTROL BLOCK AND FLAGS.
                                     0006   168 ;
                                     0006   169 
                                 E0  0006   170 	BBS	#FAL$V_CNF_MSG,-	; SKIP CODE IF CONFIGURATION
            68            00         0007   171 		FAL$Q_FLG(R8),10$	;  MESSAGES HAVE BEEN EXCHANGED
                          12         0009       
                                     000A   172 	ZERO_FILL DST=FAL$T_DAP(R8),SIZE=#DAP$C_BLN
                                     0016   173 					; ZERO DAP CONTROL BLOCK
         0C A9       01BE 8F     3C  0016   174 	MOVZWL	#<-			; DEFINE WHICH DAP MESSAGES MAY
                                     001C   175 		<1@DAP$K_CNF_MSG>!-	;  BE RECEIVED FROM PARTNER
                                     001C   176 		<1@DAP$K_ATT_MSG>!-	;
                                     001C   177 		<1@DAP$K_ACC_MSG>!-	;
                                     001C   178 		<1@DAP$K_CTL_MSG>!-	;
                                     001C   179 		<1@DAP$K_CON_MSG>!-	;
                                     001C   180 		<1@DAP$K_CMP_MSG>!-	;
                                     001C   181 		<1@DAP$K_DAT_MSG>!-	;
                                     001C   182 		0>,DAP$L_MSG_MASK(R9)	;
                                     001C   183 
                                     001C   184 ;
                                     001C   185 ; INITIALIZE THE FAB, RAB, AND NAM CONTROL BLOCKS.
                                     001C   186 ;
                                     001C   187 
                                     001C   188 		ASSUME	FAL$K_FAB EQ FAB$C_BLN
                                     001C   189 		ASSUME	FAL$K_RAB EQ RAB$C_BLN
                                     001C   190 		ASSUME	FAL$K_NAM EQ NAM$C_BLN
                                     001C   191 
                                     001C   192 10$:	ZERO_FILL DST=(R10),SIZE=#FAB$C_BLN	; ZERO FAB CONTROL BLOCK
                                     0024   193 	ZERO_FILL DST=(R11),SIZE=#RAB$C_BLN	; ZERO RAB CONTROL BLOCK
                                     002C   194 	ZERO_FILL DST=FAL$L_NAM(R8),SIZE=#NAM$C_BLN
                                     0036   195 						; ZERO NAM CONTROL BLOCK
                                     0036   196 
                                     0036   197 		ASSUME	FAB$B_BLN EQ FAB$B_BID+1
                                     0036   198 		ASSUME	RAB$B_BLN EQ RAB$B_BID+1
                                     0036   199 		ASSUME	NAM$B_BLN EQ NAM$B_BID+1
                                     0036   200 
            6A       5003 8F     B0  0036   201 	MOVW	#<FAB$C_BLN@8+FAB$C_BID>,FAB$B_BID(R10)
                                     003B   202 						; INSERT FAB BLOCK ID AND LENGTH
         28 AA       0294 C8     DE  003B   203 	MOVAL	FAL$L_NAM(R8),FAB$L_NAM(R10)	; STORE NAM POINTER IN FAB
            6B       4401 8F     B0  0041   204 	MOVW	#<RAB$C_BLN@8+RAB$C_BID>,RAB$B_BID(R11)
                                     0046   205 						; INSERT RAB BLOCK ID AND LENGTH
         3C AB            5A     D0  0046   206 	MOVL	R10,RAB$L_FAB(R11)		; STORE FAB POINTER IN RAB
       0294 C8       3802 8F     B0  004A   207 	MOVW	#<NAM$C_BLN@8+NAM$C_BID>,FAL$L_NAM+NAM$B_BID(R8)
                                     0051   208 						; INSERT NAM BLOCK ID AND LENGTH
       0298 C8       0300 C8     9E  0051   209 	MOVAB	FAL$T_RESULTANT(R8),FAL$L_NAM+NAM$L_RSA(R8)
                                     0058   210 						; STORE RSA IN NAM
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page   6
X0.1-25         FAL$INITIALIZE                                                                                                   (4)

       0296 C8         80 8F     90  0058   211 	MOVB	#FAL$K_RESULTSIZ,FAL$L_NAM+NAM$B_RSS(R8)
                                     005E   212 						; STORE RSS IN NAM
                                     005E   213 
                                     005E   214 ;
                                     005E   215 ; SET-UP TEMPORARY RECEIVE AND TRANSMIT BUFFERS TO ALLOW INITIAL EXAHANGE
                                     005E   216 ; OF DAP CONFIGURATION MESSAGES. AFTER THE EXCHANGE OF CONFIGURATION
                                     005E   217 ; MESSAGES, NEW BUFFERS WILL BE ALLOCATED IF REQUIRED.
                                     005E   218 ;
                                     005E   219 
                                 E0  005E   220 	BBS	#FAL$V_CNF_MSG,-	; SKIP CODE IF CONFIGURATION
            68            00         005F   221 		FAL$Q_FLG(R8),20$	;  MESSAGES HAVE BEEN EXCHANGED
                          1B         0061       
            52       0380 C8     9E  0062   222 	MOVAB	FAL$T_BUFFER(R8),R2	; GET ADDRESS OF SCRATCH BUFFER
            54       0040 8F     3C  0067   223 	MOVZWL	#<FAL$K_BUFFERSIZ/2>,R4	; USE SPACE FOR BOTH BUFFERS
         40 A8            52     D0  006C   224 	MOVL	R2,FAL$Q_RCV+4(R8)	; STORE ADDRESS OF RECEIVE BUFFER
            54            52     C1  0070   225 	ADDL3	R2,R4,FAL$Q_XMT+4(R8)	; STORE ADDRESS OF TRANSMIT BUFFER
                       48 A8         0073       
         14 A8            54     B0  0075   226 	MOVW	R4,FAL$W_MAXDAPSIZ(R8)	; STORE MAXIMUM DAP MESSAGE SIZE
         16 A8            54     B0  0079   227 	MOVW	R4,FAL$W_ACTUALSIZ(R8)	; STORE ACTUAL SIZE OF EACH BUFFER
            50            01     D0  007D   228 20$:	MOVL	#1,R0			; SIGNAL STATE TRANSITION SUCCESS
                                 05  0080   229 	RSB				; EXIT
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page   7
X0.1-25         FAL$NEXT_MSG                                                                                                     (5)

                                     0081   231 	.SBTTL	FAL$NEXT_MSG
                                     0081   232 
                                     0081   233 FAL$NEXT_MSG::				; CONTROL POINT
                                     0081   234 
                                     0081   235 ;
                                     0081   236 ; READ THE NEXT DAP MESSAGE FROM PARTNER, THEN DECODE AND STORE IT IN
                                     0081   237 ; THE DAP CONTROL BLOCK.
                                     0081   238 ;
                                     0081   239 
                       10 A9     B5  0081   240 	TSTW	DAP$Q_MSG_BUF1(R9)	; IS THERE A BLOCKED MESSAGE IN BUFFER?
                          08     12  0084   241 	BNEQ	FAL$NEXT_MSG1		; BRANCH IF YES
                          FF77'  30  0086   242 	BSBW	FAL$RECEIVE		; READ THE NEXT DAP MESSAGE
                                 7D  0089   243 	MOVQ	FAL$Q_RCV(R8),-		; COPY MESSAGE DESCRIPTOR TO
         10 A9         3C A8         008A   244 		DAP$Q_MSG_BUF1(R9)	;  DAP MESSAGE DESCRIPTOR
                                     008E   245 FAL$NEXT_MSG1:				; CONTROL POINT FOR FAL$INT_MSG
                          59     DD  008E   246 	PUSHL	R9			; PUSH ADDRESS OF DAP CONTROL BLOCK
       0000'CF            01     FB  0090   247 	CALLS	#1,W^FAL$DECODE_MSG	; PARSE THE MESSAGE
                                     0095   248 
                                     0095   249 ;
                                     0095   250 ; IF DAP MESSAGE HAS BEEN PARSED SUCCESSFULLY, USE MESSAGE TYPE AS THE
                                     0095   251 ; NEXT STATE TABLE VALUE.
                                     0095   252 ;
                                     0095   253 
            06            50     E9  0095   254 	BLBC	R0,10$			; BRANCH ON FAILURE
         10 A8         0A A9     90  0098   255 	MOVB	DAP$B_MSG_TYPE(R9),FAL$B_VALUE(R8)
                                     009D   256 					; STORE NEW STATE TRANSITION VALUE
                                 05  009D   257 	RSB				; EXIT
            50         09 A9     9A  009E   258 10$:	MOVZBL	DAP$B_FIELD_ID(R9),R0	; GET ID OF FIELD IN ERROR
            51         0A A9     9A  00A2   259 	MOVZBL	DAP$B_MSG_TYPE(R9),R1	; GET MESSAGE TYPE NUMBER
            52         0B A9     9A  00A6   260 	MOVZBL	DAP$B_MAC_CODE(R9),R2	; GET MACCODE ERROR VALUE
                                     00AA   261 RETURN_STS:				;
                          FF53'  30  00AA   262 	BSBW	FAL$STATUS		; SEND STATUS MESSAGE TO PARTNER
                          50     D4  00AD   263 	CLRL	R0			; SIGNAL STATE TRANSITION FAILURE
                                 05  00AF   264 	RSB				; EXIT
                                     00B0   265 
                                     00B0   266 FAL$INT_MSG::				; CONTROL POINT
                                 E0  00B0   267 10$:	BBS	#FAL$V_MBXAST,-		; BRANCH IF THERE IS AN INTERRUPT
            68            12         00B1   268 		FAL$Q_FLG(R8),20$	;  MESSAGE IN THE MAILBOX BUFFER
                          0E         00B3       
                                     00B4   269 	$WAITFR_S EFN=#MBXEFN		; WAIT FOR MAILBOX AST
                                     00BD   270 	CHECK_SS			; BRANCH ON FAILURE
                          EE     11  00C0   271 	BRB	10$			; CHECK FOR VALID MESSAGE
                                 7D  00C2   272 20$:	MOVQ	FAL$Q_MBX(R8),-		; COPY MAILBOX MESSAGE DESCRIPTOR TO
         10 A9         2C A8         00C3   273 		DAP$Q_MSG_BUF1(R9)	;  DAP MESSAGE DESCRIPTOR
                          C5     11  00C7   274 	BRB	FAL$NEXT_MSG1		; JOIN COMMON CODE
                                     00C9   275 
                                     00C9   276 FAL$OUT_OF_SEQ::			; CONTROL POINT
                                     00C9   277 
                                     00C9   278 ;
                                     00C9   279 ; RETURN "MESSAGE OUT OF SEQUENCE" ERROR TO PARTNER.
                                     00C9   280 ;
                                     00C9   281 
            51         20 A9     9A  00C9   282 	MOVZBL	DAP$B_TYPE(R9),R1	; GET MESSAGE TYPE
            52            0A     D0  00CD   283 	MOVL	#DAP$_MSG_SYNC,R2	; GET DAP MACCODE VALUE
                          D8     11  00D0   284 	BRB	RETURN_STS		; SEND STATUS MESSAGE
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page   8
X0.1-25         FAL$CNF                                                                                                          (6)

                                     00D2   286 	.SBTTL	FAL$CNF
                                     00D2   287 
                                     00D2   288 FAL$CNF::				; CONTROL POINT
                                     00D2   289 
                                     00D2   290 ;
                                     00D2   291 ; A CONFIGURATION MESSAGE HAS BEEN RECEIVED AND DECODED INTO THE DAP
                                     00D2   292 ; CONTROL BLOCK. RETURN CONFIGURATION MESSAGE TO PARTNER AND DETERMINE
                                     00D2   293 ; MAXIMUM DAP BUFFER SIZE WHICH IS THE SMALLER OF FAL'S BUFFER SIZE AND
                                     00D2   294 ; PARTNER'S BUFFER SIZE.
                                     00D2   295 ;
                                     00D2   296 
            53         48 A8     D0  00D2   297 	MOVL	FAL$Q_XMT+4(R8),R3	; GET ADDRESS OF TRANSMIT BUFFER
            83            01     90  00D6   298 	MOVB	#DAP$K_CNF_MSG,(R3)+	; DAP MESSAGE TYPE FIELD
                          83     94  00D9   299 	CLRB	(R3)+			; FLAGS FIELD
            63         24 A9     B0  00DB   300 	MOVW	DAP$W_BUFSIZ(R9),(R3)	; GET PARTNER'S BUFFER SIZE
                          05     12  00DF   301 	BNEQ	10$			; BRANCH IF A SIZE IS SPECIFIED
            63       0300 8F     B0  00E1   302 	MOVW	#<512+256>,(R3)		; IF ZERO (UNLIMITED), DEFAULT TO
                                     00E6   303 					;  A 'REASONALBE' SIZE AND LET PARTNER
                                     00E6   304 					;  HOLLER IF IT IS NOT ENOUGH!!!
            63       1100 8F     B1  00E6   305 10$:	CMPW	#DAP$K_BUFSIZ_V,(R3)	; IS THEIRS SMALLER THAN OURS?
                          05     1E  00EB   306 	BGEQU	20$			; BRANCH IF YES (USE THEIR SIZE)
            63       1100 8F     B0  00ED   307 	MOVW	#DAP$K_BUFSIZ_V,(R3)	; NO, USE OUR MAX BUFFER SIZE
         14 A8            83     B0  00F2   308 20$:	MOVW	(R3)+,FAL$W_MAXDAPSIZ(R8) ; SAVE MAXIMUM DAP MESSAGE SIZE
            83            07     90  00F6   309 	MOVB	#DAP$K_VAXVMS,(R3)+	; OSTYPE FIELD
            83            03     90  00F9   310 	MOVB	#DAP$K_RMS32,(R3)+	; FILESYS FIELD
            83            04     90  00FC   311 	MOVB	#DAP$K_VERNUM_V,(R3)+	; VERNUM FIELD
            83            02     90  00FF   312 	MOVB	#DAP$K_ECONUM_V,(R3)+	; ECONUM FIELD
            83            00     90  0102   313 	MOVB	#DAP$K_USRNUM_V,(R3)+	; USRNUM FIELD
            83            01     90  0105   314 	MOVB	#DAP$K_SOFTVER_V,(R3)+	; SOFTVER FIELD
            83            00     90  0108   315 	MOVB	#DAP$K_USRSOFT_V,(R3)+	; USRSOFT FIELD
            51   E00660E7 8F     D0  010B   316 	MOVL	#DAP$K_SYSCAP_V,R1	; GET VAX SUPPORTED CAPABILITIES
                          FEEB'  30  0112   317 	BSBW	FAL$CVT_BIN2EXT		; STORE AS AN EXTENSIBLE FIELD
            53         48 A8     C3  0115   318 	SUBL3	FAL$Q_XMT+4(R8),R3,-	; COMPUTE SIZE OF THE MESSAGE
                       44 A8         0119       
                                     011B   319 		FAL$Q_XMT(R8)		; "
                          FEE2'  30  011B   320 	BSBW	FAL$TRANSMIT		; SEND CONFIGURATION MESSAGE
                                     011E   321 
                                     011E   322 ;
                                     011E   323 ; REALLOCATE SPACE FOR RECEIVE AND TRANSMIT BUFFERS IF CURRENT BUFFER
                                     011E   324 ; SPACE IS INSUFFICIENT.
                                     011E   325 ;
                                     011E   326 
            50         14 A8     3C  011E   327 	MOVZWL	FAL$W_MAXDAPSIZ(R8),R0	; GET REQUIRED SIZE OF EACH BUFFER
            50         16 A8     B1  0122   328 	CMPW	FAL$W_ACTUALSIZ(R8),R0	; ARE CURRENT BUFFERS SUFFICIENT?
                          3E     1E  0126   329 	BGEQU	40$			; BRANCH IF YES
                       34 A8     D5  0128   330 	TSTL	FAL$Q_BOUNDS(R8)	; BRANCH IF CURRENT BUFFERS HAVE
                          11     13  012B   331 	BEQL	30$			;  NOT BEEN ALLOCATED DYNAMICALLY
                                     012D   332 	$DELTVA_S INADR=FAL$Q_BOUNDS(R8) ; DEALLOCATE CURRENT BUFFERS
                                     013B   333 	CHECK_SS			; BRANCH ON FAILURE
            50            01     78  013E   334 30$:	ASHL	#1,R0,R5		; COMPUTE # OF PAGES REQUIRED TO
                          55         0141       
            55   000001FF 8F     C0  0142   335 	ADDL2	#511,R5			;  ACCOMODATE BOTH TRANSMIT AND
            55         F7 8F     78  0149   336 	ASHL	#-9,R5,R1		;  RECEIVE BUFFERS
                          51         014D       
            51            08     78  014E   337 	ASHL	#<9-1>,R1,R4		; COMPUTE ACTUAL SIZE IN BYTES OF
                          54         0151       
                                     0152   338 					;  SPACE TO BE ALLOCATED FOR EACH 
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page   9
X0.1-25         FAL$CNF                                                                                                          (6)

         16 A8            54     B0  0152   339 	MOVW	R4,FAL$W_ACTUALSIZ(R8)	;  BUFFER AND STORE VALUE
                          FEA7'  30  0156   340 	BSBW	FAL$GETPAGE		; EXPAND PROGRAM REGION
         34 A8            52     7D  0159   341 	MOVQ	R2,FAL$Q_BOUNDS(R8)	; STORE LOWER/UPPER ADDRESS BOUNDS
         40 A8            52     D0  015D   342 	MOVL	R2,FAL$Q_RCV+4(R8)	; STORE RECEIVE BUFFER ADDRESS
            54            52     C1  0161   343 	ADDL3	R2,R4,FAL$Q_XMT+4(R8)	; STORE TRANSMIT BUFFER ADDRESS
                       48 A8         0164       
                                     0166   344 
                                     0166   345 ;
                                     0166   346 ; SET CONFIGURATION MESSAGE PROCESSED FLAG AND DISCARD ANY PREVIOUS
                                     0166   347 ; ATTRIBUTES MESSAGE.
                                     0166   348 ;
                                     0166   349 
                                     0166   350 40$:	SSB	#FAL$V_CNF_MSG,FAL$Q_FLG(R8) ; SET CONFIGURATION MSG FLAG
                                     016A   351 	CSB	#FAL$V_ATT_MSG,FAL$Q_FLG(R8) ; CLEAR ATTRIBUTES MSG FLAG
            50            01     D0  016E   352 	MOVL	#1,R0			; SIGNAL STATE TRANSITION SUCCESS
                                 05  0171   353 	RSB				; EXIT
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  10
X0.1-25         FAL$ATT                                                                                                          (7)

                                     0172   355 	.SBTTL	FAL$ATT
                                     0172   356 
                                     0172   357 FAL$ATT::				; CONTROL POINT
                                     0172   358 
                                     0172   359 ;
                                     0172   360 ; AN ATTRIBUTES MESSAGE HAS BEEN RECEIVED AND DECODED INTO THE DAP CONTROL
                                     0172   361 ; BLOCK. UPDATE THE FAB AS APPROPRIATE.
                                     0172   362 ;
                                     0172   363 ; A CONFIGURATION MESSAGE MUST PRECEDE THE ATTRIBUTES MESSAGE.
                                     0172   364 ; CHECK FOR IT.
                                     0172   365 ;
                                     0172   366 
            68            00     E0  0172   367 	BBS	#FAL$V_CNF_MSG,FAL$Q_FLG(R8),10$ ; BRANCH IF OK
                          03         0175       
                          FF50   31  0176   368 	BRW	FAL$OUT_OF_SEQ		; RETURN STATUS MESSAGE
                                     0179   369 10$:	SSB	#FAL$V_ATT_MSG,FAL$Q_FLG(R8)
                                     017D   370 
                                     017D   371 ;
                                     017D   372 ; IGNORE THE DAP DATATYPE, RUNSYS, AND DEV FIELDS.
                                     017D   373 ;
                                     017D   374 ; PROCESS THE DAP ORG, RFM AND RAT FIELDS.
                                     017D   375 ;
                                     017D   376 
                                     017D   377 		ASSUME	DAP$K_SEQ EQ FAB$C_SEQ
                                     017D   378 		ASSUME	DAP$K_REL EQ FAB$C_REL
                                     017D   379 
         1D AA         3D A9     90  017D   380 	MOVB	DAP$B_ORG(R9),FAB$B_ORG(R10)
                                     0182   381 	
                                     0182   382 		ASSUME 	DAP$K_UDF EQ FAB$C_UDF
                                     0182   383 		ASSUME	DAP$K_FIX EQ FAB$C_FIX
                                     0182   384 		ASSUME	DAP$K_VAR EQ FAB$C_VAR
                                     0182   385 		ASSUME	DAP$K_VFC EQ FAB$C_VFC
                                     0182   386 
         1F AA         3E A9     90  0182   387 	MOVB	DAP$B_RFM(R9),FAB$B_RFM(R10)
                                     0187   388 
                                     0187   389 		ASSUME	DAP$V_FTN EQ FAB$V_FTN
                                     0187   390 		ASSUME	DAP$V_CR  EQ FAB$V_CR
                                     0187   391 		ASSUME	DAP$V_PRN EQ FAB$V_PRN
                                     0187   392 		ASSUME	DAP$V_BLK EQ FAB$V_BLK
                                     0187   393 
         1E AA         3F A9     90  0187   394 	MOVB	DAP$B_RAT(R9),FAB$B_RAT(R10)
         1E AA            10     8A  018C   395 	BICB2	#DAP$M_EMBEDDED,FAB$B_RAT(R10)	; IGNORE THIS BIT
                                     0190   396 
                                     0190   397 ;
                                     0190   398 ; PROCESS THE DAP BLS, MRS, ALQ, FSZ, MRN, AND DEQ FIELDS.
                                     0190   399 ;
                                     0190   400 
         3C AA         40 A9     B0  0190   401 	MOVW	DAP$W_BLS(R9),FAB$W_BLS(R10)
         36 AA         42 A9     B0  0195   402 	MOVW	DAP$W_MRS(R9),FAB$W_MRS(R10)
         10 AA         44 A9     D0  019A   403 	MOVL	DAP$L_ALQ(R9),FAB$L_ALQ(R10)
         3F AA         49 A9     90  019F   404 	MOVB	DAP$B_FSZ(R9),FAB$B_FSZ(R10)
         38 AA         4C A9     D0  01A4   405 	MOVL	DAP$L_MRN(R9),FAB$L_MRN(R10)
         14 AA         4A A9     B0  01A9   406 	MOVW	DAP$W_DEQ(R9),FAB$W_DEQ(R10)
                                     01AE   407 
                                     01AE   408 ;
                                     01AE   409 ; PROCESS THE DAP FOP FIELD.
                                     01AE   410 ;
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  11
X0.1-25         FAL$ATT                                                                                                          (7)

                                     01AE   411 
            51         58 A9     D0  01AE   412 	MOVL	DAP$L_FOP(R9),R1	; GET DAP FOP BITS
                          02     13  01B2   413 	BEQL	20$			; BRANCH IF NO BITS TO MAP
                          01     10  01B4   414 	BSBB	FOP_FIELD		; MAP FOP BITS
                                 05  01B6   415 20$:	RSB				; EXIT
                                     01B7   416 
                                     01B7   417 ;
                                     01B7   418 ; THIS ROUTINE MAPS DAP FOP BITS INTO RMS FOP BITS AND STORES RESULT IN
                                     01B7   419 ; THE FOP FIELD OF THE FAB.
                                     01B7   420 ;	R1 =	DAP BITS ON ENTRY
                                     01B7   421 ;
                                     01B7   422 
                                     01B7   423 FOP_FIELD:				; CONTROL POINT
                          52     D4  01B7   424 	CLRL	R2			; CLEAR RMS FOP BITS
                                     01B9   425 	MAPBIT	DAP$V_RWO,FAB$V_RWO	; MAP THE RWO BIT
                                     01C1   426 	MAPBIT	DAP$V_RWC,FAB$V_RWC	; MAP THE RWC BIT
                                     01C9   427 	MAPBIT	DAP$V_POS,FAB$V_POS	; MAP THE POS BIT
                                     01D1   428 	MAPBIT	DAP$V_CTG,FAB$V_CTG	; MAP THE CTG BIT
                                     01D9   429 	MAPBIT	DAP$V_SUP,FAB$V_SUP	; MAP THE SUP BIT
                                     01E1   430 	MAPBIT	DAP$V_NEF,FAB$V_NEF	; MAP THE NEF BIT
                                     01E9   431 	MAPBIT	DAP$V_TMP,FAB$V_TMP	; MAP THE TMP BIT
                                     01F1   432 	MAPBIT	DAP$V_TMD,FAB$V_TMD	; MAP THE TMD BIT
                                     01F9   433 	MAPBIT	DAP$V_DMO,FAB$V_DMO	; MAP THE DMO BIT
                                     0201   434 	MAPBIT	DAP$V_WCK,FAB$V_WCK	; MAP THE WCK BIT
                                     0209   435 	MAPBIT	DAP$V_RCK,FAB$V_RCK	; MAP THE RCK BIT
                                     0211   436 	MAPBIT	DAP$V_CIF,FAB$V_CIF	; MAP THE CIF BIT
                                     0219   437 	MAPBIT	DAP$V_SQO,FAB$V_SQO	; MAP THE SQO BIT
                                     0221   438 	MAPBIT	DAP$V_MXV,FAB$V_MXV	; MAP THE MXV BIT
                                     0229   439 	MAPBIT	DAP$V_SPL,FAB$V_SPL	; MAP THE SPL BIT
                                     0231   440 	MAPBIT	DAP$V_SCF,FAB$V_SCF	; MAP THE SCF BIT
                                     0239   441 	MAPBIT	DAP$V_DLT,FAB$V_DLT	; MAP THE DLT BIT
                                     0241   442 	MAPBIT	DAP$V_CBT,FAB$V_CBT	; MAP THE CBT BIT
         04 AA            52     D0  0249   443 20$:	MOVL	R2,FAB$L_FOP(R10)	; UPDATE FOP FIELD IN FAB
                                 05  024D   444 	RSB				; EXIT
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  12
X0.1-25         FAL$ACC                                                                                                          (8)

                                     024E   446 	.SBTTL	FAL$ACC
                                     024E   447 
                                     024E   448 FAL$ACC::				; CONTROL POINT
                                     024E   449 
                                     024E   450 ;
                                     024E   451 ; AN ACCESS MESSAGE HAS BEEN RECEIVED AND DECODED INTO THE DAP CONTROL
                                     024E   452 ; BLOCK. UPDATE THE FAB AS APPROPRIATE.
                                     024E   453 ;
                                     024E   454 ; NOTHING NEEDS TO BE DONE WITH THE ACCOPT FIELD AT THIS TIME.
                                     024E   455 ;
                                     024E   456 ; PROCESS THE DAP FILE SPECIFICATION FIELD.
                                     024E   457 ;
                                     024E   458 
                                 90  024E   459 	MOVB	DAP$Q_FILESPEC(R9),-	; STORE SIZE OF FILESPEC STRING
         34 AA         64 A9         024F   460 		FAB$B_FNS(R10)		; "
                                 D0  0253   461 	MOVL	DAP$Q_FILESPEC+4(R9),-	; STORE ADDRESS OF FILESPEC STRING
         2C AA         68 A9         0254   462 		FAB$L_FNA(R10)		; "
                                     0258   463 
                                     0258   464 ;
                                     0258   465 ; PROCESS THE DAP FAC FIELD.
                                     0258   466 ;
                                     0258   467 
                                     0258   468 		ASSUME	DAP$V_PUT EQ FAB$V_PUT
                                     0258   469 		ASSUME	DAP$V_GET EQ FAB$V_GET
                                     0258   470 		ASSUME	DAP$V_DEL EQ FAB$V_DEL
                                     0258   471 		ASSUME	DAP$V_UPD EQ FAB$V_UPD
                                     0258   472 		ASSUME	DAP$V_TRN EQ FAB$V_TRN
                                     0258   473 		ASSUME	DAP$V_BIO EQ FAB$V_BIO
                                     0258   474 
         16 AA         62 A9     90  0258   475 	MOVB	DAP$B_FAC(R9),FAB$B_FAC(R10)
                                     025D   476 
                                     025D   477 ;
                                     025D   478 ; PROCESS THE DAP SHR FIELD.
                                     025D   479 ; 
            51         63 A9     D0  025D   480 	MOVL	DAP$B_SHR(R9),R1	; GET DAP SHR BITS
                          52     D4  0261   481 	CLRL	R2			; CLEAR RMS SHR BITS
                                     0263   482 	MAPBIT	DAP$V_PUT,FAB$V_SHRPUT	; MAP THE SHRPUT BIT
                                     026B   483 	MAPBIT	DAP$V_GET,FAB$V_SHRGET	; MAP THE SHRGET BIT
                                     0273   484 	MAPBIT	DAP$V_DEL,FAB$V_SHRDEL	; MAP THE SHRDEL BIT
                                     027B   485 	MAPBIT	DAP$V_UPD,FAB$V_SHRUPD	; MAP THE SHRUPD BIT
                                     0283   486 	MAPBIT	DAP$V_NIL,FAB$V_NIL	; MAP THE NIL BIT
         17 AA            52     90  028B   487 	MOVB	R2,FAB$B_SHR(R10)	; UPDATE SHR FIELD IN FAB
                                     028F   488 
                                     028F   489 ;
                                     028F   490 ; USE THE ACCFUNC FIELD VALUE AS THE NEXT STATE TABLE VALUE.
                                     028F   491 ;
                                     028F   492 
         10 A8         60 A9     90  028F   493 	MOVB	DAP$B_ACCFUNC(R9),FAL$B_VALUE(R8) ; STORE NEW STATE VALUE
                                 05  0294   494 	RSB				; EXIT
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  13
X0.1-25         FAL$OPEN                                                                                                         (9)

                                     0295   496 	.SBTTL	FAL$OPEN
                                     0295   497 
                                     0295   498 FAL$OPEN::				; CONTROL POINT
                                     0295   499 
                                     0295   500 ;
                                     0295   501 ; AN ATTRIBUTES MESSAGE MUST PRECEDE THE ACCESS (OPEN) MESSAGE.
                                     0295   502 ; CHECK FOR IT.
                                     0295   503 ;
                                     0295   504 
            68            01     E0  0295   505 	BBS	#FAL$V_ATT_MSG,FAL$Q_FLG(R8),10$ ; BRANCH IF OK
                          03         0298       
                          FE2D   31  0299   506 	BRW	FAL$OUT_OF_SEQ		; RETURN STATUS MESSAGE
                                     029C   507 10$:	$OPEN	FAB=R10			; PERFORM OPEN FILE FUNCTION
            02            50     E9  02A5   508 	BLBC	R0,ERR_FILE_OPEN	; BRANCH ON FAILURE
                          06     11  02A8   509 	BRB	RETURN_ATT		;
                                     02AA   510 ERR_FILE_OPEN:				;
            52            04     D0  02AA   511 	MOVL	#DAP$_FILE_OPEN,R2	; GET DAP MACCODE VALUE
                          FDFA   31  02AD   512 	BRW	RETURN_STS		; SEND STATUS MESSAGE
                                     02B0   513 
                                     02B0   514 ;
                                     02B0   515 ; RETURN ATTRIBUTES MESSAGE TO PARTNER
                                     02B0   516 ;
                                     02B0   517 
                                     02B0   518 RETURN_ATT:				;
            53         48 A8     D0  02B0   519 	MOVL	FAL$Q_XMT+4(R8),R3	; GET ADDRESS OF TRANSMIT BUFFER
            83            02     90  02B4   520 	MOVB	#DAP$K_ATT_MSG,(R3)+	; DAP MESSAGE TYPE FIELD
                          83     94  02B7   521 	CLRB	(R3)+			; FLAGS FIELD
                                     02B9   522 
                                     02B9   523 ;
                                     02B9   524 ; DETERMINE WHICH FIELDS TO RETURN AS FOLLOWS:
                                     02B9   525 ;   (1)	ALWAYS SEND THE RAT, MRS, ALQ, DEQ, AND FOP FIELDS.
                                     02B9   526 ;   (2)	SEND THE DATATYPE, ORG, RFM, AND BLS FIELDS ONLY IF THEY DO NOT EQUAL
                                     02B9   527 ;	THEIR DEFAULT VALUES AS DEFINED IN THE DAP SPECIFICATION.
                                     02B9   528 ;   (3)	SEND THE BKS AND MRN FIELDS ONLY IF FILE ORGANIZATION IS RELATIVE.
                                     02B9   529 ;   (4)	SEND THE FSZ FIELD ONLY IF RFM VALUE IS VFC.
                                     02B9   530 ;   (5)	SEND THE DEV FIELD ONLY IF ACCESSING NODE IS VAX.
                                     02B9   531 ;   (6)	NEVER SEND THE RUNSYS FIELD.
                                     02B9   532 ; 
                                     02B9   533 
            51       1868 8F     3C  02B9   534 	MOVZWL	#<DAP$M_RAT!DAP$M_MRS!DAP$M_ALQ!DAP$M_DEQ!DAP$M_FOP>,R1
                                     02BE   535 					; SEND RAT, MRS, ALQ, DEQ, AND FOP
         3C A9            02     91  02BE   536 	CMPB	#DAP$M_IMAGE,DAP$B_DATATYPE(R9)
                          04     13  02C2   537 	BEQL	10$
                                     02C4   538 	SSB	#DAP$V_DATATYPE,R1	; SEND DATATYPE
         1D AA            00     91  02C8   539 10$:	CMPB	#FAB$C_SEQ,FAB$B_ORG(R10)
                          04     13  02CC   540 	BEQL	20$
                                     02CE   541 	SSB	#DAP$V_ORG,R1		; SEND ORG
         1F AA            01     91  02D2   542 20$:	CMPB	#FAB$C_FIX,FAB$B_RFM(R10)
                          04     13  02D6   543 	BEQL	30$
                                     02D8   544 	SSB	#DAP$V_RFM,R1		; SEND RFM
         3C AA       0200 8F     B1  02DC   545 30$:	CMPW	#DAP$K_BLS_D,FAB$W_BLS(R10)
                          04     13  02E2   546 	BEQL	40$
                                     02E4   547 	SSB	#DAP$V_BLS,R1		; SEND BLS
         1D AA            10     91  02E8   548 40$:	CMPB	#FAB$C_REL,FAB$B_ORG(R10)
                          05     12  02EC   549 	BNEQ	50$
            51       0280 8F     A8  02EE   550 	BISW2	#<DAP$M_BKS!DAP$M_MRN>,R1 ; SEND BKS AND MRN
         1F AA            03     91  02F3   551 50$:	CMPB	#FAB$C_VFC,FAB$B_RFM(R10)
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  14
X0.1-25         FAL$OPEN                                                                                                         (9)

                          04     12  02F7   552 	BNEQ	60$
                                     02F9   553 	SSB	#DAP$V_FSZ,R1		; SEND FSZ
            69            21     E1  02FD   554 60$:	BBC	#DAP$V_VAXVMS,DAP$Q_DCODE_FLG(R9),70$
                          04         0300       
                                     0301   555 					; BRANCH IF PARTNER IS NOT VAX/VMS
                                     0301   556 	SSB	#DAP$V_DEV,R1		; SEND DEV
            56            51     D0  0305   557 70$:	MOVL	R1,R6			; SAVE THE SEND FIELD FLAGS
                          FCF5'  30  0308   558 	BSBW	FAL$CVT_BIN2EXT		; STORE ATTMENU AS AN EXTENSIBLE FIELD
                                     030B   559 
                                     030B   560 ;
                                     030B   561 ; NOW STORE THE DESIGNATED FIELDS IN THE ORDER SPECIFIED BY ATTMENU.
                                     030B   562 ;
                                     030B   563 
            56            00     E1  030B   564 	BBC	#DAP$V_DATATYPE,R6,100$	;
                          04         030E       
            83         3C A9     90  030F   565 	MOVB	DAP$B_DATATYPE(R9),(R3)+ ; STORE DATATYPE FIELD
            56            01     E1  0313   566 100$:	BBC	#DAP$V_ORG,R6,110$	;
                          04         0316       
            83         1D AA     90  0317   567 	MOVB	FAB$B_ORG(R10),(R3)+	; STORE ORG FIELD
            56            02     E1  031B   568 110$:	BBC	#DAP$V_RFM,R6,120$	;
                          04         031E       
            83         1F AA     90  031F   569 	MOVB	FAB$B_RFM(R10),(R3)+	; STORE RFM FIELD
            83         1E AA     90  0323   570 120$:	MOVB	FAB$B_RAT(R10),(R3)+	; STORE RAT FIELD
            56            04     E1  0327   571 	BBC	#DAP$V_BLS,R6,130$	;
                          04         032A       
            83         3C AA     B0  032B   572 	MOVW	FAB$W_BLS(R10),(R3)+	; STORE BLS FIELD
            83         36 AA     B0  032F   573 130$:	MOVW	FAB$W_MRS(R10),(R3)+	; STORE MRS FIELD
            51         10 AA     D0  0333   574 	MOVL	FAB$L_ALQ(R10),R1	; GET ALQ VALUE
                          FCC6'  30  0337   575 	BSBW	FAL$CVT_BIN2IMG		; STORE ALQ AS AN IMAGE FIELD
            56            07     E1  033A   576 	BBC	#DAP$V_BKS,R6,140$	;
                          04         033D       
            83         3E AA     90  033E   577 	MOVB	FAB$B_BKS(R10),(R3)+	; STORE BKS FIELD
            56            08     E1  0342   578 140$:	BBC	#DAP$V_FSZ,R6,150$	;
                          04         0345       
            83         3F AA     90  0346   579 	MOVB	FAB$B_FSZ(R10),(R3)+	; STORE FSZ FIELD
            56            09     E1  034A   580 150$:	BBC	#DAP$V_MRN,R6,160$	;
                          07         034D       
            51         38 AA     D0  034E   581 	MOVL	FAB$L_MRN(R10),R1	; GET MRN VALUE
                          FCAB'  30  0352   582 	BSBW	FAL$CVT_BIN2IMG		; STORE MRN AS AN IMAGE FIELD
            83         14 AA     B0  0355   583 160$:	MOVW	FAB$W_DEQ(R10),(R3)+	; STORE DEQ FIELD
                                     0359   584 
                                     0359   585 ;
                                     0359   586 ; IN CONSTRUCTING THE DAP FOP FIELD, TAKE ADVANTAGE OF THE FACT THAT
                                     0359   587 ; RMS-32 MAY MODIFY ONLY THE CTG, CBT, RCK, AND WCK BITS ON $OPEN (NONE
                                     0359   588 ; ARE MODIFIED ON $CREATE).
                                     0359   589 ;
                                     0359   590 
            52         58 A9     D0  0359   591 	MOVL	DAP$L_FOP(R9),R2	; GET PARTNER SUPPLIED FOP BITS
            52   0080C080 8F     CA  035D   592 	BICL2	#<DAP$M_CTG!DAP$M_CBT!DAP$M_RCK!DAP$M_WCK>,R2
                                     0364   593 					; CLEAR BITS THAT MAY HAVE BEEN MODIFIED
            51         04 AA     D0  0364   594 	MOVL	FAB$L_FOP(R10),R1	; GET FOP BITS RETURNED BY RMS
                                     0368   595 	MAPBIT	FAB$V_CTG,DAP$V_CTG	; MAP CTG BIT
                                     0370   596 	MAPBIT	FAB$V_RCK,DAP$V_RCK	; MAP RCK BIT
                                     0378   597 	MAPBIT	FAB$V_WCK,DAP$V_WCK	; MAP WCK BIT
            69            21     E1  0380   598 	BBC	#DAP$V_VAXVMS,DAP$Q_DCODE_FLG(R9),170$
                          08         0383       
                                     0384   599 					; BRANCH IF PARTNER IS NOT VAX/VMS
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  15
X0.1-25         FAL$OPEN                                                                                                         (9)

                                     0384   600 	MAPBIT	FAB$V_CBT,DAP$V_CBT	; MAP CBT BIT
            51            52     D0  038C   601 170$:	MOVL	R2,R1			; MOVE DATA TO CORRECT REGISTER
                          FC6E'  30  038F   602 	BSBW	FAL$CVT_BIN2EXT		; STORE FOP AS AN EXTENSIBLE FIELD
                                     0392   603 
                                     0392   604 ;
                                     0392   605 ; RETURN DEV FIELD ONLY IF PARTNER IS VAX!
                                     0392   606 ;
                                     0392   607 
            56            0E     E0  0392   608 	BBS	#DAP$V_DEV,R6,180$	;
                          03         0395       
                          00D4   31  0396   609 	BRW	190$			;
            51         40 AA     D0  0399   610 180$:	MOVL	FAB$L_DEV(R10),R1	; GET DEV BITS RETURNED BY RMS
                          52     D4  039D   611 	CLRL	R2			; CLEAR CORRESPONDING DAP BITS
                                     039F   612 	MAPBIT	DEV$V_REC,DAP$V_DEVREC	; MAP REC BIT
                                     03A7   613 	MAPBIT	DEV$V_CCL,DAP$V_DEVCCL	; MAP CCL BIT
                                     03AF   614 	MAPBIT	DEV$V_TRM,DAP$V_DEVTRM	; MAP TRM BIT
                                     03B7   615 	MAPBIT	DEV$V_DIR,DAP$V_DEVDIR	; MAP DIR BIT
                                     03BF   616 	MAPBIT	DEV$V_SDI,DAP$V_DEVSDI	; MAP SDI BIT
                                     03C7   617 	MAPBIT	DEV$V_SQD,DAP$V_DEVSQD	; MAP SQD BIT
                                     03CF   618 	MAPBIT	DEV$V_SPL,DAP$V_DEVSPL	; MAP SPL BIT
                                     03D7   619 	MAPBIT	DEV$V_NET,DAP$V_DEVNET	; MAP NET BIT
                                     03DF   620 	MAPBIT	DEV$V_FOD,DAP$V_DEVFOD	; MAP FOD BIT
                                     03E7   621 	MAPBIT	DEV$V_SHR,DAP$V_DEVSHR	; MAP SHR BIT
                                     03EF   622 	MAPBIT	DEV$V_GEN,DAP$V_DEVGEN	; MAP GEN BIT
                                     03F7   623 	MAPBIT	DEV$V_AVL,DAP$V_DEVAVL	; MAP AVL BIT
                                     03FF   624 	MAPBIT	DEV$V_MNT,DAP$V_DEVMNT	; MAP MNT BIT
                                     0407   625 	MAPBIT	DEV$V_MBX,DAP$V_DEVMBX	; MAP MBX BIT
                                     040F   626 	MAPBIT	DEV$V_DMT,DAP$V_DEVDMT	; MAP DMT BIT
                                     0417   627 	MAPBIT	DEV$V_ELG,DAP$V_DEVELG	; MAP ELG BIT
                                     041F   628 	MAPBIT	DEV$V_ALL,DAP$V_DEVALL	; MAP ALL BIT
                                     0427   629 	MAPBIT	DEV$V_FOR,DAP$V_DEVFOR	; MAP FOR BIT
                                     042F   630 	MAPBIT	DEV$V_SWL,DAP$V_DEVSWL	; MAP SWL BIT
                                     0437   631 	MAPBIT	DEV$V_IDV,DAP$V_DEVIDV	; MAP IDV BIT
                                     043F   632 	MAPBIT	DEV$V_ODV,DAP$V_DEVODV	; MAP ODV BIT
                                     0447   633 	MAPBIT	DEV$V_RND,DAP$V_DEVRND	; MAP RND BIT
                                     044F   634 	MAPBIT	DEV$V_RTM,DAP$V_DEVRTM	; MAP RTM BIT
                                     0457   635 	MAPBIT	DEV$V_RCK,DAP$V_DEVRCK	; MAP RCK BIT
                                     045F   636 	MAPBIT	DEV$V_WCK,DAP$V_DEVWCK	; MAP WCK BIT
            51            52     D0  0467   637 	MOVL	R2,R1			; MOVE DATA TO CORRECT REGISTER
                          FB93'  30  046A   638 	BSBW	FAL$CVT_BIN2EXT		; STORE DEV AS AN EXTENSIBLE FIELD
            53         48 A8     C3  046D   639 190$:	SUBL3	FAL$Q_XMT+4(R8),R3,-	; COMPUTE SIZE OF THE MESSAGE
                       44 A8         0471       
                                     0473   640 		FAL$Q_XMT(R8)		; "
                          FB8A'  30  0473   641 	BSBW	FAL$TRANSMIT		; SEND ATTRIBUTES MESSAGE
                                     0476   642 
                                     0476   643 ;
                                     0476   644 ; RETURN  ACKNOWLEDGE MESSAGE TO PARTNER
                                     0476   645 ;
                                     0476   646 
                                     0476   647 RETURN_ACK:				;
            53         48 A8     D0  0476   648 	MOVL	FAL$Q_XMT+4(R8),R3	; GET ADDRESS OF TRANSMIT BUFFER
            83            06     90  047A   649 	MOVB	#DAP$K_ACK_MSG,(R3)+	; DAP MESSAGE TYPE FIELD
                          83     94  047D   650 	CLRB	(R3)+			; FLAGS FIELD
            53         48 A8     C3  047F   651 	SUBL3	FAL$Q_XMT+4(R8),R3,-	; COMPUTE SIZE OF THE MESSAGE
                       44 A8         0483       
                                     0485   652 		FAL$Q_XMT(R8)		; "
                          FB78'  30  0485   653 	BSBW	FAL$TRANSMIT		; SEND ACKNOWLEDGE MESSAGE
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  16
X0.1-25         FAL$OPEN                                                                                                         (9)

            50            01     D0  0488   654 	MOVL	#1,R0			; SIGNAL STATE TRANSITION SUCCESS
                                 05  048B   655 	RSB				; EXIT
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  17
X0.1-25         FAL$CREATE                                                                                                      (10)

                                     048C   657 	.SBTTL	FAL$CREATE
                                     048C   658 
                                     048C   659 FAL$CREATE::				; CONTROL POINT
                                     048C   660 
                                     048C   661 ;
                                     048C   662 ; AN ATTRIBUTES MESSAGE MUST PRECEDE THE ACCESS (CREATE) MESSAGE.
                                     048C   663 ; CHECK FOR IT.
                                     048C   664 ;
                                     048C   665 
            68            01     E0  048C   666 	BBS	#FAL$V_ATT_MSG,FAL$Q_FLG(R8),10$ ; BRANCH IF OK
                          03         048F       
                          FC36   31  0490   667 	BRW	FAL$OUT_OF_SEQ		; RETURN STATUS MESSAGE
         17 AA            02     8A  0493   668 10$:	BICB2	#FAB$M_SHRGET,FAB$B_SHR(R10)
                                     0497   669 					; ***** NECESSARY BECAUSE RT11
                                     0497   670 					; ***** SETS THIS BIT ON CREATE
                                     0497   671 					; ***** WHICH IS REJECTED BY RMS32
                                     0497   672 	$CREATE	FAB=R10			; PERFORM CREATE FILE FUNCTION
            03            50     E9  04A0   673 	BLBC	R0,20$			; BRANCH ON FAILURE
                          FE0A   31  04A3   674 	BRW	RETURN_ATT		;
                          FE01   31  04A6   675 20$:	BRW	ERR_FILE_OPEN		;
                                     04A9   676 
                                     04A9   677 FAL$ERASE::				; CONTROL POINT
                                     04A9   678 	$ERASE	FAB=R10			; PERFORM ERASE (DELETE) FILE FUNCTION
            03            50     E9  04B2   679 	BLBC	R0,10$			; BRANCH ON FAILURE
                          01D4   31  04B5   680 	BRW	RETURN_CMP		;
                          FDEF   31  04B8   681 10$:	BRW	ERR_FILE_OPEN		;
                                     04BB   682 
                                     04BB   683 FAL$EXECUTE::				; CONTROL POINT
                                     04BB   684 
                                     04BB   685 ;
                                     04BB   686 ; SUBMIT COMMAND FILE TO SYMBIONT MANAGER FOR EXECUTION. IT ALREADY
                                     04BB   687 ; RESIDES ON THE THIS NODE.
                                     04BB   688 ;
                                     04BB   689 
                                     04BB   690 	SSB	#FAB$V_SCF,FAB$L_FOP(R10) ; SET SUBMIT-ON-CLOSE BIT
                                     04C0   691 	$OPEN	FAB=R10			; PERFORM OPEN FILE FUNCTION
            03            50     E9  04C9   692 	BLBC	R0,10$			; BRANCH ON FAILURE
                          01B1   31  04CC   693 	BRW	FAL$CLOSE		; CLOSE THE FILE AND SUBMIT IT
                          FDD8   31  04CF   694 10$:	BRW	ERR_FILE_OPEN		;
                                     04D2   695 
                                     04D2   696 FAL$SUBMIT::				; CONTROL POINT
                                     04D2   697 
                                     04D2   698 ;
                                     04D2   699 ; COPY AND SUBMIT COMMAND FILE TO SYMBIONT MANAGER FOR EXECUTION.
                                     04D2   700 ;
                                     04D2   701 
                                 C8  04D2   702 	BISL2	#<FAB$M_SCF!FAB$M_DLT>,- ; SET SUBMIT-ON-CLOSE AND
         04 AA   0000C000 8F         04D3   703 		FAB$L_FOP(R10)		 ;  DELETE-AFTER-EXECUTION BITS
                          FFAF   31  04DA   704 	BRW	FAL$CREATE		; PROCEED AS IF IT WERE A CREATE
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  18
X0.1-25         FAL$CTL                                                                                                         (11)

                                     04DD   706 	.SBTTL	FAL$CTL
                                     04DD   707 
                                     04DD   708 FAL$CTL::				; CONTROL POINT
                                     04DD   709 
                                     04DD   710 ;
                                     04DD   711 ; A CONTROL MESSAGE HAS BEEN RECEIVED AND DECODED INTO THE DAP CONTROL
                                     04DD   712 ; BLOCK. UPDATE THE RAB AS APPROPRIATE.
                                     04DD   713 ;
                                     04DD   714 ; PROCESS THE DAP RAC FIELD.
                                     04DD   715 ; IN ADDITION TO NORMAL RMS-32 RAC INFORMATION, THIS FIELD SPECIFIES
                                     04DD   716 ; WHETHER THE ACCESS IS TO BE IN:
                                     04DD   717 ;   (1)	FILE TRANSFER MODE OR RECORD TRANSFER MODE
                                     04DD   718 ;   (2)	BLOCK I/O MODE OR RECORD ACCESS MODE
                                     04DD   719 ;
                                     04DD   720 
                                     04DD   721 		ASSUME	DAP$K_SEQ_ACC  EQ 0
                                     04DD   722 		ASSUME	DAP$K_KEY_ACC  EQ 1
                                     04DD   723 		ASSUME	DAP$K_RFA_ACC  EQ 2
                                     04DD   724 		ASSUME	DAP$K_SEQ_FILE EQ 3
                                     04DD   725 		ASSUME	DAP$K_BLK_VBN  EQ 4
                                     04DD   726 		ASSUME	DAP$K_BLK_FILE EQ 5
                                     04DD   727 
                                     04DD   728 	$CASEB	SELECTOR=DAP$B_RAC(R9),DISPL=<- ; ACCESS MODE:
                                     04DD   729 		10$-			; SEQUENTIAL RECORD ACCESS
                                     04DD   730 		10$-			; RANDOM ACCESS BY KEY VALUE
                                     04DD   731 		10$-			; RANDOM ACCESS BY RFA
                                     04DD   732 		20$-			; SEQUENTIAL FILE TRANSFER
                                     04DD   733 		30$-			; BLOCK I/O ACCESS BY VBN
                                     04DD   734 		40$-			; BLOCK I/O SEQUENTIAL FILE TRANSFER
                                     04DD   735 	>				;
                                     04EE   736 ;
                                     04EE   737 ; UPDATE THE RAC FIELD OF THE RAB UNLESS BLOCK I/O MODE IS SPECIFIED.
                                     04EE   738 ; (RMS-32 IGNORES THE RAC FIELD ON BLOCK I/O OPERATIONS.)
                                     04EE   739 ;
                                     04EE   740 ; ALSO UPDATE THE FILE TRANSFER MODE AND BLOCK I/O FLAGS AS APPROPRIATE
                                     04EE   741 ; FOR THE ACCESS MODE INVOKED.
                                     04EE   742 ;
                                     04EE   743 
                                     04EE   744 		ASSUME	DAP$K_SEQ_ACC EQ RAB$C_SEQ
                                     04EE   745 		ASSUME	DAP$K_KEY_ACC EQ RAB$C_KEY
                                     04EE   746 		ASSUME	DAP$K_RFA_ACC EQ RAB$C_RFA
                                     04EE   747 
         1E AB         6E A9     90  04EE   748 10$:	MOVB	DAP$B_RAC(R9),RAB$B_RAC(R11)
                                     04F3   749 	CSB	#FAL$V_FILE_MODE,FAL$Q_FLG(R8)
                          08     11  04F7   750 	BRB	25$
         1E AB            00     90  04F9   751 20$:	MOVB	#RAB$C_SEQ,RAB$B_RAC(R11)
                                     04FD   752 	SSB	#FAL$V_FILE_MODE,FAL$Q_FLG(R8)
                                     0501   753 25$:	CSB	#FAL$V_BLOCK_IO,FAL$Q_FLG(R8)
                          0E     11  0505   754 	BRB	KEY_FIELD
                                     0507   755 30$:	CSB	#FAL$V_FILE_MODE,FAL$Q_FLG(R8)
                          04     11  050B   756 	BRB	45$
                                     050D   757 40$:	SSB	#FAL$V_FILE_MODE,FAL$Q_FLG(R8)
                                     0511   758 45$:	SSB	#FAL$V_BLOCK_IO,FAL$Q_FLG(R8)
                                     0515   759 
                                     0515   760 ;
                                     0515   761 ; PROCESS THE DAP KEY FIELD.
                                     0515   762 ; THE KEY FIELD CONTAINS THE VIRTUAL BLOCK NUMBER FOR BLOCK I/O ACCESS,
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  19
X0.1-25         FAL$CTL                                                                                                         (11)

                                     0515   763 ; THE RELATIVE RECORD NUMBER FOR RANDOM ACCESS BY KEY VALUE, OR
                                     0515   764 ; THE RECORD FILE ADDRESS VALUE FOR RANDOM ACCESS BY RFA.
                                     0515   765 ; THE KEY FIELD IS IGNORED FOR SEQUENTIAL RECORD ACCESS BECAUSE THIS
                                     0515   766 ; ACCESS MODE MEANS USE THE NEXT RECORD POINTER STORED INTERNALLY BY RMS-32.
                                     0515   767 ;
                                     0515   768 
                                     0515   769 KEY_FIELD:				;
            68            09     E1  0515   770 	BBC	#FAL$V_BLOCK_IO,FAL$Q_FLG(R8),10$
                          07         0518       
                                     0519   771 					; BRANCH IF NOT BLOCK I/O ACCESS
         38 AA         70 A9     D0  0519   772 	MOVL	DAP$Q_KEY(R9),RAB$L_BKT(R10)
                                     051E   773 					; STORE VIRTUAL BLOCK # OF ACCESS
                                     051E   774 					; IN BKT FIELD OF THE RAB
                          1F     11  051E   775 	BRB	ROP_FIELD		; ALL DONE
                                     0520   776 10$:	$CASEB	SELECTOR=RAB$B_RAC(R11),DISPL=<- ; ACCESS MODE:
                                     0520   777 		ROP_FIELD-		; SEQUENTIAL RECORD ACCESS
                                     0520   778 		20$-			; RANDOM ACCESS BY KEY VALUE
                                     0520   779 		30$-			; RANDOM ACCESS BY RFA
                                     0520   780 	>				;
                                 7E  052B   781 20$:	MOVAQ	DAP$Q_KEY(R9),-		; UPDATE KEY BUFFER ADDR FIELD OF RAC
         30 AB         70 A9         052C   782 		RAB$L_KBF(R11)		; "
         34 AB            04     90  0530   783 	MOVB	#4,RAB$B_KSZ(R11)	; UPDATE KEY BUFFER SIZE FIELD OF RAB
                          09     11  0534   784 	BRB	ROP_FIELD		; ALL DONE
                          06     28  0536   785 30$:	MOVC3	#6,DAP$Q_KEY(R9),-	; UPDATE RFA FIELD OF RAB
         10 AB         70 A9         0538   786 		RAB$L_RFA0(R11)		; "
            50            01     D0  053C   787 	MOVL	#1,R0			; RESTORE SUCCESS STATUS
                                     053F   788 
                                     053F   789 ;
                                     053F   790 ; PROCESS THE DAP ROP FIELD.
                                     053F   791 ;
                                     053F   792 
                                     053F   793 ROP_FIELD:				; UPDATE THE ROP FIELD OF THE RAB
         78 A9            00     E1  053F   794 	BBC	#DAP$V_EOF,DAP$L_ROP(R9),10$
                          05         0543       
         04 AB            08     E3  0544   795 	BBCS	#RAB$V_EOF,RAB$L_ROP(R11),10$
                          00         0548       
                                     0549   796 10$:					; MAP THE EOF BIT
                                     0549   797 
                                     0549   798 ;
                                     0549   799 ; USE THE CTLFUNC FIELD VALUE AS THE NEXT STATE TABLE VALUE.
                                     0549   800 ;
                                     0549   801 
         10 A8         6C A9     90  0549   802 	MOVB	DAP$B_CTLFUNC(R9),FAL$B_VALUE(R8) ; STORE NEW STATE VALUE
                                 05  054E   803 	RSB				; EXIT
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  20
X0.1-25         FAL$RETRV_REC                                                                                                   (12)

                                     054F   805 	.SBTTL	FAL$RETRV_REC
                                     054F   806 
                                     054F   807 FAL$RETRV_REC::				; CONTROL POINT
                                     054F   808 	CSB	#FAL$V_EOF,FAL$Q_FLG(R8) ; CLEAR END-OF-FILE FLAG
            53         48 A8     D0  0553   809 	MOVL	FAL$Q_XMT+4(R8),R3	; GET ADDRESS OF TRANSMIT BUFFER
            83            08     90  0557   810 	MOVB	#DAP$K_DAT_MSG,(R3)+	; DAP MESSAGE TYPE FIELD
                          83     94  055A   811 	CLRB	(R3)+			; FLAGS FIELD
                          83     94  055C   812 	CLRB	(R3)+			; DO NOT RETURN RECORD NUMBER
            68            09     E0  055E   813 	BBS	#FAL$V_BLOCK_IO,FAL$Q_FLG(R8),5$
                          11         0561       
                                     0562   814 					; BRANCH IF BLOCK I/O ACCESS
            03         1F AA     91  0562   815 	CMPB	FAB$B_RFM(R10),#FAB$C_VFC
                          0B     12  0566   816 	BNEQ	5$			; BRANCH IF NOT VFC FORMAT
         2C AB            53     D0  0568   817 	MOVL	R3,RAB$L_RHB(R11)	; STORE ADDRESS OF RECORD HEADER BUFFER
            52         3F AA     9A  056C   818 	MOVZBL	FAB$B_FSZ(R10),R2	; GET SIZE OF RECORD HEADER
            53            52     C0  0570   819 	ADDL2	R2,R3			; SKIP OVER RHB STORAGE AREA IN DAP MSG
         24 AB            53     D0  0573   820 5$:	MOVL	R3,RAB$L_UBF(R11)	; STORE BUFFER ADDRESS
            53         48 A8     C3  0577   821 	SUBL3	FAL$Q_XMT+4(R8),R3,R7	; COMPUTE # OVERHEAD BYTES IN MESSAGE
                          57         057B       
            68            09     E0  057C   822 	BBS	#FAL$V_BLOCK_IO,FAL$Q_FLG(R8),10$
                          11         057F       
                                     0580   823 					; BRANCH IF BLOCK I/O ACCESS
         14 A8            57     A3  0580   824 	SUBW3	R7,FAL$W_MAXDAPSIZ(R8),RAB$W_USZ(R11)
                       20 AB         0584       
                                     0586   825 					; COMPUTE MAX # BYTES THAT CAN
                                     0586   826 					;  BE READ INTO REST OF BUFFER
                                     0586   827 	$GET	RAB=R11			; PERFORM GET (NEXT) RECORD FUNCTION
                          0E     11  058F   828 	BRB	20$			;
         20 AB         3C AA     B0  0591   829 10$:	MOVW	FAB$W_BLS(R10),RAB$W_USZ(R11)
                                     0596   830 					; REQUEST EXACTLY ONE BLOCK
                                     0596   831 	$READ	RAB=R11			; PERFORM READ (NEXT) BLOCK FUNCTION
            35            50     E9  059F   832 20$:	BLBC	R0,30$			; BRANCH ON FAILURE
            57         22 AB     A1  05A2   833 	ADDW3	RAB$W_RSZ(R11),R7,-	; COMPUTE SIZE OF DATA MESSAGE
                       44 A8         05A6       
                                     05A8   834 		FAL$Q_XMT(R8)		;
         61 A9            02     E1  05A8   835 	BBC	#DAP$V_STS_RETRV,DAP$B_ACCOPT(R9),25$
                          13         05AC       
                                     05AD   836 					; BRANCH IF STATUS MESSAGE NOT REQUESTED
            7E         44 A8     7D  05AD   837 	MOVQ	FAL$Q_XMT(R8),-(SP)	; SAVE DESCRIPTOR
         48 A8         4C A8     DE  05B1   838 	MOVAL	FAL$L_SPARE(R8),FAL$Q_XMT+4(R8) ; USE SCRATCH BUFFER
            52            01     D0  05B6   839 	MOVL	#DAP$_SUCCESS,R2	; GET DAP MACCODE VALUE
                          FA44'  30  05B9   840 	BSBW	FAL$STATUS		; SEND STATUS MESSAGE TO PARTNER
         44 A8            8E     7D  05BC   841 	MOVQ	(SP)+,FAL$Q_XMT(R8)	; RESTORE DESCRIPTOR
                          FA3D'  30  05C0   842 25$:	BSBW	FAL$TRANSMIT		; SEND DATA MESSAGE
            57       00C0 C8     DE  05C3   843 	MOVAL	FAL$L_STB(R8),R7	; GET ADDRESS OF STATISTICS BLOCK
                       14 A7     D6  05C8   844 	INCL	FAL$L_XMT_REC(R7)	; INCREMENT XMT DATA RECORD COUNT
            52         22 AB     3C  05CB   845 	MOVZWL	RAB$W_RSZ(R11),R2	; UPDATE XMT DATA RECORD BYTE COUNT
         1C A7            52     C0  05CF   846 	ADDL2	R2,FAL$L_XMT_DATA(R7)	;
            50            01     D0  05D3   847 	MOVL	#1,R0			; SIGNAL STATE TRANSITION SUCCESS
                                 05  05D6   848 	RSB				; EXIT
       0000'8F            50     B1  05D7   849 30$:	CMPW	R0,#<RMS$_EOF&^XFFFF>	; IS IT AN END-OF-FILE?
                          04     12  05DC   850 	BNEQ	ERR_FILE_XFER		; NO
                                     05DE   851 	SSB	#FAL$V_EOF,FAL$Q_FLG(R8) ; YES, DENOTE END-OF-FILE
                                     05E2   852 ERR_FILE_XFER:				;
            52            05     D0  05E2   853 	MOVL	#DAP$_FILE_XFER,R2	; GET DAP MACCODE VALUE
                          FAC2   31  05E5   854 	BRW	RETURN_STS		; SEND STATUS MESSAGE
                                     05E8   855 
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  21
X0.1-25         FAL$RETRV_REC                                                                                                   (12)

                                     05E8   856 FAL$MODE::				; CONTROL POINT
                                     05E8   857 
                                     05E8   858 ;
                                     05E8   859 ; USE THE FILE TRANSFER MODE FLAG TO FORM THE NEXT STATE TRANSITION VALUE.
                                     05E8   860 ;
            01            08     EF  05E8   861 	EXTZV	#FAL$V_FILE_MODE,#1,FAL$Q_FLG(R8),R1
            51            68         05EB       
         10 A8            51     90  05ED   862 	MOVB	R1,FAL$B_VALUE(R8)	; STORE NEW STATE VALUE
                                 05  05F1   863 	RSB				; EXIT
                                     05F2   864 
                                     05F2   865 FAL$LISTEN::				; CONTROL POINT
                                 05  05F2   866 	RSB				; EXIT
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  22
X0.1-25         FAL$CONNECT                                                                                                     (13)

                                     05F3   868 	.SBTTL	FAL$CONNECT
                                     05F3   869 
                                     05F3   870 FAL$CONNECT::				; CONTROL POINT
                                     05F3   871 	$CONNECT RAB=R11		; PERFORM CONNECT FUNCTION
            03            50     E9  05FC   872 	BLBC	R0,10$			; BRANCH ON FAILURE
                          FE74   31  05FF   873 	BRW	RETURN_ACK		;
                          FFDD   31  0602   874 10$:	BRW	ERR_FILE_XFER		;
                                     0605   875 
                                     0605   876 FAL$UPDATE::				; CONTROL POINT
                                     0605   877 	$UPDATE RAB=R11			; PERFORM UPDATE RECORD FUNCTION
            01            50     E9  060E   878 	BLBC	R0,10$			; BRANCH ON FAILURE
                                 05  0611   879 	RSB				; EXIT
                          FFCD   31  0612   880 10$:	BRW	ERR_FILE_XFER		;
                                     0615   881 
                                     0615   882 FAL$DELETE::				; CONTROL POINT
                                     0615   883 	$DELETE RAB=R11			; PERFORM DELETE RECORD FUNCTION
            01            50     E9  061E   884 	BLBC	R0,10$			; BRANCH ON FAILURE
                                 05  0621   885 	RSB				; EXIT
                          FFBD   31  0622   886 10$:	BRW	ERR_FILE_XFER		;
                                     0625   887 
                                     0625   888 FAL$REWIND::				; CONTROL POINT
                                     0625   889 	$REWIND RAB=R11			; PERFORM REWIND RECORD STREAM FUNCTION
            01            50     E9  062E   890 	BLBC	R0,10$			; BRANCH ON FAILURE
                                 05  0631   891 	RSB				; EXIT
                          FFAD   31  0632   892 10$:	BRW	ERR_FILE_XFER		;
                                     0635   893 
                                     0635   894 ;FAL$TRUNCATE::				; CONTROL POINT
                                     0635   895 ;	$TRUNCATE RAB=R11		; PERFORM TRUNCATE RECORD FUNCTION
                                     0635   896 ;	BLBC	R0,10$			; BRANCH ON FAILURE
                                     0635   897 ;	RSB				; EXIT
                                     0635   898 ;10$:	BRW	ERR_FILE_XFER		;
                                     0635   899 
                                     0635   900 FAL$SPACE::				; CONTROL POINT
                                     0635   901 	$SPACE RAB=R11			; PERFORM SKIP BLOCK FUNCTION
            01            50     E9  063E   902 	BLBC	R0,10$			; BRANCH ON FAILURE
                                 05  0641   903 	RSB				; EXIT
                          FF9D   31  0642   904 10$:	BRW	ERR_FILE_XFER		;
                                     0645   905 
                                     0645   906 FAL$FIND::				; CONTROL POINT
                                     0645   907 	$FIND	RAB=R11			; PERFORM FIND RECORD FUNCTION
            01            50     E9  064E   908 	BLBC	R0,10$			; BRANCH ON FAILURE
                                 05  0651   909 	RSB				; EXIT
                          FF8D   31  0652   910 10$:	BRW	ERR_FILE_XFER		;
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  23
X0.1-25         FAL$CON                                                                                                         (14)

                                     0655   912 	.SBTTL	FAL$CON
                                     0655   913 
                                     0655   914 FAL$CON::				; CONTROL POINT
                                     0655   915 
                                     0655   916 ;
                                     0655   917 ; A CONTINUE TRANSFER MESSAGE HAS BEEN RECEIVED AND DECODED INTO THE DAP
                                     0655   918 ; CONTROL BLOCK. PERFORM ADDITIONAL PROCESSING.
                                     0655   919 ;
                                     0655   920 ; THE CONTINUE TRANSFER MESSAGE IS VALID ONLY IF THE PREVIOUS RECORD
                                     0655   921 ; OPERATION FAILED FOR A REASON OTHER THAN END-OF-FILE ENCOUNTERED.
                                     0655   922 ;
                                     0655   923 
            68            0A     E1  0655   924 	BBC	#FAL$V_EOF,FAL$Q_FLG(R8),10$ ; BRANCH IF NOT EOF
                          03         0658       
                          FA6D   31  0659   925 	BRW	FAL$OUT_OF_SEQ		; RETURN STATUS MESSAGE
                                     065C   926 
                                     065C   927 ;
                                     065C   928 ; USE THE CONFUNC FIELD VALUE AS THE NEXT STATE TRANSITION TABLE VALUE.
                                     065C   929 ;
                                     065C   930 
         10 A8         7C A9     90  065C   931 10$:	MOVB	DAP$B_CONFUNC(R9),FAL$B_VALUE(R8) ; STORE NEW STATE VALUE
                                 05  0661   932 	RSB				; EXIT
                                     0662   933 
                                     0662   934 FAL$ADVANCE::				; CONTROL POINT
            52            02     D0  0662   935 	MOVL	#DAP$_UNSUPPORT,R2	; GET DAP MACCODE VALUE
            50            10     9A  0665   936 	MOVZBL	#DAP$_CONFUNC,R0	; GET FIELD ID CODE
            51         20 A9     9A  0668   937 	MOVZBL	DAP$B_TYPE(R9),R1	; GET MESSAGE TYPE
                          FA3B   31  066C   938 	BRW	RETURN_STS		; SEND STATUS MESSAGE
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  24
X0.1-25         FAL$CMP                                                                                                         (15)

                                     066F   940 	.SBTTL	FAL$CMP
                                     066F   941 
                                     066F   942 FAL$CMP::				; CONTROL POINT
                                     066F   943 
                                     066F   944 ;
                                     066F   945 ; AN ACCESS COMPLETE MESSAGE HAS BEEN RECEIVED AND DECODED INTO THE DAP
                                     066F   946 ; CONTROL BLOCK. UPDATE THE FAB AS APPROPRIATE.
                                     066F   947 ;
                                     066F   948 ; PROCESS THE DAP FOP FIELD.
                                     066F   949 ;
                                     066F   950 
            51       0084 C9     D0  066F   951 	MOVL	DAP$L_FOP2(R9),R1	; GET DAP FOP BITS
                          03     13  0674   952 	BEQL	10$			; BRANCH IF NO BITS SET
                          FB3E   30  0676   953 	BSBW	FOP_FIELD		; UPDATE FOP IN FAB
                                     0679   954 
                                     0679   955 ;
                                     0679   956 ; USE THE CMPFUNC FIELD VALUE AS THE NEXT STATE TABLE VALUE.
                                     0679   957 ;
                                     0679   958 
         10 A8       0080 C9     90  0679   959 10$:	MOVB	DAP$B_CMPFUNC(R9),FAL$B_VALUE(R8) ; STORE NEW STATE VALUE
                                 05  067F   960 	RSB				; EXIT
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  25
X0.1-25         FAL$CLOSE                                                                                                       (16)

                                     0680   962 	.SBTTL	FAL$CLOSE
                                     0680   963 
                                     0680   964 FAL$CLOSE::				; CONTROL POINT
                                     0680   965 	$CLOSE	FAB=R10			; PERFORM CLOSE FILE FUNCTION
            19            50     E9  0689   966 	BLBC	R0,ERR_FILE_CLOS	; BRANCH ON FAILURE
                                     068C   967 
                                     068C   968 ;
                                     068C   969 ; RETURN ACCESS COMPLETE MESSAGE TO PARTNER
                                     068C   970 ;
                                     068C   971 
                                     068C   972 RETURN_CMP:				;
            53         48 A8     D0  068C   973 	MOVL	FAL$Q_XMT+4(R8),R3	; GET ADDRESS OF TRANSMIT BUFFER
            83            07     90  0690   974 	MOVB	#DAP$K_CMP_MSG,(R3)+	; DAP MESSAGE TYPE FIELD
                          83     94  0693   975 	CLRB	(R3)+			; FLAGS FIELD
            83            02     90  0695   976 	MOVB	#DAP$K_RESPONSE,(R3)+	; CMPFUNC FIELD
            53         48 A8     C3  0698   977 	SUBL3	FAL$Q_XMT+4(R8),R3,-	; COMPUTE SIZE OF THE MESSAGE
                       44 A8         069C       
                                     069E   978 		FAL$Q_XMT(R8)		; "
                          F95F'  30  069E   979 	BSBW	FAL$TRANSMIT		; SEND ACCESS COMPLETE MESSAGE
            50            01     D0  06A1   980 	MOVL	#1,R0			; SIGNAL STATE TRANSITION SUCCESS
                                 05  06A4   981 	RSB				; EXIT
                                     06A5   982 ERR_FILE_CLOS:				;
            52            07     D0  06A5   983 	MOVL	#DAP$_FILE_CLOS,R2	; GET DAP MACCODE VALUE
                          F9FF   31  06A8   984 	BRW	RETURN_STS		; SEND STATUS MESSAGE
                                     06AB   985 
                                     06AB   986 FAL$PURGE::				; CONTROL POINT
                                     06AB   987 	$CLOSE	FAB=R10			; PERFORM CLOSE FILE FUNCTION
            03            50     E9  06B4   988 	BLBC	R0,10$			; BRANCH ON FAILURE
                          FDEF   31  06B7   989 	BRW	FAL$ERASE		; NOW DELETE THE FILE
                          FFE8   31  06BA   990 10$:	BRW	ERR_FILE_CLOS		;
                                     06BD   991 
                                     06BD   992 FAL$DISCONNECT::			; CONTROL POINT
                                     06BD   993 	$DISCONNECT RAB=R11		; PERFORM DISCONNECT FUNCTION
            0B            50     E9  06C6   994 	BLBC	R0,20$			; BRANCH ON FAILURE
            69            20     E1  06C9   995 	BBC	#DAP$V_AFTER_V41,DAP$Q_DCODE_FLG(R9),10$
                          03         06CC       
                                     06CD   996 					; BRANCH IF PARTNER DID NOT IMPLEMENT
                                     06CD   997 					;  TO DAP SPEC AFTER V4.1
                          FDA6   31  06CD   998 	BRW	RETURN_ACK		; SEND ACKNOWLEDGE MESSAGE
            50            01     D0  06D0   999 10$:	MOVL	#1,R0			; SIGNAL STATE TRANSITION SUCCESS
                                 05  06D3  1000 	RSB				; EXIT
                          FF0B   31  06D4  1001 20$:	BRW	ERR_FILE_XFER		;
                                     06D7  1002 
                                     06D7  1003 FAL$RESPONSE::				; CONTROL POINT
            52            09     D0  06D7  1004 	MOVL	#DAP$_INVALID,R2	; GET DAP MACCODE VALUE
            50            10     9A  06DA  1005 	MOVZBL	#DAP$_CMPFUNC,R0	; GET FIELD ID CODE
            51         20 A9     9A  06DD  1006 	MOVZBL	DAP$B_TYPE(R9),R1	; GET MESSAGE TYPE
                          F9C6   31  06E1  1007 	BRW	RETURN_STS		; SEND STATUS MESSAGE
                                     06E4  1008 
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  26
X0.1-25         FAL$STORE_REC                                                                                                   (17)

                                     06E4  1010 	.SBTTL	FAL$STORE_REC
                                     06E4  1011 
                                     06E4  1012 FAL$STORE_REC::				; CONTROL POINT
                                     06E4  1013 
                                     06E4  1014 ;
                                     06E4  1015 ; PROCESS THE DAP NUMBER FIELD OF THE DATA MESSAGE.
                                     06E4  1016 ; THE NUMBER FIELD CONTAINS THE VIRTUAL BLOCK NUMBER FOR BLOCK I/O ACCESS,
                                     06E4  1017 ; THE RELATIVE RECORD NUMBER FOR RANDOM ACCESS BY KEY VALUE, OR
                                     06E4  1018 ; THE RECORD FILE ADDRESS VALUE FOR RANDOM ACCESS BY RFA.
                                     06E4  1019 ; THE NUMBER FIELD IS IGNORED FOR SEQUENTIAL RECORD ACCESS BECAUSE THIS
                                     06E4  1020 ; ACCESS MODE MEANS USE THE NEXT RECORD POINTER STORED INTERNALLY BY RMS-32.
                                     06E4  1021 ;
                                     06E4  1022 
            68            09     E1  06E4  1023 	BBC	#FAL$V_BLOCK_IO,FAL$Q_FLG(R8),10$
                          08         06E7       
                                     06E8  1024 					; BRANCH IF NOT BLOCK I/O ACCESS
         38 AA       0088 C9     D0  06E8  1025 	MOVL	DAP$Q_NUMBER(R9),RAB$L_BKT(R10)
                                     06EE  1026 					; STORE VIRTUAL BLOCK # OF ACCESS
                                     06EE  1027 					; IN BKT FIELD OF THE RAB
                          1E     11  06EE  1028 	BRB	FILEDATA_FIELD		; ALL DONE
                                     06F0  1029 10$:	$CASEB	SELECTOR=RAB$B_RAC(R11),DISPL=<- ; ACCESS MODE:
                                     06F0  1030 		FILEDATA_FIELD-		; SEQUENTIAL RECORD ACCESS
                                     06F0  1031 		20$-			; RANDOM ACCESS BY KEY VALUE
                                     06F0  1032 		30$-			; RANDOM ACCESS BY RFA
                                     06F0  1033 	>				;
                                 DE  06FB  1034 20$:	MOVAL	DAP$Q_NUMBER(R9),-	; UPDATE KEY BUFFER ADDR FIELD OF RAB
         30 AB       0088 C9         06FC  1035 		RAB$L_KBF(R11)		; "
         34 AB            04     90  0701  1036 	MOVB	#4,RAB$B_KSZ(R11)	; UPDATE KEY BUFFER SIZE FIELD OF RAB
                          07     11  0705  1037 	BRB	FILEDATA_FIELD		; ALL DONE
                          06     28  0707  1038 30$:	MOVC3	#6,DAP$Q_NUMBER(R9),-	; UPDATE RFA FIELD OF RAB
         10 AB       0088 C9         0709  1039 		RAB$L_RFA0(R11)		; "
                                     070E  1040 
                                     070E  1041 ;
                                     070E  1042 ; PROCESS THE DAP FILEDATA FIELD.
                                     070E  1043 ; IF VFC FORMAT, IT CONTAINS THE RECORD HEADER PREFIXED TO THE RECORD.
                                     070E  1044 ;
                                     070E  1045 
                                     070E  1046 FILEDATA_FIELD:				; STORE THE RECORD/BLOCK DATA
            54       0090 C9     7D  070E  1047 	MOVQ	DAP$Q_FILEDATA(R9),R4	; STORE RECORD DESCRIPTOR IN <R4,R5>
            68            09     E0  0713  1048 	BBS	#FAL$V_BLOCK_IO,FAL$Q_FLG(R8),5$
                          14         0716       
                                     0717  1049 					; BRANCH IF BLOCK I/O ACCESS
            03         1F AA     91  0717  1050 	CMPB	FAB$B_RFM(R10),#FAB$C_VFC
                          0E     12  071B  1051 	BNEQ	5$			; BRANCH IF NOT VFC FORMAT
         2C AB            55     D0  071D  1052 	MOVL	R5,RAB$L_RHB(R11)	; STORE ADDRESS OF RECORD HEADER BUFFER
            52         3F AA     9A  0721  1053 	MOVZBL	FAB$B_FSZ(R10),R2	; GET SIZE OF RECORD HEADER
            54            52     C2  0725  1054 	SUBL2	R2,R4			; COMPUTE SIZE OF RECORD
            55            52     C0  0728  1055 	ADDL2	R2,R5			; COMPUTE ADDRESS OF RECORD
         22 AB            54     B0  072B  1056 5$:	MOVW	R4,RAB$W_RSZ(R11)	; STORE RECORD SIZE
         28 AB            55     D0  072F  1057 	MOVL	R5,RAB$L_RBF(R11)	; STORE RECORD ADDRESS
            57       00C0 C8     DE  0733  1058 	MOVAL	FAL$L_STB(R8),R7	; GET ADDRESS OF STATISTICS BLOCK
                       10 A7     D6  0738  1059 	INCL	FAL$L_RCV_REC(R7)	; INCREMENT RCV DATA RECORD COUNT
         18 A7            54     C0  073B  1060 	ADDL2	R4,FAL$L_RCV_DATA(R7)	; UPDATE RCV DATA RECORD BYTE COUNT
            68            09     E0  073F  1061 	BBS	#FAL$V_BLOCK_IO,FAL$Q_FLG(R8),10$
                          0B         0742       
                                     0743  1062 					; BRANCH IF BLOCK I/O ACCESS
                                     0743  1063 	$PUT	RAB=R11			; PERFORM PUT RECORD FUNCTION
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  27
X0.1-25         FAL$STORE_REC                                                                                                   (17)

                          09     11  074C  1064 	BRB	20$			;
                                     074E  1065 10$:	$WRITE	RAB=R11			; PERFORM WRITE BLOCK FUNCTION
            06            50     E9  0757  1066 20$:	BLBC	R0,30$			; BRANCH ON FAILURE
         61 A9            01     E0  075A  1067 	BBS	#DAP$V_STS_STORE,DAP$B_ACCOPT(R9),40$
                          04         075E       
                                     075F  1068 					; BRANCH IF STATUS RETURN IS REQUESTED
                                 05  075F  1069 	RSB				; EXIT
                          FE7F   31  0760  1070 30$:	BRW	ERR_FILE_XFER		; RETURN ERROR IN STATUS MESSAGE
            52            01     D0  0763  1071 40$:	MOVL	#DAP$_SUCCESS,R2	; GET DAP MACCODE VALUE
                          F897'  30  0766  1072 	BSBW	FAL$STATUS		; SEND STATUS MESSAGE TO PARTNER
            50            01     D0  0769  1073 	MOVL	#1,R0			; SIGNAL STATE TRANSITION SUCCESS
                                 05  076C  1074 	RSB				; EXIT
                                     076D  1075 	.END
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  28
SYMBOL TABLE                                                                                                                    (17)

$$.TMP1        = 00000001            DAP$K_DISCON   = 00000004            DAP$M_BLS      = 00000010            
$$.TMP2        = 0000005B            DAP$K_ECONUM_V = 00000002            DAP$M_CBT      = 00800000            
$$COUNT        = 00000003            DAP$K_ERASE    = 00000004            DAP$M_CIF      = 00010000            
BIT...         = 00000020            DAP$K_EXECUTE  = 00000008            DAP$M_CTG      = 00000080            
DAP$B_ACCFUNC    00000060            DAP$K_FAC_I    = 00000040            DAP$M_DATATYPE = 00000001            
DAP$B_ACCOPT     00000061            DAP$K_FIND     = 0000000E            DAP$M_DEQ      = 00000800            
DAP$B_BKS        00000048            DAP$K_FIX      = 00000001            DAP$M_DEV      = 00004000            
DAP$B_CMPFUNC    00000080            DAP$K_FLAGS_I  = 00000004            DAP$M_DLK      = 00000010            
DAP$B_CONFUNC    0000007C            DAP$K_FOP_I    = 01020024            DAP$M_DLT      = 00400000            
DAP$B_CTLFUNC    0000006C            DAP$K_GET_READ = 00000001            DAP$M_DMO      = 00002000            
DAP$B_CTLMENU    0000006D            DAP$K_IDX      = 00000020            DAP$M_EMBEDDED = 00000010            
DAP$B_DATATYPE   0000003C            DAP$K_KEY_ACC  = 00000001            DAP$M_FID      = 00001000            
DAP$B_ECONUM     00000029            DAP$K_LSA      = 00000005            DAP$M_FOP      = 00001000            
DAP$B_FAC        00000062            DAP$K_OPEN     = 00000001            DAP$M_FSZ      = 00000100            
DAP$B_FIELD_ID   00000009            DAP$K_PURGE    = 00000003            DAP$M_GET      = 00000002            
DAP$B_FILESYS    00000027            DAP$K_PUT_WRITE= 00000004            DAP$M_IMAGE    = 00000002            
DAP$B_FLAGS      00000021            DAP$K_RAT_I    = 00000020            DAP$M_KEY      = 00000002            
DAP$B_FSZ        00000049            DAP$K_REL      = 00000010            DAP$M_MRN      = 00000200            
DAP$B_LENGTH     00000023            DAP$K_RESPONSE = 00000002            DAP$M_MRS      = 00000020            
DAP$B_MAC_CODE   0000000B            DAP$K_RETRY    = 00000001            DAP$M_MXV      = 00080000            
DAP$B_MSG_TYPE   0000000A            DAP$K_REWIND   = 00000006            DAP$M_NEF      = 00000200            
DAP$B_ORG        0000003D            DAP$K_RFA_ACC  = 00000002            DAP$M_NIL      = 00000040            
DAP$B_OSTYPE     00000026            DAP$K_RMS32    = 00000003            DAP$M_NONFATAL = 00000001            
DAP$B_RAC        0000006E            DAP$K_ROP_I    = 00000802            DAP$M_ORG      = 00000002            
DAP$B_RAT        0000003F            DAP$K_SEQ      = 00000000            DAP$M_POS      = 00000008            
DAP$B_RFM        0000003E            DAP$K_SEQ_ACC  = 00000000            DAP$M_RAC      = 00000001            
DAP$B_SHR        00000063            DAP$K_SEQ_FILE = 00000003            DAP$M_RAT      = 00000008            
DAP$B_SOFTVER    0000002B            DAP$K_SHR_I    = 00000090            DAP$M_RCK      = 00008000            
DAP$B_STREAMID   00000022            DAP$K_SKIP_REC = 00000002            DAP$M_RFM      = 00000004            
DAP$B_TYPE       00000020            DAP$K_SOFTVER_V= 00000001            DAP$M_ROP      = 00000008            
DAP$B_USRNUM     0000002A            DAP$K_SPACE    = 0000000B            DAP$M_RUNSYS   = 00000400            
DAP$B_USRSOFT    0000002C            DAP$K_STM      = 00000004            DAP$M_RWC      = 00000002            
DAP$B_VERNUM     00000028            DAP$K_STS_MSG  = 00000009            DAP$M_RWO      = 00000001            
DAP$C_BLN        000000C0            DAP$K_SUBMIT   = 00000007            DAP$M_SCF      = 00200000            
DAP$K_ABORT    = 00000003            DAP$K_SYSCAP_V = E00660E7            DAP$M_SPL      = 00100000            
DAP$K_ACCOPT_I = 00000008            DAP$K_UDF      = 00000000            DAP$M_SQO      = 00040000            
DAP$K_ACC_MSG  = 00000003            DAP$K_UPDATE   = 00000003            DAP$M_SUP      = 00000100            
DAP$K_ACK_MSG  = 00000006            DAP$K_USRNUM_V = 00000000            DAP$M_TMD      = 00000800            
DAP$K_ATTMENU_I= 0001A000            DAP$K_USRSOFT_V= 00000000            DAP$M_TMP      = 00000400            
DAP$K_ATT_MSG  = 00000002            DAP$K_VAR      = 00000002            DAP$M_WCK      = 00004000            
DAP$K_BLK_FILE = 00000005            DAP$K_VAXVMS   = 00000007            DAP$Q_DCODE_FLG  00000000            
DAP$K_BLK_VBN  = 00000004            DAP$K_VERNUM_V = 00000004            DAP$Q_FILEDATA   00000090            
DAP$K_BLN        000000C0            DAP$K_VFC      = 00000003            DAP$Q_FILESPEC   00000064            
DAP$K_BLS_D    = 00000200            DAP$L_ALQ        00000044            DAP$Q_KEY        00000070            
DAP$K_BUFSIZ_V = 00001100            DAP$L_ATTMENU    00000038            DAP$Q_MSG_BUF1   00000010            
DAP$K_CLOSE    = 00000001            DAP$L_DCODE_STS  00000008            DAP$Q_MSG_BUF2   00000018            
DAP$K_CMP_MSG  = 00000007            DAP$L_DEV        0000005C            DAP$Q_NUMBER     00000088            
DAP$K_CNF_MSG  = 00000001            DAP$L_FOP        00000058            DAP$Q_RFA        0000009C            
DAP$K_CONNECT  = 00000002            DAP$L_FOP2       00000084            DAP$Q_RUNSYS     00000050            
DAP$K_CON_MSG  = 00000005            DAP$L_MRN        0000004C            DAP$Q_SYSCAP     00000030            
DAP$K_CREATE   = 00000002            DAP$L_MSG_MASK   0000000C            DAP$Q_VERSION    00000028            
DAP$K_CTLMENU_I= 00000054            DAP$L_OPERATOR   00000020            DAP$S_TMP1..   = 0000000A            
DAP$K_CTL_MSG  = 00000004            DAP$L_RECNUM     000000A4            DAP$S_TMP2..   = 00000015            
DAP$K_DATATYP_I= 00000084            DAP$L_ROP        00000078            DAP$S_TMP3..   = 00000002            
DAP$K_DAT_MSG  = 00000008            DAP$L_STV        000000A8            DAP$S_TMP4..   = 00000008            
DAP$K_DELETE   = 00000005            DAP$M_ALQ      = 00000040            DAP$V_AFTER_V41= 00000020            
DAP$K_DEV_I    = 04000040            DAP$M_BKS      = 00000080            DAP$V_ALQ      = 00000006            
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  29
SYMBOL TABLE                                                                                                                    (17)

DAP$V_APPEND   = 0000000D            DAP$V_MRN      = 00000009            DAP$_PENDING   = 00000000            
DAP$V_ASCII    = 00000000            DAP$V_MRS      = 00000005            DAP$_SUCCESS   = 00000001            
DAP$V_BIO      = 00000005            DAP$V_MSGBLK   = 00000012            DAP$_UNSUPPORT = 00000002            
DAP$V_BKS      = 00000007            DAP$V_MXV      = 00000013            DEV$M_ALL      = 00800000            
DAP$V_BLK      = 00000003            DAP$V_NEF      = 00000009            DEV$M_AVL      = 00040000            
DAP$V_BLS      = 00000004            DAP$V_NIL      = 00000006            DEV$M_CCL      = 00000002            
DAP$V_CBT      = 00000017            DAP$V_NONFATAL = 00000000            DEV$M_DIR      = 00000008            
DAP$V_CIF      = 00000010            DAP$V_ORG      = 00000001            DEV$M_DMT      = 00200000            
DAP$V_CR       = 00000001            DAP$V_POS      = 00000003            DEV$M_ELG      = 00400000            
DAP$V_CTG      = 00000007            DAP$V_PRIV     = 00000005            DEV$M_FOD      = 00004000            
DAP$V_DATATYPE = 00000000            DAP$V_PRN      = 00000002            DEV$M_FOR      = 01000000            
DAP$V_DEL      = 00000002            DAP$V_PUT      = 00000000            DEV$M_GEN      = 00020000            
DAP$V_DEQ      = 0000000B            DAP$V_RAC      = 00000000            DEV$M_IDV      = 04000000            
DAP$V_DEV      = 0000000E            DAP$V_RANREC   = 00000006            DEV$M_MBX      = 00100000            
DAP$V_DEVALL   = 0000000C            DAP$V_RANVBN   = 00000007            DEV$M_MNT      = 00080000            
DAP$V_DEVAVL   = 00000010            DAP$V_RAT      = 00000003            DEV$M_NET      = 00002000            
DAP$V_DEVCCL   = 00000001            DAP$V_RCK      = 0000000F            DEV$M_ODV      = 08000000            
DAP$V_DEVDIR   = 00000003            DAP$V_RELORG   = 00000002            DEV$M_RCK      = 40000000            
DAP$V_DEVDMT   = 0000000B            DAP$V_RFM      = 00000002            DEV$M_REC      = 00000001            
DAP$V_DEVELG   = 00000011            DAP$V_ROP      = 00000003            DEV$M_RND      = 10000000            
DAP$V_DEVFOD   = 00000007            DAP$V_RUNSYS   = 0000000A            DEV$M_RTM      = 20000000            
DAP$V_DEVFOR   = 00000017            DAP$V_RWC      = 00000001            DEV$M_SDI      = 00000010            
DAP$V_DEVGEN   = 00000019            DAP$V_RWO      = 00000000            DEV$M_SHR      = 00010000            
DAP$V_DEVIDV   = 0000000D            DAP$V_SCF      = 00000015            DEV$M_SPL      = 00000040            
DAP$V_DEVMBX   = 00000012            DAP$V_SEQORG   = 00000001            DEV$M_SQD      = 00000020            
DAP$V_DEVMNT   = 0000000A            DAP$V_SEQREC   = 00000005            DEV$M_SWL      = 02000000            
DAP$V_DEVNET   = 00000018            DAP$V_SPL      = 00000014            DEV$M_TRM      = 00000004            
DAP$V_DEVODV   = 0000000E            DAP$V_SQO      = 00000012            DEV$M_WCK      = 80000000            
DAP$V_DEVRCK   = 00000015            DAP$V_STREAMID = 00000000            DEV$V_ALL      = 00000017            
DAP$V_DEVREC   = 00000000            DAP$V_STSRTN   = 00000011            DEV$V_AVL      = 00000012            
DAP$V_DEVRND   = 00000014            DAP$V_STS_RETRV= 00000002            DEV$V_CCL      = 00000001            
DAP$V_DEVRTM   = 00000013            DAP$V_STS_STORE= 00000001            DEV$V_DIR      = 00000003            
DAP$V_DEVSDI   = 00000004            DAP$V_SUBMIT   = 0000000E            DEV$V_DMT      = 00000015            
DAP$V_DEVSHR   = 00000008            DAP$V_SUP      = 00000008            DEV$V_ELG      = 00000016            
DAP$V_DEVSPL   = 00000009            DAP$V_TMD      = 0000000B            DEV$V_FOD      = 0000000E            
DAP$V_DEVSQD   = 00000005            DAP$V_TMP      = 0000000A            DEV$V_FOR      = 00000018            
DAP$V_DEVSWL   = 0000000F            DAP$V_TMP1..   = 00000001            DEV$V_GEN      = 00000011            
DAP$V_DEVTRM   = 00000002            DAP$V_TMP2..   = 0000000B            DEV$V_IDV      = 0000001A            
DAP$V_DEVWCK   = 00000016            DAP$V_TMP3..   = 00000006            DEV$V_MBX      = 00000014            
DAP$V_DLK      = 00000004            DAP$V_TMP4..   = 00000018            DEV$V_MNT      = 00000013            
DAP$V_DLT      = 00000016            DAP$V_TRN      = 00000004            DEV$V_NET      = 0000000D            
DAP$V_DMO      = 0000000D            DAP$V_UPD      = 00000003            DEV$V_ODV      = 0000001B            
DAP$V_EMBEDDED = 00000004            DAP$V_VAXVMS   = 00000021            DEV$V_RCK      = 0000001E            
DAP$V_EOF      = 00000000            DAP$V_WCK      = 0000000E            DEV$V_REC      = 00000000            
DAP$V_EXEC     = 00000004            DAP$W_BLS        00000040            DEV$V_RND      = 0000001C            
DAP$V_FID      = 0000000C            DAP$W_BUFSIZ     00000024            DEV$V_RTM      = 0000001D            
DAP$V_FILALL   = 00000000            DAP$W_DEQ        0000004A            DEV$V_SDI      = 00000004            
DAP$V_FOP      = 0000000C            DAP$W_MRS        00000042            DEV$V_SHR      = 00000010            
DAP$V_FOPDLT   = 0000001F            DAP$W_STSCODE    00000098            DEV$V_SPL      = 00000006            
DAP$V_FOPSCF   = 0000001E            DAP$_CMPFUNC   = 00000010            DEV$V_SQD      = 00000005            
DAP$V_FOPSPL   = 0000001D            DAP$_CONFUNC   = 00000010            DEV$V_SWL      = 00000019            
DAP$V_FSZ      = 00000008            DAP$_FILE_CLOS = 00000007            DEV$V_TRM      = 00000002            
DAP$V_FTN      = 00000000            DAP$_FILE_OPEN = 00000004            DEV$V_WCK      = 0000001F            
DAP$V_GET      = 00000001            DAP$_FILE_XFER = 00000005            ERR_FILE_CLOS    000006A5 R     03   
DAP$V_IMAGE    = 00000001            DAP$_FORMAT    = 00000008            ERR_FILE_OPEN    000002AA R     03   
DAP$V_KEY      = 00000001            DAP$_INVALID   = 00000009            ERR_FILE_XFER    000005E2 R     03   
DAP$V_LENGTH   = 00000001            DAP$_MSG_SYNC  = 0000000A            FAB$B_BID        00000000            
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  30
SYMBOL TABLE                                                                                                                    (17)

FAB$B_BKS        0000003E            FAB$M_NAM      = 01000000            FAB$V_OFP      = 0000001D            
FAB$B_BLN        00000001            FAB$M_NEF      = 00000400            FAB$V_ORG      = 00000004            
FAB$B_DNS        00000035            FAB$M_NFS      = 00010000            FAB$V_POS      = 00000008            
FAB$B_FAC        00000016            FAB$M_NIL      = 00000020            FAB$V_PPF      = 00000012            
FAB$B_FNS        00000034            FAB$M_OFP      = 20000000            FAB$V_PPF_IND  = 0000000E            
FAB$B_FSZ        0000003F            FAB$M_POS      = 00000100            FAB$V_PPF_RAT  = 00000006            
FAB$B_ORG        0000001D            FAB$M_PPF      = 00040000            FAB$V_PRN      = 00000002            
FAB$B_RAT        0000001E            FAB$M_PPF_IND  = 00004000            FAB$V_PUT      = 00000000            
FAB$B_RFM        0000001F            FAB$M_PPF_RAT  = 00003FC0            FAB$V_RCK      = 00000017            
FAB$B_RTV        0000001C            FAB$M_PRN      = 00000004            FAB$V_RWC      = 0000000B            
FAB$B_SHR        00000017            FAB$M_PUT      = 00000001            FAB$V_RWO      = 00000007            
FAB$C_BID      = 00000003            FAB$M_RCK      = 00800000            FAB$V_SCF      = 0000000E            
FAB$C_BLN        00000050            FAB$M_RWC      = 00000800            FAB$V_SHRDEL   = 00000002            
FAB$C_FIX      = 00000001            FAB$M_RWO      = 00000080            FAB$V_SHRGET   = 00000001            
FAB$C_HSH      = 00000030            FAB$M_SCF      = 00004000            FAB$V_SHRPUT   = 00000000            
FAB$C_IDX      = 00000020            FAB$M_SHRDEL   = 00000004            FAB$V_SHRUPD   = 00000003            
FAB$C_MAXRFM   = 00000003            FAB$M_SHRGET   = 00000002            FAB$V_SPL      = 0000000D            
FAB$C_REL      = 00000010            FAB$M_SHRPUT   = 00000001            FAB$V_SQO      = 00000006            
FAB$C_RFM_DFLT = 00000002            FAB$M_SHRUPD   = 00000008            FAB$V_SUP      = 00000002            
FAB$C_SEQ      = 00000000            FAB$M_SPL      = 00002000            FAB$V_TEF      = 0000001C            
FAB$C_UDF      = 00000000            FAB$M_SQO      = 00000040            FAB$V_TMD      = 00000004            
FAB$C_VAR      = 00000002            FAB$M_SUP      = 00000004            FAB$V_TMP      = 00000003            
FAB$C_VFC      = 00000003            FAB$M_TEF      = 10000000            FAB$V_TRN      = 00000004            
FAB$K_BLN        00000050            FAB$M_TMD      = 00000010            FAB$V_UFM      = 0000001A            
FAB$L_ALQ        00000010            FAB$M_TMP      = 00000008            FAB$V_UFO      = 00000011            
FAB$L_CTX        00000018            FAB$M_TRN      = 00000010            FAB$V_UPD      = 00000003            
FAB$L_DEV        00000040            FAB$M_UFM      = 04000000            FAB$V_UPI      = 00000006            
FAB$L_DNA        00000030            FAB$M_UFO      = 00020000            FAB$V_WCK      = 00000009            
FAB$L_FNA        0000002C            FAB$M_UPD      = 00000008            FAB$W_BLS        0000003C            
FAB$L_FOP        00000004            FAB$M_UPI      = 00000040            FAB$W_DEQ        00000014            
FAB$L_JNL        00000020            FAB$M_WCK      = 00000200            FAB$W_IFI        00000002            
FAB$L_MRN        00000038            FAB$S_ORG      = 00000004            FAB$W_MRS        00000036            
FAB$L_NAM        00000028            FAB$S_PPF_RAT  = 00000008            FAL$ACC          0000024E RG    03   
FAB$L_SDC        00000044            FAB$V_BIO      = 00000005            FAL$ADVANCE      00000662 RG    03   
FAB$L_STS        00000008            FAB$V_BLK      = 00000003            FAL$ATT          00000172 RG    03   
FAB$L_STV        0000000C            FAB$V_BRO      = 00000006            FAL$B_VALUE      00000010            
FAB$L_XAB        00000024            FAB$V_CBT      = 00000015            FAL$CHECK_SS     ********   X   03   
FAB$M_BIO      = 00000020            FAB$V_CIF      = 00000019            FAL$CLOSE        00000680 RG    03   
FAB$M_BLK      = 00000008            FAB$V_CR       = 00000001            FAL$CMP          0000066F RG    03   
FAB$M_BRO      = 00000040            FAB$V_CTG      = 00000014            FAL$CNF          000000D2 RG    03   
FAB$M_CBT      = 00200000            FAB$V_DEL      = 00000002            FAL$CON          00000655 RG    03   
FAB$M_CIF      = 02000000            FAB$V_DFW      = 00000005            FAL$CONNECT      000005F3 RG    03   
FAB$M_CR       = 00000002            FAB$V_DLT      = 0000000F            FAL$CREATE       0000048C RG    03   
FAB$M_CTG      = 00100000            FAB$V_DMO      = 0000000C            FAL$CTL          000004DD RG    03   
FAB$M_DEL      = 00000004            FAB$V_ESC      = 0000001B            FAL$CVT_BIN2EXT  ********   X   03   
FAB$M_DFW      = 00000020            FAB$V_EXE      = 00000007            FAL$CVT_BIN2IMG  ********   X   03   
FAB$M_DLT      = 00008000            FAB$V_FTN      = 00000000            FAL$C_STBBLN     00000020            
FAB$M_DMO      = 00001000            FAB$V_GET      = 00000001            FAL$C_WRKBLN     00000400            
FAB$M_ESC      = 08000000            FAB$V_INP      = 00000013            FAL$DECODE_MSG   ********   X   03   
FAB$M_EXE      = 00000080            FAB$V_JNL      = 00000016            FAL$DELETE       00000615 RG    03   
FAB$M_FTN      = 00000001            FAB$V_KFO      = 0000001E            FAL$DISCONNECT   000006BD RG    03   
FAB$M_GET      = 00000002            FAB$V_MSE      = 00000004            FAL$ERASE        000004A9 RG    03   
FAB$M_INP      = 00080000            FAB$V_MXV      = 00000001            FAL$EXECUTE      000004BB RG    03   
FAB$M_JNL      = 00400000            FAB$V_NAM      = 00000018            FAL$FIND         00000645 RG    03   
FAB$M_KFO      = 40000000            FAB$V_NEF      = 0000000A            FAL$GETPAGE      ********   X   03   
FAB$M_MSE      = 00000010            FAB$V_NFS      = 00000010            FAL$INITIALIZE   00000000 RG    03   
FAB$M_MXV      = 00000002            FAB$V_NIL      = 00000005            FAL$INT_MSG      000000B0 RG    03   
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  31
SYMBOL TABLE                                                                                                                    (17)

FAL$K_BUFFERSIZ= 00000080            FAL$V_CNF_MSG  = 00000000            RAB$M_EOF      = 00000100            
FAL$K_DAP      = 000000C0            FAL$V_CONNECT  = 00000002            RAB$M_FDL      = 00000040            
FAL$K_FAB      = 00000050            FAL$V_EOF      = 0000000A            RAB$M_HSH      = 00000080            
FAL$K_MBXBUF   = 00000040            FAL$V_FILE_MODE= 00000008            RAB$M_KGE      = 00200000            
FAL$K_NAM      = 00000038            FAL$V_MBXAST   = 00000012            RAB$M_KGT      = 00400000            
FAL$K_NCBBUF   = 00000040            FAL$V_RCVAST   = 00000010            RAB$M_LIM      = 00004000            
FAL$K_RAB      = 00000044            FAL$V_XMTAST   = 00000011            RAB$M_LOA      = 00002000            
FAL$K_RESULTSIZ= 00000080            FAL$W_ACTUALSIZ  00000016            RAB$M_LOC      = 00010000            
FAL$K_STB      = 00000020            FAL$W_LNKCHN     00000018            RAB$M_MAS      = 00000020            
FAL$K_STBBLN     00000020            FAL$W_MAXDAPSIZ  00000014            RAB$M_NLK      = 00100000            
FAL$K_WRKBLN     00000400            FAL$W_MBXCHN     0000001A            RAB$M_NXR      = 00800000            
FAL$LISTEN       000005F2 RG    03   FILEDATA_FIELD   0000070E R     03   RAB$M_PMT      = 40000000            
FAL$L_FAB        00000200            FOP_FIELD        000001B7 R     03   RAB$M_PPF_IND  = 00004000            
FAL$L_NAM        00000294            GBL...         = 00000000            RAB$M_PPF_RAT  = 00003FC0            
FAL$L_RAB        00000250            KEY_FIELD        00000515 R     03   RAB$M_PTA      = 20000000            
FAL$L_RCV_BYTE   00000008            MBXEFN         = 00000003            RAB$M_RAH      = 00000200            
FAL$L_RCV_DATA   00000018            NAM$B_BID      = 00000000            RAB$M_RLK      = 00080000            
FAL$L_RCV_MSG    00000000            NAM$B_BLN      = 00000001            RAB$M_RNE      = 01000000            
FAL$L_RCV_REC    00000010            NAM$B_RSS      = 00000002            RAB$M_RNF      = 08000000            
FAL$L_SPARE      0000004C            NAM$C_BID      = 00000002            RAB$M_TMO      = 02000000            
FAL$L_STB        000000C0            NAM$C_BLN      = 00000038            RAB$M_TPT      = 00000002            
FAL$L_XMT_BYTE   0000000C            NAM$L_RSA      = 00000004            RAB$M_UIF      = 00000010            
FAL$L_XMT_DATA   0000001C            RAB$B_BID        00000000            RAB$M_ULK      = 00040000            
FAL$L_XMT_MSG    00000004            RAB$B_BLN        00000001            RAB$M_WAT      = 00020000            
FAL$L_XMT_REC    00000014            RAB$B_KRF        00000035            RAB$M_WBH      = 00000400            
FAL$MODE         000005E8 RG    03   RAB$B_KSZ        00000034            RAB$S_PPF_RAT  = 00000008            
FAL$NEXT_MSG     00000081 RG    03   RAB$B_MBC        00000037            RAB$V_ASY      = 00000000            
FAL$NEXT_MSG1    0000008E R     03   RAB$B_MBF        00000036            RAB$V_BIO      = 0000000B            
FAL$OPEN         00000295 RG    03   RAB$B_PSZ        00000034            RAB$V_CCO      = 0000001F            
FAL$OUT_OF_SEQ   000000C9 RG    03   RAB$B_RAC        0000001E            RAB$V_CVT      = 0000001A            
FAL$PURGE        000006AB RG    03   RAB$B_ROP1       00000005            RAB$V_EOF      = 00000008            
FAL$Q_BOUNDS     00000034            RAB$B_ROP2       00000006            RAB$V_FDL      = 00000006            
FAL$Q_FLG        00000000            RAB$B_ROP3       00000007            RAB$V_HSH      = 00000007            
FAL$Q_LNKIOSB    0000001C            RAB$B_TMO        0000001F            RAB$V_KGE      = 00000015            
FAL$Q_MBX        0000002C            RAB$C_BID      = 00000001            RAB$V_KGT      = 00000016            
FAL$Q_MBXIOSB    00000024            RAB$C_BLN        00000044            RAB$V_LIM      = 0000000E            
FAL$Q_NCB        0000002C            RAB$C_KEY      = 00000001            RAB$V_LOA      = 0000000D            
FAL$Q_RCV        0000003C            RAB$C_RFA      = 00000002            RAB$V_LOC      = 00000010            
FAL$Q_STATE_CTX  00000008            RAB$C_SEQ      = 00000000            RAB$V_MAS      = 00000005            
FAL$Q_XMT        00000044            RAB$K_BLN        00000044            RAB$V_NLK      = 00000014            
FAL$RECEIVE      ********   X   03   RAB$L_BKT        00000038            RAB$V_NXR      = 00000017            
FAL$RESPONSE     000006D7 RG    03   RAB$L_CTX        00000018            RAB$V_PMT      = 0000001E            
FAL$RETRV_REC    0000054F RG    03   RAB$L_DCT        00000038            RAB$V_PPF_IND  = 0000000E            
FAL$REWIND       00000625 RG    03   RAB$L_FAB        0000003C            RAB$V_PPF_RAT  = 00000006            
FAL$SPACE        00000635 RG    03   RAB$L_KBF        00000030            RAB$V_PTA      = 0000001D            
FAL$STATUS       ********   X   03   RAB$L_PBF        00000030            RAB$V_RAH      = 00000009            
FAL$STORE_REC    000006E4 RG    03   RAB$L_RBF        00000028            RAB$V_RLK      = 00000013            
FAL$SUBMIT       000004D2 RG    03   RAB$L_RFA0       00000010            RAB$V_RNE      = 00000018            
FAL$TRANSMIT     ********   X   03   RAB$L_RHB        0000002C            RAB$V_RNF      = 0000001B            
FAL$T_BUFFER     00000380            RAB$L_ROP        00000004            RAB$V_TMO      = 00000019            
FAL$T_DAP        00000100            RAB$L_STS        00000008            RAB$V_TPT      = 00000001            
FAL$T_MBXBUF     00000080            RAB$L_STV        0000000C            RAB$V_UIF      = 00000004            
FAL$T_NCBBUF     00000080            RAB$L_UBF        00000024            RAB$V_ULK      = 00000012            
FAL$T_RESULTANT  00000300            RAB$M_ASY      = 00000001            RAB$V_WAT      = 00000011            
FAL$UPDATE       00000605 RG    03   RAB$M_BIO      = 00000800            RAB$V_WBH      = 0000000A            
FAL$V_ATT_MSG  = 00000001            RAB$M_CCO      = 80000000            RAB$W_ISI        00000002            
FAL$V_BLOCK_IO = 00000009            RAB$M_CVT      = 04000000            RAB$W_RFA        00000010            
FALACTION       - STATE TABLE ACTION ROUTINES                    22-AUG-1978 01:09:30   VAX-11 MACRO X0.3-11               Page  32
SYMBOL TABLE                                                                                                                    (17)

RAB$W_RFA4       00000014            
RAB$W_RSZ        00000022            
RAB$W_USZ        00000020            
RETURN_ACK       00000476 R     03   
RETURN_ATT       000002B0 R     03   
RETURN_CMP       0000068C R     03   
RETURN_STS       000000AA R     03   
RMS$_EOF         ********   X   03   
ROP_FIELD        0000053F R     03   
SYS$CLOSE        ********  GX   03   
SYS$CONNECT      ********  GX   03   
SYS$CREATE       ********  GX   03   
SYS$DELETE       ********  GX   03   
SYS$DELTVA       ********   X   03   
SYS$DISCONNECT   ********  GX   03   
SYS$ERASE        ********  GX   03   
SYS$FIND         ********  GX   03   
SYS$GET          ********  GX   03   
SYS$OPEN         ********  GX   03   
SYS$PUT          ********  GX   03   
SYS$READ         ********  GX   03   
SYS$REWIND       ********  GX   03   
SYS$SPACE        ********  GX   03   
SYS$UPDATE       ********  GX   03   
SYS$WAITFR       ********   X   03   
SYS$WRITE        ********  GX   03   


PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            00000400      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
FAL$CODE         0000076D      03     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD  NOWRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
1922. BYTES LEFT IN FREE MEMORY POOL.
4474. BYTES OF RECLAIMED MEMORY.
OBJ$:FALACTION,LIS$:FALACTION/-SP=LIB$:FAL.MLB/ML,SRC$:FALACTION
103 MLB DIR RDS - 1215 GETS TO DEFINE 42 MACROS. 107 INTER. FILE WRITES. 
