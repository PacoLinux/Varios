
; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 1
; Digital Equipment Corporation
;
;	0001	MODULE PATPAR (
;	0002			%IF %VARIANT EQL 1
;     L 0003			%THEN
;	0004				ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE),
;	0005			%FI
;	0006			IDENT = 'X01.22') =
;	0007	BEGIN
;	0008	
;	0009	! Copyright (C) 1976,1977,1978
;	0010	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0011	!
;	0012	! This software is furnished under a license for use only on a
;	0013	! single computer system and may be copied only with the inclusion
;	0014	! of the above copyright notice. This software, or any
;	0015	! other copies thereof, may not be provided or otherwise made
;	0016	! available to any other person except for use on such system
;	0017	! and to one who agrees to these license terms. Title to and
;	0018	! ownership of the software shall at all times remain in DEC.
;	0019	!
;	0020	! The information in this software is subject to change without
;	0021	! notice and should not be construed as a commitment by Digital
;	0022	! Equipment Corporation.
;	0023	!
;	0024	! DEC assumes no responsibility for the use or reliability of
;	0025	! its software on equipment which is not supplied by DEC.
;	0026	!
;	0027	! FACILITY:	PATCH
;	0028	!
;	0029	!++
;	0030	! FUNCTIONAL DESCRIPTION:
;	0031	!
;	0032	!	Parser for MARS PATCH syntax
;	0033	!
;	0034	! Version:	X01.22
;	0035	!
;	0036	! History:
;	0037	!	Author:
;	0038	!		Carol Peters, 03 Jul 1976: Version 01
;	0039	!
;	0040	!	Modified by:
;	0041	!		Kathleen Morse, 13-Oct-77: Version X01.00
;	0042	!
;	0043	! Revision history:
;	0044	!
;	0045	!  NO	DATE		PROGRAMMER		PURPOSE
;	0046	!  --	----		----------		-------
;	0047	!
;	0048	!  00	18-OCT-77	K.D. MORSE		ADAPT VERSION 31 TO PATCH
;	0049	!  01	29-DEC-77	K. D. MORSE		ADD SET/SHOW MODULE/SCOPE CMDS. (44)
;	0050	!  02	4-JAN-78	K.D. MORSE		NO CHANGES FOR VERS 32-41.
;	0051	!						IN MACRO GET_QUOTED_STG, DON'T
;	0052	!						ACCEPT INPUT UNLESS EITHER
;	0053	!						INSTRUCTION MODE OR ASCII MODE
;	0054	!						IS SET. (42)
;	0055	!						NO CHANGES FOR 43,45.

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 1-1
; Digital Equipment Corporation
;
;	0056	!						DON'T ALLOW DIVISION BY ZERO (46).
;	0057	!						NO CHANGES FOR 47.
;	0058	!						CHANGE PARSE STACK OFFSETS TO
;	0059	!						NAMES DEFINED IN PATMSG.REQ. (48)
;	0060	!						PLACE TYPE ON ARGUMENT LIST AS
;	0061	!						WELL AS EXPRESSION. (48)
;	0062	!						CHANGE EACH ELEMENT OF THE PARSE
;	0063	!						STACKS TO BE PAT$K_STELM_SIZ (48).
;	0064	!						FOLLOW A FINAL CALL TO BUILD_PATH
;	0065	!						WITH PLACING INTERGER TYPE ON
;	0066	!						SEMAN2. (49)
;	0067	!  03	24-JAN-78	K.D. MORSE		NO CHANGES FOR VERS 50.
;	0068	!  04	27-JAN-78	K.D. MORSE		ADD MACRO LINK_EXIT FOR THE
;	0069	!						REPLACE AND VERIFY COMMANDS.
;	0070	!  05	28-FEB-78	K.D. MORSE		CHANGE MACRO GET_QUOTED_STG
;	0071	!						TO ACCEPT ' AND " .  (51)
;	0072	!  06	01-MAR-78	K.D. MORSE		NO CHANGES FOR 52.
;	0073	!  07	24-MAR-78	K.D. MORSE		NO CHANGES FOR 53-54.
;	0074	!  08	07-APR-78	K.D. MORSE		INIT THE DELIMITER IN GET_QUOTED_STG (55).
;	0075	!						BUILD_PATH IS NOT THE FINAL WORD
;	0076	!						IN MACRO REDUCE_PATHNAME. (56)
;	0077	!  09	14-APR-78	K.D. MORSE		NO CHANGES FOR VERS. 57-59.
;	0078	!  10	18-APR-78	K.D. MORSE		ADD ACTION ROUTINES TO SET BIT
;	0079	!						LITERAL_BIT.
;	0080	!  11	18-APR-78	K.D. MORSE		ADD MACRO GET_FILE_SPEC FOR THE
;	0081	!						CREATE COMMAND.
;	0082	!  12	25-APR-78	K.D. MORSE		CONVERT TO NATIVE COMPILER.
;	0083	!  13	09-MAY-78	K.D. MORSE		ADD CHECK IN LINK_ARG_PAIR AND
;	0084	!						LINK_ARG TO CHECK THAT ASCII OR
;	0085	!						INSTRUCTION MODES ARE NOT SET.
;	0086	!						ADD LINK_VAL TO AVOID THE CHECK.
;	0087	!  14	16-MAY-78	K.D. MORSE		CHANGED CALLS TO PAT$SET_OVERS
;	0088	!						TO PASS VALUE INSTEAD OF STACK
;	0089	!						POINTER. (60)
;	0090	!						NO CHANGES FOR VERS 61.
;	0091	!						REMOVED (.STACK_PTR) FROM MACRO
;	0092	!						CALL TO "SET_DEC_OVERS". (62)
;	0093	!  15	18-MAY-78	K.D. MORSE		SET OVERRIDE_MODE IN "SET_DEC_OVERS"
;	0094	!						BEFORE SETTING DECIMAL_TOKEN. (63)
;	0095	!  16	18-MAY-78	K.D. MORSE		NO CHANGES FOR VERS 64.
;	0096	!  17	18-MAY-78	K.D. MORSE		NO CHANGES FOR VERS 65.
;	0097	!  18	18-MAY-78	K.D. MORSE		NO CHANGES FOR VERS 66.
;	0098	!  19	13-JUN-78	K.D. MORSE		ADD FAO COUNTS TO SIGNALS.
;	0099	!  20	16-JUN-78	K.D. MORSE		ALWAYS CALL PAT$SET_COMQUAL
;	0100	!						FOR CORRECT APPENDED PATCH
;	0101	!						COMMAND TEXT QUALIFIERS.
;	0102	!  21	21-JUN-78	K. D. MORSE		ADD PAT$_SYNTAX ERROR MESSAGE
;	0103	!						TO THE PAT$_INVCMD MESSAGE. (67)
;	0104	!  22	28-JUN-78	K.D. MORSE		NO CHANGES FOR VERS 68-72.
;	0105	!						ERROR HANDLING FOR DIGIT_TOKEN (73).
;	0106	!						CHANGE CALLING SEQUENCE FOR
;	0107	!						PAT$FIND_MODULE. (74)
;	0108	!						NO CHANGES FOR VERS 75-81.
;	0109	!
;	0110	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 1-2
; Digital Equipment Corporation
;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 2
; Digital Equipment Corporation
;
;	0111	
;	0112	FORWARD ROUTINE
;	0113		MAR_REDUCTN,						! MARS action routines
;	0114		PAT$PARS_A_LINE: NOVALUE;				! Global routine to parse an input line
;	0115	
;	0116	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0117	REQUIRE 'SRC$:PREFIX.REQ';
;	0300	REQUIRE 'SRC$:PATPRE.REQ';
;	0440	REQUIRE 'SRC$:VXSMAC.REQ';
;	0480	REQUIRE 'LIB$:PATMSG.REQ';
;	0638	REQUIRE 'SRC$:PATRST.REQ';
;	1696	REQUIRE 'SRC$:PATPCT.REQ';
;	1712	REQUIRE 'SRC$:PATGEN.REQ';
;	1891	REQUIRE 'SRC$:PATTER.REQ';
;	1971	REQUIRE 'SRC$:PATTOK.REQ';
;	2017	REQUIRE 'SRC$:BSTRUC.REQ';
;	2068	REQUIRE 'SRC$:LISTEL.REQ';
;	2087	REQUIRE 'SRC$:VXPALT.REQ';
;	2115	REQUIRE 'SRC$:SYSSER.REQ';
;      R2123	SWITCHES LIST (SOURCE);
;      R2124	
;      R2125	EXTERNAL ROUTINE
;      R2126		PAT$fao_out;		! formats a line and outputs to the terminal
;      R2127	
;      R2128	SWITCHES LIST (NOSOURCE);
;	2173	REQUIRE 'SRC$:PATACT.REQ';					! Case labels for MARS syntax
;	2240	REQUIRE 'SRC$:PATTAB.REQ';					! Parse tables for MARS
;	4037	
;	4038	EXTERNAL ROUTINE
;	4039		PAT$ADD_ARG,						! Adds arguments to the command argument list
;	4040		PAT$BUILD_PATH,						! Routine to build a path name
;	4041		PAT$FIND_MODULE,					! Finds the RST address of a module
;	4042		PAT$FREEZ,						! Allocate a block of free storage
;	4043		PAT$GET_A_TOKEN,					! Get a single token from input buffer
;	4044		PAT$INIT_MODES,						! Initializes input and output modes
;	4045		PAT$PERFORM_CMD,					! Executes a complete command
;	4046		PAT$PROMPT_READ,					! Prompts and reads a command line
;	4047		PAT$SET_COMQUAL,					! Sets command qualifier indicators
;	4048		PAT$SET_MOD_LVL,					! Resets modes to a certain level
;	4049		PAT$SET_OVERS,						! Sets override or local modes
;	4050		PAT$TRANS_NAME;						! Translates a name into a binary value
;	4051	
;	4052	EXTERNAL
;	4053		PAT$GL_FLAGS,						! CLI flags
;	4054		PAT$GB_MOD_PTR : REF VECTOR [, BYTE],			! Current mode
;	4055		PAT$GL_CONTEXT: BITVECTOR,				! Context word
;	4056		PAT$GL_TAIL_LST,					! Tail of linked argument list
;	4057		PAT$GL_SEMAN1: VECTOR,					! Semantic stack for tokens
;	4058		PAT$GL_SEMAN2: VECTOR;					! Semantic stack for string pointers
;	4059	
;	4060	!
;	4061	! OWN STORAGE
;	4062	!
;	4063	OWN
;	4064		QUOTE_INDIC;						! Indicator if parameter was quoted string

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 2-1
; Digital Equipment Corporation
;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 3
; Digital Equipment Corporation
;
;	4065	!++
;	4066	! The following macros are simple actions to perform with reductions to
;	4067	! the grammar.  They correspond to the action routines in PATACT.REQ.  Instead
;	4068	! of calling global routines, these macros are simply expanded in line.
;	4069	!--
;	4070	MACRO
;	4071	
;	4072	!++
;	4073	! The first set of macros do arithmetic.
;	4074	!--
;	4075	
;	4076		!++
;	4077		! The ADDITION macro adds the value at the top of the stack
;	4078		! to the value at the third position in the stack and places
;	4079		! the result at the top of the stack.
;	4080		!--
;	4081		ADDITION (SEMSP) =
;     M 4082			PAT$GL_SEMAN1 [SEMSP] = .PAT$GL_SEMAN1 [SEMSP] + .PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_TWO]%,
;	4083	
;	4084		!++
;	4085		! The DIVISION macro divides the value at the top of the stack
;	4086		! by the value at the third position in the stack and places
;	4087		! the result at the top of the stack.
;	4088		!--
;	4089		DIVISION (SEMSP) =
;     M 4090			BEGIN
;     M 4091			IF .PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_TWO] EQL 0
;     M 4092			THEN SIGNAL(PAT$_DIVZERO+MSG$K_WARN);
;     M 4093			PAT$GL_SEMAN1 [SEMSP] = .PAT$GL_SEMAN1 [SEMSP] / .PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_TWO];
;     M 4094			END%,
;	4095	
;	4096	! ******** I BET THIS WILL NOT WORK DUE TO MAPPED ADDRESSES. *******
;	4097		!++
;	4098		! The INDIRECTION macro considers the value at the second position
;	4099		! in the stack to be an address. It takes the contents of that
;	4100		! address and places it on the top of the stack.
;	4101		!--
;	4102		INDIRECTION (SEMSP) =
;     M 4103			PAT$GL_SEMAN1 [SEMSP] = ..PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_ONE]%,
;	4104	
;	4105		!++
;	4106		! The MULTIPLICATION macro multiplies the value at the top of
;	4107		! the stack to the value at the third position on the stack
;	4108		! and places the result at the top of the stack.
;	4109		!--
;	4110		MULTIPLICATION (SEMSP) =
;     M 4111			PAT$GL_SEMAN1 [SEMSP] = .PAT$GL_SEMAN1 [SEMSP] * .PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_TWO]%,
;	4112	
;	4113		!++
;	4114		! The NEGATION macro negates the value found in the second
;	4115		! position on the stack and places the result on the top of
;	4116		! the stack.
;	4117		!--
;	4118		NEGATION (SEMSP) =
;     M 4119			PAT$GL_SEMAN1 [SEMSP] = - .PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_ONE]%,

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 3-1
; Digital Equipment Corporation
;
;	4120	
;	4121		!++
;	4122		! The POSITIVE macro takes the value found in the second
;	4123		! position on the stack and places it on the top of the stack.
;	4124		!--
;	4125		POSITIVE (SEMSP) =
;     M 4126			PAT$GL_SEMAN1 [SEMSP] = .PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_ONE]%,
;	4127	
;	4128		!++
;	4129		! The REMOVE_PARENS macro takes the value found in the second
;	4130		! position on the stack and places it on the top of the stack.
;	4131		!--
;	4132		REMOVE_PARENS (SEMSP) =
;     M 4133			PAT$GL_SEMAN1 [SEMSP] = .PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_ONE]%,
;	4134	
;	4135		!++
;	4136		! The ARITH_SHIFT macro shifts the value at the top of the
;	4137		! stack by the value found in the third position on the stack
;	4138		! and places the result on the top of the stack.
;	4139		!--
;	4140		ARITH_SHIFT (SEMSP) =
;     M 4141			PAT$GL_SEMAN1 [SEMSP] = .PAT$GL_SEMAN1 [SEMSP] ^ .PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_TWO]%,
;	4142	
;	4143		!++
;	4144		! The SUBTRACTION macro subtracts the value found in the third
;	4145		! position on the stack from the value at the top of the stack
;	4146		! and places the result on the top of the stack.
;	4147		!--
;	4148		SUBTRACTION (SEMSP) =
;     M 4149			PAT$GL_SEMAN1 [SEMSP] = .PAT$GL_SEMAN1 [SEMSP] - .PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_TWO]%,
;	4150	
;	4151		!++
;	4152		! The COMPLEMENT macro applies the NOT operator to the value
;	4153		! found in the second position on the stack and places the
;	4154		! result on the top of the stack.
;	4155		!--
;	4156		COMPLEMENT (SEMSP) =
;     M 4157			PAT$GL_SEMAN1 [SEMSP] = NOT .PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_ONE]%,
;	4158	
;	4159		!++
;	4160		! The LOGICAL_OR macro applies the OR operator to the values found
;	4161		! in the first and third position on the stack and places the
;	4162		! result on the top of the stack.
;	4163		!--
;	4164		LOGICAL_OR (SEMSP) =
;     M 4165			PAT$GL_SEMAN1 [SEMSP] = .PAT$GL_SEMAN1 [SEMSP] OR
;     M 4166						 .PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_TWO]%,
;	4167	
;	4168		!++
;	4169		! The LOGICAL_AND macro applies the AND operator to the values
;	4170		! found in the first and third position on the stack and places
;	4171		! the result on the top of the stack.
;	4172		!--
;	4173		LOGICAL_AND (SEMSP) =
;     M 4174			PAT$GL_SEMAN1 [SEMSP] = .PAT$GL_SEMAN1 [SEMSP] AND

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 3-2
; Digital Equipment Corporation
;
;     M 4175						 .PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_TWO]%,
;	4176	
;	4177		!++
;	4178		! The EXTRACT_BITS macro extracts a bit field from the value
;	4179		! on the top of the stack and places that bit field on the
;	4180		! top of the stack. The starting bit number of the bit field
;	4181		! is in the fifth position on the stack. The end position
;	4182		! of the bit field is in the third position. After the value
;	4183		! is extracted, the mode is reset to override level.
;	4184		!--
;	4185		EXTRACT_BITS (SEMSP) =
;     M 4186			BEGIN
;     M 4187	
;     M 4188			LOCAL
;     M 4189				VALUE : BLOCK [4, BYTE];
;     M 4190	
;     M 4191			VALUE = .PAT$GL_SEMAN1 [SEMSP];
;     M 4192			IF (.PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_TWO] GTR 31) OR 
;     M 4193			   (.PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_FOUR] GTR 31) OR
;     M 4194			   (.PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_FOUR] GTR 
;     M 4195					.PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_TWO])
;     M 4196			THEN
;     M 4197				SIGNAL (PAT$_EXTBIT+MSG$K_WARN);
;     M 4198			PAT$GL_SEMAN1 [SEMSP] = .VALUE [0, .PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_FOUR],
;     M 4199				.PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_TWO] -
;     M 4200					 .PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_FOUR] + 1, 0];
;     M 4201			PAT$INIT_MODES (LOCAL_MODE, OVERRIDE_MODE);
;     M 4202			PAT$SET_MOD_LVL (OVERRIDE_MODE);
;     M 4203			END%,

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 4
; Digital Equipment Corporation
;
;	4204	!++
;	4205	! The next few macros put items into linked lists.
;	4206	!--
;	4207	
;	4208		!++
;	4209		! The LINK_ARG_PAIR macro calls the routine PAT$ADD_ARG to place
;	4210		! the value at the top of the stack as a new link in the command
;	4211		! argument list. If the new link is created successfully, then
;	4212		! the value found at the third position on the stack is placed
;	4213		! in the new link as well, at the position called LINK_ELEM_EXP2.
;	4214		!--
;	4215		LINK_ARG_PAIR (SEMSP) =
;     M 4216			BEGIN
;     M 4217			IF (.QUOTE_INDIC)
;     M 4218			THEN
;     M 4219				SIGNAL(PAT$_INVQUO+MSG$K_WARN);
;     M 4220			PAT$ADD_ARG (.PAT$GL_SEMAN1 [SEMSP]);
;     M 4221			LIST_ELEM_EXP2 (.PAT$GL_TAIL_LST) = .PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_TWO];
;     M 4222			END%,
;	4223	
;	4224		!++
;	4225		! The LINK_ARG macro calls the routine PAT$ADD_ARG to create
;	4226		! a new link in the command argument list, and to insert in that
;	4227		! link the value found at the top of the stack.
;	4228		!--
;	4229		LINK_ARG (SEMSP) =
;     M 4230			BEGIN
;     M 4231			IF (.PAT$GB_MOD_PTR[MODE_INSTRUC] OR .PAT$GB_MOD_PTR[MODE_ASCII]) AND
;     M 4232			   (NOT .QUOTE_INDIC)
;     M 4233			THEN
;     M 4234				SIGNAL(PAT$_NOTQUO+MSG$K_WARN);
;     M 4235			QUOTE_INDIC = FALSE;
;     M 4236			PAT$ADD_ARG (.PAT$GL_SEMAN1 [SEMSP]);
;     M 4237			END%,
;	4238	
;	4239		!++
;	4240		! The LINK_NUM macro calls the routine PAT$ADD_ARG to create
;	4241		! a new link in the command argument list, and to insert in that
;	4242		! link the location found at the top of the stack.  This macro expects
;	4243		! an address and so no quoted string should have been given.
;	4244		!--
;	4245		LINK_NUM (SEMSP) =
;     M 4246			BEGIN
;     M 4247			IF (.QUOTE_INDIC)
;     M 4248			THEN
;     M 4249				SIGNAL(PAT$_INVQUO+MSG$K_WARN);
;     M 4250			PAT$ADD_ARG (.PAT$GL_SEMAN1 [SEMSP]);
;     M 4251			END%,
;	4252	
;	4253		!++
;	4254		! The LINK_EXP_NAME macro calls the routine PAT$ADD_ARG to create
;	4255		! a new link in the command argument list and to place in that
;	4256		! link the address value found at the top of the second parse
;	4257		! stack. This address is the address of a string descriptor.
;	4258		! If the new link is created successfully, the value found at

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 4-1
; Digital Equipment Corporation
;
;	4259		! the third position on the first parse stack is placed in the
;	4260		! link in the position called LIST_ELEM_EXP2.
;	4261		!--
;	4262		LINK_EXP_NAME (SEMSP) =
;     M 4263			BEGIN
;     M 4264			IF (.PAT$GB_MOD_PTR[MODE_INSTRUC] OR .PAT$GB_MOD_PTR[MODE_ASCII]) AND
;     M 4265			   (NOT .QUOTE_INDIC)
;     M 4266			THEN
;     M 4267				SIGNAL(PAT$_NOTQUO+MSG$K_WARN);
;     M 4268			QUOTE_INDIC = FALSE;
;     M 4269			PAT$ADD_ARG (.PAT$GL_SEMAN2 [SEMSP]);
;     M 4270			LIST_ELEM_EXP2 (.PAT$GL_TAIL_LST) = .PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_TWO];
;     M 4271			END%,
;	4272	
;	4273	
;	4274		!++
;	4275		! The LINK_NAME macro calls the routine PAT$ADD_ARG to create
;	4276		! a new link in the command argument list, and to insert in that
;	4277		! link the string descriptor address found at the top of the stack.
;	4278		!--
;	4279		LINK_NAME (SEMSP) =
;     M 4280			PAT$ADD_ARG (.PAT$GL_SEMAN2 [SEMSP])%,
;	4281	
;	4282	
;	4283		!++
;	4284		! The LINK_EXIT macro puts an EXIT_TOKEN into the second expression
;	4285		! location of the last argument on the argument list.  The location
;	4286		! of this argument is known via PAT$GL_TAIL_LST, which is updated
;	4287		! whenever any argument is added.  Note that LINK_EXIT may only be
;	4288		! called for arguments that are not ranges.
;	4289		!--
;	4290		LINK_EXIT =
;     M 4291			LIST_ELEM_EXP2(.PAT$GL_TAIL_LST) = EXIT_TOKEN%,
;	4292	
;	4293	!++
;	4294	! The next macro does special translation of a module name.
;	4295	!--
;	4296	
;	4297		!++
;	4298		! The ADD_MODULE macro translates the ascii name of a module into
;	4299		! the address of that module's record in the RST, and puts that
;	4300		! address onto the top of the parse stack.
;	4301		!--
;	4302		ADD_MODULE (SEMSP) =
;     M 4303			PAT$GL_SEMAN1 [SEMSP] = PAT$FIND_MODULE (LEX_STG_DESC, TRUE)%,
;	4304	
;	4305		!++
;	4306		! The SAVE_NAME macro allocates an area of free storage to hold
;	4307		! the name of a symbol and a string descriptor to that symbol.
;	4308		! This macro is called when a name occurs in a DEFINE command,
;	4309		! and the name stored in free storage is used by PAT$DEFINE_SYM.
;	4310		! The storage is freed by PAT$PERFORM_CMD.
;	4311		!
;	4312		! All this string descriptor baggage seems rather cumbersome
;	4313		! here. Maybe at some later point, the use of string descriptors

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 4-2
; Digital Equipment Corporation
;
;	4314		! in this case should be changed to counted strings.
;	4315		!--
;	4316		SAVE_NAME (SEMSP) =
;     M 4317			BEGIN
;     M 4318	
;     M 4319			LOCAL
;     M 4320				POINTER : REF VECTOR;
;     M 4321			POINTER = PAT$FREEZ (((.LEX_STG_DESC [DSC$W_LENGTH] + 3) / A_LONGWORD) + 2);
;     M 4322			CH$MOVE (.LEX_STG_DESC [DSC$W_LENGTH], .LEX_STG_DESC [DSC$A_POINTER],
;     M 4323					POINTER [2]);
;     M 4324			POINTER [0] = .LEX_STG_DESC [DSC$W_LENGTH];
;     M 4325			POINTER [1] = POINTER [2];
;     M 4326			PAT$GL_SEMAN2 [SEMSP] = .POINTER;
;     M 4327			END%,
;	4328	
;	4329	!++
;	4330	! The next set of macros manipulates mode settings.
;	4331	!--
;	4332	
;	4333		!++
;	4334		! The SET_OVERR_MODE macro calls the routine PAT$SET_OVERS to
;	4335		! set the mode pointer to OVERRIDE level, and to set the mode
;	4336		! according to the token found at the top of the stack.
;	4337		!--
;	4338		SET_OVERR_MODE (SEMSP) =
;     M 4339			BEGIN
;     M 4340			PAT$SET_OVERS (OVERRIDE_MODE, .PAT$GL_SEMAN1[SEMSP]);
;     M 4341			PAT$SET_COMQUAL(SEMSP);
;     M 4342			END%,
;	4343	
;	4344		!++
;	4345		! The SET_DEC_OVERS macro calls the routine PAT$SET_OVERS to
;	4346		! set the mode pointer to LOCAL level, and to set the mode
;	4347		! to decimal.
;	4348		!--
;	4349		SET_DEC_OVERS =
;     M 4350			BEGIN
;     M 4351			PAT$SET_MOD_LVL(OVERRIDE_MODE);
;     M 4352			PAT$SET_OVERS (LOCAL_MODE, DECIMAL_TOKEN);
;     M 4353			END%,
;	4354	
;	4355		!++
;	4356		! The SET_MODE_BIT macro turns on the default bit in the
;	4357		! PATCH context word.
;	4358		!--
;	4359		SET_MODE_BIT =
;     M 4360			PAT$GL_CONTEXT [MODE_BIT] = TRUE%,
;	4361	
;	4362	!++
;	4363	! The next macro is GET_QUOTED_STG. Its major failing is
;	4364	! that it writes into the input stream. This could be solved by
;	4365	! calling it with another argument, the string descriptor for a
;	4366	! writable string. For the nonce, it writes into an otherwise pure
;	4367	! stream.
;	4368	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 4-3
; Digital Equipment Corporation
;
;	4369	
;	4370	!++
;	4371	! The next macro collects a string that is enclosed in quotes.
;	4372	!--
;	4373	
;	4374		!++
;	4375		! The GET_QUOTED_STG macro reads characters from the input string.  It
;	4376		! picks up the delimiting character (' or ") and reads until the next
;	4377		! occurance of that character.  If none is found, the invalid command
;	4378		! message is output, and end of line processing is done. Otherwise, the
;	4379		! length of the string is placed in the position of the opening quote.
;	4380		! A zero is placed in the position of the closing quote for end-of-line.
;	4381		! If the current mode is instruction mode, the address of the string is
;	4382		! placed on the top of the first parse stack.  Otherwise, the string
;	4383		! must be ASCII, so it is reduced to four characters or less and placed
;	4384		! on the top of stack. The parse string descriptor is updated to address
;	4385		! the character after the closing quote.
;	4386		!--
;	4387		GET_QUOTED_STG (SEMSP) =
;     M 4388			BEGIN
;     M 4389	
;     M 4390			MAP
;     M 4391				PARSE_STG_DESC : REF BLOCK [, BYTE];
;     M 4392	
;     M 4393			LOCAL
;     M 4394				CHAR,
;     M 4395				COUNT,
;     M 4396				DELIMITER,
;     M 4397				INPUT_PTR : REF VECTOR[,BYTE],
;     M 4398				TEMP_PTR;
;     M 4399	
;     M 4400			IF (NOT .PAT$GB_MOD_PTR[MODE_INSTRUC]) AND
;     M 4401			   (NOT .PAT$GB_MOD_PTR[MODE_ASCII])
;     M 4402			THEN
;     M 4403				SIGNAL(PAT$_INVQUO+MSG$K_WARN);
;     M 4404			QUOTE_INDIC = TRUE;
;     M 4405			INPUT_PTR = CH$PLUS (.PARSE_STG_DESC [DSC$A_POINTER], -1); ! Point to delimiter
;     M 4406			TEMP_PTR = CH$PTR(.INPUT_PTR, 0);
;     M 4407			DELIMITER = CH$RCHAR_A(INPUT_PTR);
;     M 4408			COUNT = 0;
;     M 4409			REPEAT
;     M 4410				BEGIN
;     M 4411				CHAR = CH$RCHAR_A (INPUT_PTR);
;     M 4412				IF (.CHAR EQL 0)			! Line always ends with zero
;     M 4413				THEN
;     M 4414					BEGIN
;     M 4415					!++
;     M 4416					! This message has been made informational
;     M 4417					! instead of warning, to allow user typo's
;     M 4418					! of eliminating the closing quote on symbolic
;     M 4419					! instructions.  This will eliminate annoyance
;     M 4420					! of aborting the command after multiple input lines.
;     M 4421					!--
;     M 4422					SIGNAL (PAT$_MISSQUO+MSG$K_INFO);
;     M 4423					CHAR = .DELIMITER;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 4-4
; Digital Equipment Corporation
;
;     M 4424					END;
;     M 4425				IF (.CHAR EQL .DELIMITER)
;     M 4426				THEN
;     M 4427					BEGIN
;     M 4428					!++
;     M 4429					! Found a closing quote. Replace the opening
;     M 4430					! quote with the length of the quoted string.
;     M 4431					! Replace th closing quote with a zero.  This
;     M 4432					! is for forward referencing inside symbolic
;     M 4433					! instructions.
;     M 4434					!--
;     M 4435					CH$WCHAR (.COUNT, .TEMP_PTR);
;     M 4436					INPUT_PTR[-1] = 0;
;     M 4437					EXITLOOP
;     M 4438					END
;     M 4439				ELSE
;     M 4440					BEGIN
;     M 4441					COUNT = .COUNT + 1;
;     M 4442					END;
;     M 4443				END;
;     M 4444	
;     M 4445			!++
;     M 4446			! Quoted string found. Put the QTD_STG_TOKEN on the
;     M 4447			! the first parse stack. Put the address of the string on
;     M 4448			! the first parse stack.
;     M 4449			!--
;     M 4450			IF .PAT$GB_MOD_PTR [MODE_INSTRUC]
;     M 4451			THEN PAT$GL_SEMAN1 [SEMSP] = .TEMP_PTR
;     M 4452			ELSE
;     M 4453				BEGIN
;     M 4454	
;     M 4455				MAP
;     M 4456					TEMP_PTR : REF VECTOR [, BYTE];
;     M 4457	
;     M 4458				LOCAL
;     M 4459					VALUE : VECTOR [A_LONGWORD, BYTE];
;     M 4460	
;     M 4461				VALUE = 0;
;     M 4462				INCR INDEX FROM 0 TO
;     M 4463					(IF .TEMP_PTR [0] LEQ 4
;     M 4464					 THEN .TEMP_PTR [0] - 1
;     M 4465					 ELSE 3)
;     M 4466				DO VALUE [.INDEX] = .TEMP_PTR [.INDEX + 1];
;     M 4467				IF .TEMP_PTR [0] GTR .PAT$GB_MOD_PTR [MODE_LENGTH]
;     M 4468				THEN
;     M 4469					 SIGNAL (PAT$_STGTRUNC);
;     M 4470				PAT$GL_SEMAN1 [SEMSP] = .VALUE;
;     M 4471				END;
;     M 4472	
;     M 4473			!++
;     M 4474			! Now update the parse string descriptor so that the
;     M 4475			! address of the buffer is the address of the character
;     M 4476			! after the closing quote.
;     M 4477			!--
;     M 4478			PARSE_STG_DESC [DSC$A_POINTER] = CH$PTR (.INPUT_PTR, 0);

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 4-5
; Digital Equipment Corporation
;
;     M 4479			PARSE_STG_DESC [DSC$W_LENGTH] = .PARSE_STG_DESC [DSC$W_LENGTH] - (.COUNT + 1);
;     M 4480			END%,
;	4481	

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 5
; Digital Equipment Corporation
;
;	4482	!++
;	4483	! This macro collects a file specification.
;	4484	!--
;	4485	
;	4486		!++
;	4487		! The GET_FILE_SPEC macro reads from the input string starting
;	4488		! at the character after the keyword CREATE until a character is
;	4489		! found that is not a space, tab, or a zero. If such a character
;	4490		! is found before the end of line is reached, then the position
;	4491		! of the character before is noted for storage of the length of
;	4492		! the file spec string. Then the string is read until a zero 
;	4493		! or carriage return character is encountered. The length
;	4494		! of the string is stored in the previously saved position.
;	4495		! Finally, the address of the file specification is placed in 
;	4496		! a new link of the command argument list by a call to the
;	4497		! routine PAT$ADD_ARG. This address is the address of a counted
;	4498		! string.
;	4499		!--
;	4500	GET_FILE_SPEC =
;     M 4501	
;     M 4502			BEGIN
;     M 4503	
;     M 4504			MAP
;     M 4505				PARSE_STG_DESC : REF BLOCK [, BYTE];
;     M 4506	
;     M 4507			LOCAL 
;     M 4508				CHAR,
;     M 4509				COUNT,
;     M 4510				INPUT_PTR,
;     M 4511				TEMP_PTR;
;     M 4512	
;     M 4513			INPUT_PTR = CH$PTR (.PARSE_STG_DESC [DSC$A_POINTER]);
;     M 4514			CHAR = CH$RCHAR (.INPUT_PTR);
;     M 4515	
;     M 4516	
;     M 4517			!++
;     M 4518			! This loop skips spaces and tabs that delimit the CREATE
;     M 4519			! verb and precede the file specification. At the end of
;     M 4520			! this loop, the character pointer INPUT_PTR is pointing
;     M 4521			! to the first character of the file specification.
;     M 4522			!--
;     M 4523			COUNT = 0;
;     M 4524			REPEAT
;     M 4525				BEGIN
;     M 4526	
;     M 4527				!++
;     M 4528				! The character we recognize as the beginning
;     M 4529				! of the file specification is the first
;     M 4530				! character after the delimiter of the CREATE verb.
;     M 4531				!--
;     M 4532				IF .CHAR NEQ ASC_SPACE AND .CHAR NEQ ASC_TAB
;     M 4533				THEN EXITLOOP
;     M 4534				ELSE
;     M 4535					BEGIN
;     M 4536					COUNT = .COUNT + 1;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 5-1
; Digital Equipment Corporation
;
;     M 4537					CHAR = CH$A_RCHAR (INPUT_PTR);
;     M 4538					END;
;     M 4539				END;
;     M 4540	
;     M 4541			!++
;     M 4542			! Check if there was no file name specified.
;     M 4543			! If there was no file name, then PATCH wants to return
;     M 4544			! successfully from this action routine.  The only reason
;     M 4545			! this macro can contain a "RETURN TRUE" statement, is that
;     M 4546			! MAR_REDUCTN merely returns after executing it.
;     M 4547			!--
;     M 4548			IF (.CHAR EQL 0)
;     M 4549			THEN
;     M 4550				EXITLOOP(TRUE);
;     M 4551	
;     M 4552			!++
;     M 4553			! The beginning of the file specification has been
;     M 4554			! found. If the delimiter was non-null, then
;     M 4555			! collect the rest of the string.
;     M 4556			!--
;     M 4557			IF (.COUNT LEQ 0)
;     M 4558			THEN
;     M 4559				BEGIN
;     M 4560				IF (.TOKEN EQL DIGIT_STR_TOKEN) OR (.TOKEN EQL EOL_TOKEN)
;     M 4561				THEN
;     M 4562					SIGNAL (PAT$_INVCMD)
;     M 4563				ELSE
;     M 4564					BEGIN
;     M 4565					SIGNAL(PAT$_SYNTAX+MSG$K_WARN, 1, LEX_STG_DESC);
;     M 4566					RETURN;
;     M 4567					END
;     M 4568				END;
;     M 4569	
;     M 4570			PARSE_STG_DESC [DSC$W_LENGTH] = .PARSE_STG_DESC [DSC$W_LENGTH] - .COUNT;
;     M 4571			TEMP_PTR = CH$PLUS (.INPUT_PTR, -1);
;     M 4572			COUNT = 0;
;     M 4573			REPEAT
;     M 4574				BEGIN
;     M 4575				IF .CHAR EQL 0 
;     M 4576	!				OR .CHAR EQL CARRIAGE_RET		!***line always ends in zero***
;     M 4577				THEN
;     M 4578					BEGIN
;     M 4579	
;     M 4580					!++
;     M 4581					! Found the end of the file specification.
;     M 4582					! Exit this loop after setting the count
;     M 4583					! byte of this counted string.
;     M 4584					!--
;     M 4585					IF (.COUNT LEQ 0)
;     M 4586					THEN
;     M 4587						BEGIN
;     M 4588	
;     M 4589						SIGNAL (PAT$_INVCMD);
;     M 4590						END;
;     M 4591					CH$wCHAR (.COUNT, .TEMP_PTR);

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 5-2
; Digital Equipment Corporation
;
;     M 4592					EXITLOOP
;     M 4593					END
;     M 4594				ELSE
;     M 4595					BEGIN
;     M 4596					COUNT = .COUNT + 1;
;     M 4597					CHAR = CH$A_RCHAR (INPUT_PTR);
;     M 4598					END;
;     M 4599				END;
;     M 4600			!++
;     M 4601			! Now put the address of the file specification into
;     M 4602			! a new link in the command argument list.
;     M 4603			! Also, increment the address of the parse string in
;     M 4604			! the parse string descriptor to address the delimiting
;     M 4605			! carriage return or null byte.
;     M 4606			!--
;     M 4607			PAT$ADD_ARG (.TEMP_PTR);
;     M 4608			PARSE_STG_DESC [DSC$A_POINTER] = .INPUT_PTR;
;     M 4609			PARSE_STG_DESC [DSC$W_LENGTH] = .PARSE_STG_DESC [DSC$W_LENGTH] - .COUNT;
;     M 4610			END%,
;	4611	
;	4612	!++
;	4613	! The macros below manipulate names of data specified in commands.
;	4614	!--
;	4615	
;	4616		!++
;	4617		! The TRANSLATE_NAME macro calls the routine PAT$TRANS_NAME to
;	4618		! translate a token into a binary value. If the routine fails in
;	4619		! the translation, a signal and unwind occurs.
;	4620		!--
;	4621		TRANSLATE_NAME (SEMSP) =
;     M 4622			PAT$TRANS_NAME (SEMSP, LEX_STG_DESC)%,
;	4623	
;	4624	!++
;	4625	! The next macro is called when a complete command has been collected.
;	4626	!--
;	4627	
;	4628		!++
;	4629		! The EXECUTE_CMD macro calls PAT$PERFORM_CMD and returns
;	4630		! from PARSE_A_LINE if that routine returns a false value.
;	4631		!--
;	4632		EXECUTE_CMD (SEMSP) =
;     M 4633			IF NOT PAT$PERFORM_CMD (SEMSP)
;     M 4634			THEN
;     M 4635				RETURN%,
;	4636	
;	4637	
;	4638	!++
;	4639	! The next macros manipulate scope and pathnames.
;	4640	!--
;	4641	
;	4642		!++
;	4643		! The REDUCE_PATHNAME macro calls PAT$BUILD_PATH to convert a
;	4644		! pathname into an equivalent value. If the conversion fails,
;	4645		! then the symbol does not exist, a message is produced, and an
;	4646		! UNWIND is done.

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 5-3
; Digital Equipment Corporation
;
;	4647		!--
;	4648		REDUCE_PATHNAME (SEMSP) =
;     M 4649			PAT$BUILD_PATH (0, PAT$GL_SEMAN1 [SEMSP], TRUE)%,
;	4650	
;	4651	
;	4652		!++
;	4653		! The macro SET_SCOPE_BIT turns on the appropriate context
;	4654		! bit so that a path name will be saved.
;	4655		!--
;	4656		SET_SCOPE_BIT =
;     M 4657			PAT$GL_CONTEXT [SCOPE_BIT] = TRUE%,
;	4658	
;	4659	!++
;	4660	! The next macro sets the context bit indicating the "SET PATCH_AREA" command.
;	4661	!--
;	4662	
;	4663		SET_PATAREA_BIT =
;     M 4664			PAT$GL_CONTEXT [PAT_AREA_BIT] = TRUE%,
;	4665	
;	4666	!++
;	4667	! The next macro sets the context bit for the keyword "MODULE".
;	4668	!--
;	4669	
;	4670		SET_MODULE_BIT =
;     M 4671			PAT$GL_CONTEXT [MODULE_BIT] = TRUE%,
;	4672	
;	4673	!++
;	4674	! The next macro sets the context bit for the LITERAL qualifier.
;	4675	!--
;	4676		SET_LIT_BIT =
;     M 4677			PAT$GL_CONTEXT[LITERAL_BIT] = TRUE%,
;	4678	
;	4679	!++
;	4680	! The next two macros set bits indicating what type of ECO command is
;	4681	! to be executed.
;	4682	!--
;	4683	
;	4684		!++
;	4685		! The macro SET_NOT_ECO_BIT sets a bit to indicate the command
;	4686		! was CHECK NOT ECO, i.e., check that the eco level bits
;	4687		! are NOT set.
;	4688		!--
;	4689		SET_NOT_ECO_BIT (SEMSP) =
;     M 4690			BEGIN
;     M 4691			PAT$GL_CONTEXT [SET_NOT_ECO] = TRUE;
;     M 4692			SET_DEC_OVERS;
;     M 4693			END%,
;	4694	
;	4695		!++
;	4696		! The macro SET_ECO_BIT sets a context bit to indicate the command
;	4697		! was setting ECO bits.
;	4698		!--
;	4699		SET_ECO_BIT (SEMSP) =
;     M 4700			BEGIN
;     M 4701			PAT$GL_CONTEXT [SET_ECO] = TRUE;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 5-4
; Digital Equipment Corporation
;
;     M 4702			SET_DEC_OVERS;
;     M 4703			END%,
;	4704	
;	4705	!++
;	4706	! The next five macros set the align context bits.
;	4707	!--
;	4708	
;	4709		SET_BYTE_BIT =
;     M 4710			PAT$GL_CONTEXT [ALIGN_BYTE] = TRUE%,
;	4711	
;	4712		SET_LONG_BIT =
;     M 4713			PAT$GL_CONTEXT [ALIGN_LONG] = TRUE%,
;	4714	
;	4715		SET_PAGE_BIT =
;     M 4716			PAT$GL_CONTEXT [ALIGN_PAGE] = TRUE%,
;	4717	
;	4718		SET_QUAD_BIT =
;     M 4719			PAT$GL_CONTEXT [ALIGN_QUAD] = TRUE%,
;	4720	
;	4721		SET_WORD_BIT = 
;     M 4722			PAT$GL_CONTEXT [ALIGN_WORD] = TRUE%,
;	4723	
;	4724	!++
;	4725	! The next six macros perform a logical test between the two items
;	4726	! and then place TRUE or FALSE on the top of the stack.
;	4727	!--
;	4728	
;	4729		EQ_EXPR (SEMSP) =
;     M 4730			PAT$GL_SEMAN1 [SEMSP] = .PAT$GL_SEMAN1 [SEMSP] EQL 
;     M 4731							.PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_TWO]%,
;	4732	
;	4733		GE_EXPR (SEMSP) =
;     M 4734			PAT$GL_SEMAN1 [SEMSP] = .PAT$GL_SEMAN1 [SEMSP] GEQ 
;     M 4735							.PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_TWO]%,
;	4736	
;	4737		GT_EXPR (SEMSP) =
;     M 4738			PAT$GL_SEMAN1 [SEMSP] = .PAT$GL_SEMAN1 [SEMSP] GTR 
;     M 4739							.PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_TWO]%,
;	4740	
;	4741		LE_EXPR (SEMSP) =
;     M 4742			PAT$GL_SEMAN1 [SEMSP] = .PAT$GL_SEMAN1 [SEMSP] LEQ 
;     M 4743							.PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_TWO]%,
;	4744	
;	4745		LT_EXPR (SEMSP) =
;     M 4746			PAT$GL_SEMAN1 [SEMSP] = .PAT$GL_SEMAN1 [SEMSP] LSS 
;     M 4747							.PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_TWO]%,
;	4748	
;	4749		NE_EXPR (SEMSP) =
;     M 4750			PAT$GL_SEMAN1 [SEMSP] = .PAT$GL_SEMAN1 [SEMSP] NEQ 
;     M 4751							.PAT$GL_SEMAN1 [SEMSP + PAT$K_SPOS_TWO]%;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 6
; Digital Equipment Corporation
;
;	4752	GLOBAL ROUTINE PAT$PARS_A_LINE (PARSE_STG_DESC) : NOVALUE =
;	4753	
;	4754	!++
;	4755	! FUNCTIONAL DESCRIPTION:
;	4756	!
;	4757	!	Parses a line of PATCH commands and performs associated action routines.
;	4758	!
;	4759	! CALLING SEQUENCE:
;	4760	!
;	4761	!	PAT$PARS_A_LINE ()
;	4762	!
;	4763	! INPUTS:
;	4764	!
;	4765	!	PARSE_STG_DESC	- string descriptor of the buffer that holds
;	4766	!			  the input string.
;	4767	!
;	4768	! IMPLICIT INPUTS:
;	4769	!
;	4770	!	the parsing tables
;	4771	!
;	4772	! OUTPUTS:
;	4773	!
;	4774	!	No value returned.
;	4775	!	Outputs are the effects of the action routines called.
;	4776	!
;	4777	! IMPLICIT OUTPUTS:
;	4778	!
;	4779	!	none
;	4780	!
;	4781	! ROUTINE VALUE:
;	4782	!
;	4783	!	novalue
;	4784	!
;	4785	! SIDE EFFECTS:
;	4786	!
;	4787	!	none
;	4788	!--
;	4789	BEGIN
;	4790	
;	4791	MAP
;	4792		PARSE_STG_DESC : REF BLOCK[,BYTE];
;	4793	
;	4794	LOCAL
;	4795		ACTION_TO_TAKE,						! Action from PAT_ACT_TABLE
;	4796		CUR_PARSE_STATE,					! The state of the parse machine
;	4797		J,							! Control variable
;	4798		LEXEME_ADDR: VECTOR [CHS_PER_LEXEME, BYTE],		! Buffer for string lexeme
;	4799		LAHEAD_ADDR: VECTOR [CHS_PER_LEXEME, BYTE],		! Buffer for a lookahead
;	4800		LEX_STG_DESC: BLOCK [12, BYTE]	,			! String descriptor for lexemes
;	4801		LAHEAD_STG_DESC: BLOCK [8, BYTE],			! Lookahead for one lexeme
;	4802		LAST_STG_DESC : BLOCK[8,BYTE],				! Previous place in PARSE_STG_DESC
;	4803		MATCH_TRANSIT,						! Boolean, TRUE if matching transition is found
;	4804		NEXT_TOKEN,						! Saves next token
;	4805		OLD_J,							! Saves state 
;	4806		OLD_TOKEN,						! Saved token

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 6-1
; Digital Equipment Corporation
;
;	4807		PARSE_MORE,						! Boolean, says whether to parse more
;	4808		PARSE_STACK: VECTOR [MAX_STACK_PTR * PAT$K_STELM_SIZ, WORD], ! Parse state stack
;	4809		REDUCE_WAS_LAST,					! TRUE if reduction was last action
;	4810		SCAN_NEXT_SYM,						! Boolean, TRUE if next symbol needs to be scanned
;	4811		STACK_POINTER,						! Stack INDEX
;	4812		TOKEN,							! holds latest token
;	4813		TRANSIT_CODE;						! Transition code from PAT_STATE_TABLE
;	4814	
;	4815	LABEL
;	4816		MATCH_LOOP;
;	4817	
;	4818	!++
;	4819	! Initialize control variables.  Get a token from the input string.
;	4820	!--
;	4821	OLD_TOKEN = 0;
;	4822	REDUCE_WAS_LAST = FALSE;
;	4823	STACK_POINTER = 0;
;	4824	QUOTE_INDIC = FALSE;
;	4825	
;	4826	!++
;	4827	! Initialize the look-ahead string descriptor.
;	4828	!--
;	4829	LEX_STG_DESC [DSC$W_LENGTH] = 0;
;	4830	LEX_STG_DESC [DSC$W_MAXLEN] = CHS_PER_LEXEME;
;	4831	LEX_STG_DESC [DSC$A_POINTER] = LEXEME_ADDR;
;	4832	LAHEAD_STG_DESC [DSC$A_POINTER] = LAHEAD_ADDR;
;	4833	
;	4834	!++
;	4835	! Maintain a 'last' string descriptor which is always what 'PARSE_STG_DESC'
;	4836	! was before the last time it was changed.
;	4837	!--
;	4838	LAST_STG_DESC[DSC$W_LENGTH] = .PARSE_STG_DESC[DSC$W_LENGTH];
;	4839	LAST_STG_DESC[DSC$A_POINTER] = .PARSE_STG_DESC[DSC$A_POINTER];
;	4840	
;	4841	!++
;	4842	! Get the first token from the command line.
;	4843	!--
;	4844	TOKEN = PAT$GET_A_TOKEN (.PARSE_STG_DESC, LEX_STG_DESC);
;	4845	
;	4846	!++
;	4847	! Initialize the parse control variables.
;	4848	!--
;	4849	CUR_PARSE_STATE = 0;
;	4850	SCAN_NEXT_SYM = TRUE;
;	4851	PARSE_MORE = TRUE;
;	4852	MATCH_TRANSIT = FALSE;
;	4853	
;	4854	!++
;	4855	! This is the main loop of the parser.  It continues
;	4856	! until the variable "PARSE_MORE" has a value of FALSE.
;	4857	!--
;	4858	DO
;	4859		BEGIN
;	4860		J = .CUR_PARSE_STATE;
;	4861	

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 6-2
; Digital Equipment Corporation
;
;	4862		!++
;	4863		! The following loop searches for a matching token
;	4864		! and exits when a match is found.
;	4865		!--
;	4866		DO
;	4867	MATCH_LOOP:	BEGIN
;	4868			MATCH_TRANSIT = FALSE;
;	4869			TRANSIT_CODE = .PAT_STATE_TABLE [.J];
;	4870	
;	4871			!++
;	4872			! See whether this transit code is an else code,
;	4873			! and at the same time the token is a keyword
;	4874			! token. In these circumstances, try passing
;	4875			! through the loop again with the pretense
;	4876			! that the token is a ALPHA_STR_TOKEN. The current
;	4877			! token and state must be saved so that
;	4878			! if ALPHA_STR_TOKEN does not make a valid sentence,
;	4879			! then the effect of the else code can be reestablished.
;	4880			!--
;	4881			IF (.TRANSIT_CODE EQL ELSE_CODE) AND (.TOKEN LEQ KEYWORD_RANGE)
;	4882			THEN
;	4883				BEGIN
;	4884				OLD_TOKEN = .TOKEN;
;	4885				OLD_J = .J;
;	4886				J = .CUR_PARSE_STATE;
;	4887				TOKEN = ALPHA_STR_TOKEN;
;	4888				LEAVE MATCH_LOOP;
;	4889				END;
;	4890	
;	4891			!++
;	4892			! Now allow for restoring the original token
;	4893			! in the case that the newly inserted ALPHA_STR_TOKEN
;	4894			! brought no better results.
;	4895			!--
;	4896			IF (.TRANSIT_CODE EQL ELSE_CODE) AND (.TOKEN EQL ALPHA_STR_TOKEN)
;	4897				AND (.OLD_TOKEN NEQ 0)
;	4898			THEN
;	4899				BEGIN
;	4900				TOKEN = .OLD_TOKEN;
;	4901				J = .OLD_J;
;	4902				OLD_TOKEN = 0;
;	4903				END;
;	4904	
;	4905			!++
;	4906			! No special handling here. Just compare the
;	4907			! token and the transit code.
;	4908			!--
;	4909			IF (.TRANSIT_CODE EQL .TOKEN) OR
;	4910			   (.TRANSIT_CODE EQL ELSE_CODE)
;	4911			THEN
;	4912				BEGIN
;	4913				!++
;	4914				! A match has been found, so the lexical string can be
;	4915				! read or reduced.
;	4916				!--

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 6-3
; Digital Equipment Corporation
;
;	4917				MATCH_TRANSIT = TRUE;
;	4918				ACTION_TO_TAKE = .PAT_ACT_TABLE [.J];
;	4919				IF (.ACTION_TO_TAKE NEQ ERROR_CODE)
;	4920				THEN
;	4921					BEGIN
;	4922					IF (.ACTION_TO_TAKE GTR - SCAN_CODE)
;	4923					THEN
;	4924						!++
;	4925						! Nothing else to scan.  Perform the
;	4926						! associated action routine for this
;	4927						! lexical entity.
;	4928						!--
;	4929						BEGIN
;	4930						PARSE_STACK [.STACK_POINTER] = .CUR_PARSE_STATE;
;	4931	
;	4932						!++
;	4933						! Put the token on the top of the parse stack
;	4934						!--
;	4935						IF NOT .REDUCE_WAS_LAST
;	4936						THEN PAT$GL_SEMAN1 [.STACK_POINTER] = .TOKEN;
;	4937						END;
;	4938					
;	4939					IF (.ACTION_TO_TAKE GEQ 0)
;	4940					THEN
;	4941						!++
;	4942						! This is a read state.
;	4943						!--
;	4944						BEGIN
;	4945						CUR_PARSE_STATE = .ACTION_TO_TAKE;
;	4946						REDUCE_WAS_LAST = FALSE;
;	4947						IF (.STACK_POINTER GEQ (MAX_STACK_PTR * PAT$K_STELM_SIZ))
;	4948						THEN
;	4949							BEGIN
;	4950							SIGNAL (PAT$_PARSEERR)
;	4951							END
;	4952						ELSE STACK_POINTER = .STACK_POINTER + PAT$K_SPOS_ONE;
;	4953	
;	4954						!++
;	4955						! Now input the next token if more
;	4956						! reading is necessary.
;	4957						!--
;	4958						IF .SCAN_NEXT_SYM
;	4959						THEN 
;	4960							BEGIN
;	4961							ZEROCOR(.LAHEAD_STG_DESC[DSC$A_POINTER],
;     P 4962								(.LAHEAD_STG_DESC[DSC$W_MAXLEN]/4));
;	4963							LAHEAD_STG_DESC [DSC$W_LENGTH] =
;	4964								.LEX_STG_DESC [DSC$W_LENGTH];
;	4965							CH$MOVE (.LEX_STG_DESC [DSC$W_LENGTH],
;	4966								.LEX_STG_DESC [DSC$A_POINTER],
;	4967								.LAHEAD_STG_DESC [DSC$A_POINTER]);
;	4968							LAST_STG_DESC[DSC$W_LENGTH] = .PARSE_STG_DESC[DSC$W_LENGTH];
;	4969							LAST_STG_DESC[DSC$A_POINTER] = .PARSE_STG_DESC[DSC$A_POINTER];
;	4970							TOKEN = PAT$GET_A_TOKEN (.PARSE_STG_DESC, LEX_STG_DESC);
;	4971							END

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 6-4
; Digital Equipment Corporation
;
;	4972						ELSE
;	4973							!++
;	4974							! If no more scanning is needed,
;	4975							! put the next token in the
;	4976							! variable "TOKEN".
;	4977							BEGIN
;	4978							SCAN_NEXT_SYM = TRUE;
;	4979							TOKEN = .NEXT_TOKEN;
;	4980							END;
;	4981	
;	4982						!++
;	4983						! This is the end of the read.
;	4984						!--
;	4985						END
;	4986					ELSE
;	4987						!++
;	4988						! This is a reduction.
;	4989						!--
;	4990						BEGIN
;	4991						IF (.ACTION_TO_TAKE LEQ - SCAN_CODE)
;	4992						THEN
;	4993							!++
;	4994							! This is a noscan reduction,
;	4995							! which takes an extra stack pop.
;	4996							!--
;	4997							BEGIN
;	4998							ACTION_TO_TAKE = .ACTION_TO_TAKE + SCAN_CODE;
;	4999							SCAN_NEXT_SYM = FALSE;
;	5000							STACK_POINTER = .STACK_POINTER - PAT$K_SPOS_ONE;
;	5001							NEXT_TOKEN = .TOKEN;
;	5002							END;
;	5003	
;	5004						ACTION_TO_TAKE = - .ACTION_TO_TAKE;
;	5005						STACK_POINTER = .STACK_POINTER -
;	5006							(.PAT_POP_TABLE [.ACTION_TO_TAKE] * PAT$K_STELM_SIZ);
;	5007						CUR_PARSE_STATE = .PARSE_STACK [.STACK_POINTER];
;	5008						TOKEN = .PAT_LHS_TABLE [.ACTION_TO_TAKE];
;	5009						REDUCE_WAS_LAST = TRUE;
;	5010	
;	5011						!++
;	5012						! In here go the semantic actions for each reduction.
;	5013						!--
;	5014						IF NOT MAR_REDUCTN (.PAT_SEM_TABLE [.ACTION_TO_TAKE],
;	5015							.STACK_POINTER)
;	5016						THEN SELECTONE .PAT_SEM_TABLE [.ACTION_TO_TAKE] OF
;	5017							SET
;	5018							[PATDEFNAM]:	SAVE_NAME (.STACK_POINTER);
;	5019							[PATGETFIL]:	GET_FILE_SPEC;
;	5020							[PATOLDPMT]:	IF NOT PAT$PROMPT_READ(OLDPMT_TOKEN, .PARSE_STG_DESC) THEN RETURN;
;	5021							[PATNEWPMT]:	IF NOT PAT$PROMPT_READ(NEWPMT_TOKEN, .PARSE_STG_DESC) THEN RETURN;
;	5022							[PATLOCPMT]:	IF NOT PAT$PROMPT_READ(LOCPMT_TOKEN, .PARSE_STG_DESC) THEN RETURN;
;	5023							[PATNAMPMT]:	IF NOT PAT$PROMPT_READ(NAMPMT_TOKEN, .PARSE_STG_DESC) THEN RETURN;
;	5024							[PATEXPPMT]:	IF NOT PAT$PROMPT_READ(EXPPMT_TOKEN, .PARSE_STG_DESC) THEN RETURN;
;	5025							[PATECOPMT]:	IF NOT PAT$PROMPT_READ(ECOPMT_TOKEN, .PARSE_STG_DESC) THEN RETURN;
;	5026							[PATQUOTEC]:	GET_QUOTED_STG (.STACK_POINTER);

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 6-5
; Digital Equipment Corporation
;
;	5027							[PATSAVMDL]:	ADD_MODULE (.STACK_POINTER);
;	5028							[PATSAVPAT]:	PAT$BUILD_PATH (LEX_STG_DESC, 0, TRUE);
;	5029							[PATTRNNAM]:	REDUCE_PATHNAME (.STACK_POINTER);
;	5030							[PATUQUNAM]:	TRANSLATE_NAME (.STACK_POINTER);
;	5031							[OTHERWISE]:	RETURN;
;	5032							TES;
;	5033	
;	5034						END;
;	5035					END
;	5036	
;	5037				!++
;	5038				! This is the ERROR_CODE processing.
;	5039				! It is the else portion of the (.ACTION_TO_TAKE
;	5040				! EQL ERROR_CODE) IF statement.
;	5041				!--
;	5042				ELSE
;	5043					BEGIN
;	5044					IF (.TOKEN NEQ DIGIT_STR_TOKEN)
;	5045					THEN
;	5046						BEGIN
;	5047						!++
;	5048						! Truncate the string to 10 characters
;	5049						! unless it is already shorter than 10.
;	5050						!--
;	5051						IF (.LAST_STG_DESC[DSC$W_LENGTH] GTR 10)
;	5052						THEN
;	5053							LAST_STG_DESC[DSC$W_LENGTH] = 10;
;	5054						SIGNAL(PAT$_SYNTAX+MSG$K_WARN, 1, LAST_STG_DESC);
;	5055						END;
;	5056					IF (.TOKEN NEQ EOL_TOKEN)
;	5057					THEN
;	5058						SIGNAL(PAT$_INVCMD)
;	5059					ELSE
;	5060						SIGNAL (PAT$_INVTOKEN+MSG$K_WARN, 1, LEX_STG_DESC);
;	5061					END
;	5062				END
;	5063			ELSE
;	5064				!++
;	5065				! This is the ELSE portion of the IF statement
;	5066				! (.TRANSIT_CODE EQL .TOKEN) OR
;	5067				! (.TRANSIT_CODE EQL ELSE_CODE)
;	5068				!--
;	5069				IF (.TRANSIT_CODE EQL CONT_CODE)
;	5070				THEN J = .PAT_ACT_TABLE [.J]
;	5071				ELSE J = .J + 1;
;	5072			END						! End of MATCH_LOOP
;	5073		UNTIL .MATCH_TRANSIT
;	5074		END
;	5075		!++
;	5076		! Continue processing until an action routine sets this
;	5077		! flag to false.
;	5078		!--
;	5079	WHILE .PARSE_MORE;
;	5080	END;


; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 6-6
; Digital Equipment Corporation
;

							    .TITLE  PATPAR
							    .IDENT  \X01.22\

							    .PSECT  _PAT$PLIT,NOWRT,NOEXE,0

					      00000 P.AAA:  .WORD   102, 103, 104, 1, 2, 108, 110, 4, 5, 6, 7, 8, 9, 12, 11, -;
								    10, 121, 13, 14, 15, 16, 3, 9997, 100, 103, 9996, 99, -   ;
								    81, 9997, 82, 9997, 105, 20, 49, 31, 46, 44, 9997, 106, - ;
								    137, 139, 71, 99, 9997, 137, 71, 9997, 45, 33, 34, 47, -  ;
								    9997, 82, 107, 150, 139, 152, 99, 71, 9997, 17, 9997, -   ;
								    65, 9997, 152, 9996, 151, 152, 9996, 10, 152, 9996, 139, -;
								    9996, 139, 9996, 109, 156, 123, 148, 99, 72, 9997, 65, -  ;
								    9997, 148, 9996, 64, 9997, 148, 9996, 157, 148, 9996, -   ;
								    10, 148, 9996, 123, 64, 99, 9997, 148, 9996, 123, 9996, - ;
								    123, 64, 9996, 148, 9996, 123, 9996, 64, 9997, 148, -     ;
								    9996, 109, 9996, 111, 136, 139, 137, 99, 9996, 65, 9997, -;
								    137, 9996, 66, 9997, 138, 143, 83, 144, 145, 76, 70, 41, -;
								    61, 146, 68, 126, 72, 75, 62, 77, 71, 9997, 76, 70, 60, - ;
								    82, 61, 43, 18, 9997, 144, 9996, 144, 9996, 144, 9996, -  ;
								    144, 9996, 144, 9996, 147, 68, 9997, 148, 9996, 149, 64, -;
								    9997, 148, 9996, 79, 9997, 138, 9996, 79, 9997, 62, -     ;
								    9997, 71, 9997, 144, 9996, 144, 9996, 144, 9996, 144, -   ;
								    9996, 144, 9996, 144, 9996, 142, 137, 9996, 10, 137, -    ;
								    9996, 125, 99, 9997, 138, 9996, 139, 9996, 125, 9996, -   ;
								    138, 9996, 139, 9996, 66, 9997, 138, 9996, 112, 113, 82, -;
								    122, 134, 138, 99, 9996, 113, 82, 122, 134, 138, 99, -    ;
								    9996, 155, 27, 42, 21, 20, 49, 31, 28, 38, 19, 36, 48, -  ;
								    40, 47, 39, 25, 37, 9997, 66, 131, 99, 9997, 128, 135, -  ;
								    138, 9996, 65, 9997, 135, 138, 9996, 132, 135, 138, -     ;
								    9996, 10, 135, 138, 9996, 131, 9996, 131, 9996, 122, -    ;
								    138, 9996, 131, 9996, 132, 135, 9996, 10, 135, 9996, -    ;
								    155, 9996, 114, 115, 82, 122, 134, 9996, 115, 82, 122, -  ;
								    134, 9996, 158, 155, 45, 9996, 66, 125, 9996, 128, 9996, -;
								    65, 9997, 130, 135, 9996, 10, 135, 9996, 125, 9996, 125, -;
								    9996, 122, 9996, 125, 9996, 130, 135, 9996, 10, 135, -    ;
								    9996, 158, 9996, 116, 117, 82, 128, 141, 135, 99, 9996, - ;
								    117, 82, 128, 141, 135, 99, 9996, 159, 155, 30, 9996, -   ;
								    65, 9997, 140, 135, 9996, 10, 135, 9996, 141, 99, 9997, - ;
								    141, 9996, 159, 155, 30, 9996, 112, 118, 82, 122, 138, -  ;
								    143, 83, 144, 145, 76, 70, 41, 61, 146, 68, 126, 72, 75, -;
								    62, 77, 71, 9997, 118, 82, 122, 138, 143, 83, 144, 145, - ;
								    76, 70, 41, 61, 146, 68, 126, 72, 75, 62, 77, 71, 9997, - ;
								    65, 9997, 122, 138, 9996, 64, 9997, 138, 9996, 64, 9997, -;
								    138, 9996, 65, 9997, 112, 119, 82, 122, 134, 9996, 119, - ;
								    82, 122, 134, 9996, 66, 131, 9996, 128, 9996, 129, 65, -  ;
								    125, 9996, 130, 9996, 10, 9996, 132, 9996, 133, 135, 10, -;
								    9996, 125, 9996, 130, 9996, 10, 9996, 122, 9996, 131, -   ;
								    9996, 132, 9996, 133, 135, 10, 9996, 125, 9996, 130, -    ;
								    9996, 10, 9996, 112, 120, 82, 122, 134, 9996, 120, 82, -  ;
								    122, 134, 9996, 66, 131, 9996, 135, 9996, 129, 9996, -    ;
								    130, 9996, 10, 9996, 135, 9996, 129, 9996, 130, 9996, -   ;
								    10, 9996, 122, 9996, 131, 9996, 135, 9996, 129, 9996, -   ;
								    130, 9996, 10, 9996, 122, 123, 138, 99, 9996, 122, 9996, -;
								    33, 34, 45, 47, 22, 9997, 124, 153, 125, 155, 99, 9996, - ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 6-7
; Digital Equipment Corporation
;
								    65, 9997, 155, 9996, 154, 155, 9996, 10, 155, 9996, 125, -;
								    9996, 125, 9996, 82, 107, 9996, 17, 9997, 122, 125, 138, -;
								    99, 9996, 122, 9996, 126, 125, 71, 9996, 62, 9997, 126, - ;
								    9996, 62, 9997, 33, 34, 45, 47, 9997, 112, 127, 82, 122, -;
								    134, 9996, 127, 82, 122, 134, 9996, 66, 131, 9996, 128, - ;
								    9996, 65, 9997, 132, 9996, 133, 9996, 122, 9996, 131, -   ;
								    9996, 132, 9996, 133, 9996, 22, 41, 9997, 22, 9997, 0     ;
					      004D8 P.AAB:  .WORD   23, -2, 26, 29, 47, 76, 116, -14, 118, 221, 292, 336, -   ;
								    372, 430, 482, -30, 524, 531, 579, -44, 584, 614, 9999, - ;
								    -1, -3, 2, -4, -5, 9999, 31, 9999, 38, -175, -176, -177, -;
								    -178, -179, 9999, -6, -59, 44, -61, -85, 9999, -60, -61, -;
								    9999, -7, -8, 52, -11, 9999, 60, -10, 62, 66, -115, -85, -;
								    -118, 9999, -9, 9999, 64, -10110, -114, 58, 69, 74, 58, - ;
								    -113, 72, 58, -116, 42, -117, 42, -12, 83, 91, 112, -87, -;
								    -154, 9999, 85, -10142, 87, 81, 89, -10144, -148, 81, -   ;
								    94, 105, 81, -145, 97, 81, -150, 101, -87, 9999, 103, -   ;
								    81, -152, 99, -151, 108, 99, 110, 81, -153, 99, 114, -    ;
								    -10145, -149, 81, -13, 77, -15, 124, 198, 217, -85, 45, - ;
								    126, -10068, 128, 45, 130, 9999, -57, 148, -93, -94, -    ;
								    -102, 158, 160, 162, 164, 166, 178, 182, -156, -157, -    ;
								    -158, -159, -161, 9999, 156, 186, 188, 190, 192, 194, -   ;
								    196, -10090, -95, 134, -103, 134, -104, 134, -105, 134, - ;
								    -106, 134, 169, -110, -10105, 171, 81, 174, -111, 9999, - ;
								    176, 81, -108, 9999, 180, 131, -109, 9999, 184, -10153, - ;
								    -160, 9999, -96, 134, -97, 134, -98, 134, -99, 134, -     ;
								    -100, 134, -101, 134, 201, 211, 45, -71, 204, 45, 207, -  ;
								    -83, 9999, 209, 131, -72, 42, 213, 205, 215, 131, -73, -  ;
								    42, 219, 9999, -58, 131, 229, -17, 290, 254, 279, -91, -  ;
								    -82, 131, -16, 236, 254, 279, -91, -82, 131, -162, -125, -;
								    -126, -127, -128, -129, -130, -131, -132, -133, -134, -   ;
								    -135, -136, -137, -138, -139, -140, 9999, 258, 267, -84, -;
								    9999, 262, -63, -90, 131, 264, -10075, -62, -90, 131, -   ;
								    271, 277, -90, 131, -78, 275, -90, 131, -52, 256, -53, -  ;
								    256, 282, -91, 131, 284, 256, 287, 277, 260, -79, 275, -  ;
								    260, -163, 237, 298, -19, 334, 307, 324, 226, -18, 303, - ;
								    307, 324, 226, -167, -169, -170, 237, 310, 314, 205, -    ;
								    312, 259, 264, -10072, 317, 322, 260, -75, 320, 260, -    ;
								    -50, 205, -51, 205, 326, 280, 328, 205, 331, 322, 260, -  ;
								    -76, 320, 260, -168, 304, 344, -21, 368, 355, 357, -63, - ;
								    -86, 260, -20, 351, 355, 357, -63, -86, 260, -171, -173, -;
								    -174, 237, 264, -10078, 360, 366, 260, -81, 363, 260, -   ;
								    -64, -86, 9999, -65, 364, -172, -173, -174, 237, 394, -   ;
								    428, 290, -67, 424, 148, -93, -94, -102, 158, 160, 162, - ;
								    164, 166, 178, 182, -156, -157, -158, -159, -161, -       ;
								    -10023, 415, 236, -67, 424, 148, -93, -94, -102, 158, -   ;
								    160, 162, 164, 166, 178, 182, -156, -157, -158, -159, -   ;
								    -161, -10021, 417, -10020, -66, 420, 131, 422, -10089, -  ;
								    -68, 131, 426, -10089, -69, 131, 417, -10022, 436, -27, - ;
								    290, 441, 466, 226, -26, 236, 441, 466, 226, 444, 454, -  ;
								    256, 446, 259, 450, 264, -88, 205, 452, 315, -47, 318, -  ;
								    456, 268, 460, 275, -89, 260, 462, 205, 464, 315, -48, -  ;
								    318, 468, 280, 470, 256, 472, 268, 476, 275, -89, 260, -  ;
								    478, 205, 480, 315, -49, 318, 488, -29, 290, 493, 512, -  ;
								    226, -28, 236, 493, 512, 226, 496, 504, 256, 498, 260, -  ;
								    500, 448, 502, 315, -54, 318, 506, 260, 508, 448, 510, -  ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 6-8
; Digital Equipment Corporation
;
								    315, -55, 318, 514, 280, 516, 256, 518, 260, 520, 448, -  ;
								    522, 315, -56, 318, -31, 529, -91, -87, 131, -32, 280, -  ;
								    537, 557, 562, 569, -141, 9999, -33, 543, 547, -124, -    ;
								    -83, 237, 545, -10117, -123, 237, 550, 555, 237, -120, -  ;
								    553, 237, -121, 205, -122, 205, 560, -35, 54, -34, 9999, -;
								    -36, 567, -91, -83, 131, -37, 280, 573, 575, -161, 205, - ;
								    184, -10036, 577, 146, 184, -10037, -40, -41, -42, -43, - ;
								    9999, 590, -46, 290, 595, 606, 226, -45, 236, 595, 606, - ;
								    226, 598, 602, 256, 600, 259, 264, -10162, 604, 268, -    ;
								    -165, 457, 608, 280, 610, 256, 612, 268, -166, 457, -     ;
								    -142, 617, 9999, -143, 9999, 0			      ;
					      009B0 P.AAC:  .BYTE   0, 1, 0, 1, 1, 1, 3, 1, 1, 3, 2, 1, 1, 1, 0, 1, 2, 1, 2, -;
								    1, 2, 1, 2, 1, 1, 0, 2, 1, 2, 1, 0, 1, 2, 2, 3, 2, 2, 3, -;
								    2, 3, 1, 1, 1, 1, 0, 2, 1, 5, 6, 7, 2, 1, 2, 1, 5, 5, 6, -;
								    4, 2, 0, 1, 0, 2, 0, 2, 1, 2, 0, 4, 2, 0, 2, 4, 3, 2, 3, -;
								    4, 2, 3, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -;
								    2, 2, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 0, 5, 2, 0, 0, 0, 2, -;
								    2, 0, 2, 1, 0, 0, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, -;
								    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 2, 0, 4, 2, 2, 1, -;
								    4, 3, 0, 0, 0, 0, 0, 0, 2, 0, 2, 1, 2, 3, 4, 2, 1, 0, 0, -;
								    2, 1, 0, 0, 0, 0, 0, 0, 0, 0			      ;
					      00A65	    .BLKB   3
					      00A68 P.AAD:  .BYTE   0, 101, 102, 102, 103, 103, 104, 104, 104, 104, 104, -    ;
								    104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, -  ;
								    104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, -  ;
								    104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, -  ;
								    104, 104, 104, 119, 119, 119, -126, -126, -124, -124, -   ;
								    120, 120, 120, -120, -120, 106, 106, -119, -128, -128, -  ;
								    -116, -116, 118, 118, 118, 118, 111, 111, -114, -114, -   ;
								    115, 115, 115, 113, 113, 113, 117, 117, -122, 125, -125, -;
								    -117, -115, 123, -127, -123, -121, 122, -118, -118, -     ;
								    -113, -113, -113, -113, -113, -113, -113, -113, -112, -   ;
								    -112, -112, -112, -112, -111, -111, -111, -109, -107, -   ;
								    107, 107, -106, -106, -105, -105, -104, 124, 124, -102, - ;
								    -102, -103, -103, -101, -101, -101, -101, -101, -101, -   ;
								    -101, -101, -101, -101, -101, -101, -101, -101, -101, -   ;
								    -101, 121, 108, 110, 109, 109, -100, -100, -100, -100, -  ;
								    -99, -99, -99, -99, -108, -110, -110, -110, -110, -110, - ;
								    126, 126, 112, 112, 127, 127, 127, 114, 114, -98, -98, -  ;
								    116, 116, -97, -97, 105, 105, 105, 105, 105, 0	      ;
					      00B1D	    .BLKB   3
					      00B20 P.AAE:  .BYTE   58, 58, 58, 58, 16, 16, 58, 42, 30, 29, 29, 41, 58, 58, - ;
								    14, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, - ;
								    58, 58, 58, 58, 58, 30, 29, 29, 42, 42, 41, 41, 30, 29, - ;
								    42, 41, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, - ;
								    58, 28, 15, 4, 5, 6, 58, 58, 58, 58, 58, 58, 3, 1, 58, -  ;
								    58, 10, 15, 58, 58, 58, 58, 58, 58, 58, 58, 35, 50, 39, - ;
								    31, 52, 27, 44, 44, 51, 54, 58, 48, 58, 11, 47, 49, 38, - ;
								    32, 46, 19, 58, 53, 24, 55, 26, 58, 37, 23, 13, 13, 58, - ;
								    58, 56, 51, 34, 51, 22, 58, 58, 43, 54, 57, 54, 58, 58, - ;
								    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, - ;
								    18, 13, 8, 58, 58, 57, 54, 3, 1, 43, 54, 2, 1, 48, 36, -  ;
								    48, 48, 48, 40, 33, 33, 25, 21, 44, 58, 58, 25, 21, 58, - ;
								    42, 25, 21, 58, 45, 20, 17, 12, 7, 9, 0		      ;
					      00BD5	    .BLKB   3

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 6-9
; Digital Equipment Corporation
;

							    .PSECT  _PAT$OWN,NOEXE,2

					      00000 QUOTE_INDIC:
							    .BLKB   4

						    ISE$C_SIZE==	20
						    TXT$C_SIZE==	4
						    PAL$C_SIZE==	16
						    ASD$C_SIZE==	9
						    FWR$C_SIZE==	24
						    PAT_STATE_TABLE=	P.AAA
						    PAT_ACT_TABLE=	P.AAB
						    PAT_POP_TABLE=	P.AAC
						    PAT_LHS_TABLE=	P.AAD
						    PAT_SEM_TABLE=	P.AAE
							    .GLOBL  PAT$GL_RST_BEGN, PAT$FAO_OUT, PAT$ADD_ARG, PAT$BUILD_PATH
							    .GLOBL  PAT$FIND_MODULE, PAT$FREEZ, PAT$GET_A_TOKEN, PAT$INIT_MODES
							    .GLOBL  PAT$PERFORM_CMD, PAT$PROMPT_READ, PAT$SET_COMQUAL
							    .GLOBL  PAT$SET_MOD_LVL, PAT$SET_OVERS, PAT$TRANS_NAME
							    .GLOBL  PAT$GL_FLAGS, PAT$GB_MOD_PTR, PAT$GL_CONTEXT, PAT$GL_TAIL_LST
							    .GLOBL  PAT$GL_SEMAN1, PAT$GL_SEMAN2
							    .WEAK   ACCESS_CHECK

							    .PSECT  _PAT$CODE,NOWRT,2

					 0FFC 00000 	    .ENTRY  PAT$PARS_A_LINE, Save R2,R3,R4,R5,R6,R7,R8,R9,R10,R11     ; 4752
		         5E	FF40   CE  9E 00002 	    MOVAB   -192(SP), SP					      ;
				  08   AE  D4 00007 	    CLRL    OLD_TOKEN						      ; 4821
				  14   AE  D4 0000A 	    CLRL    REDUCE_WAS_LAST					      ; 4822
				       57  D4 0000D 	    CLRL    STACK_POINTER					      ; 4823
			    00000000'  EF  D4 0000F 	    CLRL    QUOTE_INDIC						      ; 4824
				  CC   AD  B4 00015 	    CLRW    LEX_STG_DESC					      ; 4829
		    D4   AD	       14  B0 00018 	    MOVW    #20, LEX_STG_DESC+8					      ; 4830
		    D0   AD	  EC   AD  9E 0001C 	    MOVAB   LEXEME_ADDR, LEX_STG_DESC+4				      ; 4831
		    C8   AD	  D8   AD  9E 00021 	    MOVAB   LAHEAD_ADDR, LAHEAD_STG_DESC+4			      ; 4832
		         50	  04   AC  D0 00026 	    MOVL    PARSE_STG_DESC, R0					      ; 4838
		    7C   AE	       60  B0 0002A 	    MOVW    (R0), LAST_STG_DESC					      ;
		    C0   AD	  04   A0  D0 0002E 	    MOVL    4(R0), LAST_STG_DESC+4				      ; 4839
				  CC   AD  9F 00033 	    PUSHAB  LEX_STG_DESC					      ; 4844
				       50  DD 00036 	    PUSHL   R0							      ;
	      00000000G  EF	       02  FB 00038 	    CALLS   #2, PAT$GET_A_TOKEN					      ;
		         5B	       50  D0 0003F 	    MOVL    R0, TOKEN						      ;
				  04   AE  D4 00042 	    CLRL    CUR_PARSE_STATE					      ; 4849
		    10   AE	       01  D0 00045 	    MOVL    #1, SCAN_NEXT_SYM					      ; 4850
		    1C   AE	       01  D0 00049 	    MOVL    #1, PARSE_MORE					      ; 4851
				  0C   AE  D4 0004D 	    CLRL    MATCH_TRANSIT					      ; 4852
		         59	  04   AE  D0 00050 1$:     MOVL    CUR_PARSE_STATE, J					      ; 4860
				  0C   AE  D4 00054 2$:     CLRL    MATCH_TRANSIT					      ; 4868
		    18   AE 00000000'EF49  3C 00057 	    MOVZWL  PAT_STATE_TABLE[J], TRANSIT_CODE			      ; 4869
				       50  D4 00060 	    CLRL    R0							      ; 4881
	      0000270D   8F	  18   AE  D1 00062 	    CMPL    TRANSIT_CODE, #9997					      ;
				       1A  12 0006A 	    BNEQ    3$							      ;
				       50  D6 0006C 	    INCL    R0							      ;
		         31	       5B  D1 0006E 	    CMPL    TOKEN, #49						      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 6-10
; Digital Equipment Corporation
;
				       13  14 00071 	    BGTR    3$							      ;
		    08   AE	       5B  D0 00073 	    MOVL    TOKEN, OLD_TOKEN					      ; 4884
		    24   AE	       59  D0 00077 	    MOVL    J, OLD_J						      ; 4885
		         59	  04   AE  D0 0007B 	    MOVL    CUR_PARSE_STATE, J					      ; 4886
		         5B	  47   8F  9A 0007F 	    MOVZBL  #71, TOKEN						      ; 4887
				     03DA  31 00083 	    BRW     63$							      ; 4888
		         19	       50  E9 00086 3$:     BLBC    R0, 4$						      ; 4896
	      00000047   8F	       5B  D1 00089 	    CMPL    TOKEN, #71						      ;
				       10  12 00090 	    BNEQ    4$							      ;
				  08   AE  D5 00092 	    TSTL    OLD_TOKEN						      ; 4897
				       0B  13 00095 	    BEQL    4$							      ;
		         5B	  08   AE  D0 00097 	    MOVL    OLD_TOKEN, TOKEN					      ; 4900
		         59	  24   AE  D0 0009B 	    MOVL    OLD_J, J						      ; 4901
				  08   AE  D4 0009F 	    CLRL    OLD_TOKEN						      ; 4902
		         5B	  18   AE  D1 000A2 4$:     CMPL    TRANSIT_CODE, TOKEN					      ; 4909
				       06  13 000A6 	    BEQL    5$							      ;
		         03	       50  E8 000A8 	    BLBS    R0, 5$						      ; 4910
				     039C  31 000AB 	    BRW     61$							      ;
		    0C   AE	       01  D0 000AE 5$:     MOVL    #1, MATCH_TRANSIT					      ; 4917
		         58 00000000'EF49  32 000B2 	    CVTWL   PAT_ACT_TABLE[J], ACTION_TO_TAKE			      ; 4918
	      0000270F   8F	       58  D1 000BA 	    CMPL    ACTION_TO_TAKE, #9999				      ; 4919
				       03  12 000C1 	    BNEQ    6$							      ;
				     0333  31 000C3 	    BRW     56$							      ;
	      FFFFD8F2   8F	       58  D1 000C6 6$:     CMPL    ACTION_TO_TAKE, #-9998				      ; 4922
				       12  15 000CD 	    BLEQ    7$							      ;
		    2C AE47	  04   AE  B0 000CF 	    MOVW    CUR_PARSE_STATE, PARSE_STACK[STACK_POINTER]		      ; 4930
		         08	  14   AE  E8 000D5 	    BLBS    REDUCE_WAS_LAST, 7$					      ; 4935
	      00000000GEF47	       5B  D0 000D9 	    MOVL    TOKEN, PAT$GL_SEMAN1[STACK_POINTER]			      ; 4936
				       58  D5 000E1 7$:     TSTL    ACTION_TO_TAKE					      ; 4939
				       68  19 000E3 	    BLSS    12$							      ;
		    04   AE	       58  D0 000E5 	    MOVL    ACTION_TO_TAKE, CUR_PARSE_STATE			      ; 4945
				  14   AE  D4 000E9 	    CLRL    REDUCE_WAS_LAST					      ; 4946
		         28	       57  D1 000EC 	    CMPL    STACK_POINTER, #40					      ; 4947
				       0F  19 000EF 	    BLSS    8$							      ;
			    006D812A   8F  DD 000F1 	    PUSHL   #7176490						      ; 4950
	      00000000G  00	       01  FB 000F7 	    CALLS   #1, LIB$SIGNAL					      ;
				       03  11 000FE 	    BRB     9$							      ; 4947
		         57	       02  C0 00100 8$:     ADDL2   #2, STACK_POINTER					      ; 4952
		         3B	  10   AE  E9 00103 9$:     BLBC    SCAN_NEXT_SYM, 10$					      ; 4958
		         50	  CC   AD  3C 00107 	    MOVZWL  LAHEAD_STG_DESC+8, R0				      ; 4962
		         50	       04  C6 0010B 	    DIVL2   #4, R0						      ;
		         50	       04  C4 0010E 	    MULL2   #4, R0						      ;
	   00	         6E	       00  2C 00111 	    MOVC5   #0, (SP), #0, R0, @LAHEAD_STG_DESC+4		      ;
		    C8   BD	       50     00115									      ;
		    C4   AD	  CC   AD  B0 00118 	    MOVW    LEX_STG_DESC, LAHEAD_STG_DESC			      ; 4963
      C8   BD	    D0   BD	  CC   AD  28 0011D 	    MOVC3   LEX_STG_DESC, @LEX_STG_DESC+4, @LAHEAD_STG_DESC+4	      ; 4965
		         50	  04   AC  D0 00124 	    MOVL    PARSE_STG_DESC, R0					      ; 4968
		    7C   AE	       60  B0 00128 	    MOVW    (R0), LAST_STG_DESC					      ;
		    C0   AD	  04   A0  D0 0012C 	    MOVL    4(R0), LAST_STG_DESC+4				      ; 4969
				  CC   AD  9F 00131 	    PUSHAB  LEX_STG_DESC					      ; 4970
				       50  DD 00134 	    PUSHL   R0							      ;
	      00000000G  EF	       02  FB 00136 	    CALLS   #2, PAT$GET_A_TOKEN					      ;
		         5B	       50  D0 0013D 	    MOVL    R0, TOKEN						      ;
				       08  11 00140 	    BRB     11$							      ; 4958
		    10   AE	       01  D0 00142 10$:    MOVL    #1, SCAN_NEXT_SYM					      ; 4978

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 6-11
; Digital Equipment Corporation
;
		         5B	  20   AE  D0 00146 	    MOVL    NEXT_TOKEN, TOKEN					      ; 4979
				     0313  31 0014A 11$:    BRW     63$							      ; 4939
	      FFFFD8F2   8F	       58  D1 0014D 12$:    CMPL    ACTION_TO_TAKE, #-9998				      ; 4991
				       0F  14 00154 	    BGTR    13$							      ;
		         58	270E   C8  9E 00156 	    MOVAB   9998(R8), ACTION_TO_TAKE				      ; 4998
				  10   AE  D4 0015B 	    CLRL    SCAN_NEXT_SYM					      ; 4999
		         57	       02  C2 0015E 	    SUBL2   #2, STACK_POINTER					      ; 5000
		    20   AE	       5B  D0 00161 	    MOVL    TOKEN, NEXT_TOKEN					      ; 5001
		         58	       58  CE 00165 13$:    MNEGL   ACTION_TO_TAKE, ACTION_TO_TAKE			      ; 5004
		         50 00000000'EF48  9A 00168 	    MOVZBL  PAT_POP_TABLE[ACTION_TO_TAKE], R0			      ; 5006
		         50	       02  C4 00170 	    MULL2   #2, R0						      ;
		         57	       50  C2 00173 	    SUBL2   R0, STACK_POINTER					      ; 5005
		    04   AE	  2C AE47  3C 00176 	    MOVZWL  PARSE_STACK[STACK_POINTER], CUR_PARSE_STATE		      ; 5007
		         5B 00000000'EF48  9A 0017C 	    MOVZBL  PAT_LHS_TABLE[ACTION_TO_TAKE], TOKEN		      ; 5008
		    14   AE	       01  D0 00184 	    MOVL    #1, REDUCE_WAS_LAST					      ; 5009
				       57  DD 00188 	    PUSHL   STACK_POINTER					      ; 5014
		         7E 00000000'EF48  9A 0018A 	    MOVZBL  PAT_SEM_TABLE[ACTION_TO_TAKE], -(SP)		      ;
	      00000000V  EF	       02  FB 00192 	    CALLS   #2, MAR_REDUCTN					      ;
		         AE	       50  E8 00199 	    BLBS    R0, 11$						      ;
		         5A 00000000'EF48  9A 0019C 	    MOVZBL  PAT_SEM_TABLE[ACTION_TO_TAKE], R10			      ; 5016
		         06	       5A  91 001A4 	    CMPB    R10, #6						      ;
				       32  12 001A7 	    BNEQ    14$							      ;
		         50	  CC   AD  3C 001A9 	    MOVZWL  LEX_STG_DESC, R0					      ; 5018
		         50	       03  C0 001AD 	    ADDL2   #3, R0						      ;
		         50	       04  C6 001B0 	    DIVL2   #4, R0						      ;
				  02   A0  9F 001B3 	    PUSHAB  2(R0)						      ;
	      00000000G  EF	       01  FB 001B6 	    CALLS   #1, PAT$FREEZ					      ;
		         56	       50  D0 001BD 	    MOVL    R0, POINTER						      ;
      08   A6	    D0   BD	  CC   AD  28 001C0 	    MOVC3   LEX_STG_DESC, @LEX_STG_DESC+4, 8(POINTER)		      ;
		         66	  CC   AD  3C 001C7 	    MOVZWL  LEX_STG_DESC, (POINTER)				      ;
		    04   A6	  08   A6  9E 001CB 	    MOVAB   8(POINTER), 4(POINTER)				      ;
	      00000000GEF47	       56  D0 001D0 	    MOVL    POINTER, PAT$GL_SEMAN2[STACK_POINTER]		      ;
				     0285  31 001D8 	    BRW     63$							      ; 5016
		         0E	       5A  91 001DB 14$:    CMPB    R10, #14						      ;
				       03  13 001DE 	    BEQL    15$							      ;
				     009E  31 001E0 	    BRW     28$							      ;
		         52	  04   AC  D0 001E3 15$:    MOVL    PARSE_STG_DESC, R2					      ; 5019
		         54	  04   A2  D0 001E7 	    MOVL    4(R2), INPUT_PTR					      ;
		         55	       64  9A 001EB 	    MOVZBL  (INPUT_PTR), CHAR					      ;
				       53  D4 001EE 	    CLRL    COUNT						      ;
		         20	       55  D1 001F0 16$:    CMPL    CHAR, #32						      ;
				       05  13 001F3 	    BEQL    17$							      ;
		         09	       55  D1 001F5 	    CMPL    CHAR, #9						      ;
				       09  12 001F8 	    BNEQ    18$							      ;
				       53  D6 001FA 17$:    INCL    COUNT						      ;
				       54  D6 001FC 	    INCL    INPUT_PTR						      ;
		         55	       64  9A 001FE 	    MOVZBL  (INPUT_PTR), CHAR					      ;
				       ED  11 00201 	    BRB     16$							      ;
				       55  D5 00203 18$:    TSTL    CHAR						      ;
				       03  12 00205 	    BNEQ    19$							      ;
				     025D  31 00207 	    BRW     64$							      ;
				       53  D5 0020A 19$:    TSTL    COUNT						      ;
				       34  14 0020C 	    BGTR    22$							      ;
	      00000048   8F	       5B  D1 0020E 	    CMPL    TOKEN, #72						      ;
				       09  13 00215 	    BEQL    20$							      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 6-12
; Digital Equipment Corporation
;
	      00000063   8F	       5B  D1 00217 	    CMPL    TOKEN, #99						      ;
				       0F  12 0021E 	    BNEQ    21$							      ;
			    006D80C2   8F  DD 00220 20$:    PUSHL   #7176386						      ;
	      00000000G  00	       01  FB 00226 	    CALLS   #1, LIB$SIGNAL					      ;
				       13  11 0022D 	    BRB     22$							      ;
				  CC   AD  9F 0022F 21$:    PUSHAB  LEX_STG_DESC					      ;
				       01  DD 00232 	    PUSHL   #1							      ;
			    006D82D8   8F  DD 00234 	    PUSHL   #7176920						      ;
	      00000000G  00	       03  FB 0023A 	    CALLS   #3, LIB$SIGNAL					      ;
					   04 00241 	    RET     							      ;
		         62	       53  A2 00242 22$:    SUBW2   COUNT, (R2)						      ;
	   56	         54	       01  C3 00245 	    SUBL3   #1, INPUT_PTR, TEMP_PTR				      ;
				       53  D4 00249 	    CLRL    COUNT						      ;
				       55  D5 0024B 23$:    TSTL    CHAR						      ;
				       16  12 0024D 	    BNEQ    25$							      ;
				       53  D5 0024F 	    TSTL    COUNT						      ;
				       0D  14 00251 	    BGTR    24$							      ;
			    006D80C2   8F  DD 00253 	    PUSHL   #7176386						      ;
	      00000000G  00	       01  FB 00259 	    CALLS   #1, LIB$SIGNAL					      ;
		         66	       53  90 00260 24$:    MOVB    COUNT, (TEMP_PTR)					      ;
				       09  11 00263 	    BRB     26$							      ;
				       53  D6 00265 25$:    INCL    COUNT						      ;
				       54  D6 00267 	    INCL    INPUT_PTR						      ;
		         55	       64  9A 00269 	    MOVZBL  (INPUT_PTR), CHAR					      ;
				       DD  11 0026C 	    BRB     23$							      ;
				       56  DD 0026E 26$:    PUSHL   TEMP_PTR						      ;
	      00000000G  EF	       01  FB 00270 	    CALLS   #1, PAT$ADD_ARG					      ;
		    04   A2	       54  D0 00277 	    MOVL    INPUT_PTR, 4(R2)					      ;
		         62	       53  A2 0027B 	    SUBW2   COUNT, (R2)						      ;
				     01DF  31 0027E 27$:    BRW     63$							      ; 5016
		         27	       5A  91 00281 28$:    CMPB    R10, #39						      ;
				       09  12 00284 	    BNEQ    29$							      ;
				  04   AC  DD 00286 	    PUSHL   PARSE_STG_DESC					      ; 5020
		         7E	  5B   8F  9A 00289 	    MOVZBL  #91, -(SP)						      ;
				       44  11 0028D 	    BRB     34$							      ;
		         32	       5A  91 0028F 29$:    CMPB    R10, #50						      ; 5016
				       09  12 00292 	    BNEQ    30$							      ;
				  04   AC  DD 00294 	    PUSHL   PARSE_STG_DESC					      ; 5021
		         7E	  5C   8F  9A 00297 	    MOVZBL  #92, -(SP)						      ;
				       36  11 0029B 	    BRB     34$							      ;
		         23	       5A  91 0029D 30$:    CMPB    R10, #35						      ; 5016
				       09  12 002A0 	    BNEQ    31$							      ;
				  04   AC  DD 002A2 	    PUSHL   PARSE_STG_DESC					      ; 5022
		         7E	  5D   8F  9A 002A5 	    MOVZBL  #93, -(SP)						      ;
				       28  11 002A9 	    BRB     34$							      ;
		         1F	       5A  91 002AB 31$:    CMPB    R10, #31						      ; 5016
				       09  12 002AE 	    BNEQ    32$							      ;
				  04   AC  DD 002B0 	    PUSHL   PARSE_STG_DESC					      ; 5023
		         7E	  5E   8F  9A 002B3 	    MOVZBL  #94, -(SP)						      ;
				       1A  11 002B7 	    BRB     34$							      ;
		         34	       5A  91 002B9 32$:    CMPB    R10, #52						      ; 5016
				       09  12 002BC 	    BNEQ    33$							      ;
				  04   AC  DD 002BE 	    PUSHL   PARSE_STG_DESC					      ; 5024
		         7E	  5F   8F  9A 002C1 	    MOVZBL  #95, -(SP)						      ;
				       0C  11 002C5 	    BRB     34$							      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 6-13
; Digital Equipment Corporation
;
		         1B	       5A  91 002C7 33$:    CMPB    R10, #27						      ; 5016
				       12  12 002CA 	    BNEQ    35$							      ;
				  04   AC  DD 002CC 	    PUSHL   PARSE_STG_DESC					      ; 5025
		         7E	  60   8F  9A 002CF 	    MOVZBL  #96, -(SP)						      ;
	      00000000G  EF	       02  FB 002D3 34$:    CALLS   #2, PAT$PROMPT_READ					      ;
		         A1	       50  E8 002DA 	    BLBS    R0, 27$						      ;
					   04 002DD 	    RET     							      ;
		         28	       5A  91 002DE 35$:    CMPB    R10, #40						      ; 5016
				       03  13 002E1 	    BEQL    36$							      ;
				     00BD  31 002E3 	    BRW     49$							      ;
		         50 00000000G  EF  D0 002E6 36$:    MOVL    PAT$GB_MOD_PTR, R0					      ; 5026
		         11	  03   A0  E8 002ED 	    BLBS    3(R0), 37$						      ;
		         0D	  04   A0  E8 002F1 	    BLBS    4(R0), 37$						      ;
			    006D8288   8F  DD 002F5 	    PUSHL   #7176840						      ;
	      00000000G  00	       01  FB 002FB 	    CALLS   #1, LIB$SIGNAL					      ;
	      00000000'  EF	       01  D0 00302 37$:    MOVL    #1, QUOTE_INDIC					      ;
		         53	  04   AC  D0 00309 	    MOVL    PARSE_STG_DESC, R3					      ;
	   54	    04   A3	       01  C3 0030D 	    SUBL3   #1, 4(R3), INPUT_PTR				      ;
		         52	       54  D0 00312 	    MOVL    INPUT_PTR, TEMP_PTR					      ;
		         6E	       84  9A 00315 	    MOVZBL  (INPUT_PTR)+, DELIMITER				      ;
				       56  D4 00318 	    CLRL    COUNT						      ;
		         55	       84  9A 0031A 38$:    MOVZBL  (INPUT_PTR)+, CHAR					      ;
				       10  12 0031D 	    BNEQ    39$							      ;
			    006D829B   8F  DD 0031F 	    PUSHL   #7176859						      ;
	      00000000G  00	       01  FB 00325 	    CALLS   #1, LIB$SIGNAL					      ;
		         55	       6E  D0 0032C 	    MOVL    DELIMITER, CHAR					      ;
		         6E	       55  D1 0032F 39$:    CMPL    CHAR, DELIMITER					      ;
				       08  12 00332 	    BNEQ    40$							      ;
		         62	       56  90 00334 	    MOVB    COUNT, (TEMP_PTR)					      ;
				  FF   A4  94 00337 	    CLRB    -1(INPUT_PTR)					      ;
				       04  11 0033A 	    BRB     41$							      ;
				       56  D6 0033C 40$:    INCL    COUNT						      ;
				       DA  11 0033E 	    BRB     38$							      ;
		         51 00000000G  EF  D0 00340 41$:    MOVL    PAT$GB_MOD_PTR, R1					      ;
		         0A	  03   A1  E9 00347 	    BLBC    3(R1), 42$						      ;
	      00000000GEF47	       52  D0 0034B 	    MOVL    TEMP_PTR, PAT$GL_SEMAN1[STACK_POINTER]		      ;
				       3E  11 00353 	    BRB     48$							      ;
				  28   AE  D4 00355 42$:    CLRL    VALUE						      ;
		         04	       62  91 00358 	    CMPB    (TEMP_PTR), #4					      ;
				       07  1A 0035B 	    BGTRU   43$							      ;
		         50	       62  9A 0035D 	    MOVZBL  (TEMP_PTR), R0					      ;
				       50  D7 00360 	    DECL    R0							      ;
				       03  11 00362 	    BRB     44$							      ;
		         50	       03  D0 00364 43$:    MOVL    #3, R0						      ;
		         55	       01  CE 00367 44$:    MNEGL   #1, INDEX						      ;
				       07  11 0036A 	    BRB     46$							      ;
		    28 AE45	  01 A542  90 0036C 45$:    MOVB    1(INDEX)[TEMP_PTR], VALUE[INDEX]			      ;
	   F5	         55	       50  F3 00373 46$:    AOBLEQ  R0, INDEX, 45$					      ;
		    01   A1	       62  91 00377 	    CMPB    (TEMP_PTR), 1(R1)					      ;
				       0D  1B 0037B 	    BLEQU   47$							      ;
			    006D8033   8F  DD 0037D 	    PUSHL   #7176243						      ;
	      00000000G  00	       01  FB 00383 	    CALLS   #1, LIB$SIGNAL					      ;
	      00000000GEF47	  28   AE  D0 0038A 47$:    MOVL    VALUE, PAT$GL_SEMAN1[STACK_POINTER]			      ;
		    04   A3	       54  D0 00393 48$:    MOVL    INPUT_PTR, 4(R3)					      ;
		         50	       63  3C 00397 	    MOVZWL  (R3), R0						      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 6-14
; Digital Equipment Corporation
;
		         50	       56  C2 0039A 	    SUBL2   COUNT, R0						      ;
	   63	         50	       01  A3 0039D 	    SUBW3   #1, R0, (R3)					      ;
				       54  11 003A1 	    BRB     55$							      ; 5016
		         16	       5A  91 003A3 49$:    CMPB    R10, #22						      ;
				       16  12 003A6 	    BNEQ    50$							      ;
				       01  DD 003A8 	    PUSHL   #1							      ; 5027
				  CC   AD  9F 003AA 	    PUSHAB  LEX_STG_DESC					      ;
	      00000000G  EF	       02  FB 003AD 	    CALLS   #2, PAT$FIND_MODULE					      ;
	      00000000GEF47	       50  D0 003B4 	    MOVL    R0, PAT$GL_SEMAN1[STACK_POINTER]			      ;
				       76  11 003BC 	    BRB     59$							      ; 5016
		         21	       5A  91 003BE 50$:    CMPB    R10, #33						      ;
				       09  12 003C1 	    BNEQ    51$							      ;
				       01  DD 003C3 	    PUSHL   #1							      ; 5028
				       7E  D4 003C5 	    CLRL    -(SP)						      ;
				  CC   AD  9F 003C7 	    PUSHAB  LEX_STG_DESC					      ;
				       10  11 003CA 	    BRB     52$							      ;
		         24	       5A  91 003CC 51$:    CMPB    R10, #36						      ; 5016
				       14  12 003CF 	    BNEQ    53$							      ;
				       01  DD 003D1 	    PUSHL   #1							      ; 5029
			    00000000GEF47  DF 003D3 	    PUSHAL  PAT$GL_SEMAN1[STACK_POINTER]			      ;
				       7E  D4 003DA 	    CLRL    -(SP)						      ;
	      00000000G  EF	       03  FB 003DC 52$:    CALLS   #3, PAT$BUILD_PATH					      ;
				       7B  11 003E3 	    BRB     63$							      ; 5016
		         30	       5A  91 003E5 53$:    CMPB    R10, #48						      ;
				       01  13 003E8 	    BEQL    54$							      ;
					   04 003EA 	    RET     							      ;
				  CC   AD  9F 003EB 54$:    PUSHAB  LEX_STG_DESC					      ; 5030
				       57  DD 003EE 	    PUSHL   STACK_POINTER					      ;
	      00000000G  EF	       02  FB 003F0 	    CALLS   #2, PAT$TRANS_NAME					      ;
				       67  11 003F7 55$:    BRB     63$							      ; 5016
	      00000048   8F	       5B  D1 003F9 56$:    CMPL    TOKEN, #72						      ; 5044
				       1C  13 00400 	    BEQL    58$							      ;
		         0A	  7C   AE  B1 00402 	    CMPW    LAST_STG_DESC, #10					      ; 5051
				       04  1B 00406 	    BLEQU   57$							      ;
		    7C   AE	       0A  B0 00408 	    MOVW    #10, LAST_STG_DESC					      ; 5053
				  7C   AE  9F 0040C 57$:    PUSHAB  LAST_STG_DESC					      ; 5054
				       01  DD 0040F 	    PUSHL   #1							      ;
			    006D82D8   8F  DD 00411 	    PUSHL   #7176920						      ;
	      00000000G  00	       03  FB 00417 	    CALLS   #3, LIB$SIGNAL					      ;
	      00000063   8F	       5B  D1 0041E 58$:    CMPL    TOKEN, #99						      ; 5056
				       0F  13 00425 	    BEQL    60$							      ;
			    006D80C2   8F  DD 00427 	    PUSHL   #7176386						      ; 5058
	      00000000G  00	       01  FB 0042D 	    CALLS   #1, LIB$SIGNAL					      ;
				       2A  11 00434 59$:    BRB     63$							      ; 5056
				  CC   AD  9F 00436 60$:    PUSHAB  LEX_STG_DESC					      ; 5060
				       01  DD 00439 	    PUSHL   #1							      ;
			    006D82A0   8F  DD 0043B 	    PUSHL   #7176864						      ;
	      00000000G  00	       03  FB 00441 	    CALLS   #3, LIB$SIGNAL					      ;
				       16  11 00448 	    BRB     63$							      ; 4909
	      0000270C   8F	  18   AE  D1 0044A 61$:    CMPL    TRANSIT_CODE, #9996					      ; 5069
				       0A  12 00452 	    BNEQ    62$							      ;
		         59 00000000'EF49  32 00454 	    CVTWL   PAT_ACT_TABLE[J], J					      ; 5070
				       02  11 0045C 	    BRB     63$							      ; 5069
				       59  D6 0045E 62$:    INCL    J							      ; 5071
		         03	  0C   AE  E8 00460 63$:    BLBS    MATCH_TRANSIT, 64$					      ; 5073

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 6-15
; Digital Equipment Corporation
;
				     FBED  31 00464 	    BRW     2$							      ;
		         03	  1C   AE  E9 00467 64$:    BLBC    PARSE_MORE, 65$					      ; 5079
				     FBE2  31 0046B 	    BRW     1$							      ;
					   04 0046E 65$:    RET     							      ; 4752

; Routine Size:  1135 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 7
; Digital Equipment Corporation
;
;	5081	ROUTINE MAR_REDUCTN (ACTION_KEY, STACK_POINTER) =
;	5082	
;	5083	!++
;	5084	! Functional description:
;	5085	!
;	5086	!	Does the action associated with a reduction. The action is chosen
;	5087	!	based on the ACTION_KEY, which is the name of an action routine
;	5088	!	as specified in the semantics table.
;	5089	!
;	5090	! Calling sequence:
;	5091	!
;	5092	!	CALLS #2, MAR_REDUCTN
;	5093	!
;	5094	! Inputs:
;	5095	!
;	5096	!	ACTION_KEY	- name of the action routine
;	5097	!	STACK_POINTER	- top of stack in the context of the reduction
;	5098	!
;	5099	! Implicit inputs:
;	5100	!
;	5101	!	The names of the two parse stacks, PAT$GL_SEMAN1 and
;	5102	!	PAT$GL_SEMAN2.
;	5103	!
;	5104	! Outputs:
;	5105	!
;	5106	!	TRUE if the action occurred and does not want to cause a return
;	5107	!	from the parser.  Otherwise a FALSE.
;	5108	!
;	5109	!	none
;	5110	!
;	5111	! Routine value:
;	5112	!
;	5113	!	TRUE or FALSE
;	5114	!
;	5115	! Side effects:
;	5116	!
;	5117	!	The top of stack is often changed. Arguments are put into
;	5118	!	linked lists, context values are altered.
;	5119	!--
;	5120	
;	5121	BEGIN
;	5122	
;	5123	CASE .ACTION_KEY FROM 1 TO PATNONE OF
;	5124	
;	5125		SET
;	5126	
;	5127		[PATADDEXP]:	ADDITION (.STACK_POINTER);
;	5128		[PATALIBYT]:	SET_BYTE_BIT;
;	5129		[PATALILNG]:	SET_LONG_BIT;
;	5130		[PATALINM0]:	LINK_NAME(.STACK_POINTER);
;	5131		[PATALINM1]:	LINK_NAME(.STACK_POINTER + PAT$K_SPOS_ONE);
;	5132		[PATALIPAG]:	SET_PAGE_BIT;
;	5133		[PATALIQAD]:	SET_QUAD_BIT;
;	5134		[PATALIWRD]:	SET_WORD_BIT;
;	5135		[PATANDOPR]:	LOGICAL_AND (.STACK_POINTER);

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 7-1
; Digital Equipment Corporation
;
;	5136		[PATCHKNEC]:	SET_NOT_ECO_BIT (.STACK_POINTER);
;	5137		[PATCOMLIN]:	EXECUTE_CMD (.STACK_POINTER);
;	5138		[PATDEFONE]:	LINK_EXP_NAME (.STACK_POINTER + PAT$K_SPOS_ONE);
;	5139		[PATDEFTWO]:	LINK_EXP_NAME (.STACK_POINTER + PAT$K_SPOS_TWO);
;	5140		[PATDEFZER]:	LINK_EXP_NAME (.STACK_POINTER);
;	5141		[PATDIVEXP]:	DIVISION (.STACK_POINTER);
;	5142	!	[PATEQEXPR]:	EQ_EXPR (.STACK_POINTER);
;	5143		[PATEXITOK]:	LINK_EXIT;
;	5144		[PATEXPONE]:	LINK_ARG (.STACK_POINTER + PAT$K_SPOS_ONE);
;	5145		[PATEXPTWO]:	LINK_ARG (.STACK_POINTER + PAT$K_SPOS_TWO);
;	5146		[PATEXPZER]:	LINK_ARG (.STACK_POINTER);
;	5147		[PATEXTBIT]:	EXTRACT_BITS (.STACK_POINTER);
;	5148	!	[PATGEEXPR]:	GE_EXPR (.STACK_POINTER);
;	5149	!	[PATGTEXPR]:	GT_EXPR (.STACK_POINTER);
;	5150		[PATINDEXP]:	INDIRECTION (.STACK_POINTER);
;	5151	!	[PATLEEXPR]:	LE_EXPR (.STACK_POINTER);
;	5152	!	[PATLTEXPR]:	LT_EXPR (.STACK_POINTER);
;	5153		[PATMULEXP]:	MULTIPLICATION (.STACK_POINTER);
;	5154	!	[PATNEEXPR]:	NE_EXPR (.STACK_POINTER);
;	5155		[PATNEGEXP]:	NEGATION (.STACK_POINTER);
;	5156		[PATNOTOPR]:	COMPLEMENT (.STACK_POINTER);
;	5157		[PATNUMONE]:	LINK_NUM (.STACK_POINTER + PAT$K_SPOS_ONE);
;	5158		[PATNUMTWO]:	LINK_NUM (.STACK_POINTER + PAT$K_SPOS_TWO);
;	5159		[PATNUMZER]:	LINK_NUM (.STACK_POINTER);
;	5160		[PATOROPER]:	LOGICAL_OR (.STACK_POINTER);
;	5161		[PATOVROP2]:	SET_OVERR_MODE (.STACK_POINTER + PAT$K_SPOS_TWO);
;	5162		[PATOVROP1]:	SET_OVERR_MODE (.STACK_POINTER + PAT$K_SPOS_ONE);
;	5163		[PATPOSEXP]:	POSITIVE (.STACK_POINTER);
;	5164		[PATRANGE0]:	LINK_ARG_PAIR (.STACK_POINTER);
;	5165		[PATRANGE1]:	LINK_ARG_PAIR (.STACK_POINTER + PAT$K_SPOS_ONE);
;	5166		[PATRANGE2]:	LINK_ARG_PAIR (.STACK_POINTER + PAT$K_SPOS_TWO);
;	5167		[PATREMPAR]:	REMOVE_PARENS (.STACK_POINTER);
;	5168		[PATSETDEC]:	SET_DEC_OVERS;
;	5169		[PATSETECO]:	SET_ECO_BIT (.STACK_POINTER);
;	5170		[PATSETLIT]:	SET_LIT_BIT;
;	5171		[PATSETMDL]:	SET_MODULE_BIT;
;	5172		[PATSETMOD]:	SET_MODE_BIT;
;	5173		[PATSETPAT]:	SET_PATAREA_BIT;
;	5174		[PATSETSCO]:	SET_SCOPE_BIT;
;	5175		[PATSHFEXP]:	ARITH_SHIFT (.STACK_POINTER);
;	5176		[PATSUBEXP]:	SUBTRACTION (.STACK_POINTER);
;	5177		[PATNONE]:	0;
;	5178	
;	5179		[INRANGE, OUTRANGE]:
;	5180			RETURN FALSE;
;	5181	
;	5182		TES;
;	5183	
;	5184	RETURN TRUE
;	5185	END;






; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 7-2
; Digital Equipment Corporation
;
					 0FFC 0046F MAR_REDUCTN:
							    .WORD   Save R2,R3,R4,R5,R6,R7,R8,R9,R10,R11		      ; 5081
		         54 00000000G  EF  9E 00471 	    MOVAB   PAT$ADD_ARG, R4					      ;
		         55 00000000G  EF  9E 00478 	    MOVAB   PAT$GL_TAIL_LST, R5					      ;
		         56 00000000G  EF  9E 0047F 	    MOVAB   PAT$GL_SEMAN2, R6					      ;
		         57 00000000G  EF  9E 00486 	    MOVAB   PAT$GB_MOD_PTR, R7					      ;
		         58 00000000G  EF  9E 0048D 	    MOVAB   PAT$GL_CONTEXT, R8					      ;
		         59 00000000G  00  9E 00494 	    MOVAB   LIB$SIGNAL, R9					      ;
		         5A 00000000'  EF  9E 0049B 	    MOVAB   QUOTE_INDIC, R10					      ;
		         5B 00000000G  EF  9E 004A2 	    MOVAB   PAT$GL_SEMAN1, R11					      ;
	   39	         01	  04   AC  CF 004A9 	    CASEL   ACTION_KEY, #1, #57					      ; 5123
	 0306	       02E4	     02C3     004AE 1$:     .WORD   62$-1$,-						      ;
	 0389	       0096	     008D     004B4		    65$-1$,-						      ;
	 00A1	       00C0	     00A6     004BA		    69$-1$,-						      ;
	 0088	       0076	     00D6     004C0		    5$-1$,-						      ;
	 011E	       0389	     0338     004C6		    6$-1$,-						      ;
	 0334	       00AB	     00C6     004CC		    85$-1$,-						      ;
	 02A5	       0082	     00B0     004D2		    9$-1$,-						      ;
	 0234	       0328	     0389     004D8		    13$-1$,-						      ;
	 0389	       0219	     028E     004DE		    8$-1$,-						      ;
	 035A	       0354	     00FA     004E4		    16$-1$,-						      ;
	 0389	       036B	     0389     004EA		    2$-1$,-						      ;
	 0389	       0389	     0166     004F0		    4$-1$,-						      ;
	 0389	       0141	     01C9     004F6		    75$-1$,-						      ;
	 035F	       0365	     0389     004FC		    85$-1$,-						      ;
	 034E	       015C	     024C     00502		    22$-1$,-						      ;
	 0389	       037B	     0282     00508		    14$-1$,-						      ;
	 01AD	       0389	     0228     0050E		    10$-1$,-						      ;
	 026A	       0328	     0389     00514		    74$-1$,-						      ;
	 025B	       0189	     0240     0051A		    11$-1$,-						      ;
				     0385     00520		    3$-1$,-						      ;
								    59$-1$,-						      ;
								    85$-1$,-						      ;
								    72$-1$,-						      ;
								    46$-1$,-						      ;
								    58$-1$,-						      ;
								    44$-1$,-						      ;
								    85$-1$,-						      ;
								    19$-1$,-						      ;
								    77$-1$,-						      ;
								    78$-1$,-						      ;
								    85$-1$,-						      ;
								    82$-1$,-						      ;
								    85$-1$,-						      ;
								    29$-1$,-						      ;
								    85$-1$,-						      ;
								    85$-1$,-						      ;
								    41$-1$,-						      ;
								    25$-1$,-						      ;
								    85$-1$,-						      ;
								    85$-1$,-						      ;
								    81$-1$,-						      ;
								    79$-1$,-						      ;
								    49$-1$,-						      ;
								    27$-1$,-						      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 7-3
; Digital Equipment Corporation
;
								    76$-1$,-						      ;
								    56$-1$,-						      ;
								    83$-1$,-						      ;
								    85$-1$,-						      ;
								    45$-1$,-						      ;
								    85$-1$,-						      ;
								    38$-1$,-						      ;
								    85$-1$,-						      ;
								    72$-1$,-						      ;
								    53$-1$,-						      ;
								    47$-1$,-						      ;
								    33$-1$,-						      ;
								    51$-1$,-						      ;
								    84$-1$						      ;
				       5D  11 00522 	    BRB     15$							      ; 5180
		         50	  08   AC  D0 00524 2$:     MOVL    STACK_POINTER, R0					      ; 5127
		       6B40	  10 AB40  C0 00528 	    ADDL2   PAT$GL_SEMAN1+16[R0], PAT$GL_SEMAN1[R0]		      ;
				       3B  11 0052E 	    BRB     12$							      ; 5123
		         68	  40   8F  88 00530 3$:     BISB2   #64, PAT$GL_CONTEXT					      ; 5128
				       35  11 00534 	    BRB     12$							      ; 5123
		         68	       04  88 00536 4$:     BISB2   #4, PAT$GL_CONTEXT					      ; 5129
				       30  11 00539 	    BRB     12$							      ; 5123
		         50	  08   AC  D0 0053B 5$:     MOVL    STACK_POINTER, R0					      ; 5130
				     6640  DD 0053F 	    PUSHL   PAT$GL_SEMAN2[R0]					      ;
				       08  11 00542 	    BRB     7$							      ;
		         50	  08   AC  D0 00544 6$:     MOVL    STACK_POINTER, R0					      ; 5131
				  08 A640  DD 00548 	    PUSHL   PAT$GL_SEMAN2+8[R0]					      ;
				     01DC  31 0054C 7$:     BRW     55$							      ;
		         68	       20  88 0054F 8$:     BISB2   #32, PAT$GL_CONTEXT					      ; 5132
				       17  11 00552 	    BRB     12$							      ; 5123
		         68	       08  88 00554 9$:     BISB2   #8, PAT$GL_CONTEXT					      ; 5133
				       12  11 00557 	    BRB     12$							      ; 5123
		         68	       10  88 00559 10$:    BISB2   #16, PAT$GL_CONTEXT					      ; 5134
				       0D  11 0055C 	    BRB     12$							      ; 5123
		         50	  08   AC  D0 0055E 11$:    MOVL    STACK_POINTER, R0					      ; 5135
		         51	  10 AB40  D2 00562 	    MCOML   PAT$GL_SEMAN1+16[R0], R1				      ;
		       6B40	       51  CA 00567 	    BICL2   R1, PAT$GL_SEMAN1[R0]				      ;
				     02C5  31 0056B 12$:    BRW     84$							      ; 5123
		         68	       02  88 0056E 13$:    BISB2   #2, PAT$GL_CONTEXT					      ; 5136
				     0272  31 00571 	    BRW     75$							      ;
				  08   AC  DD 00574 14$:    PUSHL   STACK_POINTER					      ; 5137
	      00000000G  EF	       01  FB 00577 	    CALLS   #1, PAT$PERFORM_CMD					      ;
		         EA	       50  E8 0057E 	    BLBS    R0, 12$						      ;
				     02B3  31 00581 15$:    BRW     85$							      ;
		         50	       67  D0 00584 16$:    MOVL    PAT$GB_MOD_PTR, R0					      ; 5138
		         04	  03   A0  E8 00587 	    BLBS    3(R0), 17$						      ;
		         0C	  04   A0  E9 0058B 	    BLBC    4(R0), 18$						      ;
		         09	       6A  E8 0058F 17$:    BLBS    QUOTE_INDIC, 18$					      ;
			    006D8290   8F  DD 00592 	    PUSHL   #7176848						      ;
		         69	       01  FB 00598 	    CALLS   #1, LIB$SIGNAL					      ;
				       6A  D4 0059B 18$:    CLRL    QUOTE_INDIC						      ;
		         52	  08   AC  D0 0059D 	    MOVL    STACK_POINTER, R2					      ;
				  08 A642  DD 005A1 	    PUSHL   PAT$GL_SEMAN2+8[R2]					      ;
				     01FE  31 005A5 	    BRW     67$							      ;
		         50	       67  D0 005A8 19$:    MOVL    PAT$GB_MOD_PTR, R0					      ; 5139

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 7-4
; Digital Equipment Corporation
;
		         04	  03   A0  E8 005AB 	    BLBS    3(R0), 20$						      ;
		         0C	  04   A0  E9 005AF 	    BLBC    4(R0), 21$						      ;
		         09	       6A  E8 005B3 20$:    BLBS    QUOTE_INDIC, 21$					      ;
			    006D8290   8F  DD 005B6 	    PUSHL   #7176848						      ;
		         69	       01  FB 005BC 	    CALLS   #1, LIB$SIGNAL					      ;
				       6A  D4 005BF 21$:    CLRL    QUOTE_INDIC						      ;
		         52	  08   AC  D0 005C1 	    MOVL    STACK_POINTER, R2					      ;
				  10 A642  DD 005C5 	    PUSHL   PAT$GL_SEMAN2+16[R2]				      ;
				     01FC  31 005C9 	    BRW     71$							      ;
		         50	       67  D0 005CC 22$:    MOVL    PAT$GB_MOD_PTR, R0					      ; 5140
		         04	  03   A0  E8 005CF 	    BLBS    3(R0), 23$						      ;
		         0C	  04   A0  E9 005D3 	    BLBC    4(R0), 24$						      ;
		         09	       6A  E8 005D7 23$:    BLBS    QUOTE_INDIC, 24$					      ;
			    006D8290   8F  DD 005DA 	    PUSHL   #7176848						      ;
		         69	       01  FB 005E0 	    CALLS   #1, LIB$SIGNAL					      ;
				       6A  D4 005E3 24$:    CLRL    QUOTE_INDIC						      ;
		         52	  08   AC  D0 005E5 	    MOVL    STACK_POINTER, R2					      ;
				     6642  DD 005E9 	    PUSHL   PAT$GL_SEMAN2[R2]					      ;
				     0195  31 005EC 	    BRW     64$							      ;
		         52	  08   AC  D0 005EF 25$:    MOVL    STACK_POINTER, R2					      ; 5141
				  10 AB42  D5 005F3 	    TSTL    PAT$GL_SEMAN1+16[R2]				      ;
				       09  12 005F7 	    BNEQ    26$							      ;
			    006D8278   8F  DD 005F9 	    PUSHL   #7176824						      ;
		         69	       01  FB 005FF 	    CALLS   #1, LIB$SIGNAL					      ;
		       6B42	  10 AB42  C6 00602 26$:    DIVL2   PAT$GL_SEMAN1+16[R2], PAT$GL_SEMAN1[R2]		      ;
				       07  11 00608 	    BRB     28$							      ; 5123
		         50	       65  D0 0060A 27$:    MOVL    PAT$GL_TAIL_LST, R0					      ; 5143
		    08   A0	       0A  D0 0060D 	    MOVL    #10, 8(R0)						      ;
				     021F  31 00611 28$:    BRW     84$							      ; 5123
		         50	       67  D0 00614 29$:    MOVL    PAT$GB_MOD_PTR, R0					      ; 5144
		         04	  03   A0  E8 00617 	    BLBS    3(R0), 30$						      ;
		         0C	  04   A0  E9 0061B 	    BLBC    4(R0), 31$						      ;
		         09	       6A  E8 0061F 30$:    BLBS    QUOTE_INDIC, 31$					      ;
			    006D8290   8F  DD 00622 	    PUSHL   #7176848						      ;
		         69	       01  FB 00628 	    CALLS   #1, LIB$SIGNAL					      ;
				       6A  D4 0062B 31$:    CLRL    QUOTE_INDIC						      ;
		         50	  08   AC  D0 0062D 32$:    MOVL    STACK_POINTER, R0					      ;
				  08 AB40  DD 00631 	    PUSHL   PAT$GL_SEMAN1+8[R0]					      ;
				       21  11 00635 	    BRB     37$							      ;
		         50	       67  D0 00637 33$:    MOVL    PAT$GB_MOD_PTR, R0					      ; 5145
		         04	  03   A0  E8 0063A 	    BLBS    3(R0), 34$						      ;
		         0C	  04   A0  E9 0063E 	    BLBC    4(R0), 35$						      ;
		         09	       6A  E8 00642 34$:    BLBS    QUOTE_INDIC, 35$					      ;
			    006D8290   8F  DD 00645 	    PUSHL   #7176848						      ;
		         69	       01  FB 0064B 	    CALLS   #1, LIB$SIGNAL					      ;
				       6A  D4 0064E 35$:    CLRL    QUOTE_INDIC						      ;
		         50	  08   AC  D0 00650 36$:    MOVL    STACK_POINTER, R0					      ;
				  10 AB40  DD 00654 	    PUSHL   PAT$GL_SEMAN1+16[R0]				      ;
				     00D0  31 00658 37$:    BRW     55$							      ;
		         50	       67  D0 0065B 38$:    MOVL    PAT$GB_MOD_PTR, R0					      ; 5146
		         04	  03   A0  E8 0065E 	    BLBS    3(R0), 39$						      ;
		         0C	  04   A0  E9 00662 	    BLBC    4(R0), 40$						      ;
		         09	       6A  E8 00666 39$:    BLBS    QUOTE_INDIC, 40$					      ;
			    006D8290   8F  DD 00669 	    PUSHL   #7176848						      ;
		         69	       01  FB 0066F 	    CALLS   #1, LIB$SIGNAL					      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 7-5
; Digital Equipment Corporation
;
				       6A  D4 00672 40$:    CLRL    QUOTE_INDIC						      ;
				     00AD  31 00674 	    BRW     54$							      ;
		         52	  08   AC  D0 00677 41$:    MOVL    STACK_POINTER, R2					      ; 5147
		         53	     6B42  D0 0067B 	    MOVL    PAT$GL_SEMAN1[R2], VALUE				      ;
		         1F	  10 AB42  D1 0067F 	    CMPL    PAT$GL_SEMAN1+16[R2], #31				      ;
				       10  14 00684 	    BGTR    42$							      ;
		         1F	  20 AB42  D1 00686 	    CMPL    PAT$GL_SEMAN1+32[R2], #31				      ;
				       09  14 0068B 	    BGTR    42$							      ;
		    10 AB42	  20 AB42  D1 0068D 	    CMPL    PAT$GL_SEMAN1+32[R2], PAT$GL_SEMAN1+16[R2]		      ;
				       09  15 00694 	    BLEQ    43$							      ;
			    006D8280   8F  DD 00696 42$:    PUSHL   #7176832						      ;
		         69	       01  FB 0069C 	    CALLS   #1, LIB$SIGNAL					      ;
	   50	    10 AB42	  20 AB42  C3 0069F 43$:    SUBL3   PAT$GL_SEMAN1+32[R2], PAT$GL_SEMAN1+16[R2], R0	      ;
				       50  D6 006A7 	    INCL    R0							      ;
	   53	         50	  20 AB42  EF 006A9 	    EXTZV   PAT$GL_SEMAN1+32[R2], R0, VALUE, PAT$GL_SEMAN1[R2]	      ;
				     6B42     006AF									      ;
				       02  DD 006B1 	    PUSHL   #2							      ;
				       03  DD 006B3 	    PUSHL   #3							      ;
	      00000000G  EF	       02  FB 006B5 	    CALLS   #2, PAT$INIT_MODES					      ;
				       02  DD 006BC 	    PUSHL   #2							      ;
	      00000000G  EF	       01  FB 006BE 	    CALLS   #1, PAT$SET_MOD_LVL					      ;
				       73  11 006C5 	    BRB     57$							      ; 5123
		         50	  08   AC  D0 006C7 44$:    MOVL    STACK_POINTER, R0					      ; 5150
		         51	  08 AB40  D0 006CB 	    MOVL    PAT$GL_SEMAN1+8[R0], R1				      ;
		       6B40	       61  D0 006D0 	    MOVL    (R1), PAT$GL_SEMAN1[R0]				      ;
				       64  11 006D4 	    BRB     57$							      ; 5123
		         50	  08   AC  D0 006D6 45$:    MOVL    STACK_POINTER, R0					      ; 5153
		       6B40	  10 AB40  C4 006DA 	    MULL2   PAT$GL_SEMAN1+16[R0], PAT$GL_SEMAN1[R0]		      ;
				       58  11 006E0 	    BRB     57$							      ; 5123
		         50	  08   AC  D0 006E2 46$:    MOVL    STACK_POINTER, R0					      ; 5155
		       6B40	  08 AB40  CE 006E6 	    MNEGL   PAT$GL_SEMAN1+8[R0], PAT$GL_SEMAN1[R0]		      ;
				       0A  11 006EC 	    BRB     48$							      ; 5123
		         50	  08   AC  D0 006EE 47$:    MOVL    STACK_POINTER, R0					      ; 5156
		       6B40	  08 AB40  D2 006F2 	    MCOML   PAT$GL_SEMAN1+8[R0], PAT$GL_SEMAN1[R0]		      ;
				       75  11 006F8 48$:    BRB     61$							      ; 5123
		         09	       6A  E9 006FA 49$:    BLBC    QUOTE_INDIC, 50$					      ; 5157
			    006D8288   8F  DD 006FD 	    PUSHL   #7176840						      ;
		         69	       01  FB 00703 	    CALLS   #1, LIB$SIGNAL					      ;
				     FF24  31 00706 50$:    BRW     32$							      ;
		         09	       6A  E9 00709 51$:    BLBC    QUOTE_INDIC, 52$					      ; 5158
			    006D8288   8F  DD 0070C 	    PUSHL   #7176840						      ;
		         69	       01  FB 00712 	    CALLS   #1, LIB$SIGNAL					      ;
				     FF38  31 00715 52$:    BRW     36$							      ;
		         09	       6A  E9 00718 53$:    BLBC    QUOTE_INDIC, 54$					      ; 5159
			    006D8288   8F  DD 0071B 	    PUSHL   #7176840						      ;
		         69	       01  FB 00721 	    CALLS   #1, LIB$SIGNAL					      ;
		         50	  08   AC  D0 00724 54$:    MOVL    STACK_POINTER, R0					      ;
				     6B40  DD 00728 	    PUSHL   PAT$GL_SEMAN1[R0]					      ;
		         64	       01  FB 0072B 55$:    CALLS   #1, PAT$ADD_ARG					      ;
				       0A  11 0072E 	    BRB     57$							      ; 5123
		         50	  08   AC  D0 00730 56$:    MOVL    STACK_POINTER, R0					      ; 5160
		       6B40	  10 AB40  C8 00734 	    BISL2   PAT$GL_SEMAN1+16[R0], PAT$GL_SEMAN1[R0]		      ;
				       76  11 0073A 57$:    BRB     68$							      ; 5123
		         52	  08   AC  D0 0073C 58$:    MOVL    STACK_POINTER, R2					      ; 5161
				  10 AB42  DD 00740 	    PUSHL   PAT$GL_SEMAN1+16[R2]				      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 7-6
; Digital Equipment Corporation
;
				       02  DD 00744 	    PUSHL   #2							      ;
	      00000000G  EF	       02  FB 00746 	    CALLS   #2, PAT$SET_OVERS					      ;
	   7E	         52	       04  C1 0074D 	    ADDL3   #4, R2, -(SP)					      ;
				       15  11 00751 	    BRB     60$							      ;
		         52	  08   AC  D0 00753 59$:    MOVL    STACK_POINTER, R2					      ; 5162
				  08 AB42  DD 00757 	    PUSHL   PAT$GL_SEMAN1+8[R2]					      ;
				       02  DD 0075B 	    PUSHL   #2							      ;
	      00000000G  EF	       02  FB 0075D 	    CALLS   #2, PAT$SET_OVERS					      ;
	   7E	         52	       02  C1 00764 	    ADDL3   #2, R2, -(SP)					      ;
	      00000000G  EF	       01  FB 00768 60$:    CALLS   #1, PAT$SET_COMQUAL					      ;
				       6F  11 0076F 61$:    BRB     73$							      ; 5123
		         09	       6A  E9 00771 62$:    BLBC    QUOTE_INDIC, 63$					      ; 5164
			    006D8288   8F  DD 00774 	    PUSHL   #7176840						      ;
		         69	       01  FB 0077A 	    CALLS   #1, LIB$SIGNAL					      ;
		         52	  08   AC  D0 0077D 63$:    MOVL    STACK_POINTER, R2					      ;
				     6B42  DD 00781 	    PUSHL   PAT$GL_SEMAN1[R2]					      ;
		         64	       01  FB 00784 64$:    CALLS   #1, PAT$ADD_ARG					      ;
		         50	       65  D0 00787 	    MOVL    PAT$GL_TAIL_LST, R0					      ;
		    08   A0	  10 AB42  D0 0078A 	    MOVL    PAT$GL_SEMAN1+16[R2], 8(R0)				      ;
				       7F  11 00790 	    BRB     80$							      ; 5123
		         09	       6A  E9 00792 65$:    BLBC    QUOTE_INDIC, 66$					      ; 5165
			    006D8288   8F  DD 00795 	    PUSHL   #7176840						      ;
		         69	       01  FB 0079B 	    CALLS   #1, LIB$SIGNAL					      ;
		         52	  08   AC  D0 0079E 66$:    MOVL    STACK_POINTER, R2					      ;
				  08 AB42  DD 007A2 	    PUSHL   PAT$GL_SEMAN1+8[R2]					      ;
		         64	       01  FB 007A6 67$:    CALLS   #1, PAT$ADD_ARG					      ;
		         50	       65  D0 007A9 	    MOVL    PAT$GL_TAIL_LST, R0					      ;
		    08   A0	  18 AB42  D0 007AC 	    MOVL    PAT$GL_SEMAN1+24[R2], 8(R0)				      ;
				       7F  11 007B2 68$:    BRB     84$							      ; 5123
		         09	       6A  E9 007B4 69$:    BLBC    QUOTE_INDIC, 70$					      ; 5166
			    006D8288   8F  DD 007B7 	    PUSHL   #7176840						      ;
		         69	       01  FB 007BD 	    CALLS   #1, LIB$SIGNAL					      ;
		         52	  08   AC  D0 007C0 70$:    MOVL    STACK_POINTER, R2					      ;
				  10 AB42  DD 007C4 	    PUSHL   PAT$GL_SEMAN1+16[R2]				      ;
		         64	       01  FB 007C8 71$:    CALLS   #1, PAT$ADD_ARG					      ;
		         50	       65  D0 007CB 	    MOVL    PAT$GL_TAIL_LST, R0					      ;
		    08   A0	  20 AB42  D0 007CE 	    MOVL    PAT$GL_SEMAN1+32[R2], 8(R0)				      ;
				       5D  11 007D4 	    BRB     84$							      ; 5123
		         50	  08   AC  D0 007D6 72$:    MOVL    STACK_POINTER, R0					      ; 5167
		       6B40	  08 AB40  D0 007DA 	    MOVL    PAT$GL_SEMAN1+8[R0], PAT$GL_SEMAN1[R0]		      ;
				       51  11 007E0 73$:    BRB     84$							      ; 5123
		    02   A8	       04  88 007E2 74$:    BISB2   #4, PAT$GL_CONTEXT+2				      ; 5169
				       02  DD 007E6 75$:    PUSHL   #2							      ;
	      00000000G  EF	       01  FB 007E8 	    CALLS   #1, PAT$SET_MOD_LVL					      ;
				       15  DD 007EF 	    PUSHL   #21							      ;
				       03  DD 007F1 	    PUSHL   #3							      ;
	      00000000G  EF	       02  FB 007F3 	    CALLS   #2, PAT$SET_OVERS					      ;
				       37  11 007FA 	    BRB     84$							      ; 5123
		    03   A8	       02  88 007FC 76$:    BISB2   #2, PAT$GL_CONTEXT+3				      ; 5170
				       31  11 00800 	    BRB     84$							      ; 5123
		         68	  80   8F  88 00802 77$:    BISB2   #128, PAT$GL_CONTEXT				      ; 5171
				       2B  11 00806 	    BRB     84$							      ; 5123
		         68	       01  88 00808 78$:    BISB2   #1, PAT$GL_CONTEXT					      ; 5172
				       26  11 0080B 	    BRB     84$							      ; 5123
		    02   A8	       08  88 0080D 79$:    BISB2   #8, PAT$GL_CONTEXT+2				      ; 5173

; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 7-7
; Digital Equipment Corporation
;
				       20  11 00811 80$:    BRB     84$							      ; 5123
		    02   A8	       01  88 00813 81$:    BISB2   #1, PAT$GL_CONTEXT+2				      ; 5174
				       1A  11 00817 	    BRB     84$							      ; 5123
		         50	  08   AC  D0 00819 82$:    MOVL    STACK_POINTER, R0					      ; 5175
				  10 AB40  DF 0081D 	    PUSHAL  PAT$GL_SEMAN1+16[R0]				      ;
	 6B40	       6B40	       9E  78 00821 	    ASHL    @(SP)+, PAT$GL_SEMAN1[R0], PAT$GL_SEMAN1[R0]	      ;
				       0A  11 00827 	    BRB     84$							      ; 5123
		         50	  08   AC  D0 00829 83$:    MOVL    STACK_POINTER, R0					      ; 5176
		       6B40	  10 AB40  C2 0082D 	    SUBL2   PAT$GL_SEMAN1+16[R0], PAT$GL_SEMAN1[R0]		      ;
		         50	       01  D0 00833 84$:    MOVL    #1, R0						      ; 5184
					   04 00836 	    RET     							      ;
				       50  D4 00837 85$:    CLRL    R0							      ; 5081
					   04 00839 	    RET     							      ;

; Routine Size:  971 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:02:59	DBB3:[PATCH.SRC]PATPAR.B32;17					Page 8
; Digital Equipment Corporation
;
;	5186	END
;	5187	ELUDOM




							    .GLOBL  LIB$SIGNAL

;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  _PAT$PLIT      	  3032  NOWRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(0)
;  _PAT$OWN       	     4    WRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  _PAT$CODE      	  2106  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $CODE$         	     0  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582         6         0       223





; Size:		2106 code + 3036 data bytes
; Run Time:	01:56.7
; Elapsed Time:	02:53.5
; Memory Used:	667 pages
; Compilation Complete
