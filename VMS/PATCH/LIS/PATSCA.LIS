
; Bliss-32 7.352	Saturday 22-AUG-1978 03:16:51	DBB3:[PATCH.SRC]PATSCA.B32;13					Page 1
; Digital Equipment Corporation
;
;	0001	MODULE PATSCA (					! lexical scanner for PATCH
;	0002			%IF %VARIANT EQL 1
;     L 0003			%THEN
;	0004				ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE),
;	0005			%FI
;	0006			IDENT = 'X01.07'
;	0007			) =
;	0008	BEGIN
;	0009	
;	0010	!
;	0011	! COPYRIGHT (c) 1977,1978
;	0012	! DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;	0013	!
;	0014	! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
;	0015	! ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
;	0016	! INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
;	0017	! COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
;	0018	! OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
;	0019	! TRANSFERRED.
;	0020	!
;	0021	! THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
;	0022	! AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
;	0023	! CORPORATION.
;	0024	!
;	0025	! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
;	0026	! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;	0027	!
;	0028	
;	0029	!++
;	0030	! FACILITY:	PATCH
;	0031	!
;	0032	! ABSTRACT:
;	0033	!
;	0034	!	This module contains the routine called by the parser to get a
;	0035	!	token from the input line. It also contains the routine that
;	0036	!	translates an alpha string into a keyword token.
;	0037	!
;	0038	! ENVIRONMENT:	STARLET, user mode, interrupts disabled.
;	0039	!
;	0040	! AUTHOR: Carol Peters, CREATION DATE: 13 September 1977
;	0041	!
;	0042	! MODIFIED BY:
;	0043	!
;	0044	!	Kathleen Morse, 20 October 1977 : Version X01.00
;	0045	!
;	0046	! Revision History:
;	0047	!
;	0048	!  NO	DATE		PROGRAMMER		PURPOSE
;	0049	!  --	----		----------		-------
;	0050	!
;	0051	!  00	20-OCT-77	K.D. MORSE		ADAPT VERSION 2 FOR PATCH
;	0052	!  01	4-JAN-78	K.D. MORSE		NO CHANGES FOR VERS 3.
;	0053	!  02	24-JAN-78	K.D. MORSE		NO CHANGES FOR VERS 4.
;	0054	!  03	25-APR-78	K.D. MORSE		CONVERT TO NATIVE COMPILER.
;	0055	!  04	01-MAY-78	K.D. MORSE		CHANGE ALPHA TO ALPHA_STR_TOKEN.

; Bliss-32 7.352	Saturday 22-AUG-1978 03:16:51	DBB3:[PATCH.SRC]PATSCA.B32;13					Page 1-1
; Digital Equipment Corporation
;
;	0056	!  05	18-MAY-78	K.D. MORSE		PAT$GET_A_TOKEN SETS MODE LEVEL
;	0057	!						TO LOCAL BEFORE CALLING THE
;	0058	!						LEXICAL ROUTINE. (05)
;	0059	!						NO CHANGES FOR VERS 6.
;	0060	!  06	18-MAY-78	K.D. MORSE		NO CHANGES FOR VERS 7-8.
;	0061	!  07	13-JUN-78	K.D. MORSE		ADD FAO COUNTS TO SIGNALS.
;	0062	!
;	0063	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 03:16:51	DBB3:[PATCH.SRC]PATSCA.B32;13					Page 2
; Digital Equipment Corporation
;
;	0064	!
;	0065	! TABLE OF CONTENTS:
;	0066	!
;	0067	FORWARD ROUTINE
;	0068		PAT$GET_A_TOKEN,					! Extracts a token from the input buffer
;	0069		TRANS_LEXEME;						! Translates a lexeme into a token
;	0070	
;	0071	!
;	0072	! INCLUDE FILES:
;	0073	!
;	0074	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0075	REQUIRE 'SRC$:VXSMAC.REQ';
;	0115	REQUIRE 'SRC$:PATPCT.REQ';
;	0131	REQUIRE 'SRC$:PATGEN.REQ';
;	0310	REQUIRE 'SRC$:PATTER.REQ';			
;	0390	REQUIRE 'SRC$:SCALIT.REQ';
;	0431	REQUIRE 'SRC$:SYSSER.REQ';
;      R0439	SWITCHES LIST (SOURCE);
;      R0440	
;      R0441	EXTERNAL ROUTINE
;      R0442		PAT$fao_out;		! formats a line and outputs to the terminal
;      R0443	
;      R0444	SWITCHES LIST (NOSOURCE);
;	0489	REQUIRE 'SRC$:PATKEY.REQ';				
;	0590	
;	0591	!
;	0592	! MACROS:
;	0593	!
;	0594	
;	0595	!
;	0596	! EQUATED SYMBOLS:
;	0597	!
;	0598	
;	0599	!
;	0600	! OWN STORAGE:
;	0601	!
;	0602	
;	0603	!
;	0604	! EXTERNAL REFERENCES:
;	0605	!
;	0606	
;	0607	EXTERNAL ROUTINE
;	0608		PAT$SET_MOD_LVL,					! Routine to set the mode level
;	0609		PAT$MAR_GET_LEX;					! Lexical analyzer
;	0610	
;	0611	EXTERNAL
;	0612		PAT$GL_KEYW_TBL: VECTOR;				! Holds keywords for current syntax

; Bliss-32 7.352	Saturday 22-AUG-1978 03:16:51	DBB3:[PATCH.SRC]PATSCA.B32;13					Page 3
; Digital Equipment Corporation
;
;	0613	GLOBAL ROUTINE PAT$GET_A_TOKEN (INPUT_STG_DESC, LEXEME_STG_DESC) =	! Gets a token from input line
;	0614	
;	0615	!++
;	0616	! Functional description:
;	0617	!
;	0618	!	Extracts a lexeme from the input stream by calling the routine
;	0619	!	PAT$GET_MAR_LEXEME.  Translates the lexeme to a token (sometimes a
;	0620	!	null operation). Returns the token as the routine value and
;	0621	!	the ASCII string representing the token in the character string
;	0622	!	pointed to by the pointer field of lexeme_stg_desc. Also returns
;	0623	!	the actual length of the ASCII string of the lexeme in the
;	0624	!	length field of lexeme_stg_desc.
;	0625	!
;	0626	!	The pointer to the input buffer is updated and rewritten into
;	0627	!	the pointer field of INPUT_STG_DESC.
;	0628	!
;	0629	! Calling sequence:
;	0630	!
;	0631	!	CALL PAT$GET_A_TOKEN (INPUT_STG_DESC.rt.dd, LEXEME_STG_DESC.rt.dv)
;	0632	!
;	0633	! Inputs:
;	0634	!
;	0635	!	INPUT_STG_DESC	- string descriptor to the input buffer.
;	0636	!	LEXEME_STG_DESC	- varying string descriptor to the lexeme buffer.
;	0637	!
;	0638	! Implicit inputs:
;	0639	!
;	0640	!	none
;	0641	!
;	0642	! Outputs:
;	0643	!
;	0644	!	none
;	0645	!
;	0646	! Implicit outputs:
;	0647	!
;	0648	!	none
;	0649	!
;	0650	! Routine value:
;	0651	!
;	0652	!	an encoded representation of the token found.
;	0653	!
;	0654	! Side effects:
;	0655	!
;	0656	!	The mode level is set to local.
;	0657	!--
;	0658	
;	0659	BEGIN
;	0660	
;	0661	MAP
;	0662		LEXEME_STG_DESC: REF BLOCK [, BYTE];			! Descriptor of lexeme string
;	0663	
;	0664	LOCAL
;	0665		LEXEME_TYPE;						! Type of lexeme found
;	0666	
;	0667	!++

; Bliss-32 7.352	Saturday 22-AUG-1978 03:16:51	DBB3:[PATCH.SRC]PATSCA.B32;13					Page 3-1
; Digital Equipment Corporation
;
;	0668	! Fill the lexeme buffer with zeroes.
;	0669	!--
;	0670	ZEROCOR (.LEXEME_STG_DESC [DSC$A_POINTER], (.LEXEME_STG_DESC [DSC$W_MAXLEN] / 4));
;	0671	PAT$SET_MOD_LVL (LOCAL_MODE);					! Set mode level to local
;	0672	LEXEME_TYPE = PAT$MAR_GET_LEX (.INPUT_STG_DESC, .LEXEME_STG_DESC);
;	0673	IF (.LEXEME_TYPE EQL ALPHA_STR_TOKEN)
;	0674	THEN
;	0675		RETURN TRANS_LEXEME (.LEXEME_STG_DESC)
;	0676	ELSE
;	0677		RETURN .LEXEME_TYPE;
;	0678	END;								! End of PAT$GET_A_TOKEN


							    .TITLE  PATSCA
							    .IDENT  \X01.07\

							    .PSECT  _PAT$PLIT,NOWRT,NOEXE,0

					      00000 P.AAA:  .BYTE   1, 2, 5						      ;
					      00003 	    .ASCII  \ALIGN\						      ;
					      00008 	    .BYTE   17, 3, 3						      ;
					      0000B 	    .ASCII  \ALL\						      ;
					      0000E 	    .BYTE   18, 2, 3						      ;
					      00011 	    .ASCII  \AND\						      ;
					      00014 	    .BYTE   19, 2, 5						      ;
					      00017 	    .ASCII  \ASCII\						      ;
					      0001C 	    .BYTE   20, 1, 4						      ;
					      0001F 	    .ASCII  \BYTE\						      ;
					      00023 	    .BYTE   2, 2, 6						      ;
					      00026 	    .ASCII  \CANCEL\						      ;
					      0002C 	    .BYTE   3, 2, 5						      ;
					      0002F 	    .ASCII  \CHECK\						      ;
					      00034 	    .BYTE   4, 2, 6						      ;
					      00037 	    .ASCII  \CREATE\						      ;
					      0003D 	    .BYTE   7, 1, 7						      ;
					      00040 	    .ASCII  \DEPOSIT\						      ;
					      00047 	    .BYTE   21, 3, 7						      ;
					      0004A 	    .ASCII  \DECIMAL\						      ;
					      00051 	    .BYTE   5, 3, 6						      ;
					      00054 	    .ASCII  \DEFINE\						      ;
					      0005A 	    .BYTE   6, 3, 6						      ;
					      0005D 	    .ASCII  \DELETE\						      ;
					      00063 	    .BYTE   9, 1, 7						      ;
					      00066 	    .ASCII  \EXAMINE\						      ;
					      0006D 	    .BYTE   22, 2, 3						      ;
					      00070 	    .ASCII  \ECO\						      ;
					      00073 	    .BYTE   8, 2, 8						      ;
					      00076 	    .ASCII  \EVALUATE\						      ;
					      0007E 	    .BYTE   10, 3, 4						      ;
					      00081 	    .ASCII  \EXIT\						      ;
					      00085 	    .BYTE   25, 2, 7						      ;
					      00088 	    .ASCII  \GLOBALS\						      ;
					      0008F 	    .BYTE   27, 1, 11						      ;
					      00092 	    .ASCII  \HEXADECIMAL\					      ;
					      0009D 	    .BYTE   28, 1, 11						      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:16:51	DBB3:[PATCH.SRC]PATSCA.B32;13					Page 3-2
; Digital Equipment Corporation
;
					      000A0 	    .ASCII  \INSTRUCTION\					      ;
					      000AB 	    .BYTE   11, 4, 6						      ;
					      000AE 	    .ASCII  \INSERT\						      ;
					      000B4 	    .BYTE   30, 2, 7						      ;
					      000B7 	    .ASCII  \LITERAL\						      ;
					      000BE 	    .BYTE   31, 2, 4						      ;
					      000C1 	    .ASCII  \LONG\						      ;
					      000C5 	    .BYTE   33, 1, 4						      ;
					      000C8 	    .ASCII  \MODE\						      ;
					      000CC 	    .BYTE   34, 4, 6						      ;
					      000CF 	    .ASCII  \MODULE\						      ;
					      000D5 	    .BYTE   36, 3, 7						      ;
					      000D8 	    .ASCII  \NOASCII\						      ;
					      000DF 	    .BYTE   37, 3, 9						      ;
					      000E2 	    .ASCII  \NOGLOBALS\						      ;
					      000EB 	    .BYTE   38, 3, 13						      ;
					      000EE 	    .ASCII  \NOINSTRUCTION\					      ;
					      000FB 	    .BYTE   39, 4, 7						      ;
					      000FE 	    .ASCII  \NOSCOPE\						      ;
					      00105 	    .BYTE   40, 4, 9						      ;
					      00108 	    .ASCII  \NOSYMBOLS\						      ;
					      00111 	    .BYTE   41, 3, 3						      ;
					      00114 	    .ASCII  \NOT\						      ;
					      00117 	    .BYTE   42, 2, 5						      ;
					      0011A 	    .ASCII  \OCTAL\						      ;
					      0011F 	    .BYTE   43, 2, 2						      ;
					      00122 	    .ASCII  \OR\						      ;
					      00124 	    .BYTE   44, 3, 4						      ;
					      00127 	    .ASCII  \PAGE\						      ;
					      0012B 	    .BYTE   45, 3, 10						      ;
					      0012E 	    .ASCII  \PATCH_AREA\					      ;
					      00138 	    .BYTE   46, 1, 4						      ;
					      0013B 	    .ASCII  \QUAD\						      ;
					      0013F 	    .BYTE   12, 2, 7						      ;
					      00142 	    .ASCII  \REPLACE\						      ;
					      00149 	    .BYTE   47, 2, 5						      ;
					      0014C 	    .ASCII  \SCOPE\						      ;
					      00151 	    .BYTE   13, 2, 3						      ;
					      00154 	    .ASCII  \SET\						      ;
					      00157 	    .BYTE   14, 2, 4						      ;
					      0015A 	    .ASCII  \SHOW\						      ;
					      0015E 	    .BYTE   48, 2, 7						      ;
					      00161 	    .ASCII  \SYMBOLS\						      ;
					      00168 	    .BYTE   15, 1, 6						      ;
					      0016B 	    .ASCII  \UPDATE\						      ;
					      00171 	    .BYTE   16, 1, 6						      ;
					      00174 	    .ASCII  \VERIFY\						      ;
					      0017A 	    .BYTE   49, 1, 4						      ;
					      0017D 	    .ASCII  \WORD\						      ;
					      00181 	    .BYTE   0							      ;
					      00182	    .BLKB   2

						    KEYWORD_TABLE=	P.AAA
							    .GLOBL  PAT$FAO_OUT, PAT$SET_MOD_LVL, PAT$MAR_GET_LEX
							    .GLOBL  PAT$GL_KEYW_TBL

; Bliss-32 7.352	Saturday 22-AUG-1978 03:16:51	DBB3:[PATCH.SRC]PATSCA.B32;13					Page 3-3
; Digital Equipment Corporation
;

							    .PSECT  _PAT$CODE,NOWRT,2

					 007C 00000 	    .ENTRY  PAT$GET_A_TOKEN, Save R2,R3,R4,R5,R6		      ; 0613
		         56	  08   AC  D0 00002 	    MOVL    LEXEME_STG_DESC, R6					      ; 0670
		         50	  08   A6  3C 00006 	    MOVZWL  8(R6), R0						      ;
		         50	       04  C6 0000A 	    DIVL2   #4, R0						      ;
		         50	       04  C4 0000D 	    MULL2   #4, R0						      ;
	   00	         6E	       00  2C 00010 	    MOVC5   #0, (SP), #0, R0, @4(R6)				      ;
		    04   B6	       50     00014									      ;
				       03  DD 00017 	    PUSHL   #3							      ; 0671
	      00000000G  EF	       01  FB 00019 	    CALLS   #1, PAT$SET_MOD_LVL					      ;
				       56  DD 00020 	    PUSHL   R6							      ; 0672
				  04   AC  DD 00022 	    PUSHL   INPUT_STG_DESC					      ;
	      00000000G  EF	       02  FB 00025 	    CALLS   #2, PAT$MAR_GET_LEX					      ;
	      00000047   8F	       50  D1 0002C 	    CMPL    LEXEME_TYPE, #71					      ; 0673
				       09  12 00033 	    BNEQ    1$							      ;
				       56  DD 00035 	    PUSHL   R6							      ; 0675
	      00000000V  EF	       01  FB 00037 	    CALLS   #1, TRANS_LEXEME					      ;
					   04 0003E 1$:     RET     							      ; 0613

; Routine Size:  63 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:16:51	DBB3:[PATCH.SRC]PATSCA.B32;13					Page 4
; Digital Equipment Corporation
;
;	0679	ROUTINE TRANS_LEXEME (LEXEME_STG_DESC) =			! Translates a name into a keyword token
;	0680	
;	0681	!++
;	0682	! Functional description:
;	0683	!
;	0684	!	Maps an alphabetic string onto an element in the keyword table.
;	0685	!	If the alphabetic string does not match a keyword, then the
;	0686	!	token "alpha_str_token" is returned. If the alphabetic string does match
;	0687	!	a keyword, then the token for the keyword is abstracted from
;	0688	!	the keyword table and returned.
;	0689	!
;	0690	! Calling sequence:
;	0691	!
;	0692	!	CALL TRANS_LEXEME (LEXEME_STG_DESC.rt.dv)
;	0693	!
;	0694	! Inputs:
;	0695	!
;	0696	!	LEXEME_STG_DESC	- varying string descriptor for lexeme string
;	0697	!
;	0698	! Implicit inputs:
;	0699	!
;	0700	!	The keyword table for the PATCH language.
;	0701	!
;	0702	! Outputs:
;	0703	!
;	0704	!	none
;	0705	!
;	0706	! Implicit outputs:
;	0707	!
;	0708	!	none
;	0709	!
;	0710	! Routine value:
;	0711	!
;	0712	!	The token for the keyword that matches the ASCII string,
;	0713	!	or the "alpha_str_token" token, if no keyword matches the string.
;	0714	!
;	0715	! Side effects:
;	0716	!
;	0717	!	none
;	0718	!--
;	0719	
;	0720	BEGIN
;	0721	
;	0722	MAP
;	0723		LEXEME_STG_DESC: REF BLOCK [, BYTE];			! Lexeme string descriptor
;	0724	
;	0725	LOCAL
;	0726		KEYWORD_ENTRY : REF VECTOR [, BYTE];			! Address of a keyword record;
;	0727	
;	0728	KEYWORD_ENTRY = KEYWORD_TABLE [0];
;	0729	REPEAT
;	0730		BEGIN
;	0731		!++
;	0732		! If the length of the keyword is at least as long as the lexeme found,
;	0733		! and the lexeme found is at least as long as the abbreviation of the

; Bliss-32 7.352	Saturday 22-AUG-1978 03:16:51	DBB3:[PATCH.SRC]PATSCA.B32;13					Page 4-1
; Digital Equipment Corporation
;
;	0734		! keyword, then try to match the strings.
;	0735		!--
;	0736		IF (.KEYWORD_ENTRY [KWORD_LENGTH] GEQ .LEXEME_STG_DESC [DSC$W_LENGTH]) AND
;	0737		   (.LEXEME_STG_DESC [DSC$W_LENGTH] GEQ .KEYWORD_ENTRY [KWORD_ABBREV])
;	0738		THEN
;	0739			BEGIN
;	0740			!++
;	0741			! If a keyword match is found, return the token equivalent.
;	0742			!--
;	0743			IF CH$EQL (.LEXEME_STG_DESC [DSC$W_LENGTH],
;	0744					CH$PTR (.LEXEME_STG_DESC [DSC$A_POINTER]),
;	0745					.LEXEME_STG_DESC [DSC$W_LENGTH],
;	0746					CH$PTR (KEYWORD_ENTRY [KWORD_NAME]))
;	0747			THEN
;	0748				RETURN .KEYWORD_ENTRY [KWORD_TOKEN];
;	0749			END;
;	0750	
;	0751		!++
;	0752		! Keyword did not match. Advance the table pointer to
;	0753		! point to the next entry. If the first byte of this
;	0754		! next entry is zero, conclude that the table is
;	0755		! exhausted, and just return the alpha_str_token.
;	0756		!--
;	0757		KEYWORD_ENTRY = KEYWORD_ENTRY [0]
;	0758				+ .KEYWORD_ENTRY [KWORD_LENGTH] + KWORD_OVERHEAD;
;	0759		IF (.KEYWORD_ENTRY [KWORD_TOKEN] EQL 0)
;	0760		THEN
;	0761			RETURN ALPHA_STR_TOKEN;
;	0762		END;
;	0763	END;





					 003C 0003F TRANS_LEXEME:
							    .WORD   Save R2,R3,R4,R5					      ; 0679
		         54 00000000'  EF  9E 00041 	    MOVAB   KEYWORD_TABLE, KEYWORD_ENTRY			      ; 0728
		         55	  04   AC  D0 00048 	    MOVL    LEXEME_STG_DESC, R5					      ; 0736
		         50	  02   A4  9A 0004C 1$:     MOVZBL  2(KEYWORD_ENTRY), R0				      ;
		         65	       50  B1 00050 	    CMPW    R0, (R5)						      ;
				       15  1F 00053 	    BLSSU   2$							      ;
		         50	  01   A4  9A 00055 	    MOVZBL  1(KEYWORD_ENTRY), R0				      ; 0737
		         65	       50  B1 00059 	    CMPW    R0, (R5)						      ;
				       0C  1A 0005C 	    BGTRU   2$							      ;
      03   A4	    04   B5	       65  29 0005E 	    CMPC3   (R5), @4(R5), 3(KEYWORD_ENTRY)			      ; 0743
				       04  12 00064 	    BNEQ    2$							      ;
		         50	       64  9A 00066 	    MOVZBL  (KEYWORD_ENTRY), R0					      ; 0748
					   04 00069 	    RET     							      ;
		         50	  02   A4  9A 0006A 2$:     MOVZBL  2(KEYWORD_ENTRY), R0				      ; 0758
		         50	       54  C0 0006E 	    ADDL2   KEYWORD_ENTRY, R0					      ;
	   54	         50	       03  C1 00071 	    ADDL3   #3, R0, KEYWORD_ENTRY				      ;
				       64  95 00075 	    TSTB    (KEYWORD_ENTRY)					      ; 0759
				       D3  12 00077 	    BNEQ    1$							      ;
		         50	  47   8F  9A 00079 	    MOVZBL  #71, R0						      ; 0761

; Bliss-32 7.352	Saturday 22-AUG-1978 03:16:51	DBB3:[PATCH.SRC]PATSCA.B32;13					Page 4-2
; Digital Equipment Corporation
;
					   04 0007D 	    RET     							      ; 0679

; Routine Size:  63 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:16:51	DBB3:[PATCH.SRC]PATSCA.B32;13					Page 5
; Digital Equipment Corporation
;
;	0764	END								! End of module
;	0765	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  _PAT$PLIT      	   388  NOWRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(0)
;  _PAT$CODE      	   126  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $CODE$         	     0  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582         3         0       222





; Size:		126 code + 388 data bytes
; Run Time:	00:10.7
; Elapsed Time:	00:27.9
; Memory Used:	281 pages
; Compilation Complete
