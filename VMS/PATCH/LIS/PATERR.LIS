
; Bliss-32 7.352	Saturday 22-AUG-1978 02:59:09	DBB3:[PATCH.SRC]PATERR.B32;20					Page 1
; Digital Equipment Corporation
;
;	0001	MODULE PATERR ( %IF %VARIANT EQL 1
;     L 0002			%THEN
;	0003				ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE,
;	0004						 NONEXTERNAL = LONG_RELATIVE),
;	0005			%FI
;	0006			IDENT = 'X01.03'
;	0007			) =
;	0008	BEGIN
;	0009	
;	0010	!
;	0011	! COPYRIGHT (C) 1977
;	0012	! DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS 01754
;	0013	!
;	0014	! THIS SOFTWARE IS FURNISHED  UNDER A LICENSE FOR USE ONLY ON A SINGLE
;	0015	! COMPUTER  SYSTEM AND  MAY BE  COPIED ONLY WITH  THE INCLUSION OF THE
;	0016	! ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,
;	0017	! MAY NOT BE PROVIDED OR  OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
;	0018	! EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE
;	0019	! TERMS.  TITLE TO AND  OWNERSHIP OF THE  SOFTWARE  SHALL AT ALL TIMES
;	0020	! REMAIN IN DEC.
;	0021	!
;	0022	! THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE
;	0023	! AND SHOULD  NOT BE CONSTRUED  AS A COMMITMENT  BY DIGITAL  EQUIPMENT
;	0024	! CORPORATION.
;	0025	!
;	0026	! DEC ASSUMES  NO  RESPONSIBILITY  FOR  THE USE OR  RELIABILITY OF ITS
;	0027	! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
;	0028	
;	0029	!++
;	0030	! FACILITY: PATCH
;	0031	!
;	0032	! ABSTRACT: ERROR HANDLER
;	0033	!
;	0034	! ENVIRONMENT: IMAGE FILE PATCH UTILITY
;	0035	!
;	0036	! AUTHOR: K.D. MORSE	, CREATION DATE: 5-OCT-77
;	0037	!
;	0038	! MODIFICATIONS:
;	0039	!
;	0040	!  NO	DATE		PROGRAMMER		PURPOSE
;	0041	!  --	----		----------		-------
;	0042	!
;	0043	!  01	28-DEC-77	K.D. MORSE		RETURN NOT UNWIND ON INFORMATION.
;	0044	!  02	25-APR-78	K.D. MORSE		CONVERT TO NATIVE COMPILER.
;	0045	!  03	13-JUN-78	K.D. MORSE		CONVERT TO USE SYS$PUTMSG.  ADD
;	0046	!						NEW ROUTINE, JNL_ERRMSG.
;	0047	!
;	0048	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 02:59:09	DBB3:[PATCH.SRC]PATERR.B32;20					Page 2
; Digital Equipment Corporation
;
;	0049	!
;	0050	! TABLE OF CONTENTS:
;	0051	!
;	0052	
;	0053	FORWARD ROUTINE
;	0054		PAT$ERR_HANDLER,					! Error handler
;	0055		JNL_ERRMSG : NOVALUE,					! Action routine for SYSSYS$PUTMSG call
;	0056		PAT$ERROR_EXIT;						! Error exit routine
;	0057	
;	0058	!
;	0059	! INCLUDE FILES:
;	0060	!
;	0061	
;	0062	LIBRARY 'SYS$LIBRARY:STARLET.L32';				! System structure definitions
;	0063	REQUIRE 'SRC$:VXSMAC.REQ';
;	0103	REQUIRE 'SRC$:PATPCT.REQ';					! Define PSECTS
;	0119	REQUIRE 'LIB$:PATMSG.REQ';					! PATCH error message codes
;	0277	REQUIRE 'SRC$:PREFIX.REQ';
;	0460	REQUIRE 'SRC$:PATPRE.REQ';
;	0600	
;	0601	!
;	0602	! MACROS:
;	0603	!
;	0604	
;	0605	!
;	0606	! EQUATED SYMBOLS:
;	0607	!
;	0608	
;	0609	LITERAL
;	0610		EXCEPTION_NAME = 1;					! Offset to name of exception
;	0611	
;	0612	!
;	0613	! OWN STORAGE:
;	0614	!
;	0615	
;	0616	OWN
;	0617		JNL_PUT_MSG : VECTOR [5,LONG] INITIAL (			! SYS$PUTMSG argument list for journal error
;	0618						4,			! Count of arguments
;	0619						PAT$_JNLPUT,		! Error message code
;	0620						0,			! FAO argument count
;	0621						0,			! RMS error code
;	0622						0);			! STV error code
;	0623	
;	0624	!
;	0625	! EXTERNAL REFERENCES:
;	0626	!
;	0627	
;	0628	EXTERNAL ROUTINE
;	0629		SYS$PUTMSG,						! Outputs error messages
;	0630		PAT$END_OF_LINE,					! Resets for next command
;	0631		PAT$CLOSEFILES;						! Close all files
;	0632	
;	0633	EXTERNAL
;	0634		PAT$GL_FLAGS,						! CLI flags
;	0635		PAT$GL_INPRAB : BLOCK[,BYTE],				! RAB for input commands (SYS$INPUT)

; Bliss-32 7.352	Saturday 22-AUG-1978 02:59:09	DBB3:[PATCH.SRC]PATERR.B32;20					Page 2-1
; Digital Equipment Corporation
;
;	0636		PAT$GL_OUTRAB : BLOCK[,BYTE],				! RAB for output information (SYS$OUTPUT)
;	0637		PAT$GL_ERRRAB : BLOCK[,BYTE],				! RAB for error messages (SYS$ERROR)
;	0638		PAT$GL_JNLRAB : BLOCK[,BYTE],				! RAB for journal file
;	0639		PAT$GL_ERRCODE,						! Error code
;	0640		PAT$GL_ERRFAB : BLOCK[,BYTE],				! FAB for SYS$ERROR
;	0641		PAT$GL_INPFAB : BLOCK[,BYTE],				! FAB for SYS$INPUT
;	0642		PAT$GL_OUTFAB : BLOCK[,BYTE];				! FAB for SYS$OUTPUT

; Bliss-32 7.352	Saturday 22-AUG-1978 02:59:09	DBB3:[PATCH.SRC]PATERR.B32;20					Page 3
; Digital Equipment Corporation
;
;	0643	GLOBAL ROUTINE PAT$ERR_HANDLER (SIGNAL_ARG_PTR, MECH_ARG_PTR, ENABLE_ARG_PTR) =
;	0644	
;	0645	!++
;	0646	! FUNCTIONAL DESCRIPTION:
;	0647	!
;	0648	!	This routine is SIGNALled whenever an error occurs.  It calls
;	0649	!	the routine SYS$PUTMSG to output the error message to the journal
;	0650	!	file, SYS$ERROR, and SYS$OUTPUT (if different from SYS$OUTPUT).
;	0651	!	If the journal file output fails, then PATCH produces a corresponding
;	0652	!	message to the other channels and exits with an error status.
;	0653	!
;	0654	!	If the journal write was successful, then PATCH determines the
;	0655	!	error severity level and the type of patch session.  The following
;	0656	!	table shows the actions taken:
;	0657	!
;	0658	!	SEVERITY LEVEL		INTERACTIVE SESSION	BATCH SESSION
;	0659	!	FATAL				EXITS		    EXITS
;	0660	!	SEVERE				UNWINDS		    EXITS
;	0661	!	WARNING				UNWINDS		    EXITS
;	0662	!	INFORMATION			RETURNS		    RETURNS
;	0663	!
;	0664	!	All exits cause the files to be closed and the status code to
;	0665	!	be passed to CLI.  When PATCH unsinds, a new PATCH command is
;	0666	!	requested.
;	0667	!
;	0668	! FORMAL PARAMETERS:
;	0669	!
;	0670	!	SIGNAL_ARG_PTR - Address of the signal argument block
;	0671	!	MECH_ARG_PTR - Address of the mechanism argument block
;	0672	!	ENABLE_ARG_PTR - Address of the enable argument block, from bliss enable directive
;	0673	!			(NONE)
;	0674	!
;	0675	! IMPLICIT INPUTS:
;	0676	!
;	0677	!	The error messages must be already defined in the system and the
;	0678	!	output files open.
;	0679	!
;	0680	! IMPLICIT OUTPUTS:
;	0681	!
;	0682	!	none
;	0683	!
;	0684	! ROUTINE VALUE:
;	0685	!
;	0686	!	none
;	0687	!
;	0688	! COMPLETION CODES:
;	0689	!
;	0690	!	none
;	0691	!
;	0692	! SIDE EFFECTS:
;	0693	!
;	0694	!	The error message is written to the SYS$ERROR, journal file,
;	0695	!	and SYS$OUTPUT channels.
;	0696	!
;	0697	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 02:59:09	DBB3:[PATCH.SRC]PATERR.B32;20					Page 3-1
; Digital Equipment Corporation
;
;	0698	
;	0699	BEGIN
;	0700	
;	0701	LITERAL
;	0702		ARG_COUNT = 0,						! Offset to count of arguments
;	0703		ERR_CODE = 1;						! Offset to error code
;	0704	
;	0705	MAP
;	0706		SIGNAL_ARG_PTR : REF VECTOR,				! Signal argument block address
;	0707		MECH_ARG_PTR : REF VECTOR,				! Mechanism arguemtn block address
;	0708		ENABLE_ARG_PTR : REF VECTOR;				! FAO argument block address
;	0709	
;	0710	!++
;	0711	! Check for UNWIND exception.
;	0712	!--
;	0713	IF (.SIGNAL_ARG_PTR[EXCEPTION_NAME] EQL SS$_UNWIND)
;	0714	THEN
;	0715		RETURN SS$_RESIGNAL;
;	0716	
;	0717	!++
;	0718	! Cancel Control-O on SYS$ERROR and SYS$OUTPUT channels.
;	0719	!--
;	0720	PAT$GL_OUTRAB[RAB$L_ROP]=.PAT$GL_OUTRAB[RAB$L_ROP] OR RAB$M_CCO;
;	0721	PAT$GL_ERRRAB[RAB$L_ROP]=.PAT$GL_ERRRAB[RAB$L_ROP] OR RAB$M_CCO;
;	0722	
;	0723	!++
;	0724	! Decrement the count of arguments to eliminate the PC and access-violation.
;	0725	!--
;	0726	SIGNAL_ARG_PTR[ARG_COUNT] = .SIGNAL_ARG_PTR[ARG_COUNT] - 2;
;	0727	
;	0728	!++
;	0729	! Format the message and output it to SYS$ERROR and SYS$OUTPUT and the journal file.
;	0730	!--
;	0731	SYS$PUTMSG(.SIGNAL_ARG_PTR, JNL_ERRMSG, 0);
;	0732	
;	0733	!++
;	0734	! Restore the argument count.
;	0735	!--
;	0736	SIGNAL_ARG_PTR[ARG_COUNT] = .SIGNAL_ARG_PTR[ARG_COUNT] + 2;
;	0737	
;	0738	
;	0739	!++
;	0740	! Check if patch session is interactive or batch.  Check severity level of error.
;	0741	! Either exit, unwind, and/or return based on table described above.
;	0742	!--
;	0743	
;	0744	!++
;	0745	! First handle the interactive cases.
;	0746	!--
;	0747	IF (.PAT$GL_INPFAB[FAB$L_DEV] AND DEV$M_TRM) NEQ 0		! If this is interactive
;	0748	THEN
;	0749		BEGIN
;	0750		IF (.SIGNAL_ARG_PTR[ERR_CODE] AND MSG$K_FATAL) EQL MSG$K_FATAL	! If error was fatal
;	0751		THEN
;	0752			PAT$ERROR_EXIT(.SIGNAL_ARG_PTR[ERR_CODE]);	! Then exit

; Bliss-32 7.352	Saturday 22-AUG-1978 02:59:09	DBB3:[PATCH.SRC]PATERR.B32;20					Page 3-2
; Digital Equipment Corporation
;
;	0753		IF (.SIGNAL_ARG_PTR[ERR_CODE] AND MSG$K_INFO) NEQ MSG$K_INFO	! If not information msg
;	0754		THEN
;	0755			BEGIN
;	0756			PAT$END_OF_LINE(0);				! Reset for next command
;	0757			$UNWIND();					! Unwind to command processing frame
;	0758			END;
;	0759		END							! End of interactive handling
;	0760	
;	0761	!++
;	0762	! Now for a batch session.
;	0763	!--
;	0764	ELSE
;	0765		IF (.SIGNAL_ARG_PTR[ERR_CODE] AND MSG$K_INFO) NEQ MSG$K_INFO ! If not information msg
;	0766		THEN
;	0767			PAT$ERROR_EXIT(.SIGNAL_ARG_PTR[ERR_CODE]);	! Exit with error status
;	0768	
;	0769	!++
;	0770	! Reset the RAB so Control-O will work correctly.
;	0771	!--
;	0772	PAT$GL_OUTRAB[RAB$V_CCO]=FALSE;
;	0773	PAT$GL_ERRRAB[RAB$V_CCO]=FALSE;
;	0774	RETURN SS$_CONTINUE;
;	0775	END;								! End of PAT$ERR_HANDLER


							    .TITLE  PATERR
							    .IDENT  \X01.03\

							    .PSECT  _PAT$OWN,NOEXE,2

					      00000 JNL_PUT_MSG:
							    .LONG   4, 7176620, 0, 0, 0					      ;

						    ISE$C_SIZE==	20
						    TXT$C_SIZE==	4
						    PAL$C_SIZE==	16
						    ASD$C_SIZE==	9
						    FWR$C_SIZE==	24
							    .GLOBL  SYS$PUTMSG, PAT$END_OF_LINE, PAT$CLOSEFILES, PAT$GL_FLAGS
							    .GLOBL  PAT$GL_INPRAB, PAT$GL_OUTRAB, PAT$GL_ERRRAB, PAT$GL_JNLRAB
							    .GLOBL  PAT$GL_ERRCODE, PAT$GL_ERRFAB, PAT$GL_INPFAB, PAT$GL_OUTFAB
							    .GLOBL  SYS$UNWIND

							    .PSECT  _PAT$CODE,NOWRT,2

					 080C 00000 	    .ENTRY  PAT$ERR_HANDLER, Save R2,R3,R11			      ; 0643
		         5B 00000000V  EF  9E 00002 	    MOVAB   PAT$ERROR_EXIT, R11					      ;
		         52	  04   AC  D0 00009 	    MOVL    SIGNAL_ARG_PTR, R2					      ; 0713
		         53	  04   A2  D0 0000D 	    MOVL    4(R2), R3						      ;
	      00000920   8F	       53  D1 00011 	    CMPL    R3, #2336						      ;
				       06  12 00018 	    BNEQ    1$							      ;
		         50	0918   8F  3C 0001A 	    MOVZWL  #2328, R0						      ; 0715
					   04 0001F 	    RET     							      ;
	      00000000G  EF	  80   8F  88 00020 1$:     BISB2   #128, PAT$GL_OUTRAB+7				      ; 0720
	      00000000G  EF	  80   8F  88 00028 	    BISB2   #128, PAT$GL_ERRRAB+7				      ; 0721

; Bliss-32 7.352	Saturday 22-AUG-1978 02:59:09	DBB3:[PATCH.SRC]PATERR.B32;20					Page 3-3
; Digital Equipment Corporation
;
		         62	       02  C2 00030 	    SUBL2   #2, (R2)						      ; 0726
				       7E  D4 00033 	    CLRL    -(SP)						      ; 0731
			    00000000V  EF  9F 00035 	    PUSHAB  JNL_ERRMSG						      ;
				       52  DD 0003B 	    PUSHL   R2							      ;
	      00000000G  EF	       03  FB 0003D 	    CALLS   #3, SYS$PUTMSG					      ;
		         62	       02  C0 00044 	    ADDL2   #2, (R2)						      ; 0736
	   24 00000000G  EF	       02  E1 00047 	    BBC     #2, PAT$GL_INPFAB+64, 3$				      ; 0747
	   05	         53	       02  E1 0004F 	    BBC     #2, R3, 2$						      ; 0750
				       53  DD 00053 	    PUSHL   R3							      ; 0752
		         6B	       01  FB 00055 	    CALLS   #1, PAT$ERROR_EXIT					      ;
	   53	         02	       00  ED 00058 2$:     CMPZV   #0, #2, R3, #3					      ; 0753
				       03     0005C									      ;
				       20  13 0005D 	    BEQL    4$							      ;
				       7E  D4 0005F 	    CLRL    -(SP)						      ; 0756
	      00000000G  EF	       01  FB 00061 	    CALLS   #1, PAT$END_OF_LINE					      ;
				       7E  7C 00068 	    CLRQ    -(SP)						      ; 0757
	      00000000G  9F	       02  FB 0006A 	    CALLS   #2, @#SYS$UNWIND					      ;
				       0C  11 00071 	    BRB     4$							      ; 0747
	   53	         02	       00  ED 00073 3$:     CMPZV   #0, #2, R3, #3					      ; 0765
				       03     00077									      ;
				       05  13 00078 	    BEQL    4$							      ;
				       53  DD 0007A 	    PUSHL   R3							      ; 0767
		         6B	       01  FB 0007C 	    CALLS   #1, PAT$ERROR_EXIT					      ;
	      00000000G  EF	  80   8F  8A 0007F 4$:     BICB2   #128, PAT$GL_OUTRAB+7				      ; 0772
	      00000000G  EF	  80   8F  8A 00087 	    BICB2   #128, PAT$GL_ERRRAB+7				      ; 0773
		         50	       01  D0 0008F 	    MOVL    #1, R0						      ; 0774
					   04 00092 	    RET     							      ; 0643

; Routine Size:  147 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 02:59:09	DBB3:[PATCH.SRC]PATERR.B32;20					Page 4
; Digital Equipment Corporation
;
;	0776	ROUTINE JNL_ERRMSG (MSG_DESC) : NOVALUE =
;	0777	
;	0778	!++
;	0779	! FUNCTIONAL DESCRIPTION:
;	0780	!
;	0781	!	This routine is called by SYS$PUTMSG just before the message is output
;	0782	!	to SYS$ERROR and SYS$OUTPUT.  It writes the error message or informational
;	0783	!	message to the journal file.
;	0784	!
;	0785	! FORMAL PARAMETERS:
;	0786	!
;	0787	!	MSG_DESC - String descriptor for message
;	0788	!
;	0789	! IMPLICIT INPUTS:
;	0790	!
;	0791	!	The journal file is open for output.
;	0792	!
;	0793	! IMPLICIT OUTPUTS:
;	0794	!
;	0795	!	none
;	0796	!
;	0797	! ROUTINE VALUE:
;	0798	!
;	0799	!	none
;	0800	!
;	0801	! COMPLETION CODES:
;	0802	!
;	0803	!	none
;	0804	!
;	0805	! SIDE EFFECTS:
;	0806	!
;	0807	!	The message is written to the journal file.  If this cannot be
;	0808	!	done, then the routine causes another error message to be output
;	0809	!	and causes PATCH to exit.
;	0810	!
;	0811	!--
;	0812	
;	0813	BEGIN
;	0814	
;	0815	
;	0816	LOCAL
;	0817		LOCAL_ERR;						! Local error code
;	0818	
;	0819	MAP
;	0820		MSG_DESC : REF BLOCK[,BYTE];				! String descriptor for message
;	0821	
;	0822	!++
;	0823	! Check that the journal file has been opened.
;	0824	!--
;	0825	IF (.PAT$GL_FLAGS AND PAT$M_JOURNAL) EQL 0
;	0826	THEN
;	0827		RETURN;
;	0828	
;	0829	!++
;	0830	! Output the error message to the journal file.

; Bliss-32 7.352	Saturday 22-AUG-1978 02:59:09	DBB3:[PATCH.SRC]PATERR.B32;20					Page 4-1
; Digital Equipment Corporation
;
;	0831	!--
;	0832	PAT$GL_JNLRAB[RAB$W_RSZ]=.MSG_DESC[DSC$W_LENGTH];		! Set error message length
;	0833	PAT$GL_JNLRAB[RAB$L_RBF]=.MSG_DESC[DSC$A_POINTER];		! Set error message address
;	0834	IF NOT (LOCAL_ERR=$PUT(RAB=PAT$GL_JNLRAB))			! Output error to journal file
;	0835	THEN
;	0836		BEGIN
;	0837		!++
;	0838		! Unable to write to the journal file.  Report the error to the
;	0839		! error and output channels.  Then output the journal write error.
;	0840		!--
;	0841		PAT$GL_OUTRAB[RAB$W_RSZ]=.MSG_DESC[DSC$W_LENGTH];	! Set error message length
;	0842		PAT$GL_OUTRAB[RAB$L_RBF]=.MSG_DESC[DSC$A_POINTER];	! Set error message address
;	0843		$PUT(RAB=PAT$GL_OUTRAB);				! Output error to SYS$OUTPUT
;	0844		IF (.PAT$GL_ERRFAB[FAB$W_IFI] NEQ .PAT$GL_OUTFAB[FAB$W_IFI])
;	0845		THEN
;	0846			BEGIN
;	0847			PAT$GL_ERRRAB[RAB$W_RSZ]=.MSG_DESC[DSC$W_LENGTH]; ! Set error message length
;	0848			PAT$GL_ERRRAB[RAB$L_RBF]=.MSG_DESC[DSC$A_POINTER]; ! Set error message address
;	0849			$PUT(RAB=PAT$GL_ERRRAB);			! Output error to journal file
;	0850			END;
;	0851		JNL_PUT_MSG[3] = .LOCAL_ERR;
;	0852		JNL_PUT_MSG[4] = .PAT$GL_JNLRAB[RAB$L_STV];
;	0853		SYS$PUTMSG(JNL_PUT_MSG, 0, 0);					! Report journal PUT error
;	0854		PAT$ERROR_EXIT(PAT$_JNLPUT);				! Exit with error status
;	0855		END;
;	0856	RETURN;
;	0857	END;



							    .GLOBL  SYS$PUT

					 0F8C 00093 JNL_ERRMSG:
							    .WORD   Save R2,R3,R7,R8,R9,R10,R11				      ; 0776
		         57 00000000'  EF  9E 00095 	    MOVAB   JNL_PUT_MSG+12, R7					      ;
		         58 00000000G  EF  9E 0009C 	    MOVAB   PAT$GL_ERRRAB+34, R8				      ;
		         59 00000000G  EF  9E 000A3 	    MOVAB   PAT$GL_OUTRAB+34, R9				      ;
		         5A 00000000G  9F  9E 000AA 	    MOVAB   @#SYS$PUT, R10					      ;
		         5B 00000000G  EF  9E 000B1 	    MOVAB   PAT$GL_JNLRAB+34, R11				      ;
	   62 00000000G  EF	       01  E1 000B8 	    BBC     #1, PAT$GL_FLAGS, 2$				      ; 0825
		         52	  04   AC  D0 000C0 	    MOVL    MSG_DESC, R2					      ; 0832
		         6B	       62  B0 000C4 	    MOVW    (R2), PAT$GL_JNLRAB+34				      ;
		    06   AB	  04   A2  D0 000C7 	    MOVL    4(R2), PAT$GL_JNLRAB+40				      ; 0833
				  DE   AB  9F 000CC 	    PUSHAB  PAT$GL_JNLRAB					      ; 0834
		         6A	       01  FB 000CF 	    CALLS   #1, SYS$PUT						      ;
		         53	       50  D0 000D2 	    MOVL    R0, LOCAL_ERR					      ;
		         4A	       53  E8 000D5 	    BLBS    LOCAL_ERR, 2$					      ;
		         69	       62  B0 000D8 	    MOVW    (R2), PAT$GL_OUTRAB+34				      ; 0841
		    06   A9	  04   A2  D0 000DB 	    MOVL    4(R2), PAT$GL_OUTRAB+40				      ; 0842
				  DE   A9  9F 000E0 	    PUSHAB  PAT$GL_OUTRAB					      ; 0843
		         6A	       01  FB 000E3 	    CALLS   #1, SYS$PUT						      ;
	      00000000G  EF 00000000G  EF  B1 000E6 	    CMPW    PAT$GL_ERRFAB+2, PAT$GL_OUTFAB+2			      ; 0844
				       0E  13 000F1 	    BEQL    1$							      ;
		         68	       62  B0 000F3 	    MOVW    (R2), PAT$GL_ERRRAB+34				      ; 0847
		    06   A8	  04   A2  D0 000F6 	    MOVL    4(R2), PAT$GL_ERRRAB+40				      ; 0848

; Bliss-32 7.352	Saturday 22-AUG-1978 02:59:09	DBB3:[PATCH.SRC]PATERR.B32;20					Page 4-2
; Digital Equipment Corporation
;
				  DE   A8  9F 000FB 	    PUSHAB  PAT$GL_ERRRAB					      ; 0849
		         6A	       01  FB 000FE 	    CALLS   #1, SYS$PUT						      ;
		         67	       53  D0 00101 1$:     MOVL    LOCAL_ERR, JNL_PUT_MSG+12				      ; 0851
		    04   A7	  EA   AB  D0 00104 	    MOVL    PAT$GL_JNLRAB+12, JNL_PUT_MSG+16			      ; 0852
				       7E  7C 00109 	    CLRQ    -(SP)						      ; 0853
				  F4   A7  9F 0010B 	    PUSHAB  JNL_PUT_MSG						      ;
	      00000000G  EF	       03  FB 0010E 	    CALLS   #3, SYS$PUTMSG					      ;
			    006D81AC   8F  DD 00115 	    PUSHL   #7176620						      ; 0854
	      00000000V  EF	       01  FB 0011B 	    CALLS   #1, PAT$ERROR_EXIT					      ;
					   04 00122 2$:     RET     							      ; 0776

; Routine Size:  144 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 02:59:09	DBB3:[PATCH.SRC]PATERR.B32;20					Page 5
; Digital Equipment Corporation
;
;	0858	ROUTINE PAT$ERROR_EXIT(ERR_CODE) =				! Error exit routine
;	0859	
;	0860	!++
;	0861	! FUNCTIONAL DESCRIPTION:
;	0862	!
;	0863	!	This routine exits with an error status code.
;	0864	!
;	0865	! FORMAL PARAMETERS:
;	0866	!
;	0867	!	ERR_CODE - Error status code
;	0868	!
;	0869	! IMPLICIT INPUTS:
;	0870	!
;	0871	!	none
;	0872	!
;	0873	! IMPLICIT OUTPUTS:
;	0874	!
;	0875	!	none
;	0876	!
;	0877	! ROUTINE VALUE:
;	0878	!
;	0879	!	none
;	0880	!
;	0881	! COMPLETION CODES:
;	0882	!
;	0883	!	All kinds of error status codes and success codes.
;	0884	!
;	0885	! SIDE EFFECTS:
;	0886	!
;	0887	!	none
;	0888	!
;	0889	!--
;	0890	
;	0891	BEGIN
;	0892	
;	0893	$EXIT(CODE=.ERR_CODE);						! Exit with status
;	0894	END;								! End of PAT$ERROR_EXIT



							    .GLOBL  SYS$EXIT

					 0000 00123 PAT$ERROR_EXIT:
							    .WORD   Save nothing					      ; 0858
				  04   AC  DD 00125 	    PUSHL   ERR_CODE						      ; 0893
	      00000000G  9F	       01  FB 00128 	    CALLS   #1, @#SYS$EXIT					      ;
				       50  D4 0012F 	    CLRL    R0							      ; 0858
					   04 00131 	    RET     							      ;

; Routine Size:  15 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 02:59:09	DBB3:[PATCH.SRC]PATERR.B32;20					Page 6
; Digital Equipment Corporation
;
;	0895	END								! End of PATERR
;	0896	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  _PAT$OWN       	    20    WRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  _PAT$CODE      	   306  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $CODE$         	     0  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]STARLET.L32;1		      2688        21         0       125





; Size:		306 code + 20 data bytes
; Run Time:	00:20.2
; Elapsed Time:	00:31.0
; Memory Used:	193 pages
; Compilation Complete
