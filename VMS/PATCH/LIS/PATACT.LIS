
; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 1
; Digital Equipment Corporation
;
;	0001	MODULE PATACT (
;	0002			%IF %VARIANT EQL 1
;     L 0003			%THEN
;	0004				ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE),
;	0005			%FI
;	0006			IDENT = 'X01.23') =
;	0007	BEGIN
;	0008	
;	0009	!
;	0010	! COPYRIGHT (c) 1977,1978
;	0011	! DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;	0012	!
;	0013	! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
;	0014	! ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
;	0015	! INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
;	0016	! COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
;	0017	! OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
;	0018	! TRANSFERRED.
;	0019	!
;	0020	! THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
;	0021	! AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
;	0022	! CORPORATION.
;	0023	!
;	0024	! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
;	0025	! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;	0026	!
;	0027	
;	0028	!++
;	0029	! FACILITY:	PATCH
;	0030	!
;	0031	! ABSTRACT:
;	0032	!
;	0033	!	End of command line action routine plus a few other parsing
;	0034	!	action routines.
;	0035	!
;	0036	! ENVIRONMENT:	STARLET, user mode, interrupts disabled.
;	0037	!
;	0038	! Version:	X01.23
;	0039	!
;	0040	! History:
;	0041	!	Author:
;	0042	!		Carol Peters, 03 Jul 1976: Version 01
;	0043	!
;	0044	!
;	0045	! MODIFICATIONS:
;	0046	!
;	0047	!  NO	DATE		PROGRAMMER		PURPOSE
;	0048	!  --	----		----------		-------
;	0049	!
;	0050	!  00	19-OCT-77	K.D. MORSE		ADAPT VERSION 41 FOR PATCH.
;	0051	!  01	4-JAN-78	K.D. MORSE		NO CHANGES FOR VERS 42-51.
;	0052	!						ADD SET AND CANCEL MODULE. (52)
;	0053	!						NO CHANGES FOR 53.
;	0054	!  02	4-JAN-78	K.D. MORSE		CORRECT INIT_MODES TO INITIALIZE
;	0055	!						MODES TO OVERRIDE LEVEL NOT

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 1-1
; Digital Equipment Corporation
;
;	0056	!						LOCAL.  VERS 54
;	0057	!  03	4-JAN-78	K.D. MORSE		MODIFY REFERENCES TO POSITIONS
;	0058	!						ON PARSE STACK TO USE LITERAL
;	0059	!						NAMES FROM PATMSG.REQ. (55)
;	0060	!						NO CHANGES FOR VERS 56+57.
;	0061	!  04	23-JAN-78	K.D. MORSE		CHANGE PAT$CP_INP_STR TO A
;	0062	!						VECTOR OF INPUT DESCRIPTORS,
;	0063	!						PAT$CP_INP_DSCS.
;	0064	!  05	24-JAN-78	K.D. MORSE		NO CHANGES FOR 58.
;	0065	!  06	11-FEB-78	K.D. MORSE		ADD OUTPUT TO COMMAND FILE.
;	0066	!  07	23-FEB-78	K.D. MORSE		ADD ROUTINE WRITE_CMD.
;	0067	!  08	28-FEB-78	K.D. MORSE		CALL TO SET_MODULE NOW HAS
;	0068	!						1 PARAMETER.  NOW "SET SCOPE"
;	0069	!						CAN IMPLY "SET MODULE". (59)
;	0070	!  09	6-MAR-78	K.D. MORSE		ADD /UPDATE TEST IF COMMAND
;	0071	!						SHOULD BE EXECUTED OR SKIPPED.
;	0072	!  10	7-MAR-78	K.D. MORSE		ADD CALL TO PAT$ADD_PAL FOR THE
;	0073	!						"SET PATCH_AREA" COMMAND.
;	0074	!  11	24-MAR-78	K.D. MORSE		NONE FOR VERS 60.
;	0075	!  12	04-APR-78	K.D. MORSE		NONE FOR VERS 61-62.
;	0076	!  13	14-APR-78	K.D. MORSE		CHANGE SET, SHOW AND CANCEL
;	0077	!						COMMANDS TO USE SELECTONE (63).
;	0078	!						NO CHANGES FOR VERS 64-67.
;	0079	!  14	18-APR-78	K.D. MORSE		ADD CODE FOR COMMAND FILE OPEN
;	0080	!						AND SHOW PATCH_AREA VERBS.
;	0081	!  15	25-APR-78	K.D. MORSE		CONVERT TO NATIVE COMPILER.
;	0082	!  16	28-APR-78	K.D. MORSE		ADD CODE TO DELETE ASSEMBLER
;	0083	!						DIRECTIVE TABLE AFTER EACH COMMAND.
;	0084	!  17	12-MAY-78	K.D. MORSE		NO CHANGES FOR 68,70.
;	0085	!						CHANGE PAT$SET_OVERS TO TAKE
;	0086	!						THE TOKEN INSTEAD OF A STACK
;	0087	!						POINTER AS AN ARGUMENT. (69)
;	0088	!						END_OF_CMD NOW CALLS DELETE_
;	0089	!						PATH DIRECTLY TO THROW AWAY
;	0090	!						PARTIALLY-COLLECTED PATHNAMES
;	0091	!						INSTEAD OF CALLING BUILD_PATH (71).
;	0092	!  18	18-MAY-78	K.D. MORSE		NO CHANGES FOR VERS. 72-75.
;	0093	!  19	18-MAY-78	K.D. MORSE		NO CHANGES FOR VERS. 76.
;	0094	!						DBG$RESET_DEF BECAME DBG$SET_MOD_DEF.
;	0095	!  20	13-JUN-78	K.D. MORSE		ADD FAO COUNTS TO SIGNALS.
;	0096	!  21	15-JUN-78	K.D. MORSE		ALWAYS CALL WRITE_CMD TO
;	0097	!						OUTPUT APPENDED COMMAND TEXT.
;	0098	!  22	19-JUN-78	K.D. MORSE		NO CHANGES FOR VERS. 77-80.
;	0099	!  23	28-JUN-78	K.D. MORSE		NO CHANGES FOR VERS 81-85.
;	0100	!
;	0101	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 2
; Digital Equipment Corporation
;
;	0102	FORWARD ROUTINE
;	0103		PAT$END_OF_CMD : NOVALUE,				! End of command processing routine
;	0104		PAT$END_OF_LINE : NOVALUE,				! End of command line processing routine
;	0105		PAT$PERFORM_CMD,					! Executes a patch command
;	0106		WRITE_CMD : NOVALUE,					! Writes command line to command file
;	0107		PAT$SET_OVERS : NOVALUE,				! Sets mode level to local or override level
;	0108		PAT$SET_COMQUAL: NOVALUE,				! Sets bit to indicate qualifier in command line
;	0109		PAT$GET_COMQUAL : NOVALUE;				! Finds all command qualifiers specified
;	0110	
;	0111	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0112	REQUIRE 'SRC$:PATPCT.REQ';
;	0128	REQUIRE 'SRC$:VXSMAC.REQ';
;	0168	REQUIRE 'SRC$:PATGEN.REQ';
;	0347	REQUIRE 'SRC$:BSTRUC.REQ';
;	0398	REQUIRE 'SRC$:DLLNAM.REQ';
;	0431	REQUIRE 'SRC$:LISTEL.REQ';
;	0450	REQUIRE 'LIB$:PATMSG.REQ';
;	0608	REQUIRE 'SRC$:PATTER.REQ';
;	0688	REQUIRE 'SRC$:SYSSER.REQ';
;      R0696	SWITCHES LIST (SOURCE);
;      R0697	
;      R0698	EXTERNAL ROUTINE
;      R0699		PAT$fao_out;		! formats a line and outputs to the terminal
;      R0700	
;      R0701	SWITCHES LIST (NOSOURCE);
;	0746	REQUIRE 'SRC$:PREFIX.REQ';
;	0929	REQUIRE 'SRC$:PATPRE.REQ';
;	1069	REQUIRE 'SRC$:PATRST.REQ';
;	2127	
;	2128	EXTERNAL ROUTINE
;	2129		PAT$ADD_PAL,						! Adds patch area to list
;	2130		PAT$ALIGN_CMD,						! Align command
;	2131		PAT$DELETE_PATH,					! Free up pathname storage
;	2132		PAT$CANC_MODULE,					! Cancels symbols for modules
;	2133		PAT$DEFINE_SYM,						! Define command
;	2134		PAT$DEPOSIT_CMD,					! Deposit command
;	2135		PAT$ECO_CMDS,						! Set eco level and check eco level commands
;	2136		PAT$EXAMINE_CMD,					! Examine command
;	2137		PAT$FAO_PUT,						! Formats an FAO line
;	2138		PAT$FILL_BUF,						! Updates and enlarges a buffer from a string descriptor
;	2139		PAT$FREE_ARG,						! Frees elements of a command argument list
;	2140		PAT$FREERELEASE,					! Releases storage in dynamic allocation area
;	2141		PAT$INIT_MODES,						! Initializes modes
;	2142		PAT$MAP_ADDR : NOVALUE,					! Maps a virtual address
;	2143		PAT$OPEN_COMFIL : NOVALUE,				! Opens command file for output
;	2144		PAT$OUT_MEM_LOC,					! Outputs values to output device
;	2145		PAT$REPLACE_CMD,					! Replace command
;	2146		PAT$RESET_DEF,						! Resets modes to initialization mode
;	2147		PAT$SAVE_SCOPE,						! Saves a current path name
;	2148		PAT$SET_CONTEXT,					! Initializes context bits
;	2149		PAT$SET_MODULE,						! Sets up symbols for modules
;	2150		PAT$SET_MOD_LST,					! Sets mode list
;	2151		PAT$SET_MOD_LVL,					! Sets mode pointer
;	2152		PAT$SET_NEW_MOD,					! Sets new modes
;	2153		PAT$SHOW_DEFAL,						! Show default command

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 2-1
; Digital Equipment Corporation
;
;	2154		PAT$SHOW_MODULE,					! Show module command
;	2155		PAT$SHOW_SCOPE,						! Show scope command
;	2156		PAT$WRITE_EXP1 : NOVALUE,				! Writes expressions to the command file
;	2157		PAT$WRITEFILE : NOVALUE,				! Writes data to a file
;	2158		PAT$WRITE_INS : NOVALUE,				! Writes instruction-type command arguments to the command file
;	2159		PAT$WRITE_NAME : NOVALUE,				! Writes names to the command file
;	2160		PAT$WRTIMG : NOVALUE;					! Writes out new patched image
;	2161	
;	2162	EXTERNAL
;	2163		PAT$GB_MOD_PTR : REF VECTOR[,BYTE],			! Current mode pointer
;	2164		PAT$GL_ECO_UPD : BITVECTOR,				! Update qualifier eco mask
;	2165		PAT$GB_EXEC_CMD : BYTE,					! Indicator whether or not to execute patch command
;	2166		PAT$GL_CSP_PTR : REF PATHNAME_VECTOR,			! Current scope position
;	2167		PAT$GL_COMQUAL : BITVECTOR,				! Command qualifier indicators
;	2168		PAT$GL_IHPPTR : REF BLOCK[,BYTE],			! Pointer to patch section of image header
;	2169		PAT$CP_OUT_STR,						! Pointer to output buffer
;	2170		PAT$GL_BUF_SIZ,						! Size of data written into output buffer
;	2171		PAT$GL_COMRAB,						! Command file RAB
;	2172		PAT$GL_FLAGS,						! CLI flags
;	2173		PAT$GL_RLOC_BUF : BLOCK[,BYTE],				! Descriptor for relocation buffer
;	2174		PAT$GL_TEMP_BUF : BLOCK[,BYTE],				! Descriptor temporary deposit buffer
;	2175		PAT$GL_OLD_ASD : BLOCK[,BYTE],				! Descriptor for old contents assembler directive table
;	2176		PAT$GL_NEW_ASD : BLOCK[,BYTE],				! Descriptor for new contents assembler directive table
;	2177		PAT$GB_SUBST_IN : VECTOR[,BYTE],			! Buffer for substitution instructions
;	2178		PAT$GL_FWRLHD,						! FoWard Reference table listhead
;	2179		PAT$CP_INP_DSCS : REF VECTOR [, LONG],			! Table of input string descriptors
;	2180		PAT$GB_TAKE_CMD: BYTE,					! Flag which says continue to accept commands
;	2181		PAT$GL_CONTEXT: BITVECTOR,				! Context word
;	2182		PAT$GL_HEAD_LST,					! Head of command argument list
;	2183		PAT$GL_JNLRAB,						! Journal file RAB
;	2184		PAT$GL_SEMAN1 : VECTOR,					! Token stack for parser
;	2185		PAT$GL_IMGHDR : REF BLOCK[,BYTE],			! Image header pointer
;	2186		PAT$GL_PATAREA : REF BLOCK[,BYTE],			! Patch area descriptor pointer
;	2187		PAT$GL_OLDLABLS,					! Pointer to listhead for old contents label list
;	2188		PAT$GL_NEWLABLS,					! Pointer to listhead for new contents un-relocated label list
;	2189		PAT$GL_RLCLABLS,					! Pointer to listhead for new contents relocated label list
;	2190		PAT$GL_SYMTBPTR,					! Pointer to current symbol table listhead
;	2191		PAT$GL_SYMHEAD;						! Listhead for user-defined symbol table
;	2192	
;	2193	!
;	2194	! COMMAND VERB STRINGS
;	2195	!
;	2196	BIND
;	2197		ALIGN_CMD	=	UPLIT BYTE (%ASCIC 'AL ') : VECTOR[,BYTE],
;	2198		CANCEL_MODE_CMD	=	UPLIT BYTE (%ASCIC 'CA M') : VECTOR[,BYTE],
;	2199		CANCEL_MODU_CMD	=	UPLIT BYTE (%ASCIC 'CA MODU') : VECTOR[,BYTE],
;	2200		CAN_MOD_ALL_CMD =	UPLIT BYTE (%ASCIC 'CA MODU /ALL') : VECTOR[,BYTE],
;	2201		CANCEL_SCO_CMD	=	UPLIT BYTE (%ASCIC 'CA SC') : VECTOR[,BYTE],
;	2202		CANCEL_PAT_CMD	=	UPLIT BYTE (%ASCIC 'CA PAT') : VECTOR[,BYTE],
;	2203		CHECK_N_ECO_CMD	=	UPLIT BYTE (%ASCIC 'CH NOT EC') : VECTOR[,BYTE],
;	2204		CHECK_ECO_CMD	=	UPLIT BYTE (%ASCIC 'CH EC') : VECTOR[,BYTE],
;	2205		DEFINE_CMD	=	UPLIT BYTE (%ASCIC 'DEF') : VECTOR[,BYTE],
;	2206		DELETE_CMD	=	UPLIT BYTE (%ASCIC 'DEL ') : VECTOR[,BYTE],
;	2207		DEPOSIT_CMD	=	UPLIT BYTE (%ASCIC 'D ') : VECTOR[,BYTE],
;	2208		EXAMINE_CMD	=	UPLIT BYTE (%ASCIC 'E ') : VECTOR[,BYTE],

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 2-2
; Digital Equipment Corporation
;
;	2209		EVALUATE_CMD	=	UPLIT BYTE (%ASCIC 'EV') : VECTOR[,BYTE],
;	2210		EXIT_CMD	=	UPLIT BYTE (%ASCIC 'EXI') : VECTOR[,BYTE],
;	2211		INSERT_CMD	=	UPLIT BYTE (%ASCIC 'INSE ') : VECTOR[,BYTE],
;	2212		NAME_CMD	=	UPLIT BYTE (%ASCIC '!AD') : VECTOR[,BYTE],
;	2213		REPLACE_CMD	=	UPLIT BYTE (%ASCIC 'RE ') : VECTOR[,BYTE],
;	2214		SCO_NAM_CMD	=	UPLIT BYTE(%ASCIC '!AC') : VECTOR[,BYTE],
;	2215		SET_ECO_CMD	=	UPLIT BYTE (%ASCIC 'SE EC') : VECTOR[,BYTE],
;	2216		SET_MODE_CMD	=	UPLIT BYTE (%ASCIC 'SE M') : VECTOR[,BYTE],
;	2217		SET_MODU_CMD	=	UPLIT BYTE (%ASCIC 'SE MODU') : VECTOR[,BYTE],
;	2218		SET_MOD_ALL_CMD =	UPLIT BYTE (%ASCIC 'SE MODU /ALL') : VECTOR[,BYTE],
;	2219		SET_PAT_CMD	=	UPLIT BYTE (%ASCIC 'SE PAT') : VECTOR[,BYTE],
;	2220		SET_SCO_CMD	=	UPLIT BYTE (%ASCIC 'SE SC') : VECTOR[,BYTE],
;	2221		SHOW_MODE_CMD	=	UPLIT BYTE (%ASCIC 'SH M') : VECTOR[,BYTE],
;	2222		SHOW_MODU_CMD	=	UPLIT BYTE (%ASCIC 'SH MODU') : VECTOR[,BYTE],
;	2223		SHOW_SCO_CMD	=	UPLIT BYTE (%ASCIC 'SH SC') : VECTOR[,BYTE],
;	2224		UPDATE_CMD	=	UPLIT BYTE (%ASCIC 'U') : VECTOR[,BYTE],
;	2225		VALUE_CMD	=	UPLIT BYTE (%ASCIC '^X!XL') : VECTOR[,BYTE],
;	2226		VERIFY_CMD	=	UPLIT BYTE (%ASCIC 'V ') : VECTOR[,BYTE],
;	2227	
;	2228	!++
;	2229	! Qualifiers for align command.
;	2230	!--
;	2231		ALIGN_QUAL_TBL	=	UPLIT BYTE (
;	2232							%ASCII '/BYT',
;	2233							%ASCII '/WOR',
;	2234							%ASCII '/LON',
;	2235							%ASCII '/QUA',
;	2236							%ASCII '/PAG'
;	2237									) : VECTOR[,BYTE];
;	2238	
;	2239	LITERAL
;	2240		ALIGN_QUAL_LNG = 4;					! Length of align qualifiers

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 3
; Digital Equipment Corporation
;
;	2241	GLOBAL ROUTINE PAT$END_OF_CMD (SEMSP) : NOVALUE =
;	2242	
;	2243	!++
;	2244	! FUNCTIONAL DESCRIPTION:
;	2245	!
;	2246	!	Resets all PATCH context that is exclusive to a single PATCH command.
;	2247	!	This includes resetting default modes from single line overrides back
;	2248	!	to the actual default modes and resetting a large number of context bits.
;	2249	!
;	2250	!	This routine also releases any storage associated with parameters
;	2251	!	stored for this command, more specifically for commands which
;	2252	!	build descriptors for symbolic names.  It also releases any storage
;	2253	!	used for assembler directive tables, forward reference tables, and
;	2254	!	temporary deposit buffers.
;	2255	!
;	2256	! CALLING SEQUENCE:
;	2257	!
;	2258	!	PAT$END_OF_CMD (SEMSP)
;	2259	!
;	2260	! INPUTS:
;	2261	!
;	2262	!	SEMSP - Offset to command verb token on parse stack
;	2263	!
;	2264	! IMPLICIT INPUTS:
;	2265	!
;	2266	!	PAT$GL_RLOC_BUF - Descriptor for relocation buffer, if used
;	2267	!	PAT$GL_TEMP_BUF - Descriptor for temporary buffer used on depositing
;	2268	!			  new values into memory
;	2269	!	PAT$GL_OLD_ASD - Descriptor for old contents assembler directive table
;	2270	!	PAT$GL_NEW_ASD - Descriptor for new contents assembler directive table
;	2271	!	PAT$GL_FWRLHD - Listhead for ForWard Reference table for instructions
;	2272	!	PAT$GL_OLDLABLS - Pointer to listhead for old contents label list
;	2273	!	PAT$GL_NEWLABLS - Pointer to listhead for new contents un-relocated label list
;	2274	!	PAT$GL_RLCLABLS - Pointer to listhead for new contents relocated label list
;	2275	!	PAT$GL_SYMTBPTR - Pointer to current symbol table listhead
;	2276	!	PAT$GL_SYMHEAD - Pointer to user-defined symbol table listhead
;	2277	!
;	2278	! OUTPUTS:
;	2279	!
;	2280	!	none
;	2281	!
;	2282	! IMPLICIT OUTPUTS:
;	2283	!
;	2284	!	none
;	2285	!
;	2286	! ROUTINE VALUE:
;	2287	!
;	2288	!	none
;	2289	!
;	2290	! SIDE EFFECTS:
;	2291	!
;	2292	!	Defaults are re-established.
;	2293	!	Any free storage used in symbolic name descriptors, forward reference
;	2294	!	tables, and symbolic label lists is released.
;	2295	!

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 3-1
; Digital Equipment Corporation
;
;	2296	!--
;	2297	
;	2298	BEGIN
;	2299	
;	2300	LOCAL
;	2301		POINTER,						! Pointer to current command parameter
;	2302		DESC_PTR : REF BLOCK[,BYTE];				! Pointer to symbolic name descriptor
;	2303	
;	2304	!++
;	2305	! This routine guarantees the internal consistency
;	2306	! of PATCH, and must succeed or give up.
;	2307	!--
;	2308	PAT$GL_SYMTBPTR = .PAT$GL_SYMHEAD;				! Reset the current symbol table to be user-defined one
;	2309	PAT$INIT_MODES (OVERRIDE_MODE, USER_DEF_MODE);
;	2310	PAT$SET_MOD_LVL (USER_DEF_MODE);
;	2311	PAT$SET_CONTEXT ();
;	2312	PAT$GB_SUBST_IN[0] = 0;						! Allow no substitution instructions
;	2313	PAT$GL_COMQUAL = 0;						! Set no qualifiers specified
;	2314	
;	2315	!++
;	2316	! Now release any symbolic name descriptors used for this command.  The commands
;	2317	! which have these string descriptors are:  ALIGN, SET MODULE, CANCEL MODULE,
;	2318	! and DEFINE.
;	2319	!--
;	2320	IF (.PAT$GL_SEMAN1[.SEMSP] EQL ALIGN_TOKEN) OR
;	2321	   (.PAT$GL_SEMAN1[.SEMSP] EQL DEFINE_TOKEN) OR
;	2322	   (.PAT$GL_CONTEXT[MODULE_BIT])
;	2323	THEN
;	2324		BEGIN
;	2325		POINTER = .PAT$GL_HEAD_LST;
;	2326		WHILE .POINTER NEQA 0
;	2327		DO
;	2328			BEGIN
;	2329			DESC_PTR = .LIST_ELEM_EXP1(.POINTER);
;	2330			PAT$FREERELEASE(.DESC_PTR, ((.DESC_PTR[DSC$W_LENGTH] + 3) /A_LONGWORD) + 2);
;	2331			POINTER = .LIST_ELEM_FLINK(.POINTER);
;	2332			END;
;	2333		END;
;	2334	
;	2335	!++
;	2336	! Free all storage used in argument accumulation and pathname building.
;	2337	!--
;	2338	PAT$FREE_ARG ();
;	2339	PAT$DELETE_PATH ();
;	2340	
;	2341	!++
;	2342	! Now release any temporary buffer storage used to deposit new values
;	2343	! into memory.  This is for commands REPLACE, INSERT, and DEPOSIT.
;	2344	!--
;	2345	IF (.PAT$GL_TEMP_BUF[DSC$W_LENGTH] NEQ 0)
;	2346	THEN
;	2347		BEGIN
;	2348		PAT$FREERELEASE ( .PAT$GL_TEMP_BUF[DSC$A_POINTER],
;	2349				(.PAT$GL_TEMP_BUF[DSC$W_LENGTH] + 3)/4);
;	2350		PAT$GL_TEMP_BUF[DSC$W_LENGTH] = 0;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 3-2
; Digital Equipment Corporation
;
;	2351		PAT$GL_TEMP_BUF[DSC$A_POINTER] = 0;
;	2352		END;
;	2353	
;	2354	!++
;	2355	! Now release any relocation buffer storage used to deposit new instructions
;	2356	! into memory.  This is for commands REPLACE and INSERT.
;	2357	!--
;	2358	IF (.PAT$GL_RLOC_BUF[DSC$W_LENGTH] NEQ 0)
;	2359	THEN
;	2360		BEGIN
;	2361		PAT$FREERELEASE ( .PAT$GL_RLOC_BUF[DSC$A_POINTER],
;	2362				(.PAT$GL_RLOC_BUF[DSC$W_LENGTH] + 3)/4);
;	2363		PAT$GL_RLOC_BUF[DSC$W_LENGTH] = 0;
;	2364		PAT$GL_RLOC_BUF[DSC$A_POINTER] = 0;
;	2365		END;
;	2366	
;	2367	!++
;	2368	! Now release any temporary buffer storage used for the new contents assembler
;	2369	! directive table.
;	2370	!--
;	2371	IF (.PAT$GL_NEW_ASD[DSC$W_LENGTH] NEQ 0)
;	2372	THEN
;	2373		BEGIN
;	2374		PAT$FREERELEASE ( .PAT$GL_NEW_ASD[DSC$A_POINTER],
;	2375				(.PAT$GL_NEW_ASD[DSC$W_LENGTH] + 3)/4);
;	2376		PAT$GL_NEW_ASD[DSC$W_LENGTH] = 0;
;	2377		PAT$GL_NEW_ASD[DSC$A_POINTER] = 0;
;	2378		END;
;	2379	
;	2380	!++
;	2381	! Now release any temporary buffer storage used for the old contents assembler
;	2382	! directive table.
;	2383	!--
;	2384	IF (.PAT$GL_OLD_ASD[DSC$W_LENGTH] NEQ 0)
;	2385	THEN
;	2386		BEGIN
;	2387		PAT$FREERELEASE ( .PAT$GL_OLD_ASD[DSC$A_POINTER],
;	2388				(.PAT$GL_OLD_ASD[DSC$W_LENGTH] + 3)/4);
;	2389		PAT$GL_OLD_ASD[DSC$W_LENGTH] = 0;
;	2390		PAT$GL_OLD_ASD[DSC$A_POINTER] = 0;
;	2391		END;
;	2392	
;	2393	!++
;	2394	! There may also be some ForWard Reference table (FWR) to be released.
;	2395	!--
;	2396	WHILE (.PAT$GL_FWRLHD NEQA 0)
;	2397	DO
;	2398		BEGIN
;	2399		LOCAL
;	2400			TEMP_PTR : REF BLOCK[,BYTE];
;	2401		TEMP_PTR = .PAT$GL_FWRLHD;
;	2402		PAT$GL_FWRLHD = .TEMP_PTR[FWR$L_FLINK];
;	2403		PAT$FREERELEASE(.TEMP_PTR, (FWR$C_SIZE + 3)/4);
;	2404		END;
;	2405	

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 3-3
; Digital Equipment Corporation
;
;	2406	!++
;	2407	! Now release any space used temporarily for symbolic instruction labels on
;	2408	! old contents of locations.
;	2409	!--
;	2410	WHILE (.DLL_RLINK(.PAT$GL_OLDLABLS) NEQA .PAT$GL_OLDLABLS)
;	2411	DO
;	2412		BEGIN
;	2413		POINTER = .DLL_RLINK(.PAT$GL_OLDLABLS);
;	2414		DLL_RLINK(.PAT$GL_OLDLABLS) = .DLL_RLINK(.POINTER);
;	2415		PAT$FREERELEASE(.POINTER, (.SYM_CHCOUNT(.POINTER) + 1 + 3)/4 + OVERHEAD_SYM - 1);
;	2416		END;
;	2417	
;	2418	!++
;	2419	! Now release any space used temporarily for un-relocated symbolic instruction
;	2420	! labels on new contents of locations.
;	2421	!--
;	2422	WHILE (.DLL_RLINK(.PAT$GL_NEWLABLS) NEQA .PAT$GL_NEWLABLS)
;	2423	DO
;	2424		BEGIN
;	2425		POINTER = .DLL_RLINK(.PAT$GL_NEWLABLS);
;	2426		DLL_RLINK(.PAT$GL_NEWLABLS) = .DLL_RLINK(.POINTER);
;	2427		PAT$FREERELEASE(.POINTER, (.SYM_CHCOUNT(.POINTER) + 1 + 3)/4 + OVERHEAD_SYM - 1);
;	2428		END;
;	2429	
;	2430	!++
;	2431	! Now release any space used temporarily for relocated symbolic instruction
;	2432	! labels on old contents of locations.
;	2433	!--
;	2434	WHILE (.DLL_RLINK(.PAT$GL_RLCLABLS) NEQA .PAT$GL_RLCLABLS)
;	2435	DO
;	2436		BEGIN
;	2437		POINTER = .DLL_RLINK(.PAT$GL_RLCLABLS);
;	2438		DLL_RLINK(.PAT$GL_RLCLABLS) = .DLL_RLINK(.POINTER);
;	2439		PAT$FREERELEASE(.POINTER, (.SYM_CHCOUNT(.POINTER) + 1 + 3)/4 + OVERHEAD_SYM - 1);
;	2440		END;
;	2441	END;


							    .TITLE  PATACT
							    .IDENT  \X01.23\

							    .PSECT  _PAT$PLIT,NOWRT,NOEXE,0

					      00000 P.AAA:  .ASCII  <3>\AL \						      ;
					      00004 P.AAB:  .ASCII  <4>\CA M\						      ;
					      00009	    .BLKB   3
					      0000C P.AAC:  .ASCII  <7>\CA MODU\					      ;
					      00014 P.AAD:  .ASCII  <12>\CA MODU /ALL\					      ;
					      00021	    .BLKB   3
					      00024 P.AAE:  .ASCII  <5>\CA SC\						      ;
					      0002A	    .BLKB   2
					      0002C P.AAF:  .ASCII  <6>\CA PAT\						      ;
					      00033	    .BLKB   1
					      00034 P.AAG:  .ASCII  <9>\CH NOT EC\					      ;
					      0003E	    .BLKB   2

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 3-4
; Digital Equipment Corporation
;
					      00040 P.AAH:  .ASCII  <5>\CH EC\						      ;
					      00046	    .BLKB   2
					      00048 P.AAI:  .ASCII  <3>\DEF\						      ;
					      0004C P.AAJ:  .ASCII  <4>\DEL \						      ;
					      00051	    .BLKB   3
					      00054 P.AAK:  .ASCII  <2>\D \						      ;
					      00057	    .BLKB   1
					      00058 P.AAL:  .ASCII  <2>\E \						      ;
					      0005B	    .BLKB   1
					      0005C P.AAM:  .ASCII  <2>\EV\						      ;
					      0005F	    .BLKB   1
					      00060 P.AAN:  .ASCII  <3>\EXI\						      ;
					      00064 P.AAO:  .ASCII  <5>\INSE \						      ;
					      0006A	    .BLKB   2
					      0006C P.AAP:  .ASCII  <3>\!AD\						      ;
					      00070 P.AAQ:  .ASCII  <3>\RE \						      ;
					      00074 P.AAR:  .ASCII  <3>\!AC\						      ;
					      00078 P.AAS:  .ASCII  <5>\SE EC\						      ;
					      0007E	    .BLKB   2
					      00080 P.AAT:  .ASCII  <4>\SE M\						      ;
					      00085	    .BLKB   3
					      00088 P.AAU:  .ASCII  <7>\SE MODU\					      ;
					      00090 P.AAV:  .ASCII  <12>\SE MODU /ALL\					      ;
					      0009D	    .BLKB   3
					      000A0 P.AAW:  .ASCII  <6>\SE PAT\						      ;
					      000A7	    .BLKB   1
					      000A8 P.AAX:  .ASCII  <5>\SE SC\						      ;
					      000AE	    .BLKB   2
					      000B0 P.AAY:  .ASCII  <4>\SH M\						      ;
					      000B5	    .BLKB   3
					      000B8 P.AAZ:  .ASCII  <7>\SH MODU\					      ;
					      000C0 P.ABA:  .ASCII  <5>\SH SC\						      ;
					      000C6	    .BLKB   2
					      000C8 P.ABB:  .ASCII  <1>\U\						      ;
					      000CA	    .BLKB   2
					      000CC P.ABC:  .ASCII  <5>\^X!XL\						      ;
					      000D2	    .BLKB   2
					      000D4 P.ABD:  .ASCII  <2>\V \						      ;
					      000D7	    .BLKB   1
					      000D8 P.ABE:  .ASCII  \/BYT\						      ;
					      000DC 	    .ASCII  \/WOR\						      ;
					      000E0 	    .ASCII  \/LON\						      ;
					      000E4 	    .ASCII  \/QUA\						      ;
					      000E8 	    .ASCII  \/PAG\						      ;

						    ISE$C_SIZE==	20
						    TXT$C_SIZE==	4
						    PAL$C_SIZE==	16
						    ASD$C_SIZE==	9
						    FWR$C_SIZE==	24
						    ALIGN_CMD=		P.AAA
						    CANCEL_MODE_CMD=	P.AAB
						    CANCEL_MODU_CMD=	P.AAC
						    CAN_MOD_ALL_CMD=	P.AAD
						    CANCEL_SCO_CMD=	P.AAE

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 3-5
; Digital Equipment Corporation
;
						    CANCEL_PAT_CMD=	P.AAF
						    CHECK_N_ECO_CMD=	P.AAG
						    CHECK_ECO_CMD=	P.AAH
						    DEFINE_CMD=		P.AAI
						    DELETE_CMD=		P.AAJ
						    DEPOSIT_CMD=	P.AAK
						    EXAMINE_CMD=	P.AAL
						    EVALUATE_CMD=	P.AAM
						    EXIT_CMD=		P.AAN
						    INSERT_CMD=		P.AAO
						    NAME_CMD=		P.AAP
						    REPLACE_CMD=	P.AAQ
						    SCO_NAM_CMD=	P.AAR
						    SET_ECO_CMD=	P.AAS
						    SET_MODE_CMD=	P.AAT
						    SET_MODU_CMD=	P.AAU
						    SET_MOD_ALL_CMD=	P.AAV
						    SET_PAT_CMD=	P.AAW
						    SET_SCO_CMD=	P.AAX
						    SHOW_MODE_CMD=	P.AAY
						    SHOW_MODU_CMD=	P.AAZ
						    SHOW_SCO_CMD=	P.ABA
						    UPDATE_CMD=		P.ABB
						    VALUE_CMD=		P.ABC
						    VERIFY_CMD=		P.ABD
						    ALIGN_QUAL_TBL=	P.ABE
							    .GLOBL  PAT$FAO_OUT, PAT$GL_RST_BEGN, PAT$ADD_PAL, PAT$ALIGN_CMD
							    .GLOBL  PAT$DELETE_PATH, PAT$CANC_MODULE, PAT$DEFINE_SYM
							    .GLOBL  PAT$DEPOSIT_CMD, PAT$ECO_CMDS, PAT$EXAMINE_CMD
							    .GLOBL  PAT$FAO_PUT, PAT$FILL_BUF, PAT$FREE_ARG, PAT$FREERELEASE
							    .GLOBL  PAT$INIT_MODES, PAT$MAP_ADDR, PAT$OPEN_COMFIL
							    .GLOBL  PAT$OUT_MEM_LOC, PAT$REPLACE_CMD, PAT$RESET_DEF
							    .GLOBL  PAT$SAVE_SCOPE, PAT$SET_CONTEXT, PAT$SET_MODULE
							    .GLOBL  PAT$SET_MOD_LST, PAT$SET_MOD_LVL, PAT$SET_NEW_MOD
							    .GLOBL  PAT$SHOW_DEFAL, PAT$SHOW_MODULE, PAT$SHOW_SCOPE
							    .GLOBL  PAT$WRITE_EXP1, PAT$WRITEFILE, PAT$WRITE_INS, PAT$WRITE_NAME
							    .GLOBL  PAT$WRTIMG, PAT$GB_MOD_PTR, PAT$GL_ECO_UPD, PAT$GB_EXEC_CMD
							    .GLOBL  PAT$GL_CSP_PTR, PAT$GL_COMQUAL, PAT$GL_IHPPTR
							    .GLOBL  PAT$CP_OUT_STR, PAT$GL_BUF_SIZ, PAT$GL_COMRAB
							    .GLOBL  PAT$GL_FLAGS, PAT$GL_RLOC_BUF, PAT$GL_TEMP_BUF
							    .GLOBL  PAT$GL_OLD_ASD, PAT$GL_NEW_ASD, PAT$GB_SUBST_IN
							    .GLOBL  PAT$GL_FWRLHD, PAT$CP_INP_DSCS, PAT$GB_TAKE_CMD
							    .GLOBL  PAT$GL_CONTEXT, PAT$GL_HEAD_LST, PAT$GL_JNLRAB
							    .GLOBL  PAT$GL_SEMAN1, PAT$GL_IMGHDR, PAT$GL_PATAREA, PAT$GL_OLDLABLS
							    .GLOBL  PAT$GL_NEWLABLS, PAT$GL_RLCLABLS, PAT$GL_SYMTBPTR
							    .GLOBL  PAT$GL_SYMHEAD
							    .WEAK   ACCESS_CHECK

							    .PSECT  _PAT$CODE,NOWRT,2

					 0FEC 00000 	    .ENTRY  PAT$END_OF_CMD, Save R2,R3,R5,R6,R7,R8,R9,R10,R11	      ; 2241
		         55 00000000G  EF  9E 00002 	    MOVAB   PAT$GL_FWRLHD, R5					      ;
		         56 00000000G  EF  9E 00009 	    MOVAB   PAT$GL_SEMAN1, R6					      ;
		         57 00000000G  EF  9E 00010 	    MOVAB   PAT$GL_OLD_ASD, R7					      ;
		         58 00000000G  EF  9E 00017 	    MOVAB   PAT$GL_NEW_ASD, R8					      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 3-6
; Digital Equipment Corporation
;
		         59 00000000G  EF  9E 0001E 	    MOVAB   PAT$GL_RLOC_BUF, R9					      ;
		         5A 00000000G  EF  9E 00025 	    MOVAB   PAT$GL_TEMP_BUF, R10				      ;
		         5B 00000000G  EF  9E 0002C 	    MOVAB   PAT$FREERELEASE, R11				      ;
	      00000000G  EF 00000000G  EF  D0 00033 	    MOVL    PAT$GL_SYMHEAD, PAT$GL_SYMTBPTR			      ; 2308
				       01  DD 0003E 	    PUSHL   #1							      ; 2309
				       02  DD 00040 	    PUSHL   #2							      ;
	      00000000G  EF	       02  FB 00042 	    CALLS   #2, PAT$INIT_MODES					      ;
				       01  DD 00049 	    PUSHL   #1							      ; 2310
	      00000000G  EF	       01  FB 0004B 	    CALLS   #1, PAT$SET_MOD_LVL					      ;
	      00000000G  EF	       00  FB 00052 	    CALLS   #0, PAT$SET_CONTEXT					      ; 2311
			    00000000G  EF  94 00059 	    CLRB    PAT$GB_SUBST_IN					      ; 2312
			    00000000G  EF  D4 0005F 	    CLRL    PAT$GL_COMQUAL					      ; 2313
		         50	  04   AC  D0 00065 	    MOVL    SEMSP, R0						      ; 2320
		         01	     6640  D1 00069 	    CMPL    PAT$GL_SEMAN1[R0], #1				      ;
				       0E  13 0006D 	    BEQL    1$							      ;
		         05	     6640  D1 0006F 	    CMPL    PAT$GL_SEMAN1[R0], #5				      ; 2321
				       08  13 00073 	    BEQL    1$							      ;
	   25 00000000G  EF	       07  E1 00075 	    BBC     #7, PAT$GL_CONTEXT, 3$				      ; 2322
		         52 00000000G  EF  D0 0007D 1$:     MOVL    PAT$GL_HEAD_LST, POINTER				      ; 2325
				       52  D5 00084 2$:     TSTL    POINTER						      ; 2326
				       1A  13 00086 	    BEQL    3$							      ;
		         53	  04   A2  D0 00088 	    MOVL    4(POINTER), DESC_PTR				      ; 2329
		         50	       63  3C 0008C 	    MOVZWL  (DESC_PTR), R0					      ; 2330
		         50	       03  C0 0008F 	    ADDL2   #3, R0						      ;
		         50	       04  C6 00092 	    DIVL2   #4, R0						      ;
				  02   A0  9F 00095 	    PUSHAB  2(R0)						      ;
				       53  DD 00098 	    PUSHL   DESC_PTR						      ;
		         6B	       02  FB 0009A 	    CALLS   #2, PAT$FREERELEASE					      ;
		         52	       62  D0 0009D 	    MOVL    (POINTER), POINTER					      ; 2331
				       E2  11 000A0 	    BRB     2$							      ; 2326
	      00000000G  EF	       00  FB 000A2 3$:     CALLS   #0, PAT$FREE_ARG					      ; 2338
	      00000000G  EF	       00  FB 000A9 	    CALLS   #0, PAT$DELETE_PATH					      ; 2339
				       6A  B5 000B0 	    TSTW    PAT$GL_TEMP_BUF					      ; 2345
				       15  13 000B2 	    BEQL    4$							      ;
		         50	       6A  3C 000B4 	    MOVZWL  PAT$GL_TEMP_BUF, R0					      ; 2349
		         50	       03  C0 000B7 	    ADDL2   #3, R0						      ;
	   7E	         50	       04  C7 000BA 	    DIVL3   #4, R0, -(SP)					      ;
				  04   AA  DD 000BE 	    PUSHL   PAT$GL_TEMP_BUF+4					      ; 2348
		         6B	       02  FB 000C1 	    CALLS   #2, PAT$FREERELEASE					      ;
				       6A  B4 000C4 	    CLRW    PAT$GL_TEMP_BUF					      ; 2350
				  04   AA  D4 000C6 	    CLRL    PAT$GL_TEMP_BUF+4					      ; 2351
				       69  B5 000C9 4$:     TSTW    PAT$GL_RLOC_BUF					      ; 2358
				       15  13 000CB 	    BEQL    5$							      ;
		         50	       69  3C 000CD 	    MOVZWL  PAT$GL_RLOC_BUF, R0					      ; 2362
		         50	       03  C0 000D0 	    ADDL2   #3, R0						      ;
	   7E	         50	       04  C7 000D3 	    DIVL3   #4, R0, -(SP)					      ;
				  04   A9  DD 000D7 	    PUSHL   PAT$GL_RLOC_BUF+4					      ; 2361
		         6B	       02  FB 000DA 	    CALLS   #2, PAT$FREERELEASE					      ;
				       69  B4 000DD 	    CLRW    PAT$GL_RLOC_BUF					      ; 2363
				  04   A9  D4 000DF 	    CLRL    PAT$GL_RLOC_BUF+4					      ; 2364
				       68  B5 000E2 5$:     TSTW    PAT$GL_NEW_ASD					      ; 2371
				       15  13 000E4 	    BEQL    6$							      ;
		         50	       68  3C 000E6 	    MOVZWL  PAT$GL_NEW_ASD, R0					      ; 2375
		         50	       03  C0 000E9 	    ADDL2   #3, R0						      ;
	   7E	         50	       04  C7 000EC 	    DIVL3   #4, R0, -(SP)					      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 3-7
; Digital Equipment Corporation
;
				  04   A8  DD 000F0 	    PUSHL   PAT$GL_NEW_ASD+4					      ; 2374
		         6B	       02  FB 000F3 	    CALLS   #2, PAT$FREERELEASE					      ;
				       68  B4 000F6 	    CLRW    PAT$GL_NEW_ASD					      ; 2376
				  04   A8  D4 000F8 	    CLRL    PAT$GL_NEW_ASD+4					      ; 2377
				       67  B5 000FB 6$:     TSTW    PAT$GL_OLD_ASD					      ; 2384
				       15  13 000FD 	    BEQL    7$							      ;
		         50	       67  3C 000FF 	    MOVZWL  PAT$GL_OLD_ASD, R0					      ; 2388
		         50	       03  C0 00102 	    ADDL2   #3, R0						      ;
	   7E	         50	       04  C7 00105 	    DIVL3   #4, R0, -(SP)					      ;
				  04   A7  DD 00109 	    PUSHL   PAT$GL_OLD_ASD+4					      ; 2387
		         6B	       02  FB 0010C 	    CALLS   #2, PAT$FREERELEASE					      ;
				       67  B4 0010F 	    CLRW    PAT$GL_OLD_ASD					      ; 2389
				  04   A7  D4 00111 	    CLRL    PAT$GL_OLD_ASD+4					      ; 2390
		         50	       65  D0 00114 7$:     MOVL    PAT$GL_FWRLHD, R0					      ; 2396
				       0C  13 00117 	    BEQL    8$							      ;
		         65	       60  D0 00119 	    MOVL    (TEMP_PTR), PAT$GL_FWRLHD				      ; 2402
				       06  DD 0011C 	    PUSHL   #6							      ; 2403
				       50  DD 0011E 	    PUSHL   TEMP_PTR						      ;
		         6B	       02  FB 00120 	    CALLS   #2, PAT$FREERELEASE					      ;
				       EF  11 00123 	    BRB     7$							      ; 2396
		         50 00000000G  EF  D0 00125 8$:     MOVL    PAT$GL_OLDLABLS, R0					      ; 2410
		         50	       60  D1 0012C 	    CMPL    (R0), R0						      ;
				       1A  13 0012F 	    BEQL    9$							      ;
		         52	       60  D0 00131 	    MOVL    (R0), POINTER					      ; 2413
		         60	       62  D0 00134 	    MOVL    (POINTER), (R0)					      ; 2414
		         50	  0C   A2  9A 00137 	    MOVZBL  12(POINTER), R0					      ; 2415
		         50	       04  C0 0013B 	    ADDL2   #4, R0						      ;
		         50	       04  C6 0013E 	    DIVL2   #4, R0						      ;
				  03   A0  9F 00141 	    PUSHAB  3(R0)						      ;
				       52  DD 00144 	    PUSHL   POINTER						      ;
		         6B	       02  FB 00146 	    CALLS   #2, PAT$FREERELEASE					      ;
				       DA  11 00149 	    BRB     8$							      ; 2410
		         50 00000000G  EF  D0 0014B 9$:     MOVL    PAT$GL_NEWLABLS, R0					      ; 2422
		         50	       60  D1 00152 	    CMPL    (R0), R0						      ;
				       1A  13 00155 	    BEQL    10$							      ;
		         52	       60  D0 00157 	    MOVL    (R0), POINTER					      ; 2425
		         60	       62  D0 0015A 	    MOVL    (POINTER), (R0)					      ; 2426
		         50	  0C   A2  9A 0015D 	    MOVZBL  12(POINTER), R0					      ; 2427
		         50	       04  C0 00161 	    ADDL2   #4, R0						      ;
		         50	       04  C6 00164 	    DIVL2   #4, R0						      ;
				  03   A0  9F 00167 	    PUSHAB  3(R0)						      ;
				       52  DD 0016A 	    PUSHL   POINTER						      ;
		         6B	       02  FB 0016C 	    CALLS   #2, PAT$FREERELEASE					      ;
				       DA  11 0016F 	    BRB     9$							      ; 2422
		         50 00000000G  EF  D0 00171 10$:    MOVL    PAT$GL_RLCLABLS, R0					      ; 2434
		         50	       60  D1 00178 	    CMPL    (R0), R0						      ;
				       1A  13 0017B 	    BEQL    11$							      ;
		         52	       60  D0 0017D 	    MOVL    (R0), POINTER					      ; 2437
		         60	       62  D0 00180 	    MOVL    (POINTER), (R0)					      ; 2438
		         50	  0C   A2  9A 00183 	    MOVZBL  12(POINTER), R0					      ; 2439
		         50	       04  C0 00187 	    ADDL2   #4, R0						      ;
		         50	       04  C6 0018A 	    DIVL2   #4, R0						      ;
				  03   A0  9F 0018D 	    PUSHAB  3(R0)						      ;
				       52  DD 00190 	    PUSHL   POINTER						      ;
		         6B	       02  FB 00192 	    CALLS   #2, PAT$FREERELEASE					      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 3-8
; Digital Equipment Corporation
;
				       DA  11 00195 	    BRB     10$							      ; 2434
					   04 00197 11$:    RET     							      ; 2241

; Routine Size:  408 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 4
; Digital Equipment Corporation
;
;	2442	GLOBAL ROUTINE PAT$END_OF_LINE (SEMSP) : NOVALUE =
;	2443	
;	2444	!++
;	2445	! FUNCTIONAL DESCRIPTION:
;	2446	!
;	2447	!	Calls the PAT$END_OF_CMD to reset all patch context that is
;	2448	!	exclusive to a singe PATCH command.  This includes resetting default
;	2449	!	modes from single line overrides back to the actual default modes and
;	2450	!	resetting a large number of context bits.  In addition, any free
;	2451	!	storage required temporarily is released.
;	2452	!
;	2453	!	Also, the command line buffer is released.
;	2454	!
;	2455	! CALLING SEQUENCE:
;	2456	!
;	2457	!	PAT$END_OF_LINE (SEMSP)
;	2458	!
;	2459	! INPUTS:
;	2460	!
;	2461	!	SEMSP - Offset to command verb on parse stack
;	2462	!
;	2463	! IMPLICIT INPUTS:
;	2464	!
;	2465	!	PAT$CP_INP_DSCS - Address of vector of command line buffer descriptors,
;	2466	!			  first longword of which is count of descriptors
;	2467	!
;	2468	! OUTPUTS:
;	2469	!
;	2470	!	none
;	2471	!
;	2472	! IMPLICIT OUTPUTS:
;	2473	!
;	2474	!	none
;	2475	!
;	2476	! ROUTINE VALUE:
;	2477	!
;	2478	!	none
;	2479	!
;	2480	! SIDE EFFECTS:
;	2481	!
;	2482	!	Defaults are reestablished.  The command line buffer space is released.
;	2483	!
;	2484	!--
;	2485	
;	2486	BEGIN
;	2487	
;	2488	LOCAL
;	2489		temp_loc;
;	2490	
;	2491	!++
;	2492	! This routine guarantees the internal consistency
;	2493	! of PATCH, and must succeed or give up.
;	2494	!--
;	2495	PAT$END_OF_CMD(.SEMSP);
;	2496	

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 4-1
; Digital Equipment Corporation
;
;	2497	!++
;	2498	! Now release the command line buffer space.
;	2499	!--
;	2500	INCR LOOP FROM 1 TO .PAT$CP_INP_DSCS[0]*2 BY 2
;	2501	DO
;	2502		IF .PAT$CP_INP_DSCS[.LOOP] NEQ 0
;	2503		THEN
;	2504			BEGIN
;	2505			PAT$FREERELEASE (.PAT$CP_INP_DSCS [.LOOP+1],
;	2506					(.PAT$CP_INP_DSCS [.LOOP] + 3) / 4);
;	2507			PAT$CP_INP_DSCS [.LOOP] = 0;
;	2508			PAT$CP_INP_DSCS [.LOOP+1] = 0;
;	2509			END
;	2510		ELSE
;	2511			RETURN;
;	2512	END;





					 080C 00198 	    .ENTRY  PAT$END_OF_LINE, Save R2,R3,R11			      ; 2442
		         5B 00000000G  EF  9E 0019A 	    MOVAB   PAT$CP_INP_DSCS, R11				      ;
				  04   AC  DD 001A1 	    PUSHL   SEMSP						      ; 2495
		  FE57   CF	       01  FB 001A4 	    CALLS   #1, PAT$END_OF_CMD					      ;
	   53	    00   BB	       01  78 001A9 	    ASHL    #1, @PAT$CP_INP_DSCS, R3				      ; 2500
		         52	       01  CE 001AE 	    MNEGL   #1, LOOP						      ;
				       29  11 001B1 	    BRB     2$							      ;
		         50	  00 BB42  D0 001B3 1$:     MOVL    @PAT$CP_INP_DSCS[LOOP], R0				      ; 2502
				       28  13 001B8 	    BEQL    3$							      ;
		         50	       03  C0 001BA 	    ADDL2   #3, R0						      ; 2506
	   7E	         50	       04  C7 001BD 	    DIVL3   #4, R0, -(SP)					      ;
		         50	  00 BB42  DE 001C1 	    MOVAL   @PAT$CP_INP_DSCS[LOOP], R0				      ; 2505
				  04   A0  DD 001C6 	    PUSHL   4(R0)						      ;
	      00000000G  EF	       02  FB 001C9 	    CALLS   #2, PAT$FREERELEASE					      ;
				  00 BB42  D4 001D0 	    CLRL    @PAT$CP_INP_DSCS[LOOP]				      ; 2507
		         50	  00 BB42  DE 001D4 	    MOVAL   @PAT$CP_INP_DSCS[LOOP], R0				      ; 2508
				  04   A0  D4 001D9 	    CLRL    4(R0)						      ;
	   52	         02	       53  F1 001DC 2$:     ACBL    R3, #2, LOOP, 1$					      ; 2500
				     FFD1     001E0									      ;
					   04 001E2 3$:     RET     							      ; 2442

; Routine Size:  75 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 5
; Digital Equipment Corporation
;
;	2513	GLOBAL ROUTINE PAT$PERFORM_CMD (SEMSP) =
;	2514	
;	2515	!++
;	2516	! FUNCTIONAL DESCRIPTION:
;	2517	!
;	2518	!	Action routine for a single PATCH command.  Based on the command verb
;	2519	!	various routines are called to execute the command.  After the command
;	2520	!	is executed, a cleanup is done to reset the "one line" modes to the
;	2521	!	default modes and reset the context switches.  The command line is
;	2522	!	written to the output command file, if one is being created.
;	2523	!
;	2524	! CALLING SEQUENCE:
;	2525	!
;	2526	!	PAT$PERFORM_CMD ()
;	2527	!
;	2528	! INPUTS:
;	2529	!
;	2530	!	SEMSP - Offset in parse stack which holds current verb token
;	2531	!
;	2532	! IMPLICIT INPUTS:
;	2533	!
;	2534	!	none
;	2535	!
;	2536	! OUTPUTS:
;	2537	!
;	2538	!	TRUE or FALSE, depending on whether parsing is to continue or not.
;	2539	!
;	2540	! IMPLICIT OUTPUTS:
;	2541	!
;	2542	!	none
;	2543	!
;	2544	! ROUTINE VALUE:
;	2545	!
;	2546	!	 TRUE or FALSE
;	2547	!
;	2548	! SIDE EFFECTS:
;	2549	!
;	2550	!	A PATCH command is actually executed.
;	2551	!
;	2552	!--
;	2553	
;	2554	BEGIN
;	2555	
;	2556	LOCAL
;	2557		BIT_NUMBER,						! ECO bit number
;	2558		ECOLVL_PTR : REF BITVECTOR,				! Pointer to ECO bits in image header
;	2559		OUTPUT_BUF : VECTOR[NO_OF_INP_CHARS,BYTE],		! Buffer for journal file output
;	2560		ISE_PTR;						! Pointer to image section descriptor
;	2561	
;	2562	!++
;	2563	! If the /UPDATE qualifier was specified, then the execute command indicator,
;	2564	! PAT$GB_EXEC_CMD, may be set to FALSE indicating the current patch session
;	2565	! should be skipped.  If this is the case, then don't bother to execute the
;	2566	! command unless it is a new "SET ECO" level, indicating a new patch session.
;	2567	! If /UPDATE was not specified, then the execute command indicator is always

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 5-1
; Digital Equipment Corporation
;
;	2568	! TRUE.  In this case, execute the complete command.  In all cases, the "EXIT"
;	2569	! command must be executed.
;	2570	!--
;	2571	IF (.PAT$GB_EXEC_CMD) OR
;	2572	   (.PAT$GL_CONTEXT[SET_ECO]) OR
;	2573	   (.PAT$GL_SEMAN1[.SEMSP] EQL EXIT_TOKEN)
;	2574	THEN
;	2575		BEGIN
;	2576		CASE .PAT$GL_SEMAN1 [.SEMSP] FROM ALIGN_TOKEN TO VERIFY_TOKEN OF
;	2577	
;	2578		SET
;	2579	
;	2580		[ALIGN_TOKEN]:
;	2581			PAT$ALIGN_CMD ();
;	2582	
;	2583		[CANCEL_TOKEN]:
;	2584			SELECTONE TRUE OF
;	2585			SET
;	2586	
;	2587			[.PAT$GL_CONTEXT[PAT_AREA_BIT]]:
;	2588				BEGIN
;	2589				PAT$GL_PATAREA = CH$PTR(PAT$GL_IHPPTR[IHP$L_RW_PATSIZ], 0);
;	2590				END;
;	2591	
;	2592			[.PAT$GL_CONTEXT[MODE_BIT]]:
;	2593				BEGIN
;	2594				PAT$RESET_DEF();
;	2595				END;
;	2596	
;	2597			[.PAT$GL_CONTEXT[MODULE_BIT]]:
;	2598				BEGIN
;	2599				PAT$CANC_MODULE();
;	2600				END;
;	2601	
;	2602			[.PAT$GL_CONTEXT[SCOPE_BIT]]:
;	2603				BEGIN
;	2604				PAT$SAVE_SCOPE(FALSE);
;	2605				END;
;	2606			TES;
;	2607	
;	2608		[CHECK_TOKEN]:
;	2609			PAT$ECO_CMDS ();
;	2610	
;	2611		[CREATE_TOKEN]:
;	2612			PAT$OPEN_COMFIL(0, 0);
;	2613	
;	2614		[DEFINE_TOKEN]:
;	2615			BEGIN
;	2616	
;	2617			LOCAL
;	2618				POINTER;
;	2619	
;	2620			POINTER = .PAT$GL_HEAD_LST;
;	2621			WHILE (.POINTER NEQ 0)
;	2622			DO

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 5-2
; Digital Equipment Corporation
;
;	2623				BEGIN
;	2624				PAT$DEFINE_SYM (.LIST_ELEM_EXP1 (.POINTER), .LIST_ELEM_EXP2 (.POINTER), TRUE);
;	2625				POINTER = .LIST_ELEM_FLINK (.POINTER);
;	2626				END;
;	2627			END;
;	2628	
;	2629		[DELETE_TOKEN]:
;	2630			BEGIN
;	2631			PAT$GL_CONTEXT [DELETE_BIT] = TRUE;
;	2632			PAT$DEPOSIT_CMD ();
;	2633			END;
;	2634	
;	2635		[DEPOSIT_TOKEN]:
;	2636			PAT$DEPOSIT_CMD ();
;	2637	
;	2638		[EXAMINE_TOKEN]:
;	2639			BEGIN
;	2640			PAT$GL_CONTEXT [EXAMINE_BIT] = TRUE;
;	2641			PAT$EXAMINE_CMD ();
;	2642			END;
;	2643	
;	2644		[EVALUATE_TOKEN]:
;	2645			BEGIN
;	2646			LOCAL
;	2647				POINTER;
;	2648			POINTER = .PAT$GL_HEAD_LST;
;	2649			WHILE (.POINTER NEQ 0)
;	2650			DO
;	2651				BEGIN
;	2652				PAT$OUT_MEM_LOC (LIST_ELEM_EXP1 (.POINTER), 0);
;	2653				POINTER = .LIST_ELEM_FLINK (.POINTER);
;	2654				END;
;	2655			END;
;	2656	
;	2657		[EXIT_TOKEN]:
;	2658			BEGIN
;	2659			PAT$GB_TAKE_CMD = FALSE;
;	2660			IF (.PAT$GL_FLAGS AND PAT$M_UPDATE) NEQ 0
;	2661			THEN
;	2662				BEGIN
;	2663				ECOLVL_PTR = CH$PTR(PAT$GL_IHPPTR[IHP$L_ECO1], 0);
;	2664				INCR BIT_NUMBER FROM PAT$K_MIN_ECO-1 TO PAT$K_MAX_ECO-1
;	2665				DO
;	2666					IF .PAT$GL_ECO_UPD[.BIT_NUMBER]
;	2667					THEN
;	2668						IF NOT .ECOLVL_PTR[.BIT_NUMBER] 
;	2669						THEN
;	2670							SIGNAL(PAT$_NOUPDATE, 1, .BIT_NUMBER+1);
;	2671				END;
;	2672			END;
;	2673	
;	2674		[INSERT_TOKEN]:
;	2675			BEGIN
;	2676			IF (NOT .PAT$GB_MOD_PTR[MODE_INSTRUC])
;	2677			THEN

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 5-3
; Digital Equipment Corporation
;
;	2678				SIGNAL(PAT$_INVCMD);
;	2679			PAT$GL_CONTEXT [INSERT_BIT] = TRUE;
;	2680			PAT$REPLACE_CMD ();
;	2681			END;
;	2682	
;	2683		[REPLACE_TOKEN]:
;	2684			PAT$REPLACE_CMD ();
;	2685	
;	2686		[SET_TOKEN]:
;	2687			SELECTONE TRUE OF
;	2688			SET
;	2689			[.PAT$GL_CONTEXT[SCOPE_BIT]]:
;	2690				BEGIN
;	2691				PAT$SAVE_SCOPE (TRUE);
;	2692				END;
;	2693	
;	2694			[.PAT$GL_CONTEXT[SET_ECO]]:
;	2695				BEGIN
;	2696				PAT$ECO_CMDS ();
;	2697				END;
;	2698	
;	2699			[.PAT$GL_CONTEXT[MODE_BIT]]:
;	2700				BEGIN
;	2701				!++
;	2702				! The "SET MODE" command verb must be written to the
;	2703				! indirect command file here as the modes to be "SET"
;	2704				! are output in PAT$SET_MOD_LST and the information
;	2705				! lost.  Therefore, only the "EXIT" to the "NEW>" prompt
;	2706				! will be output in the routine, WRITE_CMD.
;	2707				!--
;	2708				PAT$WRITEFILE(.SET_MODE_CMD[0], SET_MODE_CMD[1], PAT$GL_COMRAB);
;	2709				PAT$SET_MOD_LST (USER_DEF_MODE);
;	2710				END;
;	2711	
;	2712			[.PAT$GL_CONTEXT[PAT_AREA_BIT]]:
;	2713				BEGIN
;	2714				PAT$MAP_ADDR(.LIST_ELEM_EXP1(.PAT$GL_HEAD_LST), 
;	2715						PAT$GL_PATAREA, ISE_PTR);
;	2716				PAT$ADD_PAL(.PAT$GL_PATAREA[DSC$A_POINTER],
;	2717					.PAT$GL_PATAREA[DSC$A_POINTER]+.PAT$GL_PATAREA[DSC$W_LENGTH],
;	2718					PAL$K_ADD_PAREA);
;	2719				END;
;	2720	
;	2721			[.PAT$GL_CONTEXT[MODULE_BIT]]:
;	2722				BEGIN
;	2723				PAT$SET_MODULE(0);
;	2724				END;
;	2725			TES;
;	2726	
;	2727		[SHOW_TOKEN]:
;	2728			SELECTONE TRUE OF
;	2729			SET
;	2730	
;	2731			[.PAT$GL_CONTEXT[MODE_BIT]]:
;	2732				BEGIN

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 5-4
; Digital Equipment Corporation
;
;	2733				PAT$SHOW_DEFAL ();
;	2734				END;
;	2735	
;	2736			[.PAT$GL_CONTEXT[SCOPE_BIT]]:
;	2737				BEGIN
;	2738				PAT$SHOW_SCOPE ();
;	2739				END;
;	2740	
;	2741			[.PAT$GL_CONTEXT[MODULE_BIT]]:
;	2742				BEGIN
;	2743				PAT$SHOW_MODULE();
;	2744				END;
;	2745	
;	2746			[.PAT$GL_CONTEXT[PAT_AREA_BIT]]:
;	2747				BEGIN
;	2748				$FAO_TT_OUT('currect patch area size:	!XL',
;     P 2749						.PAT$GL_PATAREA[DSC$W_LENGTH]);
;	2750				$FAO_TT_OUT('current patch area address:	!XL',
;     P 2751						.PAT$GL_PATAREA[DSC$A_POINTER]);
;	2752				END;
;	2753			TES;
;	2754	
;	2755		[UPDATE_TOKEN]:
;	2756			PAT$WRTIMG();
;	2757	
;	2758		[VERIFY_TOKEN]:
;	2759			BEGIN
;	2760			PAT$GL_CONTEXT[VERIFY_BIT] = TRUE;
;	2761			PAT$REPLACE_CMD ();
;	2762			END;
;	2763	
;	2764		[OUTRANGE]:
;	2765			IF .PAT$GL_SEMAN1[.SEMSP] EQL EOL_TOKEN
;	2766			THEN
;	2767				BEGIN
;	2768				PAT$END_OF_LINE (.SEMSP);
;	2769				RETURN FALSE
;	2770				END;
;	2771	
;	2772		TES;
;	2773		END;
;	2774	
;	2775	!++
;	2776	! Now output the command to the appended patch command text.  Since the command
;	2777	! has already been successfully executed, call WRITE_CMD to reconstruct the
;	2778	! command and write it to the command file, if desired.  PAT$WRITEFILE
;	2779	! handles output to the command file and to the appended patch command text
;	2780	! buffers, PAT$GL_TXTxxxx.
;	2781	!--
;	2782	WRITE_CMD(.SEMSP);
;	2783	
;	2784	!++
;	2785	! Check for end of command line.  If this is the end of the command line, then
;	2786	! prompt for another command otherwise process the next command in this command
;	2787	! line.

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 5-5
; Digital Equipment Corporation
;
;	2788	!--
;	2789	IF (.PAT$GL_SEMAN1 [.SEMSP + PAT$K_SPOS_ONE] EQL EOL_TOKEN)
;	2790	THEN
;	2791		BEGIN
;	2792		PAT$END_OF_LINE(.SEMSP);
;	2793		RETURN FALSE;
;	2794		END
;	2795	ELSE
;	2796		PAT$END_OF_CMD (.SEMSP);
;	2797	
;	2798	RETURN TRUE;
;	2799	END;



							    .PSECT  _PAT$PLIT,NOWRT,NOEXE,0

					      000EC P.ABF:  .BYTE   28							      ;
					      000ED 	    .ASCII  \currect patch area size:\<9>\!XL\			      ;
					      00109	    .BLKB   3
					      0010C P.ABG:  .BYTE   31							      ;
					      0010D 	    .ASCII  \current patch area address:\<9>\!XL\		      ;



							    .PSECT  _PAT$CODE,NOWRT,2

					 0FFC 001E3 	    .ENTRY  PAT$PERFORM_CMD, Save R2,R3,R4,R5,R6,R7,R8,R9,R10,R11     ; 2513
		         54 00000000G  EF  9E 001E5 	    MOVAB   PAT$FAO_OUT, R4					      ;
		         55 00000000G  00  9E 001EC 	    MOVAB   LIB$SIGNAL, R5					      ;
		         56 00000000G  EF  9E 001F3 	    MOVAB   PAT$GL_IHPPTR, R6					      ;
		         57 00000000G  EF  9E 001FA 	    MOVAB   PAT$GL_HEAD_LST, R7					      ;
		         58 00000000'  EF  9E 00201 	    MOVAB   SET_MODE_CMD+1, R8					      ;
		         59 00000000G  EF  9E 00208 	    MOVAB   PAT$GL_SEMAN1, R9					      ;
		         5A 00000000G  EF  9E 0020F 	    MOVAB   PAT$GL_PATAREA, R10					      ;
		         5B 00000000G  EF  9E 00216 	    MOVAB   PAT$GL_CONTEXT, R11					      ;
		         5E	FF78   CE  9E 0021D 	    MOVAB   -136(SP), SP					      ;
		         0F 00000000G  EF  E8 00222 	    BLBS    PAT$GB_EXEC_CMD, 1$					      ; 2571
	   0A	    02   AB	       02  E0 00229 	    BBS     #2, PAT$GL_CONTEXT+2, 1$				      ; 2572
		         50	  04   AC  D0 0022E 	    MOVL    SEMSP, R0						      ; 2573
		         0A	     6940  D1 00232 	    CMPL    PAT$GL_SEMAN1[R0], #10				      ;
				       77  12 00236 	    BNEQ    9$							      ;
		         50	  04   AC  D0 00238 1$:     MOVL    SEMSP, R0						      ; 2576
	   0F	         01	     6940  CF 0023C 	    CASEL   PAT$GL_SEMAN1[R0], #1, #15				      ;
	 0123	       0038	     002F     00241 2$:     .WORD   3$-2$,-						      ;
	 0089	       0070	     0065     00247		    4$-2$,-						      ;
	 0097	       00A4	     008E     0024D		    28$-2$,-						      ;
	 01DC	       00F3	     00BC     00253		    8$-2$,-						      ;
	 01CF	       018B	     010F     00259		    10$-2$,-						      ;
				     01D8     0025F		    12$-2$,-						      ;
								    13$-2$,-						      ;
								    16$-2$,-						      ;
								    14$-2$,-						      ;
								    18$-2$,-						      ;
								    22$-2$,-						      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 5-6
; Digital Equipment Corporation
;
								    43$-2$,-						      ;
								    24$-2$,-						      ;
								    34$-2$,-						      ;
								    41$-2$,-						      ;
								    42$-2$						      ;
	      00000063   8F	     6940  D1 00261 	    CMPL    PAT$GL_SEMAN1[R0], #99				      ; 2765
				       78  12 00269 	    BNEQ    15$							      ;
				       50  DD 0026B 	    PUSHL   R0							      ; 2768
				     01D0  31 0026D 	    BRW     45$							      ;
	      00000000G  EF	       00  FB 00270 3$:     CALLS   #0, PAT$ALIGN_CMD					      ; 2581
				       6A  11 00277 	    BRB     15$							      ; 2576
	   06	    02   AB	       03  E1 00279 4$:     BBC     #3, PAT$GL_CONTEXT+2, 5$				      ; 2584
	   6A	         66	       10  C1 0027E 	    ADDL3   #16, PAT$GL_IHPPTR, PAT$GL_PATAREA			      ; 2589
				       5F  11 00282 	    BRB     15$							      ; 2584
		         09	       6B  E9 00284 5$:     BLBC    PAT$GL_CONTEXT, 6$					      ;
	      00000000G  EF	       00  FB 00287 	    CALLS   #0, PAT$RESET_DEF					      ; 2594
				       53  11 0028E 	    BRB     15$							      ; 2584
	   09	         6B	       07  E1 00290 6$:     BBC     #7, PAT$GL_CONTEXT, 7$				      ;
	      00000000G  EF	       00  FB 00294 	    CALLS   #0, PAT$CANC_MODULE					      ; 2599
				       46  11 0029B 	    BRB     15$							      ; 2584
		         42	  02   AB  E9 0029D 7$:     BLBC    PAT$GL_CONTEXT+2, 15$				      ;
				       7E  D4 002A1 	    CLRL    -(SP)						      ; 2604
				     00B0  31 002A3 	    BRW     25$							      ;
				       7E  7C 002A6 8$:     CLRQ    -(SP)						      ; 2612
	      00000000G  EF	       02  FB 002A8 	    CALLS   #2, PAT$OPEN_COMFIL					      ;
				       32  11 002AF 9$:     BRB     15$							      ; 2576
		         52	       67  D0 002B1 10$:    MOVL    PAT$GL_HEAD_LST, POINTER				      ; 2620
				       52  D5 002B4 11$:    TSTL    POINTER						      ; 2621
				       7A  13 002B6 	    BEQL    21$							      ;
				       01  DD 002B8 	    PUSHL   #1							      ; 2624
		         7E	  04   A2  7D 002BA 	    MOVQ    4(POINTER), -(SP)					      ;
	      00000000G  EF	       03  FB 002BE 	    CALLS   #3, PAT$DEFINE_SYM					      ;
		         52	       62  D0 002C5 	    MOVL    (POINTER), POINTER					      ; 2625
				       EA  11 002C8 	    BRB     11$							      ; 2621
		    02   AB	  40   8F  88 002CA 12$:    BISB2   #64, PAT$GL_CONTEXT+2				      ; 2631
	      00000000G  EF	       00  FB 002CF 13$:    CALLS   #0, PAT$DEPOSIT_CMD					      ; 2636
				       5A  11 002D6 	    BRB     21$							      ; 2576
		    01   AB	       01  88 002D8 14$:    BISB2   #1, PAT$GL_CONTEXT+1				      ; 2640
	      00000000G  EF	       00  FB 002DC 	    CALLS   #0, PAT$EXAMINE_CMD					      ; 2641
				       78  11 002E3 15$:    BRB     26$							      ; 2576
		         52	       67  D0 002E5 16$:    MOVL    PAT$GL_HEAD_LST, POINTER				      ; 2648
				       52  D5 002E8 17$:    TSTL    POINTER						      ; 2649
				       7F  13 002EA 	    BEQL    29$							      ;
				       7E  D4 002EC 	    CLRL    -(SP)						      ; 2652
				  04   A2  9F 002EE 	    PUSHAB  4(POINTER)						      ;
	      00000000G  EF	       02  FB 002F1 	    CALLS   #2, PAT$OUT_MEM_LOC					      ;
		         52	       62  D0 002F8 	    MOVL    (POINTER), POINTER					      ; 2653
				       EB  11 002FB 	    BRB     17$							      ; 2649
			    00000000G  EF  94 002FD 18$:    CLRB    PAT$GB_TAKE_CMD					      ; 2659
	   60 00000000G  EF	       04  E1 00303 	    BBC     #4, PAT$GL_FLAGS, 29$				      ; 2660
		         53	       66  D0 0030B 	    MOVL    PAT$GL_IHPPTR, ECOLVL_PTR				      ; 2663
				       52  D4 0030E 	    CLRL    BIT_NUMBER						      ; 2664
	   12 00000000G  EF	       52  E1 00310 19$:    BBC     BIT_NUMBER, PAT$GL_ECO_UPD, 20$			      ; 2666
	   0E	         63	       52  E0 00318 	    BBS     BIT_NUMBER, (ECOLVL_PTR), 20$			      ; 2668
				  01   A2  9F 0031C 	    PUSHAB  1(BIT_NUMBER)					      ; 2670

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 5-7
; Digital Equipment Corporation
;
				       01  DD 0031F 	    PUSHL   #1							      ;
			    006D801B   8F  DD 00321 	    PUSHL   #7176219						      ;
		         65	       03  FB 00327 	    CALLS   #3, LIB$SIGNAL					      ;
	   DE	         52 0000007F   8F  F3 0032A 20$:    AOBLEQ  #127, BIT_NUMBER, 19$				      ; 2664
				       58  11 00332 21$:    BRB     31$							      ; 2576
		         50 00000000G  EF  D0 00334 22$:    MOVL    PAT$GB_MOD_PTR, R0					      ; 2676
		         09	  03   A0  E8 0033B 	    BLBS    3(R0), 23$						      ;
			    006D80C2   8F  DD 0033F 	    PUSHL   #7176386						      ; 2678
		         65	       01  FB 00345 	    CALLS   #1, LIB$SIGNAL					      ;
		    02   AB	  80   8F  88 00348 23$:    BISB2   #128, PAT$GL_CONTEXT+2				      ; 2679
				     00CD  31 0034D 	    BRW     43$							      ; 2684
		         0B	  02   AB  E9 00350 24$:    BLBC    PAT$GL_CONTEXT+2, 27$				      ; 2687
				       01  DD 00354 	    PUSHL   #1							      ; 2691
	      00000000G  EF	       01  FB 00356 25$:    CALLS   #1, PAT$SAVE_SCOPE					      ;
				       77  11 0035D 26$:    BRB     35$							      ; 2687
	   09	    02   AB	       02  E1 0035F 27$:    BBC     #2, PAT$GL_CONTEXT+2, 30$				      ;
	      00000000G  EF	       00  FB 00364 28$:    CALLS   #0, PAT$ECO_CMDS					      ; 2696
				       76  11 0036B 29$:    BRB     37$							      ; 2687
		         1E	       6B  E9 0036D 30$:    BLBC    PAT$GL_CONTEXT, 32$					      ;
			    00000000G  EF  9F 00370 	    PUSHAB  PAT$GL_COMRAB					      ; 2708
				       58  DD 00376 	    PUSHL   R8							      ;
		         7E	  FF   A8  9A 00378 	    MOVZBL  SET_MODE_CMD, -(SP)					      ;
	      00000000G  EF	       03  FB 0037C 	    CALLS   #3, PAT$WRITEFILE					      ;
				       01  DD 00383 	    PUSHL   #1							      ; 2709
	      00000000G  EF	       01  FB 00385 	    CALLS   #1, PAT$SET_MOD_LST					      ;
				       62  11 0038C 31$:    BRB     39$							      ; 2687
	   2A	    02   AB	       03  E1 0038E 32$:    BBC     #3, PAT$GL_CONTEXT+2, 33$				      ;
				4400   8F  BB 00393 	    PUSHR   #^M<R10,SP>						      ; 2714
		         50	       67  D0 00397 	    MOVL    PAT$GL_HEAD_LST, R0					      ;
				  04   A0  DD 0039A 	    PUSHL   4(R0)						      ;
	      00000000G  EF	       03  FB 0039D 	    CALLS   #3, PAT$MAP_ADDR					      ;
				       7E  D4 003A4 	    CLRL    -(SP)						      ; 2716
		         50	       6A  D0 003A6 	    MOVL    PAT$GL_PATAREA, R0					      ; 2717
		         51	       60  3C 003A9 	    MOVZWL  (R0), R1						      ;
	   7E	    04   A0	       51  C1 003AC 	    ADDL3   R1, 4(R0), -(SP)					      ;
				  04   A0  DD 003B1 	    PUSHL   4(R0)						      ; 2716
	      00000000G  EF	       03  FB 003B4 	    CALLS   #3, PAT$ADD_PAL					      ;
				       67  11 003BB 	    BRB     44$							      ; 2687
	   63	         6B	       07  E1 003BD 33$:    BBC     #7, PAT$GL_CONTEXT, 44$				      ;
				       7E  D4 003C1 	    CLRL    -(SP)						      ; 2723
	      00000000G  EF	       01  FB 003C3 	    CALLS   #1, PAT$SET_MODULE					      ;
				       58  11 003CA 	    BRB     44$							      ; 2576
		         09	       6B  E9 003CC 34$:    BLBC    PAT$GL_CONTEXT, 36$					      ; 2728
	      00000000G  EF	       00  FB 003CF 	    CALLS   #0, PAT$SHOW_DEFAL					      ; 2733
				       4C  11 003D6 35$:    BRB     44$							      ; 2728
		         09	  02   AB  E9 003D8 36$:    BLBC    PAT$GL_CONTEXT+2, 38$				      ;
	      00000000G  EF	       00  FB 003DC 	    CALLS   #0, PAT$SHOW_SCOPE					      ; 2738
				       3F  11 003E3 37$:    BRB     44$							      ; 2728
	   09	         6B	       07  E1 003E5 38$:    BBC     #7, PAT$GL_CONTEXT, 40$				      ;
	      00000000G  EF	       00  FB 003E9 	    CALLS   #0, PAT$SHOW_MODULE					      ; 2743
				       32  11 003F0 39$:    BRB     44$							      ; 2728
	   2D	    02   AB	       03  E1 003F2 40$:    BBC     #3, PAT$GL_CONTEXT+2, 44$				      ;
		         7E	  00   BA  3C 003F7 	    MOVZWL  @PAT$GL_PATAREA, -(SP)				      ; 2749
				  6B   A8  9F 003FB 	    PUSHAB  P.ABF						      ;
		         64	       02  FB 003FE 	    CALLS   #2, PAT$FAO_OUT					      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 5-8
; Digital Equipment Corporation
;
		         50	       6A  D0 00401 	    MOVL    PAT$GL_PATAREA, R0					      ; 2751
				  04   A0  DD 00404 	    PUSHL   4(R0)						      ;
				008B   C8  9F 00407 	    PUSHAB  P.ABG						      ;
		         64	       02  FB 0040B 	    CALLS   #2, PAT$FAO_OUT					      ;
				       14  11 0040E 	    BRB     44$							      ; 2576
	      00000000G  EF	       00  FB 00410 41$:    CALLS   #0, PAT$WRTIMG					      ; 2756
				       0B  11 00417 	    BRB     44$							      ; 2576
		    02   AB	       20  88 00419 42$:    BISB2   #32, PAT$GL_CONTEXT+2				      ; 2760
	      00000000G  EF	       00  FB 0041D 43$:    CALLS   #0, PAT$REPLACE_CMD					      ; 2761
				  04   AC  DD 00424 44$:    PUSHL   SEMSP						      ; 2782
	      00000000V  EF	       01  FB 00427 	    CALLS   #1, WRITE_CMD					      ;
		         50	  04   AC  D0 0042E 	    MOVL    SEMSP, R0						      ; 2789
	      00000063   8F	  08 A940  D1 00432 	    CMPL    PAT$GL_SEMAN1+8[R0], #99				      ;
				       0A  12 0043B 	    BNEQ    46$							      ;
				  04   AC  DD 0043D 	    PUSHL   SEMSP						      ; 2792
		  FD53   CF	       01  FB 00440 45$:    CALLS   #1, PAT$END_OF_LINE					      ;
				       0C  11 00445 	    BRB     47$							      ; 2793
				  04   AC  DD 00447 46$:    PUSHL   SEMSP						      ; 2796
		  FBB1   CF	       01  FB 0044A 	    CALLS   #1, PAT$END_OF_CMD					      ;
		         50	       01  D0 0044F 	    MOVL    #1, R0						      ; 2798
					   04 00452 	    RET     							      ;
				       50  D4 00453 47$:    CLRL    R0							      ; 2513
					   04 00455 	    RET     							      ;

; Routine Size:  627 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 6
; Digital Equipment Corporation
;
;	2800	GLOBAL ROUTINE WRITE_CMD (SEMSP) : NOVALUE =
;	2801	
;	2802	!++
;	2803	! FUNCTIONAL DESCRIPTION:
;	2804	!
;	2805	!	This routine builds the command lines for the output command file
;	2806	!	and the appended patch command text.  The command has already been
;	2807	!	executed successfully, the command verb is on the stack, and the
;	2808	!	parameters are in the parameter list.  The routine PAT$WRITEFILE does
;	2809	!	all the output to the command file and to the text buffers.  If a
;	2810	!	command file is not being created, then the commands are only entered
;	2811	!	in the text buffers.
;	2812	!
;	2813	! CALLING SEQUENCE:
;	2814	!
;	2815	!	WRITE_CMD (SEMSP)
;	2816	!
;	2817	! INPUTS:
;	2818	!
;	2819	!	SEMSP - Offset in parse stack which holds current verb token
;	2820	!
;	2821	! IMPLICIT INPUTS:
;	2822	!
;	2823	!	none
;	2824	!
;	2825	! OUTPUTS:
;	2826	!
;	2827	!	NONE
;	2828	!
;	2829	! IMPLICIT OUTPUTS:
;	2830	!
;	2831	!	none
;	2832	!
;	2833	! ROUTINE VALUE:
;	2834	!
;	2835	!	NONE
;	2836	!
;	2837	! SIDE EFFECTS:
;	2838	!
;	2839	!	A PATCH command is entered into the appended command text buffers
;	2840	!	and written to the output command file, if one is being created.
;	2841	!
;	2842	!--
;	2843	
;	2844	BEGIN
;	2845	
;	2846	LITERAL
;	2847		BLANK_FILL = %X'20';					! Ascii value for space
;	2848	
;	2849	LOCAL
;	2850		ALIGN_QUAL_OFF,						! Offset into ALIGN qualifier table
;	2851		COMMAND_BUF : VECTOR[NO_OF_INP_CHARS,BYTE],		! Buffer for output of command line to file
;	2852		COUNT;							! Counter for scope name loop
;	2853	
;	2854	!++

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 6-1
; Digital Equipment Corporation
;
;	2855	! Execute the complete command.
;	2856	!--
;	2857	CASE .PAT$GL_SEMAN1 [.SEMSP] FROM ALIGN_TOKEN TO VERIFY_TOKEN OF
;	2858	
;	2859		SET
;	2860	
;	2861		[ALIGN_TOKEN]:
;	2862			BEGIN
;	2863			CH$COPY(.ALIGN_CMD[0], ALIGN_CMD[1], BLANK_FILL,
;	2864				.ALIGN_CMD[0], CH$PTR(COMMAND_BUF, 0));
;	2865			IF .PAT$GL_CONTEXT[ALIGN_BYTE]
;	2866			THEN
;	2867				ALIGN_QUAL_OFF = 0
;	2868			ELSE
;	2869				IF .PAT$GL_CONTEXT[ALIGN_WORD]
;	2870				THEN
;	2871					ALIGN_QUAL_OFF = ALIGN_QUAL_LNG
;	2872				ELSE
;	2873					IF .PAT$GL_CONTEXT[ALIGN_LONG]
;	2874					THEN
;	2875						ALIGN_QUAL_OFF = ALIGN_QUAL_LNG*2
;	2876					ELSE
;	2877						IF .PAT$GL_CONTEXT[ALIGN_QUAD]
;	2878						THEN
;	2879							ALIGN_QUAL_OFF = ALIGN_QUAL_LNG*3
;	2880						ELSE
;	2881							ALIGN_QUAL_OFF = ALIGN_QUAL_LNG*4;
;	2882			CH$COPY(ALIGN_QUAL_LNG, ALIGN_QUAL_TBL[.ALIGN_QUAL_OFF],
;	2883				BLANK_FILL, ALIGN_QUAL_LNG,
;	2884				CH$PTR(COMMAND_BUF, .ALIGN_CMD[0]));
;	2885			PAT$WRITEFILE(.ALIGN_CMD[0]+ALIGN_QUAL_LNG,
;	2886					CH$PTR(COMMAND_BUF, 0), PAT$GL_COMRAB);
;	2887			PAT$WRITE_NAME(.SEMSP);
;	2888			END;
;	2889	
;	2890		[CANCEL_TOKEN]:
;	2891			SELECTONE TRUE OF
;	2892			SET
;	2893	
;	2894			[.PAT$GL_CONTEXT[PAT_AREA_BIT]]:
;	2895				BEGIN
;	2896				PAT$WRITEFILE(.CANCEL_PAT_CMD[0], CANCEL_PAT_CMD[1], PAT$GL_COMRAB);
;	2897				END;
;	2898	
;	2899			[.PAT$GL_CONTEXT[MODE_BIT]]:
;	2900				BEGIN
;	2901				PAT$WRITEFILE(.CANCEL_MODE_CMD[0], CANCEL_MODE_CMD[1], PAT$GL_COMRAB);
;	2902				END;
;	2903	
;	2904			[.PAT$GL_CONTEXT[MODULE_BIT]]:
;	2905				BEGIN
;	2906				IF (.PAT$GL_HEAD_LST NEQU 0)
;	2907				THEN
;	2908					BEGIN
;	2909					PAT$WRITEFILE(.CANCEL_MODU_CMD[0], CANCEL_MODU_CMD[1], PAT$GL_COMRAB);

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 6-2
; Digital Equipment Corporation
;
;	2910					PAT$WRITE_NAME(.SEMSP);
;	2911					PAT$WRITEFILE(.EXIT_CMD[0], EXIT_CMD[1], PAT$GL_COMRAB);
;	2912					END
;	2913				ELSE
;	2914					PAT$WRITEFILE(.CAN_MOD_ALL_CMD[0], CAN_MOD_ALL_CMD[1], PAT$GL_COMRAB);
;	2915				END;
;	2916	
;	2917			[.PAT$GL_CONTEXT[SCOPE_BIT]]:
;	2918				BEGIN
;	2919				PAT$WRITEFILE(.CANCEL_SCO_CMD[0], CANCEL_SCO_CMD[1], PAT$GL_COMRAB);
;	2920				END;
;	2921			TES;
;	2922	
;	2923		[CHECK_TOKEN]:
;	2924			BEGIN
;	2925			IF .PAT$GL_CONTEXT[SET_NOT_ECO]
;	2926			THEN
;	2927				PAT$WRITEFILE(.CHECK_N_ECO_CMD[0], CHECK_N_ECO_CMD[1],
;	2928						PAT$GL_COMRAB)
;	2929			ELSE
;	2930				PAT$WRITEFILE(.CHECK_ECO_CMD[0], CHECK_ECO_CMD[1],
;	2931						PAT$GL_COMRAB);
;	2932			PAT$WRITE_EXP1(.SEMSP);
;	2933			PAT$WRITEFILE(.EXIT_CMD[0], EXIT_CMD[1], PAT$GL_COMRAB);
;	2934			END;
;	2935	
;	2936		[CREATE_TOKEN]:
;	2937			0;
;	2938	
;	2939		[DEFINE_TOKEN]:
;	2940			BEGIN
;	2941			PAT$WRITEFILE(.DEFINE_CMD[0], DEFINE_CMD[1], PAT$GL_COMRAB);
;	2942			PAT$WRITE_NAME(.SEMSP);
;	2943			PAT$WRITEFILE(.EXIT_CMD[0], EXIT_CMD[1], PAT$GL_COMRAB);
;	2944			END;
;	2945	
;	2946		[DELETE_TOKEN]:
;	2947			BEGIN
;	2948			CH$COPY(.DELETE_CMD[0], DELETE_CMD[1], BLANK_FILL,
;	2949				.DELETE_CMD[0], CH$PTR(COMMAND_BUF, 0));
;	2950			PAT$GET_COMQUAL( COMMAND_BUF, .DELETE_CMD[0], .SEMSP);
;	2951			PAT$WRITE_INS(.SEMSP);
;	2952			PAT$WRITEFILE(.EXIT_CMD[0], EXIT_CMD[1], PAT$GL_COMRAB);
;	2953			END;
;	2954	
;	2955		[DEPOSIT_TOKEN]:
;	2956			BEGIN
;	2957			CH$COPY(.DEPOSIT_CMD[0], DEPOSIT_CMD[1], BLANK_FILL,
;	2958				.DEPOSIT_CMD[0], CH$PTR(COMMAND_BUF, 0));
;	2959			PAT$GET_COMQUAL( COMMAND_BUF, .DEPOSIT_CMD[0], .SEMSP);
;	2960			PAT$WRITE_INS(.SEMSP);
;	2961			PAT$WRITEFILE(.EXIT_CMD[0], EXIT_CMD[1], PAT$GL_COMRAB);
;	2962			END;
;	2963	
;	2964		[EXAMINE_TOKEN]:

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 6-3
; Digital Equipment Corporation
;
;	2965			BEGIN
;	2966			CH$COPY(.EXAMINE_CMD[0], EXAMINE_CMD[1], BLANK_FILL,
;	2967				.EXAMINE_CMD[0], CH$PTR(COMMAND_BUF, 0));
;	2968			PAT$GET_COMQUAL( COMMAND_BUF, .EXAMINE_CMD[0], .SEMSP);
;	2969			PAT$WRITE_EXP1(.SEMSP);
;	2970			END;
;	2971	
;	2972		[EVALUATE_TOKEN]:
;	2973			BEGIN
;	2974			LOCAL
;	2975				POINTER;
;	2976			POINTER = .PAT$GL_HEAD_LST;
;	2977			CH$COPY(.EVALUATE_CMD[0], EVALUATE_CMD[1], BLANK_FILL,
;	2978				.EVALUATE_CMD[0], CH$PTR(COMMAND_BUF, 0));
;	2979			PAT$GET_COMQUAL( COMMAND_BUF, .EVALUATE_CMD[0], .SEMSP);
;	2980			WHILE .POINTER NEQ 0
;	2981			DO
;	2982				BEGIN
;	2983				PAT$GL_BUF_SIZ = 0;
;	2984				PAT$CP_OUT_STR = CH$PTR(COMMAND_BUF, 0);
;	2985				PAT$FAO_PUT(VALUE_CMD, .LIST_ELEM_EXP1(.POINTER));
;	2986				PAT$WRITEFILE(.PAT$GL_BUF_SIZ, COMMAND_BUF, PAT$GL_COMRAB);
;	2987				POINTER = .LIST_ELEM_FLINK (.POINTER);
;	2988				END;
;	2989			PAT$WRITEFILE(.EXIT_CMD[0], EXIT_CMD[1], PAT$GL_COMRAB);
;	2990			END;
;	2991	
;	2992		[EXIT_TOKEN]:
;	2993			PAT$WRITEFILE(.EXIT_CMD[0], EXIT_CMD[1], PAT$GL_COMRAB);
;	2994	
;	2995		[INSERT_TOKEN]:
;	2996			BEGIN
;	2997			CH$COPY(.INSERT_CMD[0], INSERT_CMD[1], BLANK_FILL,
;	2998				.INSERT_CMD[0], CH$PTR(COMMAND_BUF, 0));
;	2999			PAT$GET_COMQUAL( COMMAND_BUF, .INSERT_CMD[0], .SEMSP);
;	3000			PAT$WRITE_INS(.SEMSP);
;	3001			PAT$WRITEFILE(.EXIT_CMD[0], EXIT_CMD[1], PAT$GL_COMRAB);
;	3002			END;
;	3003	
;	3004		[REPLACE_TOKEN]:
;	3005			BEGIN
;	3006			CH$COPY(.REPLACE_CMD[0], REPLACE_CMD[1], BLANK_FILL,
;	3007				.REPLACE_CMD[0], CH$PTR(COMMAND_BUF, 0));
;	3008			PAT$GET_COMQUAL( COMMAND_BUF, .REPLACE_CMD[0], .SEMSP);
;	3009			PAT$WRITE_INS(.SEMSP);
;	3010			PAT$WRITEFILE(.EXIT_CMD[0], EXIT_CMD[1], PAT$GL_COMRAB);
;	3011			END;
;	3012	
;	3013		[SET_TOKEN]:
;	3014			SELECTONE TRUE OF
;	3015			SET
;	3016	
;	3017			[.PAT$GL_CONTEXT[SCOPE_BIT]]:
;	3018				BEGIN
;	3019				PAT$WRITEFILE(.SET_SCO_CMD[0], SET_SCO_CMD[1], PAT$GL_COMRAB);

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 6-4
; Digital Equipment Corporation
;
;	3020				PAT$GL_BUF_SIZ = 0;
;	3021				PAT$CP_OUT_STR = CH$PTR(COMMAND_BUF, 0);
;	3022				COUNT = 0;
;	3023				WHILE .PAT$GL_CSP_PTR[ .COUNT ] NEQA 0
;	3024				DO
;	3025					BEGIN
;	3026					PAT$FAO_PUT(SCO_NAM_CMD, .PAT$GL_CSP_PTR[.COUNT]);
;	3027					COUNT = .COUNT + 1;
;	3028					END;
;	3029				PAT$WRITEFILE(.PAT$GL_BUF_SIZ, COMMAND_BUF, PAT$GL_COMRAB);
;	3030				END;
;	3031	
;	3032			[.PAT$GL_CONTEXT[SET_ECO]]:
;	3033				BEGIN
;	3034				PAT$WRITEFILE(.SET_ECO_CMD[0], SET_ECO_CMD[1], PAT$GL_COMRAB);
;	3035				PAT$WRITE_EXP1(.SEMSP);
;	3036				END;
;	3037	
;	3038			[.PAT$GL_CONTEXT[MODE_BIT]]:
;	3039				BEGIN
;	3040				PAT$WRITEFILE(.EXIT_CMD[0], EXIT_CMD[1], PAT$GL_COMRAB);
;	3041				END;
;	3042	
;	3043			[.PAT$GL_CONTEXT[PAT_AREA_BIT]]:
;	3044				BEGIN
;	3045				PAT$WRITEFILE(.SET_PAT_CMD[0], SET_PAT_CMD[1], PAT$GL_COMRAB);
;	3046				PAT$WRITE_EXP1(.SEMSP);
;	3047				END;
;	3048	
;	3049			[.PAT$GL_CONTEXT[MODULE_BIT]]:
;	3050				BEGIN
;	3051				IF (.PAT$GL_HEAD_LST NEQU 0)
;	3052				THEN
;	3053					BEGIN
;	3054					PAT$WRITEFILE(.SET_MODU_CMD[0], SET_MODU_CMD[1], PAT$GL_COMRAB);
;	3055					PAT$WRITE_NAME(.SEMSP);
;	3056					PAT$WRITEFILE(.EXIT_CMD[0], EXIT_CMD[1], PAT$GL_COMRAB);
;	3057					END
;	3058				ELSE
;	3059					PAT$WRITEFILE(.SET_MOD_ALL_CMD[0], SET_MOD_ALL_CMD[1], PAT$GL_COMRAB);
;	3060				END;
;	3061			TES;
;	3062	
;	3063		[SHOW_TOKEN]:
;	3064			SELECTONE TRUE OF
;	3065			SET
;	3066	
;	3067			[.PAT$GL_CONTEXT[MODE_BIT]]:
;	3068				BEGIN
;	3069				PAT$WRITEFILE(.SHOW_MODE_CMD[0], SHOW_MODE_CMD[1], PAT$GL_COMRAB);
;	3070				END;
;	3071	
;	3072			[.PAT$GL_CONTEXT[SCOPE_BIT]]:
;	3073				BEGIN
;	3074				PAT$WRITEFILE(.SHOW_SCO_CMD[0], SHOW_SCO_CMD[1], PAT$GL_COMRAB);

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 6-5
; Digital Equipment Corporation
;
;	3075				END;
;	3076	
;	3077			[.PAT$GL_CONTEXT[MODULE_BIT]]:
;	3078				BEGIN
;	3079				PAT$WRITEFILE(.SHOW_MODU_CMD[0], SHOW_MODU_CMD[1], PAT$GL_COMRAB);
;	3080				END;
;	3081			TES;
;	3082	
;	3083		[UPDATE_TOKEN]:
;	3084			PAT$WRITEFILE(.UPDATE_CMD[0], UPDATE_CMD[1], PAT$GL_COMRAB);
;	3085	
;	3086		[VERIFY_TOKEN]:
;	3087			BEGIN
;	3088			CH$COPY(.VERIFY_CMD[0], VERIFY_CMD[1], BLANK_FILL,
;	3089				.VERIFY_CMD[0], CH$PTR(COMMAND_BUF, 0));
;	3090			PAT$GET_COMQUAL( COMMAND_BUF, .VERIFY_CMD[0], .SEMSP);
;	3091			PAT$WRITE_INS(.SEMSP);
;	3092			PAT$WRITEFILE(.EXIT_CMD[0], EXIT_CMD[1], PAT$GL_COMRAB);
;	3093			END;
;	3094	
;	3095		[OUTRANGE]:
;	3096			0;
;	3097	
;	3098		TES;
;	3099	RETURN
;	3100	END;





					 0FFC 00456 	    .ENTRY  WRITE_CMD, Save R2,R3,R4,R5,R6,R7,R8,R9,R10,R11	      ; 2800
		         58 00000000G  EF  9E 00458 	    MOVAB   PAT$WRITEFILE, R8					      ;
		         59 00000000G  EF  9E 0045F 	    MOVAB   PAT$GL_CONTEXT, R9					      ;
		         5A 00000000G  EF  9E 00466 	    MOVAB   PAT$GL_COMRAB, R10					      ;
		         5B 00000000'  EF  9E 0046D 	    MOVAB   ALIGN_CMD, R11					      ;
		         5E	FF7C   CE  9E 00474 	    MOVAB   -132(SP), SP					      ;
		         56	  04   AC  D0 00479 	    MOVL    SEMSP, R6						      ; 2857
	   0F	         01 00000000GEF46  CF 0047D 	    CASEL   PAT$GL_SEMAN1[R6], #1, #15				      ;
	 00CD	       007C	     0021     00486 1$:     .WORD   2$-1$,-						      ;
	 0100	       00F4	     02FD     0048C		    8$-1$,-						      ;
	 012F	       0151	     0117     00492		    15$-1$,-						      ;
	 01C3	       01AC	     02F1     00498		    50$-1$,-						      ;
	 02B8	       0286	     01DB     0049E		    18$-1$,-						      ;
				     02C5     004A4		    20$-1$,-						      ;
								    21$-1$,-						      ;
								    24$-1$,-						      ;
								    23$-1$,-						      ;
								    48$-1$,-						      ;
								    27$-1$,-						      ;
								    28$-1$,-						      ;
								    30$-1$,-						      ;
								    41$-1$,-						      ;
								    45$-1$,-						      ;
								    46$-1$						      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 6-6
; Digital Equipment Corporation
;
					   04 004A6 	    RET     							      ;
		         51	       6B  9A 004A7 2$:     MOVZBL  ALIGN_CMD, R1					      ; 2863
		         50	       6B  9A 004AA 	    MOVZBL  ALIGN_CMD, R0					      ; 2864
	   20	    01   AB	       51  2C 004AD 	    MOVC5   R1, ALIGN_CMD+1, #32, R0, COMMAND_BUF		      ; 2863
		         6E	       50     004B2									      ;
	   04	         69	       06  E1 004B4 	    BBC     #6, PAT$GL_CONTEXT, 3$				      ; 2865
				       50  D4 004B8 	    CLRL    ALIGN_QUAL_OFF					      ; 2867
				       1E  11 004BA 	    BRB     7$							      ; 2865
	   05	         69	       04  E1 004BC 3$:     BBC     #4, PAT$GL_CONTEXT, 4$				      ; 2869
		         50	       04  D0 004C0 	    MOVL    #4, ALIGN_QUAL_OFF					      ; 2871
				       15  11 004C3 	    BRB     7$							      ; 2869
	   05	         69	       02  E1 004C5 4$:     BBC     #2, PAT$GL_CONTEXT, 5$				      ; 2873
		         50	       08  D0 004C9 	    MOVL    #8, ALIGN_QUAL_OFF					      ; 2875
				       0C  11 004CC 	    BRB     7$							      ; 2873
	   05	         69	       03  E1 004CE 5$:     BBC     #3, PAT$GL_CONTEXT, 6$				      ; 2877
		         50	       0C  D0 004D2 	    MOVL    #12, ALIGN_QUAL_OFF					      ; 2879
				       03  11 004D5 	    BRB     7$							      ; 2877
		         50	       10  D0 004D7 6$:     MOVL    #16, ALIGN_QUAL_OFF					      ; 2881
		         51	       6E  9E 004DA 7$:     MOVAB   COMMAND_BUF, R1					      ; 2884
		         52	       6B  9A 004DD 	    MOVZBL  ALIGN_CMD, R2					      ;
		         51	       52  C0 004E0 	    ADDL2   R2, R1						      ;
	   61	  00D8 CB40	       04  28 004E3 	    MOVC3   #4, ALIGN_QUAL_TBL[ALIGN_QUAL_OFF], (R1)		      ; 2882
				       5A  DD 004EA 	    PUSHL   R10							      ; 2885
				  04   AE  9F 004EC 	    PUSHAB  COMMAND_BUF						      ; 2886
		         7E	       6B  9A 004EF 	    MOVZBL  ALIGN_CMD, -(SP)					      ; 2885
		         6E	       04  C0 004F2 	    ADDL2   #4, (SP)						      ;
		         68	       03  FB 004F5 	    CALLS   #3, PAT$WRITEFILE					      ;
				       56  DD 004F8 	    PUSHL   R6							      ; 2887
	      00000000G  EF	       01  FB 004FA 	    CALLS   #1, PAT$WRITE_NAME					      ;
					   04 00501 	    RET     							      ; 2857
	   0B	    02   A9	       03  E1 00502 8$:     BBC     #3, PAT$GL_CONTEXT+2, 9$				      ; 2891
				       5A  DD 00507 	    PUSHL   R10							      ; 2896
				  2D   AB  9F 00509 	    PUSHAB  CANCEL_PAT_CMD+1					      ;
		         7E	  2C   AB  9A 0050C 	    MOVZBL  CANCEL_PAT_CMD, -(SP)				      ;
				       3E  11 00510 	    BRB     14$							      ;
		         0B	       69  E9 00512 9$:     BLBC    PAT$GL_CONTEXT, 10$					      ; 2891
				       5A  DD 00515 	    PUSHL   R10							      ; 2901
				  05   AB  9F 00517 	    PUSHAB  CANCEL_MODE_CMD+1					      ;
		         7E	  04   AB  9A 0051A 	    MOVZBL  CANCEL_MODE_CMD, -(SP)				      ;
				       30  11 0051E 	    BRB     14$							      ;
	   1E	         69	       07  E1 00520 10$:    BBC     #7, PAT$GL_CONTEXT, 12$				      ; 2891
			    00000000G  EF  D5 00524 	    TSTL    PAT$GL_HEAD_LST					      ; 2906
				       0B  13 0052A 	    BEQL    11$							      ;
				       5A  DD 0052C 	    PUSHL   R10							      ; 2909
				  0D   AB  9F 0052E 	    PUSHAB  CANCEL_MODU_CMD+1					      ;
		         7E	  0C   AB  9A 00531 	    MOVZBL  CANCEL_MODU_CMD, -(SP)				      ;
				       4C  11 00535 	    BRB     19$							      ;
				       5A  DD 00537 11$:    PUSHL   R10							      ; 2914
				  15   AB  9F 00539 	    PUSHAB  CAN_MOD_ALL_CMD+1					      ;
		         7E	  14   AB  9A 0053C 	    MOVZBL  CAN_MOD_ALL_CMD, -(SP)				      ;
				       0E  11 00540 	    BRB     14$							      ;
		         01	  02   A9  E8 00542 12$:    BLBS    PAT$GL_CONTEXT+2, 13$				      ; 2891
					   04 00546 	    RET     							      ;
				       5A  DD 00547 13$:    PUSHL   R10							      ; 2919
				  25   AB  9F 00549 	    PUSHAB  CANCEL_SCO_CMD+1					      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 6-7
; Digital Equipment Corporation
;
		         7E	  24   AB  9A 0054C 	    MOVZBL  CANCEL_SCO_CMD, -(SP)				      ;
				     022D  31 00550 14$:    BRW     49$							      ;
	   0B	         69	       01  E1 00553 15$:    BBC     #1, PAT$GL_CONTEXT, 16$				      ; 2925
				       5A  DD 00557 	    PUSHL   R10							      ; 2927
				  35   AB  9F 00559 	    PUSHAB  CHECK_N_ECO_CMD+1					      ;
		         7E	  34   AB  9A 0055C 	    MOVZBL  CHECK_N_ECO_CMD, -(SP)				      ;
				       09  11 00560 	    BRB     17$							      ;
				       5A  DD 00562 16$:    PUSHL   R10							      ; 2930
				  41   AB  9F 00564 	    PUSHAB  CHECK_ECO_CMD+1					      ;
		         7E	  40   AB  9A 00567 	    MOVZBL  CHECK_ECO_CMD, -(SP)				      ;
		         68	       03  FB 0056B 17$:    CALLS   #3, PAT$WRITEFILE					      ;
				       56  DD 0056E 	    PUSHL   R6							      ; 2932
	      00000000G  EF	       01  FB 00570 	    CALLS   #1, PAT$WRITE_EXP1					      ;
				     01FD  31 00577 	    BRW     48$							      ; 2933
				       5A  DD 0057A 18$:    PUSHL   R10							      ; 2941
				  49   AB  9F 0057C 	    PUSHAB  DEFINE_CMD+1					      ;
		         7E	  48   AB  9A 0057F 	    MOVZBL  DEFINE_CMD, -(SP)					      ;
				     016B  31 00583 19$:    BRW     38$							      ;
		         51	  4C   AB  9A 00586 20$:    MOVZBL  DELETE_CMD, R1					      ; 2948
		         50	  4C   AB  9A 0058A 	    MOVZBL  DELETE_CMD, R0					      ; 2949
	   20	    4D   AB	       51  2C 0058E 	    MOVC5   R1, DELETE_CMD+1, #32, R0, COMMAND_BUF		      ; 2948
		         6E	       50     00593									      ;
				       56  DD 00595 	    PUSHL   R6							      ; 2950
		         7E	  4C   AB  9A 00597 	    MOVZBL  DELETE_CMD, -(SP)					      ;
				       15  11 0059B 	    BRB     22$							      ;
		         51	  54   AB  9A 0059D 21$:    MOVZBL  DEPOSIT_CMD, R1					      ; 2957
		         50	  54   AB  9A 005A1 	    MOVZBL  DEPOSIT_CMD, R0					      ; 2958
	   20	    55   AB	       51  2C 005A5 	    MOVC5   R1, DEPOSIT_CMD+1, #32, R0, COMMAND_BUF		      ; 2957
		         6E	       50     005AA									      ;
				       56  DD 005AC 	    PUSHL   R6							      ; 2959
		         7E	  54   AB  9A 005AE 	    MOVZBL  DEPOSIT_CMD, -(SP)					      ;
				     01AF  31 005B2 22$:    BRW     47$							      ;
		         51	  58   AB  9A 005B5 23$:    MOVZBL  EXAMINE_CMD, R1					      ; 2966
		         50	  58   AB  9A 005B9 	    MOVZBL  EXAMINE_CMD, R0					      ; 2967
	   20	    59   AB	       51  2C 005BD 	    MOVC5   R1, EXAMINE_CMD+1, #32, R0, COMMAND_BUF		      ; 2966
		         6E	       50     005C2									      ;
				       56  DD 005C4 	    PUSHL   R6							      ; 2968
		         7E	  58   AB  9A 005C6 	    MOVZBL  EXAMINE_CMD, -(SP)					      ;
				  08   AE  9F 005CA 	    PUSHAB  COMMAND_BUF						      ;
	      00000000V  EF	       03  FB 005CD 	    CALLS   #3, PAT$GET_COMQUAL					      ;
				     00F9  31 005D4 	    BRW     36$							      ; 2969
		         57 00000000G  EF  D0 005D7 24$:    MOVL    PAT$GL_HEAD_LST, POINTER				      ; 2976
		         51	  5C   AB  9A 005DE 	    MOVZBL  EVALUATE_CMD, R1					      ; 2977
		         50	  5C   AB  9A 005E2 	    MOVZBL  EVALUATE_CMD, R0					      ; 2978
	   20	    5D   AB	       51  2C 005E6 	    MOVC5   R1, EVALUATE_CMD+1, #32, R0, COMMAND_BUF		      ; 2977
		         6E	       50     005EB									      ;
				       56  DD 005ED 	    PUSHL   R6							      ; 2979
		         7E	  5C   AB  9A 005EF 	    MOVZBL  EVALUATE_CMD, -(SP)					      ;
				  08   AE  9F 005F3 	    PUSHAB  COMMAND_BUF						      ;
	      00000000V  EF	       03  FB 005F6 	    CALLS   #3, PAT$GET_COMQUAL					      ;
				       57  D5 005FD 25$:    TSTL    POINTER						      ; 2980
				       03  12 005FF 	    BNEQ    26$							      ;
				     0173  31 00601 	    BRW     48$							      ;
			    00000000G  EF  D4 00604 26$:    CLRL    PAT$GL_BUF_SIZ					      ; 2983
	      00000000G  EF	       6E  9E 0060A 	    MOVAB   COMMAND_BUF, PAT$CP_OUT_STR				      ; 2984

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 6-8
; Digital Equipment Corporation
;
				  04   A7  DD 00611 	    PUSHL   4(POINTER)						      ; 2985
				00CC   CB  9F 00614 	    PUSHAB  VALUE_CMD						      ; 2800
	      00000000G  EF	       02  FB 00618 	    CALLS   #2, PAT$FAO_PUT					      ; 2985
				       5A  DD 0061F 	    PUSHL   R10							      ; 2986
				  04   AE  9F 00621 	    PUSHAB  COMMAND_BUF						      ;
			    00000000G  EF  DD 00624 	    PUSHL   PAT$GL_BUF_SIZ					      ;
		         68	       03  FB 0062A 	    CALLS   #3, PAT$WRITEFILE					      ;
		         57	       67  D0 0062D 	    MOVL    (POINTER), POINTER					      ; 2987
				       CB  11 00630 	    BRB     25$							      ; 2980
		         51	  64   AB  9A 00632 27$:    MOVZBL  INSERT_CMD, R1					      ; 2997
		         50	  64   AB  9A 00636 	    MOVZBL  INSERT_CMD, R0					      ; 2998
	   20	    65   AB	       51  2C 0063A 	    MOVC5   R1, INSERT_CMD+1, #32, R0, COMMAND_BUF		      ; 2997
		         6E	       50     0063F									      ;
				       56  DD 00641 	    PUSHL   R6							      ; 2999
		         7E	  64   AB  9A 00643 	    MOVZBL  INSERT_CMD, -(SP)					      ;
				       15  11 00647 	    BRB     29$							      ;
		         51	  70   AB  9A 00649 28$:    MOVZBL  REPLACE_CMD, R1					      ; 3006
		         50	  70   AB  9A 0064D 	    MOVZBL  REPLACE_CMD, R0					      ; 3007
	   20	    71   AB	       51  2C 00651 	    MOVC5   R1, REPLACE_CMD+1, #32, R0, COMMAND_BUF		      ; 3006
		         6E	       50     00656									      ;
				       56  DD 00658 	    PUSHL   R6							      ; 3008
		         7E	  70   AB  9A 0065A 	    MOVZBL  REPLACE_CMD, -(SP)					      ;
				     0103  31 0065E 29$:    BRW     47$							      ;
		         45	  02   A9  E9 00661 30$:    BLBC    PAT$GL_CONTEXT+2, 33$				      ; 3014
				       5A  DD 00665 	    PUSHL   R10							      ; 3019
				00A9   CB  9F 00667 	    PUSHAB  SET_SCO_CMD+1					      ;
		         7E	00A8   CB  9A 0066B 	    MOVZBL  SET_SCO_CMD, -(SP)					      ;
		         68	       03  FB 00670 	    CALLS   #3, PAT$WRITEFILE					      ;
			    00000000G  EF  D4 00673 	    CLRL    PAT$GL_BUF_SIZ					      ; 3020
	      00000000G  EF	       6E  9E 00679 	    MOVAB   COMMAND_BUF, PAT$CP_OUT_STR				      ; 3021
				       52  D4 00680 	    CLRL    COUNT						      ; 3022
		         50 00000000GFF42  D0 00682 31$:    MOVL    @PAT$GL_CSP_PTR[COUNT], R0				      ; 3023
				       10  13 0068A 	    BEQL    32$							      ;
				       50  DD 0068C 	    PUSHL   R0							      ; 3026
				  74   AB  9F 0068E 	    PUSHAB  SCO_NAM_CMD						      ; 2800
	      00000000G  EF	       02  FB 00691 	    CALLS   #2, PAT$FAO_PUT					      ; 3026
				       52  D6 00698 	    INCL    COUNT						      ; 3027
				       E6  11 0069A 	    BRB     31$							      ; 3023
				       5A  DD 0069C 32$:    PUSHL   R10							      ; 3029
				  04   AE  9F 0069E 	    PUSHAB  COMMAND_BUF						      ;
			    00000000G  EF  DD 006A1 	    PUSHL   PAT$GL_BUF_SIZ					      ;
				     0081  31 006A7 	    BRW     43$							      ;
	   0B	    02   A9	       02  E1 006AA 33$:    BBC     #2, PAT$GL_CONTEXT+2, 34$				      ; 3014
				       5A  DD 006AF 	    PUSHL   R10							      ; 3034
				  79   AB  9F 006B1 	    PUSHAB  SET_ECO_CMD+1					      ;
		         7E	  78   AB  9A 006B4 	    MOVZBL  SET_ECO_CMD, -(SP)					      ;
				       13  11 006B8 	    BRB     35$							      ;
		         40	       69  E8 006BA 34$:    BLBS    PAT$GL_CONTEXT, 39$					      ; 3014
	   18	    02   A9	       03  E1 006BD 	    BBC     #3, PAT$GL_CONTEXT+2, 37$				      ;
				       5A  DD 006C2 	    PUSHL   R10							      ; 3045
				00A1   CB  9F 006C4 	    PUSHAB  SET_PAT_CMD+1					      ;
		         7E	00A0   CB  9A 006C8 	    MOVZBL  SET_PAT_CMD, -(SP)					      ;
		         68	       03  FB 006CD 35$:    CALLS   #3, PAT$WRITEFILE					      ;
				       56  DD 006D0 36$:    PUSHL   R6							      ; 3046
	      00000000G  EF	       01  FB 006D2 	    CALLS   #1, PAT$WRITE_EXP1					      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 6-9
; Digital Equipment Corporation
;
					   04 006D9 	    RET     							      ; 3014
	   4F	         69	       07  E1 006DA 37$:    BBC     #7, PAT$GL_CONTEXT, 44$				      ;
			    00000000G  EF  D5 006DE 	    TSTL    PAT$GL_HEAD_LST					      ; 3051
				       19  13 006E4 	    BEQL    40$							      ;
				       5A  DD 006E6 	    PUSHL   R10							      ; 3054
				0089   CB  9F 006E8 	    PUSHAB  SET_MODU_CMD+1					      ;
		         7E	0088   CB  9A 006EC 	    MOVZBL  SET_MODU_CMD, -(SP)					      ;
		         68	       03  FB 006F1 38$:    CALLS   #3, PAT$WRITEFILE					      ;
				       56  DD 006F4 	    PUSHL   R6							      ; 3055
	      00000000G  EF	       01  FB 006F6 	    CALLS   #1, PAT$WRITE_NAME					      ;
				       78  11 006FD 39$:    BRB     48$							      ; 3056
				       5A  DD 006FF 40$:    PUSHL   R10							      ; 3059
				0091   CB  9F 00701 	    PUSHAB  SET_MOD_ALL_CMD+1					      ;
		         7E	0090   CB  9A 00705 	    MOVZBL  SET_MOD_ALL_CMD, -(SP)				      ;
				       74  11 0070A 	    BRB     49$							      ;
		         0D	       69  E9 0070C 41$:    BLBC    PAT$GL_CONTEXT, 42$					      ; 3064
				       5A  DD 0070F 	    PUSHL   R10							      ; 3069
				00B1   CB  9F 00711 	    PUSHAB  SHOW_MODE_CMD+1					      ;
		         7E	00B0   CB  9A 00715 	    MOVZBL  SHOW_MODE_CMD, -(SP)				      ;
				       64  11 0071A 	    BRB     49$							      ;
		         0D	  02   A9  E9 0071C 42$:    BLBC    PAT$GL_CONTEXT+2, 44$				      ; 3064
				       5A  DD 00720 	    PUSHL   R10							      ; 3074
				00C1   CB  9F 00722 	    PUSHAB  SHOW_SCO_CMD+1					      ;
		         7E	00C0   CB  9A 00726 	    MOVZBL  SHOW_SCO_CMD, -(SP)					      ;
				       53  11 0072B 43$:    BRB     49$							      ;
	   52	         69	       07  E1 0072D 44$:    BBC     #7, PAT$GL_CONTEXT, 50$				      ; 3064
				       5A  DD 00731 	    PUSHL   R10							      ; 3079
				00B9   CB  9F 00733 	    PUSHAB  SHOW_MODU_CMD+1					      ;
		         7E	00B8   CB  9A 00737 	    MOVZBL  SHOW_MODU_CMD, -(SP)				      ;
				       42  11 0073C 	    BRB     49$							      ;
				       5A  DD 0073E 45$:    PUSHL   R10							      ; 3084
				00C9   CB  9F 00740 	    PUSHAB  UPDATE_CMD+1					      ;
		         7E	00C8   CB  9A 00744 	    MOVZBL  UPDATE_CMD, -(SP)					      ;
				       35  11 00749 	    BRB     49$							      ;
		         51	00D4   CB  9A 0074B 46$:    MOVZBL  VERIFY_CMD, R1					      ; 3088
		         50	00D4   CB  9A 00750 	    MOVZBL  VERIFY_CMD, R0					      ; 3089
	   20	  00D5   CB	       51  2C 00755 	    MOVC5   R1, VERIFY_CMD+1, #32, R0, COMMAND_BUF		      ; 3088
		         6E	       50     0075B									      ;
				       56  DD 0075D 	    PUSHL   R6							      ; 3090
		         7E	00D4   CB  9A 0075F 	    MOVZBL  VERIFY_CMD, -(SP)					      ;
				  08   AE  9F 00764 47$:    PUSHAB  COMMAND_BUF						      ;
	      00000000V  EF	       03  FB 00767 	    CALLS   #3, PAT$GET_COMQUAL					      ;
				       56  DD 0076E 	    PUSHL   R6							      ; 3091
	      00000000G  EF	       01  FB 00770 	    CALLS   #1, PAT$WRITE_INS					      ;
				       5A  DD 00777 48$:    PUSHL   R10							      ; 3092
				  61   AB  9F 00779 	    PUSHAB  EXIT_CMD+1						      ;
		         7E	  60   AB  9A 0077C 	    MOVZBL  EXIT_CMD, -(SP)					      ;
		         68	       03  FB 00780 49$:    CALLS   #3, PAT$WRITEFILE					      ;
					   04 00783 50$:    RET     							      ; 2800

; Routine Size:  814 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 7
; Digital Equipment Corporation
;
;	3101	GLOBAL ROUTINE PAT$SET_OVERS (LEVEL, TOKEN) : NOVALUE =
;	3102	
;	3103	!++
;	3104	! FUNCTIONAL DESCRIPTION:
;	3105	!
;	3106	!	Sets OVERRIDE or LOCAL modes by setting the new mode level, and
;	3107	!	then setting the mode itself.
;	3108	!
;	3109	! CALLING SEQUENCE:
;	3110	!
;	3111	!	PAT$SET_OVERS ()
;	3112	!
;	3113	! INPUTS:
;	3114	!
;	3115	!	LEVEL		- Level of modes to set
;	3116	!	TOKEN		- Mode token to be set in the mode stack
;	3117	!
;	3118	! IMPLICIT INPUTS:
;	3119	!
;	3120	!	none
;	3121	!
;	3122	! OUTPUTS:
;	3123	!
;	3124	!	none
;	3125	!
;	3126	! IMPLICIT OUTPUTS:
;	3127	!
;	3128	!	none
;	3129	!
;	3130	! ROUTINE VALUE:
;	3131	!
;	3132	!	NOVALUE
;	3133	!
;	3134	! SIDE EFFECTS:
;	3135	!
;	3136	!	The appropriate modes are set.
;	3137	!--
;	3138	
;	3139	BEGIN
;	3140	PAT$SET_MOD_LVL (.LEVEL);
;	3141	PAT$SET_NEW_MOD (.TOKEN);
;	3142	END;





					 0000 00784 	    .ENTRY  PAT$SET_OVERS, Save nothing				      ; 3101
				  04   AC  DD 00786 	    PUSHL   LEVEL						      ; 3140
	      00000000G  EF	       01  FB 00789 	    CALLS   #1, PAT$SET_MOD_LVL					      ;
				  08   AC  DD 00790 	    PUSHL   TOKEN						      ; 3141
	      00000000G  EF	       01  FB 00793 	    CALLS   #1, PAT$SET_NEW_MOD					      ;
					   04 0079A 	    RET     							      ; 3101

; Routine Size:  23 bytes

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 7-1
; Digital Equipment Corporation
;



; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 8
; Digital Equipment Corporation
;
;	3143	GLOBAL ROUTINE PAT$SET_COMQUAL (QUAL_OFFSET) : NOVALUE =
;	3144	
;	3145	!++
;	3146	! FUNCTIONAL DESCRIPTION:
;	3147	!
;	3148	!	Sets a bit in the command qualifier longword, PAT$GL_COMQUAL,
;	3149	!	corresponding to the qualifier specified.  These bits are used to
;	3150	!	reconstruct the command line for the output command file and the
;	3151	!	appended patch text.
;	3152	!
;	3153	! CALLING SEQUENCE:
;	3154	!
;	3155	!	PAT$SET_COMQUAL( QUAL_OFFSET)
;	3156	!
;	3157	! INPUTS:
;	3158	!
;	3159	!	QUAL_OFFSET	- Offset to position in parse stack which contains
;	3160	!			  the qualifier
;	3161	!
;	3162	! IMPLICIT INPUTS:
;	3163	!
;	3164	!	none
;	3165	!
;	3166	! OUTPUTS:
;	3167	!
;	3168	!	none
;	3169	!
;	3170	! IMPLICIT OUTPUTS:
;	3171	!
;	3172	!	none
;	3173	!
;	3174	! ROUTINE VALUE:
;	3175	!
;	3176	!	NOVALUE
;	3177	!
;	3178	! SIDE EFFECTS:
;	3179	!
;	3180	!	The appropriate bit is set.
;	3181	!--
;	3182	
;	3183	BEGIN
;	3184	
;	3185	!++
;	3186	! The command qualifier table is a stream of bytes.  Each entry consists of two
;	3187	! bytes.  The first byte is the token value for the qualifier (which is the
;	3188	! value on the parse stack).  The second byte is the corresponding bit number
;	3189	! to be set in the command qualifier longword, PAT$GL_COMQUAL.
;	3190	!--
;	3191	BIND
;	3192		COM_QUAL_TABLE = UPLIT BYTE (
;	3193						INSTRUCTI_TOKEN, INSTR_QUAL,
;	3194						DECIMAL_TOKEN, DECIMAL_QUAL,
;	3195						WORD_TOKEN, WORD_QUAL,
;	3196						BYTE_TOKEN, BYTE_QUAL,
;	3197						PATCH_ARE_TOKEN, PATCH_QUAL,

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 8-1
; Digital Equipment Corporation
;
;	3198						NOINSTRUC_TOKEN, NOINSTR_QUAL,
;	3199						LONG_TOKEN, LONG_QUAL,
;	3200						HEXADECIM_TOKEN, HEX_QUAL,
;	3201						ASCII_TOKEN, ASCII_QUAL,
;	3202						NOASCII_TOKEN, NOASCII_QUAL,
;	3203						OCTAL_TOKEN, OCTAL_QUAL,
;	3204						LITERAL_TOKEN, LITER_QUAL
;	3205										) : VECTOR[,BYTE];
;	3206	
;	3207	LOCAL
;	3208		TOKEN_INDEX;						! Index into command qualifier table
;	3209	
;	3210	!++
;	3211	! Loop, searching the command table for a token matching the one in the
;	3212	! parse stack.  The corresponding command qualifier bit is set when a match
;	3213	! is found.
;	3214	!--
;	3215	INCR TOKEN_INDEX FROM MIN_QUAL TO MAX_QUAL*2 BY 2
;	3216	DO
;	3217		IF (.COM_QUAL_TABLE[.TOKEN_INDEX] EQL .PAT$GL_SEMAN1[.QUAL_OFFSET])
;	3218		THEN
;	3219			BEGIN
;	3220			PAT$GL_COMQUAL [ .COM_QUAL_TABLE[.TOKEN_INDEX+1] ] = TRUE;
;	3221			EXITLOOP;
;	3222			END;
;	3223	RETURN;
;	3224	
;	3225	END;



							    .PSECT  _PAT$PLIT,NOWRT,NOEXE,0

					      0012C P.ABH:  .BYTE   28, 0, 21, 1, 49, 2, 20, 3, 45, 4, 38, 5, 31, 6, 27, 7, - ;
								    19, 8, 36, 9, 42, 10, 30, 11			      ;

						    COM_QUAL_TABLE=	P.ABH


							    .PSECT  _PAT$CODE,NOWRT,2

					 0004 0079B 	    .ENTRY  PAT$SET_COMQUAL, Save R2				      ; 3143
		         51	  04   AC  D0 0079D 	    MOVL    QUAL_OFFSET, R1					      ; 3217
				       50  D4 007A1 	    CLRL    TOKEN_INDEX						      ; 3215
00000000'EF40	         08	       00  ED 007A3 1$:     CMPZV   #0, #8, COM_QUAL_TABLE[TOKEN_INDEX], PAT$GL_SEMAN1[R1]    ; 3217
			    00000000GEF41     007AC									      ;
				       11  12 007B2 	    BNEQ    2$							      ;
		         52 00000000'EF40  9A 007B4 	    MOVZBL  COM_QUAL_TABLE+1[TOKEN_INDEX], R2			      ; 3220
	   07 00000000G  EF	       52  E2 007BC 	    BBSS    R2, PAT$GL_COMQUAL, 3$				      ;
					   04 007C4 	    RET     							      ; 3221
	   50	         02	       16  F1 007C5 2$:     ACBL    #22, #2, TOKEN_INDEX, 1$				      ; 3215
				     FFD8     007C9									      ;
					   04 007CB 3$:     RET     							      ; 3143

; Routine Size:  49 bytes

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 8-2
; Digital Equipment Corporation
;



; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 9
; Digital Equipment Corporation
;
;	3226	GLOBAL ROUTINE PAT$GET_COMQUAL (COMMAND_BUF, COMMAND_SIZE, SEMSP) : NOVALUE =
;	3227	
;	3228	!++
;	3229	! FUNCTIONAL DESCRIPTION:
;	3230	!
;	3231	!	This routine enters the command qualifiers into the command line
;	3232	!	buffer being constructed.  The qualifiers are indicated by bits
;	3233	!	set in the command qualifier indicator longword, PAT$GL_COMQUAL.
;	3234	!	The routine writes the command line to the output command file
;	3235	!	after it enters the qualifiers.  Note that the command verb has
;	3236	!	already been entered into the buffer.
;	3237	!
;	3238	! CALLING SEQUENCE:
;	3239	!
;	3240	!	PAT$GET_COMQUAL (COMMAND_BUF, COMMAND_SIZE, SEMSP)
;	3241	!
;	3242	! INPUTS:
;	3243	!
;	3244	!	COMMAND_BUF - Address of command line buffer
;	3245	!	COMMAND_SIZE - Number of command bytes already entered in the buffer
;	3246	!	SEMSP - Offset in parse stack to command token
;	3247	!
;	3248	! IMPLICIT INPUTS:
;	3249	!
;	3250	!	PAT$GL_COMQUAL - Indicator for qualifiers specified in command
;	3251	!
;	3252	! OUTPUTS:
;	3253	!
;	3254	!	none
;	3255	!
;	3256	! IMPLICIT OUTPUTS:
;	3257	!
;	3258	!	none
;	3259	!
;	3260	! ROUTINE VALUE:
;	3261	!
;	3262	!	NOVALUE
;	3263	!
;	3264	! SIDE EFFECTS:
;	3265	!
;	3266	!	The command verb and qualifiers are written to the output command file.
;	3267	!--
;	3268	
;	3269	BEGIN
;	3270	
;	3271	MAP
;	3272		COMMAND_BUF : REF VECTOR[,BYTE];			! Command line buffer
;	3273	
;	3274	LITERAL
;	3275		HYPHEN = %X'2D',					! Ascii continuation character (hyphen)
;	3276		BLANK_FILL = %X'20';					! Ascii fill character (space)
;	3277	
;	3278	LOCAL
;	3279		COM_SIZE,						! Number of bytes written into command line
;	3280		QUALIFIER_BIT;						! Number of qualifier bit

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 9-1
; Digital Equipment Corporation
;
;	3281	
;	3282	BIND
;	3283		CQ_TABLE = UPLIT BYTE (
;	3284					%ASCIC '/I',
;	3285					%ASCIC '/DEC',
;	3286					%ASCIC '/W',
;	3287					%ASCIC '/B',
;	3288					%ASCIC '/PAT',
;	3289					%ASCIC '/NOI',
;	3290					%ASCIC '/LO',
;	3291					%ASCIC '/H',
;	3292					%ASCIC '/AS',
;	3293					%ASCIC '/NOAS',
;	3294					%ASCIC '/OC',
;	3295					%ASCIC '/LI'
;	3296									) : VECTOR[,BYTE],
;	3297		CQ_OFFSET_TBL = UPLIT BYTE (
;	3298						0,
;	3299						0+3,
;	3300						0+3+5,
;	3301						0+3+5+3,
;	3302						0+3+5+3+3,
;	3303						0+3+5+3+3+5,
;	3304						0+3+5+3+3+5+5,
;	3305						0+3+5+3+3+5+5+4,
;	3306						0+3+5+3+3+5+5+4+3,
;	3307						0+3+5+3+3+5+5+4+3+4,
;	3308						0+3+5+3+3+5+5+4+3+4+6,
;	3309						0+3+5+3+3+5+5+4+3+4+6+4
;	3310									) : VECTOR[,BYTE];
;	3311	
;	3312	
;	3313	!++
;	3314	! Loop, testing each qualifier bit.  If it is set then write the qualifier
;	3315	! into the command buffer and update the size of the command line.
;	3316	!--
;	3317	COM_SIZE = .COMMAND_SIZE;
;	3318	INCR QUALIFIER_BIT FROM MIN_QUAL TO MAX_QUAL BY 1
;	3319	DO
;	3320		IF .PAT$GL_COMQUAL [.QUALIFIER_BIT] 
;	3321		THEN
;	3322			BEGIN
;	3323			CH$COPY(.CQ_TABLE [ .CQ_OFFSET_TBL[.QUALIFIER_BIT] ],
;	3324				CH$PTR(CQ_TABLE[1], .CQ_OFFSET_TBL[.QUALIFIER_BIT]),
;	3325				BLANK_FILL,
;	3326				.CQ_TABLE [ .CQ_OFFSET_TBL[.QUALIFIER_BIT] ],
;	3327				CH$PTR(COMMAND_BUF[0], .COM_SIZE));
;	3328			COM_SIZE = .COM_SIZE + .CQ_TABLE [ .CQ_OFFSET_TBL[.QUALIFIER_BIT] ];
;	3329			END;
;	3330	
;	3331	!++
;	3332	! Check if this is an EXAMINE command.  If so, put a continuation character
;	3333	! on the end of the line.  This is due to the special syntax for the EXAMINE
;	3334	! command enabling one to examine sequential locations without specifying
;	3335	! the address.

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 9-2
; Digital Equipment Corporation
;
;	3336	!--
;	3337	IF (.PAT$GL_SEMAN1[.SEMSP] EQL EXAMINE_TOKEN)
;	3338	THEN
;	3339		BEGIN
;	3340	! ****** THIS CH$PTR IS HERE TO GET AROUND A COMPILER BUG.
;	3341	! ****** IT SHOULD EVENTUALLY BE REMOVED AND BECOME:
;	3342	!	COMMAND_BUF[.COM_SIZE] = BLANK_FILL;
;	3343	!	COMMAND_BUF[.COM_SIZE + 1] = HYPHEN;
;	3344		CH$PTR(COMMAND_BUF[.COM_SIZE], 0) = BLANK_FILL;
;	3345		CH$PTR(COMMAND_BUF[.COM_SIZE], 1) = HYPHEN;
;	3346		COM_SIZE = .COM_SIZE + 2;
;	3347		END;
;	3348	
;	3349	!++
;	3350	! Now write out the command verb and qualifiers to the command file.
;	3351	!--
;	3352	PAT$WRITEFILE(.COM_SIZE, COMMAND_BUF[0], PAT$GL_COMRAB);
;	3353	RETURN;
;	3354	END;



							    .PSECT  _PAT$PLIT,NOWRT,NOEXE,0

					      00144 P.ABI:  .ASCII  <2>\/I\						      ;
					      00147 	    .ASCII  <4>\/DEC\						      ;
					      0014C 	    .ASCII  <2>\/W\						      ;
					      0014F 	    .ASCII  <2>\/B\						      ;
					      00152 	    .ASCII  <4>\/PAT\						      ;
					      00157 	    .ASCII  <4>\/NOI\						      ;
					      0015C 	    .ASCII  <3>\/LO\						      ;
					      00160 	    .ASCII  <2>\/H\						      ;
					      00163 	    .ASCII  <3>\/AS\						      ;
					      00167 	    .ASCII  <5>\/NOAS\						      ;
					      0016D 	    .ASCII  <3>\/OC\						      ;
					      00171 	    .ASCII  <3>\/LI\						      ;
					      00175	    .BLKB   3
					      00178 P.ABJ:  .BYTE   0, 3, 8, 11, 14, 19, 24, 28, 31, 35, 41, 45		      ;

						    CQ_TABLE=		P.ABI
						    CQ_OFFSET_TBL=	P.ABJ


							    .PSECT  _PAT$CODE,NOWRT,2

					 09FC 007CC 	    .ENTRY  PAT$GET_COMQUAL, Save R2,R3,R4,R5,R6,R7,R8,R11	      ; 3226
		         5B 00000000'  EF  9E 007CE 	    MOVAB   CQ_TABLE, R11					      ;
		         57	  08   AC  D0 007D5 	    MOVL    COMMAND_SIZE, COM_SIZE				      ; 3317
				       56  D4 007D9 	    CLRL    QUALIFIER_BIT					      ; 3318
	   35 00000000G  EF	       56  E1 007DB 1$:     BBC     QUALIFIER_BIT, PAT$GL_COMQUAL, 2$			      ; 3320
		         58	  34 AB46  9E 007E3 	    MOVAB   CQ_OFFSET_TBL[QUALIFIER_BIT], R8			      ; 3323
		         50	       6B  9E 007E8 	    MOVAB   CQ_TABLE, R0					      ;
		         51	       68  9A 007EB 	    MOVZBL  (R8), R1						      ;
		         50	       51  C0 007EE 	    ADDL2   R1, R0						      ;
		         52	       60  9A 007F1 	    MOVZBL  (R0), R2						      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 9-3
; Digital Equipment Corporation
;
		         51	  01   AB  9E 007F4 	    MOVAB   CQ_TABLE+1, R1					      ; 3324
		         53	       68  9A 007F8 	    MOVZBL  (R8), R3						      ;
		         51	       53  C0 007FB 	    ADDL2   R3, R1						      ;
		         50	       60  9A 007FE 	    MOVZBL  (R0), R0						      ; 3326
	   20	         61	       52  2C 00801 	    MOVC5   R2, (R1), #32, R0, @COMMAND_BUF[COM_SIZE]		      ; 3323
		    04 BC47	       50     00805									      ;
		         50	       6B  9E 00809 	    MOVAB   CQ_TABLE, R0					      ; 3226
		         51	       68  9A 0080C 	    MOVZBL  (R8), R1						      ; 3328
		         50	       51  C0 0080F 	    ADDL2   R1, R0						      ;
		         52	       60  9A 00812 	    MOVZBL  (R0), R2						      ;
		         57	       52  C0 00815 	    ADDL2   R2, COM_SIZE					      ;
	   BF	         56	       0B  F3 00818 2$:     AOBLEQ  #11, QUALIFIER_BIT, 1$				      ; 3318
		         50	  0C   AC  D0 0081C 	    MOVL    SEMSP, R0						      ; 3337
		         09 00000000GEF40  D1 00820 	    CMPL    PAT$GL_SEMAN1[R0], #9				      ;
				       0F  12 00828 	    BNEQ    3$							      ;
	   50	    04   AC	       57  C1 0082A 	    ADDL3   COM_SIZE, COMMAND_BUF, R0				      ; 3344
		         60	       20  D0 0082F 	    MOVL    #32, (R0)						      ;
		    01   A0	       2D  D0 00832 	    MOVL    #45, 1(R0)						      ; 3345
		         57	       02  C0 00836 	    ADDL2   #2, COM_SIZE					      ; 3346
			    00000000G  EF  9F 00839 3$:     PUSHAB  PAT$GL_COMRAB					      ; 3352
				  04   AC  DD 0083F 	    PUSHL   COMMAND_BUF						      ;
				       57  DD 00842 	    PUSHL   COM_SIZE						      ;
	      00000000G  EF	       03  FB 00844 	    CALLS   #3, PAT$WRITEFILE					      ;
					   04 0084B 	    RET     							      ; 3226

; Routine Size:  128 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:05:54	DBB3:[PATCH.SRC]PATACT.B32;20					Page 10
; Digital Equipment Corporation
;
;	3355	END
;	3356	ELUDOM




							    .GLOBL  LIB$SIGNAL

;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  _PAT$PLIT      	   388  NOWRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(0)
;  _PAT$CODE      	  2124  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $CODE$         	     0  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582         7         0       224





; Size:		2124 code + 388 data bytes
; Run Time:	01:51.7
; Elapsed Time:	02:42.5
; Memory Used:	598 pages
; Compilation Complete
