
; Bliss-32 7.352	Saturday 22-AUG-1978 03:53:45	DBB3:[DELETE.SRC]DELESPECS.B32;26				Page 1
; Digital Equipment Corporation
;
;	0001	MODULE delespecs (  ! Manipulates file specifications for the DELETE utility
;	0002	                    LANGUAGE (BLISS32),
;	0003	                    IDENT = 'X00001'
;	0004	                    ) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1978
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	! FACILITY:	DELETE Command
;	0028	!
;	0029	! ABSTRACT:
;	0030	!
;	0031	!	This module obtains file specifications from the CLI, parses them,
;	0032	!	searches for files that match them, and reports errors.
;	0033	!
;	0034	! ENVIRONMENT:
;	0035	!
;	0036	!	VAX/VMS operating system, unprivileged user mode utility,
;	0037	!	operates at non-AST level.
;	0038	!
;	0039	!--
;	0040	!++
;	0041	!
;	0042	! AUTHOR:	Carol Peters,	CREATION DATE:	04 May 1978 8:33
;	0043	!
;	0044	! REVISION HISTORY:
;	0045	!
;	0046	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 03:53:45	DBB3:[DELETE.SRC]DELESPECS.B32;26				Page 2
; Digital Equipment Corporation
;
;	0047	!
;	0048	! Table of Contents
;	0049	!
;	0050	FORWARD ROUTINE
;	0051	    del$get_file,					! Obtains the input file specification
;	0052	    del$parse_file,					! Parses a file specification
;	0053	    del$search_fil,					! Searches for the next file
;	0054	    del$del_error	: NOVALUE;			! Handles an input $OPEN error
;	0055	
;	0056	!
;	0057	! Include files
;	0058	!
;	0059	
;	0060	LIBRARY 'SYS$LIBRARY:STARLET.L32';			! VAX/VMS system definitions
;	0061	
;	0062	LIBRARY 'SYS$LIBRARY:CLIMAC.L32';			! Definitiona for the Command Language Interface
;	0063	
;	0064	REQUIRE 'SRC$:DELETE.REQ';				! Common DELETE literal definitions and macros
;	0152	
;	0153	REQUIRE 'SRC$:DELEMSG.REQ';				! Definition of macros to SIGNAL a message
;	0201	
;	0202	!
;	0203	! Global variables
;	0204	!
;	0205	
;	0206	!
;	0207	! Own variables
;	0208	!
;	0209	
;	0210	!
;	0211	! Macros
;	0212	!
;	0213	
;	0214	!
;	0215	! Equated symbols
;	0216	!
;	0217	
;	0218	!
;	0219	! External variables
;	0220	!
;	0221	EXTERNAL
;	0222	    cli_work_area	: BLOCK [, BYTE],		! CLI dynamic work area
;	0223	    cleanup_desc	: BLOCK [, BYTE],		! Parameter "cleanup" request work area
;	0224	    del$cli_status	: BITVECTOR,			! Status word for DELETE utility
;	0225	    infile_desc		: BLOCK [, BYTE];		! CLI block for input file request work area

; Bliss-32 7.352	Saturday 22-AUG-1978 03:53:45	DBB3:[DELETE.SRC]DELESPECS.B32;26				Page 3
; Digital Equipment Corporation
;
;	0226	GLOBAL ROUTINE del$get_file (fab_block, nam_block, xab_block) =
;	0227								! Obtain file specification
;	0228	
;	0229	!++
;	0230	! Functional description:
;	0231	!
;	0232	!	This routine gets an file specification and all
;	0233	!	related qualifiers from the Command Language Interpreter. Then
;	0234	!	the file specification is parsed.
;	0235	!
;	0236	!	If no more input specifications are available, this routine just
;	0237	!	returns successfully.
;	0238	!
;	0239	! Calling sequence:
;	0240	!
;	0241	!	copy$get_file (fab_block.ra.v, nam_block.ra.v, xab_block.ra.v)
;	0242	!
;	0243	! Input parameters:
;	0244	!
;	0245	!	fab_block	- the FAB to use for this specification
;	0246	!	nam_block	- the NAM to use for this specification
;	0247	!	xab_block	- the appropriate XAB block
;	0248	!
;	0249	! Implicit inputs:
;	0250	!
;	0251	!	infile_desc	- CLI block for file specifications
;	0252	!	cleanup_desc	- CLI block for end of cleanup operations
;	0253	!
;	0254	! Output parameters:
;	0255	!
;	0256	!	none
;	0257	!
;	0258	! Implicit outputs:
;	0259	!
;	0260	!	The fields of the FAB and the NAM block are filled in according
;	0261	!	to the CLI call and the $PARSE function call.
;	0262	!
;	0263	! Routine value:
;	0264	!
;	0265	!	OK		- success
;	0266	!	NO_MORE_FILES	- success, no more file specifications
;	0267	!	NO_FILE		- failure
;	0268	!
;	0269	! Side effects:
;	0270	!
;	0271	!	none
;	0272	!
;	0273	!--
;	0274	
;	0275	    BEGIN
;	0276	
;	0277	    MAP
;	0278	        fab_block	: REF BLOCK [, BYTE],		! FAB to use with file
;	0279	        nam_block	: REF BLOCK [, BYTE],		! NAM to use with file
;	0280	        xab_block	: REF BLOCK [, BYTE];		! XAB to use with file

; Bliss-32 7.352	Saturday 22-AUG-1978 03:53:45	DBB3:[DELETE.SRC]DELESPECS.B32;26				Page 3-1
; Digital Equipment Corporation
;
;	0281	
;	0282	!
;	0283	! Return if there are no more specifications coming.
;	0284	!
;	0285	
;	0286	    IF NOT .infile_desc [cli$v_concatinp]		! If no more file specs are coming,
;	0287	    THEN
;	0288	        RETURN no_more_files;				!    then return successfully, without a file.
;	0289	
;	0290	!
;	0291	! Get a file specification from the Command Language Interpreter.
;	0292	!
;	0293	
;	0294	    call_cli (						! Call the CLI with the following arguments:
;	0295	                infile_desc,				!    File descriptor address
;	0296	                cli_work_area,				!    CLI work area address
;	0297	                del$cli_status);			!    DELETE status indicator vector address
;	0298	
;	0299	    IF NOT .infile_desc [cli$v_concatinp]		! If no more file specifications follow,
;	0300	    THEN
;	0301	        call_cli (					! call the CLI with the following arguments:
;	0302	                    cleanup_desc,			!    Parameter cleanup descriptor address
;	0303	                    cli_work_area,			!    CLI work area address
;	0304	                    del$cli_status);			!    DELETE status indicator vector address
;	0305	
;	0306	!
;	0307	! Initialize the file FAB.
;	0308	!
;	0309	
;	0310	    $FAB_INIT (						! Setup the file FAB as follows:
;     P 0311	                FAB = .fab_block,			!    FAB address is the input parameter.
;     P 0312	                FAC = <GET>,				!    Input file.
;     P 0313	                SHR = GET,				!    Allow others to read the input file.
;     P 0314	                DNA = 0,				!    No default file specification.
;     P 0315	                FOP = <NAM>,				!    Open by name block.
;     P 0316	                NAM = .nam_block,			!    NAM block address.
;     P 0317	                XAB = .xab_block);			!    XAB block address.
;	0318	
;	0319	!
;	0320	! If no parameter was specified (this can only occur with a PURGE command), default
;	0321	! to "*.*".
;	0322	!
;	0323	
;	0324	    IF NOT .infile_desc [cli$v_parmprs]			! If no file specification was given,
;	0325	    THEN
;	0326	        BEGIN
;	0327	        infile_desc [cli$a_rqaddr] =			!    then use a default file string.
;	0328	                UPLIT BYTE (%ASCII '*.*');
;	0329	        infile_desc [cli$w_rqsize] = 3;			! Length of string is three characters.
;	0330	        END;
;	0331	
;	0332	!
;	0333	! Clear the ESL and RSL fields of the NAM block so that data about previously processed
;	0334	! files does not intrude on parsing of this file specification.
;	0335	!

; Bliss-32 7.352	Saturday 22-AUG-1978 03:53:45	DBB3:[DELETE.SRC]DELESPECS.B32;26				Page 3-2
; Digital Equipment Corporation
;
;	0336	
;	0337	    nam_block [nam$b_esl] = 0;				! Clear expanded string length
;	0338	    nam_block [nam$b_rsl] = 0;				! and resultant string length.
;	0339	
;	0340	!
;	0341	! Call RMS $PARSE function to parse the file specification. This resolves logical names and
;	0342	! determines if there are wildcards present, or explicit named fields present.
;	0343	!
;	0344	
;	0345	    fab_block [fab$l_fna] = .infile_desc [cli$a_rqaddr];! Move the file name address
;	0346	    fab_block [fab$b_fns] = .infile_desc [cli$w_rqsize];! and length into the file FAB block.
;	0347	
;	0348	    IF NOT del$parse_file (				! Parse the file specification.
;	0349	                            .fab_block)			!    Specify the FAB block address.
;	0350	    THEN
;	0351	        RETURN no_file;					! If the $PARSE fails, return an error code.
;	0352	
;	0353	!
;	0354	! Return with success.
;	0355	!
;	0356	
;	0357	    RETURN ok;						! Return a success code
;	0358	    END;


							    .TITLE  DELESPECS
							    .IDENT  \X00001\

							    .PSECT  $PLIT$,NOWRT,NOEXE,2

					      00000 P.AAA:  .ASCII  \*.*\						      ;
					      00003	    .BLKB   1

							    .GLOBL  DEL$CLI_RESULT, DEL$MSG_NUMBER, CLI_WORK_AREA
							    .GLOBL  CLEANUP_DESC, DEL$CLI_STATUS, INFILE_DESC

							    .PSECT  $CODE$,NOWRT,2

					 08FC 00000 	    .ENTRY  DEL$GET_FILE, Save R2,R3,R4,R5,R6,R7,R11		      ; 0226
		         5B	0000G  CF  9E 00002 	    MOVAB   INFILE_DESC+3, R11					      ;
	   04	         6B	       01  E0 00007 	    BBS     #1, INFILE_DESC+3, 1$				      ; 0286
		         50	       03  D0 0000B 	    MOVL    #3, R0						      ; 0288
					   04 0000E 	    RET     							      ;
				0000G  CF  9F 0000F 1$:     PUSHAB  DEL$CLI_STATUS					      ; 0294
				0000G  CF  9F 00013 	    PUSHAB  CLI_WORK_AREA					      ;
				  FD   AB  9F 00017 	    PUSHAB  INFILE_DESC						      ;
		  0000G  DF	       03  FB 0001A 	    CALLS   #3, @DEL$CLI_RESULT					      ;
	   11	         6B	       01  E0 0001F 	    BBS     #1, INFILE_DESC+3, 2$				      ; 0299
				0000G  CF  9F 00023 	    PUSHAB  DEL$CLI_STATUS					      ; 0301
				0000G  CF  9F 00027 	    PUSHAB  CLI_WORK_AREA					      ;
				0000G  CF  9F 0002B 	    PUSHAB  CLEANUP_DESC					      ;
		  0000G  DF	       03  FB 0002F 	    CALLS   #3, @DEL$CLI_RESULT					      ;
		         57	  04   AC  D0 00034 2$:     MOVL    FAB_BLOCK, R7					      ; 0317
		         56	       57  D0 00038 	    MOVL    R7, $RMS_PTR					      ;
	   00	         6E	       00  2C 0003B 	    MOVC5   #0, (SP), #0, #80, ($RMS_PTR)			      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:53:45	DBB3:[DELETE.SRC]DELESPECS.B32;26				Page 3-3
; Digital Equipment Corporation
;
		         66	0050   8F     0003F									      ;
		         66	5003   8F  B0 00043 	    MOVW    #20483, ($RMS_PTR)					      ;
		    04   A6 01000000   8F  D0 00048 	    MOVL    #16777216, 4($RMS_PTR)				      ;
		    16   A6	0202   8F  B0 00050 	    MOVW    #514, 22($RMS_PTR)					      ;
		    1F   A6	       02  90 00056 	    MOVB    #2, 31($RMS_PTR)					      ;
		    24   A6	  0C   AC  D0 0005A 	    MOVL    XAB_BLOCK, 36($RMS_PTR)				      ;
		         50	  08   AC  D0 0005F 	    MOVL    NAM_BLOCK, R0					      ;
		    28   A6	       50  D0 00063 	    MOVL    R0, 40($RMS_PTR)					      ;
		         0A	       6B  E8 00067 	    BLBS    INFILE_DESC+3, 3$					      ; 0324
		    09   AB	0000'  CF  9E 0006A 	    MOVAB   P.AAA, INFILE_DESC+12				      ; 0328
		    05   AB	       03  B0 00070 	    MOVW    #3, INFILE_DESC+8					      ; 0329
				  0B   A0  94 00074 3$:     CLRB    11(R0)						      ; 0337
				  03   A0  94 00077 	    CLRB    3(R0)						      ; 0338
		    2C   A7	  09   AB  D0 0007A 	    MOVL    INFILE_DESC+12, 44(R7)				      ; 0345
		    34   A7	  05   AB  90 0007F 	    MOVB    INFILE_DESC+8, 52(R7)				      ; 0346
				       57  DD 00084 	    PUSHL   R7							      ; 0348
		  0000V  CF	       01  FB 00086 	    CALLS   #1, DEL$PARSE_FILE					      ;
		         04	       50  E9 0008B 	    BLBC    R0, 4$						      ;
		         50	       01  D0 0008E 	    MOVL    #1, R0						      ; 0357
					   04 00091 	    RET     							      ;
				       50  D4 00092 4$:     CLRL    R0							      ; 0226
					   04 00094 	    RET     							      ;

; Routine Size:  149 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:53:45	DBB3:[DELETE.SRC]DELESPECS.B32;26				Page 4
; Digital Equipment Corporation
;
;	0359	GLOBAL ROUTINE del$parse_file (fab_block) =		! File specification parse routine
;	0360	
;	0361	!++
;	0362	! Functional description
;	0363	!
;	0364	!	This routine calls RMS to parse a file specification.
;	0365	!
;	0366	! Calling sequence
;	0367	!
;	0368	!	del$parse_file (fab_block.ra.v)
;	0369	!
;	0370	! Input parameters
;	0371	!
;	0372	!	fab_block	- the address of the FAB block of the file specification to be parsed.
;	0373	!
;	0374	! Implicit inputs
;	0375	!
;	0376	!	The NAM block associated with the FAB address passed as a parameters.
;	0377	!	The RLF (related file) field of the associated NAM block.
;	0378	!
;	0379	! Output parameters
;	0380	!
;	0381	!	none
;	0382	!
;	0383	! Implicit outputs
;	0384	!
;	0385	!	Fields in the NAM block and the related file block are filled in.
;	0386	!
;	0387	! Routine value
;	0388	!
;	0389	!	OK	- Successful parse
;	0390	!	ERROR	- Error from RMS parse
;	0391	!
;	0392	! Side effects
;	0393	!
;	0394	!	none
;	0395	!
;	0396	!--
;	0397	
;	0398	    BEGIN
;	0399	
;	0400	    MAP
;	0401	        fab_block	: REF BLOCK [, BYTE];
;	0402	
;	0403	    BIND
;	0404	        nam_block	=				! associated NAM block address
;	0405	                .fab_block [fab$l_nam]	: BLOCK [, BYTE],
;	0406	        rela_nam_block	=				! Related NAM block address
;	0407	                .nam_block [nam$l_rlf]	: BLOCK [, BYTE];
;	0408	
;	0409	!
;	0410	! Call RMS to parse the file-specification to resolve a logical name (if any).
;	0411	!
;	0412	
;	0413	    nam_block [nam$b_esl] = 0;				! Zero the expanded string length so that

; Bliss-32 7.352	Saturday 22-AUG-1978 03:53:45	DBB3:[DELETE.SRC]DELESPECS.B32;26				Page 4-1
; Digital Equipment Corporation
;
;	0414								! del$del_error can determine if an expanded
;	0415								! string was created by RMS.
;	0416	
;	0417	    IF $RMS_PARSE (					! Call the RMS file-spec parsing routine,
;     P 0418	                    FAB = .fab_block,			!    specifying the FAB block address,
;     P 0419	                    ERR = del$del_error)		!    and an error action routine.
;	0420	    THEN						! If the parse works,
;	0421	        BEGIN
;	0422	        rela_nam_block [nam$b_rsl] =			!    then setup the dummy name block to
;	0423	                .nam_block [nam$b_esl];			!    have the proper length of the new 
;	0424								!    expanded name string.
;	0425		RETURN ok;					! Then return a success code.
;	0426	        END
;	0427	    ELSE
;	0428		RETURN error;					! Otherwise, return an error to the caller.
;	0429	
;	0430	    END;



							    .GLOBL  SYS$PARSE

					 000C 00095 	    .ENTRY  DEL$PARSE_FILE, Save R2,R3				      ; 0359
		         50	  04   AC  D0 00097 	    MOVL    FAB_BLOCK, R0					      ; 0405
		         52	  28   A0  D0 0009B 	    MOVL    40(R0), R2						      ; 0398
		         53	  10   A2  D0 0009F 	    MOVL    16(R2), R3						      ;
				  0B   A2  94 000A3 	    CLRB    11(R2)						      ; 0413
				0000V  CF  9F 000A6 	    PUSHAB  DEL$DEL_ERROR					      ; 0419
				       50  DD 000AA 	    PUSHL   R0							      ;
	      00000000G  9F	       02  FB 000AC 	    CALLS   #2, @#SYS$PARSE					      ;
		         09	       50  E9 000B3 	    BLBC    R0, 1$						      ;
		    03   A3	  0B   A2  90 000B6 	    MOVB    11(R2), 3(R3)					      ; 0422
		         50	       01  D0 000BB 	    MOVL    #1, R0						      ; 0425
					   04 000BE 	    RET     							      ;
		         50	       02  D0 000BF 1$:     MOVL    #2, R0						      ; 0428
					   04 000C2 	    RET     							      ; 0359

; Routine Size:  46 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:53:45	DBB3:[DELETE.SRC]DELESPECS.B32;26				Page 5
; Digital Equipment Corporation
;
;	0431	GLOBAL ROUTINE del$search_fil (fab_block) =		! Search for the next file
;	0432	
;	0433	!++
;	0434	! Functional description:
;	0435	!
;	0436	!	This routine searches for the next file in a directory that matches the
;	0437	!	current wildcard specification.
;	0438	!
;	0439	!	The search is performed by the RMS function $RMS_SEARCH. If the SEARCH
;	0440	!	fails due to an error other than "no more files match given wildcard",
;	0441	!	an error is signaled to SYS$ERROR.
;	0442	!
;	0443	!	One type of failure is permitted:
;	0444	!
;	0445	!		RMS$_NMF	- no more files match given wildcard
;	0446	!
;	0447	! Calling sequence:
;	0448	!
;	0449	!	del$search_fil (fab_block.ra.v)
;	0450	!
;	0451	! Input parameters:
;	0452	!
;	0453	!	fab_block	- the FAB associated with the file
;	0454	!
;	0455	! Implicit inputs:
;	0456	!
;	0457	!	This routine is only called if a wildcard is present in the file specification.
;	0458	!
;	0459	!	The file's NAM block is read to obtain the length of the resultant name string.
;	0460	!
;	0461	! Output parameters:
;	0462	!
;	0463	!	none
;	0464	!
;	0465	! Implicit outputs:
;	0466	!
;	0467	!	DEL$CLI_STATUS bit setting may be altered:
;	0468	!
;	0469	!		wildcard_bit	- turned off if no more files that match wildcard are found.
;	0470	!
;	0471	! Routine value:
;	0472	!
;	0473	!	OK		- search succeeded
;	0474	!	NO_MORE_FILES	- no further wildcard match found
;	0475	!	NO_FILE		- search failed due to unexpected error
;	0476	!
;	0477	! Side effects:
;	0478	!
;	0479	!	The position of the directory is advanced so that a subsequent SEARCH
;	0480	!	function will find yet the "next" file.
;	0481	!
;	0482	!	If an error occurs, an error is signaled.
;	0483	!
;	0484	!--
;	0485	

; Bliss-32 7.352	Saturday 22-AUG-1978 03:53:45	DBB3:[DELETE.SRC]DELESPECS.B32;26				Page 5-1
; Digital Equipment Corporation
;
;	0486	    BEGIN
;	0487	
;	0488	    MAP
;	0489	        fab_block	: REF BLOCK [, BYTE];		! FAB block
;	0490	
;	0491	    LOCAL
;	0492	        status;						! RMS status code variable
;	0493	
;	0494	    status = $RMS_SEARCH (				!    then call RMS to search the directory for
;     P 0495	                            FAB = .fab_block);		!    the next match.
;	0496	
;	0497	    IF .status EQL rms$_nmf				! If no more wildcard matches exist,
;	0498	    THEN
;	0499	        BEGIN
;	0500	        del$cli_status [wildcard_bit] = FALSE;		!    turn off the wildcard flag,
;	0501	        RETURN no_more_files;				!    and return with success status of NO_MORE_FILES.
;	0502	        END;
;	0503	
;	0504	    IF NOT .status					! If RMS returned some other error code,
;	0505	    THEN
;	0506	        BEGIN
;	0507	        del$del_error (					!    then call the RMS error action routine.
;	0508	                        .fab_block);
;	0509	        del$cli_status [wildcard_bit] = FALSE;		!    Turn off the wildcard flag so that we don't look
;	0510	        RETURN no_file;					!    for the file again. Return to caller with NO_FILE
;	0511	        END;						!    error code.
;	0512	
;	0513	!
;	0514	! Return the RMS status to the caller.
;	0515	!
;	0516	
;	0517	    RETURN .status;					! Return status from the SEARCH routine call.
;	0518	
;	0519	    END;						! End of special wildcard search processing.



							    .GLOBL  SYS$SEARCH

					 0004 000C3 	    .ENTRY  DEL$SEARCH_FIL, Save R2				      ; 0431
				  04   AC  DD 000C5 	    PUSHL   FAB_BLOCK						      ; 0495
	      00000000G  9F	       01  FB 000C8 	    CALLS   #1, @#SYS$SEARCH					      ;
		         52	       50  D0 000CF 	    MOVL    R0, STATUS						      ;
	      000182CA   8F	       52  D1 000D2 	    CMPL    STATUS, #99018					      ; 0497
				       09  12 000D9 	    BNEQ    1$							      ;
		  0000G  CF	       10  8A 000DB 	    BICB2   #16, DEL$CLI_STATUS					      ; 0500
		         50	       03  D0 000E0 	    MOVL    #3, R0						      ; 0501
					   04 000E3 	    RET     							      ;
		         0F	       52  E8 000E4 1$:     BLBS    STATUS, 2$						      ; 0504
				  04   AC  DD 000E7 	    PUSHL   FAB_BLOCK						      ; 0507
		  0000V  CF	       01  FB 000EA 	    CALLS   #1, DEL$DEL_ERROR					      ;
		  0000G  CF	       10  8A 000EF 	    BICB2   #16, DEL$CLI_STATUS					      ; 0509
				       04  11 000F4 	    BRB     3$							      ; 0510
		         50	       52  D0 000F6 2$:     MOVL    STATUS, R0						      ; 0517
					   04 000F9 	    RET     							      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:53:45	DBB3:[DELETE.SRC]DELESPECS.B32;26				Page 5-2
; Digital Equipment Corporation
;
				       50  D4 000FA 3$:     CLRL    R0							      ; 0431
					   04 000FC 	    RET     							      ;

; Routine Size:  58 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:53:45	DBB3:[DELETE.SRC]DELESPECS.B32;26				Page 6
; Digital Equipment Corporation
;
;	0520	GLOBAL ROUTINE del$del_error (fab_block) : NOVALUE =	! RMS error action routine
;	0521	
;	0522	!++
;	0523	! Functional description
;	0524	!
;	0525	!	This RMS error action routine sends an error message to the user.
;	0526	!
;	0527	! Calling sequence
;	0528	!
;	0529	!	del$del_error (fab_block.ra.v)
;	0530	!
;	0531	! Input parameters
;	0532	!
;	0533	!	fab_block	 - Address of the associated FAB
;	0534	!
;	0535	! Implicit inputs
;	0536	!
;	0537	!	Fields in the NAM block associated with the FAB passed as a parameter:
;	0538	!
;	0539	!		RSA	- name of the file after an open
;	0540	!		RSL	- length of the file after an open
;	0541	!		ESA	- name of the name after a parse
;	0542	!		ESL	- length of the name after a parse
;	0543	!
;	0544	!	Fields in the FAB block:
;	0545	!
;	0546	!		STS	- primary RMS status code
;	0547	!		STV	- secondary RMS status code
;	0548	!
;	0549	!	INFILE_DESC	- the CLI data block for the parameter.
;	0550	!
;	0551	! Output parameters
;	0552	!
;	0553	!	none
;	0554	!
;	0555	! Implicit outputs
;	0556	!
;	0557	!	none
;	0558	!
;	0559	! Routine value
;	0560	!
;	0561	!	none
;	0562	!
;	0563	! Side effects
;	0564	!
;	0565	!	none
;	0566	!
;	0567	!--
;	0568	
;	0569	    BEGIN
;	0570	
;	0571	    MAP
;	0572	        fab_block	: REF BLOCK [, BYTE];
;	0573	
;	0574	    BIND

; Bliss-32 7.352	Saturday 22-AUG-1978 03:53:45	DBB3:[DELETE.SRC]DELESPECS.B32;26				Page 6-1
; Digital Equipment Corporation
;
;	0575	        nam_block	=				! Associated name block
;	0576	                .fab_block [fab$l_nam]	: BLOCK [, BYTE];
;	0577	
;	0578	    LOCAL
;	0579	        message_id,					! Message identifier used in this routine
;	0580		name_desc :  VECTOR [2];			! File name descriptor
;	0581	
;	0582	!
;	0583	! Fill in the file name descriptor with the most complete name possible.
;	0584	!
;	0585	
;	0586	    IF .nam_block [nam$b_rsl] NEQ 0			! If a resultant name string exists,
;	0587	    THEN						!
;	0588		BEGIN						!
;	0589		message_id = msg$_filnotdel;			! then indicate a not deleted error
;	0590		name_desc [0] = .nam_block [nam$b_rsl];		! and fill in the resultant name length
;	0591		name_desc [1] = .nam_block [nam$l_rsa];		! and address.
;	0592		END
;	0593	    ELSE
;	0594		IF .nam_block [nam$b_esl] NEQ 0			! If RMS created an expanded string
;	0595		THEN						! but couldn't open the file,
;	0596		    BEGIN					!
;	0597		    message_id = msg$_filnotdel;		! then indicate an error deleting the file
;	0598		    name_desc [0] = .nam_block [nam$b_esl];	! and fill in the expanded name length
;	0599		    name_desc [1] = .nam_block [nam$l_esa];	! and address.
;	0600		    END
;	0601		ELSE
;	0602		    BEGIN
;	0603		    message_id = msg$_filnotdel;		! Otherwise, indicate a deletion error
;	0604		    name_desc [0] = .infile_desc [cli$w_rqsize];! and use the file name length
;	0605		    name_desc [1] = .infile_desc [cli$a_rqaddr];! and length passed by the CLI.
;	0606		    END;
;	0607	
;	0608	!
;	0609	! Signal the error condition.
;	0610	!
;	0611	
;	0612	    put_messagex (					! Signal "input open error" with the following arguments:
;     P 0613	                    .message_id,			!    the message identifier,
;     P 0614	                    1,					!    the number of message arguments,
;     P 0615	                    name_desc,				!    the address of input name descriptor,
;     P 0616	                    .fab_block [fab$l_sts],		!    the primary RMS completion code,
;     P 0617	                    .fab_block [fab$l_stv]);		!    and the secondary RMS completion code.
;	0618	
;	0619	!
;	0620	! Return to the caller.
;	0621	!
;	0622	
;	0623	    RETURN;						! Return to the caller.
;	0624	
;	0625	    END;





; Bliss-32 7.352	Saturday 22-AUG-1978 03:53:45	DBB3:[DELETE.SRC]DELESPECS.B32;26				Page 6-2
; Digital Equipment Corporation
;

					 080C 000FD 	    .ENTRY  DEL$DEL_ERROR, Save R2,R3,R11			      ; 0520
		         5B	0000G  CF  9E 000FF 	    MOVAB   DEL$MSG_NUMBER, R11					      ;
		         5E	       08  C2 00104 	    SUBL2   #8, SP						      ;
		         52	  04   AC  D0 00107 	    MOVL    FAB_BLOCK, R2					      ; 0576
		         50	  28   A2  D0 0010B 	    MOVL    40(R2), R0						      ; 0569
		         53	11F0   8F  3C 0010F 	    MOVZWL  #4592, MESSAGE_ID					      ; 0589
				  03   A0  95 00114 	    TSTB    3(R0)						      ; 0586
				       0B  13 00117 	    BEQL    1$							      ;
		         6E	  03   A0  9A 00119 	    MOVZBL  3(R0), NAME_DESC					      ; 0590
		    04   AE	  04   A0  D0 0011D 	    MOVL    4(R0), NAME_DESC+4					      ; 0591
				       1B  11 00122 	    BRB     3$							      ; 0586
				  0B   A0  95 00124 1$:     TSTB    11(R0)						      ; 0594
				       0B  13 00127 	    BEQL    2$							      ;
		         6E	  0B   A0  9A 00129 	    MOVZBL  11(R0), NAME_DESC					      ; 0598
		    04   AE	  0C   A0  D0 0012D 	    MOVL    12(R0), NAME_DESC+4					      ; 0599
				       0B  11 00132 	    BRB     3$							      ; 0594
		         6E	0000G  CF  3C 00134 2$:     MOVZWL  INFILE_DESC+8, NAME_DESC				      ; 0604
		    04   AE	0000G  CF  D0 00139 	    MOVL    INFILE_DESC+12, NAME_DESC+4				      ; 0605
				       53  DD 0013F 3$:     PUSHL   MESSAGE_ID						      ; 0617
		         6B	       01  FB 00141 	    CALLS   #1, DEL$MSG_NUMBER					      ;
	   00	         50	       01  7A 00144 	    EMUL    #1, R0, #0, -(SP)					      ;
				       7E     00148									      ;
	   50	         8E	       08  7B 00149 	    EDIV    #8, (SP)+, R0, R0					      ;
				       50     0014D									      ;
		         04	       50  D1 0014E 	    CMPL    R0, #4						      ;
				       18  13 00151 	    BEQL    4$							      ;
		         7E	  08   A2  7D 00153 	    MOVQ    8(R2), -(SP)					      ;
				  08   AE  9F 00157 	    PUSHAB  NAME_DESC						      ;
				       01  DD 0015A 	    PUSHL   #1							      ;
				       53  DD 0015C 	    PUSHL   MESSAGE_ID						      ;
		         6B	       01  FB 0015E 	    CALLS   #1, DEL$MSG_NUMBER					      ;
				       50  DD 00161 	    PUSHL   R0							      ;
	      00000000G  00	       05  FB 00163 	    CALLS   #5, LIB$SIGNAL					      ;
					   04 0016A 	    RET     							      ;
		         7E	  08   A2  7D 0016B 4$:     MOVQ    8(R2), -(SP)					      ;
				  08   AE  9F 0016F 	    PUSHAB  NAME_DESC						      ;
				       01  DD 00172 	    PUSHL   #1							      ;
				       53  DD 00174 	    PUSHL   MESSAGE_ID						      ;
		         6B	       01  FB 00176 	    CALLS   #1, DEL$MSG_NUMBER					      ;
				       50  DD 00179 	    PUSHL   R0							      ;
	      00000000G  00	       05  FB 0017B 	    CALLS   #5, LIB$STOP					      ;
					   04 00182 	    RET     							      ; 0520

; Routine Size:  134 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:53:45	DBB3:[DELETE.SRC]DELESPECS.B32;26				Page 7
; Digital Equipment Corporation
;
;	0626	END
;	0627	ELUDOM




							    .GLOBL  LIB$SIGNAL, LIB$STOP

;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $PLIT$         	     4  NOWRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $CODE$         	   387  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]STARLET.L32;1		      2688        69         2       149
;  DBA4:[SYSLIB]CLIMAC.L32;1		        14         0         0         3
;  DBB3:[DELETE.SRC]VMSMAC.L32;1	         6         3        50         4





; Size:		387 code + 4 data bytes
; Run Time:	00:14.2
; Elapsed Time:	00:28.8
; Memory Used:	184 pages
; Compilation Complete
