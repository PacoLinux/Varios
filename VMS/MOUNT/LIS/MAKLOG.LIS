
; Bliss-32 7.352	Saturday 21-AUG-1978 23:52:44	DBB3:[MOUNT.SRC]MAKLOG.B32;8					Page 1
; Digital Equipment Corporation
;
;	0001	MODULE MAKLOG (
;	0002			LANGUAGE (BLISS32),
;	0003			IDENT = 'X0001'
;	0004			) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1977
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	!
;	0028	! FACILITY:  MOUNT Utility Structure Levels 1 & 2
;	0029	!
;	0030	! ABSTRACT:
;	0031	!
;	0032	!	These routines allocate and hook up the logical name and mounted
;	0033	!	volume list entries.
;	0034	!
;	0035	! ENVIRONMENT:
;	0036	!
;	0037	!	STARLET operating system, including privileged system services
;	0038	!	and internal exec routines.
;	0039	!
;	0040	!--
;	0041	!
;	0042	!
;	0043	! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  20-Oct-1977  19:30
;	0044	!
;	0045	! REVISION HISTORY:
;	0046	!
;	0047	!**
;	0048	
;	0049	
;	0050	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0051	REQUIRE 'SRC$:MOUDEF.B32';
;	0358	REQUIRE 'LIBD$:[VMSLIB.OBJ]MOUNTMSG.B32';
;	0458	
;	0459	
;	0460	

; Bliss-32 7.352	Saturday 21-AUG-1978 23:52:44	DBB3:[MOUNT.SRC]MAKLOG.B32;8					Page 1-1
; Digital Equipment Corporation
;
;	0461	LITERAL
;	0462		PHYS_LENGTH	= 8;		! longest allowable physical name

; Bliss-32 7.352	Saturday 21-AUG-1978 23:52:44	DBB3:[MOUNT.SRC]MAKLOG.B32;8					Page 2
; Digital Equipment Corporation
;
;	0463	GLOBAL ROUTINE ALLOC_LOGNAME : NOVALUE =
;	0464	
;	0465	!++
;	0466	!
;	0467	! FUNCTIONAL DESCRIPTION:
;	0468	!
;	0469	!	This routine allocates the logical name and mounted volume list
;	0470	!	entries from the appropriate storage pools.
;	0471	!
;	0472	!
;	0473	! CALLING SEQUENCE:
;	0474	!	ALLOC_LOGNAME ()
;	0475	!
;	0476	! INPUT PARAMETERS:
;	0477	!	NONE
;	0478	!
;	0479	! IMPLICIT INPUTS:
;	0480	!	MOUNT parser database
;	0481	!
;	0482	! OUTPUT PARAMETERS:
;	0483	!	NONE
;	0484	!
;	0485	! IMPLICIT OUTPUTS:
;	0486	!	LOG_ENTRY: address of logical name block
;	0487	!	MTL_ENTRY: address of MTL block
;	0488	!
;	0489	! ROUTINE VALUE:
;	0490	!	NONE
;	0491	!
;	0492	! SIDE EFFECTS:
;	0493	!	NONE
;	0494	!
;	0495	!--
;	0496	
;	0497	BEGIN
;	0498	
;	0499	LOCAL
;	0500		SIZE,				! size of logical name block
;	0501		AREA,				! area to allocate from
;	0502		UIC;				! process UIC
;	0503	
;	0504	EXTERNAL
;	0505		MOUNT_OPTIONS	: BITVECTOR,	! command options
;	0506		LOG_NAME	: VECTOR,	! user logical name descriptor
;	0507		LOG_ENTRY	: REF BBLOCK,	! logical name block
;	0508		MTL_ENTRY	: REF BBLOCK;	! MTL block
;	0509	
;	0510	EXTERNAL ROUTINE
;	0511		GET_UIC,			! get process UIC
;	0512		ALLOCATE_MEM;			! allocate dynamic memory
;	0513	
;	0514	
;	0515	! Compute the size of the logical name entry that will be needed.
;	0516	!
;	0517	

; Bliss-32 7.352	Saturday 21-AUG-1978 23:52:44	DBB3:[MOUNT.SRC]MAKLOG.B32;8					Page 2-1
; Digital Equipment Corporation
;
;	0518	IF .MOUNT_OPTIONS[OPT_LOG_NAME]
;	0519	THEN SIZE = .LOG_NAME[0] + PHYS_LENGTH + 2 + LOG$C_LENGTH + 7 AND NOT 7
;	0520	ELSE SIZE = VCB$S_VOLNAME+5 + PHYS_LENGTH + 2 + LOG$C_LENGTH + 7 AND NOT 7;
;	0521	
;	0522	IF .MOUNT_OPTIONS[OPT_GROUP] OR .MOUNT_OPTIONS[OPT_SYSTEM]
;	0523	THEN AREA = 1
;	0524	ELSE AREA = 2;
;	0525	
;	0526	LOG_ENTRY = ALLOCATE_MEM (.SIZE, .AREA);
;	0527	
;	0528	LOG_ENTRY[LOG$B_TYPE] = DYN$C_LOG;
;	0529	LOG_ENTRY[LOG$B_TABLE] =
;	0530	    (
;	0531	    IF .MOUNT_OPTIONS[OPT_SYSTEM]
;	0532	    THEN LOG$C_SYSTEM
;	0533	    ELSE IF .MOUNT_OPTIONS[OPT_GROUP]
;	0534	    THEN LOG$C_GROUP
;	0535	    ELSE LOG$C_PROCESS
;	0536	    );
;	0537	UIC = GET_UIC ();
;	0538	IF .MOUNT_OPTIONS[OPT_GROUP]
;	0539	THEN LOG_ENTRY[LOG$W_GROUP] = .UIC<16,16>;
;	0540	
;	0541	! Now allocate the mounted volume list entry.
;	0542	!
;	0543	
;	0544	MTL_ENTRY = ALLOCATE_MEM (MTL$C_LENGTH, .AREA);
;	0545	
;	0546	MTL_ENTRY[MTL$B_TYPE] = DYN$C_MTL;
;	0547	MTL_ENTRY[MTL$L_LOGNAME] = .LOG_ENTRY;
;	0548	
;	0549	END;					! end of routine ALLOC_LOGNAME


							    .TITLE  MAKLOG
							    .IDENT  \X0001\

							    .GLOBL  MOUNT_OPTIONS, LOG_NAME, LOG_ENTRY, MTL_ENTRY
							    .GLOBL  GET_UIC, ALLOCATE_MEM

							    .PSECT  $CODE$,NOWRT,2

					 0C0C 00000 	    .ENTRY  ALLOC_LOGNAME, Save R2,R3,R10,R11			      ; 0463
		         5A	0000G  CF  9E 00002 	    MOVAB   LOG_ENTRY, R10					      ;
		         5B	0000G  CF  9E 00007 	    MOVAB   MOUNT_OPTIONS, R11					      ;
	   0B	    03   AB	       05  E1 0000C 	    BBC     #5, MOUNT_OPTIONS+3, 1$				      ; 0518
	   50	  0000G  CF	       25  C1 00011 	    ADDL3   #37, LOG_NAME, R0					      ; 0519
		         50	       07  CA 00017 	    BICL2   #7, SIZE						      ;
				       03  11 0001A 	    BRB     2$							      ; 0518
		         50	       30  D0 0001C 1$:     MOVL    #48, SIZE						      ; 0520
	   04	         6B	       07  E0 0001F 2$:     BBS     #7, MOUNT_OPTIONS, 3$				      ; 0522
		         05	  01   AB  E9 00023 	    BLBC    MOUNT_OPTIONS+1, 4$					      ;
		         52	       01  D0 00027 3$:     MOVL    #1, AREA						      ; 0523
				       03  11 0002A 	    BRB     5$							      ; 0522
		         52	       02  D0 0002C 4$:     MOVL    #2, AREA						      ; 0524

; Bliss-32 7.352	Saturday 21-AUG-1978 23:52:44	DBB3:[MOUNT.SRC]MAKLOG.B32;8					Page 2-2
; Digital Equipment Corporation
;
				       05  BB 0002F 5$:     PUSHR   #^M<R0,R2>						      ; 0526
		  0000G  CF	       02  FB 00031 	    CALLS   #2, ALLOCATE_MEM					      ;
		         6A	       50  D0 00036 	    MOVL    R0, LOG_ENTRY					      ;
		         50	       6A  D0 00039 	    MOVL    LOG_ENTRY, R0					      ; 0528
		    0A   A0	       0B  90 0003C 	    MOVB    #11, 10(R0)						      ;
		         04	  01   AB  E9 00040 	    BLBC    MOUNT_OPTIONS+1, 6$					      ; 0531
				       51  D4 00044 	    CLRL    R1							      ; 0530
				       0C  11 00046 	    BRB     8$							      ;
	   05	         6B	       07  E1 00048 6$:     BBC     #7, MOUNT_OPTIONS, 7$				      ; 0533
		         51	       01  D0 0004C 	    MOVL    #1, R1						      ;
				       03  11 0004F 	    BRB     8$							      ;
		         51	       02  D0 00051 7$:     MOVL    #2, R1						      ;
		    0B   A0	       51  90 00054 8$:     MOVB    R1, 11(R0)						      ; 0529
		  0000G  CF	       00  FB 00058 	    CALLS   #0, GET_UIC						      ; 0537
		         51	       50  D0 0005D 	    MOVL    R0, UIC						      ;
	   0C	         6B	       07  E1 00060 	    BBC     #7, MOUNT_OPTIONS, 9$				      ; 0538
		         50	       6A  D0 00064 	    MOVL    LOG_ENTRY, R0					      ; 0539
	   51	         10	       10  EF 00067 	    EXTZV   #16, #16, UIC, R3					      ;
				       53     0006B									      ;
		    0C   A0	       53  B0 0006C 	    MOVW    R3, 12(R0)						      ;
				       52  DD 00070 9$:     PUSHL   AREA						      ; 0544
				       18  DD 00072 	    PUSHL   #24							      ;
		  0000G  CF	       02  FB 00074 	    CALLS   #2, ALLOCATE_MEM					      ;
		  0000G  CF	       50  D0 00079 	    MOVL    R0, MTL_ENTRY					      ;
		         50	0000G  CF  D0 0007E 	    MOVL    MTL_ENTRY, R0					      ; 0546
		    0A   A0	       19  90 00083 	    MOVB    #25, 10(R0)						      ;
		    10   A0	       6A  D0 00087 	    MOVL    LOG_ENTRY, 16(R0)					      ; 0547
					   04 0008B 	    RET     							      ; 0463

; Routine Size:  140 bytes



; Bliss-32 7.352	Saturday 21-AUG-1978 23:52:44	DBB3:[MOUNT.SRC]MAKLOG.B32;8					Page 3
; Digital Equipment Corporation
;
;	0550	GLOBAL ROUTINE ENTER_LOGNAME (UCB, VCB) : NOVALUE =
;	0551	
;	0552	!++
;	0553	!
;	0554	! FUNCTIONAL DESCRIPTION:
;	0555	!
;	0556	!	This routine completes the logical name and mounted volume list
;	0557	!	entries. It builds the logical name and equivalence strings
;	0558	!	and hooks up the entries in the appropriate lists.
;	0559	!
;	0560	!
;	0561	! CALLING SEQUENCE:
;	0562	!	ENTER_LOGNAME (ARG1, ARG2)
;	0563	!
;	0564	! INPUT PARAMETERS:
;	0565	!	ARG1: UCB of volume being mounted
;	0566	!	ARG2: VCB of volume being mounted
;	0567	!
;	0568	! IMPLICIT INPUTS:
;	0569	!	MOUNT parser data base
;	0570	!	LOG_ENTRY: address of logical name block
;	0571	!	MTL_ENTRY: address of MTL block
;	0572	!
;	0573	! OUTPUT PARAMETERS:
;	0574	!	NONE
;	0575	!
;	0576	! IMPLICIT OUTPUTS:
;	0577	!	NONE
;	0578	!
;	0579	! ROUTINE VALUE:
;	0580	!	NONE
;	0581	!
;	0582	! SIDE EFFECTS:
;	0583	!	logical name and MTL entry entered
;	0584	!
;	0585	!--
;	0586	
;	0587	BEGIN
;	0588	
;	0589	MAP
;	0590		UCB		: REF BBLOCK,	! UCB being mounted
;	0591		VCB		: REF BBLOCK;	! VCB being mounted
;	0592	
;	0593	BUILTIN
;	0594		INSQUE;
;	0595	
;	0596	LINKAGE
;	0597		LOG_INSLOGN	= JSB (REGISTER = 4, REGISTER = 5) :
;	0598				NOPRESERVE (2, 3);
;	0599	
;	0600	LOCAL
;	0601		P,				! string pointer
;	0602		Q,				! another string pointer
;	0603		C,				! string count
;	0604		MOUNT_LIST	: REF BBLOCK;	! address of mount list tail

; Bliss-32 7.352	Saturday 21-AUG-1978 23:52:44	DBB3:[MOUNT.SRC]MAKLOG.B32;8					Page 3-1
; Digital Equipment Corporation
;
;	0605	
;	0606	EXTERNAL
;	0607		MOUNT_OPTIONS	: BITVECTOR,	! command options
;	0608		DEVICE_CHAR	: BBLOCK,	! device characteristics
;	0609		LOG_NAME	: VECTOR,	! logical name descriptor
;	0610		LOG_BUFFER	: VECTOR [,BYTE], ! logical name buffer
;	0611		PHYS_NAME	: VECTOR,	! physical device name descriptor
;	0612		LOG_ENTRY	: REF BBLOCK,	! logical name block
;	0613		MTL_ENTRY	: REF BBLOCK,	! MTL block
;	0614		SCH$GL_CURPCB	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE),
;	0615						! address of our PCB
;	0616		IOC$GQ_MOUNTLST	: VECTOR ADDRESSING_MODE (ABSOLUTE),
;	0617						! system mounted volume list head
;	0618		CTL$GQ_MOUNTLST	: VECTOR ADDRESSING_MODE (ABSOLUTE);
;	0619						! process mounted volume list head
;	0620	
;	0621	EXTERNAL ROUTINE
;	0622		LOG$INSLOGN	: LOG_INSLOGN ADDRESSING_MODE (ABSOLUTE);
;	0623						! insert logical name
;	0624	
;	0625	
;	0626	! Get the logical name; either from the command or from the volume label.
;	0627	!
;	0628	
;	0629	IF NOT .MOUNT_OPTIONS[OPT_LOG_NAME]
;	0630	THEN
;	0631	    BEGIN
;	0632	    IF .DEVICE_CHAR[DEV$V_SQD]
;	0633	    THEN P = UPLIT BYTE ('TAPE$')
;	0634	    ELSE P = UPLIT BYTE ('DISK$');
;	0635	
;	0636	    Q = CH$FIND_CH (VCB$S_VOLNAME, VCB[VCB$T_VOLNAME], ' ');
;	0637	    C = VCB$S_VOLNAME;
;	0638	    IF NOT CH$FAIL (.Q)
;	0639	    THEN C = .Q - VCB[VCB$T_VOLNAME];
;	0640	
;	0641	    LOG_NAME[0] = .C + 5;
;	0642	    LOG_NAME[1] = LOG_BUFFER;
;	0643	    CH$COPY (5, .P, .C, VCB[VCB$T_VOLNAME], 0, .C+5, LOG_BUFFER);
;	0644	    END;
;	0645	
;	0646	! Now build the logical and physical names in the logical name block as
;	0647	! counted strings.
;	0648	!
;	0649	
;	0650	CH$COPY (1, LOG_NAME[0], .LOG_NAME[0], .LOG_NAME[1],
;	0651		 1, PHYS_NAME[0], .PHYS_NAME[0], .PHYS_NAME[1],
;	0652		 0, .LOG_NAME[0] + PHYS_LENGTH + 2, LOG_ENTRY[LOG$T_NAME]);
;	0653	
;	0654	! Hook up the entries. We point the UCB pointer in the logical name block
;	0655	! such that it points to an offset preceding the logical name pointer in the
;	0656	! MTL block which is the same as the offset location of the logical name pointer
;	0657	! in a mailbox UCB. (Got that?) This causes the logical name deletion logic
;	0658	! to clear the MTL's logical name pointer if the logical name is deleted,
;	0659	! just as it does when a mailbox logical name is deleted.

; Bliss-32 7.352	Saturday 21-AUG-1978 23:52:44	DBB3:[MOUNT.SRC]MAKLOG.B32;8					Page 3-2
; Digital Equipment Corporation
;
;	0660	!
;	0661	
;	0662	LOG_ENTRY[LOG$L_MBXUCB] = .MTL_ENTRY - $BYTEOFFSET (UCB$L_LOGADR)
;	0663					     + $BYTEOFFSET (MTL$L_LOGNAME);
;	0664	MTL_ENTRY[MTL$L_UCB] = .UCB;
;	0665	LOG$INSLOGN (.SCH$GL_CURPCB, .LOG_ENTRY);
;	0666	
;	0667	IF .MOUNT_OPTIONS[OPT_GROUP] OR .MOUNT_OPTIONS[OPT_SYSTEM]
;	0668	THEN MOUNT_LIST = IOC$GQ_MOUNTLST[1]
;	0669	ELSE MOUNT_LIST = CTL$GQ_MOUNTLST[1];
;	0670	INSQUE (.MTL_ENTRY, ..MOUNT_LIST);
;	0671	
;	0672	END;					! end of routine ENTER_LOGNAME



							    .PSECT  $PLIT$,NOWRT,NOEXE,2

					      00000 P.AAA:  .ASCII  \TAPE$\						      ;
					      00005	    .BLKB   3
					      00008 P.AAB:  .ASCII  \DISK$\						      ;
					      0000D	    .BLKB   3

							    .GLOBL  DEVICE_CHAR, LOG_BUFFER, PHYS_NAME, SCH$GL_CURPCB
							    .GLOBL  IOC$GQ_MOUNTLST, CTL$GQ_MOUNTLST, LOG$INSLOGN

							    .PSECT  $CODE$,NOWRT,2

					 0FFC 0008C 	    .ENTRY  ENTER_LOGNAME, Save R2,R3,R4,R5,R6,R7,R8,R9,R10,R11       ; 0550
		         5B	0000G  CF  9E 0008E 	    MOVAB   LOG_NAME, R11					      ;
	   55	  0000G  CF	       05  E0 00093 	    BBS     #5, MOUNT_OPTIONS+3, 5$				      ; 0629
	   07	  0000G  CF	       05  E1 00099 	    BBC     #5, DEVICE_CHAR, 1$					      ; 0632
		         52	0000'  CF  9E 0009F 	    MOVAB   P.AAA, P						      ; 0633
				       05  11 000A4 	    BRB     2$							      ; 0632
		         52	0000'  CF  9E 000A6 1$:     MOVAB   P.AAB, P						      ; 0634
		         56	  08   AC  D0 000AB 2$:     MOVL    VCB, R6						      ; 0636
      14   A6	         0C	       20  3A 000AF 	    LOCC    #32, #12, 20(R6)					      ;
				       02  12 000B4 	    BNEQ    3$							      ;
				       51  D4 000B6 	    CLRL    R1							      ;
		         59	       0C  D0 000B8 3$:     MOVL    #12, C						      ; 0637
				       51  D5 000BB 	    TSTL    Q							      ; 0638
				       08  13 000BD 	    BEQL    4$							      ;
		         50	  14   A6  9E 000BF 	    MOVAB   20(R6), R0						      ; 0639
	   59	         51	       50  C3 000C3 	    SUBL3   R0, Q, C						      ;
	   57	         59	       05  C1 000C7 4$:     ADDL3   #5, C, R7						      ; 0641
		         6B	       57  D0 000CB 	    MOVL    R7, LOG_NAME					      ;
		    04   AB	0000G  CF  9E 000CE 	    MOVAB   LOG_BUFFER, LOG_NAME+4				      ; 0642
		         58	0000G  CF  9E 000D4 	    MOVAB   LOG_BUFFER, R8					      ; 0643
	   00	         62	       05  2C 000D9 	    MOVC5   #5, (P), #0, R7, (R8)				      ;
		         68	       57     000DD									      ;
				       0D  18 000DF 	    BGEQ    5$							      ;
		         58	       05  C0 000E1 	    ADDL2   #5, R8						      ;
		         57	       05  C2 000E4 	    SUBL2   #5, R7						      ;
	   00	    14   A6	       59  2C 000E7 	    MOVC5   C, 20(R6), #0, R7, (R8)				      ;
		         68	       57     000EC									      ;

; Bliss-32 7.352	Saturday 21-AUG-1978 23:52:44	DBB3:[MOUNT.SRC]MAKLOG.B32;8					Page 3-3
; Digital Equipment Corporation
;
	   58	         6B	       0A  C1 000EE 5$:     ADDL3   #10, LOG_NAME, R8					      ; 0652
		         56	0000G  CF  D0 000F2 	    MOVL    LOG_ENTRY, R6					      ;
	   57	         56	       14  C1 000F7 	    ADDL3   #20, R6, R7						      ;
	   00	         6B	       01  2C 000FB 	    MOVC5   #1, LOG_NAME, #0, R8, (R7)				      ; 0650
		         67	       58     000FF									      ;
				       2B  18 00101 	    BGEQ    6$							      ;
				       57  D6 00103 	    INCL    R7							      ;
				       58  D7 00105 	    DECL    R8							      ;
	   00	    04   BB	       6B  2C 00107 	    MOVC5   LOG_NAME, @LOG_NAME+4, #0, R8, (R7)			      ;
		         67	       58     0010C									      ;
				       1E  18 0010E 	    BGEQ    6$							      ;
		         57	       6B  C0 00110 	    ADDL2   LOG_NAME, R7					      ;
		         58	       6B  C2 00113 	    SUBL2   LOG_NAME, R8					      ;
	   00	  0000G  CF	       01  2C 00116 	    MOVC5   #1, PHYS_NAME, #0, R8, (R7)				      ;
		         67	       58     0011C									      ;
				       0E  18 0011E 	    BGEQ    6$							      ;
				       57  D6 00120 	    INCL    R7							      ;
				       58  D7 00122 	    DECL    R8							      ;
	   00	  0000G  DF	0000G  CF  2C 00124 	    MOVC5   PHYS_NAME, @PHYS_NAME+4, #0, R8, (R7)		      ;
		         67	       58     0012C									      ;
		         50	0000G  CF  D0 0012E 6$:     MOVL    MTL_ENTRY, R0					      ; 0662
		    10   A6	  AC   A0  9E 00133 	    MOVAB   -84(R0), 16(R6)					      ; 0663
		    0C   A0	  04   AC  D0 00138 	    MOVL    UCB, 12(R0)						      ; 0664
		         54 00000000G  9F  D0 0013D 	    MOVL    @#SCH$GL_CURPCB, R4					      ; 0665
		         55	       56  D0 00144 	    MOVL    R6, R5						      ;
			    00000000G  9F  16 00147 	    JSB     @#LOG$INSLOGN					      ;
	   05	  0000G  CF	       07  E0 0014D 	    BBS     #7, MOUNT_OPTIONS, 7$				      ; 0667
		         09	0000G  CF  E9 00153 	    BLBC    MOUNT_OPTIONS+1, 8$					      ;
		         50 00000000G  8F  D0 00158 7$:     MOVL    #IOC$GQ_MOUNTLST+4, MOUNT_LIST			      ; 0668
				       07  11 0015F 	    BRB     9$							      ; 0667
		         50 00000000G  8F  D0 00161 8$:     MOVL    #CTL$GQ_MOUNTLST+4, MOUNT_LIST			      ; 0669
		    00   B0	0000G  DF  0E 00168 9$:     INSQUE  @MTL_ENTRY, @0(MOUNT_LIST)				      ; 0670
					   04 0016E 	    RET     							      ; 0550

; Routine Size:  227 bytes


;	0673	
;	0674	END
;	0675	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $CODE$         	   367  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $PLIT$         	    16  NOWRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




; Bliss-32 7.352	Saturday 21-AUG-1978 23:52:44	DBB3:[MOUNT.SRC]MAKLOG.B32;8					Page 3-4
; Digital Equipment Corporation
;

;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        24         0       237





; Size:		367 code + 16 data bytes
; Run Time:	00:17.6
; Elapsed Time:	00:39.0
; Memory Used:	290 pages
; Compilation Complete
