DMPDEF	MACRO M1110  22-AUG-78 02:04
TABLE OF CONTENTS

     7-   24	MACRO INVOCATION AND ASSEMBLY PARAMETERS
     9-    1	**** DMDMPR VERSION M0004.1 ****
    10-   36	DUMP THE DESIRED BLOCKS OF THE FILE
    11-  156	DMPBLK, DMPBYT, BYTOUT, EDPUT, ERRPT0
DMPDEF	MACRO M1110  22-AUG-78 02:04  PAGE 7


      1						.TITLE	DMPDEF
      2						.IDENT	/V02.1/
      3					;+
      4					; DUMP DEFINITION PREFIX FILE
      5					;-
      6					; COPYRIGHT 1973, DIGITAL EQUIPMENT CORP., MAYNARD, MASS. 01754
      7					;
      8					; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF ITS
      9					; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
     10					;
     11					; PETER H. LIPMAN 30-MARCH-73
     12					; ALTERED FRIDAY 11-JAN-74 13:40
     13					; ALTERED FOR RSX11M 12-MAR-74 R.HEINEN
     14					; ALTERED 10-MAR-76 H.B. BOSWELL ADD RAD50 MODE DUMP  HBB1
     15					; ALTERED 4/1/76 R. HEINEN ADD HEX DUMP SWITCH /HX/LW/WD
     16					; ALTERED 4/10/76 R. HEINEN ADD RECORD DMP MODE /RC
     17					;	25-JUL-77 G.RITTENBURG
     18					;
     19					;	GR001 TAPE DENSITY SWITCH ADDED
     20					;
     21					;	I$$AS = 1  ;CONDITIONAL FOR 11D AND IAS
     22					;
     23					;
     24						.SBTTL	MACRO INVOCATION AND ASSEMBLY PARAMETERS
     25					;
     27						.MCALL	FDOFF$,FCSBT$,QIOSY$,CSI$,GCMLD$
     28						.MCALL	FDRC$R,FDBK$R,GET$S
     29						.MCALL	FHDOF$
     30						.MCALL	SVTK$S
     36					;
     37						.MCALL	FINIT$,OFNB$,READ$,WAIT$,PUT$,CLOSE$
     38						.MCALL	FSRSZ$,FDBDF$,NMBLK$,FDAT$A,FDRC$A,FDBK$A,FDOP$A
     39						.MCALL	CSI$1,CSI$2,CSI$SW,CSI$SV,CSI$ND,ALUN$S
     40						.MCALL	GCMLB$,CALL,RETURN,EXIT$S
     41
     42		000014 				FF=14			;FORM FEED CHARACTER
     43		000015 				CR=15			;CARRIAGE RETURN CHARCTER
     44		000012 				LF=12			;LINE FEED CHARACTER
     45		000011 				TAB=11			;TAB CHARACTER
     46		000003 				INLUN=3			;LUN FOR INPUT FILE
     47		000004 				OUTLUN=4		;LUN FOR LISTING FILE
     48		000113 				MAXHED=75.		;MAXIMUM HEADER SIZE IN BYTES
     49					;
     50		000014 				S.STBK=12.		;SIZE OF STATISTICS BLOCK IN BYTES
     51		000040 				CS.SWF=40		;CSI$2 STATUS BIT FOR "SWITCH FOUND"
     52
     53					;
     54					; BITS IN DMPCTL
     55		000001 				BLBIT=1			;SET IF BLOCK SWITCH WAS SPECIFIED
     56		000002 				HDBIT=2			;SET IF HEADER SWITCH WAS SPECIFIED
     57		000004 				IDBIT=4			;SET TO PRINT THE IDENT MESSAGE
     58		000010 				MDBIT=10		;SET IF NUMBERING FOR MEMORY DUMP
     59		000020 				FIDBIT=20		;FILE ID SPECIFIED
     60		000040 				ASCBIT=40		;DUMP IN ASCII MODE
     61		000100 				BYTBIT=100		;DUMP BYTE ORIENTED (VERSUS WORD)
     62		000200 				BABIT=200		; BASE BLOCK NUMBER:N:N
     63		000400 				LBBIT=400		; START BLOCK NUMBER BIT
DMPDEF	MACRO M1110  22-AUG-78 02:04  PAGE 7-1
MACRO INVOCATION AND ASSEMBLY PARAMETERS

     64		001000 				R50BIT=1000		;***HBB1 DUMP IN RAD50 MODE
     65		002000 			HEXBIT=2000		;***RJH  DUMP IN HEX
     66		004000 				LNGBIT=4000		;***RJH HEX LONG WORD MODE
     67		010000 				WRDBIT=10000		;***RJH HEX WORD MODE
     68		020000 				DECBIT=20000		;***RJH DECIMAL BIT
     69		040000 				RECBIT=40000		;***RJH RECORD DMP MODE
     70		100000 				LBNBIT=100000		;SET IF IN LOGICAL BLOCK MODE
     71		000001 				SPLBIT=1		; SET IN "DMPCT2" IF SPOOL OUTPUT
     72		000002 				PEBIT=2		;SET IN DMPCT2 IF DENSITY SPECIFIED
     73					; DEFINITION TO AVOID GLOBAL ARITHMETIC PROBLEMS
     74		000001 				FO.RD=1
     75		000040 				FA.SHR=40
DMDMPR M0004.1, DUMP MAIN PROGR	MACRO M1110  22-AUG-78 02:04  PAGE 9
MACRO INVOCATION AND ASSEMBLY PARAMETERS

      1						.TITLE	DMDMPR M0004.1, DUMP MAIN PROGRAM
						.SBTTL	**** DMDMPR VERSION M0004.1 ****
						.IDENT	/M0004.1/
      2					; ALTERED:
      3					; ANDREW C. GOLDSTEIN  2 APR 75  12:59
      4					; ALTERED WEDNESDAY 30-JAN-74 21:10
      5					; ALTERED 10-MAR-76 H.B. BOSWELL  ADD RAD50 MODE DUMP  HBB1
      6					; ALTERED 4/1/76 R.HEINEN ADD HEX DUMP SWITCH /HX/LW/WD
      7					; ALTERED 4/10/76 R.HEINEN ADD RECORD DMP MODE /RC
      8					; ALTERED 9/3/76 R.HEINEN FIX LONG TIME BUG IN IE.VER DETECTION
      9					;
     10					; COPYRIGHT 1974, DIGITAL EQUIPMENT CORP., MAYNARD MASS.
     11
     12					; THIS SOFTWARE IS FURNISHED TO PURCHASER UNDER A LICENSE FOR USE
     13					; ON A SINGLE COMPUTER SYSTEM AND CAN BE COPIED (WITH INCLUSION
     14					; OF DEC'S COPYRIGHT NOTICE) ONLY FOR USE IN SUCH SYSTEM, EXCEPT
     15					; AS MAY OTHERWISE BE PROVIDED IN WRITING BY DEC.
     16
     17					; THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
     18					; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
     19					; EQUIPMENT CORPORATION.
     20
     21					; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY
     22					; OF ITS SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
     23					;
     24					; PETER H. LIPMAN 30-MARCH-73
     25					; 23-JUL-74 R.HEINEN FOR RSX11M
     26					;	16-SEPT-77  G.RITTENBURG
     27					;
     28					;	GR001	EXIT WITH STATUS ADDED
     29					;
     30					;	23-SEPT.-77 G.RITTENBURG
     31					;
     32					;	GR002----SOB INSTRUCTION REMOVED
     33					;
     34					;
DMDMPR M0004.1, DUMP MAIN PROGR	MACRO M1110  22-AUG-78 02:04  PAGE 10
DUMP THE DESIRED BLOCKS OF THE FILE

     36						.SBTTL	DUMP THE DESIRED BLOCKS OF THE FILE
     37					;
     38					; DUMP THE NEXT BLOCK
     39
     40	000000					PURE.I
     41
     42						.ENABL	LSB
     43
     44	000000	012701 	000000G		NXTBLK::	MOV	#INBUF,R1	;ZERO THE BUFFER
     45	000004	016702 	000000G			MOV	.WORDS,R2	;SINCE PRINTING ENTIRE BUFFER
     46	000010	005021 			10$:	CLR	(R1)+		;EVEN IF SHORT BLOCK WAS READ
     47	000012					SOB	R2,10$
     48	000016	012700 	000000G			MOV	#FDBIN,R0
     49	000022	032767 	100000 	000000G		BIT	#LBNBIT,DMPCTL	;LOGICAL BLOCKS?
     50	000030	001425 				BEQ	20$		;BRANCH IF VIRTUAL BLOCKS
     51					;
     52					; DO LOGICAL I/O
     53	000032	016767 	000000G	000000G		MOV	BLKNUM,LBN	; SET BLOCK NUMBERS
     54	000040	016767 	000002G	000002G		MOV	BLKNUM+2,LBN+2
     55	000046	012701 	000000G			MOV	#IO.RLB,R1
     56	000052	012702 	000005 			MOV	#5,R2
     57	000056	012703 	000000G			MOV	#READLB,R3
     58	000062					CALL	.XQIO		;READ THE NEXT LOGICAL BLOCK
     59	000066	013702 	000000G			MOV	@#.FSRPT,R2
     60	000072	016267 	000002G	000002G		MOV	A.IOST+2(R2),IOSTBK+2
     61	000100	103523 				BCS	29$		; BRANCH ON ERROR
     62	000102	000523 				BR	30$
     63					;
     64					; READ VIRTUAL BLOCKS FROM SPECIFIED FILE
     65					;
     66	000104	032767 	040000 	000000G	20$:	BIT	#RECBIT,DMPCTL	; RECORD I/O
     67	000112	001511 				BEQ	28$		; IF NE THEN YES
     68	000114					GET$S	R0		; GET THE RECORD
     69	000120	103513 				BCS	29$		; IF C-SET THEN CHECK EOF CONDITION
     70	000122	016067 	000024 	000002G		MOV	F.NRBD(R0),IOSTBK+2; INIT BYTE COUNT TO DMP
     71	000130	032767 	000003 	000000G		BIT	#3,RECNUM	; OUTPUT HEADR EVERY 4 LINES
     72	000136	001015 				BNE	21$		; IF NE THEN NO HEADER
     73	000140					PUT$	#FDBOUT,#HEADER,HEADSZ,WRTERR
     74	000172	012702 	000000G		21$:	MOV	#MOPRM,R2	; ADDRESS EDMSG PARAM BLOCK
     75	000176	012712 	000000G			MOV	#FM03SZ,@R2	; SET UP RECORD NUMBER MESSAGE
     76	000202	012762 	000000G	000002 		MOV	#FM03MG,2(R2)	;
     77	000210	016762 	000002G	000004 		MOV	RECNUM+2,4(R2)	; INSERT RECORD NUMBER
     78	000216	016762 	000000G	000006 		MOV	RECNUM,6(R2)	;
     79	000224	062767 	000001 	000000G		ADD	#1,RECNUM	; INCREMENT RECORD NUMBER
     80	000232	022767 	023420 	000000G		CMP	#10000.,RECNUM	; 10000. ?
     81	000240	001004 				BNE	22$		; IF NE THEN OK
     82	000242	005067 	000000G			CLR	RECNUM		; RESET RECORD NUMBER
     83	000246	005267 	000002G			INC	RECNUM+2
     84	000252	016762 	000002G	000010 	22$:	MOV	IOSTBK+2,10(R2); INSERT RECORD SIZE
     85	000260	012701 	000000G			MOV	#RCNOMG,R1	; SET MESSAGE TO PRINT
     86	000264					CALL	EDPUT		; OUTPUT MESSAGE
     87	000270	005067 	000000G			CLR	BYTNUM		; RESET BYT NUMBER
     88	000274					CALL	DMPBLK		; DUMP THE BLOCK
     89	000300					PUT$	#FDBOUT,#HEADER+1,#4,WRTERR
     90	000332	000167 	177442 			JMP	NXTBLK		; DMP THE NEXT RECORD
     91	000336				28$:	READ$	R0		;READ THE NEXT BLOCK
     92	000342	103543 				BCS	CKEOF		;BRANCH IF QI/O ERROR
DMDMPR M0004.1, DUMP MAIN PROGR	MACRO M1110  22-AUG-78 02:04  PAGE 10-1
DUMP THE DESIRED BLOCKS OF THE FILE

     93	000344					WAIT$	R0		;WAIT FOR I/O DIONE
     94	000350	103540 			29$:	BCS	CKEOF		;BRANCH IF ERROR
     95					;
     96					; NOW WRITE THE PAGE HEADER
     97	000352				30$:	PUT$	#FDBOUT,#HEADER,HEADSZ,WRTERR
     98	000404	012702 	000000G			MOV	#MOPRM,R2	;R2=ADDRESS OF PARAM BLOCK
     99	000410	012712 	000000G			MOV	#FM03SZ,@R2	;SET UP BLOCK NO. MESSAGE
    100	000414	012762 	000000G	000002 		MOV	#FM03MG,2(R2)
    101	000422	016762 	000000G	000004 		MOV	BLKNUM,4(R2)	; INSERT BLOCK NUMBERS IN PARAMS
    102	000430	016762 	000002G	000006 		MOV	BLKNUM+2,6(R2)
    103	000436	005267 	000000G			INC	FBLOCK
    104	000442	062767 	000001 	000002G		ADD	#1,BLKNUM+2	; INCREMENT BLOCK NUMS
    105	000450	005567 	000000G			ADC	BLKNUM
    106	000454	016762 	000002G	000010 		MOV	IOSTBK+2,10(R2)
    107	000462	012701 	000000G			MOV	#VBNOMG,R1	;SAY "VIRTUAL BLOCK"
    108	000466	032767 	100000 	000000G		BIT	#LBNBIT,DMPCTL	;UNLESS LOGICAL BLOCK MODE
    109	000474	001402 				BEQ	40$
    110	000476	012701 	000000G			MOV	#LBNOMG,R1	;USE "LOGICAL BLOCK"
    111	000502				40$:	CALL	EDPUT
    112	000506	122767 	000000G	000052G		CMPB	#IE.VER,FDBIN+F.ERR ; SEE IF THERE WAS A PARITY ERROR
    113	000514	001015 				BNE	50$		; NO
    114	000516					PUT$	#FDBOUT,#BADPMG,#BADPSZ,WRTERR ; OUTPUT MESSAGE
    115	000550	032767 	000010 	000000G	50$:	BIT	#MDBIT,DMPCTL	;UNLESS IN MEMORY DUMP MODE
    116	000556	001002 				BNE	60$
    117	000560	005067 	000000G			CLR	BYTNUM		; RESET BYTE NUMBER
    118	000564				60$:	CALL	DMPBLK		;OUTPUT THE BLOCK
    119	000570	122767 	000000G	000052G		CMPB	#IE.EOT,FDBIN+F.ERR ; SEE IF WE ARE AT END OF TAPE
    120	000576	001017 				BNE	70$		; NO
    121	000600					PUT$	#FDBOUT,#EOT1MG,#EOT1SZ,WRTERR ; OUTPUT MESSAGE
    122	000632	000167 	000000G		80$:	JMP	RSTART
    123	000636	026767 	000000G	000000G	70$:	CMP	FBLOCK,LBLOCK	;DONE ALL BLOCKS?
    124	000644	101372 				BHI	80$
    125	000646	000167 	177126 		130$:	JMP	NXTBLK		;BRANCH IF MORE TO DO
    126					;
    127					; ERROR READING INPUT FILE - PROBABLY EOF
    128	000652	122760 	000000G	000052 	CKEOF::	CMPB	#IE.EOF,F.ERR(R0)
    129	000660	001424 				BEQ	110$
    130	000662	122760 	000000G	000052 		CMPB	#IE.EOT,F.ERR(R0) ; SEE IF AT END OF TAPE
    131	000670	001630 				BEQ	30$		; IF SO, IGNORE FOR NOW
    132	000672	122760 	000000G	000052 		CMPB	#IE.VER,F.ERR(R0) ; LIKEWISE FOR PARITY ERROR
    133	000700	001004 				BNE	90$		; NEITHER
    134	000702	012767 	001000 	000002G		MOV	#512.,IOSTBK+2	; FAKE A BYTE COUNT OF 512
    135	000710	000620 				BR	30$		; AND DUMP IT ANYWAY
    136	000712				90$:	ERROUT	ER09,0,0	;I/O ERROR
	000712	104426 				TRAP	X
	000714	000000G				.WORD	ER09SZ
	000716	000000G				.WORD	ER09MG
    137	000720	012767 	000002 	000000G		MOV	#2,.EXSTS	;FATAL ERROR
    138	000726	000167 	000000G		100$:	JMP	RSTART
    139
    140	000732				110$:	PUT$	#FDBOUT,#EOF1MG,#EOF1SZ,WRTERR
    141	000764	005267 	000000G			INC	FBLOCK		;COUNT EOF AS LOGICAL BLOCK
    142	000770	032767 	100000 	000000G		BIT	#LBNBIT,DMPCTL
    143	000776	001753 				BEQ	100$
    144	001000	132767 	000040 	000017G		BITB	#FD.SQD,FDBIN+F.RCTL ; CHECK IF SEQ DEVICE (MAGTAPE)
    145	001006	001747 				BEQ	100$		; QUIT IF NOT
    146	001010	000167 	176764 			JMP	NXTBLK
DMDMPR M0004.1, DUMP MAIN PROGR	MACRO M1110  22-AUG-78 02:04  PAGE 10-2
DUMP THE DESIRED BLOCKS OF THE FILE

    147
    148					;
    149					; ERROR WRITING LISTING FILE
    150	001014				WRTERR::	ERROUT	ER10,0,0
	001014	104426 				TRAP	X
	001016	000000G				.WORD	ER10SZ
	001020	000000G				.WORD	ER10MG
    151	001022	012767 	000002 	000000G		MOV	#2,.EXSTS	;FATAL ERROR
    152	001030	000167 	000000G			JMP	RSTART
    153
    154						.DSABL	LSB
DMDMPR M0004.1, DUMP MAIN PROGR	MACRO M1110  22-AUG-78 02:04  PAGE 11
DMPBLK, DMPBYT, BYTOUT, EDPUT, ERRPT0

    156						.SBTTL	DMPBLK, DMPBYT, BYTOUT, EDPUT, ERRPT0
    157					; DUMP A 256. WORD BLOCK FROM INBUF TO FDBOUT
    158	001034				DMPBLK::
    159	001034	012702 	000000G			MOV	#INBUF,R2	;DUMP IN WORD MODE
    160	001040	016705 	000002G			MOV	IOSTBK+2,R5	; GET BYTE COUNT
    161	001044	062705 	000017 			ADD	#15.,R5		; ROUND UP TO ONE LINE
    162	001050	006205 				ASR	R5		; COMPUTE LINE COUNT
    163	001052	006205 				ASR	R5
    164	001054	006205 				ASR	R5
    165	001056	006205 				ASR	R5
    166	001060	001446 				BEQ	35$		; IF EQ PRINT NOTHING
    167
    168	001062	032767 	002000 	000000G		BIT	#HEXBIT,DMPCTL	; DUMPING HEX?
    169	001070	001043 				BNE	40$		; IF NE THEN YES
    170	001072	032767 	001000 	000000G		BIT	#R50BIT,DMPCTL	;***HBB1 SKIP BYTE CHECK IF RAD50
    171	001100	001004 				BNE	20$		;***HBB1 IF NE THEN YES
    172	001102	032767 	000100 	000000G		BIT	#BYTBIT,DMPCTL
    173	001110	001035 				BNE	DMPBYT		;BRANCH IF BYTE MODE
    174
    175	001112	016742 	000000G		20$:	MOV	BYTNUM,-(R2)	;STORE LINE NUMBER BEFORE DATA
    176	001116	062767 	000020 	000000G		ADD	#20,BYTNUM
    177	001124	012701 	000000G			MOV	#FM04MG,R1	;***HBB1 ASSUME OCTAL
    178	001130	032767 	001000 	000000G		BIT	#R50BIT,DMPCTL	;***HBB1 IS IT REALY RAD50
    179	001136	001403 				BEQ	30$		;***HBB1 BR IF NO
    180	001140	012701 	000000G			MOV	#FM06MG,R1	;***HBB1 SET UP RAD50 CMD LINE
    181	001144	000406 				BR	31$		;***RJH SET UP FOR DECIMAL
    182	001146				30$:				;***HBB1
    183	001146	032767 	020000 	000000G		BIT	#DECBIT,DMPCTL	;***RJH DECIMAL?
    184	001154	001402 				BEQ	31$		;***RJH NO? -- STILL OCTAL
    185	001156	012701 	000000G			MOV	#FM07MG,R1	; SET DECIMAL STRING
    186	001162				31$:	CALL	EDPUT
    187	001166	062702 	000022 			ADD	#18.,R2		;POINT AT NEXT SET OF DATA
    188	001172					SOB	R5,20$
    189	001176				35$:	RETURN
    190	001200	000167 	000246 		40$:	JMP	HEXDMP		;***RJH ENTER HEX DMP CONTROL
    191					;
    192					; DUMP A 256 WORD BLOCK IN BYTE MODE
    193	001204				DMPBYT::
    194	001204	010203 				MOV	R2,R3		; CROCK!!!!!!!!!!!
    195	001206	016700 	000026G		10$:	MOV	FDBOUT+F.NRBD+2,R0
    196	001212	012701 	000000G			MOV	#FM05MG,R1
    197	001216	012702 	000000G			MOV	#BYTNUM,R2
    198	001222					CALL	$EDMSG
    199	001226	062767 	000020 	000000G		ADD	#16.,BYTNUM
    200	001234	012704 	000020 			MOV	#16.,R4		;16 BYTES PER LINE
    201	001240	112301 			20$:	MOVB	(R3)+,R1
    202	001242					CALL	BYTOUT
    203	001246					SOB	R4,20$
    204	001252	010001 				MOV	R0,R1
    205	001254	166701 	000026G			SUB	FDBOUT+F.NRBD+2,R1
    206	001260					PUT$	#FDBOUT,,R1,WRTERR
    207	001302					SOB	R5,10$		;DON THE NEXT LINE IF ANY
    208	001306					RETURN
DMDMPR M0004.1, DUMP MAIN PROGR	MACRO M1110  22-AUG-78 02:04  PAGE 12
DMPBLK, DMPBYT, BYTOUT, EDPUT, ERRPT0

    210					; TRANSLATE THE BYTE IN R1 TO THE STRING IN R0
    211	001310	042701 	177400 		BYTOUT::	BIC	#177400,R1	;CLEAR HIGH ORDER BITS
    212	001314	032767 	002040 	000000G		BIT	#ASCBIT!HEXBIT,DMPCTL	; ASCII OR HEX FORMAT?
    213	001322	001011 				BNE	BYTASC		;BRANCH IF YES
    214	001324					CALL	BYTOU2		;1ST 2 BITS TO OCTAL DIGIT
    215	001330					CALL	BYTOU1		;2ND OCTAL DIGIT
    216	001334					CALL	BYTOU1		;3RD OCTAL DIGIT
    217	001340	112720 	000040 			MOVB	#' ,(R0)+
    218	001344					RETURN
    219					;
    220					; ASCII MODE, CONTROL CHARS BECOME ^ FOLLOWED BY LETTER (CHAR+100)
    221					; LOWER CASE BECOME % FOLLOWED BY LETTER (CHAR-40)
    222	001346	112720 	000040 		BYTASC::	MOVB	#' ,(R0)+
    223	001352	042701 	177600 		18$:	BIC	#177600,R1	; REMOVE GARBAGE
    224	001356	122701 	000040 			CMPB	#40,R1		; CONTROL CHARACTER?
    225	001362	101405 				BLOS	20$
    226	001364	062701 	000100 			ADD	#100,R1		;CONTROL CHARACTER
    227	001370	112720 	000136 			MOVB	#'^,(R0)+
    228	001374	000412 				BR	40$
    229	001376	122701 	000140 		20$:	CMPB	#140,R1		;LOWER CASE?
    230	001402	101005 				BHI	30$		;BRANCH IF PRINTABLE CHARACTER
    231	001404	162701 	000040 			SUB	#40,R1		;LOWER CASE CHARACTER
    232	001410	112720 	000045 			MOVB	#'%,(R0)+
    233	001414	000402 				BR	40$
    234	001416	112720 	000040 		30$:	MOVB	#' ,(R0)+
    235	001422	110120 			40$:	MOVB	R1,(R0)+	;STORE CHARACTER
    236	001424					RETURN
    237					;
    238					; OUTPUT BYTE IN OCTAL
    239	001426	006301 			BYTOU1:	ASL	R1
    240	001430	006301 			BYTOU2:	ASL	R1
    241	001432	006301 				ASL	R1
    242	001434	000301 				SWAB	R1
    243	001436	062701 	000060 			ADD	#'0,R1
    244	001442	110120 				MOVB	R1,(R0)+
    245	001444	105001 				CLRB	R1
    246	001446	000301 				SWAB	R1
    247	001450					RETURN
DMDMPR M0004.1, DUMP MAIN PROGR	MACRO M1110  22-AUG-78 02:04  PAGE 13
DMPBLK, DMPBYT, BYTOUT, EDPUT, ERRPT0

    249					;
    250					; HEX DMP ROUTINES
    251					;
    252					;	R2= ADDRESS OF INPUT BUFFER
    253					;	R5= NUMBER OF LINES TO OUTPUT
    254					;
    255	001452				HEXDMP:
    256	001452	016700 	000026G			MOV	FDBOUT+F.NRBD+2,R0; GET ADDRESS OF OUTPUT BUF
    257	001456	012704 	001666'			MOV	#DIGITS,R4	; ADDRESS ADDRESS OF CONVERT ROUTINE
    258	001462	012746 	000053 			MOV	#43.,-(SP)	; SET DEFAULT FOR LINE END
    259	001466	032767 	004000 	000000G		BIT	#LNGBIT,DMPCTL	; LONG WORD?
    260	001474	001010 				BNE	10$		; IF NE THEN YES
    261	001476	012716 	000057 			MOV	#47.,@SP	; WORD?
    262	001502	032767 	010000 	000000G		BIT	#WRDBIT,DMPCTL	; IF NE THEN WORD SET MODE
    263	001510	001002 				BNE	10$		; IF NE THEN YES
    264	001512	012716 	000067 			MOV	#55.,@SP	; ELSE BYTE
    265	001516	116701 	000000G		10$:	MOVB	BYTNUM,R1	; OUTPUT LINE BYTE NUMBER
    266	001522	061600 				ADD	@SP,R0		; POINT TO END OF LINE
    267	001524					CALL	@R4		; CONVERT TWO DIGITS
    268	001526	116701 	000001G			MOVB	BYTNUM+1,R1	; OUTPUT NEXT TWO
    269	001532					CALL	@R4		;
    270	001534	112740 	000011 			MOVB	#11,-(R0)
    271	001540	012703 	000020 			MOV	#16.,R3		; SET NUMBER OF BYTES TO OUTPUT
    272	001544	060367 	000000G			ADD	R3,BYTNUM	; UPDATE BYTE NUMBER
    273	001550	112201 			50$:	MOVB	(R2)+,R1	; GET BYTE
    274	001552	005046 				CLR	-(SP)		; SET FLAG FOR SPACE ON EVERY BYTE
    275	001554	032767 	004000 	000000G		BIT	#LNGBIT,DMPCTL	; LONG WORD?
    276	001562	001403 				BEQ	55$		; IF EQ THEN NO
    277	001564	012716 	000003 			MOV	#3,@SP		; SET LONG WORD SPACE MASK
    278	001570	000406 				BR	60$
    279	001572	032767 	010000 	000000G	55$:	BIT	#WRDBIT,DMPCTL	; WORD?
    280	001600	001402 				BEQ	60$		; IF EQ THEN NO
    281	001602	012716 	000001 			MOV	#1,@SP		; SET WORD MASK
    282	001606	032603 			60$:	BIT	(SP)+,R3	; SET IF SPACE IS NEEDED
    283	001610	001002 				BNE	65$		; IF NE THEN NO
    284	001612	112740 	000040 			MOVB	#40,-(R0)	; INSERT SPACE
    285	001616				65$:	CALL	@R4		; OUTPUT IT
    286	001620					SOB	R3,50$		; OUTPUT 16. BYTES
    287	001624	012601 				MOV	(SP)+,R1	; GET SIZE OF LINE
    288	001626	112740 	000012 			MOVB	#12,-(R0)	; INSERT NEW LINE
    289	001632	112740 	000015 			MOVB	#15,-(R0)	;
    290	001636					PUT$	#FDBOUT,,R1,WRTERR; OUTPUT STRING
    291	001660	005305 				DEC	R5
    292	001662	001273 				BNE	HEXDMP
    293	001664					RETURN
    294	001666	042701 	177400 		DIGITS:	BIC	#177400,R1	; RESET UPPER BYTE
    295	001672	006301 				ASL	R1		; SEPARATE DIGIT FIELDS
    296	001674	006301 				ASL	R1
    297	001676	006301 				ASL	R1
    298	001700	006301 				ASL	R1
    299	001702	000241 				CLC
    300	001704	106001 				RORB	R1
    301	001706	106001 				RORB	R1
    302	001710	106001 				RORB	R1
    303	001712	106001 				RORB	R1
    304	001714					CALL	@PC		; DO TWO DIGITS
    305	001716	012746 	000060 			MOV	#48.,-(SP)	; SET FIRST DISPLACEMENT
DMDMPR M0004.1, DUMP MAIN PROGR	MACRO M1110  22-AUG-78 02:04  PAGE 13-1
DMPBLK, DMPBYT, BYTOUT, EDPUT, ERRPT0

    306	001722	120127 	000011 			CMPB	R1,#9.		; IF LE THAN 9 THEN OK
    307	001726	003402 				BLE	10$		; BR IF LE
    308	001730	012716 	000067 			MOV	#55.,@SP	; RESET DISPLACEMENT
    309	001734	062601 			10$:	ADD	(SP)+,R1	; DISPLACE CHARACTER
    310	001736	110140 				MOVB	R1,-(R0)	; INSERT CHARACTER IN OUTPUT
    311	001740	000301 				SWAB	R1		; OUTPUT OTHER CHAR NEXT TIME THROUGH
    312	001742					RETURN
    313		000001 				.END
DMDMPR M0004.1, DUMP MAIN PROGR	MACRO M1110  22-AUG-78 02:04  PAGE 13-2
SYMBOL TABLE

AB.CDT  000105   	EOT1SZ= ****** GX	FM06MG= ****** GX	F.URBD= 000020   	I.RVNO= 000012
AB.CHU  000064   	ER09MG= ****** GX	FM07MG= ****** GX	F.VBN = 000064   	I.RVTI= 000023
AB.EXP  000122   	ER09SZ= ****** GX	FO.APD= 000106   	F.VBSZ= 000060   	I.TISZ= 000006
AB.FNU  000000   	ER10MG= ****** GX	FO.MFY= 000002   	GE.BIF= 177775   	LBBIT = 000400
AB.FP   000062   	ER10SZ= ****** GX	FO.RD = 000001   	GE.CLO= 000004   	LBLOCK= ****** GX
AB.FSQ  000002   	FA.APD= 000100   	FO.UPD= 000006   	GE.COM= 000001   	LBN   = ****** GX
AB.GC   000061   	FA.CRE= 000010   	FO.WRT= 000016   	GE.CON= 000020   	LBNBIT= 100000
AB.NAM  000006   	FA.DLK= 001000   	FP.DEL= 000010   	GE.EOF= 177766   	LBNOMG= ****** GX
AB.PC   000060   	FA.ENB= 100000   	FP.EXT= 000004   	GE.IND= 000002   	LF    = 000012
AB.RDT  000070   	FA.EXC= 002000   	FP.RAT= 000001   	GE.IOR= 177777   	LNGBIT= 004000
AB.REV  000066   	FA.EXT= 000004   	FP.RDV= 000001   	GE.LC = 000010   	MAXHED= 000113
AB.UAT  000020   	FA.NSP= 000100   	FP.WRV= 000002   	GE.MDE= 177774   	MDBIT = 000010
ASCBIT= 000040   	FA.POS= 010000   	F.ACTL= 000076   	GE.OPR= 177776   	MOPRM = ****** GX
A.IOST= ****** GX	FA.RD = 000001   	F.ALOC= 000040   	GE.RBG= 177730   	M.CTSZ= 000006
BABIT = 000200   	FA.RWD= 004000   	F.BBFS= 000062   	GE.SIZ= 000040   	M.EFNU= 000002
BADPMG= ****** GX	FA.SEQ= 040000   	F.BDB = 000070   	G.CMLD= 000146   	M.EFSQ= 000004
BADPSZ= ****** GX	FA.SHR= 000040   	F.BGBC= 000057   	G.DPRM= 000160   	M.ERVN= 000001
BLBIT = 000001   	FA.TMP= 000020   	F.BKDN= 000026   	G.ERR = 000140   	M.ESQN= 000000
BLKNUM= ****** GX	FA.WCK= 020000   	F.BKDS= 000020   	G.ISIZ= 000020   	M.LBSZ= 000007
BYTASC  001346RG    002	FA.WRT= 000002   	F.BKEF= 000050   	G.MODE= 000141   	M.MAX = 000011
BYTBIT= 000100   	FBLOCK= ****** GX	F.BKP1= 000051   	G.PSDS= 000142   	M.RTRV= 000012
BYTNUM= ****** GX	FDBIN = ****** GX	F.BKST= 000024   	G.SIZE= 000224   	M.USE = 000010
BYTOUT  001310RG    002	FDBOUT= ****** GX	F.BKVB= 000064   	HDBIT = 000002   	NB.DEV= 000200
BYTOU1  001426R     002	FD.BLK= 000010   	F.CHR = 000075   	HEADER= ****** GX	NB.DIR= 000100
BYTOU2  001430R     002	FD.CCL= 000002   	F.CNTG= 000034   	HEADSZ= ****** GX	NB.NAM= 000004
CH.AND= 000001   	FD.COM= 020000   	F.DFNB= 000046   	HEXBIT= 002000   	NB.NXD= 020000
CKEOF   000652RG    002	FD.CR = 000002   	F.DSPT= 000044   	HEXDMP  001452R     002	NB.SD1= 000400
CR    = 000015   	FD.DIR= 000010   	F.DVNM= 000134   	H.CKSM= 000776   	NB.SD2= 001000
CS.DIF= 000002   	FD.FTN= 000001   	F.EFBK= 000010   	H.FCHA= 000014   	NB.SNM= 000040
CS.DVF= 000004   	FD.F11= 040000   	F.EFN = 000050   	H.FLEV= 000006   	NB.STP= 000020
CS.EQU= 000040   	FD.INS= 000010   	F.EOBB= 000032   	H.FNUM= 000002   	NB.SVR= 000010
CS.INP= 000001   	FD.ISP= 002000   	F.ERR = 000052   	H.FOWN= 000010   	NB.TYP= 000002
CS.MOR= 000020   	FD.MNT= 100000   	F.FACC= 000043   	H.FPRO= 000012   	NB.VER= 000001
CS.NMF= 000001   	FD.OSP= 004000   	F.FFBY= 000014   	H.FSEQ= 000004   	NB.WLV= 010000
CS.OUT= 000002   	FD.PLC= 000004   	F.FNAM= 000110   	H.IDOF= 000000   	NXTBLK  000000RG    002
CS.SWF= 000040   	FD.PRN= 000004   	F.FNB = 000102   	H.MPOF= 000001   	N.DEVD= 000000
CS.WLD= 000010   	FD.PSE= 010000   	F.FTYP= 000116   	H.PROG= 000010   	N.DID = 000024
C.CMLD= 000002   	FD.RAH= 000001   	F.FVER= 000120   	H.PROJ= 000011   	N.DIRD= 000004
C.DEVD= 000006   	FD.RAN= 000002   	F.HIBK= 000004   	H.SCHA= 000015   	N.DVNM= 000032
C.DIRD= 000012   	FD.REC= 000001   	F.LUN = 000042   	H.UCHA= 000014   	N.FID = 000000
C.DSDS= 000006   	FD.RWM= 000001   	F.MBCT= 000054   	H.UFAT= 000016   	N.FLID= 000016
C.FILD= 000016   	FD.SDI= 000020   	F.MBC1= 000055   	IDBIT = 000004   	N.FNAM= 000006
C.MKW1= 000024   	FD.SQD= 000040   	F.MBFG= 000056   	IE.EOF= ****** GX	N.FNMD= 000010
C.MKW2= 000026   	FD.TTY= 000004   	F.NRBD= 000024   	IE.EOT= ****** GX	N.FTYP= 000014
C.SIZE= 000054   	FD.WBH= 000002   	F.NREC= 000030   	IE.VER= ****** GX	N.FVER= 000016
C.STAT= 000001   	FF    = 000014   	F.OVBS= 000030   	INBUF = ****** GX	N.NEXT= 000022
C.SWAD= 000022   	FF.CHR= 000005   	F.RACC= 000016   	INLUN = 000003   	N.SPEC= 000014
C.TYPR= 000000   	FF.NV = 000003   	F.RATT= 000001   	IOSTBK= ****** GX	N.STAT= 000020
DECBIT= 020000   	FF.POE= 000002   	F.RCNM= 000034   	IO.RLB= ****** GX	N.UNIT= 000034
DIGITS  001666R     002	FF.RWD= 000001   	F.RCTL= 000017   	I.CRDT= 000031   	OUTLUN= 000004
DMPBLK  001034RG    002	FF.RWF= 000006   	F.RSIZ= 000002   	I.CRTI= 000040   	PAR$$$= 000027
DMPBYT  001204RG    002	FF.SPC= 000004   	F.RTYP= 000000   	I.DASZ= 000007   	PEBIT = 000002
DMPCTL= ****** GX	FIDBIT= 000020   	F.SEQN= 000100   	I.EXDT= 000046   	RCNOMG= ****** GX
EDPUT = ****** GX	FM03MG= ****** GX	F.SPDV= 000072   	I.FNAM= 000000   	READLB= ****** GX
EOF1MG= ****** GX	FM03SZ= ****** GX	F.SPUN= 000074   	I.FTYP= 000006   	RECBIT= 040000
EOF1SZ= ****** GX	FM04MG= ****** GX	F.STBK= 000036   	I.FVER= 000010   	RECNUM= ****** GX
EOT1MG= ****** GX	FM05MG= ****** GX	F.UNIT= 000136   	I.RVDT= 000014   	RSTART= ****** GX
DMDMPR M0004.1, DUMP MAIN PROGR	MACRO M1110  22-AUG-78 02:04  PAGE 13-3
SYMBOL TABLE

R$$DPB= 000001   	SC.MDL= 000200   	S.FNTY= 000004   	UC.DLK= 000100   	.GETSQ= ****** G
R$$DYM= 000001   	SPLBIT= 000001   	S.FTYP= 000002   	VBNOMG= ****** GX	.PUT  = ****** G
R$$EIS= 000000   	S.APPD= 000010   	S.HDHD= 000056   	WRDBIT= 010000   	.READ = ****** G
R$$11M= 000001   	S.FATT= 000016   	S.IDHD= 000056   	WRTERR  001014RG    002	.WAIT = ****** G
R.FIX = 000001   	S.FDB = 000140   	S.MPHD= 000012   	X     = 000026   	.WORDS= ****** GX
R.SEQ = 000003   	S.FIDS= 000014   	S.NFEN= 000020   	$EDMSG= ****** GX	.XQIO = ****** GX
R.VAR = 000002   	S.FNAM= 000006   	S.STBK= 000014   	$$$T1 = 000067   	...GBL= 000000
R50BIT= 001000   	S.FNB = 000036   	TAB   = 000011   	.EXSTS= ****** GX	...TPC= 000012
SC.BAD= 000100   	S.FNBW= 000017   	UC.CON= 000200   	.FSRPT= ****** GX

. ABS.	000131	   000
      	000000	   001
PURE$I	001744	   002
ERRORS DETECTED:  0

VIRTUAL MEMORY USED:  8110 WORDS  ( 32 PAGES)
DYNAMIC MEMORY:  9108 WORDS  ( 35 PAGES)
ELAPSED TIME:  00:00:35
OBJ$:DMDMPR,LIS$:DMDMPR/-SP=SRC$:PIPMAC,DMPDEF,DMDMPR
