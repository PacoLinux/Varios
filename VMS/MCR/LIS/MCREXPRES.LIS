MCREXPRES       - EXPRESSION ANALYSIS                            22-AUG-1978 01:37:32   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (1)     134  EXPRESSION ANALYSIS
   (1)     381  FETCH NEXT OPERAND FROM TRIAD STACK
   (1)     391  CONVERT OPERAND PARAMETERS TO NUMERIC VALUE
   (1)     438  DISPATCH OPERATOR FUNCTION
MCREXPRES       - EXPRESSION ANALYSIS                            22-AUG-1978 01:37:32   VAX-11 MACRO X0.3-11               Page   1
01                                                                                                                               (1)

                                     0000     1 	.TITLE	MCREXPRES - EXPRESSION ANALYSIS
                                     0000     2 	.IDENT	/01/
                                     0000     3  
                                     0000     4 ;
                                     0000     5 ; COPYRIGHT (C) 1977, 1978
                                     0000     6 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
                                     0000     7 ;
                                     0000     8 ; THIS SOFTWARE IS FURNISHED UNDER  A LICENSE FOR USE ONLY  ON  A
                                     0000     9 ; SINGLE COMPUTER SYSTEM AND MAY BE  COPIED ONLY WITH  THE INCLU-
                                     0000    10 ; SION OF  THE  ABOVE  COPYRIGHT NOTICE.  THIS SOFTWARE,  OR  ANY
                                     0000    11 ; OTHER COPIES THEREOF, MAY NOT BE  PROVIDED  OR  OTHERWISE  MADE
                                     0000    12 ; AVAILABLE TO ANY OTHER PERSON EXCEPT  FOR  USE  ON  SUCH SYSTEM
                                     0000    13 ; AND TO  ONE WHO AGREES  TO  THESE LICENSE  TERMS.  TITLE TO AND
                                     0000    14 ; OWNERSHIP OF THE SOFTWARE SHALL AT ALL TIMES REMAIN IN DEC.
                                     0000    15 ;
                                     0000    16 ; THE INFORMATION IN THIS SOFTWARE  IS  SUBJECT TO CHANGE WITHOUT
                                     0000    17 ; NOTICE AND SHOULD NOT BE CONSTRUED  AS  A COMMITMENT BY DIGITAL
                                     0000    18 ; EQUIPMENT CORPORATION.
                                     0000    19 ;
                                     0000    20 ; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF ITS
                                     0000    21 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
                                     0000    22 ;
                                     0000    23 ; W. H. BROWN 7-DEC-1977
                                     0000    24 ;
                                     0000    25 ; EXPRESSION ANALYSIS
                                     0000    26 ;
                                     0000    27 ; MACRO LIBRARY CALLS
                                     0000    28 ;
                                     0000    29  
                                     0000    30 	DEFCMDWRK			;DEFINE WORK AREA OFFSETS
                                     0000    31 	DEFERRCOD			;DEFINE ERROR/STATUS CODES
                                     0000    32 	DEFSYMTBL			;DEFINE SYMBOL TABLE VALUES
                                     0000    33  
                                     0000    34 ;
                                     0000    35 ; LOCAL MACROS
                                     0000    36 ;
                                     0000    37 ; GENERATE OPERATOR/OPERAND TABLE AND SYMBOL NAMES
                                     0000    38 ;
                                     0000    39  
                                     0000    40 	.MACRO	GENOP NAME,INDEX,TYPE,PREC,CHAR,?L1,?L2,?L3,?L4
                                     0000    41 OPI_K_'NAME=INDEX
                                     0000    42 	.IF IDN	<TYPE>,<OPERATOR>
                                     0000    43 OPP_K_'NAME=PREC
                                     0000    44 	.IF DIF	<NAME>,<SOS>
                                     0000    45 	.IF DIF	<NAME>,<EOS>
                                     0000    46 	.IF DIF	<NAME>,<STORE>
                                     0000    47 L1:	.BYTE	L4-L1
                                     0000    48 	.BYTE	L3-L2
                                     0000    49 	.IF NB	<CHAR>
                                     0000    50 L2:	.ASCII	\CHAR\
                                     0000    51 	.IFF
                                     0000    52 L2:	.ASCII	/NAME/
                                     0000    53 	.ENDC
                                     0000    54 L3:	.BYTE	OPP_K_'NAME
                                     0000    55 L4:	.BYTE	OPI_K_'NAME
                                     0000    56 	.ENDC
                                     0000    57 	.ENDC
MCREXPRES       - EXPRESSION ANALYSIS                            22-AUG-1978 01:37:32   VAX-11 MACRO X0.3-11               Page   2
01                                                                                                                               (1)

                                     0000    58 	.ENDC
                                     0000    59 	.ENDC
                                     0000    60 	.ENDM	GENOP
                                     0000    61  
                                     0000    62 ;
                                     0000    63 ; LOCAL SYMBOLS
                                     0000    64 ;
                                     0000    65 ; DEFINE STACK ITEM OFFSETS
                                     0000    66 ;
                                     0000    67  
                                     0000    68 	$DEFINI	STK
                                     0000    69  
                                     0000    70 $DEF	STK_W_TYPE	.BLKW	1	;STACK ITEM TYPE
                                     0002    71 $DEF	STK_W_PREC			;OPERATOR PRECEDENCE
                                     0002    72 $DEF	STK_W_SIZE	.BLKW	1	;SIZE OF OPERAND VALUE IN BYTES
                                     0004    73 $DEF	STK_L_ADDR	.BLKL	1	;ADDRESS OF OPERAND VALUE
                                     0008    74 $DEF	STK_K_LENGTH			;LENGTH OF STACK ITEM
                                     0008    75  
                                     0008    76 	$DEFEND	STK
                                     0000    77  
                                     0000    78 ;
                                     0000    79 ; LOCAL DATA
                                     0000    80 ;
                                     0000    81 ; OPERATOR TABLE
                                     0000    82 ;
                                     0000    83  
                                 00000000    84 	.PSECT	MCR$ZCODE,BYTE,RD,NOWRT
                                     0000    85 OPTAB:	GENOP	SOS,28,OPERATOR,0	;START OF STATEMENT
                                     0000    86 	GENOP	EOS,30,OPERATOR,1	;END OF STATEMENT
                                     0000    87 	GENOP	LPAREN,32,OPERATOR,2,<(> ;LEFT PARENTHESIS
                                     0005    88 	GENOP	RPAREN,34,OPERATOR,3,<)> ;RIGHT PARENTHESIS
                                     000A    89 	GENOP	STORE,36,OPERATOR,0	;STORE RESULT
                                     000A    90 	GENOP	AND,0,OPERATOR,5,<&>	;BOOLEAN AND
                                     000F    91 	GENOP	NOT,2,OPERATOR,6	;BOOLEAN NOT
                                     0016    92 	GENOP	OR,4,OPERATOR,4,<!>	;BOOLEAN OR
                                     001B    93 	GENOP	ADD,6,OPERATOR,8,<+>	;INTEGER ADD
                                     0020    94 	GENOP	SUB,8,OPERATOR,8,<->	;INTEGER SUBTRACT
                                     0025    95 	GENOP	MUL,10,OPERATOR,8,<*>	;INTEGER MULTIPLY
                                     002A    96 	GENOP	DIV,12,OPERATOR,8,</>	;INTEGER DIVIDE
                                     002F    97 	GENOP	NEG,14,SPECIAL		;INTEGER NEGATE
                                     002F    98 	GENOP	SYMBOL,50,OPERAND	;SYMBOL TABLE OPERAND
                                     002F    99 	GENOP	STRING,50,OPERAND	;STRING SYMBOL OPERAND
                                     002F   100 	GENOP	OCTNUM,52,OPERAND	;OCTAL NUMBER SYMBOL OPERAND
                                     002F   101 	GENOP	DECNUM,54,OPERAND	;DECIMAL NUMBER SYMBOL OPERAND
                                     002F   102 	GENOP	HEXNUM,56,OPERAND	;HEX NUMBER SYMBOL OPERAND
                                     002F   103 	GENOP	LITERAL,58,OPERAND	;LITERAL OPERAND
                                     002F   104 	GENOP	STACK,60,OPERAND	;STACK OPERAND
                                 00  002F   105 	.BYTE	0			;TABLE TERMINATOR BYTE
                                     0030   106  
                                     0030   107 ;
                                     0030   108 ; 'TRUE' AND 'FALSE'  VALUES
                                     0030   109 ;
                                     0030   110  
                        45 55 52 54  0030   111 TRUE:	.ASCII	\TRUE\			;
                     45 53 4C 41 46  0034   112 FALSE:	.ASCII	\FALSE\			;
                        59 4E 54 46  0039   113 TRUFLS:	.ASCII	/FTNY/			; NOTE-ORDER IS ASSUMMED ELSEWHERE
                                     003D   114  
MCREXPRES       - EXPRESSION ANALYSIS                            22-AUG-1978 01:37:32   VAX-11 MACRO X0.3-11               Page   3
01                                                                                                                               (1)

                                     003D   115 ;
                                     003D   116 ; SYMTYP - THIS TABLE IS USED TO CONVERT A SYMBOL TABLE ENTRY TYPE
                                     003D   117 ;	   TO IS PROPER OPERAND TYPE. NOTE THAT IS TABLE IS ORDER
                                     003D   118 ;	   BY SYMBOL TYPE, IE: SYM_K_XXX.
                                     003D   119 ;
                                     003D   120  
                                     003D   121 	ASSUME	SYM_K_STRING  EQ 0	; CHECK FOR ASSUMED SYMBOL TYPE
                                     003D   122 	ASSUME	SYM_K_PERM    EQ 1	; CHECK FOR ASSUMED SYMBOL TYPE
                                     003D   123 	ASSUME	SYM_K_LOGICAL EQ 2	; CHECK FOR ASSUMED SYMBOL TYPE
                                     003D   124 	ASSUME	SYM_K_OCTAL   EQ 3	; CHECK FOR ASSUMED SYMBOL TYPE
                                     003D   125 	ASSUME	SYM_K_DECIMAL EQ 4	; CHECK FOR ASSUMED SYMBOL TYPE
                                     003D   126 	ASSUME	SYM_K_HEXDEC  EQ 5	; CHECK FOR ASSUMED SYMBOL TYPE
                                 32  003D   127 SYMTYP:	.BYTE	OPI_K_STRING		; SYMBOL TYPE 0 = STRING
                                 36  003E   128 	.BYTE	OPI_K_DECNUM		; SYMBOL TYPE 1 = DECIMAL NUMBER (PERMANENT)
                                 34  003F   129 	.BYTE	OPI_K_OCTNUM		; SYMBOL TYPE 2 = LOGICAL
                                 34  0040   130 	.BYTE	OPI_K_OCTNUM		; SYMBOL TYPE 3 = OCTAL NUMBER
                                 36  0041   131 	.BYTE	OPI_K_DECNUM		; SYMBOL TYPE 4 = DECIMAL NUMBER
                                 38  0042   132 	.BYTE	OPI_K_HEXNUM		; SYMBOL TYPE 5 = HEX NUMBER
MCREXPRES       - EXPRESSION ANALYSIS                            22-AUG-1978 01:37:32   VAX-11 MACRO X0.3-11               Page   4
01              EXPRESSION ANALYSIS                                                                                              (1)

                                     0043   134 	.SBTTL	EXPRESSION ANALYSIS
                                     0043   135 ;+
                                     0043   136 ; MCR$EXPRESS - EXPRESSION ANALYSIS
                                     0043   137 ;
                                     0043   138 ; THIS ROUTINE IS CALLED TO ANALYZE AN EXPRESSION AND RETURN AN ARITHMETIC RESULT.
                                     0043   139 ;
                                     0043   140 ; INPUTS:
                                     0043   141 ;
                                     0043   142 ;	R6 = COMMAND BUFFER DISPLAY PARAMETER.
                                     0043   143 ;	R9 = ADDRESS OF NEXT BYTE IN COMMAND BUFFER.
                                     0043   144 ;	R11 = BASE ADDRESS OF PROCESS WORK AREA.
                                     0043   145 ;	FP = BASE ADDRESS OF COMMAND WORK AREA.
                                     0043   146 ;
                                     0043   147 ; OUTPUTS:
                                     0043   148 ;
                                     0043   149 ;	R0 LOW BIT CLEAR IF EXPRESSION ERROR.
                                     0043   150 ;
                                     0043   151 ;		R0 = MCR$_COMPLX - EXPRESSION TOO COMPLEX.
                                     0043   152 ;		R0 = MCR$_EXPSYN - EXPRESSION SYNTAX ERROR.
                                     0043   153 ;		R0 = MCR$_IVCHAR - INVALID CHARACTER IN NUMERIC STRING.
                                     0043   154 ;		R0 = MCR$_IVOPER - INVALID EXPRESSION OPERATOR.
                                     0043   155 ;		R0 = MCR$_UNDSYM - UNDEFINED SYMBOL.
                                     0043   156 ;
                                     0043   157 ;			R6 = COMMAND BUFFER POINTER BACKUP PARAMETER.
                                     0043   158 ;
                                     0043   159 ;	R0 LOW BIT SET INDICATES SUCCESSFUL EVALUATION.
                                     0043   160 ;
                                     0043   161 ;		R0 = MCR$_NORMAL - NORMAL COMPLETION.
                                     0043   162 ;
                                     0043   163 ;			R1 = FINAL EXPRESSION VALUE.
                                     0043   164 ;-
                                     0043   165  
                                     0043   166 MCR$EXPRESS::				;ANALYZE EXPRESSION
            51            02     90  0043   167 	MOVB	#PRC_K_OCT,R1		;SET TO DEFAULT OCTAL RADIX
                                     0046   168 MCR$EXPRADIX::				;ALTERNATE ENTRY-RADIX SET EXTERNAL
                     01B8 8F     BB  0046   169 	PUSHR	#^M<R3,R4,R5,R7,R8>	;SAVE SOME REGISTERS
       0092 CB            51     90  004A   170 	MOVB	R1,PRC_B_DEFRADIX(R11)	;SET THE RADIX FOR LATER
            5A       FBC0 CD     DE  004F   171 	MOVAL	WRK_AG_RESULT(FP),R10	;RESET PARSE STACK
                                     0054   172 	SETBIT	WRK_V_STAR,WRK_W_FLAGS(FP) ;SET ASTERISK TERMINATOR FLAG
            5C            5E     D0  0059   173 	MOVL	SP,AP			;SAVE INITIAL STACK ADDRESS
            58            5E     D0  005C   174 	MOVL	SP,R8			;SET ADDRESS OF PARSE STACK
            5E       FF7C CE     9E  005F   175 	MOVAB	-MSGBUFSIZ(SP),SP	;ALLOCATE SPACE FOR PARSE STACK
            78            1C     D0  0064   176 	MOVL	#<OPP_K_SOS>@16+OPI_K_SOS,-(R8) ;INITIALIZE PARSE STACK
            78            68     7D  0067   177 	MOVQ	(R8),-(R8)		;DUPLICATE FIRST ITEM FOR ERROR CHECK
                                     006A   178  
                                     006A   179 ;
                                     006A   180 ; PARSE NEXT ITEM
                                     006A   181 ;
                                     006A   182  
                                     006A   183 10$:	GETSSYM				;GET NEXT SYMBOL FORM INPUT BUFFER
            75            50     E9  006D   184 	BLBC	R0,200$			;BR IF NO SYMBOL
            32            68     B1  0070   185 	CMPW	STK_W_TYPE(R8),#OPI_K_SYMBOL ;TOS A SYMBOL
                          35     19  0073   186 	BLSS	80$			;IF LSS NO, GO PARSE A SYMBOL
                                     0075   187  
                                     0075   188 ;
                                     0075   189 ; PROCESS OPERATOR
                                     0075   190 ;
MCREXPRES       - EXPRESSION ANALYSIS                            22-AUG-1978 01:37:32   VAX-11 MACRO X0.3-11               Page   5
01              EXPRESSION ANALYSIS                                                                                              (1)

                                     0075   191  
            50         88 AF     9E  0075   192 30$:	MOVAB	OPTAB,R0		;GET ADDRESS OF OPERATOR TABLE
            55            50     D0  0079   193 40$:	MOVL	R0,R5			;RETRIEVE ADDRESS OF NEXT OPERATOR ENTRY
            50            85     9A  007C   194 	MOVZBL	(R5)+,R0		;GET OFFSET TO NEXT OPERATOR ENTRY
                          78     13  007F   195 	BEQL	220$			;BR IF END OF TABLE
            50            55     C0  0081   196 	ADDL	R5,R0			;CALCULATE ADDRESS OF NEXT ENTRY
            85            51     91  0084   197 	CMPB	R1,(R5)+		;LENGTH OF NAMES MATCH?
                          F0     12  0087   198 	BNEQ	40$			;IF NEQ NO
            53            51     7D  0089   199 	MOVQ	R1,R3			;COPY OPERATOR DESCRIPTOR
            85            84     91  008C   200 50$:	CMPB	(R4)+,(R5)+		;CHARACTERS MATCH?
                          E8     12  008F   201 	BNEQ	40$			;IF NEQ NO
            F8            53     F5  0091   202 	SOBGTR	R3,50$			;ANY MORE CHARACTERS TO MATCH?
            51            85     9A  0094   203 	MOVZBL	(R5)+,R1		;GET OPERATOR PRECEDENCE VALUE
            53            65     9A  0097   204 	MOVZBL	(R5),R3			;GET OPERATOR INDEX VALUE
            53            20     D1  009A   205 	CMPL	#OPI_K_LPAREN,R3	;LEFT PARENTHESIS?
                          70     12  009D   206 	BNEQ	240$			;IF NEQ NO
            68            32     B1  009F   207 	CMPW	#OPI_K_SYMBOL,STK_W_TYPE(R8) ;TOP OF STACK OPERAND?
                          03     14  00A2   208 	BGTR	60$			;IF GTR NO
                          00EA   31  00A4   209 	BRW	370$			;
                          0086   31  00A7   210 60$:	BRW	270$			;
                                     00AA   211  
                                     00AA   212 ;
                                     00AA   213 ; PROCESS OPERAND OR SINGLE CHARACTER OPERATOR
                                     00AA   214 ;
                                     00AA   215  
            53            3A     9A  00AA   216 80$:	MOVZBL	#OPI_K_LITERAL,R3	;ASSUME LITERAL VALUE
            62            23     91  00AD   217 	CMPB	#^A/#/,(R2)		;OCTAL NUMBER
                          2E     13  00B0   218 	BEQL	140$			;BR IF YES
            62            25     91  00B2   219 	CMPB	#^A/%/,(R2)		;NUMERIC RADIX OPERATOR?
                          29     13  00B5   220 	BEQL	140$			;BR IF YES-ITS A NUMBER
            30            62     91  00B7   221 	CMPB	(R2),#^A/0/		;CAN THIS BE A NUMERIC CONSTANT?
                          14     1F  00BA   222 	BLSSU	100$			;BR IF NO
            39            62     91  00BC   223 	CMPB	(R2),#^A/9/		;NUMERIC CONSTANT?
                          0F     1A  00BF   224 	BGTRU	100$			;IF GTRU NO
                                     00C1   225 	SETCHAR				;PEEK AT NEXT CHARACTER
            2E            50     91  00C4   226 	CMPB	R0,#^A/./		;INDICATE A DECIMAL NUMBER?
                          17     12  00C7   227 	BNEQ	140$			;BR IF NO
                                     00C9   228 	MOVCHAR				;COPY CHARATER TO COMMAND BUFFER
                          51     D6  00CC   229 	INCL	R1			;ADJ SYMBOL LENGTH
                          10     11  00CE   230 	BRB	140$			;
                                     00D0   231 100$:	SEARCH				;SEARCH OPERAND TABLE FOR A MATCH
            0C            50     E9  00D3   232 	BLBC	R0,150$			;IF LBC SEARCH FAILURE
            53         0A A3     9A  00D6   233 	MOVZBL	SYM_B_TYPE(R3),R3	;GET SYMBOL TYPE
            53       FF5E CF43   9A  00DA   234 	MOVZBL	SYMTYP[R3],R3		;COVNERT TO OPERAND TYPE
                          4E     11  00E0   235 140$:	BRB	270$			;
                          00AF   31  00E2   236 150$:	BRW	380$			;
                                     00E5   237  
                                     00E5   238 ;
                                     00E5   239 ; ZERO LENGTH TOKEN - MUST BE OPERATOR SYMBOL
                                     00E5   240 ;
                                     00E5   241  
         40 8F            50     91  00E5   242 200$:	CMPB	R0,#^A/@/		;TERMINATE ON INDIRECT FILE
                          1E     13  00E9   243 	BEQL	230$			;IF YES -END OF EXPRESSION BY DEFAULT
            52            59     D0  00EB   244 	MOVL	R9,R2			;SET ADDRESS OF START OF SYMBOL
                                     00EE   245 	MOVCHAR				;MOVE TERMINATOR TO COMMAND BUFFER
                          16     13  00F1   246 	BEQL	230$			;IF EQL END OF LINE
            51            01     D0  00F3   247 	MOVL	#1,R1			;SET LENGTH OF STRING
MCREXPRES       - EXPRESSION ANALYSIS                            22-AUG-1978 01:37:32   VAX-11 MACRO X0.3-11               Page   6
01              EXPRESSION ANALYSIS                                                                                              (1)

                          FF7C   31  00F6   248 	BRW	30$			;
                                     00F9   249  
                                     00F9   250 ;
                                     00F9   251 ; END OF STATEMENT
                                     00F9   252 ;
                                     00F9   253  
            59            51     C2  00F9   254 220$:	SUBL	R1,R9			;BACK TOKEN OUT OF PARSE BUFFER
         FC AD            51     C3  00FC   255 	SUBL3	R1,WRK_L_CHARPTR(FP),R0	;BACK UP INPUT BUFFER
                          50         0100       
         FC AD            80     9E  0101   256 	MOVAB	(R0)+,WRK_L_CHARPTR(FP)	;SET TO POINT AT PRVIOUS CHARACTER
            62            51     28  0105   257 	MOVC	R1,(R2),(R0)		;REPLACE TOKEN IN INPUT BUFFER
                          60         0108       
            51            01     9A  0109   258 230$:	MOVZBL	#OPP_K_EOS,R1		;SET END OF STATEMENT PRECEDENCE VALUE
            53            1E     9A  010C   259 	MOVZBL	#OPI_K_EOS,R3		;SET END OF STATEMENT OPERATOR INDEX
                                     010F   260  
                                     010F   261 ;
                                     010F   262 ; COMPARE OPERATOR PRECEDENCE VALUE WITH OPERATOR IN NEXT TO LAST ITEM ON STACK
                                     010F   263 ;
                                     010F   264  
         08 A8            32     B1  010F   265 240$:	CMPW	#OPI_K_SYMBOL,STK_W_TYPE+STK_K_LENGTH(R8) ;PREVIOUS ITEM OPERATOR?
                          06     15  0113   266 	BLEQ	250$			;IF LEQ NO
            51         0A A8     B1  0115   267 	CMPW	STK_W_PREC+STK_K_LENGTH(R8),R1 ;STACK OPERATOR HIGHER PRECEDENCE?
                          26     18  0119   268 	BGEQ	300$			;IF GEQ YES
            53            22     D1  011B   269 250$:	CMPL	#OPI_K_RPAREN,R3	;CURRENT OPERATOR RIGHT PARENTHESIS?
                          0B     12  011E   270 	BNEQ	260$			;IF NEQ NO
         08 A8            20     B1  0120   271 	CMPW	#OPI_K_LPAREN,STK_W_TYPE+STK_K_LENGTH(R8) ;OPERATOR LEFT PAREN?
                          6B     12  0124   272 	BNEQ	370$			;IF NEQ NO
            68            88     7D  0126   273 	MOVQ	(R8)+,(R8)		;REMOVE LEFT PARENTHESIS FROM STACK
                          13     11  0129   274 	BRB	280$			;
            53            1E     D1  012B   275 260$:	CMPL	#OPI_K_EOS,R3		;END OF STATEMENT OPERATOR?
                          6A     13  012E   276 	BEQL	390$			;IF EQL YES
            78            52     D0  0130   277 270$:	MOVL	R2,-(R8)		;STACK NEW ITEM
            78            51     B0  0133   278 	MOVW	R1,-(R8)		;
            78            53     B0  0136   279 	MOVW	R3,-(R8)		;
            5E            58     D1  0139   280 	CMPL	R8,SP			;PARSE STACK OVERFLOW?
                          4E     1B  013C   281 	BLEQU	360$			;IF LEQU YES
                          FF29   31  013E   282 280$:	BRW	10$			;
                                     0141   283  
                                     0141   284 ;
                                     0141   285 ; UNSTACK TRIAD FROM PARSE STACK
                                     0141   286 ;
                                     0141   287  
                          0A     BB  0141   288 300$:	PUSHR	#^M<R1,R3>		;SAVE OPERATOR PARAMETERS
            68            32     B1  0143   289 	CMPW	#OPI_K_SYMBOL,STK_W_TYPE(R8) ;TOP ITEM ON STACK OPERAND?
                          49     14  0146   290 	BGTR	370$			;IF GTR NO
            54            88     7D  0148   291 	MOVQ	(R8)+,R4		;REMOVE RIGHT HAND OPERAND FROM STACK
            52            88     7D  014B   292 	MOVQ	(R8)+,R2		;REMOVE OPERATOR FROM STACK
            52            02     B1  014E   293 	CMPW	#OPI_K_NOT,R2		;BOOLEAN NOT?
                          1C     13  0151   294 	BEQL	340$			;IF EQL YES
            68            32     B1  0153   295 	CMPW	#OPI_K_SYMBOL,STK_W_TYPE(R8) ;TOP ITEM ON STACK OPERAND?
                          14     15  0156   296 	BLEQ	330$			;IF LEQ YES
            52            06     B1  0158   297 	CMPW	#OPI_K_ADD,R2		;OPERATOR UNARY PLUS?
                          05     12  015B   298 	BNEQ	320$			;IF NEQ NO
            78            54     7D  015D   299 	MOVQ	R4,-(R8)		;RESTACK RIGHT HAND OPERAND
                          26     11  0160   300 	BRB	350$			;
            52            08     B1  0162   301 320$:	CMPW	#OPI_K_SUB,R2		;OPERATOR UNARY MINUS?
                          2A     12  0165   302 	BNEQ	370$			;IF NEQ NO
MCREXPRES       - EXPRESSION ANALYSIS                            22-AUG-1978 01:37:32   VAX-11 MACRO X0.3-11               Page   7
01              EXPRESSION ANALYSIS                                                                                              (1)

            52            0E     9A  0167   303 	MOVZBL	#OPI_K_NEG,R2		;SET INTEGER NEGATION OPERATOR
                          03     11  016A   304 	BRB	340$			;
            50            88     7D  016C   305 330$:	MOVQ	(R8)+,R0		;REMOVE LEFT HAND OPERAND FROM STACK
            78            6A     9E  016F   306 340$:	MOVAB	(R10),-(R8)		;PUSH ADDRESS OF STACK OPERAND
            78            3C     9A  0172   307 	MOVZBL	#OPI_K_STACK,-(R8)	;PUSH OPERAND INDEX VALUE
            7E       FD2C CD     9E  0175   308 	MOVAB	WRK_L_RSLNXT-20(FP),-(SP) ;GET NEW TOP OF TRIAD STACK ADDRESS
            8E            5A     D1  017A   309 	CMPL	R10,(SP)+		;TRIAD STACK OVERFLOW?
                          0D     1A  017D   310 	BGTRU	360$			;IF GTRU YES
            8A            54     7D  017F   311 	MOVQ	R4,(R10)+		;PUSH RIGHT HAND OPERAND
            8A            52     3C  0182   312 	MOVZWL	R2,(R10)+		;PUSH OPERATOR INDEX
            8A            50     7D  0185   313 	MOVQ	R0,(R10)+		;PUSH LEFT HAND OPERAND
                          0A     BA  0188   314 350$:	POPR	#^M<R1,R3>		;RETRIEVE OPERATOR PARAMETERS
                          83     11  018A   315 	BRB	240$			;
                                     018C   316  
                                     018C   317 ;
                                     018C   318 ; EXPRESION TOO COMPLEX
                                     018C   319 ;
                                     018C   320  
                                     018C   321 360$:	STATUS	COMPLX			;SET COMPLEX EXPRESSION STATUS
                          03     11  018F   322 	BRB	380$			;
                                     0191   323  
                                     0191   324 ;
                                     0191   325 ; EXPRESSION SYNTAX ERROR
                                     0191   326 ;
                                     0191   327  
                                     0191   328 370$:	STATUS	EXPSYN			;SET EXPRESSION SYNTAX ERROR STATUS
            5E            5C     D0  0194   329 380$:	MOVL	AP,SP			;CLEAN STACK
                          0054   31  0197   330 	BRW	EXPEXT			;
                                     019A   331  
                                     019A   332 ;
                                     019A   333 ; END OF STATEMENT - CHECK FOR VALID PARSE
                                     019A   334 ;
                                     019A   335  
            68            32     B1  019A   336 390$:	CMPW	#OPI_K_SYMBOL,STK_W_TYPE(R8) ;TOP ITEM ON STACK OPERAND?
                          F2     14  019D   337 	BGTR	370$			;IF GTR NO
            7E       FD34 CD     9E  019F   338 	MOVAB	WRK_L_RSLNXT-12(FP),-(SP) ;GET NEW TOP OF TRIAD STACK ADDRESS
            8E            5A     D1  01A4   339 	CMPL	R10,(SP)+		;TRIAD STACK OVERFLOW?
                          E3     1A  01A7   340 	BGTRU	360$			;IF GTRU YES
            8A            88     7D  01A9   341 	MOVQ	(R8)+,(R10)+		;MOVE RIGHT HAND OPERAND TO TRIAD STACK
            68            1C     B1  01AC   342 	CMPW	#OPI_K_SOS,STK_W_TYPE(R8) ;TOP OF STACK START OF STATEMENT?
                          E0     12  01AF   343 	BNEQ	370$			;IF NEQ NO
            6A            24     9A  01B1   344 	MOVZBL	#OPI_K_STORE,(R10)	;INSERT STORE OPERATOR
            5E            5C     D0  01B4   345 	MOVL	AP,SP			;CLEAN STACK
                                     01B7   346  
                                     01B7   347 ;
                                     01B7   348 ; EVALUATE IF EXPRESSION
                                     01B7   349 ;
                                     01B7   350  
                                     01B7   351 EVALUATE:				;EVALUATE IF EXPRESSION
            5A       FBC0 CD     9E  01B7   352 	MOVAB	WRK_AG_RESULT(FP),R10	;GET STARTING ADDRESS OF TRIAD STACK
            5C            5A     D0  01BC   353 10$:	MOVL	R10,AP			;SAVE ADDRESS TO STORE TRIAD RESULT
                          56     D4  01BF   354 	CLRL	R6			;ASSUME OPERATION RESULT IS FALSE
                          35     10  01C1   355 	BSBB	FETCH			;FETCH RIGHT HAND OPERAND PARAMETERS
            55            8A     D0  01C3   356 	MOVL	(R10)+,R5		;FETCH OPERATOR INDEX
                          3A     10  01C6   357 	BSBB	NUMERIC			;CONVERT RIGHT HAND OPERAND TO NUMERIC
            57            51     D0  01C8   358 	MOVL	R1,R7			;SAVE RIGHT HAND OPERAND VALUE
            55            24     D1  01CB   359 	CMPL	#OPI_K_STORE,R5		;STORE OPERATOR?
MCREXPRES       - EXPRESSION ANALYSIS                            22-AUG-1978 01:37:32   VAX-11 MACRO X0.3-11               Page   8
01              EXPRESSION ANALYSIS                                                                                              (1)

                          1B     13  01CE   360 	BEQL	40$			;IF EQL YES
                          26     10  01D0   361 	BSBB	FETCH			;FETCH LEFT HAND OPERAND PARAMETERS
            55            02     D1  01D2   362 	CMPL	#OPI_K_NOT,R5		;BOOLEAN NOT OPERATOR?
                          0A     13  01D5   363 	BEQL	30$			;IF EQL YES
            55            0E     D1  01D7   364 	CMPL	#OPI_K_NEG,R5		;INTEGER NEGATION?
                          05     13  01DA   365 	BEQL	30$			;IF EQL YES
                          24     10  01DC   366 	BSBB	NUMERIC			;CONVERT LEFT HAND OPERAND TO NUMERIC
            57            51     D1  01DE   367 	CMPL	R1,R7			;COMPARE RIGHT AND LEFT HAND OPERANDS
                     025E'CF45   16  01E1   368 30$:	JSB	W^DISPATCH[R5]		;EXECUTE OPERATOR SPECIFIC ROUTINE
            6C            56     D0  01E6   369 	MOVL	R6,(AP)			;STORE OPERATION RESULT
                          D1     11  01E9   370 	BRB	10$			;
                                     01EB   371  
                                     01EB   372 ;
                                     01EB   373 ; STORE RESULT OPERATOR
                                     01EB   374 ;
                                     01EB   375  
                                     01EB   376 40$:	STATUS	NORMAL			;SET NORMAL COMPLETION STATUS
                                     01EE   377 EXPEXT:	CLRBIT	WRK_V_STAR,WRK_W_FLAGS(FP) ;SET NORMAL TERMINATION MODE
                     01B8 8F     BA  01F3   378 	POPR	#^M<R3,R4,R5,R7,R8>	; RESTORE REGISTERS
                                 05  01F7   379 	RSB				;
MCREXPRES       - EXPRESSION ANALYSIS                            22-AUG-1978 01:37:32   VAX-11 MACRO X0.3-11               Page   9
01              FETCH NEXT OPERAND FROM TRIAD STACK                                                                              (1)

                                     01F8   381 	.SBTTL	FETCH NEXT OPERAND FROM TRIAD STACK
                                     01F8   382 ;
                                     01F8   383 ; FETCH - FETCH NEXT OPERAND FROM TRIAD STACK
                                     01F8   384 ;
                                     01F8   385  
            50            8A     3C  01F8   386 FETCH:	MOVZWL	(R10)+,R0		;GET TYPE OF OPERAND
            51            8A     3C  01FB   387 	MOVZWL	(R10)+,R1		;GET LENGTH OF OPERAND
            52            8A     D0  01FE   388 	MOVL	(R10)+,R2		;GET ADDRESS OF OPERAND
                                 05  0201   389 	RSB				;
MCREXPRES       - EXPRESSION ANALYSIS                            22-AUG-1978 01:37:32   VAX-11 MACRO X0.3-11               Page  10
01              CONVERT OPERAND PARAMETERS TO NUMERIC VALUE                                                                      (1)

                                     0202   391 	.SBTTL	CONVERT OPERAND PARAMETERS TO NUMERIC VALUE
                                     0202   392 ;
                                     0202   393 ; NUMERIC - CONVERT OPERAND PARAMETERS TO NUMERIC VALUE
                                     0202   394 ;
                                     0202   395  
                                     0202   396 NUMERIC:				;NUMERIC OPERAND
            50            3C     D1  0202   397 	CMPL	#OPI_K_STACK,R0		;STACK OPERAND?
                          34     13  0205   398 	BEQL	30$			;IF EQL YES
                          51     D5  0207   399 	TSTL	R1			;ZERO LENGTH STRING?
                          33     13  0209   400 	BEQL	40$			;BR IF YES - RETURN THE ZERO
            52            51     7D  020B   401 	MOVQ	R1,R2			;SET DESCRIPTOR FOR STRING
            51       0092 CB     9A  020E   402 	MOVZBL	PRC_B_DEFRADIX(R11),R1	;SET RADIX INDICATOR
            3A            50     D1  0213   403 	CMPL	R0,#OPI_K_LITERAL	;OPERAND A LITERAL?
                          0D     13  0216   404 	BEQL	20$			;BR IF YES - USE DEFAULT RADIX
                          51     D4  0218   405 	CLRL	R1			;SET RADIX TO HEX
            36            50     D1  021A   406 	CMPL	R0,#OPI_K_DECNUM	;CHECK RADIX OF SYMBOL
                          06     1A  021D   407 	BGTRU	20$			;BR IF HEX
                          02     13  021F   408 	BEQL	15$			;BR IF DECIMAL
                          51     D6  0221   409 	INCL	R1			;ADJUST RADIX INDICATOR
                          51     D6  0223   410 15$:	INCL	R1			;ETC
                          53     DD  0225   411 20$:	PUSHL	R3			;SAVE START OF SYMBOL
                          FDD6'  30  0227   412 	BSBW	MCR$CNVASCBIN		;CONVERT NUMBER
            08            52     91  022A   413 	CMPB	R2,#8			;RADIX USED THE "DEFAULT"
                          04     13  022D   414 	BEQL	25$			;IF YES, DON'T CHANGE CURRENT
         CA AD            52     90  022F   415 	MOVB	R2,WRK_B_CURADX(FP)	;SAVE RADIX USED FOR CONVERSION
                          04     BA  0233   416 25$:	POPR	#^M<R2>			;RESTORE START OF SYMBOL
                          50     D5  0235   417 	TSTL	R0			;ANY UNCONVERTED DIGITS
                          05     13  0237   418 	BEQL	40$			;BR IF NO ERROR
                          07     11  0239   419 	BRB	80$			;CHECK FOR TRUE/FALSE
            51            62     D0  023B   420 30$:	MOVL	(R2),R1			;GET STACK OPERAND
                                     023E   421 40$:	STATUS	NORMAL			;
                                 05  0241   422 	RSB				;
                                     0242   423  
                                     0242   424 ;
                                     0242   425 ; INVALID CHARACTER IN STRING-CHECK FOR BEGINNING LETTER "TFYN"
                                     0242   426 ;
                                     0242   427  
            04            62     3A  0242   428 80$:	LOCC	(R2),#4,TRUFLS		;CHECK FOR SPECIAL CHARACTERS
                     FDF1 CF         0245       
                          06     13  0248   429 	BEQL	85$			;RETURN ERROR IF NO MATCH
            50            06     CB  024A   430 	BICL3	#6,R0,R1		;CONVERT COUNT TO 0 OR 1
                          51         024D       
                          EE     11  024E   431 	BRB	40$			;
            59         01 A3     9E  0250   432 85$:	MOVAB	1(R3),R9		;SET END OF ERROR SEGMENT
            56            52     D0  0254   433 	MOVL	R2,R6			;AND START OF ERROR SEGMENT
                          8E     D5  0257   434 	TSTL	(SP)+			;CLEAN STACK OF PREVIOUS CALLER
                                     0259   435 	STATUS	IVCHAR			;INVALID CHARACTER
                          90     11  025C   436 	BRB	EXPEXT			;EXIT EXPRESSION ANALYSIS
MCREXPRES       - EXPRESSION ANALYSIS                            22-AUG-1978 01:37:32   VAX-11 MACRO X0.3-11               Page  11
01              DISPATCH OPERATOR FUNCTION                                                                                       (1)

                                     025E   438 	.SBTTL	DISPATCH OPERATOR FUNCTION
                                     025E   439 ;
                                     025E   440 ; DISPATCH OPERATOR FUNCTION
                                     025E   441 ;
                                     025E   442  
                                     025E   443 DISPATCH:				;
                          0E     11  025E   444 	BRB	AND			;BOOLEAN AND
                          14     11  0260   445 	BRB	NOT			;BOOLEAN NOT
                          16     11  0262   446 	BRB	OR			;BOOLEAN OR
                          19     11  0264   447 	BRB	ADD			;INTEGER ADD
                          1C     11  0266   448 	BRB	SUB			;INTEGER SUBTRACT
                          1F     11  0268   449 	BRB	MUL			;INTEGER MULTIPLY
                          22     11  026A   450 	BRB	DIV			;INTEGER DIVIDE
                          36     11  026C   451 	BRB	NEG			;INTEGER NEGATION
                                     026E   452  
                                     026E   453 ;
                                     026E   454 ; BOOLEAN AND
                                     026E   455 ;
                                     026E   456  
            51            51     D2  026E   457 AND:	MCOML	R1,R1			;COMPLEMENT LEFT HAND OPERAND
            57            51     CB  0271   458 	BICL3	R1,R7,R6		;FORM BOOLEAN AND FUNCTION
                          56         0274       
                                 05  0275   459 	RSB				;
                                     0276   460  
                                     0276   461 ;
                                     0276   462 ; BOOLEAN NOT
                                     0276   463 ;
                                     0276   464  
            56            57     D2  0276   465 NOT:	MCOML	R7,R6			;FORM BOOLEAN NOT FUNCTION
                                 05  0279   466 	RSB				;
                                     027A   467  
                                     027A   468 ;
                                     027A   469 ; BOOLEAN OR
                                     027A   470 ;
                                     027A   471  
            57            51     C9  027A   472 OR:	BISL3	R1,R7,R6		;FORM BOOLEAN OR FUNCTION
                          56         027D       
                                 05  027E   473 	RSB				;
                                     027F   474  
                                     027F   475 ;
                                     027F   476 ; INTEGER ADD
                                     027F   477 ;
                                     027F   478  
            57            51     C1  027F   479 ADD:	ADDL3	R1,R7,R6		;FORM ARITHMETIC SUM
                          56         0282       
                                 05  0283   480 	RSB				;
                                     0284   481  
                                     0284   482 ;
                                     0284   483 ; INTEGER SUBTRACT
                                     0284   484 ;
                                     0284   485  
            51            57     C3  0284   486 SUB:	SUBL3	R7,R1,R6		;FORM ARITHMETIC DIFFERENCE
                          56         0287       
                                 05  0288   487 	RSB				;
                                     0289   488  
                                     0289   489 ;
                                     0289   490 ; INTEGER MULTIPLY
MCREXPRES       - EXPRESSION ANALYSIS                            22-AUG-1978 01:37:32   VAX-11 MACRO X0.3-11               Page  12
01              DISPATCH OPERATOR FUNCTION                                                                                       (1)

                                     0289   491 ;
                                     0289   492  
            57            51     C5  0289   493 MUL:	MULL3	R1,R7,R6		;FORM ARITHMETIC PRODUCT
                          56         028C       
                                 05  028D   494 	RSB				;
                                     028E   495  
                                     028E   496 ;
                                     028E   497 ; INTEGER DIVIDE
                                     028E   498 ;
                                     028E   499  
            56            57     D0  028E   500 DIV:	MOVL	R7,R6			;DIVIDE BY ZERO ATTEMPT?
                          0C     12  0291   501 	BNEQ	20$			;BR IF NO
                                     0293   502 	SETBIT	#31,R6			;MAKE RESULT THE HIGHEST NEG NUMBER
                          51     D5  0297   503 	TSTL	R1			;SOURCE NEGATIVE?
                          03     19  0299   504 	BLSS	10$			;BR IF YES
            56            56     D2  029B   505 	MCOML	R6,R6			;MAKE THE LARGEST POSITIVE NUMBER
                                 05  029E   506 10$:	RSB				;
            51            57     C7  029F   507 20$:	DIVL3	R7,R1,R6		;FORM ARITHMETIC QUOTIENT
                          56         02A2       
                                 05  02A3   508 	RSB				;
                                     02A4   509  
                                     02A4   510 ;
                                     02A4   511 ; INTEGER NEGATION
                                     02A4   512 ;
                                     02A4   513  
            56            57     CE  02A4   514 NEG:	MNEGL	R7,R6			;NEGATE OPERAND
                                 05  02A7   515 	RSB				;
                                     02A8   516  
                                     02A8   517 	.END
MCREXPRES       - EXPRESSION ANALYSIS                            22-AUG-1978 01:37:32   VAX-11 MACRO X0.3-11               Page  13
SYMBOL TABLE                                                                                                                     (1)

ADD              0000027F R     03   CLI$_ONLEVL    = 00038100            MCR_V_LOWER    = 0000000B            
AND              0000026E R     03   CLI$_ONOVF     = 00038108            MCR_V_OPNINP   = 00000006            
BIT...         = 00000006            CLI$_OVRFLW    = 00038160            MCR_V_RAD50    = 00000000            
CLI$_ABFNAM    = 000381B8            CLI$_PARMDEL   = 00038110            MCR_V_STRSUB   = 0000000C            
CLI$_ABKEYW    = 00038000            CLI$_PROC_ID   = 0003FFF1            MSGBUFSIZ      = 00000084            
CLI$_ABVERB    = 00038008            CLI$_QUEJOBCRE = 0003FFF9            MUL              00000289 R     03   
CLI$_BADRET    = 00038198            CLI$_REQPRMABS = 00038812            NEG              000002A4 R     03   
CLI$_BADTEXT   = 000381B0            CLI$_RSLOVF    = 00038118            NOT              00000276 R     03   
CLI$_BUFOVF    = 00038018            CLI$_SKPDAT    = 00038120            NUMERIC          00000202 R     03   
CLI$_COMPLX    = 00038020            CLI$_SPARE0    = 00038010            OPI_K_ADD      = 00000006            
CLI$_CONFQUAL  = 00038802            CLI$_SPARE1    = 00038058            OPI_K_AND      = 00000000            
CLI$_CREQUEJOB = 0003884A            CLI$_STKOVF    = 00038128            OPI_K_DECNUM   = 00000036            
CLI$_DEFOVF    = 00038028            CLI$_SUBMITERR = 00038852            OPI_K_DIV      = 0000000C            
CLI$_DEVALSPL  = 0003885A            CLI$_SYMDEL    = 00038130            OPI_K_EOS      = 0000001E            
CLI$_DEVNOTFOR = 0003887A            CLI$_SYMOVF    = 00038138            OPI_K_HEXNUM   = 00000038            
CLI$_DEVNOTSPL = 00038862            CLI$_UNDFIL    = 00038188            OPI_K_LITERAL  = 0000003A            
CLI$_DIRECT    = 00038030            CLI$_UNDSYM    = 00038140            OPI_K_LPAREN   = 00000020            
CLI$_EXPSYN    = 00038038            CLI$_UNPROPARM = 00038170            OPI_K_MUL      = 0000000A            
CLI$_FILOPN    = 00038190            CLI$_UNPROQUAL = 00038168            OPI_K_NEG      = 0000000E            
CLI$_ILLVAL    = 0003883A            CLI$_USGOTO    = 00038148            OPI_K_NOT      = 00000002            
CLI$_IMCHNG    = 00038040            CLI$_VALCNVERR = 00038832            OPI_K_OCTNUM   = 00000034            
CLI$_IMGFNF    = 00038872            CLI$_VALREQ    = 00038150            OPI_K_OR       = 00000004            
CLI$_INSFPRM   = 00038048            CMDBUFSIZ      = 000001FC            OPI_K_RPAREN   = 00000022            
CLI$_INVKEY    = 00038178            DISPATCH         0000025E R     03   OPI_K_SOS      = 0000001C            
CLI$_INVQUAL   = 0003880A            DIV              0000028E R     03   OPI_K_STACK    = 0000003C            
CLI$_INVQUALNUM= 0003881A            EVALUATE         000001B7 R     03   OPI_K_STORE    = 00000024            
CLI$_INVREQTYP = 00038822            EXPEXT           000001EE R     03   OPI_K_STRING   = 00000032            
CLI$_INVRSP    = 00038180            FALSE            00000034 R     03   OPI_K_SUB      = 00000008            
CLI$_INVUIC    = 000381A8            FETCH            000001F8 R     03   OPI_K_SYMBOL   = 00000032            
CLI$_IVCHAR    = 00038050            GBL...         = 00000000            OPP_K_ADD      = 00000008            
CLI$_IVDEVTYPE = 0003886A            INPBUFSIZ      = 00000084            OPP_K_AND      = 00000005            
CLI$_IVFNAM    = 000381C0            MCR$CNVASCBIN    ********   X   03   OPP_K_DIV      = 00000008            
CLI$_IVKEYW    = 00038060            MCR$EXPRADIX     00000046 RG    03   OPP_K_EOS      = 00000001            
CLI$_IVOPER    = 00038068            MCR$EXPRESS      00000043 RG    03   OPP_K_LPAREN   = 00000002            
CLI$_IVPROT    = 00038070            MCR$GETSSYM      ********   X   03   OPP_K_MUL      = 00000008            
CLI$_IVQLOC    = 00038078            MCR$MOVCHAR      ********   X   03   OPP_K_NOT      = 00000006            
CLI$_IVSYMB    = 00038080            MCR$SEARCH       ********   X   03   OPP_K_OR       = 00000004            
CLI$_IVVALU    = 00038088            MCR$SETCHAR      ********   X   03   OPP_K_RPAREN   = 00000003            
CLI$_IVVERB    = 00038090            MCR_M_ALPHAN   = 00000002            OPP_K_SOS      = 00000000            
CLI$_MAXPARM   = 00038098            MCR_M_DEFALT   = 00000008            OPP_K_STORE    = 00000000            
CLI$_MULKEY    = 000381A0            MCR_M_DELINP   = 00000080            OPP_K_SUB      = 00000008            
CLI$_NOATFIL   = 000380A0            MCR_M_DOLLARS  = 00000100            OPTAB            00000000 R     03   
CLI$_NOCCAT    = 000380A8            MCR_M_ESCAPE   = 00000004            OR               0000027A R     03   
CLI$_NOCOMD    = 000380B0            MCR_M_ESCTRM   = 00000200            PRC_B_DEFRADIX   00000092            
CLI$_NOKEYW    = 000380B8            MCR_M_GLOBAL   = 00000400            PRC_B_EXMDEPMOD  00000091            
CLI$_NOLIST    = 000380C0            MCR_M_LOWER    = 00000800            PRC_B_EXMDEPWID  00000090            
CLI$_NOOPTPRS  = 00038842            MCR_M_OPNINP   = 00000040            PRC_K_DEC      = 00000001            
CLI$_NOQUAL    = 000380C8            MCR_M_RAD50    = 00000001            PRC_K_HEX      = 00000000            
CLI$_NORMAL    = 00030001            MCR_M_STRSUB   = 00001000            PRC_K_LENGTH     000000A0            
CLI$_NOTNEG    = 000380D8            MCR_V_ALPHAN   = 00000001            PRC_K_OCT      = 00000002            
CLI$_NOVALU    = 000380D0            MCR_V_DEFALT   = 00000003            PRC_L_CLIWRK0    0000005C            
CLI$_NOVALUE   = 0003882A            MCR_V_DELINP   = 00000007            PRC_L_CLIWRK1    00000060            
CLI$_NULFIL    = 000380E0            MCR_V_DOLLARS  = 00000008            PRC_L_CLIWRK2    00000064            
CLI$_NUMBER    = 000380E8            MCR_V_ESCAPE   = 00000002            PRC_L_CLIWRK3    00000068            
CLI$_ONCOMD    = 000380F0            MCR_V_ESCTRM   = 00000009            PRC_L_CLIWRK4    0000006C            
CLI$_ONERR     = 000380F8            MCR_V_FORCMD   = 0000000E            PRC_L_ERRRAB     00000010            
CLI$_ONEVAL    = 00038158            MCR_V_GLOBAL   = 0000000A            PRC_L_EXMDEPADR  0000008C            
MCREXPRES       - EXPRESSION ANALYSIS                            22-AUG-1978 01:37:32   VAX-11 MACRO X0.3-11               Page  14
SYMBOL TABLE                                                                                                                     (1)

PRC_L_EXTARG     00000078            PRC_W_ERRIFI     00000052            WRK_V_COMMAND  = 00000001            
PRC_L_EXTBLK     00000070            PRC_W_FLAGS      00000054            WRK_V_CONTINU  = 0000000A            
PRC_L_EXTCOD     00000080            PRC_W_INPCHAN    00000050            WRK_V_EQUAL    = 00000003            
PRC_L_EXTHND     00000074            PRC_W_ONLEVEL    00000056            WRK_V_IMCHNG   = 00000002            
PRC_L_EXTPRM     0000007C            RSLBUFSIZ      = 00000180            WRK_V_QUAL     = 00000004            
PRC_L_INDEPTH    00000048            STK_K_LENGTH     00000008            WRK_V_QUOTE    = 00000005            
PRC_L_INDFAB     0000001C            STK_L_ADDR       00000004            WRK_V_STAR     = 00000006            
PRC_L_INDINPRAB  00000014            STK_W_PREC       00000002            WRK_V_TRAILSPC = 00000009            
PRC_L_INDOUTRAB  00000018            STK_W_SIZE       00000002            WRK_V_VERB     = 00000007            
PRC_L_INPRAB     00000008            STK_W_TYPE       00000000            WRK_W_FLAGS      FFFFFFFA            
PRC_L_LSTSTATUS  00000094            SUB              00000284 R     03   WRK_W_LOCFLG     FFFFFFF8            
PRC_L_ONCTLY     0000009C            SYMTYP           0000003D R     03   _$$_           = 00000000            
PRC_L_ONERROR    00000058            SYM_B_TYPE       0000000A            
PRC_L_OUTRAB     0000000C            SYM_K_DECIMAL  = 00000004            
PRC_L_PROCUIC    00000098            SYM_K_HEXDEC   = 00000005            
PRC_L_SAVAP      00000000            SYM_K_LOGICAL  = 00000002            
PRC_L_SAVFP      00000004            SYM_K_OCTAL    = 00000003            
PRC_L_SEVERITY   00000040            SYM_K_PERM     = 00000001            
PRC_L_STACKLM    00000088            SYM_K_STRING   = 00000000            
PRC_L_STACKPT    00000084            SYM_L_BL         00000004            
PRC_L_STATUS     00000044            SYM_L_FL         00000000            
PRC_L_SYMBOL     0000004C            SYM_T_SYMBOL     0000000C            
PRC_M_CNTRLY   = 00000002            SYM_W_SIZE       00000008            
PRC_M_DBGQUAL  = 00000200            TRUE             00000030 R     03   
PRC_M_DBGTRUE  = 00000400            TRUFLS           00000039 R     03   
PRC_M_DISABL   = 00000004            WRK_AB_BUFFER    FFFFFD44            
PRC_M_EXIT     = 00000008            WRK_AG_RESULT    FFFFFBC0            
PRC_M_GOEOF    = 00000001            WRK_B_CMDFLG     FFFFFFC9            
PRC_M_GOTO     = 00000010            WRK_B_CURADX     FFFFFFCA            
PRC_M_HANGUP   = 00001000            WRK_B_PARMCNT    FFFFFFCB            
PRC_M_IND      = 00000020            WRK_B_VERBTYP    FFFFFFC8            
PRC_M_MODE     = 00000040            WRK_K_LENGTH     FFFFFBC0            
PRC_M_NOCTLY   = 00004000            WRK_L_CHARPTR    FFFFFFFC            
PRC_M_PAUSE    = 00002000            WRK_L_IMAGE      FFFFFFEC            
PRC_M_USRDET   = 00000100            WRK_L_MAXPARM    FFFFFFCC            
PRC_M_VERIFY   = 00000080            WRK_L_MINPARM    FFFFFFD0            
PRC_M_YLEVEL   = 00000800            WRK_L_PAROUT     FFFFFFF0            
PRC_Q_ALLOCREG   00000020            WRK_L_PROMPT     FFFFFFF4            
PRC_Q_GLOBAL     00000028            WRK_L_QUABLK     FFFFFFE8            
PRC_Q_LABEL      00000030            WRK_L_RSLNXT     FFFFFD40            
PRC_Q_LOCAL      00000038            WRK_L_SAVAP      FFFFFFD8            
PRC_V_CNTRLY   = 00000001            WRK_L_SAVFP      FFFFFFDC            
PRC_V_DBGQUAL  = 00000009            WRK_L_SAVSP      FFFFFFD4            
PRC_V_DBGTRUE  = 0000000A            WRK_M_ALL      = 00000001            
PRC_V_DISABL   = 00000002            WRK_M_ASK      = 00000100            
PRC_V_EXIT     = 00000003            WRK_M_COMMAND  = 00000002            
PRC_V_GOEOF    = 00000000            WRK_M_CONTINU  = 00000400            
PRC_V_GOTO     = 00000004            WRK_M_EQUAL    = 00000008            
PRC_V_HANGUP   = 0000000C            WRK_M_IMCHNG   = 00000004            
PRC_V_IND      = 00000005            WRK_M_QUAL     = 00000010            
PRC_V_MODE     = 00000006            WRK_M_QUOTE    = 00000020            
PRC_V_NOCTLY   = 0000000E            WRK_M_STAR     = 00000040            
PRC_V_PAUSE    = 0000000D            WRK_M_TRAILSPC = 00000200            
PRC_V_USRDET   = 00000008            WRK_M_VERB     = 00000080            
PRC_V_VERIFY   = 00000007            WRK_Q_IOSB       FFFFFFE0            
PRC_V_YLEVEL   = 0000000B            WRK_V_ALL      = 00000000            
PRC_W_CLIFLAG    00000052            WRK_V_ASK      = 00000008            
MCREXPRES       - EXPRESSION ANALYSIS                            22-AUG-1978 01:37:32   VAX-11 MACRO X0.3-11               Page  15
PROGRAM SECTION SYNOPSIS                                                                                                         (1)



PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            FFFFFFFC      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
MCR$ZCODE        000002A8      03     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD  NOWRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
16212. BYTES LEFT IN FREE MEMORY POOL.
24. BYTES OF RECLAIMED MEMORY.
OBJ$:MCREXPRES,LIS$:MCREXPRES/-SP=EXECML$/ML,LIB$:MCR/ML,SRC$:MCREXPRES
23 MLB DIR RDS - 438 GETS TO DEFINE 23 MACROS. 36 INTER. FILE WRITES. 
