MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (1)     112  LEXICAL FUNCTION DISPATCHER
   (1)     257  RETURN DEFAULT DIRECTORY NAME STRING
   (1)     281  EXTRACT SUBSTRING FROM STRING
   (1)     321  RETURN LENGTH OF STRING
   (1)     345  LOCATE SUBSTRING IN STRING
   (1)     385  LOGICAL NAME TRANSLATION
   (1)     426  RETURN JOB MODE
   (1)     452  RETURN PROCESS NAME
   (1)     488  RETURN CURRENT TIME AND DATE
   (1)     518  RETURN USER IDENTIFICATION CODE
   (1)     569  RETURN VERIFY MODE
   (1)     595  LOCAL SUBROUTINES
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page   1
01                                                                                                                               (1)

                                     0000     1 	.TITLE	MCRLEXCON - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT ROUTINES
                                     0000     2 	.IDENT	/01/
                                     0000     3  
                                     0000     4 ;
                                     0000     5 ; COPYRIGHT (C) 1978
                                     0000     6 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
                                     0000     7 ;
                                     0000     8 ; THIS SOFTWARE IS FURNISHED UNDER  A LICENSE FOR USE ONLY  ON  A
                                     0000     9 ; SINGLE COMPUTER SYSTEM AND MAY BE  COPIED ONLY WITH  THE INCLU-
                                     0000    10 ; SION OF  THE  ABOVE  COPYRIGHT NOTICE.  THIS SOFTWARE,  OR  ANY
                                     0000    11 ; OTHER COPIES THEREOF, MAY NOT BE  PROVIDED  OR  OTHERWISE  MADE
                                     0000    12 ; AVAILABLE TO ANY OTHER PERSON EXCEPT  FOR  USE  ON  SUCH SYSTEM
                                     0000    13 ; AND TO  ONE WHO AGREES  TO  THESE LICENSE  TERMS.  TITLE TO AND
                                     0000    14 ; OWNERSHIP OF THE SOFTWARE SHALL AT ALL TIMES REMAIN IN DEC.
                                     0000    15 ;
                                     0000    16 ; THE INFORMATION IN THIS SOFTWARE  IS  SUBJECT TO CHANGE WITHOUT
                                     0000    17 ; NOTICE AND SHOULD NOT BE CONSTRUED  AS  A COMMITMENT BY DIGITAL
                                     0000    18 ; EQUIPMENT CORPORATION.
                                     0000    19 ;
                                     0000    20 ; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF ITS
                                     0000    21 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
                                     0000    22 ;
                                     0000    23 ; D. N. CUTLER 3-FEB-78
                                     0000    24 ;
                                     0000    25 ; LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT ROUTINES
                                     0000    26 ;
                                     0000    27 ;	DEFAULT DIRECTORY
                                     0000    28 ;	EXTRACT SUBSTRING
                                     0000    29 ;	LOCATE SUBSTRING
                                     0000    30 ;	LOGICAL NAME TRANSLATION
                                     0000    31 ;	JOB MODE
                                     0000    32 ;	PROCESS NAME
                                     0000    33 ;	STRING LENGTH
                                     0000    34 ;	TIME
                                     0000    35 ;	USER IDENTIFICATION CODE
                                     0000    36 ;	VERIFY MODE
                                     0000    37 ;
                                     0000    38 ; MACRO LIBRARY CALLS
                                     0000    39 ;
                                     0000    40  
                                     0000    41 	DEFCMDWRK			;DEFINE WORK AREA OFFSETS
                                     0000    42 	DEFERRCOD			;DEFINE ERROR/STATUS VALUES
                                     0000    43 	$JPIDEF				;DEFINE JOB/PROCESS INFORMATION ID'S
                                     0000    44  
                                     0000    45 ;
                                     0000    46 ; LOCAL MACROS
                                     0000    47 ;
                                     0000    48 ; GENERATE LEXICAL FUNCTION DEFINITION TABLE
                                     0000    49 ;
                                     0000    50  
                                     0000    51 	.MACRO	GENLXF NAME,NUM
                                     0000    52 	.NCHR	$ZZ$,NAME
                                     0000    53 $XX$=128
                                     0000    54 	.IRPC	$YY$,<NAME>
                                     0000    55 	.BYTE	^A/$YY$/!$XX$
                                     0000    56 $XX$=0
                                     0000    57 	.ENDM
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page   2
01                                                                                                                               (1)

                                     0000    58 	.REPT	4-$ZZ$
                                     0000    59 	.ASCII	/ /
                                     0000    60 	.ENDM
                                     0000    61 	.BYTE	NUM
                                     0000    62 	.ENDM	GENLXF
                                     0000    63  
                                     0000    64 ;
                                     0000    65 ; LOCAL SYMBLS
                                     0000    66 ;
                                     0000    67 ; PARAMETER OFFSET DEFINITIONS
                                     0000    68 ;
                                     0000    69  
                           00000004  0000    70 P1=4					;STACK OFFSET TO PARAMETER 1
                           0000000C  0000    71 P2=12					;STACK OFFSET TO PARAMETER 2
                           00000014  0000    72 P3=20					;STACK OFFSET TO PARAMETER 3
                                     0000    73  
                                     0000    74 ;
                                     0000    75 ; LOCAL DATA
                                     0000    76 ;
                                     0000    77 ; LEXICAL FUNCTION DEFINITION TABLE
                                     0000    78 ;
                                     0000    79  
                                 00000000    80 	.PSECT	MCR$ZCODE,BYTE,RD,NOWRT
                                     0000    81 LXFUNTABLE:				;LEXICAL FUNCTION DEFINITION TABLE
                                     0000    82 	GENLXF	DIRE,0			;DEFAULT DIRECTORY
                                     0005    83 	GENLXF	EXTR,3			;EXTRACT SUBSTRING FROM STRING
                                     000A    84 	GENLXF	LENG,1			;STRING LENGTH
                                     000F    85 	GENLXF	LOCA,2			;LOCATE SUBSTRING
                                     0014    86 	GENLXF	LOGI,1			;LOGICAL NAME TRANSLATION
                                     0019    87 	GENLXF	MODE,0			;JOB MODE
                                     001E    88 	GENLXF	PROC,0			;PROCESS NAME
                                     0023    89 	GENLXF	TIME,0			;TIME OF DAY
                                     0028    90 	GENLXF	USER,0			;USER IDENTIFICATION CODE
                                     002D    91 	GENLXF	VERI,0			;VERIFY MODE
                           00000032  0032    92 LXFUNTABLEN=.-LXFUNTABLE		;LENGTH OF LEXICAL FUNCTION TABLE
                                     0032    93  
                                     0032    94 ;
                                     0032    95 ; RESULTANT RETURN STRINGS FOR STATE AND MODE RETURN VALUES
                                     0032    96 ;
                                     0032    97  
                                     0032    98 BATCH:					;BATCH MODE
                  48 43 54 41 42 00' 0032    99 	.ASCIC	/BATCH/			;
                                 05  0032       
                                 31  0038   100 TRUE:	.ASCII	\1\			;BOOLEAN VARIABLE TRUE
                                 30  0039   101 	.ASCII	\0\			;BOOLEAN VARIABLE FALSE
                                     003A   102 INTERACTIVE:				;INTERACTIVE MODE
45 56 49 54 43 41 52 45 54 4E 49 00' 003A   103 	.ASCIC	/INTERACTIVE/		;
                                 0B  003A       
                                     0046   104  
                                     0046   105 ;
                                     0046   106 ; TRUE/FALSE BOOLEAN VARIABLE STARTING CHARACTERS
                                     0046   107 ;
                                     0046   108  
                                     0046   109 TRUFLS:					;
                        59 4E 54 46  0046   110 	.ASCII	/FTNY/			;
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page   3
01              LEXICAL FUNCTION DISPATCHER                                                                                      (1)

                                     004A   112 	.SBTTL	LEXICAL FUNCTION DISPATCHER
                                     004A   113 ;+
                                     004A   114 ; MCR$LEXIF - LEXICAL FUNCTION DISPATCH ROUTINE
                                     004A   115 ;
                                     004A   116 ; THIS ROUTINE IS CALLED WHEN A STRING SUBSTITUTION IS SPECIFIED AND THE STRING
                                     004A   117 ; IS CURRENTLY UNDEFINED.
                                     004A   118 ;
                                     004A   119 ; INPUTS:
                                     004A   120 ;
                                     004A   121 ;	R6 = LENGTH OF SYMBOL NAME.
                                     004A   122 ;	R7 = ADDRESS OF SYMBOL NAME.
                                     004A   123 ;	R9 = ADDRESS OF NEXT CHARACTER IN COMMAND BUFFER
                                     004A   124 ;	R10 = ADDRESS OF NEXT CHARACTER IN INPUT BUFFER.
                                     004A   125 ;
                                     004A   126 ; OUTPUTS:
                                     004A   127 ;
                                     004A   128 ;	THE SYMBOL NAME IS MATCHED WITH THE LEXICAL FUNCTION TABLE. IF NO MATCH
                                     004A   129 ;	OCCURS, THEN A NULL STRING IS RETURNED FOR SUBSTITUTION IN THE ORIGINAL
                                     004A   130 ;	COMMAND LINE. IF A MATCH OCCURS, THEN THE APPROPRIATE LEXICAL FUNCTION
                                     004A   131 ;	IS EVALUATED AND THE RESULTANT STRING IS RETURNED.
                                     004A   132 ;
                                     004A   133 ;	R1 = LENGTH OF RESULT STRING.
                                     004A   134 ;	R2 = ADDRESS OF RESULT STRING.
                                     004A   135 ;	R9 AND R10 ARE UPDATED AS APPROPRIATE.
                                     004A   136 ;-
                                     004A   137  
                                     004A   138 MCR$LEXIF::				;LEXICAL FUNCTION DISPATCH
            5C            5E     D0  004A   139 	MOVL	SP,AP			;MARK STACK ADDRESS
                          5A     DD  004D   140 	PUSHL	R10			;SAVE CURRENT ADDRESS IN INPUT BUFFER
                          02AD   30  004F   141 	BSBW	SKIP_SPACES		;SKIP TRAILING BLANKS AND TABS
            56            06     D1  0052   142 	CMPL	#6,R6			;SPECIFIED NAME LONGER THAN 6 CHARACTERS?
                          03     1A  0055   143 	BGTRU	10$			;IF GTRU NO
            56            06     D0  0057   144 	MOVL	#6,R6			;REDUCE LENGTH TO 6 CHARACTERS
            50            8A     9A  005A   145 10$:	MOVZBL	(R10)+,R0		;GET TERMINAL CHARACTER
                                     005D   146 	PUTCHAR				;PUT CHARACTER IN COMMAND BUFFER
            87       2446 8F     B1  0060   147 	CMPW	#^A/F$/,(R7)+		;POSSIBLY LEXICAL FUNCTION NAME?
                          03     12  0065   148 	BNEQ	15$			;IF NEQ NO
            50            28     91  0067   149 	CMPB	#^A/(/,R0		;POSSIBLY LEXICAL FUNCTION?
                          7C     12  006A   150 15$:	BNEQ	60$			;IF NEQ NO
            56            02     C2  006C   151 	SUBL	#2,R6			;REDUCE LENGTH OF FUNCTION NAME
                          77     15  006F   152 	BLEQ	60$			;IF LEQ NOT LEXICAL FUNCTION NAME
            67         80 8F     88  0071   153 	BISB	#128,(R7)		;SET FORCE MATCH FLAG
            67            56     39  0075   154 	MATCHC	R6,(R7),#LXFUNTABLEN,LXFUNTABLE ;SEARCH FOR FUNCTION NAME MATCH
         85 AF            32         0078       
                          71     12  007B   155 	BNEQ	70$			;IF NEQ NO MATCH FOUND
            52            56     C0  007D   156 	ADDL	R6,R2			;CALCULATE BYTES REMAINING INCLUDING SUBSTRING
            52            05     C7  0080   157 	DIVL3	#5,R2,R8		;CALCULATE COMPLETE TABLE ENTRY NUMBER
                          58         0083       
            67            56     39  0084   158 	MATCHC	R6,(R7),#9,(R3)		;SCAN FOR DUPLICATE MATCH
            63            09         0087       
                          69     13  0089   159 	BEQL	80$			;IF EQL DUPLICATE MATCH FOUND
            0A            58     C3  008B   160 	SUBL3	R8,#LXFUNTABLEN/5,R8	;CALCULATE REAL FUNCTION INDEX
                          58         008E       
            58            05     C5  008F   161 	MULL3	#5,R8,R7		;CALCULATE BYTE OFFSET IN FUNCTION TABLE
                          57         0092       
            57       FF6C CF47   9A  0093   162 	MOVZBL	LXFUNTABLE+4[R7],R7	;GET NUMBER OF FUNCTION ARGUMENTS
                          0263   30  0099   163 20$:	BSBW	SKIP_SPACES		;SKIP LEADING BLANKS AND TABS
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page   4
01              LEXICAL FUNCTION DISPATCHER                                                                                      (1)

                          57     D7  009C   164 	DECL	R7			;ANY MORE ARGUMENTS TO PROCESS?
                          36     19  009E   165 	BLSS	50$			;IF LSS NO
            7E            59     7D  00A0   166 	MOVQ	R9,-(SP)		;SAVE CURRENT BUFFER POINTERS
                                     00A3   167 	GETXSYM				;GET ARGUMENT SYMBOL OR LITERAL
                          1D     13  00A6   168 	BEQL	40$			;IF EQL NULL STRING
            56            62     9A  00A8   169 	MOVZBL	(R2),R6			;SAVE STRING CHARACTER OF STRING
                                     00AB   170 	COMPSTRING			;COMPRESS STRING
            56            22     91  00AE   171 	CMPB	#^A/"/,R6		;STRING LITERAL?
                          12     13  00B1   172 	BEQL	40$			;IF EQL YES
            62            25     91  00B3   173 	CMPB	#^A/%/,(R2)		;NUMERIC RADIX OPERATOR?
                          0D     13  00B6   174 	BEQL	40$			;IF EQL YES
            62            30     91  00B8   175 	CMPB	#^A/0/,(R2)		;POSSIBLY NUMERIC LITERAL?
                          05     1A  00BB   176 	BGTRU	30$			;IF GTRU NO
            62            39     91  00BD   177 	CMPB	#^A/9/,(R2)		;POSSIBLY NUMERIC LITERAL?
                          03     1E  00C0   178 	BGEQU	40$			;IF GEQU YES
                                     00C2   179 30$:	SEARCH				;SEARCH SYMBOL TABLE FOR SYMBOL
            6E            51     7D  00C5   180 40$:	MOVQ	R1,(SP)			;SAVE STRING DESCRIPTOR
                          0234   30  00C8   181 	BSBW	SKIP_SPACES		;SKIP TRAILING SPACES
                          57     D5  00CB   182 	TSTL	R7			;LAST PARAMETER TO PROCESS?
                          07     13  00CD   183 	BEQL	50$			;IF EQL YES
            8A            2C     91  00CF   184 	CMPB	#^A/,/,(R10)+		;TRAILING COMMA?
                          C5     13  00D2   185 	BEQL	20$			;IF EQL YES
                          27     11  00D4   186 	BRB	100$			;
            8A            29     91  00D6   187 50$:	CMPB	#^A/)/,(R10)+		;TRAILING RIGHT PARENTHESIS?
                          22     12  00D9   188 	BNEQ	100$			;IF NEQ NO
            8A            27     91  00DB   189 	CMPB	#^A/'/,(R10)+		;TRAILING QUOTE?
                          02     13  00DE   190 	BEQL	55$			;BR IF YES
                          5A     D7  00E0   191 	DECL	R10			;BACKUP TO TERMINATOR
                          2C     10  00E2   192 55$:	BSBB	DISPATCH		;DISPATCH FUNCTION
            5E            5C     D0  00E4   193 	MOVL	AP,SP			;REMOVE ALL TEMPORARIES FROM STACK
                                 05  00E7   194 	RSB				;
                                     00E8   195  
                                     00E8   196 ;
                                     00E8   197 ; FUNCTION NOT TERMINATED WITH LEFT PARENTHESIS, DOES NOT CONTAIN AT LEAST TWO
                                     00E8   198 ; CHARACTERS, OR DOES NOT START WITH THE CHARACTERS "F$".
                                     00E8   199 ;
                                     00E8   200  
                          5A   8ED0  00E8   201 60$:	POPL	R10			;RESTORE INPUT BUFFER POINTER
                          51     D4  00EB   202 	CLRL	R1			;RETURN NULL STRING
                                 05  00ED   203 	RSB				;
                                     00EE   204  
                                     00EE   205 ;
                                     00EE   206 ; INVALID FUNCTION NAME
                                     00EE   207 ;
                                     00EE   208  
                                     00EE   209 70$:	STATUS	IVFNAM			;SET INVALID FUNCTION NAME STATUS
                          04     11  00F2   210 	BRB	90$			;
                                     00F4   211  
                                     00F4   212 ;
                                     00F4   213 ; AMBIGUOUS FUNCTION NAME
                                     00F4   214 ;
                                     00F4   215  
                                     00F4   216 80$:	STATUS	ABFNAM			;SET AMBIGUOUS FUNCTION NAME STATUS
            56            77     3E  00F8   217 90$:	MOVAW	-(R7),R6		;SET STARTING ADDRESS OF FUNCTION NAME
                          10     11  00FB   218 	BRB	110$			;
                                     00FD   219  
                                     00FD   220 ;
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page   5
01              LEXICAL FUNCTION DISPATCHER                                                                                      (1)

                                     00FD   221 ; INVALID SYMBOL DELIMITER
                                     00FD   222 ;
                                     00FD   223  
                                     00FD   224 100$:	STATUS	SYMDEL			;SET INVALID SYMBOL DELIMITER STATUS
            59            5A     D0  0101   225 	MOVL	R10,R9			;SET ADDRESS OF NEXT CHARACTER IN BUFFER
            56            79     9E  0104   226 	MOVAB	-(R9),R6		;SET ADDRESS OF INVALID DELIMITER
                          66     95  0107   227 	TSTB	(R6)			;EOL?
                          02     12  0109   228 	BNEQ	110$			;BR IF NO
                          5A     D7  010B   229 	DECL	R10			;BACKUP TO END OF LINE
                                     010D   230  
                                     010D   231 ;
                                     010D   232 ; UNDEFINED SYMBOL
                                     010D   233 ;
                                     010D   234  
                          01FA   31  010D   235 110$:	BRW	ERROR_EXIT		;
                                     0110   236  
                                     0110   237 ;
                                     0110   238 ; DISPATCH TO PROPER LEXICAL FUNCTION ROUTINE
                                     0110   239 ;
                                     0110   240  
                                     0110   241 DISPATCH:				;
                                     0110   242 	CASE	R8,<-			;
                                     0110   243 		F$DIRECTORY,-		;DEFAULT DIRECTORY
                                     0110   244 		F$EXTRACT,-		;EXTRACT SUBSTRING FROM STRING
                                     0110   245 		F$LENGTH,-		;STRING LENGTH
                                     0110   246 		F$LOCATE,-		;LOCATE SUBSTRING
                                     0110   247 		F$LOGICAL,-		;LOGICAL NAME TRANSLATION
                                     0110   248 		F$MODE,-		;JOB MODE
                                     0110   249 		F$PROCESS,-		;PROCESS NAME
                                     0110   250 		F$TIME,-		;CURRENT TIME AND DATE
                                     0110   251 		F$USER,-		;USER IDENTIFICATION
                                     0110   252 		F$VERIFY,-		;VERIFY MODE
                                     0110   253 		>			;
                          51     D4  0128   254 	CLRL	R1			;RETURN NULL STRING
                                 05  012A   255 	RSB				;
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page   6
01              RETURN DEFAULT DIRECTORY NAME STRING                                                                             (1)

                                     012B   257 	.SBTTL	RETURN DEFAULT DIRECTORY NAME STRING
                                     012B   258 ;+
                                     012B   259 ; F$DIRECTORY - RETURN DEFAULT DIRECTORY NAME STRING
                                     012B   260 ;
                                     012B   261 ; THIS LEXICAL FUNCTION RETURNS THE ADDRESS AND LENGTH OF THE CURRENT DEFAULT
                                     012B   262 ; DIRECTORY STRING.
                                     012B   263 ;
                                     012B   264 ;	F$DIRECTORY ()
                                     012B   265 ;
                                     012B   266 ; INPUTS:
                                     012B   267 ;
                                     012B   268 ;	NONE.
                                     012B   269 ;
                                     012B   270 ; OUTPUTS:
                                     012B   271 ;
                                     012B   272 ;	R1 = LENGTH OF DEFAULT DIRECTORY STRING.
                                     012B   273 ;	R2 = ADDRESS OF DEFAULT DIRECTORY STRING.
                                     012B   274 ;-
                                     012B   275  
                                     012B   276 F$DIRECTORY:				;RETURN DEFAULT DIRECTORY STRING
            52   00000000'9F     9E  012B   277 	MOVAB	@#PIO$GT_DDSTRING,R2	;GET ADDRESS OF DEFAULT DIRECTORY STRING
            51            82     9A  0132   278 	MOVZBL	(R2)+,R1		;GET LENGTH OF DEFAULT DIRECTORY STRING
                                 05  0135   279 	RSB				;
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page   7
01              EXTRACT SUBSTRING FROM STRING                                                                                    (1)

                                     0136   281 	.SBTTL	EXTRACT SUBSTRING FROM STRING
                                     0136   282 ;+
                                     0136   283 ; F$EXTRACT - EXTRACT SUBSTRING FROM STRING
                                     0136   284 ;
                                     0136   285 ; THIS LEXICAL FUNCTION EXTRACTS A SUBSTRING FROM AN ARGUMENT STRING AND RETURNS
                                     0136   286 ; ITS DESCRIPTOR.
                                     0136   287 ;
                                     0136   288 ;	F$EXTRACT ( POSITION, SIZE, STRING )
                                     0136   289 ;
                                     0136   290 ; INPUTS:
                                     0136   291 ;
                                     0136   292 ;	P1(SP) = LENGTH OF STRING.
                                     0136   293 ;	P1+4(SP) = ADDRESS OF STRING.
                                     0136   294 ;	P2(SP) = LENGTH OF SIZE STRING.
                                     0136   295 ;	P2+4(SP) = ADDRESS OF SIZE STRING.
                                     0136   296 ;	P3(SP) = LENGTH OF POSITION STRING.
                                     0136   297 ;	P3+4(SP) = ADDRESS OF POSITION STRING.
                                     0136   298 ;
                                     0136   299 ; OUTPUTS:
                                     0136   300 ;
                                     0136   301 ;	R1 = LENGTH OF EXTRACTED SUBSTRING.
                                     0136   302 ;	R2 = ADDRESS OF EXTRACTED SUBSTRING.
                                     0136   303 ;-
                                     0136   304  
                                     0136   305 F$EXTRACT:				;
            52         14 AE     7D  0136   306 	MOVQ	P3(SP),R2		;GET POSITION SUBSTRING PARAMETERS
                          0172   30  013A   307 	BSBW	CATB			;CONVERT NUMERIC PARAMETER
            58            51     D0  013D   308 	MOVL	R1,R8			;SAVE STARTING POSITION OF SUBSTRING
                          51     D4  0140   309 	CLRL	R1			;ASSUME NULL SUBSTRING
         04 AE            58     D1  0142   310 	CMPL	R8,P1(SP)		;STARTING POSITION BEYOND END OF STRING
                          1A     1E  0146   311 	BGEQU	10$			;IF GTRU YES
            52         0C AE     7D  0148   312 	MOVQ	P2(SP),R2		;GET SIZE STRING PARAMETERS
                          0160   30  014C   313 	BSBW	CATB			;CONVERT NUMERIC PARAMETER
         08 AE            58     C1  014F   314 	ADDL3	R8,P1+4(SP),R2		;CALCULATE STARTING ADDRESS OF SUBSTRING
                          52         0153       
         04 AE            58     C2  0154   315 	SUBL	R8,P1(SP)		;REDUCE APPARENT STRING LENGTH BY POSITION
         04 AE            51     C2  0158   316 	SUBL	R1,P1(SP)		;REDUCE STRING BY LENGTH OF SUBSTRING
                          04     1E  015C   317 	BGEQU	10$			;IF GEQU STRING LENGTH SUFFICIENT
            51         04 AE     C0  015E   318 	ADDL	P1(SP),R1		;CALCULATE ACTUAL LENGTH OF SUBSTRING
                                 05  0162   319 10$:	RSB				;
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page   8
01              RETURN LENGTH OF STRING                                                                                          (1)

                                     0163   321 	.SBTTL	RETURN LENGTH OF STRING
                                     0163   322 ;+
                                     0163   323 ; F$LENGTH - RETURN LENGTH OF STRING
                                     0163   324 ;
                                     0163   325 ; THIS LEXICAL FUNCTION RETURNS THE LENGTH OF ITS ARGUMENT AS A DECIMAL STRING.
                                     0163   326 ;
                                     0163   327 ;	F$LENGTH ( STRING )
                                     0163   328 ;
                                     0163   329 ; INPUTS:
                                     0163   330 ;
                                     0163   331 ;	P1(SP) = LENGTH OF ARGUMENT STRING.
                                     0163   332 ;	P1+4(SP) = ADDRESS OF ARGUMENT STRING.
                                     0163   333 ;
                                     0163   334 ; OUTPUTS:
                                     0163   335 ;
                                     0163   336 ;	R1 = LENGTH OF CONVERTED STRING LENGTH.
                                     0163   337 ;	R2 = ADDRESS OF CONVERTED STRING LENGTH.
                                     0163   338 ;-
                                     0163   339  
                                     0163   340 	.ENABL	LSB
                                     0163   341 F$LENGTH:				;RETURN LENGTH OF STRING
            51         04 AE     D0  0163   342 	MOVL	P1(SP),R1		;GET VALUE TO BE CONVERTED
                          14     11  0167   343 	BRB	20$			;
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page   9
01              LOCATE SUBSTRING IN STRING                                                                                       (1)

                                     0169   345 	.SBTTL	LOCATE SUBSTRING IN STRING
                                     0169   346 ;+
                                     0169   347 ; F$LOCATE - LOCATE SUBSTRING IN STRING
                                     0169   348 ;
                                     0169   349 ; THIS LEXICAL FUNCTION RETURNS THE STARTING POSITION OF A SUBSTRING IN ANOTHER
                                     0169   350 ; STRING. IF THE SUBSTRING IS NOT CONTAINED IN THE SPECIFIED STRING, THEN THE
                                     0169   351 ; LENGTH OF THE SPECIFIED STRING IS RETURNED.
                                     0169   352 ;
                                     0169   353 ;	F$LOCATE ( SUBSTRING, STRING )
                                     0169   354 ;
                                     0169   355 ; INPUTS:
                                     0169   356 ;
                                     0169   357 ;	P1(SP) = LENGTH OF STRING.
                                     0169   358 ;	P1+4(SP) = ADDRESS OF STRING.
                                     0169   359 ;	P2(SP) = LENGTH OF SUBSTRING.
                                     0169   360 ;	P2+4(SP) = ADDRESS OF SUBSTRING.
                                     0169   361 ;
                                     0169   362 ; OUTPUTS:
                                     0169   363 ;
                                     0169   364 ;	R1 = LENGTH OF CONVERTED POSITION STRING.
                                     0169   365 ;	R2 = ADDRESS OF CONVERTED POSITION STRING.
                                     0169   366 ;-
                                     0169   367  
                                     0169   368 F$LOCATE:				;LOCATE SUBSTRING IN STRING
         10 BE         0C AE     39  0169   369 	MATCHC	P2(SP),@P2+4(SP),P1(SP),@P1+4(SP) ;SEARCH FOR SUBSTRING MATCH
         08 BE         04 AE         016E       
                          04     12  0172   370 	BNEQ	10$			;IF NEQ NO MATCH FOUND
            53         0C AE     C2  0174   371 	SUBL	P2(SP),R3		;CALCULATE STARTING ADDRESS OF SUBSTRING
            53         08 AE     C3  0178   372 10$:	SUBL3	P1+4(SP),R3,R1		;CALCULATE STARTING POSITION OF SUBSTRING
                          51         017C       
                          59     DD  017D   373 20$:	PUSHL	R9			;SAVE STARTING ADDRESS OF CONVERTED VALUE
            50            25     9A  017F   374 	MOVZBL	#^A/%/,R0		;GET RADIX ESCAPE CHARACTER
                                     0182   375 	PUTCHAR				;PUT CHARACTER IN COMMAND BUFFER
            50         44 8F     9A  0185   376 	MOVZBL	#^A/D/,R0		;GET DECIMAL RADIX CHARACTER
                                     0189   377 	PUTCHAR				;PUT CHARACTER IN COMMAND BUFFER
            50            51     D0  018C   378 	MOVL	R1,R0			;SET NUMBER TO BE CONVERTED
                          0149   30  018F   379 	BSBW	CBTA_DEC		;CONVERT TO ASCII DECIMAL
                          52   8ED0  0192   380 	POPL	R2			;RETRIEVE STARTING ADDRESS OF STRING
            59            52     C3  0195   381 	SUBL3	R2,R9,R1		;CALUCLATE LENGTH OF CONVERTED VALUE
                          51         0198       
                                 05  0199   382 	RSB				;
                                     019A   383 	.DSABL	LSB
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page  10
01              LOGICAL NAME TRANSLATION                                                                                         (1)

                                     019A   385 	.SBTTL	LOGICAL NAME TRANSLATION
                                     019A   386 ;+
                                     019A   387 ; F$LOGICAL - LOGICAL NAME TRANSLATION
                                     019A   388 ;
                                     019A   389 ; THIS LEXICAL FUNCTION OBTAINS THE TRANSLATION FOR A SPECIFED LOGICAL NAME AND
                                     019A   390 ; RETURN THE EQUIVALENCE NAME.
                                     019A   391 ;
                                     019A   392 ;	F$LOGICAL ( LOGICAL_NAME )
                                     019A   393 ;
                                     019A   394 ; INPUTS:
                                     019A   395 ;
                                     019A   396 ;	P1(SP) = LENGTH OF LOGICAL NAME STRING.
                                     019A   397 ;	P1+4(SP) = ADDRESS OF LOGICAL NAME STRING.
                                     019A   398 ;
                                     019A   399 ; OUTPUTS:
                                     019A   400 ;
                                     019A   401 ;	R1 = LENGTH OF EQUIVALENCE STRING.
                                     019A   402 ;	R2 = ADDRESS OF EQUIVALENCE STRING.
                                     019A   403 ;-
                                     019A   404  
                                     019A   405 F$LOGICAL:				;LOGICAL NAME TRANSLATION
            50         04 AE     9E  019A   406 	MOVAB	P1(SP),R0		;GET ADDRESS OF LOGICAL NAME DESCRIPTOR
                          59     DD  019E   407 	PUSHL	R9			;BUILD EQUIVALENCE NAME DESCRIPTOR
            5A            59     C3  01A0   408 	SUBL3	R9,R10,-(SP)		;
                          7E         01A3       
            51            5E     D0  01A4   409 	MOVL	SP,R1			;SET ADDRESS OF EQUIVALENCE NAME DESCRIPTOR
                                     01A7   410 	$TRNLOG_S (R0),(R1),(R1)	;TRANSLATE LOGICAL NAME
            51            8E     7D  01BA   411 	MOVQ	(SP)+,R1		;RETRIEVE EQUIVALENCE NAME PARAMETERS
            0A            50     E9  01BD   412 	BLBC	R0,20$			;IF LBC TRANSLATION FAILURE
            50       0000'8F     B1  01C0   413 	CMPW	#SS$_NOTRAN,R0		;DID TRANSLATION ACTUALLY OCCUR?
                          02     12  01C5   414 	BNEQ	10$			;IF NEQ YES
                          51     D4  01C7   415 	CLRL	R1			;SET TO RETURN NULL STRING
                                 05  01C9   416 10$:	RSB				;
                                     01CA   417  
                                     01CA   418 ;
                                     01CA   419 ; LOGICAL NAME TRANSLATION FAILURE
                                     01CA   420 ;
                                     01CA   421  
            56         08 AE     D0  01CA   422 20$:	MOVL	P1+4(SP),R6		;GET ADDRESS OF LOGICAL NAME
         04 AE            56     C1  01CE   423 	ADDL3	R6,P1(SP),R9		;CALCULATE ENDING ADDRESS OF LOGICAL NAME
                          59         01D2       
                          0134   31  01D3   424 	BRW	ERROR_EXIT		;
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page  11
01              RETURN JOB MODE                                                                                                  (1)

                                     01D6   426 	.SBTTL	RETURN JOB MODE
                                     01D6   427 ;+
                                     01D6   428 ; F$MODE - RETURN JOB MODE
                                     01D6   429 ;
                                     01D6   430 ; THIS LEXICAL FUNCTION RETURNS A STRING THAT IS EITHER "INTERACTIVE" OR "BATCH"
                                     01D6   431 ; DEPENDENT ON THE JOB MODE.
                                     01D6   432 ;
                                     01D6   433 ;	F$MODE ()
                                     01D6   434 ;
                                     01D6   435 ; INPUTS:
                                     01D6   436 ;
                                     01D6   437 ;	NONE.
                                     01D6   438 ;
                                     01D6   439 ; OUTPUTS:
                                     01D6   440 ;
                                     01D6   441 ;	R1 = LENGTH OF JOB MODE DESCRIPTION STRING.
                                     01D6   442 ;	R2 = ADDRESS OF JOB MODE DESCRIPTION STRING.
                                     01D6   443 ;-
                                     01D6   444  
                                     01D6   445 F$MODE:					;RETURN JOB MODE
            52       FE60 CF     9E  01D6   446 	MOVAB	INTERACTIVE,R2		;ASSUME INTERACTIVE JOB
         54 AB            06     E1  01DB   447 	BBC	#PRC_V_MODE,PRC_W_FLAGS(R11),10$ ;IF CLR, INTERACTIVE JOB
                          05         01DF       
            52       FE4E CF     9E  01E0   448 	MOVAB	BATCH,R2		;GET ADDRESS OF BATCH STRING
            51            82     9A  01E5   449 10$:	MOVZBL	(R2)+,R1		;GET LENGTH OF STRING
                                 05  01E8   450 	RSB				;
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page  12
01              RETURN PROCESS NAME                                                                                              (1)

                                     01E9   452 	.SBTTL	RETURN PROCESS NAME
                                     01E9   453 ;+
                                     01E9   454 ; F$PROCESS - RETURN PROCESS NAME
                                     01E9   455 ;
                                     01E9   456 ; THIS LEXICAL FUNCTION OBTAINS THE CURRENT PROCESS NAME AND RETURN A DESCRIPTOR
                                     01E9   457 ; FOR IT.
                                     01E9   458 ;
                                     01E9   459 ;	F$PROCESS ()
                                     01E9   460 ;
                                     01E9   461 ; INPUTS:
                                     01E9   462 ;
                                     01E9   463 ;	NONE.
                                     01E9   464 ;
                                     01E9   465 ; OUTPUTS:
                                     01E9   466 ;
                                     01E9   467 ;	R1 = LENGTH OF PROCESS NAME.
                                     01E9   468 ;	R2 = ADDRESS OF PROCESS NAME.
                                     01E9   469 ;-
                                     01E9   470  
                                     01E9   471 	.ENABL	LSB
                                     01E9   472 F$PROCESS:				;RETURN PROCESS NAME
                          7E     D4  01E9   473 	CLRL	-(SP)			;CLEAR LENGTH AND ITEM ID OF LAST ITEM
                       F4 AE     9F  01EB   474 	PUSHAB	-12(SP)			;PUSH ADDRESS TO STORE LENGTH
                          59     DD  01EE   475 	PUSHL	R9			;PUSH ADDRESS OF OUTPUT BUFFER
            5A            59     C3  01F0   476 	SUBL3	R9,R10,-(SP)		;CALCULATE LENGTH OF OUTPUT BUFFER
                          7E         01F3       
            6E            0F     D1  01F4   477 	CMPL	#15,(SP)		;BUFFER BIG ENOUGH TO HOLD PROCESS NAME?
                          25     1A  01F7   478 	BGTRU	10$			;IF GTRU NO
         02 AE       031C 8F     B0  01F9   479 	MOVW	#JPI$_PRCNAM,2(SP)	;SET PROCESS NAME IDENTIFICATION
            50            5E     D0  01FF   480 	MOVL	SP,R0			;SET ADDRESS OF ITEM LIST
                                     0202   481 	$GETJPI_S ITMLST=(R0)		;GET PROCESS NAME
                       02 AE     B4  0215   482 	CLRW	2(SP)			;CLEAR ITEM IDENTIFICATION
            7E            50     E9  0218   483 	BLBC	R0,30$			;IF LBC SERVICE FAILURE
                          1E     BA  021B   484 	POPR	#^M<R1,R2,R3,R4>	;RETRIEVE PROCESS NAME PARAMETERS
                                 05  021D   485 	RSB				;
                          76     11  021E   486 10$:	BRB	20$			;
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page  13
01              RETURN CURRENT TIME AND DATE                                                                                     (1)

                                     0220   488 	.SBTTL	RETURN CURRENT TIME AND DATE
                                     0220   489 ;+
                                     0220   490 ; F$TIME - RETURN CURRENT TIME AND DATE
                                     0220   491 ;
                                     0220   492 ; THIS LEXICAL FUNCTION OBTAINS THE CURRENT TIME AND DATE AND RETURNS A STRING
                                     0220   493 ; DESCRIPTOR FOR IT.
                                     0220   494 ;
                                     0220   495 ;	F$TIME ()
                                     0220   496 ;
                                     0220   497 ; INPUTS:
                                     0220   498 ;
                                     0220   499 ;	NONE.
                                     0220   500 ;
                                     0220   501 ; OUTPUTS:
                                     0220   502 ;
                                     0220   503 ;	R1 = LENGTH OF TIME AND DATE STRING.
                                     0220   504 ;	R2 = ADDRESS OF TIME AND DATE STRING.
                                     0220   505 ;-
                                     0220   506  
                                     0220   507 F$TIME:					;RETURN TIME AND DATE
                          59     DD  0220   508 	PUSHL	R9			;BUILD TIME BUFFER DESCRIPTOR
            5A            59     C3  0222   509 	SUBL3	R9,R10,-(SP)		;
                          7E         0225       
            6E            17     D1  0226   510 	CMPL	#23,(SP)		;TIME BUFFER LARGE ENOUGH?
                          6B     1A  0229   511 	BGTRU	20$			;IF GTRU NO
            50            5E     D0  022B   512 	MOVL	SP,R0			;SET ADDRESS OF TIME BUFFER DESCRIPTOR
                                     022E   513 	$ASCTIM_S (R0),(R0)		;GET CURRENT TIME
            51            8E     7D  023D   514 	MOVQ	(SP)+,R1		;RETRIEVE TIME BUFFER PARAMETERS
            56            50     E9  0240   515 	BLBC	R0,30$			;IF LBC CONVERSION FAILURE
                                 05  0243   516 	RSB				;
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page  14
01              RETURN USER IDENTIFICATION CODE                                                                                  (1)

                                     0244   518 	.SBTTL	RETURN USER IDENTIFICATION CODE
                                     0244   519 ;+
                                     0244   520 ; F$USER - RETURN USER IDENTIFICATION CODE
                                     0244   521 ;
                                     0244   522 ; THIS LEXICAL FUNCTION FUNCTION CONVERTS THE USER IDENTIFICATION CODE TO AN
                                     0244   523 ; ASCII STRING AND RETURNS A DESCRIPTOR FOR IT.
                                     0244   524 ;
                                     0244   525 ;	F$USER ()
                                     0244   526 ;
                                     0244   527 ; INPUTS:
                                     0244   528 ;
                                     0244   529 ;	NONE.
                                     0244   530 ;
                                     0244   531 ; OUTPUTS:
                                     0244   532 ;
                                     0244   533 ;	R1 = LENGTH OF USER IDENTIFICATION CODE.
                                     0244   534 ;	R2 = ADDRESS OF USER IDENTIFICATION CODE.
                                     0244   535 ;-
                                     0244   536  
                                     0244   537 F$USER:					;RETURN USER IDENTIFICATION CODE
                          59     DD  0244   538 	PUSHL	R9			;SAVE POSITION IN OUTPUT BUFFER
            50         5B 8F     90  0246   539 	MOVB	#^A/[/,R0		;GET LEFT BRACKET
                                     024A   540 	PUTCHAR				;PUT CHARACTER IN OUTPUT BUFFER
                          7E     7C  024D   541 	CLRQ	-(SP)			;CLEAR LAST ITEM AND LENGTH ADDRESS
                       F8 AE     9F  024F   542 	PUSHAB	-8(SP)			;PUSH ADDRESS TO STORE USER IDENTIFICATION
                 03040004 8F     DD  0252   543 	PUSHL	#JPI$_UIC@16+4		;SET PARAMETER ID AND LENGTH
            50            5E     D0  0258   544 	MOVL	SP,R0			;SET ADDRESS OF TIME LIST
                                     025B   545 	$GETJPI_S ITMLST=(R0)		;GET USER IDENTIFICATION CODE
            28            50     E9  026E   546 	BLBC	R0,30$			;IF LBC SERVICE FAILURE
            50         02 AE     3C  0271   547 	MOVZWL	2(SP),R0		;GET GROUP CODE
                          005E   30  0275   548 	BSBW	CBTA_OCT		;CONVERT GROUP CODE TO ASCII
            50            2C     9A  0278   549 	MOVZBL	#^A/,/,R0		;SET SEPARATOR CHARACTER
                                     027B   550 	PUTCHAR				;PUT CHARACTER IN COMMAND BUFFER
            50            6E     3C  027E   551 	MOVZWL	(SP),R0			;GET MEMBER CODE
                          0052   30  0281   552 	BSBW	CBTA_OCT		;CONVERT MEMBER CODE TO ASCII
            5E            10     C0  0284   553 	ADDL	#4*4,SP			;REMOVE ITEM LIST FROM STACK
            50         5D 8F     90  0287   554 	MOVB	#^A/]/,R0		;GET RIGHT BRACKET
                                     028B   555 	PUTCHAR				;PUT CHARACTER IN OUTPUT BUFFER
                          52   8ED0  028E   556 	POPL	R2			;RETRIEVE ADDRESS OF USER IDENTIFICATION CODE
            59            52     C3  0291   557 	SUBL3	R2,R9,R1		;CALCULATE LENGTH OF RESULTANT STRING
                          51         0294       
                                 05  0295   558 	RSB				;
                                     0296   559  
                                     0296   560 ;
                                     0296   561 ; BUFFER OVERFLOW
                                     0296   562 ;
                                     0296   563  
                                     0296   564 20$:	STATUS	BUFOVF			;SET BUFFER OVERFLOW STATUS
            56            59     D0  0299   565 30$:	MOVL	R9,R6			;SET FOR NO SEGMENT DISPLAY
                          006B   31  029C   566 	BRW	ERROR_EXIT		;
                                     029F   567 	.DSABL	LSB
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page  15
01              RETURN VERIFY MODE                                                                                               (1)

                                     029F   569 	.SBTTL	RETURN VERIFY MODE
                                     029F   570 ;+
                                     029F   571 ; F$VERIFY - RETURN VERIFY MODE
                                     029F   572 ;
                                     029F   573 ; THIS LEXICAL FUNCTION RETURNS A BOOLEAN VARIABLE THAT DESCRIBES THE CURRENT
                                     029F   574 ; STATE OF THE VERIFY MODE.
                                     029F   575 ;
                                     029F   576 ;	F$VERIFY ()
                                     029F   577 ;
                                     029F   578 ; INPUTS:
                                     029F   579 ;
                                     029F   580 ;	NONE.
                                     029F   581 ;
                                     029F   582 ; OUTPUTS:
                                     029F   583 ;
                                     029F   584 ;	R1 = LENGTH OF BOOLEAN RESULT STRING.
                                     029F   585 ;	R2 = ADDRESS OF BOOLEAN RESULT STRING.
                                     029F   586 ;-
                                     029F   587  
                                     029F   588 F$VERIFY:				;RETURN VERIFY MODE
            52       FD95 CF     9E  029F   589 	MOVAB	TRUE,R2			;ASSUME VERIFY IN CURRENTLY ON
         54 AB            07     E0  02A4   590 	BBS	#PRC_V_VERIFY,PRC_W_FLAGS(R11),10$ ;IF SET, VERIFY IS ON
                          02         02A8       
                          52     D6  02A9   591 	INCL	R2			;GET ADDRESS OF FALSE VALUE
            51            01     D0  02AB   592 10$:	MOVL	#1,R1			;SET LENGTH OF RESULT
                                 05  02AE   593 	RSB				;
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page  16
01              LOCAL SUBROUTINES                                                                                                (1)

                                     02AF   595 	.SBTTL	LOCAL SUBROUTINES
                                     02AF   596 ;+
                                     02AF   597 ; CATB - CONVERT ASCII VALUE TO BINARY
                                     02AF   598 ;
                                     02AF   599 ; THIS ROUTINE CONVERTS AN ASCII VALUE TO A BINARY VALUE. IF ALL CHARACTERS ARE
                                     02AF   600 ; NOT CONVERTED, THEN A SPECIAL CHECK IS MADE FOR BOOLEAN VARIABLES.
                                     02AF   601 ;
                                     02AF   602 ; INPUTS:
                                     02AF   603 ;
                                     02AF   604 ;	R2 = LENGTH OF STRING TO BE CONVERTED.
                                     02AF   605 ;	R3 = ADDRESS OF STRING TO BE CONVERTED.
                                     02AF   606 ;
                                     02AF   607 ; OUTPUTS:
                                     02AF   608 ;
                                     02AF   609 ;	R1 = CONVERTED VALUE.
                                     02AF   610 ;-
                                     02AF   611  
                                     02AF   612 CATB:					;CONVERT ASCII TO BINARY
            7E            52     7D  02AF   613 	MOVQ	R2,-(SP)		;SAVE STRING PARAMETERS
                                     02B2   614 	CNVNUMDEC			;CONVERT DECIMAL NUMBER
                          0F     13  02B5   615 	BEQL	10$			;IF EQL SUCCESSFUL CONVERSION
            52            6E     7D  02B7   616 	MOVQ	(SP),R2			;RETRIEVE STRING PARAMETERS
            04            63     3A  02BA   617 	LOCC	(R3),#4,TRUFLS		;SEARCH FOR BOOLEAN VARIABLE MATCH
                     FD86 CF         02BD       
                          08     13  02C0   618 	BEQL	20$			;IF EQL ERROR
            50            06     CB  02C2   619 	BICL3	#6,R0,R1		;CONVERT COUNT TO BOOLEAN VALUE
                          51         02C5       
            52            8E     7D  02C6   620 10$:	MOVQ	(SP)+,R2		;RETRIEVE STRING PARAMETERS
                                 05  02C9   621 	RSB				;
                                     02CA   622  
                                     02CA   623 ;
                                     02CA   624 ; INVALID STRING CHARACTER
                                     02CA   625 ;
                                     02CA   626  
            55            8E     7D  02CA   627 20$:	MOVQ	(SP)+,R5		;RETRIEVE STRING PARAMETERS
            56            55     C1  02CD   628 	ADDL3	R5,R6,R9		;SET ENDING ADDRESS OF DISPLAY SEGMENT
                          59         02D0       
                                     02D1   629 	STATUS	IVCHAR			;SET INVALID CHARACTER STATUS
                          34     11  02D4   630 	BRB	ERROR_EXIT		;
                                     02D6   631  
                                     02D6   632 ;
                                     02D6   633 ; CBTA_DEC - CONVERT BINARY TO ASCII BASE TEN
                                     02D6   634 ; CBTA_OCT - CONVERT BINARY TO ASCII BASE EIGHT
                                     02D6   635 ;
                                     02D6   636 ; THESE ROUTINES ARE CALLED TO CONVERT A BINARY NUMBER TO A LEFT JUSTIFIED, ZERO
                                     02D6   637 ; SUPRESSED, ASCII STRING.
                                     02D6   638 ;
                                     02D6   639 ; INPUTS:
                                     02D6   640 ;
                                     02D6   641 ;	R0 = NUMBER TO BE CONVERTED.
                                     02D6   642 ;
                                     02D6   643 ; OUTPUTS:
                                     02D6   644 ;
                                     02D6   645 ;	R1 = LENGTH OF CONVERTED VALUE.
                                     02D6   646 ;	R2 = ADDRESS OF CONVERTED VALUE.
                                     02D6   647 ;-
                                     02D6   648  
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page  17
01              LOCAL SUBROUTINES                                                                                                (1)

                                     02D6   649 	.ENABL	LSB
                                     02D6   650 CBTA_OCT:				;CONVERT BINARY TO ASCII BASE EIGHT
            53            08     9A  02D6   651 	MOVZBL	#8,R3			;SET CONVERSION RADIX
                          03     11  02D9   652 	BRB	10$			;
                                     02DB   653 CBTA_DEC:				;CONVERT BINARY TO ASCII BASE TEN
            53            0A     9A  02DB   654 	MOVZBL	#10,R3			;SET CONVERSION RADIX
            52            59     D0  02DE   655 10$:	MOVL	R9,R2			;SAVE STARTING ADDRESS OF CONVERSION STRING
                          51     D4  02E1   656 20$:	CLRL	R1			;CLEAR HIGH PART OF DIVIDEND
            50            53     7B  02E3   657 	EDIV	R3,R0,R0,R1		;ISOLATE NEXT DIGIT
            51            50         02E6       
            51            30     C1  02E8   658 	ADDL3	#^A/0/,R1,-(SP)		;CONVERT DIGIT TO ASCII AND SAVE
                          7E         02EB       
                          50     D5  02EC   659 	TSTL	R0			;ANY MORE DIGITS TO CONVERT?
                          02     13  02EE   660 	BEQL	30$			;IF EQL NO
                          EF     10  02F0   661 	BSBB	20$			;CONVERT NEXT DIGIT
                          50   8ED0  02F2   662 30$:	POPL	R0			;RETRIEVE NEXT CHARACTER
                                     02F5   663 	PUTCHAR				;PUT CHARACTER IN OUTPUT BUFFER
            59            52     C3  02F8   664 	SUBL3	R2,R9,R1		;CALCULATE LENGTH OF RESULTANT STRING
                          51         02FB       
                                 05  02FC   665 	RSB				;
                                     02FD   666 	.DSABL	LSB
                                     02FD   667  
                                     02FD   668 ;
                                     02FD   669 ; SKIP_SPACES - SKIP BLANKS AND TABS
                                     02FD   670 ;
                                     02FD   671 ; THIS ROUTINE SKIPS OVER BLANKS AND TABS IN THE INPUT BUFFER UPDATING THE INPUT
                                     02FD   672 ; BUFFER POINTER AS APPROPRIATE.
                                     02FD   673 ;
                                     02FD   674 ; INPUTS:
                                     02FD   675 ;
                                     02FD   676 ;	R10 = INPUT BUFFER POINTER.
                                     02FD   677 ;
                                     02FD   678 ; OUTPUTS:
                                     02FD   679 ;
                                     02FD   680 ;	R10 = ADDRESS OF NEXT NONBLANK, NONTAB CHARACTER IN THE INPUT BUFFER.
                                     02FD   681 ;-
                                     02FD   682  
                                     02FD   683 	.ENABL	LSB
                          5A     D6  02FD   684 10$:	INCL	R10			;ADVANCE TO NEXT CHARACTER
                                     02FF   685 SKIP_SPACES:				;
            6A            20     91  02FF   686 	CMPB	#^A/ /,(R10)		;NEXT CHARACTER A BLANK?
                          F9     13  0302   687 	BEQL	10$			;IF EQL YES
            6A            09     91  0304   688 	CMPB	#^A/	/,(R10)		;NEXT CHARACTER A TAB?
                          F4     13  0307   689 	BEQL	10$			;IF EQL YES
                                 05  0309   690 	RSB				;
                                     030A   691 	.DSABL	LSB
                                     030A   692  
                                     030A   693 ;
                                     030A   694 ; ERROR EXIT FROM LEXICAL FUNCTION STRING EXPANSION
                                     030A   695 ;
                                     030A   696  
                                     030A   697 ERROR_EXIT:				;
         FC AD            7A     9E  030A   698 	MOVAB	-(R10),WRK_L_CHARPTR(FP) ;SET CHARACTER POINTER FOR ERROR MESSAGE
                                     030E   699 	ERRMSG				;OUTPUT ERROR MESSAGE
                          50     DD  0311   700 	PUSHL	R0			;SAVE FINAL STATUS
                                     0313   701 	FLUSH				;FLUSH COMMAND
                          50   8ED0  0316   702 	POPL	R0			;RETRIEVE FINAL STATUS
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page  18
01              LOCAL SUBROUTINES                                                                                                (1)

                                     0319   703 	SET_STATUS			;SET COMMAND STATUS
                          FCE1'  31  031C   704 	BRW	MCR$RESTART		;
                                     031F   705  
                                     031F   706 	.END
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page  19
SYMBOL TABLE                                                                                                                     (1)

$$T1           = 00000001            CLI$_NULFIL    = 000380E0            JPI$_BYTCNT    = 00000311            
$XX$           = 00000000            CLI$_NUMBER    = 000380E8            JPI$_BYTLM     = 0000031A            
$ZZ$           = 00000004            CLI$_ONCOMD    = 000380F0            JPI$_CPULIM    = 0000040D            
BATCH            00000032 R     03   CLI$_ONERR     = 000380F8            JPI$_CPUTIM    = 00000407            
BIT...         = 00000103            CLI$_ONEVAL    = 00038158            JPI$_CURPRIV   = 00000400            
CATB             000002AF R     03   CLI$_ONLEVL    = 00038100            JPI$_DFPFC     = 00000406            
CBTA_DEC         000002DB R     03   CLI$_ONOVF     = 00038108            JPI$_DFWSCNT   = 00000403            
CBTA_OCT         000002D6 R     03   CLI$_OVRFLW    = 00038160            JPI$_DIOCNT    = 00000312            
CLI$_ABFNAM    = 000381B8            CLI$_PARMDEL   = 00038110            JPI$_DIOLM     = 00000313            
CLI$_ABKEYW    = 00038000            CLI$_PROC_ID   = 0003FFF1            JPI$_DIRIO     = 0000040B            
CLI$_ABVERB    = 00038008            CLI$_QUEJOBCRE = 0003FFF9            JPI$_EFCS      = 00000317            
CLI$_BADRET    = 00038198            CLI$_REQPRMABS = 00038812            JPI$_EFCU      = 00000318            
CLI$_BADTEXT   = 000381B0            CLI$_RSLOVF    = 00038118            JPI$_EFWM      = 00000316            
CLI$_BUFOVF    = 00038018            CLI$_SKPDAT    = 00038120            JPI$_EXCVEC    = 00000100            
CLI$_COMPLX    = 00038020            CLI$_SPARE0    = 00038010            JPI$_FILCNT    = 00000314            
CLI$_CONFQUAL  = 00038802            CLI$_SPARE1    = 00038058            JPI$_FILLM     = 0000040F            
CLI$_CREQUEJOB = 0003884A            CLI$_STKOVF    = 00038128            JPI$_FINALEXC  = 00000101            
CLI$_DEFOVF    = 00038028            CLI$_SUBMITERR = 00038852            JPI$_FREP0VA   = 00000404            
CLI$_DEVALSPL  = 0003885A            CLI$_SYMDEL    = 00038130            JPI$_FREP1VA   = 00000405            
CLI$_DEVNOTFOR = 0003887A            CLI$_SYMOVF    = 00038138            JPI$_GPGCNT    = 0000030C            
CLI$_DEVNOTSPL = 00038862            CLI$_UNDFIL    = 00038188            JPI$_GRP       = 00000308            
CLI$_DIRECT    = 00038030            CLI$_UNDSYM    = 00038140            JPI$_LASTADR   = 00000102            
CLI$_EXPSYN    = 00038038            CLI$_UNPROPARM = 00038170            JPI$_LASTCTL   = 00000207            
CLI$_FILOPN    = 00038190            CLI$_UNPROQUAL = 00038168            JPI$_LASTPCB   = 0000031D            
CLI$_ILLVAL    = 0003883A            CLI$_USGOTO    = 00038148            JPI$_LASTPHD   = 00000412            
CLI$_IMCHNG    = 00038040            CLI$_VALCNVERR = 00038832            JPI$_LOGINTIM  = 00000206            
CLI$_IMGFNF    = 00038872            CLI$_VALREQ    = 00038150            JPI$_MEM       = 00000307            
CLI$_INSFPRM   = 00038048            CMDBUFSIZ      = 000001FC            JPI$_OWNER     = 00000303            
CLI$_INVKEY    = 00038178            DISPATCH         00000110 R     03   JPI$_PAGEFLTS  = 0000040A            
CLI$_INVQUAL   = 0003880A            ERROR_EXIT       0000030A R     03   JPI$_PGFLQUOTA = 0000040E            
CLI$_INVQUALNUM= 0003881A            F$DIRECTORY      0000012B R     03   JPI$_PID       = 00000319            
CLI$_INVREQTYP = 00038822            F$EXTRACT        00000136 R     03   JPI$_PPGCNT    = 0000030D            
CLI$_INVRSP    = 00038180            F$LENGTH         00000163 R     03   JPI$_PRCCNT    = 0000031B            
CLI$_INVUIC    = 000381A8            F$LOCATE         00000169 R     03   JPI$_PRCLM     = 00000408            
CLI$_IVCHAR    = 00038050            F$LOGICAL        0000019A R     03   JPI$_PRCNAM    = 0000031C            
CLI$_IVDEVTYPE = 0003886A            F$MODE           000001D6 R     03   JPI$_PRI       = 00000302            
CLI$_IVFNAM    = 000381C0            F$PROCESS        000001E9 R     03   JPI$_PRIB      = 00000309            
CLI$_IVKEYW    = 00038060            F$TIME           00000220 R     03   JPI$_PROCPRIV  = 00000204            
CLI$_IVOPER    = 00038068            F$USER           00000244 R     03   JPI$_STATE     = 00000306            
CLI$_IVPROT    = 00038070            F$VERIFY         0000029F R     03   JPI$_STS       = 00000305            
CLI$_IVQLOC    = 00038078            GBL...         = 00000000            JPI$_TMBU      = 0000030B            
CLI$_IVSYMB    = 00038080            INPBUFSIZ      = 00000084            JPI$_TQCNT     = 00000315            
CLI$_IVVALU    = 00038088            INTERACTIVE      0000003A R     03   JPI$_TQLM      = 00000410            
CLI$_IVVERB    = 00038090            JPI$C_ADRTYPE  = 00000001            JPI$_UIC       = 00000304            
CLI$_MAXPARM   = 00038098            JPI$C_CTLTYPE  = 00000002            JPI$_USERNAME  = 00000202            
CLI$_MULKEY    = 000381A0            JPI$C_LISTEND  = 00000000            JPI$_VIRTPEAK  = 00000200            
CLI$_NOATFIL   = 000380A0            JPI$C_PCBTYPE  = 00000003            JPI$_VOLUMES   = 00000205            
CLI$_NOCCAT    = 000380A8            JPI$C_PHDTYPE  = 00000004            JPI$_WSAUTH    = 00000401            
CLI$_NOCOMD    = 000380B0            JPI$_ACCOUNT   = 00000203            JPI$_WSPEAK    = 00000201            
CLI$_NOKEYW    = 000380B8            JPI$_APTCNT    = 0000030A            JPI$_WSQUOTA   = 00000402            
CLI$_NOLIST    = 000380C0            JPI$_ASTACT    = 00000300            JPI$_WSSIZE    = 00000411            
CLI$_NOOPTPRS  = 00038842            JPI$_ASTCNT    = 0000030E            LXFUNTABLE       00000000 R     03   
CLI$_NOQUAL    = 000380C8            JPI$_ASTEN     = 00000301            LXFUNTABLEN    = 00000032            
CLI$_NORMAL    = 00030001            JPI$_ASTLM     = 00000409            MCR$CNVNUMDEC    ********   X   03   
CLI$_NOTNEG    = 000380D8            JPI$_BIOCNT    = 0000030F            MCR$COMPSTRING   ********   X   03   
CLI$_NOVALU    = 000380D0            JPI$_BIOLM     = 00000310            MCR$ERRORMSG     ********   X   03   
CLI$_NOVALUE   = 0003882A            JPI$_BUFIO     = 0000040C            MCR$FLUSH        ********   X   03   
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page  20
SYMBOL TABLE                                                                                                                     (1)

MCR$GETXSYM      ********   X   03   PRC_L_INPRAB     00000008            SYS$TRNLOG       ********   X   03   
MCR$LEXIF        0000004A RG    03   PRC_L_LSTSTATUS  00000094            TRUE             00000038 R     03   
MCR$PUTCHAR      ********   X   03   PRC_L_ONCTLY     0000009C            TRUFLS           00000046 R     03   
MCR$RESTART      ********   X   03   PRC_L_ONERROR    00000058            WRK_AB_BUFFER    FFFFFD44            
MCR$SEARCH       ********   X   03   PRC_L_OUTRAB     0000000C            WRK_AG_RESULT    FFFFFBC0            
MCR$SET_STATUS   ********   X   03   PRC_L_PROCUIC    00000098            WRK_B_CMDFLG     FFFFFFC9            
MCR_M_ALPHAN   = 00000002            PRC_L_SAVAP      00000000            WRK_B_CURADX     FFFFFFCA            
MCR_M_DEFALT   = 00000008            PRC_L_SAVFP      00000004            WRK_B_PARMCNT    FFFFFFCB            
MCR_M_DELINP   = 00000080            PRC_L_SEVERITY   00000040            WRK_B_VERBTYP    FFFFFFC8            
MCR_M_DOLLARS  = 00000100            PRC_L_STACKLM    00000088            WRK_K_LENGTH     FFFFFBC0            
MCR_M_ESCAPE   = 00000004            PRC_L_STACKPT    00000084            WRK_L_CHARPTR    FFFFFFFC            
MCR_M_ESCTRM   = 00000200            PRC_L_STATUS     00000044            WRK_L_IMAGE      FFFFFFEC            
MCR_M_GLOBAL   = 00000400            PRC_L_SYMBOL     0000004C            WRK_L_MAXPARM    FFFFFFCC            
MCR_M_LOWER    = 00000800            PRC_M_CNTRLY   = 00000002            WRK_L_MINPARM    FFFFFFD0            
MCR_M_OPNINP   = 00000040            PRC_M_DBGQUAL  = 00000200            WRK_L_PAROUT     FFFFFFF0            
MCR_M_RAD50    = 00000001            PRC_M_DBGTRUE  = 00000400            WRK_L_PROMPT     FFFFFFF4            
MCR_M_STRSUB   = 00001000            PRC_M_DISABL   = 00000004            WRK_L_QUABLK     FFFFFFE8            
MCR_V_ALPHAN   = 00000001            PRC_M_EXIT     = 00000008            WRK_L_RSLNXT     FFFFFD40            
MCR_V_DEFALT   = 00000003            PRC_M_GOEOF    = 00000001            WRK_L_SAVAP      FFFFFFD8            
MCR_V_DELINP   = 00000007            PRC_M_GOTO     = 00000010            WRK_L_SAVFP      FFFFFFDC            
MCR_V_DOLLARS  = 00000008            PRC_M_HANGUP   = 00001000            WRK_L_SAVSP      FFFFFFD4            
MCR_V_ESCAPE   = 00000002            PRC_M_IND      = 00000020            WRK_M_ALL      = 00000001            
MCR_V_ESCTRM   = 00000009            PRC_M_MODE     = 00000040            WRK_M_ASK      = 00000100            
MCR_V_FORCMD   = 0000000E            PRC_M_NOCTLY   = 00004000            WRK_M_COMMAND  = 00000002            
MCR_V_GLOBAL   = 0000000A            PRC_M_PAUSE    = 00002000            WRK_M_CONTINU  = 00000400            
MCR_V_LOWER    = 0000000B            PRC_M_USRDET   = 00000100            WRK_M_EQUAL    = 00000008            
MCR_V_OPNINP   = 00000006            PRC_M_VERIFY   = 00000080            WRK_M_IMCHNG   = 00000004            
MCR_V_RAD50    = 00000000            PRC_M_YLEVEL   = 00000800            WRK_M_QUAL     = 00000010            
MCR_V_STRSUB   = 0000000C            PRC_Q_ALLOCREG   00000020            WRK_M_QUOTE    = 00000020            
MSGBUFSIZ      = 00000084            PRC_Q_GLOBAL     00000028            WRK_M_STAR     = 00000040            
P1             = 00000004            PRC_Q_LABEL      00000030            WRK_M_TRAILSPC = 00000200            
P2             = 0000000C            PRC_Q_LOCAL      00000038            WRK_M_VERB     = 00000080            
P3             = 00000014            PRC_V_CNTRLY   = 00000001            WRK_Q_IOSB       FFFFFFE0            
PIO$GT_DDSTRING  ********   X   03   PRC_V_DBGQUAL  = 00000009            WRK_V_ALL      = 00000000            
PRC_B_DEFRADIX   00000092            PRC_V_DBGTRUE  = 0000000A            WRK_V_ASK      = 00000008            
PRC_B_EXMDEPMOD  00000091            PRC_V_DISABL   = 00000002            WRK_V_COMMAND  = 00000001            
PRC_B_EXMDEPWID  00000090            PRC_V_EXIT     = 00000003            WRK_V_CONTINU  = 0000000A            
PRC_K_DEC      = 00000001            PRC_V_GOEOF    = 00000000            WRK_V_EQUAL    = 00000003            
PRC_K_HEX      = 00000000            PRC_V_GOTO     = 00000004            WRK_V_IMCHNG   = 00000002            
PRC_K_LENGTH     000000A0            PRC_V_HANGUP   = 0000000C            WRK_V_QUAL     = 00000004            
PRC_K_OCT      = 00000002            PRC_V_IND      = 00000005            WRK_V_QUOTE    = 00000005            
PRC_L_CLIWRK0    0000005C            PRC_V_MODE     = 00000006            WRK_V_STAR     = 00000006            
PRC_L_CLIWRK1    00000060            PRC_V_NOCTLY   = 0000000E            WRK_V_TRAILSPC = 00000009            
PRC_L_CLIWRK2    00000064            PRC_V_PAUSE    = 0000000D            WRK_V_VERB     = 00000007            
PRC_L_CLIWRK3    00000068            PRC_V_USRDET   = 00000008            WRK_W_FLAGS      FFFFFFFA            
PRC_L_CLIWRK4    0000006C            PRC_V_VERIFY   = 00000007            WRK_W_LOCFLG     FFFFFFF8            
PRC_L_ERRRAB     00000010            PRC_V_YLEVEL   = 0000000B            _$$_           = 00000014            
PRC_L_EXMDEPADR  0000008C            PRC_W_CLIFLAG    00000052            
PRC_L_EXTARG     00000078            PRC_W_ERRIFI     00000052            
PRC_L_EXTBLK     00000070            PRC_W_FLAGS      00000054            
PRC_L_EXTCOD     00000080            PRC_W_INPCHAN    00000050            
PRC_L_EXTHND     00000074            PRC_W_ONLEVEL    00000056            
PRC_L_EXTPRM     0000007C            RSLBUFSIZ      = 00000180            
PRC_L_INDEPTH    00000048            SKIP_SPACES      000002FF R     03   
PRC_L_INDFAB     0000001C            SS$_NOTRAN       ********   X   03   
PRC_L_INDINPRAB  00000014            SYS$ASCTIM       ********   X   03   
PRC_L_INDOUTRAB  00000018            SYS$GETJPI       ********   X   03   
MCRLEXCON       - LEXICAL FUNCTION PARSE AND EXECUTION SUPPORT   22-AUG-1978 01:46:11   VAX-11 MACRO X0.3-11               Page  21
PROGRAM SECTION SYNOPSIS                                                                                                         (1)



PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            FFFFFFFC      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
MCR$ZCODE        0000031F      03     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD  NOWRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
14970. BYTES LEFT IN FREE MEMORY POOL.
382. BYTES OF RECLAIMED MEMORY.
OBJ$:MCRLEXCON,LIS$:MCRLEXCON/-SP=EXECML$/ML,LIB$:MCR/ML,SRC$:MCRLEXCON
35 MLB DIR RDS - 542 GETS TO DEFINE 30 MACROS. 44 INTER. FILE WRITES. 
