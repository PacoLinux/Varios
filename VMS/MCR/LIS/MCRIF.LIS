MCRIF           - IF MCR COMMAND EXECUTION                       22-AUG-1978 01:40:03   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (1)     110  IF COMMAND 
   (1)     403  GET SPECIAL SYMBOL
MCRIF           - IF MCR COMMAND EXECUTION                       22-AUG-1978 01:40:03   VAX-11 MACRO X0.3-11               Page   1
01                                                                                                                               (1)

                                     0000     1 	.TITLE	MCRIF - IF MCR COMMAND EXECUTION
                                     0000     2 	.IDENT	/01/
                                     0000     3  
                                     0000     4 ;
                                     0000     5 ; COPYRIGHT (C) 1977
                                     0000     6 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
                                     0000     7 ;
                                     0000     8 ; THIS SOFTWARE IS FURNISHED UNDER  A LICENSE FOR USE ONLY  ON  A
                                     0000     9 ; SINGLE COMPUTER SYSTEM AND MAY BE  COPIED ONLY WITH  THE INCLU-
                                     0000    10 ; SION OF  THE  ABOVE  COPYRIGHT NOTICE.  THIS SOFTWARE,  OR  ANY
                                     0000    11 ; OTHER COPIES THEREOF, MAY NOT BE  PROVIDED  OR  OTHERWISE  MADE
                                     0000    12 ; AVAILABLE TO ANY OTHER PERSON EXCEPT  FOR  USE  ON  SUCH SYSTEM
                                     0000    13 ; AND TO  ONE WHO AGREES  TO  THESE LICENSE  TERMS.  TITLE TO AND
                                     0000    14 ; OWNERSHIP OF THE SOFTWARE SHALL AT ALL TIMES REMAIN IN DEC.
                                     0000    15 ;
                                     0000    16 ; THE INFORMATION IN THIS SOFTWARE  IS  SUBJECT TO CHANGE WITHOUT
                                     0000    17 ; NOTICE AND SHOULD NOT BE CONSTRUED  AS  A COMMITMENT BY DIGITAL
                                     0000    18 ; EQUIPMENT CORPORATION.
                                     0000    19 ;
                                     0000    20 ; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF ITS
                                     0000    21 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
                                     0000    22 ;
                                     0000    23 ; W. H. BROWN 20-DEC-1977
                                     0000    24 ;
                                     0000    25 ; IF MCR COMMAND EXECUTION
                                     0000    26 ;
                                     0000    27  
                                     0000    28 ;
                                     0000    29 ; LOCAL MACROS
                                     0000    30 ;
                                     0000    31 ; MACRO TO GENERATE AN ENTRY IN THE IF COMMAND DISPATCHER
                                     0000    32 ;
                                     0000    33 	.MACRO	IFCOMD	NAME
                                     0000    34 	.SAVE
                                     0000    35 	.PSECT	MCR$ZDATA
                                     0000    36 	.ASCIC	\NAME\
                                     0000    37 	.RESTORE
                                     0000    38 	.WORD	<NAME-IFDISP>
                                     0000    39 	.ENDM
                                     0000    40  
                                     0000    41 ;
                                     0000    42 ; MACRO TO GENERATE END OF IF COMMAND DISPATCHER
                                     0000    43 ;
                                     0000    44  
                                     0000    45 	.MACRO	IFTERM
                                     0000    46 	.SAVE
                                     0000    47 	.PSECT	MCR$ZDATA
                                     0000    48 	.BYTE	0
                                     0000    49 	.RESTORE
                                     0000    50 	.ENDM
                                     0000    51 ;
                                     0000    52 ; MACRO LIBRARY CALLS
                                     0000    53 ;
                                     0000    54  
                                     0000    55 	DEFCMDWRK			; DEFINE WORK AREA OFFSETS
                                     0000    56 	DEFERRCOD			; DEFINE ERROR/STATUS CODES
                                     0000    57 	DEFSYMTBL			; DEFINE SYMBOL TABLE OFFSETS
MCRIF           - IF MCR COMMAND EXECUTION                       22-AUG-1978 01:40:03   VAX-11 MACRO X0.3-11               Page   2
01                                                                                                                               (1)

                                     0000    58  
                                     0000    59 ;
                                     0000    60 ; LOCAL DEFINITONS
                                     0000    61 ;
                                     0000    62 	_VIELD	IF,0,<-			; IF COMMAND LOCAL BITS
                                     0000    63 		OPFLAG,-		; OPERATION MUST BE .IFXXX
                                     0000    64 		FALSE,-			; CONDITION IS TRUE IF EXPRESSION FALSE
                                     0000    65 		NUMIF,-			; IF STATMENT IS NUMERIC
                                     0000    66 		>
                                     0000    67  
                                     0000    68 ;
                                     0000    69 ; DEFINE WORK AREA OFFSETS
                                     0000    70 ;
                           FFFFFFE8  0000    71 	WRK_B_CUROP	= WRK_L_QUABLK	; RESULT OF CURRENT OPERATION
                           FFFFFFE9  0000    72 	WRK_B_PRVOP	= WRK_B_CUROP+1	; RESULT OF PREVIOUS OPERATION
                           FFFFFFEA  0000    73 	WRK_B_IFCOND	= WRK_B_PRVOP+1	; SAVED CONDITION FOR IF STATEMENT
                                     0000    74 	
                                     0000    75 ;
                                     0000    76 ; LOCAL DATA
                                     0000    77 ;
                                     0000    78  
                                 00000000    79 	.PSECT	MCR$ZDATA,BYTE,RD,NOWRT
                                     0000    80 IFTABL:					; DEFINE START OF IF COMMAND TABLE
                                 00000000    81 	.PSECT	MCR$ZCODE,BYTE,RD,NOWRT
                                     0000    82  
                        3C 3E 3D 00' 0000    83 IFCHRS:	.ASCIC	/=></			; IF RELATIONAL CHARS
                                 03  0000       
                                     0004    84 IFCEND:
                                     0004    85  
                                     0004    86 ;
                                     0004    87 ; RELATIONAL TABLES - ONE EACH FOR GRAHPIC FORM OF RELATIONAL OPERATORS
                                     0004    88 ;	AND ALPHA FORM.  THERE ORDER MUST BE THE SAME AND SUBSTRINGS
                                     0004    89 ;	OF OTHERS ONES MUST BE LATER IN THE TABLE.
                                     0004    90 ;
                                     0004    91  
                                     0004    92 ALPHAREL:				; ALPHA RELATIONAL TABLE
                           51 45 00' 0004    93 	.ASCIC	/EQ/			;
                                 02  0004       
                           45 47 00' 0007    94 	.ASCIC	/GE/			;
                                 02  0007       
                           45 4C 00' 000A    95 	.ASCIC	/LE/			;
                                 02  000A       
                           45 4E 00' 000D    96 	.ASCIC	/NE/			;
                                 02  000D       
                           54 4C 00' 0010    97 	.ASCIC	/LT/			;
                                 02  0010       
                           54 47 00' 0013    98 	.ASCIC	/GT/			;
                                 02  0013       
                                 00  0016    99 	.BYTE	0			; END OF TABLE
                                     0017   100  
                                     0017   101 GRAPHREL:				; GRAPHIC REALTIONAL OPERATORS
                              3D 00' 0017   102 	.ASCIC	/=/			;
                                 01  0017       
                           3D 3E 00' 0019   103 	.ASCIC	/>=/			;
                                 02  0019       
                           3D 3C 00' 001C   104 	.ASCIC	/<=/			;
                                 02  001C       
MCRIF           - IF MCR COMMAND EXECUTION                       22-AUG-1978 01:40:03   VAX-11 MACRO X0.3-11               Page   3
01                                                                                                                               (1)

                           3E 3C 00' 001F   105 	.ASCIC	/<>/			;
                                 02  001F       
                              3C 00' 0022   106 	.ASCIC	/</			;
                                 01  0022       
                              3E 00' 0024   107 	.ASCIC	/>/			;
                                 01  0024       
                                 00  0026   108 	.BYTE	0
MCRIF           - IF MCR COMMAND EXECUTION                       22-AUG-1978 01:40:03   VAX-11 MACRO X0.3-11               Page   4
01              IF COMMAND                                                                                                       (1)

                                     0027   110 	.SBTTL	IF COMMAND 
                                     0027   111 ;+
                                     0027   112 ; MCR$IF - IF COMMAND
                                     0027   113 ;
                                     0027   114 ; THIS ROUTINE IS CALLED AS AN INTERNAL COMMAND TO EXECUTE THE IF MCR COMMAND.
                                     0027   115 ;
                                     0027   116 ; INPUTS:
                                     0027   117 ;
                                     0027   118 ;	R6 = COMMAND BUFFER DISPLAY PARAMETER.
                                     0027   119 ;	R9 = ADDRESS OF NEXT BYTE IN COMMAND BUFFER.
                                     0027   120 ;	R10 = RESULT PARSE DESCRIPTOR TABLE POINTER.
                                     0027   121 ;	R11 = BASE ADDRESS OF PROCESS WORK AREA.
                                     0027   122 ;	FP = BASE ADDRESS OF COMMAND WORK AREA.
                                     0027   123 ;
                                     0027   124 ; OUTPUTS:
                                     0027   125 ;
                                     0027   126 ;	THE IF CLAUSE IS EVALUATED AND IF THE RESULTANT VALUE IS TRUE, THE
                                     0027   127 ;	THEN CLAUSE IS EXECUTED BY RETURNING CONTROL TO THE COMMAND EXECUTION
                                     0027   128 ;	ENTRY POINT. OTHERWISE CONTROL IS RETURNED VIA THE RETURN ADDRESS.
                                     0027   129 ;
                                     0027   130 ;	R0 LOW BIT CLEAR INDICATES EXPRESSION EVALUATION FAILURE.
                                     0027   131 ;
                                     0027   132 ;		R0 = MCR$_COMPLX - EXPRESSION TOO COMPLEX.
                                     0027   133 ;		R0 = MCR$_EXPSYN - EXPRESSION SYNTAX ERROR.
                                     0027   134 ;		R0 = MCR$_IVCHAR - INVALID CHARACTER IN NUMERIC STRING.
                                     0027   135 ;		R0 = MCR$_IVOPER - INVALID EXPRESSION OPERATOR.
                                     0027   136 ;		R0 = MCR$_UNDSYM - UNDEFINED SYMBOL.
                                     0027   137 ;
                                     0027   138 ;	R0 LOW BIT SET INDICATES SUCCESSFUL COMPLETION.
                                     0027   139 ;
                                     0027   140 ;		R0 = MCR$_NORMAL - NORMAL COMPLETION.
                                     0027   141 ;-
                                     0027   142  
                                 00000027   143 	.PSECT	MCR$ZCODE,BYTE,RD,NOWRT
                                     0027   144 	.ENABL	LSB
                                     0027   145 MCR$IF::				; IF COMMAND
         E8 AD            01     B0  0027   146 	MOVW	#1,WRK_B_CUROP(FP)	; SET CURRENT OP TO TRUE, PREVIOUS FALSE
                                     002B   147 	SETBIT	PRC_V_IND,PRC_W_FLAGS(R11) ;DISABLE INDIRECT FILE RECOGNITION
            55       0000'CF     9E  002F   148 10$:	MOVAB	W^IFTABL,R5		; SET ADDRESS OF TABLE TO SERCH
                          FFC9'  30  0034   149 	BSBW	MCR$SRCTBL		; LOOK UP THE COMMAND
            3F            50     E9  0037   150 	BLBC	R0,30$			; BR IF NOT AN "IF" COMMAND
            56            59     D0  003A   151 	MOVL	R9,R6			; SET ERROR DISPLAY REGISTER
                          1C     10  003D   152 	BSBB	20$			; CASE ON SELECTED COMMAND
            65            50     E9  003F   153 	BLBC	R0,60$			; BR IF ERROR EVALUATING IF
            56            59     D0  0042   154 	MOVL	R9,R6			; SET ERROR REPORTING POINTER
                                     0045   155 	SETNBLK				; PEEK AT NEXT NON-BLANK CHARACTER
                          50     95  0048   156 	TSTB	R0			; EOL?
                          58     13  004A   157 	BEQL	SYNERR			; BR IF YES - THATS A SYNTAX ERROR
            2E            50     91  004C   158 	CMPB	R0,#^A/./		; START OF ANOTHER INDIRECT COMMAND
                          3C     12  004F   159 	BNEQ	40$			; BR IF NO
                                     0051   160 	MOVCHAR				; COPY DOT TO COMMAND BUFFER
                                     0054   161 	GETOKEN				; GET THE COMMAND NAME
                          4B     13  0057   162 	BEQL	SYNERR			; BR IF BAD SYNTAX
                          D4     11  0059   163 	BRB	10$			; SEE IF COMMAND IS FOR "IF"
            01            54     AF  005B   164 20$:	CASEW	R4,#1,S^#<<<IFEND-IFDISP>/2>-1> ; DECODE OPERATION
                          0C'        005E       
                                     005F   165 IFDISP:	IFCOMD	IFT			;
MCRIF           - IF MCR COMMAND EXECUTION                       22-AUG-1978 01:40:03   VAX-11 MACRO X0.3-11               Page   5
01              IF COMMAND                                                                                                       (1)

                                     0061   166 	IFCOMD	IFF			;
                                     0063   167 	IFCOMD	IFDF			;
                                     0065   168 	IFCOMD	IFNDF			;
                                     0067   169 	IFCOMD	IFACT			;
                                     0069   170 	IFCOMD	IFNACT			;
                                     006B   171 	IFCOMD	IFINS			;
                                     006D   172 	IFCOMD	IFNINS			;
                                     006F   173 	IFCOMD	IFLOA			;
                                     0071   174 	IFCOMD	IFNLOA			;
                                     0073   175 	IFCOMD	IF
                                     0075   176 	IFCOMD	OR
                                     0077   177 	IFCOMD	AND
                                     0079   178 IFEND:	IFTERM
                                     0079   179  
                          51     D6  0079   180 30$:	INCL	R1			; ADD 1 TO LENGTH OF TOKEN
                          52     D7  007B   181 	DECL	R2			; BACK UP ADDRESS TO "."
            59            51     C2  007D   182 	SUBL	R1,R9			; BACK TOKEN OUT OF PARSE BUFFER
         FC AD            51     C3  0080   183 	SUBL3	R1,WRK_L_CHARPTR(FP),R0	; BACK UP CHARACTER POINTER
                          50         0084       
         FC AD            80     9E  0085   184 	MOVAB	(R0)+,WRK_L_CHARPTR(FP); RESET CHARATER POINTER
            62            51     28  0089   185 	MOVC	R1,(R2),(R0)		; COPY COMMAND BACK INTO INPUT
                          60         008C       
         F8 AD            00     E5  008D   186 40$:	BBCC	#IF_V_OPFLAG,WRK_W_LOCFLG(FP),SYNERR ; BR IF COMMAND SYNTAX
                          12         0091       
                                     0092   187 	CLRBIT	PRC_V_IND,PRC_W_FLAGS(R11) ;ENABLE INDIRECT FILE RECOGNITION
         E8 AD         E9 AD     88  0096   188 	BISB	WRK_B_PRVOP(FP),WRK_B_CUROP(FP) ; OR PRVIOUS WITH CURRENT
                          03     13  009B   189 	BEQL	50$			; BR IF CONDITION FALSE
                                     009D   190  
                                     009D   191 ;
                                     009D   192 ; EXECUTE THEN CLAUSE OF IF COMMAND
                                     009D   193 ;
                                     009D   194  
                          FF60'  31  009D   195 	BRW	MCR$CMDSTART		; 
                                     00A0   196  
                                     00A0   197 ;
                                     00A0   198 ; BYPASS THEN CLAUSE OF IF COMMAND
                                     00A0   199 ;
                                     00A0   200  
                                     00A0   201 50$:	STATUS	NORMAL			; SET NORMAL COMPLETION STATUS
                                 05  00A3   202 	RSB
                                     00A4   203  
                                     00A4   204 SYNERR:	STATUS	EXPSYN			; SET ERROR
                                 05  00A7   205 60$:	RSB				; 
                                     00A8   206  
                                     00A8   207 ;
                                     00A8   208 ; TESTS WHICH ARE ALWAYS FALSE
                                     00A8   209 ;
                                     00A8   210  
                                     00A8   211 IFACT:					; IF TASK ACTIVE
                                     00A8   212 IFNINS:					; IF TASK NOT INSTALLED
                                     00A8   213 IFNLOA:					; IF DRIVER NOT LOADED
                                     00A8   214 	SETBIT	IF_V_FALSE,WRK_W_LOCFLG(FP) ; FLAG RESULT FALSE
                                     00AC   215  
                                     00AC   216 ;
                                     00AC   217 ; TESTS WHICH ARE ALWAYS TRUE
                                     00AC   218 ;
                                     00AC   219  
MCRIF           - IF MCR COMMAND EXECUTION                       22-AUG-1978 01:40:03   VAX-11 MACRO X0.3-11               Page   6
01              IF COMMAND                                                                                                       (1)

                                     00AC   220 IFNACT:					; IF TASK IDLE
                                     00AC   221 IFINS:					; IF TASK INSTALLED
                                     00AC   222 IFLOA:					; IF DRIVER IS LOADED
                                     00AC   223 	GETOKEN				; GET THE NAME
                          0A     12  00AF   224 	BNEQ	65$			; BR IF VALID TOKEN
            2E            50     91  00B1   225 	CMPB	R0,#^A/./		; A LEADING DOT FOR TASK NAMES?
                          EE     12  00B4   226 	BNEQ	SYNERR			; BR IF NO TOKEN
                                     00B6   227 	MOVCHAR				; COPY DOT TO COMMAND BUFFER
                          F1     11  00B9   228 	BRB	IFLOA			; TRY AGAIN
            3A            50     91  00BB   229 65$:	CMPB	R0,#^A/:/		; NAME END WITH A COLON
                          03     12  00BE   230 	BNEQ	70$			; BR IF NO
                                     00C0   231 	MOVCHAR				; MOVE COLON TO COMMAND BUFFER
                          24     11  00C3   232 70$:	BRB	EXPTRU			; PROCESS THE EXPRESSION
                                     00C5   233 ;
                                     00C5   234 ; TEST FOR SYMBOL BEING DEFINED OR NOT
                                     00C5   235 ;
                                     00C5   236  
                                     00C5   237 IFNDF:	SETBIT	IF_V_FALSE,WRK_W_LOCFLG(FP) ; FLAG TEST IS TRUE IF FALSE
                                     00C9   238 IFDF:	GETOKEN				; GET SYMBOL NAME
                          D6     13  00CC   239 	BEQL	SYNERR			; BR IF ERROR GETTING SYMBOL NAME
                                     00CE   240 	SEARCH				; LLOK FOR SYMBOL
            0E            50     E9  00D1   241 	BLBC	R0,EXPFLS		; BR IF NOT FOUND
                          13     11  00D4   242 	BRB	EXPTRU			; EXPRESSION IS TRUE IF FOUND
                                     00D6   243  
                                     00D6   244 ;
                                     00D6   245 ; IFT/IFF COMMAND
                                     00D6   246 ;
                                     00D6   247 IFF:	SETBIT	IF_V_FALSE,WRK_W_LOCFLG(FP) ; INDICATE LOOKING FOR A FALSE
                          00CB   30  00DA   248 IFT:	BSBW	EVALSYM			; EVALUATE SYMBOL VALUE
                          C5     13  00DD   249 	BEQL	SYNERR			; BR IF STRING SYMBOL
            07            51     E8  00DF   250 	BLBS	R1,EXPTRU		; BR IF EXPRESSION WAS TRUE
         F8 AD            01     E4  00E2   251 EXPFLS:	BBSC	#IF_V_FALSE,WRK_W_LOCFLG(FP),TRUE ; BR IF FALSE = TRUE
                          0A         00E6       
                          05     11  00E7   252 	BRB	FALSE			;
                                     00E9   253  
         F8 AD            01     E5  00E9   254 EXPTRU:	BBCC	#IF_V_FALSE,WRK_W_LOCFLG(FP),TRUE ; BR IF TRUE = TRUE
                          03         00ED       
                                     00EE   255  
                       E8 AD     94  00EE   256 FALSE:	CLRB	WRK_B_CUROP(FP)		; INDICATE CURRENT IS FALSE
                                     00F1   257 TRUE:	SETBIT	IF_V_OPFLAG,WRK_W_LOCFLG(FP) ; FLAG OPERATION DONE
                                     00F5   258 	STATUS	NORMAL			;
                                 05  00F8   259 	RSB				;
                                     00F9   260 	.DSABL	LSB
         E9 AD         E8 AD     88  00F9   261 OR:	BISB	WRK_B_CUROP(FP),WRK_B_PRVOP(FP) ; OR CURRENT WITH PREVIOUS
         E8 AD            01     90  00FE   262 	MOVB	#1,WRK_B_CUROP(FP)	; SET CURRENT OPERATION TO TRUE
         F8 AD            00     E5  0102   263 AND:	BBCC	#IF_V_OPFLAG,WRK_W_LOCFLG(FP),SYNERR
                          9D         0106       
                                 05  0107   264 	RSB				;
                                     0108   265  
                                     0108   266 	.DSABL	LSB
                                     0108   267 ;
                                     0108   268 ; IF EXP1 REL EXP2 COMMAND
                                     0108   269 ;
                                     0108   270  
                                     0108   271 	.ENABL	LSB
                          009D   30  0108   272 IF:	BSBW	EVALSYM			; GET VALUE FOR FIRST SYMBOL
                          08     13  010B   273 	BEQL	30$			; BR IF STRING SYMBOL
MCRIF           - IF MCR COMMAND EXECUTION                       22-AUG-1978 01:40:03   VAX-11 MACRO X0.3-11               Page   7
01              IF COMMAND                                                                                                       (1)

            57            51     D0  010D   274 	MOVL	R1,R7			; SAVE LEFT HAND OPERAND
                                     0110   275 	SETBIT	#IF_V_NUMIF,WRK_W_LOCFLG(FP) ; FLAG DOING NUMERIC IF
            55       FEEB CF     9E  0115   276 30$:	MOVAB	ALPHAREL,R5		; ASSUME ALPHA REALTIONAL
            56            59     D0  011A   277 	MOVL	R9,R6			; SET ERROR PRINT OUT POINTER
                                     011D   278 	GETOKEN				; GET THE NEXT TOKEN
                          1E     12  0120   279 	BNEQ	60$			; BR IF TOKEN OBTAINED
            52            59     D0  0122   280 	MOVL	R9,R2			; COPY POINT IN COMMAND BUFFER
            04            50     3A  0125   281 40$:	LOCC	R0,#<IFCEND-IFCHRS>,IFCHRS ; IS THE ON OF THE RELATIONAL CHARS
                     FED5 CF         0128       
                          08     13  012B   282 	BEQL	50$			; BR IF NO
                                     012D   283 	MOVCHAR				; YES - COPY IT TO THE COMMAND BUFFER
                                     0130   284 	SETCHAR				; LOOK AT THE NEXT CHARACTER
                          F0     11  0133   285 	BRB	40$			; BR AND CHAECK IT
            59            52     C3  0135   286 50$:	SUBL3	R2,R9,R1		; FIND LENGTH OF RELATIONAL
                          51         0138       
                          1D     13  0139   287 	BEQL	65$			; BR IF NO RELATIONAL
            55       FED8 CF     9E  013B   288 	MOVAB	GRAPHREL,R5		; SET LIST OF GRAPHIC RELATIONAL
                          FEBD'  30  0140   289 60$:	BSBW	MCR$SRCTBL		; SEARCH FOR OPERATOR
            12            50     E9  0143   290 	BLBC	R0,65$			; BR IF SYNTAX ERROR
            54            02     85  0146   291 	MULB3	#2,R4,WRK_B_IFCOND(FP)	; SAVE CONDITION TO TEST
                       EA AD         0149       
            56            59     D0  014B   292 	MOVL	R9,R6			; SET ERROR PRINT OUT POINTER
         F8 AD            02     E1  014E   293 	BBC	#IF_V_NUMIF,WRK_W_LOCFLG(FP),70$ ; BR IF NOT DOING NUMERIC
                          08         0152       
                                     0153   294 	EXPRESS				; EVALUATE EXPRESSION
                          06     11  0156   295 	BRB	80$			;
                          FF49   31  0158   296 65$:	BRW	SYNERR			; REPORT SYNTAX ERROR
                          FEA2'  30  015B   297 70$:	BSBW	MCR$EVLSTRING		; EVALUTE A STRING OPERAND
            2F            50     E9  015E   298 80$:	BLBC	R0,150$			; ERROR EVALUATING EXPRESSION
            54         EA AD     9A  0161   299 	MOVZBL	WRK_B_IFCOND(FP),R4	; GET THE CONDITION TO TEST
                          55     D4  0165   300 	CLRL	R5			; INIT RESULT FALSE
         F8 AD            02     E5  0167   301 	BBCC	#IF_V_NUMIF,WRK_W_LOCFLG(FP),90$ ; BR IF STRING COMPAIR
                          05         016B       
            51            57     D1  016C   302 	CMPL	R7,R1			; COMPAIR THE OPERATORS
                          06     11  016F   303 	BRB	100$			;
            68            57     2D  0171   304 90$:	CMPC5	R7,(R8),#^A/ /,R1,(R2)	;
            51            20         0174       
                          62         0176       
                       82'AF44   16  0177   305 100$:	JSB	B^120$-2[R4]		; DECODE TEST
            03            55     E9  017B   306 	BLBC	R5,110$			; BR IF RESULT IS FALSE
                          FF70   31  017E   307 	BRW	TRUE			; INDICATE TRUE
                          FF6A   31  0181   308 110$:	BRW	FALSE			; 
                                     0184   309  
                          0B     11  0184   310 120$:	BRB	EQL			;
                          0C     11  0186   311 	BRB	GEQ			;
                          0D     11  0188   312 	BRB	LEQ			;
                          0E     11  018A   313 	BRB	NEQ			;
                          0F     11  018C   314 	BRB	LSS			;
                                     018E   315  
                          10     14  018E   316 GTR:	BGTR	SETRUE			; BR IF GTR AND SET TRUE
                                 05  0190   317 150$:	RSB				; ELSE RETURN WITH FALSE
                                     0191   318  
                          0D     13  0191   319 EQL:	BEQL	SETRUE			; BR IF EQL AND SET TRUE
                                 05  0193   320 	RSB				; ELSE RETURN WITH FALSE
                                     0194   321  
                          0A     18  0194   322 GEQ:	BGEQ	SETRUE			; BR IF GEQ AND SET TRUE
                                 05  0196   323 	RSB				; ELSE RETURN WITH FALSE
MCRIF           - IF MCR COMMAND EXECUTION                       22-AUG-1978 01:40:03   VAX-11 MACRO X0.3-11               Page   8
01              IF COMMAND                                                                                                       (1)

                                     0197   324  
                          07     15  0197   325 LEQ:	BLEQ	SETRUE			; BR IF LEQ AND SET TRUE
                                 05  0199   326 	RSB				; ELSE RETURN WITH FALSE
                                     019A   327  
                          04     12  019A   328 NEQ:	BNEQ	SETRUE			; BR IF NEQ AND SET TRUE
                                 05  019C   329 	RSB				; ELSE RETURN WITH FALSE
                                     019D   330  
                          01     19  019D   331 LSS:	BLSS	SETRUE			; BR IF LSS AND SET TRUE
                                 05  019F   332 	RSB				; ELSE RETURN WITH FALSE
                                     01A0   333  
                          55     D6  01A0   334 SETRUE:	INCL	R5			; SET THE RESULT TRUE
                                 05  01A2   335 	RSB
                                     01A3   336  
                                     01A3   337 	.DSABL	LSB
MCRIF           - IF MCR COMMAND EXECUTION                       22-AUG-1978 01:40:03   VAX-11 MACRO X0.3-11               Page   9
01              IF COMMAND                                                                                                       (1)

                                     01A3   339  
                                     01A3   340 ;
                                     01A3   341 ; EVALSYM - LOCAL SUBROUTIEN TO EVALUATE A SYMBOL
                                     01A3   342 ;
                                     01A3   343 ; THIS ROUTINE IS CALLED TO PARSE THE NEXT SYMBOL FROM THE COMMAND LINE,
                                     01A3   344 ; AND LOCATE IT IN THE SYMBOL TABLE.  IF THE SYMBOL IS UNDEFINED,
                                     01A3   345 ; ERROR STATUS IS RETURNED TO THE IF COMMAND DISPATCHER, OR RETURN WITH
                                     01A3   346 ; "Z" BIT SET INDICATES A STRING SYMBOL. OTHERWISE, THE NUMERIC VALUE OF
                                     01A3   347 ; THE SYMBOL IS DETERMINED AND RETURNED.
                                     01A3   348 ;
                                     01A3   349 ; INPUTS:
                                     01A3   350 ;
                                     01A3   351 ; OUTPUTS:
                                     01A3   352 ;
                                     01A3   353 ;	R7,R8 IS THE DESCRIPTOR OF THE SYMBOLS VALUE STRING
                                     01A3   354 ;
                                     01A3   355 ; FOR STRING VARIABLES:
                                     01A3   356 ;
                                     01A3   357 ;	"Z" CONDITION CODE = TRUE
                                     01A3   358 ;
                                     01A3   359 ; FOR NUMERIC SYMBOLS:
                                     01A3   360 ;
                                     01A3   361 ;	R1 IS THE VALUE
                                     01A3   362 ;
                                     01A3   363 	.ENABL	LSB
                                     01A3   364 ;
                                     01A3   365 ; FORM TABLE FOR SYMBOL CONVERSION RADIX
                                     01A3   366 ;
                                     01A3   367 	ASSUME	SYM_K_PERM    EQ 1	; PERMANENT SYMBOL
                                     01A3   368 	ASSUME	SYM_K_LOGICAL EQ 2	; LOGICAL VALUE
                                     01A3   369 	ASSUME	SYM_K_OCTAL   EQ 3	; OCTAL VALUE
                                     01A3   370 	ASSUME	SYM_K_DECIMAL EQ 4	; DECIMAL NUMERIC VALUE
                                     01A3   371 	ASSUME	SYM_K_HEXDEC  EQ 5	; HEXIDECIMAL VALUE
                                 01  01A3   372 10$:	.BYTE	PRC_K_DEC		; PERMANENT SYMBOLS HAVE DECIMAL RADIX
                                 02  01A4   373 	.BYTE	PRC_K_OCT		; LOGICALS ARE OCTAL
                                 02  01A5   374 	.BYTE	PRC_K_OCT		; OCTAL NUMERIC VALUES
                                 01  01A6   375 	.BYTE	PRC_K_DEC		; DECIMAL NUMERIC VALUES
                                 00  01A7   376 	.BYTE	PRC_K_HEX		; HEXIDECIMAL NUMERIC VALUES
                          34     10  01A8   377 EVALSYM:BSBB	MCR$GETSSYM		; ISOLATE SYMBOL NAME
            2E            50     E9  01AA   378 	BLBC	R0,50$			; BR IF ERROR IN SYMBOL NAME
                                     01AD   379 	SEARCH				; LOOK UP SYMBOL IN TABLE
            28            50     E9  01B0   380 	BLBC	R0,50$			; BR IF NO SUCH SYMBOL
            57            51     7D  01B3   381 	MOVQ	R1,R7			; SAVE DESCRIPTOR FOR SYMBOL VALUE
                                     01B6   382 	ASSUME	SYM_K_STRING EQ 0	;
            50         0A A3     9A  01B6   383 	MOVZBL	SYM_B_TYPE(R3),R0	; GET SYMBOL TYPE FIELD
                          1E     13  01BA   384 	BEQL	30$			; BR IF STRING SYMBOL
                          51     D4  01BC   385 	CLRL	R1			; ASSUME LOGICAL FALSE
            62         46 8F     91  01BE   386 	CMPB	#^A/F/,(R2)		; IS SYMBOL LOGICAL FLASE?
                          13     13  01C2   387 	BEQL	20$			; BR IF YES
                          51     D6  01C4   388 	INCL	R1			; SET TO LOGICAL TRUE
            62         54 8F     91  01C6   389 	CMPB	#^A/T/,(R2)		; IS IT TRUE?
                          0B     13  01CA   390 	BEQL	20$			; BR IF YES
            52            57     7D  01CC   391 	MOVQ	R7,R2			; SET DESCRIPTOR FOR STRING TO R2,R3
            51         CF AF40   9A  01CF   392 	MOVZBL	10$-1[R0],R1		; GET SYMBOL RADIX INDICATOR
                          FE29'  30  01D4   393 	BSBW	MCR$CNVASCBIN		; CONVERT NUMERIC SYMBOL TO BINARY
            50            01     9A  01D7   394 20$:	MOVZBL	#1,R0			; SET SUCCESS AND CLEAR "Z" BIT
                                 05  01DA   395 30$:	RSB
MCRIF           - IF MCR COMMAND EXECUTION                       22-AUG-1978 01:40:03   VAX-11 MACRO X0.3-11               Page  10
01              IF COMMAND                                                                                                       (1)

                                     01DB   396 ;
                                     01DB   397 ; ERROR ON SYMBOL - RETURN ERROR TO "IF" DISPATCHER
                                     01DB   398 ;
                          8E     D5  01DB   399 50$:	TSTL	(SP)+			; CLEAR INTERMEDIATE RETURN ADDRESS
                                 05  01DD   400 	RSB				; RETURN TO DISPATCHER
                                     01DE   401 	.DSABL	LSB
MCRIF           - IF MCR COMMAND EXECUTION                       22-AUG-1978 01:40:03   VAX-11 MACRO X0.3-11               Page  11
01              GET SPECIAL SYMBOL                                                                                               (1)

                                     01DE   403 	.SBTTL	GET SPECIAL SYMBOL
                                     01DE   404 ;+
                                     01DE   405 ; MCR$GETSSYM - GET SPECIAL SYMBOL
                                     01DE   406 ;
                                     01DE   407 ; THIS ROUTINE IS CALLED TO PARSE THE NEXT SYMBOL FROM THE COMMAND
                                     01DE   408 ; AND RETURN IT TO ITS CALLER. THE SYMBOL MAY BE ANY VALID TOKEN,
                                     01DE   409 ; OR A SPECIAL SYMBOL SYMBOL OF THE FORM "<SYMBOL>".
                                     01DE   410 ;
                                     01DE   411 ; INPUTS:
                                     01DE   412 ;
                                     01DE   413 ;	R6 = COMMAND BUFFER DISPLAY PARAMETER.
                                     01DE   414 ;	R9 = ADDRESS OF NEXT BYTE IN COMMAND BUFFER.
                                     01DE   415 ;	R10 = RESULT PARSE DESCRIPTOR TABLE POINTER.
                                     01DE   416 ;	R11 = BASE ADDRESS OF PROCESS WORK AREA.
                                     01DE   417 ;	FP = BASE ADDRESS OF COMMAND WORK AREA.
                                     01DE   418 ;
                                     01DE   419 ; OUTPUTS:
                                     01DE   420 ;
                                     01DE   421 ;	R0 LOW BIT CLEAR INDICATES SYMBOL SYNTAX ERROR
                                     01DE   422 ;
                                     01DE   423 ;		R0 = MCR$_SYMDEL - SYMBOL DELIMITER
                                     01DE   424 ;
                                     01DE   425 ;	R0 LOW BIT SET INDICATES SUCCESS
                                     01DE   426 ;
                                     01DE   427 ;		R1 = LENGTH OF SYMBOL
                                     01DE   428 ;		R2 = STARTING ADDRESS OF SYMBOL
                                     01DE   429 ;-
                                     01DE   430  
                                     01DE   431 MCR$GETSSYM::				; GET SPECIAL SYMBOL
            56            59     D0  01DE   432 	MOVL	R9,R6			; SET ERROR PRINT POINTER
                                     01E1   433 	GETOKEN				; GET THE NEXT TOKEN FROM THE COMMAND
                          15     12  01E4   434 	BNEQ	10$			; BR IF TOKEN FOUND OK
            3C            50     91  01E6   435 	CMPB	R0,#^A/</		; START OF SPECIAL SYMBOL
                          14     12  01E9   436 	BNEQ	20$			; BR IF NO - SYNTAX ERROR
                                     01EB   437 	MOVTOKN				; MOVE CHARACTER AND GET TOKEN
                          0F     13  01EE   438 	BEQL	20$			; BR IF BAD SYNTAX
                                     01F0   439 	MOVTERM	>			; MOVE THE TERMINATOR TO COMMAND BUFFER
                          09     12  01F4   440 	BNEQ	20$			; BR IF BAD SYNTAX
                          52     D7  01F6   441 	DECL	R2			; BACK UP POINTER TO LEADING BRACKET
            51            02     C0  01F8   442 	ADDL	#2,R1			; ADJUST LENGTH FOR BRACKETS
                                     01FB   443 10$:	STATUS	NORMAL			; GOOD RETURN
                                 05  01FE   444 	RSB				;
                                     01FF   445 20$:	STATUS	SYMDEL			; SET ERROR
                                 05  0203   446 	RSB				; RETURN THAT
                                     0204   447  
                                     0204   448 	.END
MCRIF           - IF MCR COMMAND EXECUTION                       22-AUG-1978 01:40:03   VAX-11 MACRO X0.3-11               Page  12
SYMBOL TABLE                                                                                                                     (1)

ALPHAREL         00000004 R     04   CLI$_ONLEVL    = 00038100            MCR$EXPRESS      ********   X   04   
AND              00000102 R     04   CLI$_ONOVF     = 00038108            MCR$GETOKEN      ********   X   04   
BIT...         = 00000003            CLI$_OVRFLW    = 00038160            MCR$GETSSYM      000001DE RG    04   
CLI$_ABFNAM    = 000381B8            CLI$_PARMDEL   = 00038110            MCR$IF           00000027 RG    04   
CLI$_ABKEYW    = 00038000            CLI$_PROC_ID   = 0003FFF1            MCR$MOVCHAR      ********   X   04   
CLI$_ABVERB    = 00038008            CLI$_QUEJOBCRE = 0003FFF9            MCR$MOVTERM      ********   X   04   
CLI$_BADRET    = 00038198            CLI$_REQPRMABS = 00038812            MCR$MOVTOKN      ********   X   04   
CLI$_BADTEXT   = 000381B0            CLI$_RSLOVF    = 00038118            MCR$SEARCH       ********   X   04   
CLI$_BUFOVF    = 00038018            CLI$_SKPDAT    = 00038120            MCR$SETCHAR      ********   X   04   
CLI$_COMPLX    = 00038020            CLI$_SPARE0    = 00038010            MCR$SETNBLK      ********   X   04   
CLI$_CONFQUAL  = 00038802            CLI$_SPARE1    = 00038058            MCR$SRCTBL       ********   X   04   
CLI$_CREQUEJOB = 0003884A            CLI$_STKOVF    = 00038128            MCR_M_ALPHAN   = 00000002            
CLI$_DEFOVF    = 00038028            CLI$_SUBMITERR = 00038852            MCR_M_DEFALT   = 00000008            
CLI$_DEVALSPL  = 0003885A            CLI$_SYMDEL    = 00038130            MCR_M_DELINP   = 00000080            
CLI$_DEVNOTFOR = 0003887A            CLI$_SYMOVF    = 00038138            MCR_M_DOLLARS  = 00000100            
CLI$_DEVNOTSPL = 00038862            CLI$_UNDFIL    = 00038188            MCR_M_ESCAPE   = 00000004            
CLI$_DIRECT    = 00038030            CLI$_UNDSYM    = 00038140            MCR_M_ESCTRM   = 00000200            
CLI$_EXPSYN    = 00038038            CLI$_UNPROPARM = 00038170            MCR_M_GLOBAL   = 00000400            
CLI$_FILOPN    = 00038190            CLI$_UNPROQUAL = 00038168            MCR_M_LOWER    = 00000800            
CLI$_ILLVAL    = 0003883A            CLI$_USGOTO    = 00038148            MCR_M_OPNINP   = 00000040            
CLI$_IMCHNG    = 00038040            CLI$_VALCNVERR = 00038832            MCR_M_RAD50    = 00000001            
CLI$_IMGFNF    = 00038872            CLI$_VALREQ    = 00038150            MCR_M_STRSUB   = 00001000            
CLI$_INSFPRM   = 00038048            CMDBUFSIZ      = 000001FC            MCR_V_ALPHAN   = 00000001            
CLI$_INVKEY    = 00038178            EQL              00000191 R     04   MCR_V_DEFALT   = 00000003            
CLI$_INVQUAL   = 0003880A            EVALSYM          000001A8 R     04   MCR_V_DELINP   = 00000007            
CLI$_INVQUALNUM= 0003881A            EXPFLS           000000E2 R     04   MCR_V_DOLLARS  = 00000008            
CLI$_INVREQTYP = 00038822            EXPTRU           000000E9 R     04   MCR_V_ESCAPE   = 00000002            
CLI$_INVRSP    = 00038180            FALSE            000000EE R     04   MCR_V_ESCTRM   = 00000009            
CLI$_INVUIC    = 000381A8            GBL...         = 00000000            MCR_V_FORCMD   = 0000000E            
CLI$_IVCHAR    = 00038050            GEQ              00000194 R     04   MCR_V_GLOBAL   = 0000000A            
CLI$_IVDEVTYPE = 0003886A            GRAPHREL         00000017 R     04   MCR_V_LOWER    = 0000000B            
CLI$_IVFNAM    = 000381C0            GTR              0000018E R     04   MCR_V_OPNINP   = 00000006            
CLI$_IVKEYW    = 00038060            IF               00000108 R     04   MCR_V_RAD50    = 00000000            
CLI$_IVOPER    = 00038068            IFACT            000000A8 R     04   MCR_V_STRSUB   = 0000000C            
CLI$_IVPROT    = 00038070            IFCEND           00000004 R     04   MSGBUFSIZ      = 00000084            
CLI$_IVQLOC    = 00038078            IFCHRS           00000000 R     04   NEQ              0000019A R     04   
CLI$_IVSYMB    = 00038080            IFDF             000000C9 R     04   OR               000000F9 R     04   
CLI$_IVVALU    = 00038088            IFDISP           0000005F R     04   PRC_B_DEFRADIX   00000092            
CLI$_IVVERB    = 00038090            IFEND            00000079 R     04   PRC_B_EXMDEPMOD  00000091            
CLI$_MAXPARM   = 00038098            IFF              000000D6 R     04   PRC_B_EXMDEPWID  00000090            
CLI$_MULKEY    = 000381A0            IFINS            000000AC R     04   PRC_K_DEC      = 00000001            
CLI$_NOATFIL   = 000380A0            IFLOA            000000AC R     04   PRC_K_HEX      = 00000000            
CLI$_NOCCAT    = 000380A8            IFNACT           000000AC R     04   PRC_K_LENGTH     000000A0            
CLI$_NOCOMD    = 000380B0            IFNDF            000000C5 R     04   PRC_K_OCT      = 00000002            
CLI$_NOKEYW    = 000380B8            IFNINS           000000A8 R     04   PRC_L_CLIWRK0    0000005C            
CLI$_NOLIST    = 000380C0            IFNLOA           000000A8 R     04   PRC_L_CLIWRK1    00000060            
CLI$_NOOPTPRS  = 00038842            IFT              000000DA R     04   PRC_L_CLIWRK2    00000064            
CLI$_NOQUAL    = 000380C8            IFTABL           00000000 R     03   PRC_L_CLIWRK3    00000068            
CLI$_NORMAL    = 00030001            IF_V_FALSE     = 00000001            PRC_L_CLIWRK4    0000006C            
CLI$_NOTNEG    = 000380D8            IF_V_NUMIF     = 00000002            PRC_L_ERRRAB     00000010            
CLI$_NOVALU    = 000380D0            IF_V_OPFLAG    = 00000000            PRC_L_EXMDEPADR  0000008C            
CLI$_NOVALUE   = 0003882A            INPBUFSIZ      = 00000084            PRC_L_EXTARG     00000078            
CLI$_NULFIL    = 000380E0            LEQ              00000197 R     04   PRC_L_EXTBLK     00000070            
CLI$_NUMBER    = 000380E8            LSS              0000019D R     04   PRC_L_EXTCOD     00000080            
CLI$_ONCOMD    = 000380F0            MCR$CMDSTART     ********   X   04   PRC_L_EXTHND     00000074            
CLI$_ONERR     = 000380F8            MCR$CNVASCBIN    ********   X   04   PRC_L_EXTPRM     0000007C            
CLI$_ONEVAL    = 00038158            MCR$EVLSTRING    ********   X   04   PRC_L_INDEPTH    00000048            
MCRIF           - IF MCR COMMAND EXECUTION                       22-AUG-1978 01:40:03   VAX-11 MACRO X0.3-11               Page  13
SYMBOL TABLE                                                                                                                     (1)

PRC_L_INDFAB     0000001C            SYM_B_TYPE       0000000A            WRK_W_FLAGS      FFFFFFFA            
PRC_L_INDINPRAB  00000014            SYM_K_DECIMAL  = 00000004            WRK_W_LOCFLG     FFFFFFF8            
PRC_L_INDOUTRAB  00000018            SYM_K_HEXDEC   = 00000005            _$$_           = 0000004C            
PRC_L_INPRAB     00000008            SYM_K_LOGICAL  = 00000002            
PRC_L_LSTSTATUS  00000094            SYM_K_OCTAL    = 00000003            
PRC_L_ONCTLY     0000009C            SYM_K_PERM     = 00000001            
PRC_L_ONERROR    00000058            SYM_K_STRING   = 00000000            
PRC_L_OUTRAB     0000000C            SYM_L_BL         00000004            
PRC_L_PROCUIC    00000098            SYM_L_FL         00000000            
PRC_L_SAVAP      00000000            SYM_T_SYMBOL     0000000C            
PRC_L_SAVFP      00000004            SYM_W_SIZE       00000008            
PRC_L_SEVERITY   00000040            SYNERR           000000A4 R     04   
PRC_L_STACKLM    00000088            TRUE             000000F1 R     04   
PRC_L_STACKPT    00000084            WRK_AB_BUFFER    FFFFFD44            
PRC_L_STATUS     00000044            WRK_AG_RESULT    FFFFFBC0            
PRC_L_SYMBOL     0000004C            WRK_B_CMDFLG     FFFFFFC9            
PRC_M_CNTRLY   = 00000002            WRK_B_CURADX     FFFFFFCA            
PRC_M_DBGQUAL  = 00000200            WRK_B_CUROP    = FFFFFFE8            
PRC_M_DBGTRUE  = 00000400            WRK_B_IFCOND   = FFFFFFEA            
PRC_M_DISABL   = 00000004            WRK_B_PARMCNT    FFFFFFCB            
PRC_M_EXIT     = 00000008            WRK_B_PRVOP    = FFFFFFE9            
PRC_M_GOEOF    = 00000001            WRK_B_VERBTYP    FFFFFFC8            
PRC_M_GOTO     = 00000010            WRK_K_LENGTH     FFFFFBC0            
PRC_M_HANGUP   = 00001000            WRK_L_CHARPTR    FFFFFFFC            
PRC_M_IND      = 00000020            WRK_L_IMAGE      FFFFFFEC            
PRC_M_MODE     = 00000040            WRK_L_MAXPARM    FFFFFFCC            
PRC_M_NOCTLY   = 00004000            WRK_L_MINPARM    FFFFFFD0            
PRC_M_PAUSE    = 00002000            WRK_L_PAROUT     FFFFFFF0            
PRC_M_USRDET   = 00000100            WRK_L_PROMPT     FFFFFFF4            
PRC_M_VERIFY   = 00000080            WRK_L_QUABLK     FFFFFFE8            
PRC_M_YLEVEL   = 00000800            WRK_L_RSLNXT     FFFFFD40            
PRC_Q_ALLOCREG   00000020            WRK_L_SAVAP      FFFFFFD8            
PRC_Q_GLOBAL     00000028            WRK_L_SAVFP      FFFFFFDC            
PRC_Q_LABEL      00000030            WRK_L_SAVSP      FFFFFFD4            
PRC_Q_LOCAL      00000038            WRK_M_ALL      = 00000001            
PRC_V_CNTRLY   = 00000001            WRK_M_ASK      = 00000100            
PRC_V_DBGQUAL  = 00000009            WRK_M_COMMAND  = 00000002            
PRC_V_DBGTRUE  = 0000000A            WRK_M_CONTINU  = 00000400            
PRC_V_DISABL   = 00000002            WRK_M_EQUAL    = 00000008            
PRC_V_EXIT     = 00000003            WRK_M_IMCHNG   = 00000004            
PRC_V_GOEOF    = 00000000            WRK_M_QUAL     = 00000010            
PRC_V_GOTO     = 00000004            WRK_M_QUOTE    = 00000020            
PRC_V_HANGUP   = 0000000C            WRK_M_STAR     = 00000040            
PRC_V_IND      = 00000005            WRK_M_TRAILSPC = 00000200            
PRC_V_MODE     = 00000006            WRK_M_VERB     = 00000080            
PRC_V_NOCTLY   = 0000000E            WRK_Q_IOSB       FFFFFFE0            
PRC_V_PAUSE    = 0000000D            WRK_V_ALL      = 00000000            
PRC_V_USRDET   = 00000008            WRK_V_ASK      = 00000008            
PRC_V_VERIFY   = 00000007            WRK_V_COMMAND  = 00000001            
PRC_V_YLEVEL   = 0000000B            WRK_V_CONTINU  = 0000000A            
PRC_W_CLIFLAG    00000052            WRK_V_EQUAL    = 00000003            
PRC_W_ERRIFI     00000052            WRK_V_IMCHNG   = 00000002            
PRC_W_FLAGS      00000054            WRK_V_QUAL     = 00000004            
PRC_W_INPCHAN    00000050            WRK_V_QUOTE    = 00000005            
PRC_W_ONLEVEL    00000056            WRK_V_STAR     = 00000006            
RSLBUFSIZ      = 00000180            WRK_V_TRAILSPC = 00000009            
SETRUE           000001A0 R     04   WRK_V_VERB     = 00000007            
MCRIF           - IF MCR COMMAND EXECUTION                       22-AUG-1978 01:40:03   VAX-11 MACRO X0.3-11               Page  14
PROGRAM SECTION SYNOPSIS                                                                                                         (1)



PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            FFFFFFFC      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
MCR$ZDATA        00000045      03     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD  NOWRT BYTE  
MCR$ZCODE        00000204      04     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD  NOWRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
16776. BYTES LEFT IN FREE MEMORY POOL.
442. BYTES OF RECLAIMED MEMORY.
OBJ$:MCRIF,LIS$:MCRIF/-SP=EXECML$/ML,LIB$:MCR/ML,SRC$:MCRIF
23 MLB DIR RDS - 451 GETS TO DEFINE 27 MACROS. 34 INTER. FILE WRITES. 
