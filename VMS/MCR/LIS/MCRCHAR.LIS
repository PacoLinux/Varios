MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (1)      55  LOCATE STRING BY INDEX NUMBER
   (1)      80  GENERATE RESULT PARSE DESCRIPTOR
   (1)     131  GET NEXT NONBLANK CHARACTER FROM INPUT BUFFER
   (1)     154  MOVE CHARACTER TO COMMAND BUFFER AND GET BLANK 
   (1)     175  MOVE CHARACTER TO COMMAND BUFFER AND GET TOKEN
   (1)     195  GETOKEN - GET TOKEN FROM INPUT BUFFER
   (1)     238  FORCE NONBLANK CHARACTER
   (1)     259  POINT TO NEXT NONBLANK CHARACTER IN INPUT BUFFE
   (1)     287  PEEK AT NEXT CHARACTER IN INPUT BUFFER
   (1)     314  TEST FOR SIGNIFICANT BLANK
   (1)     346  MOVE CHARACTER AND SET NON BLANK
   (1)     368  MOVE CHARACTER TO COMMAND BUFFER
   (1)     390  PUT CHARACTER IN COMMAND BUFFER
   (1)     445  GET - GET CHARACTER FROM INPUT BUFFER
   (1)     648  GET INPUT DATA
   (1)     683  EXPAND INPUT LINE
   (1)     730  GET EXPANSION SYMBOL
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page   1
01                                                                                                                               (1)

                                     0000     1 	.TITLE	MCRCHAR - CHARACTER MANIPULATION ROUTINES
                                     0000     2 	.IDENT	/01/
                                     0000     3 
                                     0000     4 ;
                                     0000     5 ; COPYRIGHT (C) 1977
                                     0000     6 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS 01754
                                     0000     7 ;
                                     0000     8 ; THIS SOFTWARE IS FURNISHED  UNDER A LICENSE FOR USE ONLY ON A SINGLE
                                     0000     9 ; COMPUTER  SYSTEM AND  MAY BE  COPIED ONLY WITH  THE INCLUSION OF THE
                                     0000    10 ; ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,
                                     0000    11 ; MAY NOT BE PROVIDED OR  OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
                                     0000    12 ; EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE
                                     0000    13 ; TERMS.  TITLE TO AND  OWNERSHIP OF THE  SOFTWARE  SHALL AT ALL TIMES
                                     0000    14 ; REMAIN IN DEC.
                                     0000    15 ;
                                     0000    16 ; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE
                                     0000    17 ; AND SHOULD  NOT BE CONSTRUED  AS A COMMITMENT  BY DIGITAL  EQUIPMENT
                                     0000    18 ; CORPORATION.
                                     0000    19 ;
                                     0000    20 ; DEC ASSUMES  NO  RESPONSIBILITY  FOR  THE USE OR  RELIABILITY OF ITS
                                     0000    21 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
                                     0000    22 ;
                                     0000    23 ; D. N. CUTLER 28-MAR-77
                                     0000    24 ;
                                     0000    25 ; CHARACTER MANIPULATION ROUTINES
                                     0000    26 ;
                                     0000    27 ; MACRO LIBRARY CALLS
                                     0000    28 ;
                                     0000    29  
                                     0000    30 	DEFCMDWRK			;DEFINE WORK AREA OFFSETS
                                     0000    31 	DEFERRCOD			;DEFINE ERROR/STATUS VALUES
                                     0000    32 	DEFPTRDSC			;DEFINE RESULT PARSE DESCRIPTOR FORMAT
                                     0000    33 	DEFSYMTBL			;DEFINE SYMBOL TABLE OFFSETS
                                     0000    34 	$PSLDEF				;DEFINE PROCESSOR STATUS FIELDS
                                     0000    35 	$RABDEF				;DEFINE RAB OFFSETS
                                     0000    36 	$SSDEF				;DEFINE SYSTEM STATUS VALUES
                                     0000    37  
                                     0000    38 ;
                                     0000    39 ; LOCAL DATA
                                     0000    40 ;
                                     0000    41  
                                 00000000    42 	.PSECT	MCR$ZCODE,BYTE,RD,NOWRT
                                     0000    43 MCR$HYPHEN::				;HYPHEN STRING
                              00 2D  0000    44 	.ASCII	/-/<0>			;
                                     0002    45 REPROMPT:				;CONTINUATION PROMPT STRING
                           5F 3E 00' 0002    46 	.ASCIC	/>_/			;
                                 02  0002       
                                     0005    47 TERMCLASS:				;ITEM TERMINATOR STRING
                  20 3A 2F 2B 2C 29  0005    48 	.ASCII	\),+/: \		;
                                     000B    49 TERMTAB:				;TERMINATOR TABLE
5C 26 3F 3E 5D 29 28 2D 2C 2B 2F 3A  000B    50 	.ASCII	D:/+,-()]>?&\=^!D<0>	;
                        00 21 5E 3D  0017       
                                     001B    51 BLANKTAB:				;SIGNIFICANT BLANK SEPARATOR
            20 3B 2E 3C 5B 27 2A 40  001B    52 	.ASCII	\@*'[<.; \		;
                                     0023    53 ENDTERM:				;REF LABEL
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page   2
01              LOCATE STRING BY INDEX NUMBER                                                                                    (1)

                                     0023    55 	.SBTTL	LOCATE STRING BY INDEX NUMBER
                                     0023    56 ;+
                                     0023    57 ; MCR$LOCATE - LOCATE STRING BY INDEX NUMBER
                                     0023    58 ;
                                     0023    59 ; THIS ROUTINE IS CALLED TO LOCATE A STRING IN A CHARACTER ARRAY 
                                     0023    60 ; OF COUNTED STRINGS BY INDEX.
                                     0023    61 ;
                                     0023    62 ; INPUTS:
                                     0023    63 ;
                                     0023    64 ;	R2 = ADDRESS OF CHARACTER ARRAY.
                                     0023    65 ;	R3 = STRING INDEX NUMBER.
                                     0023    66 ;
                                     0023    67 ; OUTPUTS:
                                     0023    68 ;
                                     0023    69 ;	R1 = LENGTH OF STRING.
                                     0023    70 ;	R2 = ADDRESS OF STRING.
                                     0023    71 ;-
                                     0023    72  
                                     0023    73 MCR$LOCATE::				;LOCATE STRING BY INDEX NUMBER
                          51     D4  0023    74 	CLRL	R1			;CLEAR INITIAL LENGTH
            52            51     C0  0025    75 10$:	ADDL	R1,R2			;POINT TO NEXT ENTRY IN TABLE
            51            82     9A  0028    76 	MOVZBL	(R2)+,R1		;GET COUNT AND ADDRESS
            F7            53     F4  002B    77 	SOBGEQ	R3,10$			;ANY MORE STRINGS TO SKIP OVER?
                                 05  002E    78 	RSB				;
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page   3
01              GENERATE RESULT PARSE DESCRIPTOR                                                                                 (1)

                                     002F    80 	.SBTTL	GENERATE RESULT PARSE DESCRIPTOR
                                     002F    81 ;+
                                     002F    82 ; MCR$GENDESCR - GENERATE RESULT PARSE DESCRIPTOR
                                     002F    83 ;
                                     002F    84 ; THIS ROUTINE IS CALLED TO GENERATE A LONGWORD DESCRIPTOR FOR A RESULT PARSE
                                     002F    85 ; ITEM.
                                     002F    86 ;
                                     002F    87 ; INPUTS:
                                     002F    88 ;
                                     002F    89 ;	R5 = ITEM TYPE.
                                     002F    90 ;	R6 = ITEM FLAGS.
                                     002F    91 ;	R7 = ITEM VALUE.
                                     002F    92 ;	R8 = STARTING ADDRESS OF ITEM.
                                     002F    93 ;	R9 = ADDRESS OF TERMINATOR CHARACTER IN COMMAND BUFFER.
                                     002F    94 ;	R10 = RESULT PARSE DESCRIPTOR TABLE POINTER.
                                     002F    95 ;
                                     002F    96 ; OUTPUTS:
                                     002F    97 ;
                                     002F    98 ;	THE SPECIFIED FIELDS ARE PACKED TOGETHER TO FORM A RESULT PARSE
                                     002F    99 ;	DESCRIPTOR LONGWORD AND THE RESULTANT VALUE IS STORED IN THE RESULT
                                     002F   100 ;	PARSE TABLE.
                                     002F   101 ;-
                                     002F   102  
                                     002F   103 MCR$GENDESCR::				;GENERATE RESULT PARSE DESCRIPTOR
                     FD40 CD     9F  002F   104 	PUSHAB	WRK_L_RSLNXT(FP)	;GET ENDING ADDRESS OF RESULT BUFFER
            5A            8E     D1  0033   105 	CMPL	(SP)+,R10		;ROOM FOR ANOTHER DESCRIPTOR?
                          3A     1B  0036   106 	BLEQU	20$			;IF LEQU NO
            00            57     F0  0038   107 	INSV	R7,#PTR_V_VALUE,#PTR_S_VALUE,- ;INSERT VALUE FIELD
                                     003B       
            6A            08         003B   108 		PTR_L_DESCR(R10)	;
                     FD44 CD     9F  003D   109 	PUSHAB	WRK_AB_BUFFER(FP)	;GET STARTING ADDRESS OF COMMAND BUFFER
            58            8E     C3  0041   110 	SUBL3	(SP)+,R8,R0		;CALCULATE OFFSET TO ITEM
                          50         0044       
            08            50     F0  0045   111 	INSV	R0,#PTR_V_OFFSET,#PTR_S_OFFSET,- ;INSERT OFFSET TO ITEM
                                     0048       
            6A            0C         0048   112 		PTR_L_DESCR(R10)	;
            14            56     F0  004A   113 	INSV	R6,#PTR_V_FLAGS,#PTR_S_FLAGS,- ;INSERT ITEM FLAGS
                                     004D       
            6A            04         004D   114 		PTR_L_DESCR(R10)	;
            06            69     3A  004F   115 	LOCC	(R9),#TERMTAB-TERMCLASS,TERMCLASS ;SEARCH FOR TERMINATOR
                       B1 AF         0052       
                          0A     12  0054   116 	BNEQ	10$			;IF NEQ TERMINATOR FOUND
                          50     D6  0056   117 	INCL	R0			;SET TERMINATOR CLASS TO BLANK
            69            3D     91  0058   118 	CMPB	#^A/=/,(R9)		;EQUAL TERMINATOR?
                          03     12  005B   119 	BNEQ	10$			;IF NEQ NO
            50            02     9A  005D   120 	MOVZBL	#PTR_K_COLON,R0		;SET TERMINATOR CLASS TO COLON
            18            50     F0  0060   121 10$:	INSV	R0,#PTR_V_TERM,#PTR_S_TERM,- ;INSERT TERMINATOR CLASS NUMBER
                                     0063       
            6A            04         0063   122 		PTR_L_DESCR(R10)	;
            1C            55     F0  0065   123 	INSV	R5,#PTR_V_TYPE,#PTR_S_TYPE,- ;INSERT ITEM TYPE
                                     0068       
            6A            04         0068   124 		PTR_L_DESCR(R10)	;
                          8A     D5  006A   125 	TSTL	(R10)+			;POINT TO NEXT ITEM IN BUFFER
       FD40 CD            5A     D0  006C   126 	MOVL	R10,WRK_L_RSLNXT(FP)	;SAVE ADDRESS OF NEXT DESCRIPTOR
                                 05  0071   127 	RSB				;
                                     0072   128 20$:	ERRMSG	RSLOVF			;OUTPUT ERROR MESSAGE
                          0167   31  0079   129 	BRW	ERROR			;
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page   4
01              GET NEXT NONBLANK CHARACTER FROM INPUT BUFFER                                                                    (1)

                                     007C   131 	.SBTTL	GET NEXT NONBLANK CHARACTER FROM INPUT BUFFER
                                     007C   132 ;+
                                     007C   133 ; MCR$GETNBLK - GET NEXT NONBLANK CHARACTER FROM INPUT BUFFER
                                     007C   134 ;
                                     007C   135 ; THIS ROUTINE IS CALLED TO OBTAIN THE NEXT NONBLANK CHARACTER FROM THE INPUT
                                     007C   136 ; BUFFER.
                                     007C   137 ;
                                     007C   138 ; INPUTS:
                                     007C   139 ;
                                     007C   140 ;	NONE.
                                     007C   141 ;
                                     007C   142 ; OUTPUTS:
                                     007C   143 ;
                                     007C   144 ;	CHARACTERS ARE OBTAINED FROM THE INPUT BUFFER UNTIL A NONBLANK
                                     007C   145 ;	CHARACTER IS ENCOUNTERED.
                                     007C   146 ;
                                     007C   147 ;	R0 = NONBLANK CHARACTER.
                                     007C   148 ;-
                                     007C   149  
                                     007C   150 MCR$GETNBLK::				;GET NEXT NONBLANK CHARACTER
                          45     10  007C   151 	BSBB	MCR$SETNBLK		;POINT TO NEXT NONBLANK CHARACTER
                          00AB   31  007E   152 	BRW	MCR$GETCHAR		;RETURN NEXT CHARACTER TO CALLER
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page   5
01              MOVE CHARACTER TO COMMAND BUFFER AND GET BLANK                                                                   (1)

                                     0081   154 	.SBTTL	MOVE CHARACTER TO COMMAND BUFFER AND GET BLANK TOKEN
                                     0081   155 ;+
                                     0081   156 ; MCR$MOVBTOKN - MOVE CHARACTER TO COMMAND BUFFER AND GET BLANK TOKEN
                                     0081   157 ;
                                     0081   158 ; THIS ROUTINE IS CALLED TO PERFORM THE COMBINED OPERATION OF MOVING THE NEXT
                                     0081   159 ; CHARACTER TO THE COMMAND BUFFER AND THEN OBTAINING THE NEXT BLANK TOKEN.
                                     0081   160 ;
                                     0081   161 ; INPUTS:
                                     0081   162 ;
                                     0081   163 ;	NONE.
                                     0081   164 ;
                                     0081   165 ; OUTPUTS:
                                     0081   166 ;
                                     0081   167 ;	THE NEXT CHARACTER IS MOVED TO THE COMMAND BUFFER AND THEN THE NEXT
                                     0081   168 ;	BLANK TOKEN IS OBTAINED.
                                     0081   169 ;-
                                     0081   170  
                                     0081   171 MCR$MOVBTOKN::				;MOVE CHARACTER AND GET TOKEN
                          007E   30  0081   172 	BSBW	MCR$MOVCHAR		;MOVE CHARACTER TO COMMAND BUFFER
                          05     11  0084   173 	BRB	MCR$GTBTOKEN		;GET NEXT BLANK TOKEN
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page   6
01              MOVE CHARACTER TO COMMAND BUFFER AND GET TOKEN                                                                   (1)

                                     0086   175 	.SBTTL	MOVE CHARACTER TO COMMAND BUFFER AND GET TOKEN
                                     0086   176 ;+
                                     0086   177 ; MCR$MOVTOKN - MOVE CHARACTER TO COMMAND BUFFER AND GET TOKEN
                                     0086   178 ;
                                     0086   179 ; THIS ROUTINE IS CALLED TO PERFORM THE COMBINED OPERATION OF MOVING THE NEXT
                                     0086   180 ; CHARACTER TO THE COMMAND BUFFER AND THEN OBTAINING THE NEXT TOKEN.
                                     0086   181 ;
                                     0086   182 ; INPUTS:
                                     0086   183 ;
                                     0086   184 ;	NONE.
                                     0086   185 ;
                                     0086   186 ; OUTPUTS:
                                     0086   187 ;
                                     0086   188 ;	THE NEXT CHARACTER IS MOVED TO THE COMMAND BUFFER AND THEN THE NEXT
                                     0086   189 ;	TOKEN IS OBTAINED.
                                     0086   190 ;-
                                     0086   191  
                                     0086   192 MCR$MOVTOKN::				;MOVE CHARACTER AND GET TOKEN
                          0079   30  0086   193 	BSBW	MCR$MOVCHAR		;MOVE CHARACTER TO COMMAND BUFFER
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page   7
01              GETOKEN - GET TOKEN FROM INPUT BUFFER                                                                            (1)

                                     0089   195 	.SBTTL	GETOKEN - GET TOKEN FROM INPUT BUFFER
                                     0089   196 ;+
                                     0089   197 ; MCR$GETOKEN - GET TOKEN FROM INPUT BUFFER WITH INSIGNIFICANT LEADING BLANKS
                                     0089   198 ; MCR$GTBTOKEN - GET TOKEN FROM INPUT BUFFER WITH SIGNIFICANT LEADING BLANKS
                                     0089   199 ;
                                     0089   200 ; THIS ROUTINE IS CALLED TO SCAN THE INPUT BUFFER UNTIL A DELIMITER IS FOUND.
                                     0089   201 ; WHILE THE BUFFER IS BEING SCANNED, THE RESULTANT TOKEN IS COPIED INTO THE
                                     0089   202 ; COMMAND BUFFER. WHEN A TERMINATOR IS RECOGNIZED, THE DESCRIPTOR FOR THE
                                     0089   203 ; TOKEN IS RETURNED TO THE CALLER ALONG WITH THE TERMINATOR.
                                     0089   204 ;
                                     0089   205 ; INPUTS:
                                     0089   206 ;
                                     0089   207 ;	NONE.
                                     0089   208 ;
                                     0089   209 ; OUTPUTS:
                                     0089   210 ;
                                     0089   211 ;	R0 = TERMINATOR CHARACTER.
                                     0089   212 ;	R1 = LENGTH OF OUTPUT TOKEN.
                                     0089   213 ;	R2 = ADDRESS OF OUTPUT TOKEN.
                                     0089   214 ;
                                     0089   215 ;	Z = 1 IF NO TOKEN IS BEING RETURNED.
                                     0089   216 ;	Z = 0 IF A TOKEN IS BEING RETURNED.
                                     0089   217 ;-
                                     0089   218 
                                     0089   219 MCR$GETOKEN::				;GET TOKEN FROM INPUT BUFFER
                          38     10  0089   220 	BSBB	MCR$SETNBLK		;POINT TO NEXT NONBLANK CHARACTER
                                     008B   221 MCR$GTBTOKEN::				;GET TOKEN FROM INPUT BUFFER
            59            5D     C3  008B   222 	SUBL3	FP,R9,R2		;FIND OFFSET TO START OF TOKEN IN BUUFER
                          52         008E       
                          0070   30  008F   223 10$:	BSBW	MCR$MOVCHAR		;MOVE CHARACTER TO COMMAND BUFFER
         FA AD            05     E0  0092   224 	BBS	#WRK_V_QUOTE,WRK_W_FLAGS(FP),10$ ;IF SET, QUOTE IN PROGRESS
                          F8         0096       
         FA AD            06     E0  0097   225 	BBS	#WRK_V_STAR,WRK_W_FLAGS(FP),20$ ;IF SET, ASTERISK IS TERMINATOR
                          05         009B       
            50            2A     91  009C   226 	CMPB	#^A/*/,R0		;ASTERISK?
                          EE     13  009F   227 	BEQL	10$			;IF EQL YES
            18            50     3A  00A1   228 20$:	LOCC	R0,#ENDTERM-TERMTAB,TERMTAB ;SEARCH FOR TERMINATOR
                     FF64 CF         00A4       
                          E6     13  00A7   229 	BEQL	10$			;IF EQL TERMINATOR NOT FOUND
                          59     D7  00A9   230 	DECL	R9			;BACK UP TO TERMINATOR
            50            61     9A  00AB   231 	MOVZBL	(R1),R0			;RETRIEVE TERMINATOR
         FC BD            50     90  00AE   232 	MOVB	R0,@WRK_L_CHARPTR(FP)	;RESTORE TERMINATOR IN INPUT BUFFER
                       FC AD     D7  00B2   233 	DECL	WRK_L_CHARPTR(FP)	;BACK UP TO TERMINATOR IN INPUT BUFFER
            52            5D     C0  00B5   234 	ADDL	FP,R2			;FIND START OF TOKEN IN BUFFER
            59            52     C3  00B8   235 	SUBL3	R2,R9,R1		;CALCULATE LENGTH OF ITEM
                          51         00BB       
                                 05  00BC   236 	RSB				;
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page   8
01              FORCE NONBLANK CHARACTER                                                                                         (1)

                                     00BD   238 	.SBTTL	FORCE NONBLANK CHARACTER
                                     00BD   239 ;+
                                     00BD   240 ; MCR$FORNBLK - FORCE NONBLANK CHARACTER
                                     00BD   241 ;
                                     00BD   242 ; THIS ROUTINE IS CALLED TO FORCE AN INPUT AND THEN SET THE CHARACTER POINTER
                                     00BD   243 ; TO THE NEXT NONBLANK CHARACTER.
                                     00BD   244 ;
                                     00BD   245 ; INPUTS:
                                     00BD   246 ;
                                     00BD   247 ;	NONE.
                                     00BD   248 ;
                                     00BD   249 ; OUTPUTS:
                                     00BD   250 ;
                                     00BD   251 ;	THE NEXT CHARACTER POINTER IS SET TO POINT TO A STRING CONTAINING
                                     00BD   252 ;	A HYPHEN FOLLOWED BY AN END OF LINE. A SET NONBLANK OPERATION IS
                                     00BD   253 ;	THEN PERFORMED.
                                     00BD   254 ;-
                                     00BD   255  
                                     00BD   256 MCR$FORNBLK::				;FORCE NONBLANK CHARACTER
         FC AD       FF3E CF     9E  00BD   257 	MOVAB	MCR$HYPHEN-1,WRK_L_CHARPTR(FP) ;SET TO FORCE INPUT ON NEXT GET
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page   9
01              POINT TO NEXT NONBLANK CHARACTER IN INPUT BUFFE                                                                  (1)

                                     00C3   259 	.SBTTL	POINT TO NEXT NONBLANK CHARACTER IN INPUT BUFFER
                                     00C3   260 ;+
                                     00C3   261 ; MCR$SETNBLK - POINT TO NEXT NONBLANK CHARACTER IN INPUT BUFFER
                                     00C3   262 ;
                                     00C3   263 ; THIS ROUTINE IS CALLED TO SET THE INPUT BUFFER POINTER TO THE NEXT NONBLANK
                                     00C3   264 ; CHARACTER.
                                     00C3   265 ;
                                     00C3   266 ; INPUTS:
                                     00C3   267 ;
                                     00C3   268 ;	NONE.
                                     00C3   269 ;
                                     00C3   270 ; OUTPUTS:
                                     00C3   271 ;
                                     00C3   272 ;	CHARACTERS ARE OBTAINED FROM THE INPUT BUFFER UNTIL A NONBLANK CHAR-
                                     00C3   273 ;	ACTER IS ENCOUNTERED AND THE INPUT BUFFER POINTER IS RETURNED TO ITS
                                     00C3   274 ;	POSITION BEFORE THE LAST GET CHARACTER OPERATION.
                                     00C3   275 ;
                                     00C3   276 ;	R0 = NONBLANK CHARACTER.
                                     00C3   277 ;-
                                     00C3   278  
                                     00C3   279 	.ENABL	LSB
                                     00C3   280 MCR$SETNBLK::				;POINT TO NEXT NONBLANK CHARACTER
                          67     10  00C3   281 	BSBB	MCR$GETCHAR		;GET NEXT CHARACTER FROM INPUT BUFFER
                          12     13  00C5   282 	BEQL	20$			;IF EQL END OF LINE
            50            20     91  00C7   283 	CMPB	#^A/ /,R0		;BLANK?
                          F7     13  00CA   284 	BEQL	MCR$SETNBLK		;IF EQL YES
                          04     11  00CC   285 	BRB	10$			;
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page  10
01              PEEK AT NEXT CHARACTER IN INPUT BUFFER                                                                           (1)

                                     00CE   287 	.SBTTL	PEEK AT NEXT CHARACTER IN INPUT BUFFER
                                     00CE   288 ;+
                                     00CE   289 ; MCR$SETCHAR - PEEK AT NEXT CHARACTER IN INPUT BUFFER
                                     00CE   290 ;
                                     00CE   291 ; THIS ROUTINE IS CALLED TO OBTAIN THE NEXT CHARACTER IN THE INPUT BUFFER
                                     00CE   292 ; WITHOUT MOVING THE BUFFER POINTER.
                                     00CE   293 ;
                                     00CE   294 ; INPUTS:
                                     00CE   295 ;
                                     00CE   296 ;	NONE.
                                     00CE   297 ;
                                     00CE   298 ; OUTPUTS:
                                     00CE   299 ;
                                     00CE   300 ;	THE NEXT CHARACTER IS OBTAINED FROM THE INPUT BUFFER AND THE CHARACTER
                                     00CE   301 ;	POINTER IS RETURNED TO ITS POSITION BEFORE THE GET CHARACTER OPERATION.
                                     00CE   302 ;
                                     00CE   303 ;	R0 = NEXT CHARACTER IN INPUT BUFFER.
                                     00CE   304 ;+
                                     00CE   305  
                                     00CE   306 MCR$SETCHAR::				;PEEK AT NEXT CHARACTER
                          5C     10  00CE   307 	BSBB	MCR$GETCHAR		;GET NEXT CHARACTER FROM INPUT BUFFER
                          07     13  00D0   308 	BEQL	20$			;IF EQL END OF LINE
         FA AD            20     AA  00D2   309 10$:	BICW	#WRK_M_QUOTE,WRK_W_FLAGS(FP) ;TURN OFF QUOTATION FLAG
                       FC AD     D7  00D6   310 	DECL	WRK_L_CHARPTR(FP)	;BACK UP INPUT BUFFER POINTER
                                 05  00D9   311 20$:	RSB				;
                                     00DA   312 	.DSABL	LSB
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page  11
01              TEST FOR SIGNIFICANT BLANK                                                                                       (1)

                                     00DA   314 	.SBTTL	TEST FOR SIGNIFICANT BLANK
                                     00DA   315 ;+
                                     00DA   316 ; MCR$TESTBLANK - TEST FOR SIGNIFICANT BLANK
                                     00DA   317 ;
                                     00DA   318 ; THIS ROUTINE IS CALLED TO TEST IF THE NEXT CHARACTER IN THE INPUT BUFFER IS
                                     00DA   319 ; A SIGNIFICANT BLANK.
                                     00DA   320 ;
                                     00DA   321 ; INPUTS:
                                     00DA   322 ;
                                     00DA   323 ;	NONE.
                                     00DA   324 ;
                                     00DA   325 ; OUTPUTS:
                                     00DA   326 ;
                                     00DA   327 ;	IF THE NEXT CHARACTER IN THE INPUT BUFFER IS A BLANK AND IT IS NOT
                                     00DA   328 ;	SIGNIFICANT, THEN IT IS REMOVED FROM THE INPUT STREAM.
                                     00DA   329 ;-
                                     00DA   330  
                                     00DA   331 MCR$TESTBLANK::				;TEST FOR SIGNIFICANT BLANK
                          26     10  00DA   332 	BSBB	MCR$MOVCHAR		;PEEK AT NEXT CHARACTER IN INPUT BUFFER
            50            20     91  00DC   333 	CMPB	#^A/ /,R0		;BLANK?
                          11     12  00DF   334 	BNEQ	10$			;IF NEQ NO
                          EB     10  00E1   335 	BSBB	MCR$SETCHAR		;PEEK AT NEXT CHARACTER IN INPUT BUFFER
            10            50     3A  00E3   336 	LOCC	R0,#BLANKTAB-TERMTAB,TERMTAB ;SEARCH FOR TERMINATOR
                     FF22 CF         00E6       
                          07     13  00E9   337 	BEQL	10$			;BR IF BLANK IS SIGNIFICANT
         FF A9            61     90  00EB   338 	MOVB	(R1),-1(R9)		;PUT REAL TERMINATOR OVER BLANK
                       FC AD     D6  00EF   339 	INCL	WRK_L_CHARPTR(FP)	;ADJUST POINTER FOR THE BLANK
            50            79     90  00F2   340 10$:	MOVB	-(R9),R0		;GET TERMINATOR FROM PARSE BUFFER
                          07     13  00F5   341 	BEQL	20$			;BR IF END OF LINE-NO NEED TO RESTORE
                       FC AD     D7  00F7   342 	DECL	WRK_L_CHARPTR(FP)	;BACK UP INPUT BUFFER POINTER
         FC BD            50     90  00FA   343 	MOVB	R0,@WRK_L_CHARPTR(FP)	;RESTORE TERMINATOR IN INPUT BUFFER
                                 05  00FE   344 20$:	RSB				;
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page  12
01              MOVE CHARACTER AND SET NON BLANK                                                                                 (1)

                                     00FF   346 	.SBTTL	MOVE CHARACTER AND SET NON BLANK
                                     00FF   347 ;+
                                     00FF   348 ; MCR$TESTBLANK - TEST FOR SIGNIFICANT BLANK
                                     00FF   349 ; MCR$MOVNCHR - MOVE CHARACTER AND SET NON-BLANK
                                     00FF   350 ;
                                     00FF   351 ; THIS ROUTINE IS CALLED TO PERFORM THE COMBINED FUNCTION OF MOVE
                                     00FF   352 ; CHARACTER TO COMMAND BUFFER AND SET NON-BLANK.
                                     00FF   353 ;
                                     00FF   354 ; INPUTS:
                                     00FF   355 ;
                                     00FF   356 ;	NONE.
                                     00FF   357 ;
                                     00FF   358 ; OUTPUTS:
                                     00FF   359 ;
                                     00FF   360 ;	THE CURRENT CHARACTER IS COPIED TO THE COMMAND BUFFER AND
                                     00FF   361 ;	INTERVENING BLANKS ARE SKIPPED.
                                     00FF   362 ;-
                                     00FF   363  
                                     00FF   364 MCR$MOVNCHR::				;
                       C1 AF     9F  00FF   365 	PUSHAB	MCR$SETNBLK		; PLACE TO GO AFTER MOVE
                                     0102   366 					; FALL INTO MOVE CHARACTER
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page  13
01              MOVE CHARACTER TO COMMAND BUFFER                                                                                 (1)

                                     0102   368 	.SBTTL	MOVE CHARACTER TO COMMAND BUFFER
                                     0102   369 ;+
                                     0102   370 ; MCR$MOVCHAR - MOVE CHARACTER TO COMMAND BUFFER
                                     0102   371 ;
                                     0102   372 ; THIS ROUTINE IS CALLED TO MOVE A CHARACTER FROM THE INPUT BUFFER TO THE
                                     0102   373 ; COMMAND BUFFER.
                                     0102   374 ;
                                     0102   375 ; INPUTS:
                                     0102   376 ;
                                     0102   377 ;	NONE.
                                     0102   378 ;
                                     0102   379 ; OUTPUTS:
                                     0102   380 ;
                                     0102   381 ;	THE NEXT CHARACTER IS OBTAINED FROM THE INPUT BUFFER AND WRITTEN INTO
                                     0102   382 ;	THE COMMAND BUFFER.
                                     0102   383 ;
                                     0102   384 ;	R0 = CHARACTER MOVED.
                                     0102   385 ;-
                                     0102   386  
                                     0102   387 MCR$MOVCHAR::				;MOVE CHARACTER TO COMMAND BUFFER
                          28     10  0102   388 	BSBB	MCR$GETCHAR		;GET NEXT CHARACTER FROM INPUT BUFFER
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page  14
01              PUT CHARACTER IN COMMAND BUFFER                                                                                  (1)

                                     0104   390 	.SBTTL	PUT CHARACTER IN COMMAND BUFFER
                                     0104   391 ;+
                                     0104   392 ; MCR$PUTCHAR - PUT CHARACTER IN COMMAND BUFFER
                                     0104   393 ;
                                     0104   394 ; THIS ROUTINE IS CALLED TO WRITE A CHARACTER INTO THE COMMAND BUFFER.
                                     0104   395 ;
                                     0104   396 ; INPUTS:
                                     0104   397 ;
                                     0104   398 ;	R0 = CHARACTER TO BE WRITTEN IN COMMAND BUFFER.
                                     0104   399 ;	R9 = ADDRESS OF NEXT BYTE IN COMMAND BUFFER.
                                     0104   400 ;
                                     0104   401 ; OUTPUTS:
                                     0104   402 ;
                                     0104   403 ;	THE SPECIFIED CHARACTER IS WRITTEN INTO THE COMMAND BUFFER AFTER
                                     0104   404 ;	HAVING CHECKED FOR BUFFER OVERFLOW.
                                     0104   405 ;
                                     0104   406 ;	R0 = CHARACTER WRITTEN.
                                     0104   407 ;-
                                     0104   408  
                                     0104   409 MCR$PUTCHAR::				;PUT CHARACTER IN COMMAND BUFFER
                     FF40 CD     9F  0104   410 	PUSHAB	WRK_AB_BUFFER+CMDBUFSIZ(FP) ;GET ENDING ADDRESS OF COMMAND BUFFER
            59            8E     D1  0108   411 	CMPL	(SP)+,R9		;ROOM FOR ANOTHER CHARACTER?
                          04     1B  010B   412 	BLEQU	10$			;IF LEQU NO
            89            50     90  010D   413 	MOVB	R0,(R9)+		;STORE CHARACTER IN COMMAND BUFFER
                                 05  0110   414 	RSB				;
            56            59     D0  0111   415 10$:	MOVL	R9,R6			;SET FOR NO ERROR SEGMENT
                                     0114   416 	ERRMSG	BUFOVF			;OUTPUT ERROR MESSAGE
         54 AB            20     AA  011A   417 	BICW	#PRC_M_IND,PRC_W_FLAGS(R11) ;CLEAR INDIRECT IN PROGRESS
                          00C2   31  011E   418 	BRW	ERROR			;
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page  15
01              PUT CHARACTER IN COMMAND BUFFER                                                                                  (1)

                                     0121   420 ;+
                                     0121   421 ; MCR$MOVTERM - MOVE TERMINATING CHARACTER
                                     0121   422 ;
                                     0121   423 ; THIS ROUTINE IS CALLED TO MOVE THE TERMINATOR INTO THE COMMAND BUFFER
                                     0121   424 ; AND VERIFY THAT IT IS A SPECFIC CHARACTER.
                                     0121   425 ;
                                     0121   426 ; INPUTS:
                                     0121   427 ;
                                     0121   428 ;	CHARACTER IS FIRST BYTE AFTER JSB/BSB INSTRUCTION
                                     0121   429 ;
                                     0121   430 ; OUTPUTS:
                                     0121   431 ;
                                     0121   432 ;	THE TERMINATOR IS MOVED AND IT IS COMPAIRED WITH THE
                                     0121   433 ;	THE EXPECTED TERMINATOR
                                     0121   434 ;
                                     0121   435 ;	R0 CONTAINS THE CHARACTER MOVED
                                     0121   436 ;-
                                     0121   437  
                                     0121   438 MCR$MOVTERM::				; MOVE TERMINATOR
                          DF     10  0121   439 	BSBB	MCR$MOVCHAR		; MOVE THE TERMINATOR
                          6E     DD  0123   440 	PUSHL	(SP)			; COPY RETURN PC
                       04 AE     D6  0125   441 	INCL	4(SP)			; ADJUST RETURN ADDRESS
            9E            50     91  0128   442 	CMPB	R0,@(SP)+		; CHECK FOR THE PROPER CHARACTER
                                 05  012B   443 	RSB				; RETURN WITH CONDITION CODES SET
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page  16
01              GET - GET CHARACTER FROM INPUT BUFFER                                                                            (1)

                                     012C   445 	.SBTTL	GET - GET CHARACTER FROM INPUT BUFFER
                                     012C   446 ;+
                                     012C   447 ; MCR$GETCHAR - GET CHARACTER FROM INPUT BUFFER
                                     012C   448 ;
                                     012C   449 ; THIS ROUTINE IS CALLED TO GET THE NEXT CHARACTER FROM THE INPUT BUFFER.
                                     012C   450 ; IT HANDLES INDIRECT FILES, QUOTES, CONTINUATION, AND BLANK SUPPRESSION.
                                     012C   451 ;
                                     012C   452 ; INPUTS:
                                     012C   453 ;
                                     012C   454 ;	NONE.
                                     012C   455 ;
                                     012C   456 ; OUTPUTS:
                                     012C   457 ;
                                     012C   458 ;	THE NEXT CHARACTER IS READ FROM THE INPUT BUFFER AND RETURNED TO THE
                                     012C   459 ;	CALLER.
                                     012C   460 ;
                                     012C   461 ;	R0 = CHARACTER READ.
                                     012C   462 ;-
                                     012C   463  
                                     012C   464 	.ENABL	LSB
                                     012C   465 MCR$GETCHAR::				;GET NEXT CHARACTER FROM INPUT BUFFER
                          51     DD  012C   466 	PUSHL	R1			;SAVE REGISTER
                                     012E   467 NEXTCHAR:				;GET NEXT CHARACTER
                       FC AD     D6  012E   468 	INCL	WRK_L_CHARPTR(FP)	;UPDATE INPUT BUFFER POINTER
            51         FC AD     D0  0131   469 10$:	MOVL	WRK_L_CHARPTR(FP),R1	;GET CURRENT CHARACTER POINTER
            50            81     9A  0135   470 	MOVZBL	(R1)+,R0		;GET NEXT CHARACTER FROM INPUT BUFFER
                          79     13  0138   471 	BEQL	80$			;IF EQL END OF LINE
            50            22     91  013A   472 	CMPB	#^A/"/,R0		;QUOTE?
                          64     13  013D   473 	BEQL	60$			;IF EQL YES
         FA AD            05     E0  013F   474 	BBS	#WRK_V_QUOTE,WRK_W_FLAGS(FP),65$ ;IF SET, IN QUOTED STRING
                          63         0143       
            50            21     91  0144   475 	CMPB	#^A/!/,R0		;EXCLAMATION?
                          60     13  0147   476 	BEQL	70$			;IF EQL YES
            50            2D     91  0149   477 	CMPB	#^A/-/,R0		;HYPHEN?
                          3A     13  014C   478 	BEQL	50$			;IF EQL YES
            50            20     91  014E   479 	CMPB	#^A/ /,R0		;BLANK?
                          0E     13  0151   480 	BEQL	20$			;IF EQL YES
            50         40 8F     91  0153   481 	CMPB	#^A/@/,R0		;AT SIGN?
                          76     13  0157   482 	BEQL	100$			;IF EQL YES
            50            09     91  0159   483 	CMPB	#^A/	/,R0		;TAB?
                          5C     12  015C   484 	BNEQ	90$			;IF NEQ NO
            50            20     9A  015E   485 	MOVZBL	#^A/ /,R0		;SET CHARACTER TO A BLANK
         FC BD            50     90  0161   486 20$:	MOVB	R0,@WRK_L_CHARPTR(FP)	;STORE BLANK IN INPUT BUFFER
            81            20     91  0165   487 	CMPB	#^A/ /,(R1)+		;NEXT CHARACTER A BLANK?
                          06     13  0168   488 	BEQL	30$			;IF EQL YES
         FF A1            09     91  016A   489 	CMPB	#^A/	/,-1(R1)	;NEXT CHARACTER A TAB?
                          05     12  016E   490 	BNEQ	40$			;IF NEQ NO
                       FC AD     D6  0170   491 30$:	INCL	WRK_L_CHARPTR(FP)	;INCREMENT CHARACTER POINTER
                          EC     11  0173   492 	BRB	20$			;
                          71     95  0175   493 40$:	TSTB	-(R1)			;NEXT CHARACTER END OF LINE?
                          30     13  0177   494 	BEQL	70$			;IF EQL YES
            61            21     91  0179   495 	CMPB	#^A/!/,(R1)		;NEXT CHARACTER EXCLAMATION?
                          2B     13  017C   496 	BEQL	70$			;IF EQL YES
            81            2D     91  017E   497 	CMPB	#^A/-/,(R1)+		;HYPHEN?
                          46     12  0181   498 	BNEQ	EXITCHAR		;IF NEQ NO
                                     0183   499 	SETBIT	WRK_V_TRAILSPC,WRK_W_FLAGS(FP) ;INDICATE TRAILING SPACES SEEN
                          61     95  0188   500 50$:	TSTB	(R1)			;NEXT CHARACTER END OF LINE?
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page  17
01              GET - GET CHARACTER FROM INPUT BUFFER                                                                            (1)

                          61     13  018A   501 	BEQL	INPUT			;IF EQL YES
            61            21     91  018C   502 	CMPB	#^A/!/,(R1)		;NEXT CHARACTER EXCLAMATION?
                          5C     13  018F   503 	BEQL	INPUT			;IF EQL YES
            81            20     91  0191   504 	CMPB	#^A/ /,(R1)+		;NEXT CHARACTER A BLANK?
                          F2     13  0194   505 	BEQL	50$			;IF EQL YES
         FF A1            09     91  0196   506 	CMPB	#^A/	/,-1(R1)	;NEXT CHARACTER A TAB?
                          EC     13  019A   507 	BEQL	50$			;IF EQL YES
                                     019C   508 	CLRBIT	WRK_V_TRAILSPC,WRK_W_FLAGS(FP) ;CLEAR TRAILING SPACE FLAG
                          26     11  01A1   509 	BRB	EXITCHAR		;
         FA AD            20     AC  01A3   510 60$:	XORW	#WRK_M_QUOTE,WRK_W_FLAGS(FP) ;INVERT QUOTE FLAG
                          20     11  01A7   511 65$:	BRB	EXITCHAR		;
         FA AD            06     E0  01A9   512 70$:	BBS	#WRK_V_STAR,WRK_W_FLAGS(FP),EXITCHAR ;BR IF IN AN EXPRESSION
                          1B         01AD       
                          71     94  01AE   513 	CLRB	-(R1)			;SET END OF LINE IN BUFFER
                          FF7E   31  01B0   514 	BRW	10$			;
         FA AD            20     AA  01B3   515 80$:	BICW	#WRK_M_QUOTE,WRK_W_FLAGS(FP) ;CLEAR QUOTE IN PROGRESS
                       FC AD     D7  01B7   516 	DECL	WRK_L_CHARPTR(FP)	;BACK UP INPUT BUFFER POINTER
            50         61 8F     91  01BA   517 90$:	CMPB	#^A/a/,R0		;LOWER CASE LETTER?
                          09     1A  01BE   518 	BGTRU	EXITCHAR		;IF GTRU NO
            50         7A 8F     91  01C0   519 	CMPB	#^A/z/,R0		;LOWER CASE LETTER?
                          03     1F  01C4   520 	BLSSU	EXITCHAR		;IF LSSU NO
            50            20     8A  01C6   521 	BICB	#^X20,R0		;CONVERT TO LOWER CASE
                                     01C9   522 EXITCHAR:				;EXIT WITH CHARACTER
                          51   8ED0  01C9   523 	POPL	R1			;RESTORE REGISTER
                          50     95  01CC   524 	TSTB	R0			;SET CONDITION CODES BASED ON CHARACTER
                                 05  01CE   525 	RSB				;
         54 AB            04     E0  01CF   526 100$:	BBS	#PRC_V_GOTO,PRC_W_FLAGS(R11),EXITCHAR ;IF SET, IN GOTO
                          F5         01D3       
         54 AB            05     E2  01D4   527 	BBSS	#PRC_V_IND,PRC_W_FLAGS(R11),EXITCHAR ;IF SET, ALREADY IN @ FILE
                          F0         01D8       
                                     01D9   528 	STACKIND			;STACK CURRENT INDIRECT FILE SPECIFICATION
         54 AB            20     AA  01DC   529 	BICW	#PRC_M_IND,PRC_W_FLAGS(R11) ;CLEAR INDIRECT FILE IN PROGRESS
            0A            50     E8  01E0   530 	BLBS	R0,INPUT		;IF LBS SUCCESS
                                     01E3   531 	.DSABL	LSB
                                     01E3   532  
                                     01E3   533 ;
                                     01E3   534 ; ERROR EXIT
                                     01E3   535 ;
                                     01E3   536  
                          50     DD  01E3   537 ERROR:	PUSHL	R0			;SAVE ERROR/STATUS VALUE
                                     01E5   538 	FLUSH				;FLUSH INPUT BUFFER
                          01     BA  01E8   539 	POPR	#^M<R0>			;RESTORE ERROR/STATUS VALUE
                          0136   31  01EA   540 	BRW	STATUS			;
                                     01ED   541  
                                     01ED   542 ;
                                     01ED   543 ; CONTINUATION SPECIFIED - READ IN NEXT LINE
                                     01ED   544 ;
                                     01ED   545  
                                     01ED   546 INPUT:					;INPUT NEXT RECORD
                          1C     BB  01ED   547 	PUSHR	#^M<R2,R3,R4>		;SAVE REGISTERS
         FA AD            08     E0  01EF   548 REINP:	BBS	#WRK_V_ASK,WRK_W_FLAGS(FP),10$ ;IF SET, QUERY IN PROGRESS
                          09         01F3       
            54         14 AB     D0  01F4   549 	MOVL	PRC_L_INDINPRAB(R11),R4	;GET ADDRESS OF LEVEL N RAB
         54 AB            0B     E1  01F8   550 	BBC	#PRC_V_YLEVEL,PRC_W_FLAGS(R11),20$ ;IF CLR, NOT AT CONTROL Y/C LEVEL
                          04         01FC       
            54         08 AB     D0  01FD   551 10$:	MOVL	PRC_L_INPRAB(R11),R4	;GET ADDRESS OF LEVEL 0 RAB
            52         F4 AD     D0  0201   552 20$:	MOVL	WRK_L_PROMPT(FP),R2	;GET ADDRESS OF PROMPT STRING
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page  18
01              GET - GET CHARACTER FROM INPUT BUFFER                                                                            (1)

            51            82     9A  0205   553 	MOVZBL	(R2)+,R1		;SET ADDRESS IN R2, R1=LENGTH
            5E       FF7C CE     9E  0208   554 	MOVAB	-MSGBUFSIZ(SP),SP	;ALLOCATE SPACE FOR PROMPT STRING
            50            5E     D0  020D   555 	MOVL	SP,R0			;SAVE ADDRESS OF PROMPT STRING STORAGE
         30 A4            50     D0  0210   556 	MOVL	R0,RAB$L_PBF(R4)	;SET ADDRESS OF PROMPT STRING
            51            02     81  0214   557 	ADDB3	#2,R1,RAB$B_PSZ(R4)	;SET LENGTH OF PROMPT STRING
                       34 A4         0217       
            80       0A0D 8F     B0  0219   558 	MOVW	#<10@8>+13,(R0)+	;INSERT CARRIAGE RETURN/LINE FEED PAIR
            80            82     90  021E   559 30$:	MOVB	(R2)+,(R0)+		;MOVE CHARACTER TO PROMPT BUFFER
            FA            51     F5  0221   560 	SOBGTR	R1,30$			;ANY MORE TO MOVE?
                          0102   30  0224   561 	BSBW	MCR$GETINPUT		;READ A LINE OF INPUT
            5E       0084 CE     9E  0227   562 	MOVAB	MSGBUFSIZ(SP),SP	;DEALLOCATE PROMPT STRING STORAGE
            67            50     E9  022C   563 	BLBC	R0,100$			;IF LBC I/O ERROR
                          52     DD  022F   564 	PUSHL	R2			;SAVE STARTING ADDRESS OF BUFFER
            06            82     3A  0231   565 50$:	LOCC	(R2)+,#6,B^90$		;CHECK FOR SPECIAL CHARS
                       90'AF         0234       
                          17     13  0236   566 	BEQL	60$			;IF EQL NO MATCH
            50            03     C2  0238   567 	SUBL	#3,R0			;BLANK OR TAB?
                          F4     19  023B   568 	BLSS	50$			;IF LSS YES
                          10     13  023D   569 	BEQL	60$			;IF EQL END OF LINE
                          50     D7  023F   570 	DECL	R0			;DOLLAR SIGN OR COMMENT?
                          08     13  0241   571 	BEQL	55$			;BR IF END OF LINE
                          8E     D5  0243   572 	TSTL	(SP)+			;CLEAR ACTUAL START OF LINE
                          52     D7  0245   573 	DECL	R2			;BACKUP TO COMMENT DELIMITER
                          54     D4  0247   574 	CLRL	R4			;FLAG COMMENT LINE
                          16     11  0249   575 	BRB	65$			;  ELSE PRINT THE COMMENT LINE
            53            1F     E3  024B   576 55$:	BBCS	#31,R3,50$		;BR IF FIRST DOLLAR SIGN SEEN
                          E2         024E       
                          04     BA  024F   577 60$:	POPR	#^M<R2>			;RESTORE LINE BUFFER ADDRESS
         54 AB            07     E1  0251   578 62$:	BBC	#PRC_V_VERIFY,PRC_W_FLAGS(R11),70$ ;IF CLR, NO LINE VERIFICATION
                          23         0255       
         54 AB            0B     E0  0256   579 	BBS	#PRC_V_YLEVEL,PRC_W_FLAGS(R11),70$ ;IF SET, AT CONTROL Y/C LEVEL
                          1E         025A       
         18 AB            54     D1  025B   580 	CMPL	R4,PRC_L_INDOUTRAB(R11)	;READ FROM OUTPUT?
                          18     13  025F   581 	BEQL	70$			;IF EQL YES, DON'T RE-ECHO
         54 AB            04     E0  0261   582 65$:	BBS	#PRC_V_GOTO,PRC_W_FLAGS(R11),70$ ;IF SET, FORWARD GOTO
                          13         0265       
            72            0D     90  0266   583 	MOVB	#13,-(R2)		;INSERT CARRIAGE RETURN IN BUFFER
       0084 8F            00     3A  0269   584 	LOCC	#0,#INPBUFSIZ,(R2)	;FIND END OF LINE
                          62         026E       
            51            52     C2  026F   585 	SUBL	R2,R1			;AND FROM THAT THE LENGTH OF LINE
                                     0272   586 	MSGOUT				;OUTPUT INPUT LINE
            54            1E     E1  0275   587 	BBC	#30,R4,145$		;BR IF RAB ADDRESS IS GONE
                          6B         0278       
         FA AD            09     E5  0279   588 70$:	BBCC	#WRK_V_TRAILSPC,WRK_W_FLAGS(FP),80$ ;IF CLR, NO TRAILING SPACE SEEN
                          07         027D       
         FC BD            20     90  027E   589 	MOVB	#^A/ /,@WRK_L_CHARPTR(FP) ;INSERT BLANK AT FRONT OF BUFFER
                       FC AD     D7  0282   590 	DECL	WRK_L_CHARPTR(FP)	;BACKUP POINTER TO LEADING SPACE
                          1C     BA  0285   591 80$:	POPR	#^M<R2,R3,R4>		;RESTORE REGISTERS
         F4 AD       FD77 CF     9E  0287   592 	MOVAB	REPROMPT,WRK_L_PROMPT(FP) ;SET FOR CONTINUATION PROMPT
                          FE9E   31  028D   593 	BRW	NEXTCHAR		;
                                     0290   594  
                  09 20 00 24 21 3B  0290   595 90$:	.ASCII	/;!$/<0>/ 	/	;SPECIAL CHARACTERS
                                     0296   596  
                                     0296   597 ;
                                     0296   598 ; INPUT I/O ERROR
                                     0296   599 ;
                                     0296   600 ;	****	NOTE: R2, R3, AND R4 ARE STILL ON THE STACK    ****
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page  19
01              GET - GET CHARACTER FROM INPUT BUFFER                                                                            (1)

                                     0296   601 ;
                                     0296   602  
            50   00000000'8F     D1  0296   603 100$:	CMPL	#RMS$_RSA,R0		;ERROR RECORD STREAM ACTIVE
                          0D     12  029D   604 	BNEQ	110$			;IF NO CHECK FOR END_OF_FILE
                                     029F   605 	$CANCEL_S PRC_W_INPCHAN(R11)	;IF YES, STOP THE IO ON THAT CHANNEL
                          4A     11  02AA   606 	BRB	150$			;TRY TO READ AGAIN
            50   00000000'8F     D1  02AC   607 110$:	CMPL	#RMS$_EOF,R0		;END OF FILE?
                          4C     12  02B3   608 	BNEQ	170$			;IF NEQ NO
                          62     94  02B5   609 115$:	CLRB	(R2)			;SET END OF LINE INDICATOR
         54 AB            0B     E0  02B7   610 	BBS	#PRC_V_YLEVEL,PRC_W_FLAGS(R11),70$ ;IF SET, AT CONTROL Y/C LEVEL
                          BD         02BB       
         FA AD            08     E0  02BC   611 	BBS	#WRK_V_ASK,WRK_W_FLAGS(FP),70$ ;BR IF DOING AN ASK
                          B8         02C0       
         54 AB            04     E1  02C1   612 	BBC	#PRC_V_GOTO,PRC_W_FLAGS(R11),130$ ;BR IF NOT IN A GOTO
                          05         02C5       
         54 AB            00     E3  02C6   613 	BBCS	#PRC_V_GOEOF,PRC_W_FLAGS(R11),140$ ; BR IF FIRST EOF ENCOUNTERED
                          0F         02CA       
         14 AB         08 AB     D1  02CB   614 130$:	CMPL	PRC_L_INPRAB(R11),PRC_L_INDINPRAB(R11) ;INDIRECT LEVEL ZERO?
                          14     13  02D0   615 	BEQL	147$			;IF EQL, YES
                                     02D2   616 	UNSTACK				;UNSTACK INDIRECT FILE
            4B            50     E9  02D5   617 	BLBC	R0,STATUS		;IF LBC UNSTACK ERROR
                          1C     11  02D8   618 	BRB	150$			;
                                     02DA   619 140$:	$REWIND	RAB=@PRC_L_INDINPRAB(R11) ;REWIND THE INPUT FILE
                          18     11  02E4   620 145$:	BRB	160$			;
         54 AB            06     E1  02E6   621 147$:	BBC	#PRC_V_MODE,PRC_W_FLAGS(R11),150$ ;BR IF INTERACTIVE JOB
                          0B         02EA       
         54 AB            04     E1  02EB   622 	BBC	#PRC_V_GOTO,PRC_W_FLAGS(R11),180$ ;BR IF NO GOTO INPROGRESS
                          29         02EF       
                                     02F0   623 	STATUS	USGOTO			;SET ERROR 
                          0B     11  02F4   624 	BRB	170$			;
                                     02F6   625  
                                     02F6   626 ;
                                     02F6   627 ; NOW CHECK IF UNSTACK HAS OCCURED WITH INDIRECT FILE RECOGNITION DISABLED.
                                     02F6   628 ; IF SO, THIS IS A FLUSH OF A COMMAND WITH "-" AS THE LAST CHARACTER.
                                     02F6   629 ; IN THIS CASE, AN EOL MUST BE RETURNED.
                                     02F6   630 ;
                                     02F6   631  
         54 AB            05     E1  02F6   632 150$:	BBC	#PRC_V_IND,PRC_W_FLAGS(R11),160$ ; BR IF NOT DOING A FLUSH
                          03         02FA       
                          FF7B   31  02FB   633 	BRW	70$			;EXIT WITH EOL
                          FEEE   31  02FE   634 160$:	BRW	REINP			;ELSE READ THE NEXT LINE
                                     0301   635 170$:	SETBIT	WRK_V_COMMAND,WRK_W_FLAGS(FP) ;INDICATE COMMAND IN PROGRESS
                                     0305   636 	ERRMSG				;OUTPUT ERROR MESSAGE
         54 AB            0B     E0  0308   637 	BBS	#PRC_V_YLEVEL,PRC_W_FLAGS(R11),STATUS ;IF SET, AT CONTROL Y/C LEVEL
                          16         030C       
         14 AB         08 AB     D1  030D   638 	CMPL	PRC_L_INPRAB(R11),PRC_L_INDINPRAB(R11) ;INDIRECT LEVEL ZERO?
                          08     12  0312   639 	BNEQ	190$			;IF NEQ NO
         54 AB            06     E1  0314   640 	BBC	#PRC_V_MODE,PRC_W_FLAGS(R11),STATUS ;IF CLR, INTERACTIVE JOB
                          0A         0318       
                          FCE4'  31  0319   641 180$:	BRW	MCR$LOGOUT		;LOG OUT BATCH JOB
                          50     DD  031C   642 190$:	PUSHL	R0			;SAVE ERROR/STATUS VALUE
                                     031E   643 	UNSTACK				;UNSTACK INDIRECT FILE
                          01     BA  0321   644 	POPR	#^M<R0>			;RESTORE ERROR/STATUS VALUE
                                     0323   645 STATUS:	SET_STATUS			;SET COMPLETION STATUS
                          FCD7'  31  0326   646 	BRW	MCR$RESTART		;
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page  20
01              GET INPUT DATA                                                                                                   (1)

                                     0329   648 	.SBTTL	GET INPUT DATA
                                     0329   649 ;+
                                     0329   650 ; MCR$GETINPUT - GET INPUT DATA
                                     0329   651 ;
                                     0329   652 ; THIS ROUTINE IS CALLED TO READ A LINE OF DATA INTO THE INPUT BUFFER
                                     0329   653 ;
                                     0329   654 ; INPUTS:
                                     0329   655 ;
                                     0329   656 ;	R4 = RAB TO USE IN THE READ
                                     0329   657 ;
                                     0329   658 ; OUTPUT:
                                     0329   659 ;
                                     0329   660 ;	R0 = STATUS OF THE READ
                                     0329   661 ;	R2 = ADDRESS OF THE START OF THE LINE
                                     0329   662 ;	WRK_L_CHARPTR IS SET TO POINT 1 BEFORE THE FIRST CHARACTER READ.
                                     0329   663 ;	THE LINE IS TERMINATED WITH A ZERO.
                                     0329   664 ;-
                                     0329   665 MCR$GETINPUT::
         20 A4         84 8F     9B  0329   666 	MOVZBW	#INPBUFSIZ,RAB$W_USZ(R4) ;SET SIZE OF INPUT BUFFER
            52       FF42 CD     9E  032E   667 	MOVAB	WRK_AB_BUFFER+CMDBUFSIZ+2(FP),R2 ;GET ADDRESS OF INPUT BUFFER
         24 A4            52     D0  0333   668 	MOVL	R2,RAB$L_UBF(R4)	;SET ADDRESS OF INPUT BUFFER
         FC AD         FF A2     9E  0337   669 	MOVAB	-1(R2),WRK_L_CHARPTR(FP) ;SET POINTER FOR GET CHARACTER
                                     033C   670 	DISABLE				;DISABLE CONTROL Y/C AST'S
                                     033F   671 	$GET	RAB=(R4)		;GET NEXT RECORD FROM INPUT FILE
            53         22 A4     3C  0348   672 	MOVZWL	RAB$W_RSZ(R4),R3	;GET LENGTH OF INPUT RECORD
                                     034C   673 	ENABLE				;ENABLE CONTROL Y/C AST'S
            13            50     E9  034E   674 	BLBC	R0,30$			;BR IF IO ERROR
                          6243   94  0351   675 	CLRB	(R2)[R3]		;SET EOL INDICATOR
         52 AB            0C     E1  0354   676 	BBC	#MCR_V_STRSUB,PRC_W_CLIFLAG(R11),30$ ;BR IF SUBSTITUTION DISABLED
                          0B         0358       
            53            27     3A  0359   677 	LOCC	#^A/'/,R3,(R2)		;LINE HAVE POSSIBLE STRING SUBSTITUTION?
                          62         035C       
                          02     13  035D   678 	BEQL	20$			;IF EQL NO
                          04     10  035F   679 	BSBB	EXPAND			;EXPAND LINE IF APPROPRIATE
                                     0361   680 20$:	STATUS	NORMAL			;
                                 05  0364   681 30$:	RSB				;RETURN WITH STATUS
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page  21
01              EXPAND INPUT LINE                                                                                                (1)

                                     0365   683 	.SBTTL	EXPAND INPUT LINE
                                     0365   684 ;
                                     0365   685 ; SUBROUTINE TO EXPAND INPUT LINE BY EXECUTING ALL STRING SUBSTITUTION COMMANDS
                                     0365   686 ;
                                     0365   687  
                                     0365   688 EXPAND:					;EXPAND INPUT LINE
                     17F0 8F     BB  0365   689 	PUSHR	#^M<R4,R5,R6,R7,R8,R9,R10,AP> ;SAVE REGISTERS
            5A            52     D0  0369   690 	MOVL	R2,R10			;COPY ADDRESS OF INPUT BUFFER
            50            8A     9A  036C   691 10$:	MOVZBL	(R10)+,R0		;GET NEXT CHARACTER FROM INPUT LINE
            50            27     91  036F   692 	CMPB	#^A/'/,R0		;STRING SUBSTITUTION COMMAND?
                          42     12  0372   693 	BNEQ	70$			;IF NEQ NO
            27            6A     91  0374   694 	CMPB	(R10),#^A/'/		;IS THIS A REQUEST FOR A HYPHEN
                          05     12  0377   695 	BNEQ	20$			;BR IF SUBSTITUTION COMMAND
            50            8A     9A  0379   696 	MOVZBL	(R10)+,R0		;GET THE HYPHEN
                          38     11  037C   697 	BRB	70$			;INSERT THAT IN THE BUFFER
                          59     DD  037E   698 20$:	PUSHL	R9			;SAVE PLACE IN COMMAND BUFFER
                                     0380   699 	GETXSYM				;GET EXPANSION SYMBOL
                          2C     13  0383   700 	BEQL	50$			;IF EQL ZERO LENGTH SYMBOL
            56            51     7D  0385   701 	MOVQ	R1,R6			;SAVE STRING PARAMETERS
                                     0388   702 	SEARCH				;SEARCH FOR SYMBOL
            03            50     E8  038B   703 	BLBS	R0,30$			;IF LBS SYMBOL DEFINITION FOUND
                          FC6F'  30  038E   704 	BSBW	MCR$LEXIF		;EVALUATE LEXICAL FUNCTION
            6A       272E 8F     B1  0391   705 30$:	CMPW	#^A/.'/,(R10)		;CONDITIONAL DECIMAL POINT COMING
                          0B     12  0396   706 	BNEQ	35$			;BR IF NO
            8A            8A     90  0398   707 	MOVB	(R10)+,(R10)+		;COPY DOT OVER SINGLE QUOTE
         0A A3            04     91  039B   708 	CMPB	#SYM_K_DECIMAL,SYM_B_TYPE(R3) ;SYMBOL TYPED AS DECIMAL
                          02     12  039F   709 	BNEQ	35$			;BR IF NO
                          5A     D7  03A1   710 	DECL	R10			;BACK OVER DOT TO LEAVE IT IN OUTPUT
            6A            27     91  03A3   711 35$:	CMPB	#^A/'/,(R10)		;SYMBOL TERMINATED BY SINGLE QUOTE
                          02     12  03A6   712 	BNEQ	40$			;IF NOT EQL THEN NO
                          5A     D6  03A8   713 	INCL	R10			;SKIP TRAILING QUOTE
            5A            51     C2  03AA   714 40$:	SUBL	R1,R10			;CALCULATE ADDRESS TO COPY STRING
            62            51     28  03AD   715 	MOVC	R1,(R2),(R10)		;CONCATENATE STRING TO INPUT BUFFER
                          6A         03B0       
                          59   8ED0  03B1   716 50$:	POPL	R9			;RETRIEVE ADDRESS IN COMMAND BUFFER
                          B6     11  03B4   717 	BRB	10$			;
                                     03B6   718 70$:	PUTCHAR				;PUT CHARACTER IN COMMAND BUFFER
                          B1     12  03B9   719 	BNEQ	10$			;IF NEQ MORE CHARACTERS TO SCAN
            57         14 AE     D0  03BB   720 	MOVL	5*4(SP),R7		;GET STARTING ADDRESS OF EXPANDED LINE
            59            57     C2  03BF   721 	SUBL	R7,R9			;CALCULATE LENGTH OF EXPANDED LINE
            58         C4 AD     9E  03C2   722 	MOVAB	WRK_AB_BUFFER+CMDBUFSIZ+INPBUFSIZ(FP),R8 ;FIND END OF BUFFERS
            58            59     C2  03C6   723 	SUBL	R9,R8			;COMPUTE ADDRESS TO MOVE LINE TO
            67            59     28  03C9   724 	MOVC	R9,(R7),(R8)		;MOVE EXPANDED LINE TO END OF INPUT BUFFER
                          68         03CC       
            52            58     7D  03CD   725 	MOVQ	R8,R2			;SET INPUT LINE PARAMETERS
                     17F0 8F     BA  03D0   726 	POPR	#^M<R4,R5,R6,R7,R8,R9,R10,AP> ;RESTORE REGISTERS
         FC AD         FF A2     9E  03D4   727 	MOVAB	-1(R2),WRK_L_CHARPTR(FP) ;SET ADDRESS OF EXPANDED INPUT LINE
                                 05  03D9   728 	RSB				;
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page  22
01              GET EXPANSION SYMBOL                                                                                             (1)

                                     03DA   730 	.SBTTL	GET EXPANSION SYMBOL
                                     03DA   731 ;+
                                     03DA   732 ; DCL$GETXSYM - GET EXPANSION SYMBOL
                                     03DA   733 ;
                                     03DA   734 ; THIS ROUTINE IS CALLED TO ISOLATE THE NEXT SYMBOL DURING A LINE EXPANSION.
                                     03DA   735 ;
                                     03DA   736 ; INPUTS:
                                     03DA   737 ;
                                     03DA   738 ;	R9 = ADDRESS OF NEXT CHARACTER IN OUTPUT BUFFER.
                                     03DA   739 ;	R10 = ADDRESS OF NEXT CHARACTER IN INPUT BUFFER.
                                     03DA   740 ;
                                     03DA   741 ; OUTPUTS:
                                     03DA   742 ;
                                     03DA   743 ;	R1 = LENGTH OF EXPANSION SYMBOL.
                                     03DA   744 ;	R2 = ADDRESS OF EXPANSION SYMBOL.
                                     03DA   745 ;	R9 AND R10 UPDATED AS APPROPRIATE.
                                     03DA   746 ;
                                     03DA   747 ;	CONDITION CODES SET BASED ON LENGTH OF SYMBOL.
                                     03DA   748 ;-
                                     03DA   749  
                                     03DA   750 MCR$GETXSYM::				;GET EXPANSION SYMBOL
            52            59     D0  03DA   751 	MOVL	R9,R2			;COPY STARTING ADDRESS OF SYMBOL
            18            6A     3A  03DD   752 10$:	LOCC	(R10),#ENDTERM-TERMTAB,TERMTAB ;SEARCH FOR TERMINATOR
                     FC28 CF         03E0       
                          0A     13  03E3   753 	BEQL	20$			;BR IF NO TERMINATOR
            6A            3C     91  03E5   754 	CMPB	#^A/</,(R10)		;START OF SPECIAL SYMBOL
                          0A     13  03E8   755 	BEQL	30$			;BR IF YES
            6A            3E     91  03EA   756 	CMPB	#^A/>/,(R10)		;END OF SPECIAL SYMBOL
                          20     12  03ED   757 	BNEQ	60$			;BR IF REAL END OF SYMBOL
            6A            09     91  03EF   758 20$:	CMPB	#^A/	/,(R10)		;TAB CHARACTER?
                          1B     13  03F2   759 	BEQL	60$			;IF EQL YES
            50            8A     9A  03F4   760 30$:	MOVZBL	(R10)+,R0		;GET CHARACTER FROM INPUT BUFFER
                          14     13  03F7   761 	BEQL	50$			;IF EQL END OF LINE
            50         61 8F     91  03F9   762 	CMPB	#^A/a/,R0		;LOWER CASE LETTER?
                          09     1A  03FD   763 	BGTRU	40$			;IF GTRU NO
            50         7A 8F     91  03FF   764 	CMPB	#^A/z/,R0		;LOWER CASE LETTER?
                          03     1F  0403   765 	BLSSU	40$			;IF LSSU NO
            50            20     8A  0405   766 	BICB	#^X20,R0		;CONVERT TO UPPER CASE
                                     0408   767 40$:	PUTCHAR				;PUT CHARACTER IN COMMAND BUFFER
                          D0     11  040B   768 	BRB	10$			;
                          5A     D7  040D   769 50$:	DECL	R10			;BACK UP TO TERMINATOR
            59            52     C3  040F   770 60$:	SUBL3	R2,R9,R1		;CALCULATE LENGTH OF SYMBOL
                          51         0412       
                                 05  0413   771 	RSB				;
                                     0414   772  
                                     0414   773 	.END
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page  23
SYMBOL TABLE                                                                                                                     (1)

$$.TMP1        = 00000001            CLI$_ONEVAL    = 00038158            MCR$SET_STATUS   ********   X   03   
$$.TMP2        = 00000064            CLI$_ONLEVL    = 00038100            MCR$STACKIND     ********   X   03   
BIT...         = 00000000            CLI$_ONOVF     = 00038108            MCR$TESTBLANK    000000DA RG    03   
BLANKTAB         0000001B R     03   CLI$_OVRFLW    = 00038160            MCR$UNSTACK      ********   X   03   
CLI$_ABFNAM    = 000381B8            CLI$_PARMDEL   = 00038110            MCR_M_ALPHAN   = 00000002            
CLI$_ABKEYW    = 00038000            CLI$_PROC_ID   = 0003FFF1            MCR_M_DEFALT   = 00000008            
CLI$_ABVERB    = 00038008            CLI$_QUEJOBCRE = 0003FFF9            MCR_M_DELINP   = 00000080            
CLI$_BADRET    = 00038198            CLI$_REQPRMABS = 00038812            MCR_M_DOLLARS  = 00000100            
CLI$_BADTEXT   = 000381B0            CLI$_RSLOVF    = 00038118            MCR_M_ESCAPE   = 00000004            
CLI$_BUFOVF    = 00038018            CLI$_SKPDAT    = 00038120            MCR_M_ESCTRM   = 00000200            
CLI$_COMPLX    = 00038020            CLI$_SPARE0    = 00038010            MCR_M_GLOBAL   = 00000400            
CLI$_CONFQUAL  = 00038802            CLI$_SPARE1    = 00038058            MCR_M_LOWER    = 00000800            
CLI$_CREQUEJOB = 0003884A            CLI$_STKOVF    = 00038128            MCR_M_OPNINP   = 00000040            
CLI$_DEFOVF    = 00038028            CLI$_SUBMITERR = 00038852            MCR_M_RAD50    = 00000001            
CLI$_DEVALSPL  = 0003885A            CLI$_SYMDEL    = 00038130            MCR_M_STRSUB   = 00001000            
CLI$_DEVNOTFOR = 0003887A            CLI$_SYMOVF    = 00038138            MCR_V_ALPHAN   = 00000001            
CLI$_DEVNOTSPL = 00038862            CLI$_UNDFIL    = 00038188            MCR_V_DEFALT   = 00000003            
CLI$_DIRECT    = 00038030            CLI$_UNDSYM    = 00038140            MCR_V_DELINP   = 00000007            
CLI$_EXPSYN    = 00038038            CLI$_UNPROPARM = 00038170            MCR_V_DOLLARS  = 00000008            
CLI$_FILOPN    = 00038190            CLI$_UNPROQUAL = 00038168            MCR_V_ESCAPE   = 00000002            
CLI$_ILLVAL    = 0003883A            CLI$_USGOTO    = 00038148            MCR_V_ESCTRM   = 00000009            
CLI$_IMCHNG    = 00038040            CLI$_VALCNVERR = 00038832            MCR_V_FORCMD   = 0000000E            
CLI$_IMGFNF    = 00038872            CLI$_VALREQ    = 00038150            MCR_V_GLOBAL   = 0000000A            
CLI$_INSFPRM   = 00038048            CMDBUFSIZ      = 000001FC            MCR_V_LOWER    = 0000000B            
CLI$_INVKEY    = 00038178            ENDTERM          00000023 R     03   MCR_V_OPNINP   = 00000006            
CLI$_INVQUAL   = 0003880A            ERROR            000001E3 R     03   MCR_V_RAD50    = 00000000            
CLI$_INVQUALNUM= 0003881A            EXITCHAR         000001C9 R     03   MCR_V_STRSUB   = 0000000C            
CLI$_INVREQTYP = 00038822            EXPAND           00000365 R     03   MSGBUFSIZ      = 00000084            
CLI$_INVRSP    = 00038180            GBL...         = 00000000            NEXTCHAR         0000012E R     03   
CLI$_INVUIC    = 000381A8            INPBUFSIZ      = 00000084            PRC_B_DEFRADIX   00000092            
CLI$_IVCHAR    = 00038050            INPUT            000001ED R     03   PRC_B_EXMDEPMOD  00000091            
CLI$_IVDEVTYPE = 0003886A            MCR$DISABLE      ********   X   03   PRC_B_EXMDEPWID  00000090            
CLI$_IVFNAM    = 000381C0            MCR$ERRORMSG     ********   X   03   PRC_K_DEC      = 00000001            
CLI$_IVKEYW    = 00038060            MCR$FLUSH        ********   X   03   PRC_K_HEX      = 00000000            
CLI$_IVOPER    = 00038068            MCR$FORNBLK      000000BD RG    03   PRC_K_LENGTH     000000A0            
CLI$_IVPROT    = 00038070            MCR$GENDESCR     0000002F RG    03   PRC_K_OCT      = 00000002            
CLI$_IVQLOC    = 00038078            MCR$GETCHAR      0000012C RG    03   PRC_L_CLIWRK0    0000005C            
CLI$_IVSYMB    = 00038080            MCR$GETINPUT     00000329 RG    03   PRC_L_CLIWRK1    00000060            
CLI$_IVVALU    = 00038088            MCR$GETNBLK      0000007C RG    03   PRC_L_CLIWRK2    00000064            
CLI$_IVVERB    = 00038090            MCR$GETOKEN      00000089 RG    03   PRC_L_CLIWRK3    00000068            
CLI$_MAXPARM   = 00038098            MCR$GETXSYM      000003DA RG    03   PRC_L_CLIWRK4    0000006C            
CLI$_MULKEY    = 000381A0            MCR$GTBTOKEN     0000008B RG    03   PRC_L_ERRRAB     00000010            
CLI$_NOATFIL   = 000380A0            MCR$HYPHEN       00000000 RG    03   PRC_L_EXMDEPADR  0000008C            
CLI$_NOCCAT    = 000380A8            MCR$LEXIF        ********   X   03   PRC_L_EXTARG     00000078            
CLI$_NOCOMD    = 000380B0            MCR$LOCATE       00000023 RG    03   PRC_L_EXTBLK     00000070            
CLI$_NOKEYW    = 000380B8            MCR$LOGOUT       ********   X   03   PRC_L_EXTCOD     00000080            
CLI$_NOLIST    = 000380C0            MCR$MOVBTOKN     00000081 RG    03   PRC_L_EXTHND     00000074            
CLI$_NOOPTPRS  = 00038842            MCR$MOVCHAR      00000102 RG    03   PRC_L_EXTPRM     0000007C            
CLI$_NOQUAL    = 000380C8            MCR$MOVNCHR      000000FF RG    03   PRC_L_INDEPTH    00000048            
CLI$_NORMAL    = 00030001            MCR$MOVTERM      00000121 RG    03   PRC_L_INDFAB     0000001C            
CLI$_NOTNEG    = 000380D8            MCR$MOVTOKN      00000086 RG    03   PRC_L_INDINPRAB  00000014            
CLI$_NOVALU    = 000380D0            MCR$MSGOUT       ********   X   03   PRC_L_INDOUTRAB  00000018            
CLI$_NOVALUE   = 0003882A            MCR$PUTCHAR      00000104 RG    03   PRC_L_INPRAB     00000008            
CLI$_NULFIL    = 000380E0            MCR$RESTART      ********   X   03   PRC_L_LSTSTATUS  00000094            
CLI$_NUMBER    = 000380E8            MCR$SEARCH       ********   X   03   PRC_L_ONCTLY     0000009C            
CLI$_ONCOMD    = 000380F0            MCR$SETCHAR      000000CE RG    03   PRC_L_ONERROR    00000058            
CLI$_ONERR     = 000380F8            MCR$SETNBLK      000000C3 RG    03   PRC_L_OUTRAB     0000000C            
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page  24
SYMBOL TABLE                                                                                                                     (1)

PRC_L_PROCUIC    00000098            PSL$M_IS       = 04000000            RAB$C_BID      = 00000001            
PRC_L_SAVAP      00000000            PSL$M_IV       = 00000020            RAB$C_BLN        00000044            
PRC_L_SAVFP      00000004            PSL$M_PRVMOD   = 00C00000            RAB$C_KEY      = 00000001            
PRC_L_SEVERITY   00000040            PSL$M_SAFBITS  = 000037FF            RAB$C_RFA      = 00000002            
PRC_L_STACKLM    00000088            PSL$M_TBIT     = 00000010            RAB$C_SEQ      = 00000000            
PRC_L_STACKPT    00000084            PSL$M_TP       = 40000000            RAB$K_BLN        00000044            
PRC_L_STATUS     00000044            PSL$S_CURMOD   = 00000002            RAB$L_BKT        00000038            
PRC_L_SYMBOL     0000004C            PSL$S_IPL      = 00000005            RAB$L_CTX        00000018            
PRC_M_CNTRLY   = 00000002            PSL$S_PRVMOD   = 00000002            RAB$L_DCT        00000038            
PRC_M_DBGQUAL  = 00000200            PSL$V_CM       = 0000001F            RAB$L_FAB        0000003C            
PRC_M_DBGTRUE  = 00000400            PSL$V_CURMOD   = 00000018            RAB$L_KBF        00000030            
PRC_M_DISABL   = 00000004            PSL$V_DV       = 00000007            RAB$L_PBF        00000030            
PRC_M_EXIT     = 00000008            PSL$V_FPD      = 0000001B            RAB$L_RBF        00000028            
PRC_M_GOEOF    = 00000001            PSL$V_FU       = 00000006            RAB$L_RFA0       00000010            
PRC_M_GOTO     = 00000010            PSL$V_IPL      = 00000010            RAB$L_RHB        0000002C            
PRC_M_HANGUP   = 00001000            PSL$V_IS       = 0000001A            RAB$L_ROP        00000004            
PRC_M_IND      = 00000020            PSL$V_IV       = 00000005            RAB$L_STS        00000008            
PRC_M_MODE     = 00000040            PSL$V_PRVMOD   = 00000016            RAB$L_STV        0000000C            
PRC_M_NOCTLY   = 00004000            PSL$V_TBIT     = 00000004            RAB$L_UBF        00000024            
PRC_M_PAUSE    = 00002000            PSL$V_TP       = 0000001E            RAB$M_ASY      = 00000001            
PRC_M_USRDET   = 00000100            PTR_K_BLANK    = 00000001            RAB$M_BIO      = 00000800            
PRC_M_VERIFY   = 00000080            PTR_K_COLON    = 00000002            RAB$M_CCO      = 80000000            
PRC_M_YLEVEL   = 00000800            PTR_K_COMDQUAL = 00000000            RAB$M_CVT      = 04000000            
PRC_Q_ALLOCREG   00000020            PTR_K_COMMA    = 00000005            RAB$M_EOF      = 00000100            
PRC_Q_GLOBAL     00000028            PTR_K_ENDLINE  = 00000004            RAB$M_FDL      = 00000040            
PRC_Q_LABEL      00000030            PTR_K_LPAREN   = 00000007            RAB$M_HSH      = 00000080            
PRC_Q_LOCAL      00000038            PTR_K_PARAMETR = 00000003            RAB$M_KGE      = 00200000            
PRC_V_CNTRLY   = 00000001            PTR_K_PARMQUAL = 00000001            RAB$M_KGT      = 00400000            
PRC_V_DBGQUAL  = 00000009            PTR_K_PLUS     = 00000004            RAB$M_LIM      = 00004000            
PRC_V_DBGTRUE  = 0000000A            PTR_K_QUALVALU = 00000002            RAB$M_LOA      = 00002000            
PRC_V_DISABL   = 00000002            PTR_K_RPAREN   = 00000006            RAB$M_LOC      = 00010000            
PRC_V_EXIT     = 00000003            PTR_K_SLASH    = 00000003            RAB$M_MAS      = 00000020            
PRC_V_GOEOF    = 00000000            PTR_L_DESCR      00000000            RAB$M_NLK      = 00100000            
PRC_V_GOTO     = 00000004            PTR_S_FLAGS    = 00000004            RAB$M_NXR      = 00800000            
PRC_V_HANGUP   = 0000000C            PTR_S_OFFSET   = 0000000C            RAB$M_PMT      = 40000000            
PRC_V_IND      = 00000005            PTR_S_TERM     = 00000004            RAB$M_PPF_IND  = 00004000            
PRC_V_MODE     = 00000006            PTR_S_TYPE     = 00000004            RAB$M_PPF_RAT  = 00003FC0            
PRC_V_NOCTLY   = 0000000E            PTR_S_VALUE    = 00000008            RAB$M_PTA      = 20000000            
PRC_V_PAUSE    = 0000000D            PTR_V_EQUAL    = 00000000            RAB$M_RAH      = 00000200            
PRC_V_USRDET   = 00000008            PTR_V_FLAGS    = 00000014            RAB$M_RLK      = 00080000            
PRC_V_VERIFY   = 00000007            PTR_V_NEGATE   = 00000000            RAB$M_RNE      = 01000000            
PRC_V_YLEVEL   = 0000000B            PTR_V_OFFSET   = 00000008            RAB$M_RNF      = 08000000            
PRC_W_CLIFLAG    00000052            PTR_V_TERM     = 00000018            RAB$M_TMO      = 02000000            
PRC_W_ERRIFI     00000052            PTR_V_TYPE     = 0000001C            RAB$M_TPT      = 00000002            
PRC_W_FLAGS      00000054            PTR_V_VALUE    = 00000000            RAB$M_UIF      = 00000010            
PRC_W_INPCHAN    00000050            RAB$B_BID        00000000            RAB$M_ULK      = 00040000            
PRC_W_ONLEVEL    00000056            RAB$B_BLN        00000001            RAB$M_WAT      = 00020000            
PSL$C_EXEC     = 00000001            RAB$B_KRF        00000035            RAB$M_WBH      = 00000400            
PSL$C_KERNEL   = 00000000            RAB$B_KSZ        00000034            RAB$S_PPF_RAT  = 00000008            
PSL$C_SUPER    = 00000002            RAB$B_MBC        00000037            RAB$V_ASY      = 00000000            
PSL$C_USER     = 00000003            RAB$B_MBF        00000036            RAB$V_BIO      = 0000000B            
PSL$M_CM       = 80000000            RAB$B_PSZ        00000034            RAB$V_CCO      = 0000001F            
PSL$M_CURMOD   = 03000000            RAB$B_RAC        0000001E            RAB$V_CVT      = 0000001A            
PSL$M_DV       = 00000080            RAB$B_ROP1       00000005            RAB$V_EOF      = 00000008            
PSL$M_FPD      = 08000000            RAB$B_ROP2       00000006            RAB$V_FDL      = 00000006            
PSL$M_FU       = 00000040            RAB$B_ROP3       00000007            RAB$V_HSH      = 00000007            
PSL$M_IPL      = 001F0000            RAB$B_TMO        0000001F            RAB$V_KGE      = 00000015            
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page  25
SYMBOL TABLE                                                                                                                     (1)

RAB$V_KGT      = 00000016            SS$_CMODUSER   = 00000424            SS$_ILLEFC     = 000000EC            
RAB$V_LIM      = 0000000E            SS$_COMPAT     = 0000042C            SS$_ILLIOFUNC  = 000000F4            
RAB$V_LOA      = 0000000D            SS$_CONTINUE   = 00000001            SS$_ILLLBLAST  = 00000968            
RAB$V_LOC      = 00000010            SS$_CONTROLC   = 00000651            SS$_ILLPAGCNT  = 000000FC            
RAB$V_MAS      = 00000005            SS$_CONTROLO   = 00000609            SS$_ILLSEQOP   = 000002DC            
RAB$V_NLK      = 00000014            SS$_CONTROLY   = 00000611            SS$_ILLSER     = 00000104            
RAB$V_NXR      = 00000017            SS$_CREATED    = 00000619            SS$_ILLUSRLBLRD= 00000958            
RAB$V_PMT      = 0000001E            SS$_CTRLERR    = 00000054            SS$_ILLUSRLBLWT= 00000960            
RAB$V_PPF_IND  = 0000000E            SS$_DATACHECK  = 0000005C            SS$_INCVOLLABEL= 0000010C            
RAB$V_PPF_RAT  = 00000006            SS$_DATAOVERUN = 00000838            SS$_INSFARG    = 00000114            
RAB$V_PTA      = 0000001D            SS$_DEBUG      = 0000046C            SS$_INSFMEM    = 00000124            
RAB$V_RAH      = 00000009            SS$_DECOVF     = 000004A4            SS$_INSFRAME   = 0000012C            
RAB$V_RLK      = 00000013            SS$_DEVACTIVE  = 000002C4            SS$_INSFWSL    = 0000011C            
RAB$V_RNE      = 00000018            SS$_DEVALLOC   = 00000840            SS$_INTDIV     = 00000484            
RAB$V_RNF      = 0000001B            SS$_DEVALRALLOC= 00000641            SS$_INTOVF     = 0000047C            
RAB$V_TMO      = 00000019            SS$_DEVASSIGN  = 00000848            SS$_IVADDR     = 00000134            
RAB$V_TPT      = 00000001            SS$_DEVFOREIGN = 00000064            SS$_IVCHAN     = 0000013C            
RAB$V_UIF      = 00000004            SS$_DEVICEFULL = 00000850            SS$_IVCHNLSEC  = 0000026C            
RAB$V_ULK      = 00000012            SS$_DEVMOUNT   = 0000006C            SS$_IVDEVNAM   = 00000144            
RAB$V_WAT      = 00000011            SS$_DEVNOTALLOC= 00000858            SS$_IVGSDNAM   = 0000014C            
RAB$V_WBH      = 0000000A            SS$_DEVNOTMBX  = 00000074            SS$_IVLOGNAM   = 00000154            
RAB$W_ISI        00000002            SS$_DEVNOTMOUNT= 0000007C            SS$_IVLOGTAB   = 0000015C            
RAB$W_RFA        00000010            SS$_DEVOFFLINE = 00000084            SS$_IVPROTECT  = 000002F4            
RAB$W_RFA4       00000014            SS$_DIRFULL    = 00000860            SS$_IVQUOTAL   = 00000164            
RAB$W_RSZ        00000022            SS$_DRVERR     = 0000008C            SS$_IVSECFLG   = 0000016C            
RAB$W_USZ        00000020            SS$_DUPFILENAME= 00000868            SS$_IVSECIDCTL = 000002E4            
REINP            000001EF R     03   SS$_DUPLNAM    = 00000094            SS$_IVSSRQ     = 00000174            
REPROMPT         00000002 R     03   SS$_ENDOFFILE  = 00000870            SS$_IVSTSFLG   = 0000017C            
RMS$_EOF         ********   X   03   SS$_ENDOFTAPE  = 00000878            SS$_IVTIME     = 00000184            
RMS$_RSA         ********   X   03   SS$_ENDOFUSRLBL= 00000970            SS$_LCKPAGFUL  = 000000D4            
RSLBUFSIZ      = 00000180            SS$_EXQUOTA    = 0000001C            SS$_LENVIO     = 0000018C            
SS$_ABORT      = 0000002C            SS$_EXTIDXFILE = 00000880            SS$_LKWSETFUL  = 00000194            
SS$_ACCONFLICT = 00000800            SS$_FCPREADERR = 00000888            SS$_MBFULL     = 000008D8            
SS$_ACCVIO     = 0000000C            SS$_FCPREPSTN  = 00000988            SS$_MBTOOSML   = 0000019C            
SS$_ACPVAFUL   = 000002FC            SS$_FCPREWNDERR= 00000890            SS$_MCHECK     = 000002BC            
SS$_ARTRES     = 00000474            SS$_FCPSPACERR = 00000898            SS$_MEDOFL     = 000001A4            
SS$_ASTFLT     = 0000040C            SS$_FCPWRITERR = 000008A0            SS$_MSGNOTFND  = 00000621            
SS$_BADATTRIB  = 00000034            SS$_FILACCERR  = 0000009C            SS$_MTLBLLONG  = 00000304            
SS$_BADCHKSUM  = 00000808            SS$_FILALRACC  = 000000A4            SS$_MUSTCLOSEFL= 00000948            
SS$_BADESCAPE  = 0000003C            SS$_FILELOCKED = 000008A8            SS$_NOAQB      = 00000314            
SS$_BADFILEHDR = 00000810            SS$_FILENUMCHK = 000008B0            SS$_NODATA     = 000001AC            
SS$_BADFILENAME= 00000818            SS$_FILESEQCHK = 000008B8            SS$_NOHANDLER  = 000008F8            
SS$_BADFILEVER = 00000820            SS$_FILESTRUCT = 000008C0            SS$_NOHOMEBLK  = 000008E0            
SS$_BADIMGHDR  = 00000044            SS$_FILNOTACC  = 000000AC            SS$_NOIOCHAN   = 000001B4            
SS$_BADIRECTORY= 00000828            SS$_FILNOTCNTG = 000002AC            SS$_NOLINKS    = 0000027C            
SS$_BADPARAM   = 00000014            SS$_FILNOTEXP  = 000000B4            SS$_NOLOGNAM   = 000001BC            
SS$_BADSTACK   = 000002B4            SS$_FLTDIV     = 00000494            SS$_NOMBX      = 00000274            
SS$_BEGOFFILE  = 00000938            SS$_FLTOVF     = 0000048C            SS$_NOMOREFILES= 00000930            
SS$_BLOCKCNTERR= 00000940            SS$_FLTUND     = 0000049C            SS$_NONEXDRV   = 000001C4            
SS$_BREAK      = 00000414            SS$_FORMAT     = 000000BC            SS$_NONEXPR    = 000008E8            
SS$_BUFBYTALI  = 0000030C            SS$_GPTFULL    = 000000C4            SS$_NONLOCAL   = 000008F0            
SS$_BUFFEROVF  = 00000601            SS$_GSDFULL    = 000000CC            SS$_NOPRIV     = 00000024            
SS$_BUGCHECK   = 000002A4            SS$_HANGUP     = 000002CC            SS$_NORMAL     = 00000001            
SS$_CANCEL     = 00000830            SS$_HEADERFULL = 000008C8            SS$_NOSIGNAL   = 00000900            
SS$_CHANINTLK  = 0000004C            SS$_IDXFILEFULL= 000008D0            SS$_NOSOLICIT  = 00000284            
SS$_CLIFRCEXT  = 00000980            SS$_ILLBLKNUM  = 000000DC            SS$_NOSUCHDEV  = 00000908            
SS$_CMODSUPR   = 0000041C            SS$_ILLCNTRFUNC= 000000E4            SS$_NOSUCHFILE = 00000910            
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page  26
SYMBOL TABLE                                                                                                                     (1)

SS$_NOSUCHNODE = 0000028C            SYM_L_FL         00000000            
SS$_NOSUCHSEC  = 00000978            SYM_T_SYMBOL     0000000C            
SS$_NOTAPEOP   = 00000264            SYM_W_SIZE       00000008            
SS$_NOTFILEDEV = 000001CC            SYS$CANCEL       ********   X   03   
SS$_NOTINTBLSZ = 000001D4            SYS$GET          ********  GX   03   
SS$_NOTLABELMT = 000001DC            SYS$REWIND       ********  GX   03   
SS$_NOTMODIFIED= 00000659            TERMCLASS        00000005 R     03   
SS$_NOTNETDEV  = 000002EC            TERMTAB          0000000B R     03   
SS$_NOTRAN     = 00000629            WRK_AB_BUFFER    FFFFFD44            
SS$_NOTSQDEV   = 000001E4            WRK_AG_RESULT    FFFFFBC0            
SS$_OPCCUS     = 00000434            WRK_B_CMDFLG     FFFFFFC9            
SS$_OPCDEC     = 0000043C            WRK_B_CURADX     FFFFFFCA            
SS$_OPINCOMPL  = 000002D4            WRK_B_PARMCNT    FFFFFFCB            
SS$_PAGOWNVIO  = 000001EC            WRK_B_VERBTYP    FFFFFFC8            
SS$_PAGRDERR   = 00000444            WRK_K_LENGTH     FFFFFBC0            
SS$_PARITY     = 000001F4            WRK_L_CHARPTR    FFFFFFFC            
SS$_PARTESCAPE = 000001FC            WRK_L_IMAGE      FFFFFFEC            
SS$_PFMBSY     = 00000204            WRK_L_MAXPARM    FFFFFFCC            
SS$_PLHLDR     = 00000404            WRK_L_MINPARM    FFFFFFD0            
SS$_PSTFULL    = 0000020C            WRK_L_PAROUT     FFFFFFF0            
SS$_RADRMOD    = 0000044C            WRK_L_PROMPT     FFFFFFF4            
SS$_REJECT     = 00000294            WRK_L_QUABLK     FFFFFFE8            
SS$_REMOTE     = 00000649            WRK_L_RSLNXT     FFFFFD40            
SS$_RESIGNAL   = 00000918            WRK_L_SAVAP      FFFFFFD8            
SS$_RESULTOVF  = 00000214            WRK_L_SAVFP      FFFFFFDC            
SS$_ROPRAND    = 00000454            WRK_L_SAVSP      FFFFFFD4            
SS$_SECTBLFUL  = 0000021C            WRK_M_ALL      = 00000001            
SS$_SSFAIL     = 0000045C            WRK_M_ASK      = 00000100            
SS$_SUBRNG     = 000004AC            WRK_M_COMMAND  = 00000002            
SS$_SUPERSEDE  = 00000631            WRK_M_CONTINU  = 00000400            
SS$_TAPEPOSLOST= 00000224            WRK_M_EQUAL    = 00000008            
SS$_TBIT       = 00000464            WRK_M_IMCHNG   = 00000004            
SS$_TIMEOUT    = 0000022C            WRK_M_QUAL     = 00000010            
SS$_TOOMANYVER = 00000990            WRK_M_QUOTE    = 00000020            
SS$_TOOMUCHDATA= 0000029C            WRK_M_STAR     = 00000040            
SS$_UNASEFC    = 00000234            WRK_M_TRAILSPC = 00000200            
SS$_UNSAFE     = 0000023C            WRK_M_VERB     = 00000080            
SS$_UNWIND     = 00000920            WRK_Q_IOSB       FFFFFFE0            
SS$_UNWINDING  = 00000928            WRK_V_ALL      = 00000000            
SS$_VASFULL    = 00000244            WRK_V_ASK      = 00000008            
SS$_VECINUSE   = 0000024C            WRK_V_COMMAND  = 00000001            
SS$_VOLINV     = 00000254            WRK_V_CONTINU  = 0000000A            
SS$_WAITUSRLBL = 00000950            WRK_V_EQUAL    = 00000003            
SS$_WASCLR     = 00000001            WRK_V_IMCHNG   = 00000002            
SS$_WASECC     = 00000639            WRK_V_QUAL     = 00000004            
SS$_WASSET     = 00000009            WRK_V_QUOTE    = 00000005            
SS$_WRITLCK    = 0000025C            WRK_V_STAR     = 00000006            
SS$_WRONGACP   = 0000031C            WRK_V_TRAILSPC = 00000009            
STATUS           00000323 R     03   WRK_V_VERB     = 00000007            
SYM_B_TYPE       0000000A            WRK_W_FLAGS      FFFFFFFA            
SYM_K_DECIMAL  = 00000004            WRK_W_LOCFLG     FFFFFFF8            
SYM_K_HEXDEC   = 00000005            _$$_           = 000000EF            
SYM_K_LOGICAL  = 00000002            
SYM_K_OCTAL    = 00000003            
SYM_K_PERM     = 00000001            
SYM_K_STRING   = 00000000            
SYM_L_BL         00000004            
MCRCHAR         - CHARACTER MANIPULATION ROUTINES                22-AUG-1978 01:27:05   VAX-11 MACRO X0.3-11               Page  27
PROGRAM SECTION SYNOPSIS                                                                                                         (1)



PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            FFFFFFFC      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
MCR$ZCODE        00000414      03     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD  NOWRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
5760. BYTES LEFT IN FREE MEMORY POOL.
2122. BYTES OF RECLAIMED MEMORY.
OBJ$:MCRCHAR,LIS$:MCRCHAR/-SP=EXECML$/ML,LIB$:MCR/ML,SRC$:MCRCHAR
40 MLB DIR RDS - 953 GETS TO DEFINE 38 MACROS. 77 INTER. FILE WRITES. 
