INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (1)     830  NONPAGED POOL ALLOCATION SUBROUTINES
   (1)     878  ALOSPT - ALLOCATE AND FILL SPT ENTRY FOR BUFFER
   (1)     907  INI$MBADP - BUILD ADP AND INITIALIZE MBA
   (1)     968  INI$UBADP - BUILD ADP AND INITIALIZE UBA
   (1)    1088  RESIDENT PSECT CODE
   (1)    1168  UBA$INITIAL - UNIBUS ADAPTER INITIALIZATION
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page   1
07                                                                                                                               (1)

                                     0000     1 	.TITLE	INIT PROCESSOR INITIALIZATION
                                     0000     2 	.IDENT	/07/
                                     0000     3 ;
                                     0000     4 ; COPYRIGHT (C) 1977,1978
                                     0000     5 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
                                     0000     6 ;
                                     0000     7 ; THIS SOFTWARE IS FURNISHED UNDER  A LICENSE FOR USE ONLY  ON  A
                                     0000     8 ; SINGLE COMPUTER SYSTEM AND MAY BE  COPIED ONLY WITH  THE INCLU-
                                     0000     9 ; SION OF  THE  ABOVE  COPYRIGHT NOTICE.  THIS SOFTWARE,  OR  ANY
                                     0000    10 ; OTHER COPIES THEREOF, MAY NOT BE  PROVIDED  OR  OTHERWISE  MADE
                                     0000    11 ; AVAILABLE TO ANY OTHER PERSON EXCEPT  FOR  USE  ON  SUCH SYSTEM
                                     0000    12 ; AND TO  ONE WHO AGREES  TO  THESE LICENSE  TERMS.  TITLE TO AND
                                     0000    13 ; OWNERSHIP OF THE SOFTWARE SHALL AT ALL TIMES REMAIN IN DEC.
                                     0000    14 ;
                                     0000    15 ; THE INFORMATION IN THIS SOFTWARE  IS  SUBJECT TO CHANGE WITHOUT
                                     0000    16 ; NOTICE AND SHOULD NOT BE CONSTRUED  AS  A COMMITMENT BY DIGITAL
                                     0000    17 ; EQUIPMENT CORPORATION.
                                     0000    18 ;
                                     0000    19 ; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF ITS
                                     0000    20 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
                                     0000    21 ;
                                     0000    22 ; D. HUSTVEDT 17-SEP-76
                                     0000    23 ; R.HEINEN 29-DEC-76
                                     0000    24 ; W.H.BROWN 7-JAN-76	REMOVE PAGE FILE INITIALIZATION
                                     0000    25 ; W.H.BROWN 10-JAN-76	REMOVE SETTING FILE ADDRESS OF FILES OTHER THAN
                                     0000    26 ;			SYSTEM IMAGE FILE.
                                     0000    27 ; P.H.LIPMAN 19-JAN-77	REWRITE MEMORY MANAGEMENT INITIALIZATION
                                     0000    28 ; A.C.GOLDSTEIN 6-MAY-77 SET MOUNTED FOREIGN IN SYSTEM UCB
                                     0000    29 ; D. HUSTVEDT 24-MAY-77 DECREASE SYSTEM WORKING SET AND POOL FOR SIMULATOR
                                     0000    30 ; D. HUSTVEDT 16-JUN-78 INTEGRATE SYSGEN AND LOADABLE DRIVER CHANGES
                                     0000    31 ;
                                     0000    32 ; SYSTEM INITIALIZATION
                                     0000    33 ;
                                     0000    34 ; MACRO LIBRARY CALLS
                                     0000    35 ;
                                     0000    36  
                                     0000    37 	$ADPDEF				; DEFINE ADP OFFSETS
                                     0000    38 	$CRBDEF				; DEFINE CRB OFFSETS
                                     0000    39 	$DDBDEF				; DEFINE DDB OFFSETS
                                     0000    40 	$DDTDEF				; DEFINE DDT OFFSETS
                                     0000    41 	$DPTDEF				; DEFINE DRIVER PROLOGUE
                                     0000    42 	$DYNDEF				; DEFINE DATA STRUCTURE TYPE CODES
                                     0000    43 	$IDBDEF				; DEFINE IDB OFFSETS
                                     0000    44 	$IPLDEF				; IPL DEFINITIONS
                                     0000    45 	$IRPDEF				; DEFINE IRP OFFSETS
                                     0000    46 	$LOGDEF				; DEFINE LOG OFFSETS
                                     0000    47 	$PCBDEF				; DEFINE PCB OFFSETS
                                     0000    48 	$PFLDEF				; PAGE FILE OFFSET DEFINITIONS
                                     0000    49 	$PFNDEF				; PFN DATA BASE OFFSET DEFINITIONS
                                     0000    50 	$PHDDEF				; DEFINE PROCESS HEADER OFFSETS
                                     0000    51 	$PRTDEF				; DEFINE PAGE PROTECTION CODES
                                     0000    52 	$PTEDEF				; PAGE TABLE ENTRY DEFINITIONS
                                     0000    53 	$PTEDEF				; PTE FIELD DEFINITIONS
                                     0000    54 	$RPBDEF				; DEFINE RESTART PARAMETER BLOCK
                                     0000    55 	$SECDEF				; SECTION TABLE OFFSET DEFINITIONS
                                     0000    56 	$SFTDEF				; SWAP FILE TABLE DEFINITIONS
                                     0000    57 	$UBADEF				; DEFINE UBA REGISTER OFFSETS
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page   2
07                                                                                                                               (1)

                                     0000    58 	$UCBDEF				; DEFINE UCB OFFSETS
                                     0000    59 	$VADEF				; DEFINE VIRTUAL ADDRESS FIELDS
                                     0000    60 	$VECDEF				; DEFINE VEC OFFSETS
                                     0000    61  
                                     0000    62 ;
                                     0000    63 ; MACROS
                                     0000    64 ;
                                     0000    65 ;	PURE	START,STOP
                                     0000    66 	.MACRO	PURE,START,STOP		;
                                     0000    67 	.LONG	<START-<1@31>>@-7	;
                                     0000    68 	.LONG	<STOP-^X80000200>@-7	;
                                     0000    69 	.ENDM	PURE			;
                                     0000    70 ;
                                     0000    71 ; LOCAL SYMBOLS
                                     0000    72 ;
                                     0000    73 ; CHARACTER DEFINITIONS
                                     0000    74 ;
                                     0000    75  
                           0000000D  0000    76 CR=13					; CARRIAGE RETURN
                           0000000A  0000    77 LF=10					; LINE FEED
                                     0000    78  
                                     0000    79 ;
                                     0000    80 ;	MEMORY CONTROLLER CONFIGURATION REGISTERS
                                     0000    81 ;
                           00000008  0000    82 	MEM_REGC=8			; CONFIGURATION REGISTER C
                           0000001C  0000    83 	MEM_REGC_V_ERL=28		; ERROR LOG REQUEST
                           0000001D  0000    84 	MEM_REGC_V_HER=29		; HIGH ERROR RATE
                                     0000    85 ;
                                     0000    86 ; LOCAL DATA
                                     0000    87 ;
                                     0000    88  
                                 00000000    89 	.PSECT	Z$DEBUGA,PAGE		; PSECT TO MARK BASE OF XDELTA
                                     0000    90 XDELTABASE:				;
                                 00000000    91 	.PSECT	Z$INIT,PAGE
                                     0000    92 INI_BASE:				;
                                     0000    93 ;
                                     0000    94 ; BOOT DEVICE LOGICAL NAME EQUIVALENCE
                                     0000    95 ;
                                     0000    96  
                                     0000    97 BOODRIVLBN:				; LBN OF BOOT DEVICE DRIVER
                           00000000  0000    98 	.LONG	0			;
                                     0004    99 BOODRIVSIZE:				; SIZE OF BOOT DEVICE DRIVER IN BYTES
                           00000000  0004   100 	.LONG	0			;
                                     0008   101 LOG$AL_DISKLOG::			; SYSTEM DEVICE LOGICAL NAME BLOCK
                           00000000' 0008   102 	.LONG	LOG$GL_SLTFL		; FORWARD LINK
                           00000000' 000C   103 	.LONG	LOG$GL_SLTFL		; BACKWARD LINK
                               0030' 0010   104 	.WORD	DISKEND-LOG$AL_DISKLOG	; LENGTH OF LOGICAL NAME BLOCK IN BYTES
                                 0B' 0012   105 	.BYTE	DYN$C_LOG		; DATA STRUCTURE TYPE CODE
                                 00' 0013   106 	.BYTE	LOG$C_SYSTEM		; LOGICAL NAME TABLE NUMBER
                               0001  0014   107 	.WORD	1			; UIC MEMBER NUMBER
                               0001  0016   108 	.WORD	1			; UIC GROUP NUMBER
                                     0018   109 BOOTUCB:				; BOOT DEVICE UCB ADDRESS
                           00000000  0018   110 	.LONG	0			; BOOT DEVICE UCB ADDRESS
         4B 53 49 44 24 53 59 53 00' 001C   111 	.ASCIC	/SYS$DISK/		; LOGICAL NAME STRING
                                 08  001C       
                  3A 30 58 58 44 00' 0025   112 	.ASCIC	/DXX0:/			; EQUIVALENCE NAME STRING
                                 05  0025       
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page   3
07                                                                                                                               (1)

                           00000038  002B   113 	.BLKB	<<<.-LOG$AL_DISKLOG>+15>&^C<15>>-<.-LOG$AL_DISKLOG> ;
                                     0038   114 DISKEND:				;
                                     0038   115  
                                     0038   116  
                                     0038   117 PGDCOD:
                           FFC00000' 0038   118 	.LONG	<MMG$AL_PGDCOD-<1@31>>@-9 ; 1ST VPN OF PAGED CODE
                           FFC00000' 003C   119 	.LONG	<MMG$AL_PGDCODEN-<1@31>>@-9 ; LAST + 1 VPN OF PAGED CODE
                           7C400000' 0040   120 	.LONG	<PTE$C_UR ! PTE$C_KOWN ! PTE$M_TYP1 ! PTE$M_TYP0>
                                     0044   121 					; SECTION 0 PAGE TABLE ENTRY
                           00000038  0044   122 	PGDCODBEG=PGDCOD		; BEGINNING OF PAGED CODE
                           0000003C  0044   123 	PGDCODEND=PGDCOD+4		; LAST + 1 PAGE OF PAGED CODE
                                     0044   124 SYSVECTORS:
                           00000000  0044   125 	.LONG	0			; 1ST VPN OF VECTOR PAGES
                           00000000' 0048   126 	.LONG	SGN$C_SYSVECPGS		; LAST + 1 VPN OF VECTOR PAGE
                           7C400000' 004C   127 	.LONG	<PTE$C_UR ! PTE$C_KOWN ! PTE$M_TYP1 ! PTE$M_TYP0>
                                     0050   128 					; SECTION 0 PAGE TABLE ENTRY
                                     0050   129 PAGEDYN:
                           00000000  0050   130 	.LONG	0			; 1ST VPN OF PAGED DYNAMIC POOL
                                     0054   131 					; STORED BY INIT CODE
                           00000000  0054   132 	.LONG	0			; LAST + 1 VPN OF PAGED DYNAMIC POOL
                                     0058   133 					; STORED BY INIT CODE
                           70000000' 0058   134 	.LONG	<PTE$C_URKW ! PTE$C_KOWN> ; DEMAND ZERO PTE
                                     005C   135 NOBOOTDEV:				; NO BOOT DEVICE LOCATED MESSAGE
2D 54 49 4E 49 43 45 58 45 25 0A'0D' 005C   136 	.ASCIZ	<CR><LF>/%EXECINIT-F-No boot device located/<CR><LF> ;
65 64 20 74 6F 6F 62 20 6F 4E 2D 46  0068       
64 65 74 61 63 6F 6C 20 65 63 69 76  0074       
                           00 0A'0D' 0080       
                                     0083   137 
                                     0083   138 NOSPACE:				; INSUFFICIENT NON-PAGED POOL
2D 54 49 4E 49 43 45 58 45 25 0A'0D' 0083   139 	.ASCII	<CR><LF>/%EXECINIT-F-Insufficient non-paged pool/
65 69 63 69 66 66 75 73 6E 49 2D 46  008F       
64 65 67 61 70 2D 6E 6F 6E 20 74 6E  009B       
                     6C 6F 6F 70 20  00A7       
                           00 0A'0D' 00AC   140 	.ASCIZ	<CR><LF>		;
                                     00AF   141  
                                     00AF   142 NOPHYSMEM:				;
2D 54 49 4E 49 43 45 58 45 25 0A'0D' 00AF   143 	.ASCII	<CR><LF>/%EXECINIT-F-Insufficient physical memory for /
65 69 63 69 66 66 75 73 6E 49 2D 46  00BB       
20 6C 61 63 69 73 79 68 70 20 74 6E  00C7       
   20 72 6F 66 20 79 72 6F 6D 65 6D  00D3       
6B 72 6F 77 20 6D 75 6D 69 6E 69 6D  00DE   144 	.ASCIZ	/minimum working set/<CR><LF>
      00 0A'0D'74 65 73 20 67 6E 69  00EA       
2D 54 49 4E 49 43 45 58 45 25 0A'0D' 00F4   145 NOSPT:	.ASCIZ	<CR><LF>/%EXECINIT-F-Insufficient SPT entried/<CR><LF>
65 69 63 69 66 66 75 73 6E 49 2D 46  0100       
69 72 74 6E 65 20 54 50 53 20 74 6E  010C       
                     00 0A'0D'64 65  0118       
                                     011D   146 ;+
                                     011D   147 ; SYSTEM BOOT ENTRY POINTS TO START UP SYSTEM
                                     011D   148 ;
                                     011D   149 ; INPUTS:
                                     011D   150 ;
                                     011D   151 ;	R0 = PHYSICAL ADDRESS OF EXE$INIT
                                     011D   152 ;	R4 = SIZE OF SYSTEM IMAGE IN BLOCKS.
                                     011D   153 ;	R5 = STARTING LOGICAL BLOCK OF SYSTEM IMAGE.
                                     011D   154 ;	R6 = STARTING LBN OF BOOT DEVICE DRIVER
                                     011D   155 ;	R7 = SIZE OF BOOT DRIVER IN BYTES (ROUNDED TO 16 BYTE BOUND)
                                     011D   156 ;	R11 = PHYSICAL ADDRESS OF RESTART PARAMETER BLOCK (RPB)
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page   4
07                                                                                                                               (1)

                                     011D   157 ;	PR$_SBR/PR$_SLR - SET TO DESCRIBE SPT
                                     011D   158 ;	PR$_P0BR/PR$_P0LR - SET TO MAP EXE$INIT VIRTUAL = REAL
                                     011D   159 ;-
                                     011D   160  
                                     011D   161 	.ALIGN	LONG
                                     0120   162 EXE$INIT::				; INIT START
            5D         30 AB     D0  0120   163 	MOVL	RPB$L_BOOTR5(R11),FP	; GET DEBUG FLAGS
            00'           01     DA  0124   164 	MTPR	#1,S^#PR$_MAPEN		; ENABLE MAPPING
                 0000012D'9F     17  0127   165 	JMP	@#10$			; AND SET PC IN SYSTEM SPACE
            5E   00000000'EF     D0  012D   166 10$:	MOVL	EXE$GL_INTSTK,SP		; SET TO USE INTERRUPT STACK
   00000000'EF            54     7D  0134   167 	MOVQ	R4,EXE$GQ_STAREXE	; SAVE STARLET IMAGE DESCRIPTOR
       FEC0 CF            56     D0  013B   168 	MOVL	R6,BOODRIVLBN		; SAVE LBN OF BOOT DEVICE DRIVER
       FEBF CF            57     D0  0140   169 	MOVL	R7,BOODRIVSIZE		; SAVE SIZE OF BOOT DEVICE DRIVER
   00000000'EF   00000000'EF     D0  0145   170 	MOVL	EXE$GL_DEFFLAGS,EXE$GL_FLAGS	; ESTABLISH CORRECT DEFAULTS
   00000000'EF            54     B0  0150   171 	MOVW	R4,EXE$GL_SYSWCBRP	; SYSTEM WINDOW RETRIEVAL PTR COUNT
   00000002'EF            55     D0  0157   172 	MOVL	R5,EXE$GL_SYSWCBRP+2	; AND STARTING LBN
                                 D0  015E   173 	MOVL	#<<SWP$GL_SHELLBAS&^X7FFFFFFF>@-9>+1,-	; SET STARTING VBN
   00000010'EF   00000001'8F         015F   174 		SWP$GL_SFTBAS+SFT$L_VBN	; FOR SHELL PROCESS SWAP IMAGE
   0000000C'EF   00000000'8F     D0  0169   175 	MOVL	#EXE$GL_SYSWCB,SWP$GL_SFTBAS+SFT$L_WINDOW ; SET WINDOW ADDRESS
            51   00000000'EF     DE  0174   176 	MOVAL	SCB$AL_BASE,R1		; SCB ADDRESS
            15            09     EF  017B   177 	EXTZV	#VA$V_VPN,#VA$S_VPN,R1,R2	; GET VPN OF SCB
            52            51         017E       
            52   00000000'FF42   D0  0180   178 	MOVL	@MMG$GL_SPTBASE[R2],R2	; GET PTE 
            15            00     EF  0188   179 	EXTZV	#PTE$V_PFN,#PTE$S_PFN,R2,R2	; EXTRACT PFN
            52            52         018B       
            52            09     78  018D   180 	ASHL	#9,R2,R2		; AND CONVERT TO BYTE ADDRESS
                          52         0190       
            00'           52     DA  0191   181 	MTPR	R2,S^#PR$_SCBB		; SET SYSTEM CONTROL BLOCK BASE
            5D            01     E0  0194   182 	BBS	#RPB$V_DEBUG,FP,20$	; KEEP DEBUGGER IF REQUESTED
                          14         0197       
                                 01  0198   183 15$:	NOP				; SOURCE OF NOP OPCODE
   00000000'EF         FC AF     90  0199   184 	MOVB	15$,INI$BRK		; PREVENT INITIAL BREAKPOINT
                                 D0  01A1   185 	MOVL	#<<XDELTABASE-^X80000000>@-9>,-	;
       0A02'CF   FFC00000'8F         01A2   186 		W^FREE			; SET FREE DESCRIPTOR TO RELEASE DEBUGGER
                          10     11  01AA   187 	BRB	30$			; CONTINUE WITHOUT DEBUGGER
         2C A1   00000000'9F     9E  01AC   188 20$:	MOVAB	@#XDELBPT,^X2C(R1)	; SET VECTOR TO BPT
         28 A1   00000000'9F     9E  01B4   189 	MOVAB	@#XDELTBIT,^X28(R1)	; SET TBIT VECTOR
                          5B     D4  01BC   190 30$:	CLRL	R11			; INIDICATE CONSOLE TERMINAL
            51   00000000'EF     DE  01BE   191 	MOVAL	SYS$GT_ANNOUNCE,R1	; GET ADDRESS OF ANNOUNCEMENT MESSAGE
                 00000000'EF     16  01C5   192 	JSB	EXE$OUTZSTRING		; ANNOUNCE SYSTEM
            50   00000000'EF     D0  01CB   193 	MOVL	MMG$GL_NPAGEDYN,R0	; GET ADDRESS OF NON-PAGED POOL
                          60     D4  01D2   194 	CLRL	(R0)			; ZAP FORWARD LINK
         04 A0   00000000'EF     D0  01D4   195 	MOVL	SGN$GL_NPAGEDYN,4(R0)	; SET SIZE OF FREE BLOCK
   00000004'EF            50     D0  01DC   196 	MOVL	R0,EXE$GL_NONPAGED+4	; SET ADDRESS OF POOL
                                     01E3   197  
                 00000000'EF     DD  01E3   198 	PUSHL	EXE$MCHKVEC		; SAVE THE MACHINE CHECK VECTOR
   00000000'EF   000008FC'EF     DE  01E9   199 	MOVAL	INI$MCHK,EXE$MCHKVEC	; SET VECTOR TO INIT
            55   00000000'FF     DE  01F4   200 	MOVAL	@MMG$GL_SYSPHD,R5	; GET ADDRESS OF SYSTEM HEADER
            50   00000000'EF     DE  01FB   201 	MOVAL	EXE$GL_FLAGS,R0		; PUT FLAGS ADDRESS IN CONVENIENT PLACE
            5D            02     E1  0202   202 	BBC	#RPB$V_INIBPT,FP,NODEBUG ; BR IF NORMAL STARTUP(NO BREAKPOINT)
                          03         0205       
                                     0206   203 ;
                                     0206   204 ;	R0 = ADDRESS OF EXE$GL_FLAGS 
                                     0206   205 ;	R5 = ADDRESS OF SYSTEM PROCESS HEADER.
                                     0206   206 ;
                          FDF7'  30  0206   207 	BSBW	INI$BRK			; OUTERWISE BREAKPOINT
                                     0209   208 NODEBUG:				;
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page   5
07                                                                                                                               (1)

   00000000'EF   00000000'EF     B0  0209   209 	MOVW	SGN$GW_MAXPRCCT,SCH$GW_PROCLIM	; SET TENATIVE LIMIT FOR PROCS
                                     0214   210 ;
                                     0214   211 ; SET MODIFIED PAGE WRITER PARAMETERS
                                     0214   212 ;
   00000000'EF   00000000'EF     3C  0214   213 	MOVZWL	MPW$GW_HILIM,SCH$GL_MFYLIMSV ; LIST HIGH THRESHOLD
   00000000'EF   00000000'EF     3C  021F   214 	MOVZWL	MPW$GW_HILIM,SCH$GL_MFYLIM ; CURRENT AND SAVE VALUES
   00000000'EF   00000000'EF     3C  022A   215 	MOVZWL	MPW$GW_LOLIM,SCH$GL_MFYLOSV ; SAVE VALUE FOR LOW THRESHOLD
   00000000'EF   00000000'EF     3C  0235   216 	MOVZWL	MPW$GW_LOLIM,SCH$GL_MFYLOLIM ; LOW LIST THRESHOLD
                          FDBF'  30  0240   217 	BSBW	INI$WRITABLE		; SYSTEM WRITABLE UNTIL INIT COMPLETE
                                     0243   218  
                                     0243   219 INI_PAGING:
   00000000'EF            00'    E0  0243   220 	BBS	S^#EXE$V_SYSPAGING,EXE$GL_FLAGS,5$ ; BRANCH IF PAGING SYSTEM SPACE
                          03         024A       
                          0055   31  024B   221 	BRW	20$			; NOT PAGING SYSTEM SPACE
                                     024E   222 5$:					;
                     0046'CF     7C  024E   223 	CLRQ	W^PGDCOD_LIM		; PREVENT PROTECTION SETTING
            55   00000000'FF     DE  0252   224 	MOVAL	@MMG$GL_SYSPHD,R5	; ADDRESS OF SYSTEM HEADER
            52         24 A5     32  0259   225 	CVTWL	PHD$W_PSTLAST(R5),R2	; INDEX TO LAST SECTION TABLE ENTRY
            52            08     C2  025D   226 	SUBL	#SEC$C_LENGTH@-2,R2	; ALLOCATED NEW SECTION TABLE ENTRY
         24 A5            52     B0  0260   227 	MOVW	R2,PHD$W_PSTLAST(R5)	; UPDATE LAST ALLOCATED ENTRY
       FDD7 CF            52     B0  0264   228 	MOVW	R2,PGDCOD+8		; SET PAGED CODE SECTION INDEX
       FDDE CF            52     B0  0269   229 	MOVW	R2,SYSVECTORS+8		; SET SYSTEM VECTORS SECTION INDEX
            55         20 A5     C0  026E   230 	ADDL	PHD$L_PSTBASOFF(R5),R5	; BASE ADDRESS OF SECTION TABLE
            52            6542   DE  0272   231 	MOVAL	(R5)[R2],R2		; ADDRESS OF FIRST SECTION TABLE ENTRY
         10 A2            01     D0  0276   232 	MOVL	#1,SEC$L_VBN(R2) 	; MAP THE ENTIRE SYSTEM IMAGE
                       08 A2     D4  027A   233 	CLRL	SEC$L_VPXPFC(R2)	; STARTS AT SYS VIRTUAL PAGE 0
         0C A2   00000000'EF     DE  027D   234 	MOVAL	EXE$GL_SYSWCB,SEC$L_WINDOW(R2) ; SYSTEM WINDOW
         18 A2            01     D0  0285   235 	MOVL	#1,SEC$L_REFCNT(R2)	; MAKE REFERENCE COUNT NON-ZERO
            55       FDAB CF     DE  0289   236 	MOVAL	W^PGDCOD,R5		; SET SPT FOR PAGED CODE
                          0745   30  028E   237 	BSBW	FILLSPT			; AND RELEASE THE PAGES OCCUPIED
            55       FDAF CF     DE  0291   238 	MOVAL	W^SYSVECTORS,R5		; SET SPT FOR PAGING THE SYSTEM VECTORS
                          073D   30  0296   239 	BSBW	FILLSPT			; AND RELEASE THE PAGES
            55       FD9B CF     D0  0299   240 	MOVL	W^PGDCODBEG,R5		; LAST + 1 VPN OF RESIDENT CODE
            50       FDA6 CF     D0  029E   241 	MOVL	W^SYSVECTORS+4,R0	; 1ST VPN OF RESIDENT CODE
                                     02A3   242 20$:					;
                                     02A3   243 ;
                                     02A3   244 ;	PLACE ALL PAGES CURRENTLY REMAINING IN PFNMAP ON THE FREE LIST
                                     02A3   245 ;
                                     02A3   246 INI_FREEMEM:				;
            56   00000000'EF     D0  02A3   247 	MOVL	EXE$GL_RPB,R6		; GET ADDRESS OF RPB	
            50   FFC00000'8F     D0  02AA   248 	MOVL	#<<EXE$RESTART-^X80000000>@-9>,R0 ; VPN OF RESTART ROUTINE
            50   00000000'FF40   D0  02B1   249 	MOVL	@MMG$GL_SPTBASE[R0],R0	; GET PTE FOR RESTART ROUTINE
            15            00     EF  02B9   250 	EXTZV	#PTE$V_PFN,#PTE$S_PFN,R0,R0	; EXTRACT PFN
            50            50         02BC       
            50            09     78  02BE   251 	ASHL	#9,R0,RPB$L_RESTART(R6)	; SAVE PHYSICAL ADDRESS OF RESTART ROUTINE
                       04 A6         02C1       
                       08 A6     D4  02C3   252 	CLRL	RPB$L_CHKSUM(R6)	; INIT CHECKSUM ACCUMULATOR
                       0C A6     D4  02C6   253 	CLRL	RPB$L_RSTRTFLG(R6)	; ENABLE RESTART
            50   00000000'EF     9E  02C9   254 	MOVAB	EXE$RESTART,R0		; ADDRESS OF RESTART ROUTINE
            51            1F     D0  02D0   255 	MOVL	#^X1F,R1		; COUNT OF LONGWORDS IN CHECKSUM
         08 A6            80     C0  02D3   256 5$:	ADDL	(R0)+,RPB$L_CHKSUM(R6)	; ACCUMULATE CHECKSUM OF RESTART ROUTINE
            F9            51     F5  02D7   257 	SOBGTR	R1,5$			; FOR ALL 31 LONGWORDS
       00AC C6   00000000'8F     DB  02DA   258 	MFPR	#PR$_SBR,RPB$L_SBR(R6)	; SAVE SBR VALUE FOR RESTART
       00B8 C6   00000000'8F     DB  02E3   259 	MFPR	#PR$_SLR,RPB$L_SLR(R6)	; SAVE SLR VALUE FOR RESTART
       00B0 C6   00000000'8F     DB  02EC   260 	MFPR	#PR$_SCBB,RPB$L_SCBB(R6); AND SCB BASE ADDRESS
            53         44 A6     7D  02F5   261 	MOVQ	RPB$Q_PFNMAP(R6),R3	; GET DESCRIPTOR FOR PFNMAP
            53         F7 8F     78  02F9   262 	ASHL	#-9,R3,R3		; CONVERT SIZE TO PAGE COUNT
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page   6
07                                                                                                                               (1)

                          53         02FD       
            54         F7 8F     78  02FE   263 	ASHL	#-9,R4,R4		; AND ADDRESS TO PFN
                          54         0302       
            52   00000000'EF     D0  0303   264 	MOVL	SWP$GL_BALSPT,R2	; USE FIRST BALANCE SLOT
            54   F0000000 8F     C9  030A   265 10$:	BISL3	#<PTE$C_URKW!PTE$M_VALID>,R4,(R2)+	; MAP A PAGE OF PFNMAP
                          82         0311       
                          54     D6  0312   266 	INCL	R4			; NEXT PFN
            F3            53     F5  0314   267 	SOBGTR	R3,10$			; MAP ENTIRE PFN MAP
                                     0317   268 	INVALID				; INVALIDATE TRANSLATION BUFFER TO SEE MAP
            50   00000000'EF     D0  031A   269 	MOVL	MMG$GL_MAXPFN,R0	; GET MAX FREE PFN 
   00000000'FF            50     E1  0321   270 20$:	BBC	R0,@SWP$GL_BALBASE,30$	; BRANCH IF PAGE IS ALLOCATED
                          06         0328       
                 00000000'EF     16  0329   271 	JSB	MMG$DALLOCPFN		; DE-ALLOCATE
                          50     D7  032F   272 30$:	DECL	R0			; NEXT PAGE
                          EE     14  0331   273 	BGTR	20$			; CONTINUE FOR ALL BUT ZERO
            52   00000000'EF     D0  0333   274 	MOVL	SWP$GL_BALSPT,R2	; GET POINTER TO SPT TO CLEANUP
         44 A6         F7 8F     78  033A   275 	ASHL	#-9,RPB$Q_PFNMAP(R6),R3	; TO CLEAN UP AFTER BOOT
                          53         033F       
                          82     D4  0340   276 40$:	CLRL	(R2)+			; ZAP A PTE
            FB            53     F5  0342   277 	SOBGTR	R3,40$			; CLEAN THEM ALL
                                     0345   278 	INVALID				; AND INVALIDATE TRANSLATION BUFFER
                                     0348   279  
                                     0348   280 ;
                                     0348   281 ; INITIALIZE SPT FOR PAGED DYNAMIC POOL
                                     0348   282 ;
                                     0348   283 INI_PAGDYN:				;
            15            09     EF  0348   284 	EXTZV	#VA$V_VPN,#VA$S_VPN,MMG$GL_PAGEDYN,R4 ; VPN OF PAGED POOL
            54   00000000'EF         034B       
   00000000'EF         F7 8F     78  0351   285 	ASHL	#-9,SGN$GL_PAGEDYN,R0	; OTHERWISE INIT IT AS NON-PAGED
                          50         0359       
            54            50     C1  035A   286 	ADDL3	R0,R4,R5		; IF NOT PAGING POOL
                          55         035D       
   00000000'EF   00000000'EF     D0  035E   287 	MOVL	MMG$GL_PAGEDYN,EXE$GL_PAGED	; SET ADDRESS OF PAGED POOL
   00000000'EF            00'    E0  0369   288 	BBS	S^#EXE$V_POOLPGING,EXE$GL_FLAGS,30$ ; BRANCH IF PAGING PAGED POOL
                          30         0370       
            50   00000000'FF44   D0  0371   289 10$:	MOVL	@MMG$GL_SPTBASE[R4],R0	; SPT ENTRY
                 00000000'EF     16  0379   290 	JSB	MMG$ALLOCPFN		; OTHEWISE GET A PFN
            50            1F     E1  037F   291 	BBC	#31,R0,20$		; BRANCH IF GOT ONE
                          01         0382       
                                 00  0383   292 	HALT				; NO PAGES FOR POOL, DISASTER!!
            50   FFE00000 8F     CA  0384   293 20$:	BICL	#^C<PTE$M_PFN>,R0	; LEAVE ONLY PFN BITS
                                 C9  038B   294 	BISL3	#<PTE$M_VALID ! PTE$C_URKW ! PTE$C_KOWN>,-
            50   F0000000 8F         038C   295 		R0,@MMG$GL_SPTBASE[R4]	; SET NEW PAGE TABLE ENTRY
                 00000000'FF44       0392       
                          0673   30  0398   296 	BSBW	SETRESIDENT		; SET THE PFN RESIDENT
            54            55     F2  039B   297 	AOBLSS	R5,R4,10$		; FOR EACH PAGE IN THE POOL
                          D2         039E       
                          19     11  039F   298 	BRB	40$			; 
                                     03A1   299  
                                     03A1   300 ;
                                     03A1   301 ; SET UP ADDRESS OF PAGED POOL AND INIT IT FOR PAGING IF ENABLED
                                     03A1   302 ;
            55       FCAB CF     DE  03A1   303 30$:	MOVAL	W^PAGEDYN,R5		; ADDRESS OF PAGED POOL DESCRIPTORS
            65            54     D0  03A6   304 	MOVL	R4,(R5)			; 1ST VPN OF PAGED POOL
   00000000'EF         F7 8F     78  03A9   305 	ASHL	#-9,SGN$GL_PAGEDYN,-(SP); GET SIZE OF PAGED POOL IN PAGES
                          7E         03B1       
            54            8E     C1  03B2   306 	ADDL3	(SP)+,R4,4(R5) 		; LAST + 1 OF PAGED POOL
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page   7
07                                                                                                                               (1)

                       04 A5         03B5       
                          061C   30  03B7   307 	BSBW	FILLSPT			; SET SPT FOR PAGED POOL
                                     03BA   308 40$:					;
                                     03BA   309 ;
                                     03BA   310 ; INITIALIZE LOOKASIDE I/O PACKET POOL
                                     03BA   311 ;
                                     03BA   312 INI_IRP:				;
            50   00000000'EF     D0  03BA   313 	MOVL	MMG$GL_NPAGEDYN,R0	; GET ADDRESS OF FIRST FREE BLOCK
                                 C7  03C1   314 	DIVL3	#<<IRP$C_LENGTH+^XF>&<^C<^XF>>>*2,- ; CALCULATE NUMBER OF I/O
         04 A0   000000A0 8F         03C2   315 		4(R0),R1		; PACKETS TO ALLOCATE
                          51         03C9       
   00000000'EF            51     D1  03CA   316 	CMPL	R1,SGN$GL_IRPCNT	; CHECK I/O PACKET COUNT
                          07     15  03D1   317 	BLEQ	125$			; TOO MANY FOR POOL SIZE
            51   00000000'EF     D0  03D3   318 	MOVL	SGN$GL_IRPCNT,R1	; USE COUNT
            51   00000050 8F     C5  03DA   319 125$:	MULL3	#<IRP$C_LENGTH+^XF>&<^C<^XF>>,R1,R2 ; CALCULATE TOTAL BYTES
                          52         03E1       
         04 A0            52     C2  03E2   320 	SUBL	R2,4(R0)		; REDUCE LENGTH OF FIRST FREE BLOCK
            50         04 A0     C0  03E6   321 	ADDL	4(R0),R0		; CALCULATE ADDRESS OF LOOKASIDE LIST
   00000000'EF            50     D0  03EA   322 	MOVL	R0,EXE$GL_SPLITADR	; SET LOOKASIDE LIST SPLIT ADDRESS
                          51     D7  03F1   323 130$:	DECL	R1			; ANY MORE I/O PACKETS TO ALLOCATE?
                          16     19  03F3   324 	BLSS	140$			; IF LSS NO
   00000000'FF            60     0E  03F5   325 	INSQUE	(R0),@IOC$GL_IRPBL	; INSERT I/O PACKET IN LOOKASIDE LIST
         08 A0       0050 8F     B0  03FC   326 	MOVW	#<IRP$C_LENGTH+^XF>&<^C<^XF>>,IRP$W_SIZE(R0) ; SET SIZE
            50   00000050 8F     C0  0402   327 	ADDL	#<IRP$C_LENGTH+^XF>&<^C<^XF>>,R0 ; ADVANCE TO NEXT I/O PACKET
                          E6     11  0409   328 	BRB	130$			;
                                     040B   329 140$:					; REFERENCE LABEL
                                     040B   330 ;
                                     040B   331 ; NO ALLOCATION OF NON-PAGED POOL BEFORE THIS POINT !!!!
                                     040B   332 ;
                                     040B   333 ;
                                     040B   334 ; INITIALIZE MAP FOR I/O ADAPTERS
                                     040B   335 ;
                                     040B   336 INI_IOMAP:				;
                                     040B   337 	.ENABL	LSB			;
            5B   00000000'EF     D0  040B   338 	MOVL	EXE$GL_NONPAGED,R11	; SAVE IPL FOR POOL ALLOCATION
   00000000'EF            00'    DB  0412   339 	MFPR	S^#PR$_IPL,EXE$GL_NONPAGED; SET ALLOCATION IPL TO 31
            56   00000000'EF     D0  0419   340 	MOVL	EXE$GL_RPB,R6		; GET BASE OF RPB
                          54     D4  0420   341 	CLRL	R4			; CLEAR TR NUMBER INDEX
            52   00000000'EF     D0  0422   342 	MOVL	BOO$GL_SPTFREL,R2	; GET NEXT AVAILABLE VPN 
            53   00000000'FF42   DE  0429   343 	MOVAL	@MMG$GL_SPTBASE[R2],R3	; COMPUTE SVASPT
            52            09     78  0431   344 	ASHL	#9,R2,R2		; CONVERT TO VA
                          52         0434       
            52   80000000 8F     C8  0435   345 	BISL	#VA$M_SYSTEM,R2		; SET SYSTEM BIT
            50       0090 C644   9A  043C   346 10$:	MOVZBL	RPB$B_CONFREG(R6)[R4],R0	; GET A TYPE CODE
                          5C     13  0442   347 	BEQL	90$			; NULL, GO TO NEXT
       000D'8F            50     3A  0444   348 	LOCC	R0,#ADPTYPCNT,W^ADPTYP	; LOOKUP TYPE
                     04DA'CF         0449       
                          52     13  044C   349 	BEQL	90$			; UNKNOWN TYPE
            55       000D'C1     9A  044E   350 	MOVZBL	ADPTYPCNT(R1),R5	; GET TYPE SUMMARY
   00000000'EF44          52     D0  0453   351 	MOVL	R2,MMG$AL_SBICONF[R4]	; SAVE VA OF ADAPTER MAP
            54            04     78  045B   352 	ASHL	#4,R4,R0		; CONVERT TR NUMBER TO PFN
                          50         045E       
            50   00100000 8F     C8  045F   353 	BISL	#^X100000,R0		; SET I/O SPACE BIT
                                     0466   354 	CASE	R5,<-			; SWITCH ON TYPE
                                     0466   355 		20$,-			; 0 => MEMORY
                                     0466   356 		30$,-			; 1 => MBA
                                     0466   357 		40$>			; 2 => UBA
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page   8
07                                                                                                                               (1)

            57            01     D0  0470   358 20$:	MOVL	#1,R7			; SET TO MAP ONLY ONE PAGE
                          31     10  0473   359 	BSBB	100$			; MAP IT
                          29     11  0475   360 	BRB	90$			;
            57            08     D0  0477   361 30$:	MOVL	#8,R7			; MAP EIGHT PAGES FOR MBA
                          2A     10  047A   362 	BSBB	100$			; MAP 8 PAGES
                          0620   30  047C   363 	BSBW	INI$MBADP		; ALLOCATE AND INIT ADP/CRB/IDB
                          1F     11  047F   364 	BRB	90$			; NEXT ADAPTER
            57            08     D0  0481   365 40$:	MOVL	#8,R7			; MAP ADAPTER
                          20     10  0484   366 	BSBB	100$			; MAP 8 PAGES
                          06CC   30  0486   367 	BSBW	INI$UBADP		; ALLOCATE AND INIT ADP
            02            00     EF  0489   368 	EXTZV	#0,#2,RPB$B_CONFREG(R6),R0	; GET UBA NUMBER
            50       0090 C6         048C       
            50            09     78  0490   369 	ASHL	#9,R0,R0		; COMPUTE PFN FOR UNIBUS SPACE
                          50         0493       
            50   001009F0 8F     C8  0494   370 	BISL	#^X1009F0,R0		; INCLUDING ADAPTER NUMBER
            57            10     D0  049B   371 	MOVL	#16,R7			; SET COUNT TO MAP 16 PAGES
                          06     10  049E   372 	BSBB	100$			; MAP THEM ALL
            54            10     F2  04A0   373 90$:	AOBLSS	#16,R4,10$		; DO ALL ADAPTERS
                          98         04A3       
                          4E     11  04A4   374 	BRB	120$			;
                                     04A6   375 
            50   90000000 8F     C9  04A6   376 100$:	BISL3	#<PTE$M_VALID!PTE$C_KW>,R0,(R3)+ ; MAP A PAGE
                          83         04AD       
                          50     D6  04AE   377 	INCL	R0			; NEXT PFN
            52       0200 C2     9E  04B0   378 	MOVAB	512(R2),R2		; NEXT VA
                 00000000'EF     D6  04B5   379 	INCL	BOO$GL_SPTFREL		; NEXT FREE ENTRY
   00000000'EF   00000000'EF     D1  04BB   380 	CMPL	BOO$GL_SPTFREH,BOO$GL_SPTFREL	; CHECK FOR NONE LEFT
                          0E     14  04C6   381 	BGTR	110$			; BR IF OK
            51       FC28 CF     9E  04C8   382 	MOVAB	NOSPT,R1		; SET ADDRESS OF ERROR MESSAGE
                          5B     D4  04CD   383 	CLRL	R11			; INDICATE CONSOLE TERMINAL
                 00000000'EF     16  04CF   384 	JSB	EXE$OUTZSTRING		; OUTPUT ERROR MESSAGE
                                 00  04D5   385 	HALT				; ***** FATAL ERROR *****
            CD            57     F5  04D6   386 110$:	SOBGTR	R7,100$			; MAP ANOTHER
                                 05  04D9   387 	RSB				; DONE, RETURN
                                 08  04DA   388 ADPTYP:	.BYTE	8		; MEMORY, 4K - NOT INTERLEAVED
                                 09  04DB   389 	.BYTE	9		; MEMORY, 4K - INTERLEAVED
                                 10  04DC   390 	.BYTE	16		; MEMORY,16K - NOT INTERLEAVED
                                 11  04DD   391 	.BYTE	17		; MEMORY,16K - INTERLEAVED
                                 20  04DE   392 	.BYTE	^X20		; MBA
                                 28  04DF   393 	.BYTE	^X28		; UBA #0
                                 29  04E0   394 	.BYTE	^X29		; UBA #1
                                 2A  04E1   395 	.BYTE	^X2A		; UBA #2
                                 2B  04E2   396 	.BYTE	^X2B		; UBA #3
                                 40  04E3   397 	.BYTE	^X40		; MPM #0
                                 41  04E4   398 	.BYTE	^X41		; MPM #1
                                 42  04E5   399 	.BYTE	^X42		; MPM #2
                                 43  04E6   400 	.BYTE	^X43		; MPM #3
                           0000000D  04E7   401 ADPTYPCNT=.-ADPTYP		; NUMBER OF ADAPTER TYP CODES
                                 00  04E7   402 	.BYTE	0		; MEMORY TYPE
                                 00  04E8   403 	.BYTE	0		; MEMORY TYPE
                                 00  04E9   404 	.BYTE	0		; MEMORY TYPE
                                 00  04EA   405 	.BYTE	0		; MEMORY TYPE
                                 01  04EB   406 	.BYTE	1		; MBA TYPE
                                 02  04EC   407 	.BYTE	2		; UBA TYPE
                                 02  04ED   408 	.BYTE	2		; UBA TYPE
                                 02  04EE   409 	.BYTE	2		; UBA TYPE
                                 02  04EF   410 	.BYTE	2		; UBA TYPE
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page   9
07                                                                                                                               (1)

                                 00  04F0   411 	.BYTE	0		; MEMORY TYPE
                                 00  04F1   412 	.BYTE	0		; MEMORY TYPE
                                 00  04F2   413 	.BYTE	0		; MEMORY TYPE
                                 00  04F3   414 	.BYTE	0		; MEMORY TYPE
                                     04F4   415 120$:					;
                                     04F4   416 	.DSABL	LSB
                                     04F4   417  
                                     04F4   418 ;
                                     04F4   419 ; INIT PROCESS STATE
                                     04F4   420 ;
                                     04F4   421  
                                     04F4   422 INI_PSTATE:				;
            51   00000000'EF     3C  04F4   423 	MOVZWL	SGN$GW_MAXPRCCT,R1	; GET TOTAL COUNT OF PROCESSES
                          51     D6  04FB   424 	INCL	R1			; ADD ONE FOR SYSTEM HEADER
            51            06     C4  04FD   425 	MULL	#6,R1			; 2 BYTES FOR SEQ + 4 BYTES FOR PCB ADDR
                          0530   30  0500   426 	BSBW	ALONONPAGED		; ALLOCATE SPACE FOR SEQUENCE VECTOR
                                     0503   427 					; AND PCB VECTOR
   00000000'EF            52     D0  0503   428 	MOVL	R2,SCH$GL_PCBVEC	; SAVE POINTER TO PCB VECTOR
            51   00000000'EF     3C  050A   429 	MOVZWL	SGN$GW_MAXPRCCT,R1	; GET COUNT OF PROCESSES
   00000000'EF         04 A241   DE  0511   430 	MOVAL	4(R2)[R1],SCH$GL_SEQVEC	; SET BASE OF SEQUENCE VECTOR
            6241 00000000'EF     DE  051A   431 	MOVAL	MMG$AL_SYSPCB,(R2)[R1]	; SET POINTER TO SYSTEM PCB
            50            6241   D0  0522   432 	MOVL	(R2)[R1],R0		; GET POINTER TO SYSTEM PCB
         60 A0            51     B0  0526   433 	MOVW	R1,PCB$L_PID(R0)	; SET PROPER PIX FOR SYSTEM PCB
                          51     D7  052A   434 	DECL	R1			; COMPUTE MAXIMUM PIX VALUE
   00000000'EF            51     D0  052C   435 	MOVL	R1,SCH$GL_MAXPIX	; AND SET
            6241 00000000'EF     DE  0533   436 20$:	MOVAL	SCH$GL_NULLPCB,(R2)[R1]	; INIT VECTOR TO POINT TO NULL PROCESS
                 00000000'FF41   B4  053B   437 	CLRW	@SCH$GL_SEQVEC[R1]	; INITIALIZE SEQUENCE COUNTER
            EE            51     F4  0542   438 	SOBGEQ	R1,20$			; INIT THEM ALL
   00000000'EF   00000000'EF     D0  0545   439 	MOVL	MMG$GL_GPTE,EXE$GL_GPT	; ESTABLISH POINTER TO GLOBAL FREE LIST
                          52     D4  0550   440 	CLRL	R2			; SET NULL PRIO INCR CLASS
            54   00000000'EF     DE  0552   441 	MOVAL	SCH$GL_NULLPCB,R4	; GET ADDRESS OF NULL PCB
                          0B     10  0559   442 	BSBB	30$			; SETUP PROCESS PHYPCB AND STATE
            54   00000000'EF     DE  055B   443 	MOVAL	SCH$GL_SWPPCB,R4	; GET ADDRESS OF SWAPPER PCB
                          02     10  0562   444 	BSBB	30$			; SETUP PROCESS PHYPCB AND STATE
                          26     11  0564   445 	BRB	INI_PHV			; CONTINUE WITH INITIALIZATION
            15            09     EF  0566   446 30$:	EXTZV	#VA$V_VPN,#VA$S_VPN,PCB$L_PHYPCB(R4),R0	; GET VPN FOR HW PCB
            50         18 A4         0569       
            50   00000000'FF40   D0  056C   447 	MOVL	@MMG$GL_SPTBASE[R0],R0	; TRANSLATE TO ACTUAL PHYSICAL
            09            50     F0  0574   448 	INSV	R0,#VA$V_VPN,#PTE$S_PFN,PCB$L_PHYPCB(R4); SET PHYSICAL ADDRESS
         18 A4            15         0577       
            50         60 A4     3C  057A   449 	MOVZWL	PCB$L_PID(R4),R0	; GET PROCESS INDEX
   00000000'FF40          54     D0  057E   450 	MOVL	R4,@SCH$GL_PCBVEC[R0]	; AND SET ADDRESS IN PCB VECTOR
                 00000000'EF     17  0586   451 	JMP	SCH$CHSE		; AND CHANGE STATE TO EXECUTABLE
                                     058C   452  
                                     058C   453 ;
                                     058C   454 ;	INITIALIZE PROCESS HEADER VECTOR
                                     058C   455 ;
                                     058C   456 INI_PHV:				;
   00000000'EF            01     C1  058C   457 	ADDL3	#1,SGN$GL_BALSETCT,R4	; GET COUNT OF SLOTS
                          54         0593       
            54            02     78  0594   458 	ASHL	#2,R4,R1		; SIZE OF BLOCK TO ALLOCATE
                          51         0597       
                          0498   30  0598   459 	BSBW	ALONONPAGED		; ALLOCATE BLOCK FOR PHV
   00000000'EF            52     D0  059B   460 	MOVL	R2,PHV$GL_PIXBAS	; SET PROCESS INDEX VECTOR
   00000000'EF            6244   3E  05A2   461 	MOVAW	(R2)[R4],PHV$GL_REFCBAS	; AND REFERENCE COUNT BASE
         FE A244 00000000'EF     B0  05AA   462 	MOVW	SGN$GW_MAXPRCCT,-2(R2)[R4]; SET SYSTEM PIX
                          54     D7  05B3   463 	DECL	R4			; 
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  10
07                                                                                                                               (1)

   00000000'FF44     0400 8F     B0  05B5   464 	MOVW	#1024,@PHV$GL_REFCBAS[R4]	; SET SYSTEM REFERENCE COUNT 
                          54     D7  05BF   465 20$:	DECL	R4			; 
                          0D     19  05C1   466 	BLSS	30$			; CHECK FOR DONE
   00000000'FF44          01     AE  05C3   467 	MNEGW	#1,@PHV$GL_REFCBAS[R4]	; INIT REFC
                          6244   B4  05CB   468 	CLRW	(R2)[R4]		; AND PIX
                          EF     11  05CE   469 	BRB	20$			; AND AGAIN
                                     05D0   470 30$:					;
                                     05D0   471 ;
                                     05D0   472 ;	SETUP SWAPPER MAP
                                     05D0   473 ;
                                     05D0   474 INI_SWAP:				;
   00000000'EF            02     78  05D0   475 	ASHL	#2,SGN$GL_MAXWSCNT,R1	; GET SIZE TO ALLOCATE
                          51         05D7       
                          0458   30  05D8   476 	BSBW	ALONONPAGED		; ALLOCATE A BLOCK FOR SWAPPER MAP
   00000000'EF            52     D0  05DB   477 	MOVL	R2,SWP$GL_MAP		; SET ADDRESS OF SWAPPER MAP
            54   00000000'EF     DE  05E2   478 	MOVAL	SCH$GL_SWPPCB,R4	; GET ADDRESS OF SWAPPER PCB
            55         64 A4     D0  05E9   479 	MOVL	PCB$L_PHD(R4),R5	; AND GET HEADER ADDRESS
       00C8 C5            52     D0  05ED   480 	MOVL	R2,PHD$L_P0BR(R5)	; SET BASE REGISTER
            00   00000000'EF     F0  05F2   481 	INSV	SGN$GL_MAXWSCNT,#0,#24,PHD$L_P0LRASTL(R5) ; AND LENGTH REGISTER
       00CC C5            18         05F9       
                                     05FD   482 ;
                                     05FD   483 ; ALLOCATE MODIFIED PAGE WRITER PAGE TABLE ENTRY ARRAY
                                     05FD   484 ; AND PROCESS HEADER VECTOR INDEX ARRAY.
                                     05FD   485 ;
                                     05FD   486 INI_MPW:
            51   00000000'EF     3C  05FD   487 	MOVZWL	MPW$GW_MPWPFC,R1	; MODIFIED PAGE WRITER PAGE FAULT CLUSTER
            51            02     9C  0604   488 	ROTL	#2,R1,R4		; SIZE OF PTE ARRAY
                          54         0607       
            51            6441   3E  0608   489 	MOVAW	(R4)[R1],R1		; 6 BYTES PER PAGE TO ALLOCATE
                          0424   30  060C   490 	BSBW	ALONONPAGED		; ALLOCATE THE STORAGE
   00000000'EF            52     D0  060F   491 	MOVL	R2,MPW$AL_PTE		; ADR OF PAGE TABLE ENTRY ARRAY
            54            52     C1  0616   492 	ADDL3	R2,R4,MPW$AW_PHVINDEX	; ADR OF PROCESS HEADER VECTOR INDEX ARRAY
                 00000000'EF         0619       
                                     061E   493 ;
                                     061E   494 ;	MOVE A COPY OF THE BOOTDRIVER TO NON-PAGED POOL
                                     061E   495 ;
                                     061E   496 INI_BOOTDRIVR:				;
            56   00000000'EF     D0  061E   497 	MOVL	EXE$GL_RPB,R6		; GET A POINTER TO RPB
            53   00000000'EF     D0  0625   498 	MOVL	SWP$GL_BALSPT,R3	; USE FIRST BALANCE SLOT
            50         34 A6     D0  062C   499 	MOVL	RPB$L_IOVEC(R6),R0	; GET PHYSICAL ADDRESS OF DRIVER
            09            00     EF  0630   500 	EXTZV	#0,#9,R0,R7		; SAVE BYTE DISPLACEMENT
            57            50         0633       
            50         F7 8F     78  0635   501 	ASHL	#-9,R0,R0		; CONVERT TO PHYSICAL PAGE
                          50         0639       
            52            04     9A  063A   502 	MOVZBL	#4,R2			; MAP 4 PAGES
            50   F0000000 8F     C9  063D   503 10$:	BISL3	#<PTE$M_VALID!PTE$C_URKW>,R0,(R3)+ ; MAP A PAGE OF BOOTDRIVER
                          83         0644       
                          50     D6  0645   504 	INCL	R0			; NEXT PFN
            F3            52     F5  0647   505 	SOBGTR	R2,10$			; MAP ALL FOUR PAGES
                                     064A   506 	INVALID				; CLEAR TRANSLATION BUFFER
            51         38 A6     D0  064D   507 	MOVL	RPB$L_IOVECSZ(R6),R1	; SET SIZE TO ALLOCATE
                          03DF   30  0651   508 	BSBW	ALONONPAGED		; ALLOCATE A PIECE OF POOL
         34 A6            52     D0  0654   509 	MOVL	R2,RPB$L_IOVEC(R6)	; SET POINTER TO BOOTDRIVER
   00000000'FF47       38 A6     28  0658   510 	MOVC3	RPB$L_IOVECSZ(R6),@SWP$GL_BALBASE[R7],(R2); MOVE BOOTDRIVER
                          62         0661       
            53   00000000'EF     D0  0662   511 	MOVL	SWP$GL_BALSPT,R3	; ADDRESS OF SPT ENTRIES USED
                          83     7C  0669   512 	CLRQ	(R3)+			; CLEAN UP SPT
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  11
07                                                                                                                               (1)

                          83     7C  066B   513 	CLRQ	(R3)+			;
                                     066D   514 	INVALID				; AND CLEAR TRANSLATION BUFFER
         50 A6   00000000'EF     D0  0670   515 	MOVL	MMG$GL_SPTBASE,RPB$L_SVASPT(R6); SET ADDRESS OF SPT
            51         20 A6     D0  0678   516 	MOVL	RPB$L_BOOTR1(R6),R1	; GET TR NUMBER
            50   00000000'EF41   D0  067C   517 	MOVL	MMG$AL_SBICONF[R1],R0	; TRANSLATE TO ADDRESS OF CONFIGREG 0
         60 A6            50     D0  0684   518 	MOVL	R0,RPB$L_ADPVIR(R6)	; SET AS VIRTUAL ADDRESS OF ADAPTER
            0D            00     EF  0688   519 	EXTZV	#0,#13,RPB$L_CSRPHY(R6),R1	; GET OFFSET INTO UNIBUS I/O PAGE
            51         54 A6         068B       
         58 A6       1000 C041   9E  068E   520 	MOVAB	<8*512>(R0)[R1],RPB$L_CSRVIR(R6); SET VA OF UNIBUS REGISTERS
                                     0695   521 ;
                                     0695   522 ;	POINT SYSTEM PCB AT SYSTEM PHD AND SET PROPER PIX
                                     0695   523 ;
            54   00000000'EF     DE  0695   524 	MOVAL	MMG$AL_SYSPCB,R4	; GET ADDRESS OF SYSTEM PCB
         64 A4   00000000'EF     D0  069C   525 	MOVL	MMG$GL_SYSPHD,PCB$L_PHD(R4)	; AND SET IN SYSTEM PCB
         60 A4   00000000'EF     B0  06A4   526 	MOVW	SGN$GW_MAXPRCCT,PCB$L_PID(R4)	; SET SYSTEM PIX
                                     06AC   527 ;
                                     06AC   528 ; 	MOVE LOGICAL NAME FOR SYS$DISK INTO NON-PAGED POOL
                                     06AC   529 ;
                                     06AC   530 INI_LOG:				;
            54       F958 CF     0F  06AC   531 	REMQUE	LOG$AL_DISKLOG,R4	; REMOVE BLOCK FROM LIST
            51         08 A4     3C  06B1   532 	MOVZWL	LOG$W_SIZE(R4),R1	; GET SIZE TO ALLOCATE
                          037B   30  06B5   533 	BSBW	ALONONPAGED		; ALLOCATE IT
                          52     DD  06B8   534 	PUSHL	R2			; SAVE ADDRESS OF BLOCK
            64         08 A4     28  06BA   535 	MOVC3	LOG$W_SIZE(R4),(R4),(R2); COPY BLOCK TO POOL
                          62         06BE       
   00000000'EF            9E     0E  06BF   536 	INSQUE	@(SP)+,LOG$GL_SLTFL	; INSERT AT HEAD OF LIST
                                     06C6   537 ;
                                     06C6   538 ; LOAD DRIVER FOR BOOTSTRAP DEVICE AND FINISH ALLOCATING AND INITIALIZING
                                     06C6   539 ; THE DATA BASE TO DESCRIBE THE BOOT DEVICE.
                                     06C6   540 ;
                                     06C6   541 INI_BOOTDEVICE:				;
            51   00000000'EF     9E  06C6   542 	MOVAB	DXP$UCB0,R1		; GET ADDRESS OF FLOPPY UCB
                          039E   30  06CD   543 	BSBW	ALOSPT			; ALLOCATE SPT FOR UCB$L_SVPN WINDOW
         64 A1            50     D0  06D0   544 	MOVL	R0,UCB$L_SVPN(R1)	; SAVE PAGE NUMBER IN UCB
            51       F92C CF     D0  06D4   545 	MOVL	BOODRIVSIZE,R1		; GET SIZE OF DRIVER IN BYTES
                          0357   30  06D9   546 	BSBW	ALONONPAGED		; ALLOCATE SPACE FOR IT
            56   00000000'EF     D0  06DC   547 	MOVL	EXE$GL_RPB,R6		; GET BASE ADDRESS FOR RPB
            55         34 A6     D0  06E3   548 	MOVL	RPB$L_IOVEC(R6),R5	; GET ADDRESS OF BOOT VECTOR
                          56     DD  06E7   549 	PUSHL	R6			; RPB ADDRESS
                          01     DD  06E9   550 	PUSHL	#1			; SET MODE TO VIRTUAL
                 00000000'8F     DD  06EB   551 	PUSHL	#IO$_READLBLK		; FUNCTION CODE
                     F90B CF     DD  06F1   552 	PUSHL	BOODRIVLBN		; LBN OF BOOTSTRAP DRIVER
                          51     DD  06F5   553 	PUSHL	R1			; SIZE TO READ
                          52     DD  06F7   554 	PUSHL	R2			; ADDRESS OF BUFFER
         00 B545          06     FB  06F9   555 	CALLS	#6,@(R5)[R5]		; CALL THROUGH SELF RELATIVE VECTOR
            01            50     E8  06FE   556 	BLBS	R0,10$			; CONTINUE IF NO ERROR
                                 00  0701   557 	HALT				; **** FATAL ERROR **** UNABLE TO READ DRIVER
            54            52     D0  0702   558 10$:	MOVL	R2,R4			; SAVE ADDRESS OF DRIVER/PROLOGUE
            53   00000000'EF     DE  0705   559 	MOVAL	SYS$GL_BOOTDDB,R3	; GET DDB ADDRESS FOR BOOT DEVICE
            55         04 A3     D0  070C   560 	MOVL	DDB$L_UCB(R3),R5	; PICK UP UCB ADDRESS
         48 A5         64 A6     B0  0710   561 	MOVW	RPB$W_UNIT(R6),UCB$W_UNIT(R5)	; SET PROPER UNIT NUMBER
                          0356   30  0715   562 	BSBW	ALOSPT			; ALLOCATE SPT SLOT FOR UCB WINDOW
         64 A5            50     D0  0718   563 	MOVL	R0,UCB$L_SVPN(R5)	; SAVE SYSTEM VPN IN UCB
            50         16 A4     9A  071C   564 	MOVZBL	DPT$T_NAME(R4),R0	; GET SIZE OF DRIVER NAME
                          50     D6  0720   565 	INCL	R0			; BUMP TO INCLUDE COUNT
                          3F     BB  0722   566 	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; SAVE MOVC REGISTERS
         16 A4            50     28  0724   567 	MOVC3	R0,DPT$T_NAME(R4),DDB$T_DRVNAME(R3)	; SET DRIVER NAME IN DDB
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  12
07                                                                                                                               (1)

                       24 A3         0728       
                          3F     BA  072A   568 	POPR	#^M<R0,R1,R2,R3,R4,R5>	; RESTORE MOVC REGISTERS
            7E            01     CE  072C   569 	MNEGL	#1,-(SP)		; INIT ADAPTER COUNTS
            50   FFFFFFFC'EF     DE  072F   570 	MOVAL	IOC$GL_ADPLIST-ADP$L_LINK,R0	; START OF ADAPTER LIST
            50         04 A0     D0  0736   571 30$:	MOVL	ADP$L_LINK(R0),R0	; MOVE TO NEXT ADAPTER
                          29     13  073A   572 	BEQL	40$			; BRANCH IF NONE
            51         0E A0     3C  073C   573 	MOVZWL	ADP$W_ADPTYPE(R0),R1	; GET ADAPTER TYPE CODE
                          6E41   96  0740   574 	INCB	(SP)[R1]		; BUMP APPROPRIATE COUNT
         0B A0            6E41   90  0743   575 	MOVB	(SP)[R1],ADP$B_NUMBER(R0); SET ADAPTER NUMBER 
         20 A6         0C A0     B1  0748   576 	CMPW	ADP$W_TR(R0),RPB$L_BOOTR1(R6)	; IS THIS THE BOOT ADAPTER?
                          E7     12  074D   577 	BNEQ	30$			; NO, KEEP LOOKING
            58            50     D0  074F   578 	MOVL	R0,R8			; SAVE ADP ADDRESS
            52         14 A3     9E  0752   579 	MOVAB	DDB$T_NAME(R3),R2	; GET ADDRESS OF DEVICE NAME
            82            03     90  0756   580 	MOVB	#3,(R2)+		; SET COUNT FOR DDB NAME
            82         25 A3     B0  0759   581 	MOVW	DDB$T_DRVNAME+1(R3),(R2)+	; ASSUME SAME AS START OF DRIVER
            6E41       41 8F     81  075D   582 	ADDB3	#^A/A/,(SP)[R1],(R2)	; SET CONTROLLER BASED ON ADAPTER COUNT
                          62         0762       
                          D1     11  0763   583 	BRB	30$			; CONTINUE FOR ALL ADAPTERS
                          8E     D5  0765   584 40$:	TSTL	(SP)+			; CLEAN STACK
            57            58     D0  0767   585 	MOVL	R8,R7			; SAVE ADP ADDRESS
            58         10 A7     D0  076A   586 	MOVL	ADP$L_CRB(R7),R8	; GET ADDRESS OF CRB IF IT EXISTS
         0E A7       0000'8F     B1  076E   587 	CMPW	#AT$_MBA,ADP$W_ADPTYPE(R7); IS THIS A MASSBUS ADAPTER?
                          66     13  0774   588 	BEQL	50$			; YES, CRB/IDB ALREADY ALLOCATED
            51            38     3C  0776   589 	MOVZWL	#CRB$C_LENGTH,R1	; SET SIZE TO ALLOCATE
                          02B7   30  0779   590 	BSBW	ALONONPAGED		; ATTEMPT TO ALLOCATE IT
         08 A2            51     B0  077C   591 	MOVW	R1,CRB$W_SIZE(R2)	; SET STRUCTURE SIZE
         0A A2            05     90  0780   592 	MOVB	#DYN$C_CRB,CRB$B_TYPE(R2); AND TYPE CODE
            62            62     DE  0784   593 	MOVAL	CRB$L_WQFL(R2),CRB$L_WQFL(R2); BUILD WAIT QUEUE HEADER
         04 A2            62     DE  0787   594 	MOVAL	CRB$L_WQFL(R2),CRB$L_WQBL(R2); FLINK AND BLINK
         0C A2            08     B0  078B   595 	MOVW	#8,CRB$W_REFC(R2)	; SET REFERENCE COUNT
         14 A2   9F1650D5 8F     D0  078F   596 	MOVL	#^X9F1650D5,CRB$L_INTD(R2) ; SET TSTL R0;JSB @#0 INTO INTERRUPT DISPATCH
         28 A2            57     D0  0797   597 	MOVL	R7,CRB$L_INTD+VEC$L_ADP(R2)	; SET POINTER TO ADP
            58            52     D0  079B   598 	MOVL	R2,R8			; SAVE CRB POINTER
            51       0050 8F     3C  079E   599 	MOVZWL	#<IDB$C_LENGTH+<8*4>>,R1; SIZE TO ALLOCATE FOR IDB
                          028D   30  07A3   600 	BSBW	ALONONPAGED		; ALLOCATE IDB
         08 A2            51     B0  07A6   601 	MOVW	R1,IDB$W_SIZE(R2)	; SET SIZE OF IDB
         0A A2            09     90  07AA   602 	MOVB	#DYN$C_IDB,IDB$B_TYPE(R2); AND STRUCTURE TYPE CODE
            50   00000000'EF     D0  07AE   603 	MOVL	EXE$GL_RPB,R0		; GET ADDRESS OF RESTART PARAMETER BLOCK
            0D            00     EF  07B5   604 	EXTZV	#0,#13,RPB$L_CSRPHY(R0),R0	; GET OFFSET TO CSR
            50         54 A0         07B8       
            50            67     C0  07BB   605 	ADDL	ADP$L_CSR(R7),R0	; PLUS BASE OF UNIBUS ADAPTER
            50   00001000 8F     C1  07BE   606 	ADDL3	#<8*512>,R0,IDB$L_CSR(R2); SET CSR ADDRESS INTO IDB
                          62         07C5       
         1C A8            52     D0  07C6   607 	MOVL	R2,CRB$L_INTD+8(R8)	; POINT CRB TO IDB
         0C A2            57     D0  07CA   608 	MOVL	R7,IDB$L_ADP(R2)	; POINT IDB TO ADP
            50       0088 8F     3C  07CE   609 	MOVZWL	#^X88,R0		; UNIBUS VECTOR ADDRESS FOR RK07
            50         10 B740   9E  07D3   610 	MOVAB	@ADP$L_VECTOR(R7)[R0],R0; COMPUTE ADDRESS OF VECTOR
            60         16 A8     9E  07D8   611 	MOVAB	CRB$L_INTD+2(R8),(R0)	; CONNECT VECTOR TO CRB
            52         1C A8     D0  07DC   612 50$:	MOVL	CRB$L_INTD+VEC$L_IDB(R8),R2 ; GET ADDRESS OF IDB
            50         48 A5     3C  07E0   613 	MOVZWL	UCB$W_UNIT(R5),R0	; GET UNIT NUMBER
         10 A240          55     D0  07E4   614 	MOVL	R5,IDB$L_UCBLST(R2)[R0]	; SET ADDRESS OF UCB INTO IDB LIST
         0B A2            08     90  07E9   615 	MOVB	#8,IDB$B_UNITS(R2)	; COUNT OF UNITS = 8
         20 A5            58     D0  07ED   616 	MOVL	R8,UCB$L_CRB(R5)	; CONNECT UCB TO CRB
   00000000'EF            55     D0  07F1   617 	MOVL	R5,EXE$GL_SYSUCB	; SET ADDRESS OF SYSTEM DEVICE UCB
   00000000'EF            55     D0  07F8   618 	MOVL	R5,EXE$GL_SYSWCBUC	; AND IN WINDOW CONTROL BLOCK
                                     07FF   619 ;
                                     07FF   620 ; NOW FILL IN CORRECT EQUIVALENCE STRING FOR SYS$DISK
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  13
07                                                                                                                               (1)

                                     07FF   621 ;
            50   00000000'EF     D0  07FF   622 	MOVL	LOG$GL_SLTFL,R0		; GET ADDRESS OF SYS$DISK NAME BLOCK
            51         14 A0     9A  0806   623 	MOVZBL	LOG$C_LENGTH(R0),R1	; GET LENGTH OF LOGICAL NAME
            50         16 A041   9E  080A   624 	MOVAB	LOG$C_LENGTH+2(R0)[R1],R0 ; POINT TO EQUIVALENCE NAME
            51         24 A5     D0  080F   625 	MOVL	UCB$L_DDB(R5),R1	; GET DDB POINTER
            80         15 A1     B0  0813   626 	MOVW	DDB$T_NAME+1(R1),(R0)+	; SET FIRST TWO CHARACTERS OF NAME
            80         17 A1     90  0817   627 	MOVB	DDB$T_NAME+3(R1),(R0)+	; SET CONTROLLER DESIGNATOR
            60         48 A5     80  081B   628 	ADDB	UCB$W_UNIT(R5),(R0)	; NOW SET CORRECT UNIT NUMBER
                                     081F   629 ;
                                     081F   630 ; INSERT ALL DRIVERS LINKED AS PART OF THE SYSTEM IMAGE IN THE DRIVER 
                                     081F   631 ; PROLOGUE TABLE LIST SO THAT SUBSEQUENT DEVICE CONNECTIONS WILL BE ABLE
                                     081F   632 ; TO FIND THEM.
                                     081F   633 ;
   00000000'EF   00000000'EF     0E  081F   634 	INSQUE	DXP$DPT,IOC$GL_DPTLIST	; INSERT CONSOLE FLOPPY DRIVER ON LIST
   00000000'EF   00000000'EF     0E  082A   635 	INSQUE	MB$DPT,IOC$GL_DPTLIST	; INSERT MAILBOX DRIVER ON DRIVER LIST
   00000000'EF   00000000'EF     0E  0835   636 	INSQUE	NET$DPT,IOC$GL_DPTLIST	; INSERT NETDRIVER ON DRIVER LIST
   00000000'EF   00000000'EF     0E  0840   637 	INSQUE	NL$DPT,IOC$GL_DPTLIST	; INSERT NULL DRIVER ON DRIVER LIST
   00000000'EF   00000000'EF     0E  084B   638 	INSQUE	OP$DPT,IOC$GL_DPTLIST	; INSERT CONSOLE DRIVER ON DRIVER LIST
   00000000'EF   00000000'EF     0E  0856   639 	INSQUE	TT$DPT,IOC$GL_DPTLIST	; INSERT TERMINAL(DZ11) DRIVER ON LIST
   00000000'EF            64     0E  0861   640 	INSQUE	DPT$L_FLINK(R4),IOC$GL_DPTLIST ; INSERT DRIVER IN LIST
                                     0868   641 ;
                                     0868   642 ; CONNECT DRIVER TO DEVICE DATA BASE AND PERFORM ANY NECESSARY RELOCATION.
                                     0868   643 ;
                 00000000'EF     16  0868   644 	JSB	IOC$INITDRV		; CONNECT DRIVER TO DATA BASE
         58 A5       0800 8F     A8  086E   645 	BISW	#UCB$M_VALID,UCB$W_STS(R5) ; MUST FORCE ON SOFTWARE VOLUME VALID
                                     0874   646 ;
                                     0874   647 ;	RESTORE PROPER IPL FOR POOL ALLOCATION
                                     0874   648 ;
   00000000'EF            5B     D0  0874   649 	MOVL	R11,EXE$GL_NONPAGED	; END OF INIT POOL ALLOCATION
                                     087B   650 ;
                                     087B   651 ; INIT DEVICE CONTROLLERS
                                     087B   652 ;
                                     087B   653  
                                     087B   654 INI_DEVICE:				;
                                     087B   655 	.ENABL	LSB
            5D            5E     D0  087B   656 	MOVL	SP,FP			; SAVE CURRENT STACK POINTER
            5C       0904'CF     9E  087E   657 	MOVAB	W^27$,AP		; SET RETRY POINT
            5B   00000000'EF     DE  0883   658 	MOVAL	IOC$GL_DEVLIST,R11	; GET ADDRESS OF DEVICE DATA BASE LISTHEAD
            5B            6B     D0  088A   659 10$:	MOVL	DDB$L_LINK(R11),R11	; GET ADDRESS OF NEXT DDB
                          03     12  088D   660 	BNEQ	15$			; CONTINUE IF NOT AT END OF LIST
                          007B   31  088F   661 	BRW	30$			; ELSE DEVICE INITIALIZATION COMPLETE
            5A         D8 AB     DE  0892   662 15$:	MOVAL	DDB$L_UCB-UCB$L_LINK(R11),R10 ; GET ADDRESS OF FIRST UCB ADDRESS
                          59     D4  0896   663 	CLRL	R9			; CLEAR LAST CRB ADDRESS
            5A         2C AA     D0  0898   664 20$:	MOVL	UCB$L_LINK(R10),R10	; GET ADDRESS OF NEXT UCB
                          EC     13  089C   665 	BEQL	10$			; IF EQL NO MORE THIS DDB
         58 AA            10     A8  089E   666 	BISW	#UCB$M_ONLINE,UCB$W_STS(R10) ; SET UNIT ON LINE
         34 AA            00'    E0  08A2   667 22$:	BBS	S^#DEV$V_MBX,UCB$L_DEVCHAR(R10),20$ ; IF SET, THEN DEVICE MAILBOX
                          F1         08A6       
            54         20 AA     D0  08A7   668 	MOVL	UCB$L_CRB(R10),R4	; GET ADDRESS OF CRB
            59            54     D1  08AB   669 	CMPL	R4,R9			; ADDRESS EQUAL TO LAST?
                          36     13  08AE   670 	BEQL	25$			; IF EQL YES
            59            54     D0  08B0   671 	MOVL	R4,R9			; SET ADDRESS OF LAST CRB
            58            59     D0  08B3   672 	MOVL	R9,R8			; COPY PRIMARY CRB ADDRESS
                       10 A8     D5  08B6   673 	TSTL	CRB$L_LINK(R8)		; SLAVE CONTROLLER?
                          04     13  08B9   674 	BEQL	23$			; IF EQL NO
            58         10 A8     D0  08BB   675 	MOVL	CRB$L_LINK(R8),R8	; GET LINK TO SECONDARY CRB
            56            5B     D0  08BF   676 23$:	MOVL	R11,R6			; SET ADDRESS OF DDB
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  14
07                                                                                                                               (1)

            55         1C A8     D0  08C2   677 	MOVL	CRB$L_INTD+8(R8),R5	; GET ADDRESS OF IDB
            54            65     D0  08C6   678 	MOVL	IDB$L_CSR(R5),R4	; GET ADDRESS OF CONTROLLER CSR
                                     08C9   679  
                                     08C9   680 ;
                                     08C9   681 ; ENTER INITIALIZATION CODE WITH QUESTIONABLE CSR. THE INIT CODE WILL
                                     08C9   682 ; FAULT TO 27$ IF THE CSR IS NON-EXISTENT.
                                     08C9   683 ;
                                     08C9   684 ;	R4 = CSR
                                     08C9   685 ;	R5 = IDB
                                     08C9   686 ;	R6 = DDB
                                     08C9   687 ;
                                     08C9   688 ;	R8,R9,R10 MUST BE PRESERVED
                                     08C9   689 ;
                                     08C9   690  
            53         28 A8     D0  08C9   691 	MOVL	CRB$L_INTD+VEC$L_ADP(R8),R3  ; GET ADDRESS OF ADP
                          14     13  08CD   692 	BEQL	24$			; BRANCH IF NO ADAPTER
         0E A3       0000'8F     B1  08CF   693 	CMPW	#AT$_UBA,ADP$W_ADPTYPE(R3) ; IS THIS A UNIBUS ADAPTER?
                          0C     12  08D5   694 	BNEQ	24$			; NO
            53            63     D0  08D7   695 	MOVL	ADP$L_CSR(R3),R3	; GET ADDRESS OF ADAPTER CONFIGURATION REG
                          64     B5  08DA   696 	TSTW	(R4)			; TEST IF CONTROLLER PRESENT
         08 A3         08 A3     D0  08DC   697 	MOVL	UBA$L_SR(R3),UBA$L_SR(R3) ; CLEAR STATUS REGISTER
                          21     12  08E1   698 	BNEQ	27$			; IF NEQ NONEXISTENT DEVICE
                       20 B8     16  08E3   699 24$:	JSB	@CRB$L_INTD+12(R8)	; INITIALIZE CONTROLLER
            53         1C B9     D0  08E6   700 25$:	MOVL	@CRB$L_INTD+8(R9),R3	; GET PRIMARY CONTROL REGISTER ADDRESS
            54         1C B8     D0  08EA   701 	MOVL	@CRB$L_INTD+8(R8),R4	; GET SECONDARY CONTROL REGISTER ADDRESS
            55            5A     D0  08EE   702 	MOVL	R10,R5			; SET DEVICE UNIT UCB ADDRESS
                       2C A9     D5  08F1   703 	TSTL	CRB$L_INTD+VEC$L_UNITINIT(R9) ; UNIT INITIALIZATION SPECIFIED?
                          A2     13  08F4   704 	BEQL	20$			; IF EQL NO
                       2C B9     16  08F6   705 	JSB	@CRB$L_INTD+VEC$L_UNITINIT(R9) ; INITIALIZE UNIT
                                     08F9   706 ;	MOVL	DDB$L_DDT(R11),R2	; GET ADDRESS OF DDT
                                     08F9   707 ;	ADDL3	DDT$L_INIT(R2),R2,R1	; CALCULATE INITIALIZATION ROUTINE ADDRESS
                                     08F9   708 ;	BLSS	200$			; IF LSS SYSTEM ADDRESS
                                     08F9   709 ;	SUBL	R2,R1			; SUBTRACT OUT BASE ADDRESS
                                     08F9   710 ;200$:	JSB	(R1)			; CALL UNIT INITIALIZATION ROUTINE
                          9D     11  08F9   711 	BRB	20$			; 
                                     08FB   712  
                                     08FB   713 ;
                                     08FB   714 ; ***** WARNING, DO NOT FALL THROUGH TO THE FOLLOWING CODE,
                                     08FB   715 ; THE ALIGN IS NECESSARY FOR THE EXCEPTION ENTRY AND WILL (MAY)
                                     08FB   716 ; LEAVE ZERO BYTES.
                                     08FB   717 ;
                                     08FB   718 ; CSR NON-EXISTENT
                                     08FB   719 ;
                                     08FB   720  
                                     08FB   721 	.ALIGN	LONG
                                     08FC   722 INI$MCHK:				; INIT MACHINE CHECK HANDLER
            00'           00     DA  08FC   723 	MTPR	#0,S^#PR$_SBIFS		; CLEAR FAULT BIT
            5E            5D     D0  08FF   724 26$:	MOVL	FP,SP			; RESET STACK POINTER
                          6C     17  0902   725 	JMP	(AP)			; GO TO RETRY POINT
                          59     D4  0904   726 27$:	CLRL	R9			; SET NO LAST CRB TO FORCE UCB SEARCH
         58 AA            10     AA  0906   727 	BICW	#UCB$M_ONLINE,UCB$W_STS(R10) ; SET UNIT OFFLINE
                          FF8B   31  090A   728 	BRW	20$			; AND CONTINUE SEARCH
                                     090D   729 30$:
                 00000000'EF   8ED0  090D   730 	POPL	EXE$MCHKVEC		; RELOAD MACHINE CHECK VECTOR
                          F6F2'  30  0914   731 	BSBW	INI$RDONLY		; MAKE THE SYSTEM CODE READ ONLY
                          F73C'  30  0917   732 	BSBW	INI$PROCREG		; INIT PROCESSOR REGISTERS
            50   00000000'EF     3C  091A   733 50$:	MOVZWL	SGN$GW_SYSDWSCT,R0	; SYSTEM WORKING SET COUNT
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  15
07                                                                                                                               (1)

   00000000'EF            50     C3  0921   734 	SUBL3	R0,SCH$GL_FREECNT,R0	; SET AVAILABLE PAGE COUNT
                          50         0928       
            50   00000000'8F     C1  0929   735 	ADDL3	#<<SWP$GL_SHELLBAS-MMG$AL_PGDCODEN>@-9>,R0,-
                                     0930       
                 00000000'EF         0930   736 		PFN$GL_PHYPGCNT		; ADD INIT PAGES ALSO
   00000000'EF   00000000'EF     D0  0935   737 	MOVL	SGN$GL_FREELIM,SCH$GL_FREELIM	; SET WORKING VALUE OF FREE LIMIT
   00000000'EF   00000000'EF     C3  0940   738 	SUBL3	SCH$GL_FREELIM,PFN$GL_PHYPGCNT,R0	; COMPUTE MAX WS SIZE
                          50         094B       
            50   00000000'EF     C2  094C   739 	SUBL	SCH$GL_FREELIM,R0	; MINUS 2*FREELIM
   00000000'EF            50     D1  0953   740 	CMPL	R0,SGN$GL_MAXWSCNT	; CHECK MAX WS COUNT FOR PHYS MEM
                          07     1E  095A   741 	BGEQU	60$			; BR IF OK
   00000000'EF            50     D0  095C   742 	MOVL	R0,SGN$GL_MAXWSCNT	; OTHERWISE LIMIT WS SIZE TO AVAILABLE MEM
                                     0963   743 60$:					;
            7E   00000000'EF     9A  0963   744 	MOVZBL	SWP$GB_SHLP1PT,-(SP)	; GET MANDATORY PAGE TABLES FOR SHELL
            51   00000000'EF     3C  096A   745 	MOVZWL	SGN$GW_MINWSCNT,R1	; GET MINIMUM FLUID WORKING SET
            51   00000000'EF     C0  0971   746 	ADDL	SGN$GL_PHDPAGCT,R1	; ADD FIXED PROCESS HEADER
            51            8E     C0  0978   747 	ADDL	(SP)+,R1		; ADD NECESSARY PAGE TABLES
            51            01'    C0  097B   748 	ADDL	S^#SWP$C_KSTACK+1,R1	; ADD SPACE FOR KERNEL STACK AND POINTERS
            51            50     D1  097E   749 	CMPL	R0,R1			; MIN WORKING SET MUST BE LESS THAN
                          0E     18  0981   750 	BGEQ	70$			; AVAILABLE PHYSICAL MEMORY
                          5B     D4  0983   751 	CLRL	R11			; USE CONSOLE TERMINAL
            51       F726 CF     9E  0985   752 	MOVAB	W^NOPHYSMEM,R1		; SET ADDRESS OF MESSAGE
                 00000000'EF     16  098A   753 	JSB	EXE$OUTZSTRING		; GIVE ERROR
                                 00  0990   754 	HALT				; ***** FATAL ERROR *****
                                     0991   755 70$:					;
            50   00000000'8F     DB  0991   756 	MFPR	#PR$_TXCS,R0		; GET TRANSMITTER STATUS
            50            07     E1  0998   757 	BBC	#7,R0,70$		; WAIT FOR READY
                          F5         099B       
   00000000'8F   00000F04 8F     DA  099C   758 	MTPR	#^XF04,#PR$_TXDB	; CLEAR WARMSTART DISABLE FLAG IN CONSOLE
            50   00000000'8F     DB  09A7   759 80$:	MFPR	#PR$_TXCS,R0		; GET TRANSMITTER STATUS
            50            07     E1  09AE   760 	BBC	#7,R0,80$		; WAIT FOR CONSOLE TO ACCEPT
                          F5         09B1       
                                     09B2   761 ;
                                     09B2   762 ;	MOVE A PIECE OF INIT INTO THE UNUSED POOL AND JUMP TO IT.
                                     09B2   763 ;	THIS SEGMENT OF CODE WILL RELEASE THE INIT PAGES TO THE FREELIST.
                                     09B2   764 ;
            56   00000004'EF     D0  09B2   765 	MOVL	EXE$GL_NONPAGED+4,R6	; GET ADDRESS OF FREE BLOCK
            56            08     C0  09B9   766 	ADDL	#8,R6			; SKIP HEADER
       09C9'CF       0045'8F     28  09BC   767 	MOVC3	#INI_EXITSIZ,W^INI_EXITCODE,(R6)	; COPY CODE TO POOL
                          66         09C3       
                          7E     DC  09C4   768 	MOVPSL	-(SP)			; BUILD PC PCL PAIR
                          56     DD  09C6   769 	PUSHL	R6			; SET NEW PC
                                 02  09C8   770 	REI				; TRANSFER TO CODE IN POOL
                                     09C9   771 	.DSABL	LSB
                                     09C9   772  
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  16
07                                                                                                                               (1)

                                     09C9   774 INI_EXITCODE:				; START OF EXIT CODE TO DESTROY INIT
            55   00000A02'EF     DE  09C9   775 	MOVAL	FREE,R5			; SET ADDRESS OF FREE MEMORY DESCRIPTOR
                 00000000'9F     9F  09D0   776 	PUSHAB	@#SCH$SCHED		; EXIT TO SCHEDULER
                                     09D6   777 ;	BSBW	FILLSPT			; FREE INIT PAGES AND ZAP SPT ENTRIES
                                     09D6   778 ;	JMP	@#SCH$SCHED		; AND GO TO SCHEDULER
                                     09D6   779 ;
                                     09D6   780 ; FILL THE SPT AND RELEASE PREVIOUSLY MAPPED PAGES IF ANY
                                     09D6   781 ;
                                     09D6   782 ; INPUT:
                                     09D6   783 ;
                                     09D6   784 ;	R5 = DESCRIPTOR OF RANGE OF PAGES AND NEW PTE
                                     09D6   785 ;		0(R5) = 1ST VIRTUAL PAGE NUMBER
                                     09D6   786 ;		4(R5) = LAST + 1 VIRTUAL PAGE NUMBER
                                     09D6   787 ;		8(R5) = NEW PAGE TABLE ENTRY TO STORE
                                     09D6   788 ;
                                     09D6   789 ; OUTPUT:
                                     09D6   790 ;
                                     09D6   791 ;	R4 ALTERED
                                     09D6   792 ;
                                     09D6   793  
                                     09D6   794 FILLSPT:
            54            65     D0  09D6   795 	MOVL	(R5),R4
                 00000000'9F     DD  09D9   796 	PUSHL	@#MMG$GL_SPTBASE	; GET BASE ADDRESS OF SPT
         00 BE44 FFE00000 8F     CB  09DF   797 20$:	BICL3	#^C<PTE$M_PFN>,@(SP)[R4],R0 ; PFN FROM SPT ENTRY IF ANY
                          50         09E8       
                          06     13  09E9   798 	BEQL	40$			; BRANCH IF NONE THERE
                 00000000'9F     16  09EB   799 	JSB	@#MMG$DALLOCPFN		; OTHERWISE DEALLOCATE IT
         00 BE44       08 A5     D0  09F1   800 40$:	MOVL	8(R5),@(SP)[R4] 	; SET NEW SPT ENTRY
            54         04 A5     F2  09F7   801 	AOBLSS	4(R5),R4,20$		; REPEAT FOR EACH PAGE IN THE RANGE
                          E3         09FB       
                                     09FC   802 	INVALID				; INVALIDATE THE TRANSLATION BUFFER
                          8E     D5  09FF   803 	TSTL	(SP)+			; CLEAN STACK
                                 05  0A01   804 	RSB				; AND RETURN
                                     0A02   805  
                           FFC00000' 0A02   806 FREE:	.LONG	<INI_BASE-^X80000000>@-9	; START OF INIT
                           FFC00000' 0A06   807 	.LONG	<SWP$GL_SHELLBAS-^X80000000>@-9	; END OF INIT
                           00000000  0A0A   808 	.LONG	0				; NO ACCESS PTE
                           00000045  0A0E   809 INI_EXITSIZ=.-INI_EXITCODE		; SIZE OF EXIT CODE
                                     0A0E   810 ;
                                     0A0E   811 ; SET THE PFN IN R0 RESIDENT
                                     0A0E   812 ;
                                     0A0E   813 ; INPUT:
                                     0A0E   814 ;
                                     0A0E   815 ;	R0 = PFN
                                     0A0E   816 ;
                                     0A0E   817 ; OUTPUT:
                                     0A0E   818 ;
                                     0A0E   819 ;	NONE
                                     0A0E   820 ;
                                     0A0E   821  
                                     0A0E   822 SETRESIDENT:
                 00000000'FF40   B6  0A0E   823 	INCW	@PFN$AW_REFCNT[R0]	; COUNT ONE REFERENCE
   00000000'FF40 00000000'FF40   DE  0A15   824 	MOVAL	@MMG$GL_SPTBASE[R0],@PFN$AL_PTE[R0] ; BACK PTE POINTER
   00000000'FF40          07     90  0A22   825 	MOVB	#PFN$C_ACTIVE,@PFN$AB_STATE[R0] ; PAGE IS ACTIVE
   00000000'FF40          01     90  0A2A   826 	MOVB	#PFN$C_SYSTEM,@PFN$AB_TYPE[R0] ; SYSTEM PAGE
                                 05  0A32   827 	RSB
                                     0A33   828 
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  17
07              NONPAGED POOL ALLOCATION SUBROUTINES                                                                             (1)

                                     0A33   830 	.SBTTL	NONPAGED POOL ALLOCATION SUBROUTINES
                                     0A33   831 ;+
                                     0A33   832 ; ALONONPAGED CALLS EXE$ALONONPAGED TO ALLOCATE NON-PAGED POOL.  IF POOL
                                     0A33   833 ; SPACE IS NOT SUFFICIENT TO CONTAIN THE REQUEST, A FATAL ERROR MESSAGE IS
                                     0A33   834 ; GIVEN AND EXECUTION HALTS. THE PC ON THE TOP OF STACK WILL GIVE FURTHER
                                     0A33   835 ; CONTEXT ABOUT THE ERROR.  THE ALLOCATED BLOCK WILL BE ZEROED.
                                     0A33   836 ;
                                     0A33   837 ; INPUT:
                                     0A33   838 ;	R1 - SIZE OF REQUESTED BLOCK IN BYTES
                                     0A33   839 ;
                                     0A33   840 ; OUTPUTS:
                                     0A33   841 ;	R0 - SUCCESS/FAILURE INDICATION
                                     0A33   842 ;	R1 - ALLOCATED SIZE OF BLOCK
                                     0A33   843 ;	R2 - ADDRESS OF BLOCK
                                     0A33   844 ;-
                                     0A33   845 ALONONPAGED:				;
                 00000000'EF     16  0A33   846 	JSB	EXE$ALONONPAGED		; ATTEMPT TO ALLOCATE
            03            50     E8  0A39   847 	BLBS	R0,10$			; CONTINUE IF ALLOCATED
                          0C     10  0A3C   848 	BSBB	NOPOOLERR		; GIVE ERROR MESSAGE
                                 00  0A3E   849 	HALT				; ***** FATAL ERROR *****
                          3F     BB  0A3F   850 10$:	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; SAVE MOVC REGISTERS
            62            00     2C  0A41   851 	MOVC5	#0,(R2),#0,R1,(R2)	; ZERO FILL BLOCK
            51            00         0A44       
                          62         0A46       
                          3F     BA  0A47   852 	POPR	#^M<R0,R1,R2,R3,R4,R5>	; RESTORE MOVC REGISTERS
                                 05  0A49   853 	RSB				; RETURN
                                     0A4A   854 ;
                                     0A4A   855 ; NOPOOLERR - SEND ERROR MESSAGE FOR INSUFFICIENT NON-PAGED POOL
                                     0A4A   856 ;
                                     0A4A   857 NOPOOLERR:				;
                          5B     D4  0A4A   858 	CLRL	R11			; INDICATE CONSOLE TERMINAL
            51       F633 CF     9E  0A4C   859 	MOVAB	NOSPACE,R1		; SET ADDRESS OF ERROR MESSAGE
                 00000000'EF     17  0A51   860 	JMP	EXE$OUTZSTRING		; AND OUTPUT IT
                                     0A57   861 ;+
                                     0A57   862 ; ADPLINK LINKS THE ADAPTER CONTROL BLOCK  TO THE END OF THE ADP LIST
                                     0A57   863 ;
                                     0A57   864 ; INPUT:
                                     0A57   865 ;	R2 - ADDRESS OF NEW ADP
                                     0A57   866 ; OUTPUTS: 
                                     0A57   867 ;	ADP IS LINK TO THE END OF THE ADPLIST LOCATED BY IOC$GL_ADPLIST.
                                     0A57   868 ;-
                                     0A57   869 ADPLINK:				;
            50   FFFFFFFC'EF     9E  0A57   870 	MOVAB	<IOC$GL_ADPLIST-ADP$L_LINK>,R0	; START OF LIST
            51         04 A0     D0  0A5E   871 10$:	MOVL	ADP$L_LINK(R0),R1	; FLINK TO FIRST ENTRY
                          05     13  0A62   872 	BEQL	20$			; AT END
            50            51     D0  0A64   873 	MOVL	R1,R0			; TRY AGAIN
                          F5     11  0A67   874 	BRB	10$			;
         04 A0            52     D0  0A69   875 20$:	MOVL	R2,ADP$L_LINK(R0)	; CHAIN NEW ADP TO END OF LIST
                                 05  0A6D   876 	RSB				; AND RETURN
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  18
07              ALOSPT - ALLOCATE AND FILL SPT ENTRY FOR BUFFER                                                                  (1)

                                     0A6E   878 	.SBTTL	ALOSPT - ALLOCATE AND FILL SPT ENTRY FOR BUFFER WINDOW
                                     0A6E   879 ;+
                                     0A6E   880 ; ALOSPT ALLOCATES AN SPT SLOT TO BE USED FOR BUFFER OVERMAPPING WHEN
                                     0A6E   881 ; PERFORMING ECC CORRECTION OR OTHER SIMILAR EXCEPTIONAL I/O OPERATIONS.
                                     0A6E   882 ; THE SYSTEM PAGE TABLE ENTRY FOR THE ALLOCATED SYSTEM VIRTUAL PAGE NUMBER
                                     0A6E   883 ; WILL BE SET VALID, KERNEL WRITABLE BUT MAPPED TO A NON-EXISTENT PHYSICAL PAGE.
                                     0A6E   884 ; A FATAL ERROR MESSAGE WILL BE GIVEN IF UNABLE TO ALLOCATE SPT.
                                     0A6E   885 ;
                                     0A6E   886 ; INPUT:
                                     0A6E   887 ; 	BOO$GL_SPTFREL - LOWEST FREE SYSTEM VPN
                                     0A6E   888 ;	BOO$GL_SPTFREH - HIGHEST FREE SYSTEM VPN
                                     0A6E   889 ;
                                     0A6E   890 ; OUTPUT:
                                     0A6E   891 ;	R0 - SYSTEM VPN ALLOCATED
                                     0A6E   892 ;	@MMG$GL_SPTBASE[R0] - PTE$M_VALID!PTE$M_PFN!PTE$C_KW
                                     0A6E   893 ;-
                                     0A6E   894 ALOSPT:					;
            50   00000000'EF     D0  0A6E   895 	MOVL	BOO$GL_SPTFREL,R0	; GET NEXT AVAILABLE SYSTEM VPN
   00000000'EF            50     D1  0A75   896 	CMPL	R0,BOO$GL_SPTFREH	; CHECK FOR REALLY AVAILABLE
                          0E     15  0A7C   897 	BLEQ	10$			; BRANCH IF YES
            51       F672 CF     9E  0A7E   898 	MOVAB	NOSPT,R1		; SET ADDRESS OF ERROR MESSAGE
                          5B     D4  0A83   899 	CLRL	R11			; INDICATE CONSOLE TERMINAL	
                 00000000'EF     16  0A85   900 	JSB	EXE$OUTZSTRING		; OUTPUT ERROR MESSAGE
                                 00  0A8B   901 	HALT				; **** FATAL ERROR ****
                 00000000'EF     D6  0A8C   902 10$:	INCL	BOO$GL_SPTFREL		; MARK VPN ALLOCATED
                                 D0  0A92   903 	MOVL	#<PTE$C_KW!PTE$M_VALID!PTE$M_PFN>,-	;
   00000000'FF40 901FFFFF 8F         0A93   904 		@MMG$GL_SPTBASE[R0]	; SET SPTE VALID, WRITABLE, NONEXISTENT PFN
                                 05  0A9E   905 	RSB				;
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  19
07              INI$MBADP - BUILD ADP AND INITIALIZE MBA                                                                         (1)

                                     0A9F   907 	.SBTTL	INI$MBADP - BUILD ADP AND INITIALIZE MBA
                                     0A9F   908 ;+
                                     0A9F   909 ; INI$MBADP IS CALLED AFTER MAPPING THE REGISTERS FOR A MASSBUS ADAPTER.
                                     0A9F   910 ; AN ADAPTER CONTROL BLOCK IS ALLOCATED AND FILLED.  A CRB AND IDB ARE
                                     0A9F   911 ; ALSO ALLOCATED AND INITIALIZED. THE ADAPTER HARDWARE IS THEN INITIALIZED
                                     0A9F   912 ; BY CALLING MBA$INITIAL.
                                     0A9F   913 ;
                                     0A9F   914 ; INPUT:
                                     0A9F   915 ;	R4 - TR NUMBER OF MASSBUS ADAPTER
                                     0A9F   916 ;
                                     0A9F   917 ;-
                                     0A9F   918 
                                     0A9F   919 INI$MBADP:				; 
                     07FF 8F     BB  0A9F   920 	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10> ; 
            51            38     3C  0AA3   921 	MOVZWL	#CRB$C_LENGTH,R1	; SET SIZE OF CRB
                          FF8A   30  0AA6   922 	BSBW	ALONONPAGED		; ALLOCATE SPACE FOR CRB
                          3F     BB  0AA9   923 	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; SAVE MOVC REGISTERS
       0B4D'CF            08'    28  0AAB   924 	MOVC3	S^#MBACRBLEN,W^MBACRB,CRB$L_INTD(R2) ; FILL WITH TEMPLATE
                       14 A2         0AB0       
                          3F     BA  0AB2   925 	POPR	#^M<R0,R1,R2,R3,R4,R5>	; RESTORE MOVC REGISTERS
            50   00000100'EF44   DE  0AB4   926 	MOVAL	SCB$AL_BASE+^X100[R4],R0; COMPUTE ADDRESS OF FIRST VECTOR
            60         15 A2     DE  0ABC   927 	MOVAL	CRB$L_INTD+1(R2),(R0)	; CONNECT VECTOR TO CRB CODE
         40 A0         15 A2     DE  0AC0   928 	MOVAL	CRB$L_INTD+1(R2),64(R0)	; SAME FOR
       0080 C0         15 A2     DE  0AC5   929 	MOVAL	CRB$L_INTD+1(R2),128(R0); ALL FOUR
       00C0 C0         15 A2     DE  0ACB   930 	MOVAL	CRB$L_INTD+1(R2),192(R0); VECTORS
         08 A2            51     B0  0AD1   931 	MOVW	R1,CRB$W_SIZE(R2)	; SET CORRECT SIZE
         0A A2            05     90  0AD5   932 	MOVB	#DYN$C_CRB,CRB$B_TYPE(R2) ; SET CORRECT TYPE
            62            62     DE  0AD9   933 	MOVAL	CRB$L_WQFL(R2),CRB$L_WQFL(R2)	; INITIALIZE WAIT QUEUE HEADER
         04 A2            62     DE  0ADC   934 	MOVAL	CRB$L_WQFL(R2),CRB$L_WQBL(R2)	; FLINK AND BLINK
         0C A2            08     B0  0AE0   935 	MOVW	#8,CRB$W_REFC(R2)	; SET REFERENCE COUNT
            5A            52     D0  0AE4   936 	MOVL	R2,R10			; SAVE CRB ADDRESS
            51       0050 8F     3C  0AE7   937 	MOVZWL	#<IDB$C_LENGTH+<8*4>>,R1; SET SIZE TO ALLOCATE FOR IDB
                          FF44   30  0AEC   938 	BSBW	ALONONPAGED		; ALLOCATE IDB
         08 A2            51     B0  0AEF   939 	MOVW	R1,IDB$W_SIZE(R2)	; SET STRUCTURE SIZE
         0A A2            09     90  0AF3   940 	MOVB	#DYN$C_IDB,IDB$B_TYPE(R2); AND TYPE CODE
         0B A2            08     90  0AF7   941 	MOVB	#8,IDB$B_UNITS(R2)	; SET COUNT OF UNITS
            62   00000000'EF44   D0  0AFB   942 	MOVL	MMG$AL_SBICONF[R4],IDB$L_CSR(R2) ; SET CSR ADDRESS TO CONFIG REG 0
         1C AA            52     D0  0B03   943 	MOVL	R2,CRB$L_INTD+VEC$L_IDB(R10)	; SET ADDRESS OF IDB INTO CRB
         20 AA   00000000'9F     9E  0B07   944 	MOVAB	@#MBA$INITIAL,CRB$L_INTD+VEC$L_INITIAL(R10) ; SET ADDRESS OF CONTROLLER INIT
            59            52     D0  0B0F   945 	MOVL 	R2,R9			; SAVE ADDRESS OF IDB
            51            14     3C  0B12   946 	MOVZWL	#ADP$C_MBAADPLEN,R1	; SET SIZE OF MBA ADP
                          FF1B   30  0B15   947 	BSBW	ALONONPAGED		; ALLOCATE ADP FOR MASSBUS ADAPTER
         08 A2            51     B0  0B18   948 	MOVW	R1,ADP$W_SIZE(R2)	; SET SIZE OF STRUCTURE
         0A A2            01     90  0B1C   949 	MOVB	#DYN$C_ADP,ADP$B_TYPE(R2); AND TYPE CODE
            62            69     D0  0B20   950 	MOVL	IDB$L_CSR(R9),ADP$L_CSR(R2); SET ADDRESS OF CONFIGURATION REGISTER
         0C A2            54     B0  0B23   951 	MOVW	R4,ADP$W_TR(R2)		; SET TR NUMBER OF ADAPTER
         0E A2       0000'8F     B0  0B27   952 	MOVW	#AT$_MBA,ADP$W_ADPTYPE(R2); SET ADAPTER TYPE TO MBA
         10 A2            5A     D0  0B2D   953 	MOVL	R10,ADP$L_CRB(R2)	; POINT ADP TO CRB
         28 AA            52     D0  0B31   954 	MOVL	R2,CRB$L_INTD+VEC$L_ADP(R10)	; SET CRB POINTER TO ADP
         0C A9            52     D0  0B35   955 	MOVL	R2,IDB$L_ADP(R9)	; AND INTO IDB
            55            59     D0  0B39   956 	MOVL	R9,R5			; ADDRESS OF IDB
            54            65     D0  0B3C   957 	MOVL	IDB$L_CSR(R5),R4	; ADDRESS OF CONFIGURATION REGISTER 0
                          FF15   30  0B3F   958 	BSBW	ADPLINK			; LINK ADP TO END OF CHAIN
                 00000000'EF     16  0B42   959 	JSB	MBA$INITIAL		; INITIALIZE MASSBUS ADAPTER
                     07FF 8F     BA  0B48   960 	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10>; RESTORE ALL REGISTERS
                                 05  0B4C   961 	RSB				; RETURN
                                     0B4D   962 
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  20
07              INI$MBADP - BUILD ADP AND INITIALIZE MBA                                                                         (1)

                                     0B4D   963 MBACRB:					; SKELETON MBA CRB
                          3C     BB  0B4D   964 	PUSHR	#^M<R2,R3,R4,R5>	; SAVE REGISTERS
                 00000000'9F     16  0B4F   965 	JSB	@#MBA$INT		; CALL INTERRUPT DISPATCHER
                           00000008  0B55   966 MBACRBLEN=.-MBACRB			;
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  21
07              INI$UBADP - BUILD ADP AND INITIALIZE UBA                                                                         (1)

                                     0B55   968 	.SBTTL	INI$UBADP - BUILD ADP AND INITIALIZE UBA
                                     0B55   969 ;+
                                     0B55   970 ; INI$UBADP ALLOCATES AND FILLS IN AN ADAPTER CONTROL BLOCK, INTERRUPT
                                     0B55   971 ; DISPATCHER AND CONNECTS THEM TO THE PROPER SCB VECTORS.  A CALL IS 
                                     0B55   972 ; THEN MADE TO UBA$INITIAL TO INITIALIZE THE ADAPTER HARDWARE.
                                     0B55   973 ;
                                     0B55   974 ; INPUT:
                                     0B55   975 ;	R4 - TR NUMBER
                                     0B55   976 ;-
                           00000080  0B55   977 	NUMUBAVEC = 128			; ALLOW FOR 128 UNIBUS VECTORS
                                     0B55   978 
                                     0B55   979 INI$UBADP::				; 
                     00FF 8F     BB  0B55   980 	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7>	; SAVE R0-R7
            51       0314'8F     3C  0B59   981 	MOVZWL	#<ADP$C_UBAADPLEN+UBINTSZ+<NUMUBAVEC*4>>,R1	
                                     0B5E   982 					; SET SIZE OF BLOCK TO ALLOCATE
                          FED2   30  0B5E   983 	BSBW	ALONONPAGED		; ALLOCATE SPACE FOR ADP
         08 A2            51     B0  0B61   984 	MOVW	R1,ADP$W_SIZE(R2)	; SET SIZE INTO ADP BLOCK
         0A A2            01     90  0B65   985 	MOVB	#DYN$C_ADP,ADP$B_TYPE(R2); AND SET TYPE OF BLOCK
         0E A2       0000'8F     B0  0B69   986 	MOVW	#AT$_UBA,ADP$W_ADPTYPE(R2) ; SET TYPE OF ADAPTER
            62   00000000'EF44   D0  0B6F   987 	MOVL	MMG$AL_SBICONF[R4],ADP$L_CSR(R2) ; SET VA OF CONFIGURATINO REG
         0C A2            54     B0  0B77   988 	MOVW	R4,ADP$W_TR(R2)		; SET TR NUMBER FOR ADAPTER
            50         14 A2     DE  0B7B   989 	MOVAL	ADP$L_DPQFL(R2),R0	; ADDRESS OF DATA PATH WAIT QUEUE
            60            50     D0  0B7F   990 	MOVL	R0,(R0)			; INIT QUEUE HEADER
         04 A0            50     D0  0B82   991 	MOVL	R0,4(R0)		; 
            50         1C A2     DE  0B86   992 	MOVAL	ADP$L_MRQFL(R2),R0	; ADDRESS OF MAP WAIT QUEUE
            60            50     D0  0B8A   993 	MOVL	R0,(R0)			; INIT QUEUE HEADER
         04 A0            50     D0  0B8D   994 	MOVL	R0,4(R0)		; 
            50            1E     D0  0B91   995 	MOVL	#30,R0			; NUMBER OF WORDS-1 IN MAP BITMAP
         26 A240          01     AE  0B94   996 20$:	MNEGW	#1,ADP$W_MRBITMAP(R2)[R0] ; SET 16 BITS OF BITMAP
            F8            50     F4  0B99   997 	SOBGEQ	R0,20$ 			; FILL 31 * 16  => 496 BITS
         24 A2       FFFE 8F     B0  0B9C   998 	MOVW	#^XFFFE,ADP$W_DPBITMAP(R2); MARK DATA PATHS 1-15 AVAILABLE
                       04 A2     D4  0BA2   999 	CLRL	ADP$L_LINK(R2)		; ZAP ADAPTER CHAIN LINK
            54            62     D0  0BA5  1000 	MOVL	ADP$L_CSR(R2),R4	; GET CSR ADDRESS TO INIT
                          52     DD  0BA8  1001 	PUSHL	R2			; SAVE ADP POINTER
                 0000008B'EF     16  0BAA  1002 	JSB	UBA$INITIAL		; AND INITIALIZE ADAPTER
                          04     BA  0BB0  1003 	POPR	#^M<R2>			; RESTORE ADP ADDRESS
                          FEA2   30  0BB2  1004 	BSBW	ADPLINK			; LINK ADP TO END OF LIST
            53       0114'C2     9E  0BB5  1005 	MOVAB	ADP$C_UBAADPLEN+UBINTSZ(R2),R3	; LOCATE VECTORS
         10 A2            53     D0  0BBA  1006 	MOVL	R3,ADP$L_VECTOR(R2)	; AND RECORD IN ADP
            53       FF5C'C3     9E  0BBE  1007 	MOVAB	-UBINTSZ(R3),R3		; BASE OF INTERRUPT CODE
            50         10 AE     D0  0BC3  1008 	MOVL	16(SP),R0		; GET TR NUMBER
                          3F     BB  0BC7  1009 	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; SAVE MOVC REGISTERS
       0C28'CF       00A4'8F     28  0BC9  1010 	MOVC3	#UBINTSZ,W^UBAINTBASE,(R3)	; COPY INTERRUPT CODE
                          63         0BD0       
                          3F     BA  0BD1  1011 	POPR	#^M<R0,R1,R2,R3,R4,R5>	; RESTORE MOVC REGISTERS
            50   00000100'EF40   DE  0BD3  1012 	MOVAL	SCB$AL_BASE+^X100[R0],R0	; COMPUTE FIRST VECTOR ADDRESS
            60       0001'C3     9E  0BDB  1013 	MOVAB	UBAINT4+1(R3),(R0)	; STORE VECTOR FOR BR4
         40 A0       0021'C3     9E  0BE0  1014 	MOVAB	UBAINT5+1(R3),64(R0)	; STORE VECTOR FOR BR5
       0080 C0       0041'C3     9E  0BE6  1015 	MOVAB	UBAINT6+1(R3),128(R0)	; STORE VECTOR FOR BR6
       00C0 C0       0061'C3     9E  0BED  1016 	MOVAB	UBAINT7+1(R3),192(R0)	; STORE VECTOR FOR BR7
            50            62     D0  0BF4  1017 	MOVL	ADP$L_CSR(R2),R0	; GET UBACSR ADDRESS
       000A'C3            50     C0  0BF7  1018 	ADDL	R0,UBAINT4REL(R3)	; ADD CSR VA
       002A'C3            50     C0  0BFC  1019 	ADDL	R0,UBAINT5REL(R3)	; TO EACH OF THE
       004A'C3            50     C0  0C01  1020 	ADDL	R0,UBAINT6REL(R3)	; BICL INSTRUCTIONS
       006A'C3            50     C0  0C06  1021 	ADDL	R0,UBAINT7REL(R3)	; IN THE INTERRUPT DISPATCHERS
       0080'C3            50     C0  0C0B  1022 	ADDL	R0,UBAINTCSR(R3)	; ADD TO CSR OFFSET
            50         10 A2     D0  0C10  1023 	MOVL	ADP$L_VECTOR(R2),R0	; GET ADDRESS OF VECTOR
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  22
07              INI$UBADP - BUILD ADP AND INITIALIZE UBA                                                                         (1)

            51       0080 8F     3C  0C14  1024 	MOVZWL	#NUMUBAVEC,R1		; SET NUMBER OF VECTORS
            80   0000009B'EF     9E  0C19  1025 50$:	MOVAB	UBA$UNEXINT,(R0)+	; FILL VECTOR WITH UNEXPECTED INTERRUPT
            F6            51     F5  0C20  1026 	SOBGTR	R1,50$			; DO ALL VECTOR POSITIONS
                     00FF 8F     BA  0C23  1027 	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7>	; RESTORE R0-R7
                                 05  0C27  1028 	RSB				; AND RETURN
                                     0C28  1029 
                                     0C28  1030 	.ENABL	LSB
                                     0C28  1031 	.ALIGN	QUAD
                                     0C28  1032 UBAINTBASE:				; BASE OF UBA INTERRUPT DISPATCHERS
                           00000000  0C28  1033 UBAINT4=.-UBAINTBASE			; UBA 0 INTERRUPT DISPATCH LEVEL 4
            7E            54     7D  0C28  1034 	MOVQ	R4,-(SP)		; SAVE REGISTERS
   00000030 9F   7FFFFE03 8F     CB  0C2B  1035 	BICL3	#^X7FFFFE03,@#UBA$L_BRRVR,R5 ; READ VECTOR REGISTER AND CLEAR BITS
                          55         0C36       
                           0000000A  0C37  1036 UBAINT4REL=.-UBAINTBASE-5		; OFFSET TO ADD UBACSR VALUE
            7E            52     7D  0C37  1037 	MOVQ	R2,-(SP)		; SAVE REGISTERS
            55       0CCC'CF45   9E  0C3A  1038 	MOVAB	W^VECTAB[R5],R5		; GET ADDRESS OF INTERRUPT VECTOR
                          64     18  0C40  1039 	BGEQ	10$			; IF GEQ UBA INTERRUPTS
            7E            50     7D  0C42  1040 	MOVQ	R0,-(SP)		; SAVE REGISTERS
                          95     17  0C45  1041 	JMP	@(R5)+			; DISPATCH INTERRUPT
                                     0C47  1042 	.ALIGN	QUAD
                           00000020  0C48  1043 UBAINT5=.-UBAINTBASE			; UBA 0 INTERRUPT DISPATCH LEVEL 5
            7E            54     7D  0C48  1044 	MOVQ	R4,-(SP)		; SAVE REGISTERS
   00000034 9F   7FFFFE03 8F     CB  0C4B  1045 	BICL3	#^X7FFFFE03,@#UBA$L_BRRVR+4,R5 ; READ VECTOR REGISTER AND CLEAR BITS
                          55         0C56       
                           0000002A  0C57  1046 UBAINT5REL=.-UBAINTBASE-5		; OFFSET TO ADD UBACSR VALUE
            7E            52     7D  0C57  1047 	MOVQ	R2,-(SP)		; SAVE REGISTERS
            55         CC'AF45   9E  0C5A  1048 	MOVAB	B^VECTAB[R5],R5		; GET ADDRESS OF INTERRUPT VECTOR
                          45     18  0C5F  1049 	BGEQ	10$			; IF GEQ UBA INTERRUPTS
            7E            50     7D  0C61  1050 	MOVQ	R0,-(SP)		; SAVE REGISTERS
                          95     17  0C64  1051 	JMP	@(R5)+			; DISPATCH INTERRUPT
                                     0C66  1052 	.ALIGN	QUAD
                           00000040  0C68  1053 UBAINT6=.-UBAINTBASE			; UBA 0 INTERRUPT DISPATCH LEVEL 6
            7E            54     7D  0C68  1054 	MOVQ	R4,-(SP)		; SAVE REGISTERS
   00000038 9F   7FFFFE03 8F     CB  0C6B  1055 	BICL3	#^X7FFFFE03,@#UBA$L_BRRVR+8,R5 ; READ VECTOR REGISTER AND CLEAR BITS
                          55         0C76       
                           0000004A  0C77  1056 UBAINT6REL=.-UBAINTBASE-5		; OFFSET TO ADD UBACSR VALUE
            7E            52     7D  0C77  1057 	MOVQ	R2,-(SP)		; SAVE REGISTERS
            55         CC'AF45   9E  0C7A  1058 	MOVAB	B^VECTAB[R5],R5		; GET ADDRESS OF INTERRUPT VECTOR
                          25     18  0C7F  1059 	BGEQ	10$			; IF GEQ UBA INTERRUPTS
            7E            50     7D  0C81  1060 	MOVQ	R0,-(SP)		; SAVE REGISTERS
                          95     17  0C84  1061 	JMP	@(R5)+			; DISPATCH INTERRUPT
                                     0C86  1062 	.ALIGN	QUAD
                           00000060  0C88  1063 UBAINT7=.-UBAINTBASE			; UBA 0 INTERRUPT DISPATCH LEVEL 7
            7E            54     7D  0C88  1064 	MOVQ	R4,-(SP)		; SAVE REGISTERS
   0000003C 9F   7FFFFE03 8F     CB  0C8B  1065 	BICL3	#^X7FFFFE03,@#UBA$L_BRRVR+12,R5 ; READ VECTOR REGISTER AND CLEAR BITS
                          55         0C96       
                           0000006A  0C97  1066 UBAINT7REL=.-UBAINTBASE-5		; OFFSET TO ADD UBACSR VALUE
            7E            52     7D  0C97  1067 	MOVQ	R2,-(SP)		; SAVE REGISTERS
            55         CC'AF45   9E  0C9A  1068 	MOVAB	B^VECTAB[R5],R5		; GET ADDRESS OF INTERRUPT VECTOR
                          05     18  0C9F  1069 	BGEQ	10$			; IF GEQ UBA INTERRUPTS
            7E            50     7D  0CA1  1070 	MOVQ	R0,-(SP)		; SAVE REGISTERS
                          95     17  0CA4  1071 	JMP	@(R5)+			; DISPATCH INTERRUPT
            55   00000000'8F     D0  0CA6  1072 10$:	MOVL	I^#UBA$L_CSR,R5		; GET UBA CSR ADDRESS
                           00000080  0CAD  1073 UBAINTCSR=.-UBAINTBASE-5		; OFFSET TO CSR RELOCATION
            7E            50     7D  0CAD  1074 	MOVQ	R0,-(SP)		; SAVE REGISTERS
            50            65     D0  0CB0  1075 	MOVL	UBA$L_CSR(R5),R0	; GET CONFIGURATION REGISTER
            51         04 A5     D0  0CB3  1076 	MOVL	UBA$L_CR(R5),R1		; GET CONTROL REGISTER
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  23
07              INI$UBADP - BUILD ADP AND INITIALIZE UBA                                                                         (1)

            52         08 A5     D0  0CB7  1077 	MOVL	UBA$L_SR(R5),R2		; GET STATUS REGISTER
            53         0C A5     D0  0CBB  1078 	MOVL	UBA$L_DCR(R5),R3	; GET DIAGNOSTIC CONTROL REGISTER
            54         10 A5     D0  0CBF  1079 	MOVL	UBA$L_FMER(R5),R4	; GET FAILED MAP ADDRESS REGISTER
            55         14 A5     D0  0CC3  1080 	MOVL	UBA$L_FUBAR(R5),R5	; GET FAILED UNIBUS ADDRESS REGISTER
                                     0CC7  1081 	BUG_CHECK UNEXUBAINT,FATAL	; UNEXPECTED UBA INTERRUPT
                                     0CCB  1082 	.DSABL	LSB
                                     0CCB  1083 
                                     0CCB  1084 	.ALIGN	LONG			; LONGWORD ALIGN VECTORS
                                     0CCC  1085 VECTAB:					; END OF INTERRUPT CODE, START OF VECTORS
                           000000A4  0CCC  1086 UBINTSZ=.-UBAINTBASE			; SIZE OF UBA INTERRUPT CODE
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  24
07              RESIDENT PSECT CODE                                                                                              (1)

                                     0CCC  1088 	.SBTTL	RESIDENT PSECT CODE
                                 00000000  1089 	.PSECT	XDELTA,BYTE
                                     0000  1090 ;
                                     0000  1091 ;	INITIAL BREAKPOINT
                                     0000  1092 ;
                                     0000  1093 ; INPUT:
                                     0000  1094 ;	NONE
                                     0000  1095 ;
                                     0000  1096 ; OUTPUT:
                                     0000  1097 ;	CAUSES ENTRY TO DEBUGGER VIA BREAK POINT
                                     0000  1098 ;
                                     0000  1099 ; ***** WARNING DO NOT ALTER THIS ROUTINE, JUST A BPT AND RETURN.
                                     0000  1100 ;
                                     0000  1101  
                                     0000  1102 INI$BRK::
                                 03  0000  1103 	BPT				; STARTS AS BPT, CHANGED TO NOP
                                 05  0001  1104 	RSB				; RETURN
                                     0002  1105  
                                     0002  1106 ;
                                     0002  1107 ; MAKE SYSTEM CODE READ ONLY, MAKE SYSTEM CODE READ/WRITE
                                     0002  1108 ; USED BY XDELTA AND INIT.
                                     0002  1109 ;
                                     0002  1110 ; INPUTS:	NONE
                                     0002  1111 ;
                                     0002  1112 ; OUTPUTS:	ALL REGISTERS PRESERVED
                                     0002  1113 ;
                                     0002  1114  
                                     0002  1115 	.ENABL	LSB
                                     0002  1116 INI$WRITABLE::
                          0F     BB  0002  1117 	PUSHR	#^M<R0,R1,R2,R3>	; PRESERVE REGISTERS USED
            50            0E     9A  0004  1118 	MOVZBL	#PRT$C_URKW,R0		; PROTECTION TO USE
                          05     11  0007  1119 	BRB	20$
                                     0009  1120 INI$RDONLY::
                          0F     BB  0009  1121 	PUSHR	#^M<R0,R1,R2,R3>	; PRESERVE REGISTERS USED
            50            0F     9A  000B  1122 	MOVZBL	#PRT$C_UR,R0		; PROTECTION TO USE
                                     000E  1123 20$:
            53       0036'CF     DE  000E  1124 	MOVAL	W^INI_RDONLY_LIST,R3	; GET START OF READ ONLY LIST
   00000000'EF            00'    E0  0013  1125 	BBS	S^#EXE$V_SYSWRTABL,EXE$GL_FLAGS,60$ ; BRANCH IF LEAVING SYSTEM WRITABLE
                          18         001A       
            51            83     7D  001B  1126 	MOVQ	(R3)+,R1		; GET A SET OF ADDRESS LIMITS
                          13     13  001E  1127 	BEQL	60$			; DONE IF NULL
                                     0020  1128 40$:
            1B            50     F0  0020  1129 	INSV	R0,#PTE$V_PROT,#PTE$S_PROT,@MMG$GL_SPTBASE[R1] ; SET PROTECTION
   00000000'FF41          04         0023       
            04            52     F1  002A  1130 	ACBL	R2,#4,R1,40$		; FOR EACH PAGE
            FFF0          51         002D       
                                     0030  1131 	INVALID				; INVALIDATE THE TRANSLATION BUFFER
                                     0033  1132 60$:
                          0F     BA  0033  1133 	POPR	#^M<R0,R1,R2,R3>	; RESTORE SAVED REGISTERS
                                 05  0035  1134 	RSB				; AND RETURN TO THE CALLER
                                     0036  1135 	.DSABL	LSB			;
                                     0036  1136 
                                     0036  1137 ;
                                     0036  1138 ;	LIST OF READ ONLY SECTIONS IN THE RESIDENT EXEC
                                     0036  1139 ;
                                     0036  1140 INI_RDONLY_LIST:			;
                                     0036  1141 	.LIST	MEB
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  25
07              RESIDENT PSECT CODE                                                                                              (1)

                                     0036  1142 	PURE	MMG$FRSTRONLY,MMG$AL_PGDCOD	;
                           FF000000' 0036       	.LONG	<MMG$FRSTRONLY-<1@31>>@-7	;
                           00FFFFFC' 003A       	.LONG	<MMG$AL_PGDCOD-^X80000200>@-7	;
                                     003E  1143 	PURE	MMG$AL_BEGDRIVE,MMG$AL_ENDDRIVE	;
                           FF000000' 003E       	.LONG	<MMG$AL_BEGDRIVE-<1@31>>@-7	;
                           00FFFFFC' 0042       	.LONG	<MMG$AL_ENDDRIVE-^X80000200>@-7	;
                                     0046  1144 ;
                                     0046  1145 ;	THE LIST MUST TERMINATE WITH THE FOLLOWING TWO DESCRIPTORS
                                     0046  1146 ;
                                     0046  1147 PGDCOD_LIM:				;
                                     0046  1148 	PURE	MMG$AL_PGDCOD,MMG$AL_PGDCODEN	;
                           FF000000' 0046       	.LONG	<MMG$AL_PGDCOD-<1@31>>@-7	;
                           00FFFFFC' 004A       	.LONG	<MMG$AL_PGDCODEN-^X80000200>@-7	;
                  00000000 00000000  004E  1149 	.LONG	0,0			; NULL DESCRIPTOR TO TERMINATE
                                     0056  1150 
                                     0056  1151 
                                     0056  1152 ;
                                     0056  1153 ;	INIT PROCESSOR REGISTERS FOR INTERVAL TIMER, SBI ERRORS
                                     0056  1154 ;	AND CRD INTERRUPTS.
                                     0056  1155 ;
                                     0056  1156 INI$PROCREG::				; INIT PROCESSOR REGISTERS
   00000000'EF            00'    E0  0056  1157 	BBS	S^#EXE$V_NOCLOCK,EXE$GL_FLAGS,50$ ; BRANCH IF NOT USING CLOCK
                          2C         005D       
   00000000'EF            00'    E1  005E  1158 	BBC	S^#EXE$V_CRDENABL,EXE$GL_FLAGS,35$  ; IF CLR, IGNORE CRD ERRORS
                          07         0065       
            00'  0000C000 8F     DA  0066  1159 	MTPR	#<3@14>,S^#PR$_SBIER	; SET CRD INTERRUPT ENABLE
                                     006D  1160 35$:					;
   00000000'EF            00'    E1  006D  1161 	BBC	S^#EXE$V_SBIERR,EXE$GL_FLAGS,40$    ; IF CLR, IGNORE SBI ERRORS
                          07         0074       
            00'  00040000 8F     DA  0075  1162 	MTPR	#<1@18>,S^#PR$_SBIFS	; SET SBI FAULT ENABLE
            00'  FFFFD8F0 8F     DA  007C  1163 40$:	MTPR	#-<10*1000>,S^#PR$_NICR	; LOAD NEXT INTERVAL REGISTER
            00'  800000D1 8F     DA  0083  1164 	MTPR	#^X800000D1,S^#PR$_ICCS	; CLEAR ERROR AND START CLOCK
                                 05  008A  1165 50$:	RSB				; AND RETURN
                                     008B  1166 
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  26
07              UBA$INITIAL - UNIBUS ADAPTER INITIALIZATION                                                                      (1)

                                     008B  1168 	.SBTTL	UBA$INITIAL - UNIBUS ADAPTER INITIALIZATION
                                     008B  1169 ;+
                                     008B  1170 ; UBA$INITIAL - UNIBUS ADAPTER INITIALIZATION
                                     008B  1171 ;
                                     008B  1172 ; THIS ROUTINE IS CALLED VIA A JSB INSTRUCTION AT SYSTEM STARTUP AND AFTER
                                     008B  1173 ; A POWER RECOVERY RESTART TO ALLOW INITIALIZATION OF UNIBUS ADAPTERS.
                                     008B  1174 ; 
                                     008B  1175 ; INPUTS:
                                     008B  1176 ;
                                     008B  1177 ;	R4 = ADDRESS OF UNIBUS ADAPTER CONFIGURATION STATUS REGISTER.
                                     008B  1178 ;
                                     008B  1179 ;	ALL INTERRUPTS ARE LOCKED OUT.
                                     008B  1180 ;
                                     008B  1181 ; OUTPUTS:
                                     008B  1182 ;
                                     008B  1183 ;	THE UNIBUS ADAPTER IS INITIALIZED AND INTERRUPTS ARE ENABLED.
                                     008B  1184 ;-
                                     008B  1185  
                                     008B  1186 UBA$INITIAL::				;UNIBUS ADAPTER INITIALIZATION
            64            00     D2  008B  1187 	MCOML	#0,UBA$L_CSR(R4)	;CLEAR ALL ADAPTER CONFIGURATION ERRORS
         08 A4            00     D2  008E  1188 	MCOML	#0,UBA$L_SR(R4)		;CLEAR ALL ADAPTER STATUS BITS
         04 A4   00000068 8F     D0  0092  1189 	MOVL	#UBA$M_CR_SUEFIE!-	;ENABLE INTERRUPTS
                                     009A  1190 		UBA$M_CR_BRIE!-		;
                                     009A  1191 		UBA$M_CR_IFSIE,UBA$L_CR(R4) ;
                                 05  009A  1192 	RSB				;
                                     009B  1193 ;
                                     009B  1194 ; IGNORE UNEXPECTED UNIBUS INTERRUPTS
                                     009B  1195 ;
                                     009B  1196  
                                     009B  1197 UBA$UNEXINT::				; UNEXPECTED INTERRUPT CODE
                          3F     BA  009B  1198 	POPR	#^M<R0,R1,R2,R3,R4,R5>	; RESTORE R0-R5
                                 02  009D  1199 	REI				; AND RETURN
                                     009E  1200 	.END	EXE$INIT
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  27
SYMBOL TABLE                                                                                                                     (1)

ADP$B_NUMBER     0000000B            DDB$L_DDT        0000000C            DYN$C_MTL      = 00000019            
ADP$B_TYPE       0000000A            DDB$L_LINK       00000000            DYN$C_MVL      = 00000016            
ADP$C_MBAADPLEN  00000014            DDB$L_UCB        00000004            DYN$C_NDB      = 0000001C            
ADP$C_NUMDATAP = 00000010            DDB$T_DRVNAME    00000024            DYN$C_NET      = 00000017            
ADP$C_UBAADPLEN  00000070            DDB$T_NAME       00000014            DYN$C_PBH      = 00000020            
ADP$K_MBAADPLEN  00000014            DDB$W_SIZE       00000008            DYN$C_PCB      = 0000000C            
ADP$K_UBAADPLEN  00000070            DDT$L_CANCEL     0000000C            DYN$C_PDB      = 00000021            
ADP$L_CRB        00000010            DDT$L_FDT        00000008            DYN$C_PFL      = 00000023            
ADP$L_CSR        00000000            DDT$L_INIT       00000018            DYN$C_PIB      = 00000022            
ADP$L_DPQBL      00000018            DDT$L_REGDUMP    00000010            DYN$C_PQB      = 0000000D            
ADP$L_DPQFL      00000014            DDT$L_START      00000000            DYN$C_PTR      = 00000025            
ADP$L_INTD       00000064            DDT$L_UNSOLINT   00000004            DYN$C_RVT      = 0000000E            
ADP$L_LINK       00000004            DDT$W_DIAGBUF    00000014            DYN$C_SFT      = 00000024            
ADP$L_MRQBL      00000020            DDT$W_ERRORBUF   00000016            DYN$C_SSB      = 0000001D            
ADP$L_MRQFL      0000001C            DEV$V_MBX        ********   X   04   DYN$C_TQE      = 0000000F            
ADP$L_VECTOR     00000010            DISKEND          00000038 R     04   DYN$C_TYPAHD   = 00000014            
ADP$W_ADPTYPE    0000000E            DPT$B_ADPTYPE    0000000C            DYN$C_UCB      = 00000010            
ADP$W_DPBITMAP   00000024            DPT$B_FLAGS      0000000D            DYN$C_VCB      = 00000011            
ADP$W_MRBITMAP   00000026            DPT$B_REFC       0000000B            DYN$C_WCB      = 00000012            
ADP$W_SIZE       00000008            DPT$B_TYPE       0000000A            EXE$ALONONPAGED  ********   X   04   
ADP$W_TR         0000000C            DPT$C_LENGTH     00000022            EXE$GL_DEFFLAGS  ********   X   04   
ADPLINK          00000A57 R     04   DPT$K_LENGTH     00000022            EXE$GL_FLAGS     ********   X   04   
ADPTYP           000004DA R     04   DPT$L_BLINK      00000004            EXE$GL_GPT       ********   X   04   
ADPTYPCNT      = 0000000D            DPT$L_FLINK      00000000            EXE$GL_INTSTK    ********   X   04   
ALONONPAGED      00000A33 R     04   DPT$M_NOUNLOAD = 00000004            EXE$GL_NONPAGED  ********   X   04   
ALOSPT           00000A6E R     04   DPT$M_SUBCNTRL = 00000001            EXE$GL_PAGED     ********   X   04   
AT$_MBA          ********   X   04   DPT$M_SVP      = 00000002            EXE$GL_RPB       ********   X   04   
AT$_UBA          ********   X   04   DPT$T_NAME       00000016            EXE$GL_SPLITADR  ********   X   04   
BIT...         = 00000008            DPT$V_NOUNLOAD = 00000002            EXE$GL_SYSUCB    ********   X   04   
BOO$GL_SPTFREH   ********   X   04   DPT$V_SUBCNTRL = 00000000            EXE$GL_SYSWCB    ********   X   04   
BOO$GL_SPTFREL   ********   X   04   DPT$V_SVP      = 00000001            EXE$GL_SYSWCBRP  ********   X   04   
BOODRIVLBN       00000000 R     04   DPT$W_INITTAB    00000010            EXE$GL_SYSWCBUC  ********   X   04   
BOODRIVSIZE      00000004 R     04   DPT$W_REINITTAB  00000012            EXE$GQ_STAREXE   ********   X   04   
BOOTUCB          00000018 R     04   DPT$W_SIZE       00000008            EXE$INIT         00000120 RG    04   
BUG$_UNEXUBAINT  ********   X   04   DPT$W_UCBSIZE    0000000E            EXE$MCHKVEC      ********   X   04   
CR             = 0000000D            DPT$W_UNLOAD     00000014            EXE$OUTZSTRING   ********   X   04   
CRB$B_MASK       0000000E            DXP$DPT          ********   X   04   EXE$RESTART      ********   X   04   
CRB$B_TT_ATTN    00000004            DXP$UCB0         ********   X   04   EXE$V_CRDENABL   ********   X   05   
CRB$B_TT_EXPEC   00000005            DYN$C_ACB      = 00000002            EXE$V_NOCLOCK    ********   X   05   
CRB$B_TYPE       0000000A            DYN$C_ADP      = 00000001            EXE$V_POOLPGING  ********   X   04   
CRB$C_LENGTH     00000038            DYN$C_AQB      = 00000003            EXE$V_SBIERR     ********   X   05   
CRB$K_LENGTH     00000038            DYN$C_BRDCST   = 0000001A            EXE$V_SYSPAGING  ********   X   04   
CRB$L_INTD       00000014            DYN$C_BUFIO    = 00000013            EXE$V_SYSWRTABL  ********   X   05   
CRB$L_INTD2      00000038            DYN$C_CEB      = 00000004            FILLSPT          000009D6 R     04   
CRB$L_LINK       00000010            DYN$C_CRB      = 00000005            FREE             00000A02 R     04   
CRB$L_TT_DIAL    00000000            DYN$C_CXB      = 0000001B            GBL...         = 00000000            
CRB$L_WQBL       00000004            DYN$C_DDB      = 00000006            IDB$B_TYPE       0000000A            
CRB$L_WQFL       00000000            DYN$C_DPT      = 0000001E            IDB$B_UNITS      0000000B            
CRB$M_BSY      = 00000001            DYN$C_FCB      = 00000007            IDB$C_LENGTH     00000030            
CRB$V_BSY      = 00000000            DYN$C_FRK      = 00000008            IDB$K_LENGTH     00000030            
CRB$W_REFC       0000000C            DYN$C_GSD      = 00000015            IDB$L_ADP        0000000C            
CRB$W_SIZE       00000008            DYN$C_IDB      = 00000009            IDB$L_CSR        00000000            
DDB$B_ACPCLASS   00000013            DYN$C_IRP      = 0000000A            IDB$L_OWNER      00000004            
DDB$B_TYPE       0000000A            DYN$C_JPB      = 0000001F            IDB$L_UCBLST     00000010            
DDB$C_LENGTH     00000034            DYN$C_KFH      = 00000026            IDB$W_SIZE       00000008            
DDB$K_LENGTH     00000034            DYN$C_KFI      = 00000018            INI$BRK          00000000 RG    05   
DDB$L_ACPD       00000010            DYN$C_LOG      = 0000000B            INI$MBADP        00000A9F R     04   
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  28
SYMBOL TABLE                                                                                                                     (1)

INI$MCHK         000008FC R     04   IRP$L_TT_TERM    00000038            LOG$W_GROUP      0000000C            
INI$PROCREG      00000056 RG    05   IRP$L_UCB        0000001C            LOG$W_SIZE       00000008            
INI$RDONLY       00000009 RG    05   IRP$L_WIND       00000018            MB$DPT           ********   X   04   
INI$UBADP        00000B55 RG    04   IRP$M_BUFIO    = 00000001            MBA$INITIAL      ********   X   04   
INI$WRITABLE     00000002 RG    05   IRP$M_CHAINED  = 00000020            MBA$INT          ********   X   04   
INI_BASE         00000000 R     04   IRP$M_COMPLX   = 00000008            MBACRB           00000B4D R     04   
INI_BOOTDEVICE   000006C6 R     04   IRP$M_DIAGBUF  = 00000080            MBACRBLEN      = 00000008            
INI_BOOTDRIVR    0000061E R     04   IRP$M_FUNC     = 00000002            MEM_REGC       = 00000008            
INI_DEVICE       0000087B R     04   IRP$M_MBXIO    = 00000400            MEM_REGC_V_ERL = 0000001C            
INI_EXITCODE     000009C9 R     04   IRP$M_PAGIO    = 00000004            MEM_REGC_V_HER = 0000001D            
INI_EXITSIZ    = 00000045            IRP$M_PHYSIO   = 00000100            MMG$ALLOCPFN     ********   X   04   
INI_FREEMEM      000002A3 R     04   IRP$M_PRIVIO   = 00000200            MMG$AL_BEGDRIVE  ********   X   05   
INI_IOMAP        0000040B R     04   IRP$M_SWAPIO   = 00000040            MMG$AL_ENDDRIVE  ********   X   05   
INI_IRP          000003BA R     04   IRP$M_VIRTUAL  = 00000010            MMG$AL_PGDCOD    ********   X   04   
INI_LOG          000006AC R     04   IRP$Q_NT_PRVMSK  0000003C            MMG$AL_PGDCODEN  ********   X   04   
INI_MPW          000005FD R     04   IRP$S_FCODE    = 00000006            MMG$AL_SBICONF   ********   X   04   
INI_PAGDYN       00000348 R     04   IRP$S_FMOD     = 0000000A            MMG$AL_SYSPCB    ********   X   04   
INI_PAGING       00000243 R     04   IRP$S_MODE     = 00000002            MMG$DALLOCPFN    ********   X   04   
INI_PHV          0000058C R     04   IRP$V_BUFIO    = 00000000            MMG$FRSTRONLY    ********   X   05   
INI_PSTATE       000004F4 R     04   IRP$V_CHAINED  = 00000005            MMG$GL_GPTE      ********   X   04   
INI_RDONLY_LIST  00000036 R     05   IRP$V_COMPLX   = 00000003            MMG$GL_MAXPFN    ********   X   04   
INI_SWAP         000005D0 R     04   IRP$V_DIAGBUF  = 00000007            MMG$GL_NPAGEDYN  ********   X   04   
IO$_READLBLK     ********   X   04   IRP$V_FCODE    = 00000000            MMG$GL_PAGEDYN   ********   X   04   
IOC$GL_ADPLIST   ********   X   04   IRP$V_FMOD     = 00000006            MMG$GL_SPTBASE   ********   X   04   
IOC$GL_DEVLIST   ********   X   04   IRP$V_FUNC     = 00000001            MMG$GL_SYSPHD    ********   X   04   
IOC$GL_DPTLIST   ********   X   04   IRP$V_MBXIO    = 0000000A            MPW$AL_PTE       ********   X   04   
IOC$GL_IRPBL     ********   X   04   IRP$V_MODE     = 00000000            MPW$AW_PHVINDEX  ********   X   04   
IOC$INITDRV      ********   X   04   IRP$V_PAGIO    = 00000002            MPW$GW_HILIM     ********   X   04   
IPL$_ASTDEL    = 00000002            IRP$V_PHYSIO   = 00000008            MPW$GW_LOLIM     ********   X   04   
IPL$_HWCLK     = 00000018            IRP$V_PRIVIO   = 00000009            MPW$GW_MPWPFC    ********   X   04   
IPL$_IOPOST    = 00000004            IRP$V_SWAPIO   = 00000006            NET$DPT          ********   X   04   
IPL$_MAILBOX   = 0000000B            IRP$V_VIRTUAL  = 00000004            NL$DPT           ********   X   04   
IPL$_POWER     = 0000001F            IRP$W_ABCNT      0000003C            NOBOOTDEV        0000005C R     04   
IPL$_QUEUEAST  = 00000006            IRP$W_BCNT       00000032            NODEBUG          00000209 R     04   
IPL$_SCHED     = 00000003            IRP$W_BOFF       00000030            NOPHYSMEM        000000AF R     04   
IPL$_SYNCH     = 00000007            IRP$W_CHAN       00000028            NOPOOLERR        00000A4A R     04   
IPL$_TIMER     = 00000007            IRP$W_FUNC       00000020            NOSPACE          00000083 R     04   
IRP$B_CARCON     00000038            IRP$W_OBCNT      0000003E            NOSPT            000000F4 R     04   
IRP$B_EFN        00000022            IRP$W_SIZE       00000008            NUMUBAVEC      = 00000080            
IRP$B_PRI        00000023            IRP$W_STS        0000002A            OP$DPT           ********   X   04   
IRP$B_RMOD       0000000B            IRP$W_TT_PRMPT   0000003C            PAGEDYN          00000050 R     04   
IRP$B_TYPE       0000000A            LF             = 0000000A            PCB$B_ASTACT     0000000C            
IRP$C_LENGTH     0000004C            LOG$AL_DISKLOG   00000008 RG    04   PCB$B_ASTEN      0000000D            
IRP$K_LENGTH     0000004C            LOG$B_AMOD       0000000E            PCB$B_PRI        0000000B            
IRP$L_AST        00000010            LOG$B_TABLE      0000000B            PCB$B_PRIB       00000033            
IRP$L_ASTPRM     00000014            LOG$B_TYPE       0000000A            PCB$B_TYPE       0000000A            
IRP$L_DIAGBUF    00000044            LOG$C_GROUP    = 00000001            PCB$B_WEFC       00000032            
IRP$L_IOQBL      00000004            LOG$C_LENGTH     00000014            PCB$C_LENGTH     0000007C            
IRP$L_IOQFL      00000000            LOG$C_NAMLENGTH= 00000040            PCB$K_LENGTH     0000007C            
IRP$L_IOSB       00000024            LOG$C_PROCESS  = 00000002            PCB$L_ASTQBL     00000014            
IRP$L_IOST1      00000034            LOG$C_SYSTEM   = 00000000            PCB$L_ASTQFL     00000010            
IRP$L_IOST2      00000038            LOG$GL_SLTFL     ********   X   04   PCB$L_EFC2P      00000058            
IRP$L_MEDIA      00000034            LOG$K_LENGTH     00000014            PCB$L_EFC3P      0000005C            
IRP$L_PID        0000000C            LOG$L_LTBL       00000004            PCB$L_EFCS       00000050            
IRP$L_SEGVBN     00000040            LOG$L_LTFL       00000000            PCB$L_EFCU       00000054            
IRP$L_SEQNUM     00000048            LOG$L_MBXUCB     00000010            PCB$L_EFWM       0000004C            
IRP$L_SVAPTE     0000002C            LOG$T_NAME       00000014            PCB$L_OWNER      0000001C            
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  29
SYMBOL TABLE                                                                                                                     (1)

PCB$L_PHD        00000064            PFL$K_LENGTH     00000020            PHD$B_ASTLVL     000000CF            
PCB$L_PHYPCB     00000018            PFL$L_BITMAP     00000000            PHD$B_DFPFC      00000038            
PCB$L_PID        00000060            PFL$L_BITMAPSIZ  00000014            PHD$B_PAGFIL     0000001F            
PCB$L_PQB        0000004C            PFL$L_FREPAGCNT  00000018            PHD$B_PGTBPFC    00000039            
PCB$L_SQBL       00000004            PFL$L_RESERVCNT  0000001C            PHD$C_LENGTH     00000118            
PCB$L_SQFL       00000000            PFL$L_STARTBYTE  00000004            PHD$C_PHDPAGCTX= 00000008            
PCB$L_STS        00000028            PFL$L_VBN        00000010            PHD$K_LENGTH     00000118            
PCB$L_UIC        00000020            PFL$L_WINDOW     0000000C            PHD$L_BIOCNT     00000054            
PCB$L_WSSWP      00000024            PFL$W_SIZE       00000008            PHD$L_CPULIM     00000058            
PCB$L_WTIME      0000002C            PFN$AB_STATE     ********   X   04   PHD$L_CPUTIM     0000003C            
PCB$T_LNAME      0000006C            PFN$AB_TYPE      ********   X   04   PHD$L_DIOCNT     00000050            
PCB$V_ASTPEN   = 00000011            PFN$AL_PTE       ********   X   04   PHD$L_ESP        0000007C            
PCB$V_BATCH    = 0000000E            PFN$AW_REFCNT    ********   X   04   PHD$L_FREP0VA    00000028            
PCB$V_DELPEN   = 00000001            PFN$C_ACTIVE   = 00000007            PHD$L_FREP1VA    00000030            
PCB$V_FORCPEN  = 00000002            PFN$C_BADPAGLST= 00000002            PHD$L_FREPTECNT  0000002C            
PCB$V_HIBER    = 00000013            PFN$C_FREPAGLST= 00000000            PHD$L_KSP        00000078            
PCB$V_INQUAN   = 00000003            PFN$C_GBLWRT   = 00000003            PHD$L_P0BR       000000C8            
PCB$V_LOGIN    = 00000014            PFN$C_GLOBAL   = 00000002            PHD$L_P0LRASTL   000000CC            
PCB$V_NETWRK   = 00000015            PFN$C_GPGTBL   = 00000005            PHD$L_P1BR       000000D0            
PCB$V_NOACNT   = 0000000F            PFN$C_MFYPAGLST= 00000001            PHD$L_P1LR       000000D4            
PCB$V_NODELET  = 00000017            PFN$C_PPGTBL   = 00000004            PHD$L_PAGEFLTS   0000004C            
PCB$V_PHDRES   = 00000012            PFN$C_PROCESS  = 00000000            PHD$L_PAGFIL     0000001C            
PCB$V_PSWAPM   = 00000004            PFN$C_RDERR    = 00000004            PHD$L_PC         000000C0            
PCB$V_PWRAST   = 00000016            PFN$C_RDINPROG = 00000006            PHD$L_PCB        00000078            
PCB$V_RES      = 00000000            PFN$C_RELPEND  = 00000003            PHD$L_PGFLCNT    00000034            
PCB$V_RESPEN   = 00000005            PFN$C_SYSTEM   = 00000001            PHD$L_PGFLQUOTA  0000005C            
PCB$V_SSFEXC   = 00000006            PFN$C_WRTINPROG= 00000005            PHD$L_PSL        000000C4            
PCB$V_SSFEXCE  = 00000007            PFN$GL_PHYPGCNT  ********   X   04   PHD$L_PSTBASOFF  00000020            
PCB$V_SSFEXCS  = 00000008            PFN$M_BADPAG   = 00000020            PHD$L_PTWSLELCK  00000064            
PCB$V_SSFEXCU  = 00000009            PFN$M_BAK      = 007FFFFF            PHD$L_PTWSLEVAL  00000068            
PCB$V_SSRWAIT  = 0000000A            PFN$M_COLLISION= 00000010            PHD$L_R0         00000088            
PCB$V_SUSPEN   = 0000000B            PFN$M_DELCON   = 00000010            PHD$L_R1         0000008C            
PCB$V_SWPVBN   = 00000010            PFN$M_GBLBAK   = 00800000            PHD$L_R10        000000B0            
PCB$V_WAKEPEN  = 0000000C            PFN$M_LOC      = 00000007            PHD$L_R11        000000B4            
PCB$V_WALL     = 0000000D            PFN$M_MODIFY   = 00000080            PHD$L_R12        000000B8            
PCB$W_APTCNT     00000034            PFN$M_PAGTYP   = 00000007            PHD$L_R13        000000BC            
PCB$W_ASTCNT     0000003C            PFN$M_PGFLX    = FF000000            PHD$L_R2         00000090            
PCB$W_BIOCNT     0000003E            PFN$M_RPTEVT   = 00000040            PHD$L_R3         00000094            
PCB$W_BIOLM      00000040            PFN$S_BAK      = 00000017            PHD$L_R4         00000098            
PCB$W_BYTCNT     00000042            PFN$S_GBLBAK   = 00000001            PHD$L_R5         0000009C            
PCB$W_BYTLM      00000068            PFN$S_LOC      = 00000003            PHD$L_R6         000000A0            
PCB$W_DIOCNT     00000044            PFN$S_PAGTYP   = 00000003            PHD$L_R7         000000A4            
PCB$W_DIOLM      00000046            PFN$S_PGFLX    = 00000008            PHD$L_R8         000000A8            
PCB$W_FILCNT     00000048            PFN$V_BADPAG   = 00000005            PHD$L_R9         000000AC            
PCB$W_GPGCNT     00000038            PFN$V_BAK      = 00000000            PHD$L_REFERFLT   00000014            
PCB$W_GRP        00000022            PFN$V_COLLISION= 00000004            PHD$L_SSP        00000080            
PCB$W_MEM        00000020            PFN$V_DELCON   = 00000004            PHD$L_USP        00000084            
PCB$W_MTXCNT     0000000E            PFN$V_GBLBAK   = 00000017            PHD$L_WSL        00000118            
PCB$W_PPGCNT     0000003A            PFN$V_LOC      = 00000000            PHD$M_DALCSTX  = 00000002            
PCB$W_PRCCNT     0000006A            PFN$V_MODIFY   = 00000007            PHD$M_PFMFLG   = 00000001            
PCB$W_SIZE       00000008            PFN$V_PAGTYP   = 00000000            PHD$M_WSPEAKCHK= 00000004            
PCB$W_STATE      00000030            PFN$V_PGFLX    = 00000018            PHD$Q_PRIVMSK    00000000            
PCB$W_TMBU       00000036            PFN$V_RPTEVT   = 00000006            PHD$S_ASTLVL   = 00000008            
PCB$W_TQCNT      0000004A            PGDCOD           00000038 R     04   PHD$S_P0LR     = 00000018            
PFL$B_PFC        0000000B            PGDCODBEG      = 00000038 R     04   PHD$V_ASTLVL   = 00000018            
PFL$B_TYPE       0000000A            PGDCODEND      = 0000003C R     04   PHD$V_DALCSTX  = 00000001            
PFL$C_LENGTH     00000020            PGDCOD_LIM       00000046 R     05   PHD$V_P0LR     = 00000000            
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  30
SYMBOL TABLE                                                                                                                     (1)

PHD$V_PFMFLG   = 00000000            PRT$C_URKW     = 0000000E            RPB$C_LENGTH     000000BC            
PHD$V_WSPEAKCHK= 00000002            PRT$C_URSW     = 0000000C            RPB$K_LENGTH     000000BC            
PHD$W_ASTLM      00000044            PRT$C_UW       = 00000004            RPB$L_ADPPHY     0000005C            
PHD$W_BAK        00000048            PTE$C_EOWN     = 00800000            RPB$L_ADPVIR     00000060            
PHD$W_DFWSCNT    0000001A            PTE$C_ER       = 38000000            RPB$L_BASE       00000000            
PHD$W_EMPTPG     000000D8            PTE$C_ERKW     = 30000000            RPB$L_BOOTR0     0000001C            
PHD$W_EXTDYNWS   00000076            PTE$C_EW       = 28000000            RPB$L_BOOTR1     00000020            
PHD$W_FILLM      00000060            PTE$C_KOWN     = 00000000            RPB$L_BOOTR2     00000024            
PHD$W_FLAGS      0000003A            PTE$C_KR       = 18000000            RPB$L_BOOTR3     00000028            
PHD$W_PHVINDEX   00000046            PTE$C_KW       = 10000000            RPB$L_BOOTR4     0000002C            
PHD$W_PRCLM      00000042            PTE$C_NA       = 00000000            RPB$L_BOOTR5     00000030            
PHD$W_PST        00000020            PTE$C_SOWN     = 01000000            RPB$L_CHKSUM     00000008            
PHD$W_PSTBASMAX  0000004A            PTE$C_SR       = 58000000            RPB$L_CSRPHY     00000054            
PHD$W_PSTFREE    00000026            PTE$C_SREW     = 48000000            RPB$L_CSRVIR     00000058            
PHD$W_PSTLAST    00000024            PTE$C_SRKW     = 50000000            RPB$L_FILLBN     0000003C            
PHD$W_PTCNTACT   00000070            PTE$C_SW       = 40000000            RPB$L_FILSIZ     00000040            
PHD$W_PTCNTLCK   0000006C            PTE$C_UOWN     = 01800000            RPB$L_HALTCODE   00000018            
PHD$W_PTCNTMAX   00000072            PTE$C_UR       = 78000000            RPB$L_HALTPC     00000010            
PHD$W_PTCNTVAL   0000006E            PTE$C_UREW     = 68000000            RPB$L_HALTPSL    00000014            
PHD$W_QUANT      00000040            PTE$C_URKW     = 70000000            RPB$L_IOVEC      00000034            
PHD$W_TQLM       00000062            PTE$C_URSW     = 60000000            RPB$L_IOVECSZ    00000038            
PHD$W_WSAUTH     0000000A            PTE$C_UW       = 20000000            RPB$L_ISP        000000A4            
PHD$W_WSDYN      0000000E            PTE$M_CRF      = 00010000            RPB$L_PCBB       000000A8            
PHD$W_WSFLUID    00000074            PTE$M_DZRO     = 00020000            RPB$L_PFNCNT     0000004C            
PHD$W_WSLAST     00000012            PTE$M_GPTX     = 003FFFFF            RPB$L_RESTART    00000004            
PHD$W_WSLIST     00000008            PTE$M_MODIFY   = 04000000            RPB$L_RSTRTFLG   0000000C            
PHD$W_WSLOCK     0000000C            PTE$M_OWN      = 01800000            RPB$L_SBR        000000AC            
PHD$W_WSLX       0000004A            PTE$M_PFN      = 001FFFFF            RPB$L_SCBB       000000B0            
PHD$W_WSNEXT     00000010            PTE$M_PGFLVB   = 003FFFFF            RPB$L_SISR       000000B4            
PHD$W_WSQUOTA    00000018            PTE$M_PROT     = 78000000            RPB$L_SLR        000000B8            
PHV$GL_PIXBAS    ********   X   04   PTE$M_TYP0     = 00400000            RPB$L_SVASPT     00000050            
PHV$GL_REFCBAS   ********   X   04   PTE$M_TYP1     = 04000000            RPB$Q_PFNMAP     00000044            
PR$_ICCS         ********   X   05   PTE$M_VALID    = 80000000            RPB$T_FILE       00000068            
PR$_IPL          ********   X   04   PTE$M_WRT      = 00040000            RPB$V_BBLOCK   = 00000003            
PR$_MAPEN        ********   X   04   PTE$S_GPTX     = 00000016            RPB$V_BOOBPT   = 00000005            
PR$_NICR         ********   X   05   PTE$S_OWN      = 00000002            RPB$V_CONV     = 00000000            
PR$_SBIER        ********   X   05   PTE$S_PFN      = 00000015            RPB$V_DEBUG    = 00000001            
PR$_SBIFS        ********   X   04   PTE$S_PGFLVB   = 00000016            RPB$V_DIAG     = 00000004            
PR$_SBR          ********   X   04   PTE$S_PROT     = 00000004            RPB$V_HALT     = 00000009            
PR$_SCBB         ********   X   04   PTE$S_STX      = 00000010            RPB$V_HEADER   = 00000006            
PR$_SLR          ********   X   04   PTE$V_CRF      = 00000010            RPB$V_INIBPT   = 00000002            
PR$_TBIA         ********   X   04   PTE$V_DZRO     = 00000011            RPB$V_NOPFND   = 0000000A            
PR$_TXCS         ********   X   04   PTE$V_GPTX     = 00000000            RPB$V_NOTEST   = 00000007            
PR$_TXDB         ********   X   04   PTE$V_MODIFY   = 0000001A            RPB$V_SOLICT   = 00000008            
PRT$C_ER       = 00000007            PTE$V_OWN      = 00000017            RPB$W_UNIT       00000064            
PRT$C_ERKW     = 00000006            PTE$V_PFN      = 00000000            SCB$AL_BASE      ********   X   04   
PRT$C_EW       = 00000005            PTE$V_PGFLVB   = 00000000            SCH$CHSE         ********   X   04   
PRT$C_KR       = 00000003            PTE$V_PROT     = 0000001B            SCH$GL_FREECNT   ********   X   04   
PRT$C_KW       = 00000002            PTE$V_STX      = 00000000            SCH$GL_FREELIM   ********   X   04   
PRT$C_NA       = 00000000            PTE$V_TYP0     = 00000016            SCH$GL_MAXPIX    ********   X   04   
PRT$C_RESERVED = 00000001            PTE$V_TYP1     = 0000001A            SCH$GL_MFYLIM    ********   X   04   
PRT$C_SR       = 0000000B            PTE$V_VALID    = 0000001F            SCH$GL_MFYLIMSV  ********   X   04   
PRT$C_SREW     = 00000009            PTE$V_WRT      = 00000012            SCH$GL_MFYLOLIM  ********   X   04   
PRT$C_SRKW     = 0000000A            RPB$B_CONFREG    00000090            SCH$GL_MFYLOSV   ********   X   04   
PRT$C_SW       = 00000008            RPB$B_DEVTYP     00000066            SCH$GL_NULLPCB   ********   X   04   
PRT$C_UR       = 0000000F            RPB$B_HDRPGCNT   000000A0            SCH$GL_PCBVEC    ********   X   04   
PRT$C_UREW     = 0000000D            RPB$B_SLAVE      00000067            SCH$GL_SEQVEC    ********   X   04   
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  31
SYMBOL TABLE                                                                                                                     (1)

SCH$GL_SWPPCB    ********   X   04   SGN$C_SYSVECPGS  ********   X   04   UBA$M_MAP_BO   = 02000000            
SCH$GW_PROCLIM   ********   X   04   SGN$GL_BALSETCT  ********   X   04   UBA$M_MAP_VALID= 80000000            
SCH$SCHED        ********   X   04   SGN$GL_FREELIM   ********   X   04   UBA$M_SR_BRID  = 00000800            
SEC$B_AMOD       00000015            SGN$GL_IRPCNT    ********   X   04   UBA$M_SR_BRSVF = 10000000            
SEC$B_PFC        0000000B            SGN$GL_MAXWSCNT  ********   X   04   UBA$M_SR_CRD   = 00000100            
SEC$C_LENGTH     00000020            SGN$GL_NPAGEDYN  ********   X   04   UBA$M_SR_CXTER = 00000080            
SEC$K_LENGTH     00000020            SGN$GL_PAGEDYN   ********   X   04   UBA$M_SR_CXTMO = 00000040            
SEC$K_MATALL   = 00000000            SGN$GL_PHDPAGCT  ********   X   04   UBA$M_SR_DPPE  = 00000020            
SEC$K_MATEQU   = 00000001            SGN$GW_MAXPRCCT  ********   X   04   UBA$M_SR_IVMR  = 00000010            
SEC$K_MATLEQ   = 00000002            SGN$GW_MINWSCNT  ********   X   04   UBA$M_SR_LER   = 00000004            
SEC$L_CCB        00000000            SGN$GW_SYSDWSCT  ********   X   04   UBA$M_SR_MRPE  = 00000008            
SEC$L_GSD        00000000            SWP$C_KSTACK     ********   X   04   UBA$M_SR_RDS   = 00000200            
SEC$L_PAGCNT     0000001C            SWP$GB_SHLP1PT   ********   X   04   UBA$M_SR_RDTO  = 00000400            
SEC$L_REFCNT     00000018            SWP$GL_BALBASE   ********   X   04   UBA$M_SR_RIE   = 20000000            
SEC$L_VBN        00000010            SWP$GL_BALSPT    ********   X   04   UBA$M_SR_SSYNC = 00000001            
SEC$L_VPXPFC     00000008            SWP$GL_MAP       ********   X   04   UBA$M_SR_UBIFS = 40000000            
SEC$L_WINDOW     0000000C            SWP$GL_SFTBAS    ********   X   04   UBA$M_SR_UBSTO = 00000002            
SEC$M_AMOD     = 00000300            SWP$GL_SHELLBAS  ********   X   04   UBA$S_BRRVR_IVA= 00000010            
SEC$M_CRF      = 00000002            SYS$GL_BOOTDDB   ********   X   04   UBA$S_CR_ARLVL = 00000002            
SEC$M_DZRO     = 00000004            SYS$GT_ANNOUNCE  ********   X   04   UBA$S_CR_MRDSB = 00000005            
SEC$M_GBL      = 00000001            SYSVECTORS       00000044 R     04   UBA$S_CSR_ADCOD= 00000008            
SEC$M_PERM     = 00004000            TT$DPT           ********   X   04   UBA$S_DPR_ADDR = 00000010            
SEC$M_SYSGBL   = 00008000            UBA$INITIAL      0000008B RG    05   UBA$S_DPR_STATE= 00000008            
SEC$M_WRT      = 00000008            UBA$L_BRRVR      00000030            UBA$S_FMER_MRN = 00000009            
SEC$S_AMOD     = 00000002            UBA$L_BRSVR      00000020            UBA$S_FUBAR_ADR= 00000012            
SEC$S_CRF      = 00000001            UBA$L_CR         00000004            UBA$S_MAP_ADDR = 00000015            
SEC$S_DZRO     = 00000001            UBA$L_CSR        00000000            UBA$S_MAP_DPD  = 00000004            
SEC$S_GBL      = 00000001            UBA$L_DCR        0000000C            UBA$S_SR_BRRVF = 00000004            
SEC$S_PERM     = 00000001            UBA$L_DPR        00000040            UBA$UNEXINT      0000009B RG    05   
SEC$S_PFC      = 00000008            UBA$L_FMER       00000010            UBA$V_BRRVR_AIR= 0000001F            
SEC$S_SYSGBL   = 00000001            UBA$L_FUBAR      00000014            UBA$V_BRRVR_IVA= 00000000            
SEC$S_VPX      = 00000016            UBA$L_MAP        00000800            UBA$V_CR_ARLVL = 00000007            
SEC$S_WRT      = 00000001            UBA$L_SR         00000008            UBA$V_CR_BRIE  = 00000005            
SEC$V_AMOD     = 00000008            UBA$M_BRRVR_AIR= 80000000            UBA$V_CR_CNFIE = 00000002            
SEC$V_CRF      = 00000001            UBA$M_CR_ARLVL = 00000180            UBA$V_CR_IFSIE = 00000006            
SEC$V_DZRO     = 00000002            UBA$M_CR_BRIE  = 00000020            UBA$V_CR_INIT  = 00000000            
SEC$V_GBL      = 00000000            UBA$M_CR_CNFIE = 00000004            UBA$V_CR_MRDSB = 0000001A            
SEC$V_PERM     = 0000000E            UBA$M_CR_IFSIE = 00000040            UBA$V_CR_SUEFIE= 00000003            
SEC$V_PFC      = 00000018            UBA$M_CR_INIT  = 00000001            UBA$V_CR_UBPF  = 00000001            
SEC$V_SYSGBL   = 0000000F            UBA$M_CR_SUEFIE= 00000008            UBA$V_CR_USEFIE= 00000004            
SEC$V_VPX      = 00000000            UBA$M_CR_UBPF  = 00000002            UBA$V_CSR_ADCOD= 00000000            
SEC$V_WRT      = 00000003            UBA$M_CR_USEFIE= 00000010            UBA$V_CSR_IS   = 0000001C            
SEC$W_FLAGS      00000014            UBA$M_CSR_IS   = 10000000            UBA$V_CSR_MT   = 0000001B            
SEC$W_SECXBL     00000006            UBA$M_CSR_MT   = 08000000            UBA$V_CSR_OT   = 00000015            
SEC$W_SECXFL     00000004            UBA$M_CSR_OT   = 00200000            UBA$V_CSR_PD   = 00000017            
SETRESIDENT      00000A0E R     04   UBA$M_CSR_PD   = 00800000            UBA$V_CSR_PE   = 0000001F            
SFT$B_IOSZ       00000001            UBA$M_CSR_PE   = 80000000            UBA$V_CSR_PU   = 00000016            
SFT$B_PFC        0000000B            UBA$M_CSR_PU   = 00400000            UBA$V_CSR_UBIC = 00000010            
SFT$B_SLTCNT     00000000            UBA$M_CSR_UBIC = 00010000            UBA$V_CSR_UBIIP= 00000012            
SFT$B_TYPE       0000000A            UBA$M_CSR_UBIIP= 00040000            UBA$V_CSR_UBPDN= 00000011            
SFT$C_LENGTH     00000020            UBA$M_CSR_UBPDN= 00020000            UBA$V_CSR_URD  = 0000001D            
SFT$K_LENGTH     00000020            UBA$M_CSR_URD  = 20000000            UBA$V_CSR_WS   = 0000001E            
SFT$L_BITMAP     00000014            UBA$M_CSR_WS   = 40000000            UBA$V_CSR_XMFLT= 0000001A            
SFT$L_VBN        00000010            UBA$M_CSR_XMFLT= 04000000            UBA$V_DPR_ADDR = 00000000            
SFT$L_WINDOW     0000000C            UBA$M_DPR_BNE  = 80000000            UBA$V_DPR_BNE  = 0000001F            
SFT$W_SIZE       00000008            UBA$M_DPR_DPF  = 20000000            UBA$V_DPR_DPF  = 0000001D            
SFT$W_SLOTSZ     00000002            UBA$M_DPR_XMTER= 40000000            UBA$V_DPR_STATE= 00000010            
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  32
SYMBOL TABLE                                                                                                                     (1)

UBA$V_DPR_XMTER= 0000001E            UCB$B_VERTSZ     0000003F            UCB$M_NT_BREAK = 00000020            
UBA$V_FMER_MRN = 00000000            UCB$C_LENGTH     00000074            UCB$M_NT_NAME  = 00000010            
UBA$V_FUBAR_ADR= 00000000            UCB$C_LOGLNK   = 00000001            UCB$M_ONLINE   = 00000010            
UBA$V_MAP_ADDR = 00000000            UCB$K_LENGTH     00000074            UCB$M_POWER    = 00000020            
UBA$V_MAP_BO   = 00000019            UCB$L_AMB        00000054            UCB$M_PRMMBX   = 00000001            
UBA$V_MAP_DPD  = 00000015            UCB$L_ASTQBL     00000010            UCB$M_TIM      = 00000001            
UBA$V_MAP_VALID= 0000001F            UCB$L_ASTQFL     0000000C            UCB$M_TIMOUT   = 00000040            
UBA$V_SR_BRID  = 0000000B            UCB$L_CPID       0000005C            UCB$M_TT_NOTIF = 00000004            
UBA$V_SR_BRRVF = 00000018            UCB$L_CRB        00000020            UCB$M_TT_TIMO  = 00000002            
UBA$V_SR_BRSVF = 0000001C            UCB$L_DDB        00000024            UCB$M_UNLOAD   = 00001000            
UBA$V_SR_CRD   = 00000008            UCB$L_DEVCHAR    00000034            UCB$M_VALID    = 00000800            
UBA$V_SR_CXTER = 00000007            UCB$L_DEVDEPEND  0000003C            UCB$S_LNKPRI   = 00000002            
UBA$V_SR_CXTMO = 00000006            UCB$L_DPC        00000080            UCB$S_LTYPE    = 00000002            
UBA$V_SR_DPPE  = 00000005            UCB$L_DUETIM     0000005C            UCB$T_PARTNER    0000000C            
UBA$V_SR_IVMR  = 00000004            UCB$L_DX_BFPNT   0000009C            UCB$V_BACKP    = 00000005            
UBA$V_SR_LER   = 00000002            UCB$L_DX_BUF     00000098            UCB$V_BSY      = 00000008            
UBA$V_SR_MRPE  = 00000003            UCB$L_DX_RXDB    000000A0            UCB$V_CANCEL   = 00000003            
UBA$V_SR_RDS   = 00000009            UCB$L_EMB        00000078            UCB$V_DEADMO   = 0000000A            
UBA$V_SR_RDTO  = 0000000A            UCB$L_FIRST      00000014            UCB$V_DELMBX   = 00000001            
UBA$V_SR_RIE   = 0000001D            UCB$L_FPC        0000000C            UCB$V_DIAGBUF  = 00000001            
UBA$V_SR_SSYNC = 00000000            UCB$L_FQBL       00000004            UCB$V_DX_WRITE = 00000003            
UBA$V_SR_UBIFS = 0000001E            UCB$L_FQFL       00000000            UCB$V_ECC      = 00000000            
UBA$V_SR_UBSTO = 00000001            UCB$L_FR3        00000010            UCB$V_ERLOGIP  = 00000002            
UBAINT4        = 00000000            UCB$L_FR4        00000014            UCB$V_INT      = 00000001            
UBAINT4REL     = 0000000A            UCB$L_IOQBL      00000044            UCB$V_INTTYPE  = 00000007            
UBAINT5        = 00000020            UCB$L_IOQFL      00000040            UCB$V_JOB      = 00000000            
UBAINT5REL     = 0000002A            UCB$L_IRP        0000004C            UCB$V_LNKPRI   = 00000006            
UBAINT6        = 00000040            UCB$L_LINK       0000002C            UCB$V_LTYPE    = 00000000            
UBAINT6REL     = 0000004A            UCB$L_LOGADR     00000064            UCB$V_MOUNTING = 00000009            
UBAINT7        = 00000060            UCB$L_MAXBLOCK   00000084            UCB$V_MSGACK   = 00000004            
UBAINT7REL     = 0000006A            UCB$L_MEDIA      0000008C            UCB$V_MSGFLO   = 00000003            
UBAINTBASE       00000C28 R     04   UCB$L_NT_DATSSB  00000074            UCB$V_NOCNVRT  = 00000002            
UBAINTCSR      = 00000080            UCB$L_NT_INTSSB  00000078            UCB$V_NT_BFROVF= 00000002            
UBINTSZ        = 000000A4            UCB$L_OPCNT      00000060            UCB$V_NT_BREAK = 00000005            
UCB$B_AMOD       00000053            UCB$L_OWNUIC     0000001C            UCB$V_NT_NAME  = 00000004            
UCB$B_CEX        00000077            UCB$L_PID        00000028            UCB$V_ONLINE   = 00000004            
UCB$B_CM1        0000004A            UCB$L_RQBL       00000004            UCB$V_POWER    = 00000005            
UCB$B_CM2        0000004B            UCB$L_RQFL       00000000            UCB$V_PRMMBX   = 00000000            
UCB$B_DEVCLASS   00000038            UCB$L_SVAPTE     00000068            UCB$V_SEGFLO   = 00000002            
UCB$B_DEVTYPE    00000039            UCB$L_SVPN       00000064            UCB$V_TIM      = 00000000            
UCB$B_DIPL       00000052            UCB$L_TTCHAR     0000003C            UCB$V_TIMOUT   = 00000006            
UCB$B_DX_SCTCNT  000000A6            UCB$L_VCB        00000030            UCB$V_TT_NOTIF = 00000002            
UCB$B_ERTCNT     00000070            UCB$M_BACKP    = 00000020            UCB$V_TT_TIMO  = 00000001            
UCB$B_ERTMAX     00000071            UCB$M_BSY      = 00000100            UCB$V_UNLOAD   = 0000000C            
UCB$B_ESCAPE     0000004B            UCB$M_CANCEL   = 00000008            UCB$V_VALID    = 0000000B            
UCB$B_FEX        00000076            UCB$M_DEADMO   = 00000400            UCB$W_BCNT       0000006E            
UCB$B_FIPL       0000000B            UCB$M_DELMBX   = 00000002            UCB$W_BCR        00000096            
UCB$B_LOCSRV     0000003C            UCB$M_DIAGBUF  = 00000002            UCB$W_BOFF       0000006C            
UCB$B_OFFNDX     00000094            UCB$M_DX_WRITE = 00000008            UCB$W_BUFQUO     00000018            
UCB$B_OFFRTC     00000095            UCB$M_ECC      = 00000001            UCB$W_BYTESTOGO  0000003E            
UCB$B_REMSRV     0000003D            UCB$M_ERLOGIP  = 00000004            UCB$W_CHARGE     0000004A            
UCB$B_SECTORS    0000003C            UCB$M_INT      = 00000002            UCB$W_CYLINDERS  0000003E            
UCB$B_SLAVE      00000074            UCB$M_INTTYPE  = 00000080            UCB$W_DA         0000008C            
UCB$B_SPR        00000075            UCB$M_JOB      = 00000001            UCB$W_DC         0000008E            
UCB$B_STATE      00000052            UCB$M_MOUNTING = 00000200            UCB$W_DEVBUFSIZ  0000003A            
UCB$B_TRACKS     0000003D            UCB$M_NOCNVRT  = 00000004            UCB$W_DEVSTS     0000005A            
UCB$B_TYPE       0000000A            UCB$M_NT_BFROVF= 00000004            UCB$W_DIRSEQ     00000088            
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  33
SYMBOL TABLE                                                                                                                     (1)

UCB$W_DSTADDR    00000018            
UCB$W_DX_BCR     000000A4            
UCB$W_EC1        00000090            
UCB$W_EC2        00000092            
UCB$W_ERRCNT     00000072            
UCB$W_FUNC       0000007E            
UCB$W_MB_SEED    FFFFFFFC            
UCB$W_MSGCNT     00000016            
UCB$W_MSGMAX     00000014            
UCB$W_NT_CHAN    0000007C            
UCB$W_OFFSET     0000008A            
UCB$W_REFC       00000050            
UCB$W_SIZE       00000008            
UCB$W_SRCADDR    0000001A            
UCB$W_STS        00000058            
UCB$W_UNIT       00000048            
UCB$W_VPROT      0000001A            
VA$M_BYTE      = 000001FF            
VA$M_P1        = 40000000            
VA$M_SYSTEM    = 80000000            
VA$M_VPG       = FFFFFE00            
VA$M_VPN       = 3FFFFE00            
VA$S_BYTE      = 00000009            
VA$S_VPG       = 00000017            
VA$S_VPN       = 00000015            
VA$V_BYTE      = 00000000            
VA$V_P1        = 0000001E            
VA$V_SYSTEM    = 0000001F            
VA$V_VPG       = 00000009            
VA$V_VPN       = 00000009            
VEC$B_DATAPATH   00000013            
VEC$B_NUMREG     00000012            
VEC$C_LENGTH     00000024            
VEC$K_LENGTH     00000024            
VEC$L_ADP        00000014            
VEC$L_IDB        00000008            
VEC$L_INITIAL    0000000C            
VEC$L_START      0000001C            
VEC$L_UNITDISC   00000020            
VEC$L_UNITINIT   00000018            
VEC$M_MAPLOCK  = 00008000            
VEC$M_PATHLOCK = 00000080            
VEC$Q_DISPATCH   00000000            
VEC$S_DATAPATH = 00000007            
VEC$S_MAPREG   = 0000000F            
VEC$V_DATAPATH = 00000000            
VEC$V_MAPLOCK  = 0000000F            
VEC$V_MAPREG   = 00000000            
VEC$V_PATHLOCK = 00000007            
VEC$W_MAPREG     00000010            
VECTAB           00000CCC R     04   
XDELBPT          ********   X   04   
XDELTABASE       00000000 R     03   
XDELTBIT         ********   X   04   


PROGRAM SECTION SYNOPSIS
INIT            PROCESSOR INITIALIZATION                         21-AUG-1978 19:49:53   VAX-11 MACRO X0.3-11               Page  34
PROGRAM SECTION SYNOPSIS                                                                                                         (1)


.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            FFFFFFFE      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
Z$DEBUGA         00000000      03     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT PAGE  
Z$INIT           00000CCC      04     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT PAGE  
XDELTA           0000009E      05     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
856. BYTES LEFT IN FREE MEMORY POOL.
72. BYTES OF RECLAIMED MEMORY.
OBJ$:INIT,LIS$:INIT/-SP=EXECML$/ML,SRC$:INIT
17 MLB DIR RDS - 1463 GETS TO DEFINE 35 MACROS. 118 INTER. FILE WRITES. 
