BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (1)   13300  BUG CHECK ERROR MESSAGE PROCESSING
   (1)   42200  DUMP_ARRAY - SUBROUTINE TO DUMP AN ARRAY OF MEM
   (1)   51800  WRITEDUMP - WRITE DATA TO DUMP FILE
BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page   1
07                                                                                                                               (1)

                                     0000   100 	.TITLE	BUGCHECK - SOFTWARE BUG CHECK ERROR LOGIC
                                     0000   200 	.IDENT	/07/
                                     0000   300 ;
                                     0000   400 ; COPYRIGHT (C) 1978
                                     0000   500 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
                                     0000   600 ;
                                     0000   700 ; THIS SOFTWARE IS FURNISHED UNDER  A LICENSE FOR USE ONLY  ON  A
                                     0000   800 ; SINGLE COMPUTER SYSTEM AND MAY BE  COPIED ONLY WITH  THE INCLU-
                                     0000   900 ; SION OF  THE  ABOVE  COPYRIGHT NOTICE.  THIS SOFTWARE,  OR  ANY
                                     0000  1000 ; OTHER COPIES THEREOF, MAY NOT BE  PROVIDED  OR  OTHERWISE  MADE
                                     0000  1100 ; AVAILABLE TO ANY OTHER PERSON EXCEPT  FOR  USE  ON  SUCH SYSTEM
                                     0000  1200 ; AND TO  ONE WHO AGREES  TO  THESE LICENSE  TERMS.  TITLE TO AND
                                     0000  1300 ; OWNERSHIP OF THE SOFTWARE SHALL AT ALL TIMES REMAIN IN DEC.
                                     0000  1400 ;
                                     0000  1500 ; THE INFORMATION IN THIS SOFTWARE  IS  SUBJECT TO CHANGE WITHOUT
                                     0000  1600 ; NOTICE AND SHOULD NOT BE CONSTRUED  AS  A COMMITMENT BY DIGITAL
                                     0000  1700 ; EQUIPMENT CORPORATION.
                                     0000  1800 ;
                                     0000  1900 ; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF ITS
                                     0000  2000 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
                                     0000  2100 ;
                                     0000  2200 ; D. N. CUTLER 29-OCT-77
                                     0000  2300 ;
                                     0000  2400 ; SOFTWARE BUG CHECK ERROR LOGIC
                                     0000  2500 ;
                                     0000  2600 ; MACRO LIBRARY CALLS
                                     0000  2700 ;
                                     0000  2800  
                                     0000  2900 	$EMBDEF	<CR,BC>			;DEFINE EMB OFFSETS
                                     0000  3000 	$IFDDEF				;IMAGE FILE DESCRIPTOR DEFINITIONS
                                     0000  3100 	$MBADEF				;MASS BUS ADAPTER INITIALIZATION
                                     0000  3200 	$PCBDEF				;DEFINE PCB OFFSETS
                                     0000  3300 	$PFNDEF				;DEFINE PFN DATA BASE BITS AND FIELDS
                                     0000  3400 	$PRDEF				;DEFINE PROCESSOR REGISTERS
                                     0000  3500 	$PRVDEF				;DEFINE PRIVILEGE BITS
                                     0000  3600 	$PTEDEF				;DEFINE PAGE TABLE BITS AND FIELDS
                                     0000  3700 	$PSLDEF				;DEFINE PROCESSOR STATUS BITS
                                     0000  3800 	$RPBDEF				;DEFINE RESTART PARAMETER BLOCK
                                     0000  3900 	$SSDEF				;DEFINE SYSTEM STATUS VALUES
                                     0000  4000 	$STSDEF				;DEFINE STATUS CODE FIELDS
                                     0000  4100 	$UBADEF				;DEFINE UNIBUS ADAPTER VALUES
                                     0000  4200 	$VADEF				;DEFINE VIRTUAL ADDRESS FIELDS
                                     0000  4300  
                                     0000  4400 ;
                                     0000  4500 ; LOCAL SYMBOLS
                                     0000  4600 ;
                                 00000000  4700 	.PSECT	$$$025
                                     0000  4800 
                                     0000  4900 FATAL_SPSAV:
                           00000000  0000  5000 	.LONG	0			;FATAL BUGCHECK IN PROGRESS SP
                                     0004  5100 ;
                                     0004  5200 ; CHARACTER CODE DEFINITIONS
                                     0004  5300 ;
                                     0004  5400  
                           0000000D  0004  5500 CR=13					;CARRIAGE RETURN
                           0000000A  0004  5600 LF=10					;LINE FEED
                                     0004  5700  
BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page   2
07                                                                                                                               (1)

                                     0004  5800 ;
                                     0004  5900 ; LOCAL DATA
                                     0004  6000 ;
                                 00000000  6100 	.PSECT	$ZBUGFATAL		;PSECT TO LOCATE EXECUTION LOCATION FOR
                                     0000  6200 					;BUGCHECK
                                     0000  6300 BUG$FATAL::				;MARKER ADDRESS
                                 00000000  6400 	.PSECT	Z$INIT__BUGZEND		;END OF BUGCHECK PSECTS
                                     0000  6500 BUGEND:					;MARKER ADDRESS
                                     0000  6600 ; BUG CHECK MESSAGE CONTROL TEXT
                                     0000  6700 ;
                                     0000  6800  
                                 00000000  6900 	.PSECT	Z$INIT__BUGC
                                     0000  7000 PRCNAM_MSG:
52 52 55 43 20 20 20 20 0A 0A 0D 00' 0000  7100 	.ASCIC	<CR><LF><LF>/    CURRENT PROCESS = /
20 53 53 45 43 4F 52 50 20 54 4E 45  000C       
                              20 3D  0018       
                                 19  0000       
                                     001A  7200 PRCPRV_MSG:
43 4F 52 50 20 20 20 20 0A 0A 0D 00' 001A  7300 	.ASCIC	<CR><LF><LF>/    PROCESS PRIVILEGES/<CR><LF><LF>
47 45 4C 49 56 49 52 50 20 53 53 45  0026       
                     0A 0A 0D 53 45  0032       
                                 1C  001A       
                                     0037  7400 IMGNAM_MSG:
47 41 4D 49 20 20 20 20 0A 0A 0D 00' 0037  7500 	.ASCIC	<CR><LF><LF>/    IMAGE NAME = /
         20 3D 20 45 4D 41 4E 20 45  0043       
                                 14  0037       
                                     004C  7600 MSGCTRL:				;
41 54 41 46 20 2A 2A 2A 2A 0A 0A 0D  004C  7700 	.ASCIZ	<CR><LF><LF>/**** FATAL BUG CHECK, VERSION = / ;
2C 4B 43 45 48 43 20 47 55 42 20 4C  0058       
00 20 3D 20 4E 4F 49 53 52 45 56 20  0064       
                                     0070  7800 MSGCTRL1:
45 54 53 49 47 45 52 20 20 20 20 0A  0070  7900 	.ASCII	<LF>/    REGISTER DUMP/<CR><LF><LF> ;
         0A 0A 0D 50 4D 55 44 20 52  007C       
               00 20 3D 20 30 52 09  0085  8000 	.ASCIZ	/	R0 = /		;
               00 20 3D 20 31 52 09  008C  8100 	.ASCIZ	/	R1 = /		;
               00 20 3D 20 32 52 09  0093  8200 	.ASCIZ	/	R2 = /		;
               00 20 3D 20 33 52 09  009A  8300 	.ASCIZ	/	R3 = /		;
               00 20 3D 20 34 52 09  00A1  8400 	.ASCIZ	/	R4 = /		;
               00 20 3D 20 35 52 09  00A8  8500 	.ASCIZ	/	R5 = /		;
               00 20 3D 20 36 52 09  00AF  8600 	.ASCIZ	/	R6 = /		;
               00 20 3D 20 37 52 09  00B6  8700 	.ASCIZ	/	R7 = /		;
               00 20 3D 20 38 52 09  00BD  8800 	.ASCIZ	/	R8 = /		;
               00 20 3D 20 39 52 09  00C4  8900 	.ASCIZ	/	R9 = /		;
               00 20 3D 30 31 52 09  00CB  9000 	.ASCIZ	/	R10= /		;
               00 20 3D 31 31 52 09  00D2  9100 	.ASCIZ	/	R11= /		;
               00 20 3D 20 50 41 09  00D9  9200 	.ASCIZ	/	AP = /		;
               00 20 3D 20 50 46 09  00E0  9300 	.ASCIZ	/	FP = /		;
               00 20 3D 20 50 53 09  00E7  9400 	.ASCIZ	/	SP = /		;
               00 20 3D 20 43 50 09  00EE  9500 	.ASCIZ	/	PC = /		;
               00 20 3D 4C 53 50 09  00F5  9600 	.ASCIZ	/	PSL= /		;
2F 4C 45 4E 52 45 4B 20 20 20 20 0A  00FC  9700 	.ASCII	<LF>^    KERNEL/INTERRUPT STACK^<CR><LF><LF><128> ;
54 53 20 54 50 55 52 52 45 54 4E 49  0108       
               80 0A 0A 0D 4B 43 41  0114       
54 53 20 43 45 58 45 20 20 20 20 0A  011B  9800 	.ASCII	<LF>/    EXEC STACK/<CR><LF><LF><128> ;
               80 0A 0A 0D 4B 43 41  0127       
                                     012E  9900  
                                     012E 10000 ;
BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page   3
07                                                                                                                               (1)

                                     012E 10100 ; PROCESSOR REGISTER DUMP CONTROL TABLE
                                     012E 10200 ;
                                     012E 10300  
                                 00000000 10400 	.PSECT	$AEXENONPAGED
                                     0000 10500 REGTAB:					;
                                 00  0000 10600 	.BYTE	PR$_KSP			;KERNEL STACK POINTER
                                 01  0001 10700 	.BYTE	PR$_ESP			;EXECUTIVE STACK POINTER
                                 02  0002 10800 	.BYTE	PR$_SSP			;SUPERVISOR STACK POINTER
                                 03  0003 10900 	.BYTE	PR$_USP			;USER STACK POINTER
                                 04  0004 11000 	.BYTE	PR$_ISP			;INTERRUPT STACK POINTER
                                 80  0005 11100 	.BYTE	128			;TABLE ESCAPE
                                 08  0006 11200 	.BYTE	PR$_P0BR		;PROGRAM REGION BASE REGISTER
                                 09  0007 11300 	.BYTE	PR$_P0LR		;PROGRAM REGION LIMIT REGISTER
                                 0A  0008 11400 	.BYTE	PR$_P1BR		;CONTROL REGION BASE REGISTER
                                 0B  0009 11500 	.BYTE	PR$_P1LR		;CONTROL REGION LIMIT REGISTER
                                 0C  000A 11600 	.BYTE	PR$_SBR			;SYSTEM BASE REGISTER
                                 0D  000B 11700 	.BYTE	PR$_SLR			;SYSTEM LIMIT REGISTER
                                 10  000C 11800 	.BYTE	PR$_PCBB		;PROCESS CONTROL BLOCK BASE REGISTER
                                 11  000D 11900 	.BYTE	PR$_SCBB		;SYSTEM CONTROL BLOCK BASE REGISTER
                                 13  000E 12000 	.BYTE	PR$_ASTLVL		;AST DELIVERY LEVEL REGISTER
                                 15  000F 12100 	.BYTE	PR$_SISR		;SOFTWARE INTERRUPT SUMMARY REGISTER
                                 18  0010 12200 	.BYTE	PR$_ICCS		;INTERVAL TIMER CONTROL REGISTER
                                 1A  0011 12300 	.BYTE	PR$_ICR			;INTERVAL COUNT REGISTER
                                 1B  0012 12400 	.BYTE	PR$_TODR		;TIME OF DAY REGISTER
                                 28  0013 12500 	.BYTE	PR$_ACCS		;ACCELERATOR CONTROL REGISTER
                                 30  0014 12600 	.BYTE	PR$_SBIFS		;SBI FAULT STATUS REGISTER
                                 32  0015 12700 	.BYTE	PR$_SBISC		;SBI COMPARATOR REGISTER
                                 33  0016 12800 	.BYTE	PR$_SBIMT		;SBI MAINTENANCE REGISTER
                                 34  0017 12900 	.BYTE	PR$_SBIER		;SBI ERROR REGISTER
                                 35  0018 13000 	.BYTE	PR$_SBITA		;SBI TIME OUT REGISTER
                                 80  0019 13100 	.BYTE	128			;TABLE ESCAPE
BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page   4
07              BUG CHECK ERROR MESSAGE PROCESSING                                                                               (1)

                                     001A 13300 	.SBTTL	BUG CHECK ERROR MESSAGE PROCESSING
                                     001A 13400 ;+
                                     001A 13500 ; EXE$BUG_CHECK - BUG CHECK ERROR MESSAGE PROCESSING
                                     001A 13600 ;
                                     001A 13700 ;
                                     001A 13800 ; THIS ROUTINE IS CALLED BY EXECUTING THE OPERATION CODE ^XFFFF, WHICH IS
                                     001A 13900 ; RESERVED FOR DIGITAL AND IS GUARANTEED TO ALWAYS CAUSE AN EXCEPTION.
                                     001A 14000 ;
                                     001A 14100 ; INPUTS:
                                     001A 14200 ;
                                     001A 14300 ;	THE CURRENT PROCESS PCB.
                                     001A 14400 ;	THE ENTIRE PROCESSOR STATE (I.E. GENERAL REGISTERS, ETC.).
                                     001A 14500 ;	THE BUG CHECK CODE WHICH FOLLOWS IMMEDIATELY INLINE.
                                     001A 14600 ;
                                     001A 14700 ; OUTPUTS:
                                     001A 14800 ;
                                     001A 14900 ;	IF THE PREVIOUS MODE WAS KERNEL OR EXECUTIVE AND THE BUG SEVERITY IS
                                     001A 15000 ;	GREATER THAN OR EQUAL TO ERROR, THEN THE SYSTEM IS SHUT DOWN IN AN
                                     001A 15100 ;	ORDERLY FASHION BY EXECUTING THE CRASH RESTART ROUTINE.  THE CODE
                                     001A 15200 ;	TO HANDLE A FATAL BUGCHECK IS READ FROM THE SYSTEM IMAGE OVER SOME
                                     001A 15300 ;	OF THE PURE EXEC CODE USING THE SAVED BOOTSTRAP DRIVER.
                                     001A 15400 ;
                                     001A 15500 ;	IF THE PREVIOUS MODE WAS KERNEL OR EXECUTIVE AND THE BUG SEVERITY IS
                                     001A 15600 ;	LESS THAN ERROR, THEN AN ERROR LOG ENTRY IS MADE AND EXECUTION OF THE
                                     001A 15700 ;	SYSTEM CONTINUES.
                                     001A 15800 ;
                                     001A 15900 ;	IF THE PREVIOUS MODE WAS SUPERVISOR OR USER AND THE PROCESS HAS THE
                                     001A 16000 ;	PRIVILEGE TO CAUSE BUG CHECK ERROR LOG ENTRIES, THEN AN ENTRY IS MADE
                                     001A 16100 ;	IN THE ERROR LOG. OTHERWISE NO ENTRY IS MADE.
                                     001A 16200 ;
                                     001A 16300 ;	IF THE PREVIOUS MODE WAS SUPERVISOR OR USER AND THE BUG SEVERITY IS
                                     001A 16400 ;	GREATER THAN OR EQUAL TO ERROR, THEN AN EXIT SYSTEM SERVICE IS PERFORMED
                                     001A 16500 ;	ON BEHALF OF THE PROCESS AT THE MODE CAUSING THE BUG CHECK. IF THE BUG
                                     001A 16600 ;	SEVERITY IS LESS THAN ERROR, THEN EXECUTION OF THE PROCESS IS RESUMED.
                                     001A 16700 ;
                                     001A 16800 ;	IF AN ACCESS VIOLATION IS DETECTED WHILE ATTEMPTING TO FETCH THE BUG
                                     001A 16900 ;	CHECK CODE, THE EXCEPTION IS TURNED INTO AN ACCESS VIOLATION.
                                     001A 17000 ;-
                                     001A 17100  
                                     001A 17200 EXE$BUG_CHECK::				;BUG CHECK ERROR PROCESSING
                     7FFF 8F     BB  001A 17300 	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,AP,FP,SP> ;SAVE
            50         3C AE     D0  001E 17400 	MOVL	15*4(SP),R0		;GET ADDRESS OF INSTRUCTION
                                     0022 17500 	IFRD	#2,2(R0),20$		;CAN LOWER HALF OF BUG CHECK CODE BE READ?
                     7FFF 8F     BA  0029 17600 10$:	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,AP,FP,SP> ;RESTORE
                          6E     DD  002D 17700 	PUSHL	(SP)			;DUPLICATE ADDRESS OF INSTRUCTION
            6E            02     C0  002F 17800 	ADDL	#2,(SP)			;CALCULATE ADDRESS OF VIOLATION
                          00     DD  0032 17900 	PUSHL	#0			;SET REASON CODE
                          FFC9'  31  0034 18000 	BRW	EXE$ACVIOLAT		;
                                     0037 18100  
                                     0037 18200 ;
                                     0037 18300 ; BUG CHECK CODE CAN BE READ
                                     0037 18400 ;
                                     0037 18500  
            5D         02 A0     3C  0037 18600 20$:	MOVZWL	2(R0),FP		;GET LOWER HALF OF BUGCHECK CODE
         3C AE            04     C0  003B 18700 	ADDL	#4,15*4(SP)		;CALCULATE ADDRESS OF NEXT INSTRUCTION
            5C            5E     D0  003F 18800 	MOVL	SP,AP			;SET ADDRESS OF SAVED REGISTERS
            5B         BB AF     9E  0042 18900 	MOVAB	REGTAB,R11		;GET ADDRESS OF PROCESSOR REGISTER TABLE
BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page   5
07              BUG CHECK ERROR MESSAGE PROCESSING                                                                               (1)

                          5A     DC  0046 19000 	MOVPSL	R10			;READ CURRENT PROCESSOR STATUS
         01 A0         FD 8F     91  0048 19100 	CMPB	#^XFD,1(R0)		;BUG CHECK LONG?
                          0F     12  004D 19200 	BNEQ	25$			;IF NEQ NO
                                     004F 19300 	IFNORD	#2,4(R0),10$		;CAN UPPER HALF OF BUG CHECK CODE BE READ?
            5D         02 A0     D0  0056 19400 	MOVL	2(R0),FP		;GET BUG CHECK CODE
         3C AE            02     C0  005A 19500 	ADDL	#2,15*4(SP)		;CALCULATE ADDRESS OF NEXT INSTRUCTION
                          16     ED  005E 19600 25$:	CMPZV	#PSL$V_PRVMOD,#PSL$S_PRVMOD,- ;PREVIOUS MODE EXEC OR KERNEL?
            5A            02         0060 19700 		R10,#PSL$C_EXEC		;
                          01         0062       
                          43     15  0063 19800 	BLEQ	70$			;IF LEQ YES
            54       0000'CF     D0  0065 19900 	MOVL	W^SCH$GL_CURPCB,R4	;GET CURRENT PROCESS PCB ADDRESS
                                     006A 20000 	IFNPRIV	BUGCHK,40$		;DOES PROCESS HAVE PRIVILEGE TO BUG CHECK?
            59       0070 8F     3C  006F 20100 	MOVZWL	#EMB$K_UBC,R9		;SET ENTRY TYPE
            51       00EA 8F     3C  0074 20200 30$:	MOVZWL	#EMB$K_BC_LENGTH+PCB$K_LENGTH,R1 ;GET LENGTH OF BUG CHECK MESSAGE
                          FF84'  30  0079 20300 	BSBW	ERL$ALLOCEMB		;ALLOCATE BUG CHECK ERROR MESSAGE BUFFER
            06            50     E9  007C 20400 	BLBC	R0,40$			;IF LBC ALLOCATION FAILURE
                          008A   30  007F 20500 	BSBW	BUILD_HEADER		;BUILD MESSAGE HEADER AND DUMP REGISTERS
                          00A2   30  0082 20600 	BSBW	DUMP_PCB		;DUMP SOFTWARE PCB
            0C            5D     E8  0085 20700 40$:	BLBS	FP,50$			;IF LBS NONFATAL BUG CHECK
                          00     ED  0088 20800 	CMPZV	#STS$V_SEVERITY,#STS$S_SEVERITY,- ;FATAL BUG CHECK?
            5D            03         008A 20900 		FP,#STS$K_ERROR		;
                          02         008C       
                          05     19  008D 21000 	BLSS	50$			;IF LSS NO
         3C AE         99'AF     9E  008F 21100 	MOVAB	B^60$,15*4(SP)		;REPLACE RETURN PC
                     7FFF 8F     BA  0094 21200 50$:	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,AP,FP,SP> ;RESTORE
                                 02  0098 21300 	REI				;
                                     0099 21400  
                                     0099 21500 ;
                                     0099 21600 ; EXECUTE EXIT SYSTEM SERVICE ON BEHALF OF PROCESS
                                     0099 21700 ;
                                     0099 21800  
                                     0099 21900 60$:	$EXIT_S	#SS$_BUGCHECK		;EXIT MODE
                          F1     11  00A6 22000 	BRB	60$			;
                                     00A8 22100  
                                     00A8 22200 ;
                                     00A8 22300 ; PREVIOUS MODE WAS EXECUTIVE OR KERNEL
                                     00A8 22400 ;
                                     00A8 22500  
            59            28     3C  00A8 22600 70$:	MOVZWL	#EMB$K_SBC,R9		;SET ENTRY TYPE
       0000'CF            00'    E0  00AB 22700 	BBS	S^#EXE$V_FATAL_BUG,W^EXE$GL_FLAGS,80$ ;IF SET, ALL FATAL
                          0A         00B0       
            C0            5D     E8  00B1 22800 	BLBS	FP,30$			;IF LBS NONFATAL BUG CHECK
                          00     ED  00B4 22900 	CMPZV	#STS$V_SEVERITY,#STS$S_SEVERITY,- ;FATAL BUG CHECK?
            5D            03         00B6 23000 		FP,#STS$K_ERROR		;
                          02         00B8       
                          B9     19  00B9 23100 	BLSS	30$			;IF LSS NO
                                     00BB 23200  
                                     00BB 23300 ;
                                     00BB 23400 ; SHUT DOWN SYSTEM IN AN ORDERLY MANNER
                                     00BB 23500 ;
                                     00BB 23600  
                                     00BB 23700 80$:	SETIPL	#31			;DISABLE ALL INTERRUPTS
            56       0000'CF     D0  00BE 23800 	MOVL	W^EXE$GL_RPB,R6		;GET ADDRESS OF RESTART PARAMETERS
                                     00C3 23900 ;
                                     00C3 24000 ; RE-INITIALIZE ADAPTER FOR SYSTEM DEVICE BEFORE READING FATAL BUGCHECK CODE
                                     00C3 24100 ;
                                     00C3 24200 ADPINIT:				;
BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page   6
07              BUG CHECK ERROR MESSAGE PROCESSING                                                                               (1)

            50         60 A6     D0  00C3 24300 	MOVL	RPB$L_ADPVIR(R6),R0	;GET VIRTUAL ADDRESS OF ADAPTER
            51            60     D0  00C7 24400 	MOVL	(R0),R1			;READ CONFIGURATION REGISTER 0
         04 A0            01     D0  00CA 24500 	MOVL	#MBA$M_CR_INIT,MBA$L_CR(R0)	;INITIALIZE ADAPTER
            51            03     CB  00CE 24600 	BICL3	#3,R1,R2		;CLEAR UBA NUMBER TO GET TYPE
                          52         00D1       
            52            28     91  00D2 24700 	CMPB	#^X28,R2		;IS THIS A UNIBUS ADAPTER
                          09     12  00D5 24800 	BNEQ	20$			;BR IF NOT, NO NEED TO WAIT
            60   00010000 8F     D3  00D7 24900 10$:	BITL	#UBA$M_CSR_UBIC,UBA$L_CSR(R0)	; Wait for UBA init to complete
                          F7     13  00DE 25000 	BEQL	10$			; Br if not yet complete
            55         34 A6     D0  00E0 25100 20$:	MOVL	RPB$L_IOVEC(R6),R5	;AND FETCH POINTER TO BOOTDRIVR
            52       0000'8F     3C  00E4 25200 	MOVZWL	#<<FATALBUG-^X80000000>@-9>,R2	;LBN OFFSET TO FATAL BUGCHECK CODE
                          56     DD  00E9 25300 	PUSHL	R6			;SET RPB ADDRESS IN ARGUMENT LIST
                          01     DD  00EB 25400 	PUSHL	#1			;SET FOR VIRTUAL ADDRESS I/O
                          00'    DD  00ED 25500 	PUSHL	S^#IO$_READLBLK		;SET FUNCTION TO READ
                     0004'DF42   9F  00EF 25600 	PUSHAB	@W^EXE$GQ_STAREXE+4[R2]	;COMPUTE AND STACK FULL LBN
                 00000000'8F     DD  00F4 25700 	PUSHL	#<BUGEND-FATALBUG>	;SIZE OF BUGCHECK CODE
            54       0000'CF     9E  00FA 25800 	MOVAB	W^BUG$FATAL,R4		;BUFFER ADDRESS
                          54     DD  00FF 25900 	PUSHL	R4			;SET IN ARGUMENT LIST
         00 B545          06     FB  0101 26000 	CALLS	#6,@(R5)[R5]		;CALL BOOTDRIVR TO READ FOLLOWING CODE
            02            50     E9  0106 26100 	BLBC	R0,90$			;HALT IF ERROR
                          64     17  0109 26200 	JMP	(R4)			;JUMP TO FATALBUG
                                 00  010B 26300 90$:	HALT				;UNABLE TO READ FATAL BUGCHECK CODE
                                 00000000 26400 	.PSECT	Z$INIT__BUGA,PAGE	;FIRST BUGCHECK PSECT IN INIT REGION
                                     0000 26500 FATALBUG:				;START OF FATAL BUGCHECK CODE
            50   00000000'9F     9E  0000 26600 	MOVAB	@#FATAL_SPSAV,R0	;ADDRESS OF SAVED FATAL SP
                          60     D5  0007 26700 	TSTL	(R0)			;ALREADY IN A FATAL BUGCHECK?
                          06     13  0009 26800 	BEQL	82$			;BRANCH IF NOT
            5E            60     D0  000B 26900 	MOVL	(R0),SP			;RESTORE SP FROM PREVIOUS BUGCHECK
                          0139   31  000E 27000 	BRW	200$			;AND GO REBOOT THE SYSTEM
            60            5E     D0  0011 27100 82$:	MOVL	SP,(R0)			;NOTE THAT WE ARE IN A FATAL BUGCHECK
            5A            16     E2  0014 27200 	BBSS	#PSL$V_PRVMOD,R10,84$	;JAM PREVIOUS MODE TO EXEC
                          00         0017       
                                     0018 27300 					;THUS FORCING EXEC STACK DUMP TOO
            51       0176 8F     3C  0018 27400 84$:	MOVZWL	#EMB$K_CR_LENGTH+PCB$K_LENGTH,R1 ;GET LENGTH OF CRASH MESSAGE
                 00000000'9F     16  001D 27500 	JSB	@#ERL$ALLOCEMB		;ALLOCATE ERROR MESSAGE BUFFER
            1E            50     E9  0023 27600 	BLBC	R0,100$			;IF LBC ALLOCATION FAILURE
            59            25     3C  0026 27700 	MOVZWL	#EMB$K_CR,R9		;SET TYPE OF ENTRY
                 0000010C'9F     16  0029 27800 	JSB	@#BUILD_HEADER		;BUILD HEADER AND DUMP REGISTERS
                 00000143'9F     16  002F 27900 	JSB	@#DUMP_REGISTERS	;DUMP REMAINDER OF PROCESSOR REGISTERS
            51            10     D0  0035 28000 	MOVL	#16,R1			;SET DEPTH OF SBI SILO
            80            31     DB  0038 28100 90$:	MFPR	#PR$_SBIS,(R0)+		;INSERT SBI SILO ENTRY
            FA            51     F5  003B 28200 	SOBGTR	R1,90$			;ANY MORE ENTRIES IN SILO?
                 00000127'9F     16  003E 28300 	JSB	@#DUMP_PCB		;DUMP SOFTWARE PCB
                          5D     DD  0044 28400 100$:	PUSHL	FP			;SAVE BUG CHECK CODE
            5C            5E     D0  0046 28500 	MOVL	SP,AP			;SET ADDRESS OF REGISTERS
                          5B     D4  0049 28600 	CLRL	R11			;SET FOR CONSOLE TERMINAL OUTPUT
            59   0000004C'EF     9E  004B 28700 	MOVAB	MSGCTRL,R9		;GET ADDRESS OF CONTROL TEXT
            50            89     98  0052 28800 110$:	CVTBL	(R9)+,R0		;GET NEXT BYTE FROM CONTROL TEXT
                          6B     19  0055 28900 	BLSS	130$			;IF LSS END OF TEXT
                          05     13  0057 29000 	BEQL	120$			;IF EQL ESCAPE CHARACTER
                          FFA4'  30  0059 29100 	BSBW	EXE$OUTCHAR		;OUTPUT CHARACTER
                          F4     11  005C 29200 	BRB	110$			;
            51            8C     D0  005E 29300 120$:	MOVL	(AP)+,R1		;GET NEXT LONGWORD TO CONVERT
            50       0070'CF     9E  0061 29400 	MOVAB	W^MSGCTRL1,R0		;GET ADDRESS OF REGISTER STRING
            59            50     D1  0066 29500 	CMPL	R0,R9			;CHECK FOR END OF HEADER
                          4F     12  0069 29600 	BNEQ	124$			;BRANCH IF NOT AT END
            51            7E     7E  006B 29700 	MOVAQ	-(SP),R1		;CREATE BUFFER FOR VERSION TEXT
BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page   7
07              BUG CHECK ERROR MESSAGE PROCESSING                                                                               (1)

         01 AE   00000000'9F     D0  006E 29800 	MOVL	@#SYS$GQ_VERSION,1(SP)	;SET VERSION NUMBER IN BUFFER
            6E            05     90  0076 29900 	MOVB	#5,(SP)			;SET COUNT FOR VERSION AND SPACE
         05 AE            20     90  0079 30000 	MOVB	#32,5(SP)		;SET TRAILING SPACE
                          FF80'  30  007D 30100 	BSBW	EXE$OUTCSTRING		;PRINT VERSION NUMBER
            5E            08     C0  0080 30200 	ADDL	#8,SP			;CLEAN STACK
            5D            08     C7  0083 30300 	DIVL3	#8,FP,R0		;CONVERT CODE TO INDEX
                          50         0086       
            51   00000000'EF     9E  0087 30400 	MOVAB	BUG$T_MESSAGES,R1	;SET BASE OF MESSAGES
            52            81     9A  008E 30500 122$:	MOVZBL	(R1)+,R2		;GET LENGTH OF MESSAGE
            51            52     C0  0091 30600 	ADDL	R2,R1			;AND POINT TO NEXT MESSAGE
            F7            50     F5  0094 30700 	SOBGTR	R0,122$			;BRANCH IF MESSAGE NOT LOCATED
                          FF66'  30  0097 30800 	BSBW	EXE$OUTCSTRING		;OUTPUT STRING
            51   00000000'EF     DE  009A 30900 	MOVAL	PRCNAM_MSG,R1		;"CURRENT PROCESS = "
                          FF5C'  30  00A1 31000 	BSBW	EXE$OUTCSTRING		;OUTPUT COUNTED STRING
            51   00000000'9F     D0  00A4 31100 	MOVL	@#SCH$GL_CURPCB,R1	;PROCESS PCB OF CURRENT PROCESS
            51   0000006C 8F     C0  00AB 31200 	ADDL	#PCB$T_LNAME,R1		;POINT AT PROCESS NAME
                          FF4B'  30  00B2 31300 	BSBW	EXE$OUTCSTRING		;OUTPUT PROCESS NAME COUNTED STRING
                          FF48'  30  00B5 31400 	BSBW	EXE$OUTCRLF		;NEW LINE
                          98     11  00B8 31500 	BRB	110$			;
                                     00BA 31600 124$:					;
                          FF43'  30  00BA 31700 	BSBW	EXE$OUTHEX		;OUTPUT CONVERTED HEX LONGWORD
                          FF40'  30  00BD 31800 	BSBW	EXE$OUTCRLF		;OUTPUT CARRIAGE RETURN, LINE FEED PAIR
                          90     11  00C0 31900 126$:	BRB	110$			;
            58         40 8F     9A  00C2 32000 130$:	MOVZBL	#64,R8			;SET LOOP COUNT
            50   00000000'9F     9E  00C6 32100 	MOVAB	@#CTL$AL_STACK,R0	;POINTER TO POSSIBLE PROCESS SPACE STACKS
            5C            1F     E1  00CD 32200 	BBC	#31,AP,135$		;BRANCH IF STACK IS IN PROCESS SPACE
                          07         00D0       
            50   00000000'9F     9E  00D1 32300 	MOVAB	@#EXE$AL_STACKS,R0	;POINTER TO POSSIBLE SYSTEM SPACE STACKS
            80            5C     D1  00D8 32400 135$:	CMPL	AP,(R0)+		;ADDRESS IN FIRST STACK?
                          05     15  00DB 32500 	BLEQ	140$			;BRANCH IF YES
            80            5C     D1  00DD 32600 	CMPL	AP,(R0)+		;IN SECOND STACK?
                          14     14  00E0 32700 	BGTR	155$			;BRANCH IF NOT, BAD STACK ADDRESS
            70            5C     C3  00E2 32800 140$:	SUBL3	AP,-(R0),R0		;NUMBER OF BYTES TO TOP OF STACK
                          50         00E5       
                          0E     15  00E6 32900 	BLEQ	155$			;BRANCH IF EMPTY
            50            04     C6  00E8 33000 	DIVL	#4,R0			;FORM LONG WORD COUNT OF MAX TO DUMP
            58            50     D1  00EB 33100 	CMPL	R0,R8			;USE SMALLER OF MAX AND DEFAULT
                          03     18  00EE 33200 	BGEQ	145$			;
            58            50     D0  00F0 33300 	MOVL	R0,R8			;USE THE MAX
                          0118   30  00F3 33400 145$:	BSBW	DUMP_ARRAY		;DUMP KERNEL, INTERRUPT, OR EXEC STACK
            5C            1F     E0  00F6 33500 155$:	BBS	#31,AP,190$		;DO NOT TRY FOR EXEC STACK IF SYSTEM SPACE
                          4E         00F9       
            5C            01     DB  00FA 33600 	MFPR	#PR$_ESP,AP		;FETCH EXEC STACK POINTER
            5A            16     E4  00FD 33700 	BBSC	#PSL$V_PRVMOD,R10,126$	;IF HAVEN'T DUMPED EXEC STACK, DO IT NOW
                          BF         0100       
            51   0000001A'EF     9E  0101 33800 	MOVAB	PRCPRV_MSG,R1		;"PROCESS PRIVILEGES"
                          FEF5'  30  0108 33900 	BSBW	EXE$OUTCSTRING		;OUTPUT COUNTED STRING
            5C   00000000'9F     D0  010B 34000 	MOVL	@#SCH$GL_CURPCB,AP	;CURRENT PROCESS CONTROL BLOCK ADDRESS
            5C         64 AC     D0  0112 34100 	MOVL	PCB$L_PHD(AP),AP	;PROCESS HEADER ADDRESS
                          06     18  0116 34200 	BGEQ	170$			;IF NOT NEGATIVE, DON'T TRY TO USE IT
            58            02     D0  0118 34300 	MOVL	#2,R8			;2 LONG WORDS AT FRONT OF HEADER
                          00F0   30  011B 34400 	BSBW	DUMP_ARRAY		;OUTPUT THE PROCESS PRIVILEGES
            51   00000037'EF     9E  011E 34500 170$:	MOVAB	IMGNAM_MSG,R1		;"IMAGE NAME = "
                          FED8'  30  0125 34600 	BSBW	EXE$OUTCSTRING		;OUTPUT THE COUNTED STRING
            5C   00000000'9F     9E  0128 34700 	MOVAB	@#MMG$IMGHDRBUF,AP	;ADDRESS OF IMAGE HEADER
                          58     D4  012F 34800 	CLRL	R8			;DO NOT DUMP ANY DATA
                          00DA   30  0131 34900 	BSBW	DUMP_ARRAY		;JUST CHECK FOR ACCESSABILITY
BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page   8
07              BUG CHECK ERROR MESSAGE PROCESSING                                                                               (1)

            11            50     E9  0134 35000 	BLBC	R0,190$			;BRANCH IF CANNOT ACCESS THE IMAGE HDR BUF
            51         04 AC     D0  0137 35100 	MOVL	4(AP),R1		;ADDRESS OF IMAGE FILE DESCRIPTOR
            50         02 A1     3C  013B 35200 	MOVZWL	IFD$W_FILNAMOFF(R1),R0	;OFFSET TO NAME OF IMAGE BEING RUN
            51            50     C0  013F 35300 	ADDL	R0,R1			;ADDRESS OF ASCIC NAME
                          FEBB'  30  0142 35400 	BSBW	EXE$OUTCSTRING		;OUTPUT THE IMAGE NAME
                          FEB8'  30  0145 35500 	BSBW	EXE$OUTCRLF		;OUTPUT CARRIAGE RETURN, LINE FEED PAIR
                          8E     D5  0148 35600 190$:	TSTL	(SP)+			;REMOVE BUG CHECK CODE FROM STACK
                     7FFF 8F     BA  014A 35700 200$:	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,AP,FP,SP> ;RESTORE
   00000000'9F            00'    E0  014E 35800 	BBS	S^#EXE$V_BUGREBOOT,@#EXE$GL_FLAGS,REBOOT	; CHECK FOR REBOOT
                          06         0155       
                 00000000'9F     16  0156 35900 	JSB	@#INI$BRK		;STOP IN XDELTA IF PRESENT
                                     015C 36000 REBOOT:					;INITIATE REBOOT BY TRIGGERING CONSOLE
   00000000'9F            00'    E1  015C 36100 	BBC	S^#EXE$V_BUGDUMP,@#EXE$GL_FLAGS,3$	; BRANCH IF NO DUMP 
                          0E         0163       
            54   00000000'9F     9E  0164 36200 	MOVAB	@#EXE$GQ_SYSDMP,R4	;GET ADDRESS OF DESCRIPTOR FOR DUMP FILE
         04 A4            64     C1  016B 36300 	ADDL3	(R4),4(R4),R0		;COMPUTE CHECK SUM
                          50         016F       
                          03     12  0170 36400 	BNEQ	5$			;CONTINUE IF FILE NOT NULL
                          0080   31  0172 36500 3$:	BRW	NODUMP			;NO DUMP
            50            50     D2  0175 36600 5$:	MCOML	R0,R0			;COMPLEMENT
   00000000'9F            50     CC  0178 36700 	XORL	R0,@#EXE$GL_DMPCHK	;COMPARE WITH CHECK SUM
                          74     12  017F 36800 	BNEQ	NODUMP			;INVALID DESCRIPTOR
            5B            5E     D0  0181 36900 	MOVL	SP,R11			;MARK PLACE ON STACK
            7E            04     DB  0184 37000 	MFPR	#PR$_ISP,-(SP)		;SAVE INTERRUPT STACK POINTER
            7E            03     DB  0187 37100 	MFPR	#PR$_USP,-(SP)		;SAVE USER STACK POINTER
            7E            02     DB  018A 37200 	MFPR	#PR$_SSP,-(SP)		;SAVE SUPER STACK POINTER
            7E            01     DB  018D 37300 	MFPR	#PR$_ESP,-(SP)		;SAVE EXEC STACK POINTER
            7E            00     DB  0190 37400 	MFPR	#PR$_KSP,-(SP)		;SAVE KERNEL STACK POINTER
            7E            0D     DB  0193 37500 	MFPR	#PR$_SLR,-(SP)		;PUSH SYSTEM LENGTH REGISTER
            7E            0C     DB  0196 37600 	MFPR	#PR$_SBR,-(SP)		;AND SYSTEM BASE REGISTER
                          00     DD  0199 37700 	PUSHL	#0			;DUMP FILE FULL FLAG
                 00000000'9F     DD  019B 37800 	PUSHL	@#ERL$GL_SEQUENCE	;SAVE ERROR LOG SEQUENCE NUMBER
            5B            5E     C3  01A1 37900 	SUBL3	SP,R11,R8		;SIZE OF BUFFER EXTENSION
                          58         01A4       
            58         44 A8     9E  01A5 38000 	MOVAB	<17*4>(R8),R8		;ADD SIZE OF FIXED R0-PC,PSL
            56   00000000'9F     D0  01A9 38100 	MOVL	@#EXE$GL_RPB,R6		;GET BASE OF RESTART PARAMETER BLOCK
            57            5E     D0  01B0 38200 	MOVL	SP,R7			;SET BASE OF BUFFER
                          11     19  01B3 38300 	BLSS	10$			;BRANCH IF SYSTEM SPACE STACK
   00000000'9F            58     C3  01B5 38400 	SUBL3	R8,@#EXE$GL_INTSTK,R7	;ELSE MOVE TO INTERRUPT STACK (WHICH IS EMPTY)
                          57         01BC       
                          3F     BB  01BD 38500 	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	;SAVE MOVC REGISTERS
         18 AE            58     28  01BF 38600 	MOVC3	R8,24(SP),(R7)		;COPY TO SYSTEM SPACE FOR I/O
                          67         01C3       
                          3F     BA  01C4 38700 	POPR	#^M<R0,R1,R2,R3,R4,R5>	;RESTORE MOVC REGISTERS
            55         34 A6     D0  01C6 38800 10$:	MOVL	RPB$L_IOVEC(R6),R5	;GET ADDRESS OF BOOTDRIVR
            59            84     D0  01CA 38900 	MOVL	(R4)+,R9		;GET SIZE OF DUMP FILE
                          26     15  01CD 39000 	BLEQ	NODUMP			;NO DUMP IF EMPTY
            5A            64     D0  01CF 39100 	MOVL	(R4),R10		;AND LBN
                          21     15  01D2 39200 	BLEQ	NODUMP			;NO DUMP IF EMPTY
                          00AA   30  01D4 39300 	BSBW	WRITEDUMP		;WRITE DUMP HEADER
            58       0400 8F     3C  01D7 39400 	MOVZWL	#<2*512>,R8		;SET SIZE FOR ERROR LOG BUFFERS
            57   00000000'9F     D0  01DC 39500 	MOVL	@#ERL$AL_BUFADDR,R7	;AND BUFFER ADDRESS
                          009B   30  01E3 39600 	BSBW	WRITEDUMP		;WRITE ERROR LOG BUFFERS
                                     01E6 39700 ;
                                     01E6 39800 ; WRITE ALL OF MEMORY STARTING AT 0 TO REMAINDER OF DUMP FILE
                                     01E6 39900 ; THE ASSUMPTIONS ARE MADE THAT MEMORY EXISTS CONTIGUOUSLY STARTING AT
                                     01E6 40000 ; PHYSICAL PAGE 0 AND THAT THE SPT WAS LOCATED IN THE HIGHEST PHYSICAL
BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page   9
07              BUG CHECK ERROR MESSAGE PROCESSING                                                                               (1)

                                     01E6 40100 ; PAGES USED.
                                     01E6 40200 ;
                          57     D4  01E6 40300 	CLRL	R7			;SET STARTING ADDRESS
            58            0C     DB  01E8 40400 	MFPR	#PR$_SBR,R8		;PHYSICAL ADDDRESS OF SPT
            50            0D     DB  01EB 40500 	MFPR	#PR$_SLR,R0		;LENGTH OF SPT
            58            6840   DE  01EE 40600 	MOVAL	(R8)[R0],R8		;COMPUTE END OF DUMP
                          008C   30  01F2 40700 	BSBW	WRITEDUMP		;DUMP IT
                                     01F5 40800 NODUMP:					;
   00000000'9F            00'    E1  01F5 40900 	BBC	S^#EXE$V_BUGREBOOT,@#EXE$GL_FLAGS,20$	;BRANCH IF NO REBOOT
                          0F         01FC       
            50            22     DB  01FD 41000 10$:	MFPR	#PR$_TXCS,R0		;GET TRANSMITTER STATUS
                          50     95  0200 41100 	TSTB	R0			;CHECK FOR DONE
                          F9     18  0202 41200 	BGEQ	10$			;NO, WAIT
            23   00000F02 8F     DA  0204 41300 	MTPR	#^XF02,#PR$_TXDB	;GIVE REBOOT COMMAND
                                 00  020B 41400 	HALT				;AND HALT TO ALLOW IT TO OCCUR
                          FE     11  020C 41500 20$:	BRB	20$			;WAIT BY LOOPING
                                     020E 42000 
BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page  10
07              DUMP_ARRAY - SUBROUTINE TO DUMP AN ARRAY OF MEM                                                                  (1)

                                     020E 42200 	.SBTTL	DUMP_ARRAY - SUBROUTINE TO DUMP AN ARRAY OF MEMORY LOCATIONS
                                     020E 42300 ;
                                     020E 42400 ; DUMP AN ARRAY OF MEMORY LOCATIONS WITH THEIR ADDRESSES AND CONTENTS
                                     020E 42500 ;
                                     020E 42600 ; INPUTS:
                                     020E 42700 ;
                                     020E 42800 ;	R8 = NUMBER OF LONG WORDS TO DUMP
                                     020E 42900 ;	     IF 0 IS SPECIFIED THE FIRST ADDRESS IS CHECKED FOR RESIDENCY
                                     020E 43000 ;	AP = ADDRESS OF FIRST LONG WORD TO DUMP
                                     020E 43100 ;
                                     020E 43200 ; OUTPUTS:
                                     020E 43300 ;
                                     020E 43400 ;	R0 = LOW BIT SET IF SUCCESSFUL
                                     020E 43500 ;	   = LOW BIT CLEAR IF CANNOT ACCESS THE ADDRESS IN AP
                                     020E 43600 ;	AP = ADDRESS OF NEXT LONG WORD NOT DUMPED
                                     020E 43700 ;	R4,R5,R8 ALTERED
                                     020E 43800 ;
                                     020E 43900 DUMP_ARRAY:
            54   00000000'9F     9E  020E 44000 	MOVAB	@#MMG$AL_SYSPCB,R4	;PCB ADDRESS IF SYSTEM SPACE
            5C            1F     E0  0215 44100 	BBS	#31,AP,20$		;BRANCH IF SYSTEM SPACE
                          07         0218       
            54   00000000'9F     D0  0219 44200 	MOVL	@#SCH$GL_CURPCB,R4	;PROCESS PCB FOR PROCESS SPAC
            55         64 A4     D0  0220 44300 20$:	MOVL	PCB$L_PHD(R4),R5	;CORRESPONDING PROCESS HEADER ADDRESS
                          1B     11  0224 44400 	BRB	70$			;LOOP 0 OR MORE TIMES
            50            09     9A  0226 44500 60$:	MOVZBL	#^A/	/,R0		;GET TAB CHARACTER
                          FDD4'  30  0229 44600 	BSBW	EXE$OUTCHAR		;OUTPUT TAB CHARACTER
            51            5C     D0  022C 44700 	MOVL	AP,R1			;GET ADDRESS OF LONGWORD TO CONVERT
                          FDCE'  30  022F 44800 	BSBW	EXE$OUTHEX		;CONVERT ADDRESS OF LONGWORD
                          FDCB'  30  0232 44900 	BSBW	EXE$OUTBLANK		;OUTPUT BLANK CHARACTER
                          FDC8'  30  0235 45000 	BSBW	EXE$OUTBLANK		;OUTPUT BLANK CHARACTER
            51            8C     D0  0238 45100 	MOVL	(AP)+,R1		;GET CONTENTS OF LONGWORD TO OUTPUT
                          FDC2'  30  023B 45200 	BSBW	EXE$OUTHEX		;OUTPUT CONVERTED HEX LONGWORD
                          FDBF'  30  023E 45300 	BSBW	EXE$OUTCRLF		;OUTPUT CARRIAGE RETURN, LINE FEED PAIR
            52            5C     D0  0241 45400 70$:	MOVL	AP,R2			;MAKE SURE THAT THIS ADDRESS CAN BE ACCESSED
                 00000000'9F     16  0244 45500 	JSB	@#MMG$PTEINDX		;GET LONG WORD INDEX TO SVAPTE IN R3
            31            50     E9  024A 45600 	BLBC	R0,100$			;BRANCH IF LENGTH VIOLATION
            53            6543   DE  024D 45700 	MOVAL	(R5)[R3],R3		;FORM SYSTEM VIRTUAL ADR OF PTE
                          63     D5  0251 45800 	TSTL	(R3)			;SEE IF PAGE TABLE ENTRY IS VALID
                          22     19  0253 45900 	BLSS	75$			;BRANCH IF IT IS
         02 A3       0440 8F     B3  0255 46000 	BITW	#<PTE$M_TYP1 ! PTE$M_TYP0>@-16,2(R3) ;IF TRANSITION PAGE
                          21     12  025B 46100 	BNEQ	100$			;BRANCH IF NOT
            15            00     EF  025D 46200 	EXTZV	#PTE$V_PFN,#PTE$S_PFN,(R3),R0 ;GET PAGE FRAME NUMBER
            50            63         0260       
                          1A     13  0262 46300 	BEQL	100$			;BRANCH IF DEMAND ZERO FORMAT
                 00000000'9F     DD  0264 46400 	PUSHL	@#PFN$AB_STATE		;ADDRESS OF STATE TABLE
                          00     ED  026A 46500 	CMPZV	#PFN$V_LOC,#PFN$S_LOC,-	;PAGE IS OK IN MEMORY UNLESS
            9E40          03         026C 46600 		@(SP)+[R0],#PFN$C_RDINPROG ;IT IS BEING READ IN
                          06         026F       
                          0C     13  0270 46700 	BEQL	100$
         03 A3         80 8F     88  0272 46800 	BISB	#<PTE$M_VALID>@-24,3(R3) ;JAM IT VALID AND USE IT
            AC            58     F4  0277 46900 75$:	SOBGEQ	R8,60$			;ANY MORE LONGWORDS TO CONVERT?
            50            01     D0  027A 47000 80$:	MOVL	#1,R0			;INDICATE SUCCESSFUL COMPLETION
                                 05  027D 47100 	RSB
                                     027E 47200 ;
                                     027E 47300 ; CANNOT ACCESS ADDRESS POINTED TO BY AP
                                     027E 47400 ;
                          50     D4  027E 47500 100$:	CLRL	R0
BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page  11
07              DUMP_ARRAY - SUBROUTINE TO DUMP AN ARRAY OF MEM                                                                  (1)

                                 05  0280 47600 	RSB
                                     0281 47700 ;
                                     0281 47800 ; SUBROUTINE TO BUILD HEADER AND DUMP GENERAL REGISTERS
                                     0281 47900 ;
                                     0281 48000  
                                 0000010C 48100 	.PSECT	$AEXENONPAGED
                                     010C 48200 BUILD_HEADER:				;
            52            04     C1  010C 48300 	ADDL3	#EMB$K_LENGTH,R2,R0	;CALCULATE ADDRESS TO STORE INFORMATION
                          50         010F       
            80            59     B0  0110 48400 	MOVW	R9,(R0)+		;INSERT TYPE OF ENTRY
            80       0000'CF     7D  0113 48500 	MOVQ	W^EXE$GQ_SYSTIME,(R0)+	;INSERT CURRENT TIME
            80            51     B0  0118 48600 	MOVW	R1,(R0)+		;INSERT ERROR SEQUENCE NUMBER
                          26     10  011B 48700 	BSBB	DUMP_REGISTERS		;INSERT PROCESSOR STACK POINTERS
            51            11     D0  011D 48800 	MOVL	#<EMB$L_BC_PSL+4-EMB$L_BC_R0>/4,R1 ;SET NUMBER OF REGISTERS
            80            8C     D0  0120 48900 10$:	MOVL	(AP)+,(R0)+		;INSERT GENERAL REGISTER
            FA            51     F5  0123 49000 	SOBGTR	R1,10$			;ANY MORE REGISTERS TO INSERT?
                                 05  0126 49100 	RSB				;
                                     0127 49200  
                                     0127 49300 ;
                                     0127 49400 ; SUBROUTINE TO DUMP SOFTWARE PCB
                                     0127 49500 ;
                                     0127 49600  
                                     0127 49700 DUMP_PCB:				;
            80            5D     D0  0127 49800 	MOVL	FP,(R0)+		;INSERT BUGCHECK CODE
            80       007C 8F     B0  012A 49900 	MOVW	#PCB$K_LENGTH,(R0)+	;INSERT LENGTH OF SOFTWARE PCB
                          52     DD  012F 50000 	PUSHL	R2			;SAVE ADDRESS OF ERROR MESSAGE BUFFER
            51       0000'CF     D0  0131 50100 	MOVL	W^SCH$GL_CURPCB,R1	;GET CURRENT PROCESS PCB ADDRESS
            61       007C 8F     28  0136 50200 	MOVC	#PCB$K_LENGTH,(R1),(R0)	;INSERT SOFTWARE PCB
                          60         013B       
                          52   8ED0  013C 50300 	POPL	R2			;RETRIEVE ADDRESS OF ERROR MESSAGE BUFFER
                          FEBE'  30  013F 50400 	BSBW	ERL$RELEASEMB		;RELEASE ERROR MESSAGE BUFFER
                                 05  0142 50500 RETURN:	RSB				;
                                     0143 50600  
                                     0143 50700 ;
                                     0143 50800 ; SUBROUTINE TO DUMP PROCESSOR REGISTERS UNTIL ESCAPE
                                     0143 50900 ;
                                     0143 51000  
                                     0143 51100 DUMP_REGISTERS:				;
            51            8B     98  0143 51200 	CVTBL	(R11)+,R1		;GET NEXT INTERNAL REGISTER NUMBER
                          FA     19  0146 51300 	BLSS	RETURN			;IF LSS ESCAPE
            80            51     DB  0148 51400 	MFPR	R1,(R0)+		;INSERT PROCESSOR REGISTER
                          F6     11  014B 51500 	BRB	DUMP_REGISTERS		;
                                     014D 51600 
BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page  12
07              WRITEDUMP - WRITE DATA TO DUMP FILE                                                                              (1)

                                     014D 51800 	.SBTTL	WRITEDUMP - WRITE DATA TO DUMP FILE
                                     014D 51900 ;
                                     014D 52000 ; WRITE DATA TO SYSTEM DUMP FILE
                                     014D 52100 ;
                                     014D 52200 ; INPUTS:
                                     014D 52300 ;	R5 - ADDRESS OF BOOTDRIVER VECTOR
                                     014D 52400 ;	R6 - ADDRESS OF RESTART PARAMETER BLOCK
                                     014D 52500 ;	R7 - BUFFER ADDRESS
                                     014D 52600 ;	R8 - SIZE OF BUFFER IN BYTES
                                     014D 52700 ;	R9 - SIZE OF DUMP FILE IN BLOCKS
                                     014D 52800 ;	R10 - LBN OF DUMP FILE (UPDATED)
                                     014D 52900 ;
                                     014D 53000 ; OUTPUTS:
                                     014D 53100 ;	R7 - UPDATED
                                     014D 53200 ;	R8 - UPDATED
                                     014D 53300 ; 	R9 - UPDATED
                                     014D 53400 ;	R10 - UPDATED
                                     014D 53500 ;
                           0000FE00  014D 53600 	IOSIZE=127*512			;MAXIMUM TRANSFER SIZE
                                 00000281 53700 	.PSECT	Z$INIT__BUGA,PAGE	;FIRST BUGCHECK PSECT
                                     0281 53800 WRITEDUMP:				;
            53       FE00 8F     3C  0281 53900 	MOVZWL	#IOSIZE,R3		;ASSUME MAXIMUM
            58            53     D1  0286 54000 	CMPL	R3,R8			;CHECK AGAINST REQUESTED SIZE
                          03     15  0289 54100 	BLEQ	10$			;LESS THAN TOTAL REQUEST
            53            58     D0  028B 54200 	MOVL	R8,R3			;ELSE LIMIT TO REQUEST SIZE
            52       01FF C3     9E  028E 54300 10$:	MOVAB	511(R3),R2		;ROUND TRANSFER SIZE TO PAGE BOUND
            52         F7 8F     78  0293 54400 	ASHL	#-9,R2,R2		;AND CONVERT TO PAGE COUNT
                          52         0297       
            59            52     D1  0298 54500 	CMPL	R2,R9			;CHECK FOR OVER END OF FILE
                          07     15  029B 54600 	BLEQ	20$			;CONTINUE IF NOT
            52            59     D0  029D 54700 	MOVL	R9,R2			;ELSE LIMIT TO FILE SIZE
            52            09     78  02A0 54800 	ASHL	#9,R2,R3		;CONVERT BLOCK COUNT TO BYTE COUNT
                          53         02A3       
                          56     DD  02A4 54900 20$:	PUSHL	R6			;SET ADDRESS OF RPB
            01            1F     EF  02A6 55000 	EXTZV	#VA$V_SYSTEM,#1,R7,-(SP);USE SYSTEM BIT AS VIRTUAL FLAG
            7E            57         02A9       
                          00'    DD  02AB 55100 	PUSHL	S^#IO$_WRITELBLK	;SET FUNCTION CODE
                          5A     DD  02AD 55200 	PUSHL	R10			;LBN IN DUMP FILE
                          53     DD  02AF 55300 	PUSHL	R3			;SIZE OF BUFFER IN BYTES
                          57     DD  02B1 55400 	PUSHL	R7			;ADDRESS OF BUFFER
         00 B545          06     FB  02B3 55500 	CALLS	#6,@(R5)[R5]		;CALL BOOTDRIVR
            57            53     C0  02B8 55600 	ADDL	R3,R7			;UPDATE BUFFER ADDRESS
            5A            52     C0  02BB 55700 	ADDL	R2,R10			;UPDATE LBN
            59            52     C2  02BE 55800 	SUBL	R2,R9			;AND SIZE OF FILE
                          05     15  02C1 55900 	BLEQ	30$			;DONE IF END OF FILE
            58            53     C2  02C3 56000 	SUBL	R3,R8			;UPDATE BYTE COUNT
                          B9     14  02C6 56100 	BGTR	WRITEDUMP		;RECYCLE IF NOT COMPLETE
                                 05  02C8 56200 30$:	RSB				;
                                     02C9 56300 
                                     02C9 56400 	.END
BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page  13
SYMBOL TABLE                                                                                                                     (1)

ADPINIT          000000C3 R     07   EMB$K_SS       = 00000027            EMB$L_CR_R8      00000044            
BIT...         = 00000020            EMB$K_TS       = 00000026            EMB$L_CR_R9      00000048            
BUG$FATAL        00000000 RG    04   EMB$K_UBC      = 00000070            EMB$L_CR_SBIER   000000AC            
BUG$T_MESSAGES   ********   X   08   EMB$K_UI       = 00000061            EMB$L_CR_SBIFS   000000A0            
BUGEND           00000000 R     05   EMB$K_VD       = 00000041            EMB$L_CR_SBIMT   000000A8            
BUILD_HEADER     0000010C R     07   EMB$K_VM       = 00000040            EMB$L_CR_SBIS    000000B4            
CR             = 0000000D            EMB$K_WS       = 00000024            EMB$L_CR_SBISC   000000A4            
CTL$AL_STACK     ********   X   08   EMB$L_BC_AP      00000054            EMB$L_CR_SBITA   000000B0            
DUMP_ARRAY       0000020E R     08   EMB$L_BC_CODE    00000068            EMB$L_CR_SBR     00000078            
DUMP_PCB         00000127 R     07   EMB$L_BC_ESP     00000014            EMB$L_CR_SCBB    00000084            
DUMP_REGISTERS   00000143 R     07   EMB$L_BC_FP      00000058            EMB$L_CR_SISR    0000008C            
EMB$B_BC_PCB     0000006E            EMB$L_BC_ISP     00000020            EMB$L_CR_SLR     0000007C            
EMB$B_BUFIND     00000002            EMB$L_BC_KSP     00000010            EMB$L_CR_SP      0000005C            
EMB$B_DEVCLS     00000005            EMB$L_BC_PC      00000060            EMB$L_CR_SSP     00000018            
EMB$B_DEVTYP     00000004            EMB$L_BC_PSL     00000064            EMB$L_CR_TODR    00000098            
EMB$B_VALID      00000003            EMB$L_BC_R0      00000024            EMB$L_CR_USP     0000001C            
EMB$C_AW       = 00000007            EMB$L_BC_R1      00000028            EMB$Q_BC_TIME    00000006            
EMB$C_BC_LENGTH  0000006E            EMB$L_BC_R10     0000004C            EMB$Q_CR_TIME    00000006            
EMB$C_BE       = 00000004            EMB$L_BC_R11     00000050            EMB$Q_HD_TIME    00000006            
EMB$C_CR       = 00000025            EMB$L_BC_R2      0000002C            EMB$W_BC_ENTRY   00000004            
EMB$C_CR_LENGTH  000000FA            EMB$L_BC_R3      00000030            EMB$W_BC_ERRSEQ  0000000E            
EMB$C_CS       = 00000020            EMB$L_BC_R4      00000034            EMB$W_BC_PCBSZ   0000006C            
EMB$C_DE       = 00000001            EMB$L_BC_R5      00000038            EMB$W_CR_ENTRY   00000004            
EMB$C_DT       = 00000060            EMB$L_BC_R6      0000003C            EMB$W_CR_ERRSEQ  0000000E            
EMB$C_HE       = 00000008            EMB$L_BC_R7      00000040            EMB$W_CR_PCBSZ   000000F8            
EMB$C_LENGTH     00000004            EMB$L_BC_R8      00000044            EMB$W_HD_ENTRY   00000004            
EMB$C_MC       = 00000002            EMB$L_BC_R9      00000048            EMB$W_HD_ERRSEQ  0000000E            
EMB$C_NF       = 00000023            EMB$L_BC_SP      0000005C            EMB$W_SIZE       00000000            
EMB$C_NM       = 0000002A            EMB$L_BC_SSP     00000018            ERL$ALLOCEMB     ********   X   07   
EMB$C_OM       = 00000029            EMB$L_BC_USP     0000001C            ERL$AL_BUFADDR   ********   X   08   
EMB$C_SA       = 00000005            EMB$L_CR_ACCS    0000009C            ERL$GL_SEQUENCE  ********   X   08   
EMB$C_SBC      = 00000028            EMB$L_CR_AP      00000054            ERL$RELEASEMB    ********   X   07   
EMB$C_SE       = 00000006            EMB$L_CR_ASTLVL  00000088            EXE$ACVIOLAT     ********   X   07   
EMB$C_SS       = 00000027            EMB$L_CR_CODE    000000F4            EXE$AL_STACKS    ********   X   08   
EMB$C_TS       = 00000026            EMB$L_CR_ESP     00000014            EXE$BUG_CHECK    0000001A RG    07   
EMB$C_UBC      = 00000070            EMB$L_CR_FP      00000058            EXE$GL_DMPCHK    ********   X   08   
EMB$C_UI       = 00000061            EMB$L_CR_ICCS    00000090            EXE$GL_FLAGS     ********   X   07   
EMB$C_VD       = 00000041            EMB$L_CR_ICR     00000094            EXE$GL_INTSTK    ********   X   08   
EMB$C_VM       = 00000040            EMB$L_CR_ISP     00000020            EXE$GL_RPB       ********   X   07   
EMB$C_WS       = 00000024            EMB$L_CR_KSP     00000010            EXE$GQ_STAREXE   ********   X   07   
EMB$K_AW       = 00000007            EMB$L_CR_P0BR    00000068            EXE$GQ_SYSDMP    ********   X   08   
EMB$K_BC_LENGTH  0000006E            EMB$L_CR_P0LR    0000006C            EXE$GQ_SYSTIME   ********   X   07   
EMB$K_BE       = 00000004            EMB$L_CR_P1BR    00000070            EXE$OUTBLANK     ********   X   08   
EMB$K_CR       = 00000025            EMB$L_CR_P1LR    00000074            EXE$OUTCHAR      ********   X   08   
EMB$K_CR_LENGTH  000000FA            EMB$L_CR_PC      00000060            EXE$OUTCRLF      ********   X   08   
EMB$K_CS       = 00000020            EMB$L_CR_PCBB    00000080            EXE$OUTCSTRING   ********   X   08   
EMB$K_DE       = 00000001            EMB$L_CR_PSL     00000064            EXE$OUTHEX       ********   X   08   
EMB$K_DT       = 00000060            EMB$L_CR_R0      00000024            EXE$V_BUGDUMP    ********   X   08   
EMB$K_HE       = 00000008            EMB$L_CR_R1      00000028            EXE$V_BUGREBOOT  ********   X   08   
EMB$K_LENGTH     00000004            EMB$L_CR_R10     0000004C            EXE$V_FATAL_BUG  ********   X   07   
EMB$K_MC       = 00000002            EMB$L_CR_R11     00000050            FATALBUG         00000000 R     08   
EMB$K_NF       = 00000023            EMB$L_CR_R2      0000002C            FATAL_SPSAV      00000000 R     03   
EMB$K_NM       = 0000002A            EMB$L_CR_R3      00000030            GBL...         = 00000000            
EMB$K_OM       = 00000029            EMB$L_CR_R4      00000034            IFD$C_LENGTH     00000014            
EMB$K_SA       = 00000005            EMB$L_CR_R5      00000038            IFD$K_LENGTH     00000014            
EMB$K_SBC      = 00000028            EMB$L_CR_R6      0000003C            IFD$L_CMKFIADR   0000000C            
EMB$K_SE       = 00000006            EMB$L_CR_R7      00000040            IFD$M_EXEONLY  = 00000001            
BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page  14
SYMBOL TABLE                                                                                                                     (1)

IFD$V_EXEONLY  = 00000000            MBA$V_CR_INIT  = 00000000            PCB$L_PQB        0000004C            
IFD$W_CHAN       00000008            MBA$V_CSR_ADCOD= 00000000            PCB$L_SQBL       00000004            
IFD$W_CMCHAN     0000000A            MBA$V_CSR_MT   = 0000001B            PCB$L_SQFL       00000000            
IFD$W_FILNAMOFF  00000002            MBA$V_CSR_OT   = 00000015            PCB$L_STS        00000028            
IFD$W_FLAGS      00000010            MBA$V_CSR_PD   = 00000017            PCB$L_UIC        00000020            
IFD$W_SIZE       00000000            MBA$V_CSR_PE   = 0000001F            PCB$L_WSSWP      00000024            
IMGNAM_MSG       00000037 R     06   MBA$V_CSR_PU   = 00000016            PCB$L_WTIME      0000002C            
INI$BRK          ********   X   08   MBA$V_CSR_URD  = 0000001D            PCB$T_LNAME      0000006C            
IO$_READLBLK     ********   X   07   MBA$V_CSR_WS   = 0000001E            PCB$V_ASTPEN   = 00000011            
IO$_WRITELBLK    ********   X   08   MBA$V_CSR_XMFLT= 0000001A            PCB$V_BATCH    = 0000000E            
IOSIZE         = 0000FE00            MBA$V_ERB_UNIT = 00000007            PCB$V_DELPEN   = 00000001            
LF             = 0000000A            MBA$V_SR_ATTN  = 00000010            PCB$V_FORCPEN  = 00000002            
MBA$L_AS         00000410            MBA$V_SR_CRD   = 0000001D            PCB$V_HIBER    = 00000013            
MBA$L_BCR        00000010            MBA$V_SR_DLT   = 0000000B            PCB$V_INQUAN   = 00000003            
MBA$L_CR         00000004            MBA$V_SR_DTABT = 0000000C            PCB$V_LOGIN    = 00000014            
MBA$L_CSR        00000000            MBA$V_SR_DTBUSY= 0000001F            PCB$V_NETWRK   = 00000015            
MBA$L_ERB        00000400            MBA$V_SR_DTCOMP= 0000000D            PCB$V_NOACNT   = 0000000F            
MBA$L_MAP        00000800            MBA$V_SR_ERCONF= 00000003            PCB$V_NODELET  = 00000017            
MBA$L_SR         00000008            MBA$V_SR_INVMAP= 00000004            PCB$V_PHDRES   = 00000012            
MBA$L_VAR        0000000C            MBA$V_SR_ISTO  = 00000001            PCB$V_PSWAPM   = 00000004            
MBA$M_CR_ABORT = 00000002            MBA$V_SR_MAPPE = 00000005            PCB$V_PWRAST   = 00000016            
MBA$M_CR_IE    = 00000004            MBA$V_SR_MBEXC = 00000007            PCB$V_RES      = 00000000            
MBA$M_CR_INIT  = 00000001            MBA$V_SR_MCPE  = 00000011            PCB$V_RESPEN   = 00000005            
MBA$M_CSR_MT   = 08000000            MBA$V_SR_MDPE  = 00000006            PCB$V_SSFEXC   = 00000006            
MBA$M_CSR_OT   = 00200000            MBA$V_SR_MXF   = 00000008            PCB$V_SSFEXCE  = 00000007            
MBA$M_CSR_PD   = 00800000            MBA$V_SR_NED   = 00000012            PCB$V_SSFEXCS  = 00000008            
MBA$M_CSR_PE   = 80000000            MBA$V_SR_NRCONF= 0000001E            PCB$V_SSFEXCU  = 00000009            
MBA$M_CSR_PU   = 00400000            MBA$V_SR_PGE   = 00000013            PCB$V_SSRWAIT  = 0000000A            
MBA$M_CSR_URD  = 20000000            MBA$V_SR_RDS   = 00000002            PCB$V_SUSPEN   = 0000000B            
MBA$M_CSR_WS   = 40000000            MBA$V_SR_RDTO  = 00000000            PCB$V_SWPVBN   = 00000010            
MBA$M_CSR_XMFLT= 04000000            MBA$V_SR_WCKLWR= 00000009            PCB$V_WAKEPEN  = 0000000C            
MBA$M_ERROR    = 000E1FFF            MBA$V_SR_WCKUPR= 0000000A            PCB$V_WALL     = 0000000D            
MBA$M_SR_ATTN  = 00010000            MMG$AL_SYSPCB    ********   X   08   PCB$W_APTCNT     00000034            
MBA$M_SR_CRD   = 20000000            MMG$IMGHDRBUF    ********   X   08   PCB$W_ASTCNT     0000003C            
MBA$M_SR_DLT   = 00000800            MMG$PTEINDX      ********   X   08   PCB$W_BIOCNT     0000003E            
MBA$M_SR_DTABT = 00001000            MSGCTRL          0000004C R     06   PCB$W_BIOLM      00000040            
MBA$M_SR_DTBUSY= 80000000            MSGCTRL1         00000070 R     06   PCB$W_BYTCNT     00000042            
MBA$M_SR_DTCOMP= 00002000            NODUMP           000001F5 R     08   PCB$W_BYTLM      00000068            
MBA$M_SR_ERCONF= 00000008            PCB$B_ASTACT     0000000C            PCB$W_DIOCNT     00000044            
MBA$M_SR_INVMAP= 00000010            PCB$B_ASTEN      0000000D            PCB$W_DIOLM      00000046            
MBA$M_SR_ISTO  = 00000002            PCB$B_PRI        0000000B            PCB$W_FILCNT     00000048            
MBA$M_SR_MAPPE = 00000020            PCB$B_PRIB       00000033            PCB$W_GPGCNT     00000038            
MBA$M_SR_MBEXC = 00000080            PCB$B_TYPE       0000000A            PCB$W_GRP        00000022            
MBA$M_SR_MCPE  = 00020000            PCB$B_WEFC       00000032            PCB$W_MEM        00000020            
MBA$M_SR_MDPE  = 00000040            PCB$C_LENGTH     0000007C            PCB$W_MTXCNT     0000000E            
MBA$M_SR_MXF   = 00000100            PCB$K_LENGTH     0000007C            PCB$W_PPGCNT     0000003A            
MBA$M_SR_NED   = 00040000            PCB$L_ASTQBL     00000014            PCB$W_PRCCNT     0000006A            
MBA$M_SR_NRCONF= 40000000            PCB$L_ASTQFL     00000010            PCB$W_SIZE       00000008            
MBA$M_SR_PGE   = 00080000            PCB$L_EFC2P      00000058            PCB$W_STATE      00000030            
MBA$M_SR_RDS   = 00000004            PCB$L_EFC3P      0000005C            PCB$W_TMBU       00000036            
MBA$M_SR_RDTO  = 00000001            PCB$L_EFCS       00000050            PCB$W_TQCNT      0000004A            
MBA$M_SR_WCKLWR= 00000200            PCB$L_EFCU       00000054            PFN$AB_STATE     ********   X   08   
MBA$M_SR_WCKUPR= 00000400            PCB$L_EFWM       0000004C            PFN$C_ACTIVE   = 00000007            
MBA$S_CSR_ADCOD= 00000008            PCB$L_OWNER      0000001C            PFN$C_BADPAGLST= 00000002            
MBA$S_ERB_UNIT = 00000003            PCB$L_PHD        00000064            PFN$C_FREPAGLST= 00000000            
MBA$V_CR_ABORT = 00000001            PCB$L_PHYPCB     00000018            PFN$C_GBLWRT   = 00000003            
MBA$V_CR_IE    = 00000002            PCB$L_PID        00000060            PFN$C_GLOBAL   = 00000002            
BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page  15
SYMBOL TABLE                                                                                                                     (1)

PFN$C_GPGTBL   = 00000005            PR$_SBIS       = 00000031            PSL$M_IV       = 00000020            
PFN$C_MFYPAGLST= 00000001            PR$_SBISC      = 00000032            PSL$M_PRVMOD   = 00C00000            
PFN$C_PPGTBL   = 00000004            PR$_SBITA      = 00000035            PSL$M_SAFBITS  = 000037FF            
PFN$C_PROCESS  = 00000000            PR$_SBR        = 0000000C            PSL$M_TBIT     = 00000010            
PFN$C_RDERR    = 00000004            PR$_SCBB       = 00000011            PSL$M_TP       = 40000000            
PFN$C_RDINPROG = 00000006            PR$_SID        = 0000003E            PSL$S_CURMOD   = 00000002            
PFN$C_RELPEND  = 00000003            PR$_SIRR       = 00000014            PSL$S_IPL      = 00000005            
PFN$C_SYSTEM   = 00000001            PR$_SISR       = 00000015            PSL$S_PRVMOD   = 00000002            
PFN$C_WRTINPROG= 00000005            PR$_SLR        = 0000000D            PSL$V_CM       = 0000001F            
PFN$M_BADPAG   = 00000020            PR$_SSP        = 00000002            PSL$V_CURMOD   = 00000018            
PFN$M_BAK      = 007FFFFF            PR$_TBIA       = 00000039            PSL$V_DV       = 00000007            
PFN$M_COLLISION= 00000010            PR$_TBIS       = 0000003A            PSL$V_FPD      = 0000001B            
PFN$M_DELCON   = 00000010            PR$_TODR       = 0000001B            PSL$V_FU       = 00000006            
PFN$M_GBLBAK   = 00800000            PR$_TXCS       = 00000022            PSL$V_IPL      = 00000010            
PFN$M_LOC      = 00000007            PR$_TXDB       = 00000023            PSL$V_IS       = 0000001A            
PFN$M_MODIFY   = 00000080            PR$_USP        = 00000003            PSL$V_IV       = 00000005            
PFN$M_PAGTYP   = 00000007            PR$_WCSA       = 0000002C            PSL$V_PRVMOD   = 00000016            
PFN$M_PGFLX    = FF000000            PR$_WCSD       = 0000002D            PSL$V_TBIT     = 00000004            
PFN$M_RPTEVT   = 00000040            PRCNAM_MSG       00000000 R     06   PSL$V_TP       = 0000001E            
PFN$S_BAK      = 00000017            PRCPRV_MSG       0000001A R     06   PTE$C_EOWN     = 00800000            
PFN$S_GBLBAK   = 00000001            PRV$V_ALLSPOOL = 00000004            PTE$C_ER       = 38000000            
PFN$S_LOC      = 00000003            PRV$V_BUGCHK   = 00000017            PTE$C_ERKW     = 30000000            
PFN$S_PAGTYP   = 00000003            PRV$V_CMEXEC   = 00000001            PTE$C_EW       = 28000000            
PFN$S_PGFLX    = 00000008            PRV$V_CMKRNL   = 00000000            PTE$C_KOWN     = 00000000            
PFN$V_BADPAG   = 00000005            PRV$V_DETACH   = 00000005            PTE$C_KR       = 18000000            
PFN$V_BAK      = 00000000            PRV$V_DIAGNOSE = 00000006            PTE$C_KW       = 10000000            
PFN$V_COLLISION= 00000004            PRV$V_EXQUOTA  = 00000013            PTE$C_NA       = 00000000            
PFN$V_DELCON   = 00000004            PRV$V_GROUP    = 00000008            PTE$C_SOWN     = 01000000            
PFN$V_GBLBAK   = 00000017            PRV$V_GRPNAM   = 00000003            PTE$C_SR       = 58000000            
PFN$V_LOC      = 00000000            PRV$V_LOG_IO   = 00000007            PTE$C_SREW     = 48000000            
PFN$V_MODIFY   = 00000007            PRV$V_MOUNT    = 00000011            PTE$C_SRKW     = 50000000            
PFN$V_PAGTYP   = 00000000            PRV$V_NETMBX   = 00000014            PTE$C_SW       = 40000000            
PFN$V_PGFLX    = 00000018            PRV$V_NOACNT   = 00000009            PTE$C_UOWN     = 01800000            
PFN$V_RPTEVT   = 00000006            PRV$V_OPER     = 00000012            PTE$C_UR       = 78000000            
PR$_ACCR       = 00000029            PRV$V_PHY_IO   = 00000016            PTE$C_UREW     = 68000000            
PR$_ACCS       = 00000028            PRV$V_PRMCEB   = 0000000A            PTE$C_URKW     = 70000000            
PR$_ASTLVL     = 00000013            PRV$V_PRMGBL   = 00000018            PTE$C_URSW     = 60000000            
PR$_ESP        = 00000001            PRV$V_PRMMBX   = 0000000B            PTE$C_UW       = 20000000            
PR$_ICCS       = 00000018            PRV$V_PSWAPM   = 0000000C            PTE$M_CRF      = 00010000            
PR$_ICR        = 0000001A            PRV$V_SETPRI   = 0000000D            PTE$M_DZRO     = 00020000            
PR$_IPL        = 00000012            PRV$V_SETPRV   = 0000000E            PTE$M_GPTX     = 003FFFFF            
PR$_ISP        = 00000004            PRV$V_SYSGBL   = 00000019            PTE$M_MODIFY   = 04000000            
PR$_KSP        = 00000000            PRV$V_SYSNAM   = 00000002            PTE$M_OWN      = 01800000            
PR$_MAPEN      = 00000038            PRV$V_TMPMBX   = 0000000F            PTE$M_PFN      = 001FFFFF            
PR$_NICR       = 00000019            PRV$V_VOLPRO   = 00000015            PTE$M_PGFLVB   = 003FFFFF            
PR$_P0BR       = 00000008            PRV$V_WORLD    = 00000010            PTE$M_PROT     = 78000000            
PR$_P0LR       = 00000009            PSL$C_EXEC     = 00000001            PTE$M_TYP0     = 00400000            
PR$_P1BR       = 0000000A            PSL$C_KERNEL   = 00000000            PTE$M_TYP1     = 04000000            
PR$_P1LR       = 0000000B            PSL$C_SUPER    = 00000002            PTE$M_VALID    = 80000000            
PR$_PCBB       = 00000010            PSL$C_USER     = 00000003            PTE$M_WRT      = 00040000            
PR$_PME        = 0000003D            PSL$M_CM       = 80000000            PTE$S_GPTX     = 00000016            
PR$_RXCS       = 00000020            PSL$M_CURMOD   = 03000000            PTE$S_OWN      = 00000002            
PR$_RXDB       = 00000021            PSL$M_DV       = 00000080            PTE$S_PFN      = 00000015            
PR$_SBIER      = 00000034            PSL$M_FPD      = 08000000            PTE$S_PGFLVB   = 00000016            
PR$_SBIFS      = 00000030            PSL$M_FU       = 00000040            PTE$S_PROT     = 00000004            
PR$_SBIMT      = 00000033            PSL$M_IPL      = 001F0000            PTE$S_STX      = 00000010            
PR$_SBIQC      = 00000036            PSL$M_IS       = 04000000            PTE$V_CRF      = 00000010            
BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page  16
SYMBOL TABLE                                                                                                                     (1)

PTE$V_DZRO     = 00000011            RPB$V_HALT     = 00000009            SS$_DIRFULL    = 00000860            
PTE$V_GPTX     = 00000000            RPB$V_HEADER   = 00000006            SS$_DRVERR     = 0000008C            
PTE$V_MODIFY   = 0000001A            RPB$V_INIBPT   = 00000002            SS$_DUPFILENAME= 00000868            
PTE$V_OWN      = 00000017            RPB$V_NOPFND   = 0000000A            SS$_DUPLNAM    = 00000094            
PTE$V_PFN      = 00000000            RPB$V_NOTEST   = 00000007            SS$_ENDOFFILE  = 00000870            
PTE$V_PGFLVB   = 00000000            RPB$V_SOLICT   = 00000008            SS$_ENDOFTAPE  = 00000878            
PTE$V_PROT     = 0000001B            RPB$W_UNIT       00000064            SS$_ENDOFUSRLBL= 00000970            
PTE$V_STX      = 00000000            SCH$GL_CURPCB    ********   X   07   SS$_EXQUOTA    = 0000001C            
PTE$V_TYP0     = 00000016            SS$_ABORT      = 0000002C            SS$_EXTIDXFILE = 00000880            
PTE$V_TYP1     = 0000001A            SS$_ACCONFLICT = 00000800            SS$_FCPREADERR = 00000888            
PTE$V_VALID    = 0000001F            SS$_ACCVIO     = 0000000C            SS$_FCPREPSTN  = 00000988            
PTE$V_WRT      = 00000012            SS$_ACPVAFUL   = 000002FC            SS$_FCPREWNDERR= 00000890            
REBOOT           0000015C R     08   SS$_ARTRES     = 00000474            SS$_FCPSPACERR = 00000898            
REGTAB           00000000 R     07   SS$_ASTFLT     = 0000040C            SS$_FCPWRITERR = 000008A0            
RETURN           00000142 R     07   SS$_BADATTRIB  = 00000034            SS$_FILACCERR  = 0000009C            
RPB$B_CONFREG    00000090            SS$_BADCHKSUM  = 00000808            SS$_FILALRACC  = 000000A4            
RPB$B_DEVTYP     00000066            SS$_BADESCAPE  = 0000003C            SS$_FILELOCKED = 000008A8            
RPB$B_HDRPGCNT   000000A0            SS$_BADFILEHDR = 00000810            SS$_FILENUMCHK = 000008B0            
RPB$B_SLAVE      00000067            SS$_BADFILENAME= 00000818            SS$_FILESEQCHK = 000008B8            
RPB$C_LENGTH     000000BC            SS$_BADFILEVER = 00000820            SS$_FILESTRUCT = 000008C0            
RPB$K_LENGTH     000000BC            SS$_BADIMGHDR  = 00000044            SS$_FILNOTACC  = 000000AC            
RPB$L_ADPPHY     0000005C            SS$_BADIRECTORY= 00000828            SS$_FILNOTCNTG = 000002AC            
RPB$L_ADPVIR     00000060            SS$_BADPARAM   = 00000014            SS$_FILNOTEXP  = 000000B4            
RPB$L_BASE       00000000            SS$_BADSTACK   = 000002B4            SS$_FLTDIV     = 00000494            
RPB$L_BOOTR0     0000001C            SS$_BEGOFFILE  = 00000938            SS$_FLTOVF     = 0000048C            
RPB$L_BOOTR1     00000020            SS$_BLOCKCNTERR= 00000940            SS$_FLTUND     = 0000049C            
RPB$L_BOOTR2     00000024            SS$_BREAK      = 00000414            SS$_FORMAT     = 000000BC            
RPB$L_BOOTR3     00000028            SS$_BUFBYTALI  = 0000030C            SS$_GPTFULL    = 000000C4            
RPB$L_BOOTR4     0000002C            SS$_BUFFEROVF  = 00000601            SS$_GSDFULL    = 000000CC            
RPB$L_BOOTR5     00000030            SS$_BUGCHECK   = 000002A4            SS$_HANGUP     = 000002CC            
RPB$L_CHKSUM     00000008            SS$_CANCEL     = 00000830            SS$_HEADERFULL = 000008C8            
RPB$L_CSRPHY     00000054            SS$_CHANINTLK  = 0000004C            SS$_IDXFILEFULL= 000008D0            
RPB$L_CSRVIR     00000058            SS$_CLIFRCEXT  = 00000980            SS$_ILLBLKNUM  = 000000DC            
RPB$L_FILLBN     0000003C            SS$_CMODSUPR   = 0000041C            SS$_ILLCNTRFUNC= 000000E4            
RPB$L_FILSIZ     00000040            SS$_CMODUSER   = 00000424            SS$_ILLEFC     = 000000EC            
RPB$L_HALTCODE   00000018            SS$_COMPAT     = 0000042C            SS$_ILLIOFUNC  = 000000F4            
RPB$L_HALTPC     00000010            SS$_CONTINUE   = 00000001            SS$_ILLLBLAST  = 00000968            
RPB$L_HALTPSL    00000014            SS$_CONTROLC   = 00000651            SS$_ILLPAGCNT  = 000000FC            
RPB$L_IOVEC      00000034            SS$_CONTROLO   = 00000609            SS$_ILLSEQOP   = 000002DC            
RPB$L_IOVECSZ    00000038            SS$_CONTROLY   = 00000611            SS$_ILLSER     = 00000104            
RPB$L_ISP        000000A4            SS$_CREATED    = 00000619            SS$_ILLUSRLBLRD= 00000958            
RPB$L_PCBB       000000A8            SS$_CTRLERR    = 00000054            SS$_ILLUSRLBLWT= 00000960            
RPB$L_PFNCNT     0000004C            SS$_DATACHECK  = 0000005C            SS$_INCVOLLABEL= 0000010C            
RPB$L_RESTART    00000004            SS$_DATAOVERUN = 00000838            SS$_INSFARG    = 00000114            
RPB$L_RSTRTFLG   0000000C            SS$_DEBUG      = 0000046C            SS$_INSFMEM    = 00000124            
RPB$L_SBR        000000AC            SS$_DECOVF     = 000004A4            SS$_INSFRAME   = 0000012C            
RPB$L_SCBB       000000B0            SS$_DEVACTIVE  = 000002C4            SS$_INSFWSL    = 0000011C            
RPB$L_SISR       000000B4            SS$_DEVALLOC   = 00000840            SS$_INTDIV     = 00000484            
RPB$L_SLR        000000B8            SS$_DEVALRALLOC= 00000641            SS$_INTOVF     = 0000047C            
RPB$L_SVASPT     00000050            SS$_DEVASSIGN  = 00000848            SS$_IVADDR     = 00000134            
RPB$Q_PFNMAP     00000044            SS$_DEVFOREIGN = 00000064            SS$_IVCHAN     = 0000013C            
RPB$T_FILE       00000068            SS$_DEVICEFULL = 00000850            SS$_IVCHNLSEC  = 0000026C            
RPB$V_BBLOCK   = 00000003            SS$_DEVMOUNT   = 0000006C            SS$_IVDEVNAM   = 00000144            
RPB$V_BOOBPT   = 00000005            SS$_DEVNOTALLOC= 00000858            SS$_IVGSDNAM   = 0000014C            
RPB$V_CONV     = 00000000            SS$_DEVNOTMBX  = 00000074            SS$_IVLOGNAM   = 00000154            
RPB$V_DEBUG    = 00000001            SS$_DEVNOTMOUNT= 0000007C            SS$_IVLOGTAB   = 0000015C            
RPB$V_DIAG     = 00000004            SS$_DEVOFFLINE = 00000084            SS$_IVPROTECT  = 000002F4            
BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page  17
SYMBOL TABLE                                                                                                                     (1)

SS$_IVQUOTAL   = 00000164            SS$_RESIGNAL   = 00000918            STS$V_MSG_NO   = 00000003            
SS$_IVSECFLG   = 0000016C            SS$_RESULTOVF  = 00000214            STS$V_SEVERITY = 00000000            
SS$_IVSECIDCTL = 000002E4            SS$_ROPRAND    = 00000454            STS$V_SUCCESS  = 00000000            
SS$_IVSSRQ     = 00000174            SS$_SECTBLFUL  = 0000021C            SYS$EXIT         ********   X   07   
SS$_IVSTSFLG   = 0000017C            SS$_SSFAIL     = 0000045C            SYS$GQ_VERSION   ********   X   08   
SS$_IVTIME     = 00000184            SS$_SUBRNG     = 000004AC            UBA$L_BRRVR      00000030            
SS$_LCKPAGFUL  = 000000D4            SS$_SUPERSEDE  = 00000631            UBA$L_BRSVR      00000020            
SS$_LENVIO     = 0000018C            SS$_TAPEPOSLOST= 00000224            UBA$L_CR         00000004            
SS$_LKWSETFUL  = 00000194            SS$_TBIT       = 00000464            UBA$L_CSR        00000000            
SS$_MBFULL     = 000008D8            SS$_TIMEOUT    = 0000022C            UBA$L_DCR        0000000C            
SS$_MBTOOSML   = 0000019C            SS$_TOOMANYVER = 00000990            UBA$L_DPR        00000040            
SS$_MCHECK     = 000002BC            SS$_TOOMUCHDATA= 0000029C            UBA$L_FMER       00000010            
SS$_MEDOFL     = 000001A4            SS$_UNASEFC    = 00000234            UBA$L_FUBAR      00000014            
SS$_MSGNOTFND  = 00000621            SS$_UNSAFE     = 0000023C            UBA$L_MAP        00000800            
SS$_MTLBLLONG  = 00000304            SS$_UNWIND     = 00000920            UBA$L_SR         00000008            
SS$_MUSTCLOSEFL= 00000948            SS$_UNWINDING  = 00000928            UBA$M_BRRVR_AIR= 80000000            
SS$_NOAQB      = 00000314            SS$_VASFULL    = 00000244            UBA$M_CR_ARLVL = 00000180            
SS$_NODATA     = 000001AC            SS$_VECINUSE   = 0000024C            UBA$M_CR_BRIE  = 00000020            
SS$_NOHANDLER  = 000008F8            SS$_VOLINV     = 00000254            UBA$M_CR_CNFIE = 00000004            
SS$_NOHOMEBLK  = 000008E0            SS$_WAITUSRLBL = 00000950            UBA$M_CR_IFSIE = 00000040            
SS$_NOIOCHAN   = 000001B4            SS$_WASCLR     = 00000001            UBA$M_CR_INIT  = 00000001            
SS$_NOLINKS    = 0000027C            SS$_WASECC     = 00000639            UBA$M_CR_SUEFIE= 00000008            
SS$_NOLOGNAM   = 000001BC            SS$_WASSET     = 00000009            UBA$M_CR_UBPF  = 00000002            
SS$_NOMBX      = 00000274            SS$_WRITLCK    = 0000025C            UBA$M_CR_USEFIE= 00000010            
SS$_NOMOREFILES= 00000930            SS$_WRONGACP   = 0000031C            UBA$M_CSR_IS   = 10000000            
SS$_NONEXDRV   = 000001C4            STS$K_ERROR    = 00000002            UBA$M_CSR_MT   = 08000000            
SS$_NONEXPR    = 000008E8            STS$K_INFO     = 00000003            UBA$M_CSR_OT   = 00200000            
SS$_NONLOCAL   = 000008F0            STS$K_SEVERE   = 00000004            UBA$M_CSR_PD   = 00800000            
SS$_NOPRIV     = 00000024            STS$K_SUCCESS  = 00000001            UBA$M_CSR_PE   = 80000000            
SS$_NORMAL     = 00000001            STS$K_WARNING  = 00000000            UBA$M_CSR_PU   = 00400000            
SS$_NOSIGNAL   = 00000900            STS$M_CODE     = 00007FF8            UBA$M_CSR_UBIC = 00010000            
SS$_NOSOLICIT  = 00000284            STS$M_COND_ID  = 0FFFFFF8            UBA$M_CSR_UBIIP= 00040000            
SS$_NOSUCHDEV  = 00000908            STS$M_CONTROL  = F0000000            UBA$M_CSR_UBPDN= 00020000            
SS$_NOSUCHFILE = 00000910            STS$M_CUST_DEF = 08000000            UBA$M_CSR_URD  = 20000000            
SS$_NOSUCHNODE = 0000028C            STS$M_FAC_NO   = 0FFF0000            UBA$M_CSR_WS   = 40000000            
SS$_NOSUCHSEC  = 00000978            STS$M_FAC_SP   = 00008000            UBA$M_CSR_XMFLT= 04000000            
SS$_NOTAPEOP   = 00000264            STS$M_INHIB_MSG= 10000000            UBA$M_DPR_BNE  = 80000000            
SS$_NOTFILEDEV = 000001CC            STS$M_MSG_NO   = 0000FFF8            UBA$M_DPR_DPF  = 20000000            
SS$_NOTINTBLSZ = 000001D4            STS$M_SEVERITY = 00000007            UBA$M_DPR_XMTER= 40000000            
SS$_NOTLABELMT = 000001DC            STS$M_SUCCESS  = 00000001            UBA$M_MAP_BO   = 02000000            
SS$_NOTMODIFIED= 00000659            STS$S_CODE     = 0000000C            UBA$M_MAP_VALID= 80000000            
SS$_NOTNETDEV  = 000002EC            STS$S_COND_ID  = 00000019            UBA$M_SR_BRID  = 00000800            
SS$_NOTRAN     = 00000629            STS$S_CONTROL  = 00000004            UBA$M_SR_BRSVF = 10000000            
SS$_NOTSQDEV   = 000001E4            STS$S_CUST_DEF = 00000001            UBA$M_SR_CRD   = 00000100            
SS$_OPCCUS     = 00000434            STS$S_FAC_NO   = 0000000C            UBA$M_SR_CXTER = 00000080            
SS$_OPCDEC     = 0000043C            STS$S_FAC_SP   = 00000001            UBA$M_SR_CXTMO = 00000040            
SS$_OPINCOMPL  = 000002D4            STS$S_INHIB_MSG= 00000001            UBA$M_SR_DPPE  = 00000020            
SS$_PAGOWNVIO  = 000001EC            STS$S_MSG_NO   = 0000000D            UBA$M_SR_IVMR  = 00000010            
SS$_PAGRDERR   = 00000444            STS$S_SEVERITY = 00000003            UBA$M_SR_LER   = 00000004            
SS$_PARITY     = 000001F4            STS$S_SUCCESS  = 00000001            UBA$M_SR_MRPE  = 00000008            
SS$_PARTESCAPE = 000001FC            STS$V_CODE     = 00000003            UBA$M_SR_RDS   = 00000200            
SS$_PFMBSY     = 00000204            STS$V_COND_ID  = 00000003            UBA$M_SR_RDTO  = 00000400            
SS$_PLHLDR     = 00000404            STS$V_CONTROL  = 0000001C            UBA$M_SR_RIE   = 20000000            
SS$_PSTFULL    = 0000020C            STS$V_CUST_DEF = 0000001B            UBA$M_SR_SSYNC = 00000001            
SS$_RADRMOD    = 0000044C            STS$V_FAC_NO   = 00000010            UBA$M_SR_UBIFS = 40000000            
SS$_REJECT     = 00000294            STS$V_FAC_SP   = 0000000F            UBA$M_SR_UBSTO = 00000002            
SS$_REMOTE     = 00000649            STS$V_INHIB_MSG= 0000001C            UBA$S_BRRVR_IVA= 00000010            
BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page  18
SYMBOL TABLE                                                                                                                     (1)

UBA$S_CR_ARLVL = 00000002            UBA$V_SR_RIE   = 0000001D            
UBA$S_CR_MRDSB = 00000005            UBA$V_SR_SSYNC = 00000000            
UBA$S_CSR_ADCOD= 00000008            UBA$V_SR_UBIFS = 0000001E            
UBA$S_DPR_ADDR = 00000010            UBA$V_SR_UBSTO = 00000001            
UBA$S_DPR_STATE= 00000008            VA$M_BYTE      = 000001FF            
UBA$S_FMER_MRN = 00000009            VA$M_P1        = 40000000            
UBA$S_FUBAR_ADR= 00000012            VA$M_SYSTEM    = 80000000            
UBA$S_MAP_ADDR = 00000015            VA$M_VPG       = FFFFFE00            
UBA$S_MAP_DPD  = 00000004            VA$M_VPN       = 3FFFFE00            
UBA$S_SR_BRRVF = 00000004            VA$S_BYTE      = 00000009            
UBA$V_BRRVR_AIR= 0000001F            VA$S_VPG       = 00000017            
UBA$V_BRRVR_IVA= 00000000            VA$S_VPN       = 00000015            
UBA$V_CR_ARLVL = 00000007            VA$V_BYTE      = 00000000            
UBA$V_CR_BRIE  = 00000005            VA$V_P1        = 0000001E            
UBA$V_CR_CNFIE = 00000002            VA$V_SYSTEM    = 0000001F            
UBA$V_CR_IFSIE = 00000006            VA$V_VPG       = 00000009            
UBA$V_CR_INIT  = 00000000            VA$V_VPN       = 00000009            
UBA$V_CR_MRDSB = 0000001A            WRITEDUMP        00000281 R     08   
UBA$V_CR_SUEFIE= 00000003            
UBA$V_CR_UBPF  = 00000001            
UBA$V_CR_USEFIE= 00000004            
UBA$V_CSR_ADCOD= 00000000            
UBA$V_CSR_IS   = 0000001C            
UBA$V_CSR_MT   = 0000001B            
UBA$V_CSR_OT   = 00000015            
UBA$V_CSR_PD   = 00000017            
UBA$V_CSR_PE   = 0000001F            
UBA$V_CSR_PU   = 00000016            
UBA$V_CSR_UBIC = 00000010            
UBA$V_CSR_UBIIP= 00000012            
UBA$V_CSR_UBPDN= 00000011            
UBA$V_CSR_URD  = 0000001D            
UBA$V_CSR_WS   = 0000001E            
UBA$V_CSR_XMFLT= 0000001A            
UBA$V_DPR_ADDR = 00000000            
UBA$V_DPR_BNE  = 0000001F            
UBA$V_DPR_DPF  = 0000001D            
UBA$V_DPR_STATE= 00000010            
UBA$V_DPR_XMTER= 0000001E            
UBA$V_FMER_MRN = 00000000            
UBA$V_FUBAR_ADR= 00000000            
UBA$V_MAP_ADDR = 00000000            
UBA$V_MAP_BO   = 00000019            
UBA$V_MAP_DPD  = 00000015            
UBA$V_MAP_VALID= 0000001F            
UBA$V_SR_BRID  = 0000000B            
UBA$V_SR_BRRVF = 00000018            
UBA$V_SR_BRSVF = 0000001C            
UBA$V_SR_CRD   = 00000008            
UBA$V_SR_CXTER = 00000007            
UBA$V_SR_CXTMO = 00000006            
UBA$V_SR_DPPE  = 00000005            
UBA$V_SR_IVMR  = 00000004            
UBA$V_SR_LER   = 00000002            
UBA$V_SR_MRPE  = 00000003            
UBA$V_SR_RDS   = 00000009            
UBA$V_SR_RDTO  = 0000000A            
BUGCHECK        - SOFTWARE BUG CHECK ERROR LOGIC                 21-AUG-1978 21:07:45   VAX-11 MACRO X0.3-11               Page  19
PROGRAM SECTION SYNOPSIS                                                                                                         (1)



PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            00000FC0      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
$$$025           00000004      03     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$ZBUGFATAL       00000000      04     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
Z$INIT__BUGZEND  00000000      05     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
Z$INIT__BUGC     0000012E      06     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$AEXENONPAGED    0000014D      07     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
Z$INIT__BUGA     000002C9      08     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT PAGE  


THERE WERE NO ERRORS OR WARNINGS.
3546. BYTES LEFT IN FREE MEMORY POOL.
802. BYTES OF RECLAIMED MEMORY.
OBJ$:BUGCHECK,LIS$:BUGCHECK/-SP=EXECML$/ML,SRC$:BUGCHECK
17 MLB DIR RDS - 1299 GETS TO DEFINE 32 MACROS. 114 INTER. FILE WRITES. 
