TTYSTRSTP       - TERMINAL DRIVER START AND STOP I/O ROUTINES    21-AUG-1978 21:02:34   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (2)      51  TTY$STARTIO - START I/O OPERATION ON TERMINAL
   (3)     237  TTY$STARTOUTPUT - START OUTPUT OPERATION ON UNI
   (4)     268  TTY$READONE - READ OPERATION DONE
   (5)     309  TTT$WRITEDONE - WRITE OPERATION DONE
TTYSTRSTP       - TERMINAL DRIVER START AND STOP I/O ROUTINES    21-AUG-1978 21:02:34   VAX-11 MACRO X0.3-11               Page   1
V06                                                                                                                              (1)

                                     0000     1 	.TITLE	TTYSTRSTP - TERMINAL DRIVER START AND STOP I/O ROUTINES
                                     0000     2 	.IDENT	/V06/
                                     0000     3 ;
                                     0000     4 ; COPYRIGHT (C) 1978
                                     0000     5 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
                                     0000     6 ;
                                     0000     7 ; THIS SOFTWARE IS FURNISHED UNDER  A LICENSE FOR USE ONLY  ON  A
                                     0000     8 ; SINGLE COMPUTER SYSTEM AND MAY BE  COPIED ONLY WITH  THE INCLU-
                                     0000     9 ; SION OF  THE  ABOVE  COPYRIGHT NOTICE.  THIS SOFTWARE,  OR  ANY
                                     0000    10 ; OTHER COPIES THEREOF, MAY NOT BE  PROVIDED  OR  OTHERWISE  MADE
                                     0000    11 ; AVAILABLE TO ANY OTHER PERSON EXCEPT  FOR  USE  ON  SUCH SYSTEM
                                     0000    12 ; AND TO  ONE WHO AGREES  TO  THESE LICENSE  TERMS.  TITLE TO AND
                                     0000    13 ; OWNERSHIP OF THE SOFTWARE SHALL AT ALL TIMES REMAIN IN DEC.
                                     0000    14 ;
                                     0000    15 ; THE INFORMATION IN THIS SOFTWARE  IS  SUBJECT TO CHANGE WITHOUT
                                     0000    16 ; NOTICE AND SHOULD NOT BE CONSTRUED  AS  A COMMITMENT BY DIGITAL
                                     0000    17 ; EQUIPMENT CORPORATION.
                                     0000    18 ;
                                     0000    19 ; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF ITS
                                     0000    20 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
                                     0000    21 ;
                                     0000    22 ;++
                                     0000    23 ; FACILITY:
                                     0000    24 ;	VAX/VMS TERMINAL DRIVER
                                     0000    25 ;
                                     0000    26 ; ABSTRACT:
                                     0000    27 ;
                                     0000    28 ;	THIS MODULE CONTAINS ROUTINES PERTAINING TO STARTING AND COMPLETING
                                     0000    29 ;	I/O REQUESTS.
                                     0000    30 ;
                                     0000    31 ; AUTHOR:
                                     0000    32 ;	R.HEINEN 10-OCT-1977
                                     0000    33 ;--
                                     0000    34 ;
                                     0000    35 ; EXTERNAL SYMBOLS
                                     0000    36 ;
                                     0000    37 	$CRBDEF				; DEFINE CRB
                                     0000    38 	$IODEF				; DEFINE I/O FUNCTION CODES
                                     0000    39 	$IPLDEF				; DEFINE IPL'S
                                     0000    40 	$IRPDEF				; DEFINE IRP
                                     0000    41 	$PRDEF				; DEFINE PROCESSOR REGISTERS
                                     0000    42 	$UCBDEF				; DEFINE UCB
                                     0000    43 	$TTDEF				; DEFINE TERMINAL CHARACTERISTICS
                                     0000    44 	$TTYUCBDEF			; DEFINE TERMINAL CHARACTERISTICS
                                     0000    45 	$TTYDEF				; DEFINE TERMINAL DRIVER SYMBOLS
                                     0000    46 	$VECDEF				; DEFINE CRB VECTOR OFFSETS
                                     0000    47 	TTYMACS				; DEFINE TERMINAL MACROS
                                     0000    48  
                                 00000000    49 	.PSECT	$$$115_DRIVER,LONG	; DEFINE NON-PAGED PSECT
TTYSTRSTP       - TERMINAL DRIVER START AND STOP I/O ROUTINES    21-AUG-1978 21:02:34   VAX-11 MACRO X0.3-11               Page   2
V06             TTY$STARTIO - START I/O OPERATION ON TERMINAL                                                                    (2)

                                     0000    51 	.SBTTL	TTY$STARTIO - START I/O OPERATION ON TERMINAL
                                     0000    52 ;++
                                     0000    53 ; TTY$STARTIO - START I/O OPERATION ON TERMINAL
                                     0000    54 ;
                                     0000    55 ; FUNCTIONAL DESCRIPTION:
                                     0000    56 ;
                                     0000    57 ; THIS ROUTINE IS ENTERED WHEN THE UNIT IS IDLE AND THERE IS A PACKET TO PROCESS.
                                     0000    58 ;
                                     0000    59 ; INPUTS:
                                     0000    60 ;
                                     0000    61 ;	I/O PACKET FORMATTED AS DESCRIBED IN TTYFDT.
                                     0000    62 ;
                                     0000    63 ;	R3 = I/O PACKET ADDRESS
                                     0000    64 ;	R5 = UCB ADDRESS
                                     0000    65 ;
                                     0000    66 ; OUTPUTS:
                                     0000    67 ;
                                     0000    68 ;	NONE
                                     0000    69 ;--
                                     0000    70 TTY$STARTIO::				; START TERMINAL I/O
                          FFFD'  30  0000    71 	BSBW	TTY$LOCK		; SETUP IPL AND REGISTERS
         20 A3       FFC0 8F     AB  0003    72 	BICW3	#^C<IO$M_FCODE>,IRP$W_FUNC(R3),R4; GET INTERNAL FUNCTION CODE
                          54         0009       
                                     000A    73 	CASE	R4,TYPE=B,<DO_READ,DO_WRITE,DO_SETM,DO_SETC,DO_SETC>
                                     0018    74 ;
                                     0018    75 ; SET MODE OPERATION - CHECK FOR PRIVILEGED CHANGES
                                     0018    76 ;
                                     0018    77 DO_SETM:				;
            50       0000'8F     3C  0018    78 	MOVZWL	#SS$_NOPRIV,R0		; ASSUME PRIVILEGE VIOLATION
         2A A3            09     E0  001D    79 	BBS	#IRP$V_PRIVIO,IRP$W_STS(R3),DO_SETC; NO CHECK FOR PRIVY USER
                          1C         0021       
                       34 A3     95  0022    80 	TSTB	IRP$L_MEDIA(R3)		; PARITY CHAGE?
                          0F     12  0025    81 	BNEQ	10$			; IF NEQ THEN PRIVILEGE VIOLATION
         3C A5         38 A3     CD  0027    82 	XORL3	IRP$L_MEDIA+4(R3),UCB$L_DEVDEPEND(R5),R4; GET MODIFIED BITS
                          54         002C       
            54   0000A043 8F     D3  002D    83 	BITL	#<TT$M_NOECHO!TT$M_PASSALL!TT$M_EIGHTBIT!TT$M_REMOTE!TT$M_SCRIPT>,R4
                          08     13  0034    84 	BEQL	DO_SETC			; CONTINUE
                          51     D4  0036    85 10$:	CLRL	R1			;
                                     0038    86 	REQCOM				; COMPLETE THE REQUEST IN ERROR
                                     003E    87 ;
                                     003E    88 ; DO SET CHARACTERISTICS
                                     003E    89 ;
                                     003E    90 DO_SETC:				; DO PRIVILEGED SET
                                     003E    91 ;
                                     003E    92 ; PROCESS HANGUP SUBFUNCTION - ACTUAL HANGUP OCCURS AT TIMER
                                     003E    93 ;
         20 A3            09     E1  003E    94 	BBC	#IO$V_HANGUP,IRP$W_FUNC(R3),10$; BR IF NOT HANGUP FUNCTION
                          18         0042       
            50         20 A5     D0  0043    95 	MOVL	UCB$L_CRB(R5),R0	; ADDRESS CRB
                          38     BB  0047    96 	PUSHR	#^M<R3,R4,R5>		; SAVE REGISTERS
                       34 B0     16  0049    97 	JSB	@CRB$L_INTD+VEC$L_UNITDISC(R0); DISCONNECT UNIT
                          38     BA  004C    98 	POPR	#^M<R3,R4,R5>		; RESTORE REGITERS
                          51     D4  004E    99 	CLRL	R1			; SET STATUS
            50       0000'8F     3C  0050   100 	MOVZWL	#SS$_NORMAL,R0		;
                                     0055   101 	REQCOM
                                     005B   102 ;
                                     005B   103 ; PROCESS CHANGE OF CHARACTERISTICS AND MODE
TTYSTRSTP       - TERMINAL DRIVER START AND STOP I/O ROUTINES    21-AUG-1978 21:02:34   VAX-11 MACRO X0.3-11               Page   3
V06             TTY$STARTIO - START I/O OPERATION ON TERMINAL                                                                    (2)

                                     005B   104 ;
            06            00     ED  005B   105 10$:	CMPZV	#IRP$V_FCODE,#IRP$S_FCODE,IRP$W_FUNC(R3),#TTY$C_FC_N_SET; NO SET?
            04         20 A3         005E       
                          03     12  0061   106 	BNEQ	15$			; IF NEQ THEN CONTINUE WITH SET
                          00CE   31  0063   107 	BRW	120$			; OTHERWISE DONE
                                     0066   108 ;
                                     0066   109 ; CHANGE BASIC MODE BITS IN UCB$L_DEVDEPEND
                                     0066   110 ;
         3C A5         38 A3     CD  0066   111 15$:	XORL3	IRP$L_MEDIA+4(R3),UCB$L_DEVDEPEND(R5),R4; GET MODIFIED BITS
                          54         006B       
         3C A5            54     CA  006C   112 	BICL	R4,UCB$L_DEVDEPEND(R5)	; CLEAR THE CHANGED BITS
         3C A5         38 A3     C8  0070   113 	BISL	IRP$L_MEDIA+4(R3),UCB$L_DEVDEPEND(R5);
         39 A5         35 A3     90  0075   114 	MOVB	IRP$L_MEDIA+1(R3),UCB$B_DEVTYPE(R5); INSERT NEW TERMINAL TYPE
                                     007A   115 ;
                                     007A   116 ; ENTER OR EXIT HOLDSCREEN - NOTE THAT FOR NON-VT5X TERMINALS THIS IS GARBAGE
                                     007A   117 ;
            54            0E     E1  007A   118 	BBC	#TT$V_HOLDSCREEN,R4,25$	; BR IF HOLD SCREEN DID NOT CHANGE
                          15         007D       
         78 A5       0000'CF     9E  007E   119 	MOVAB	W^TTY$A_HLDSCREEN,UCB$L_TT_MULTI(R5); ASSUME ENTER HOLD SCREEN
         38 A3            0E     E0  0084   120 	BBS	#TT$V_HOLDSCREEN,IRP$L_MEDIA+4(R3),20$; BR IF ENTERING
                          06         0088       
         78 A5       0000'CF     9E  0089   121 	MOVAB	W^TTY$A_RLSCREEN,UCB$L_TT_MULTI(R5); SET TO RELEASE SCREEN
                                     008F   122 20$:	SET_STATE MULTI			;
                                     0093   123 ;
                                     0093   124 ; SET UP WIDTH
                                     0093   125 ;
         3A A5         36 A3     B0  0093   126 25$:	MOVW	IRP$L_MEDIA+2(R3),UCB$W_DEVBUFSIZ(R5); INSERT NEW CARRIAGE WIDTH
                                     0098   127 ;
                                     0098   128 ; SET UP SPEED
                                     0098   129 ;
            51         3C A3     9A  0098   130 	MOVZBL	IRP$W_TT_PRMPT(R3),R1	; GET NEW SPEED
                          07     13  009C   131 	BEQL	30$			; IF EQL THEN NO CHANGE
                                     009E   132 ;
                                     009E   133 ; PROCESS PARITY SETTINGS
                                     009E   134 ;
            00            51     F0  009E   135 	INSV	R1,#0,#4,UCB$B_TT_SPEED(R5); INSERT LINE SPEED
       009C C5            04         00A1       
         34 A3            05     E1  00A5   136 30$:	BBC	#TT$V_ALTRPAR,IRP$L_MEDIA(R3),35$; BR IF PARITY SHOULD NOT BE ALTERED
                          11         00A9       
         34 A3         3F 8F     8A  00AA   137 	BICB	#^C<TT$M_PARITY!TT$M_ODD>,IRP$L_MEDIA(R3); RESET BITS
       009C C5         C0 8F     8A  00AF   138 	BICB	#TT$M_PARITY!TT$M_ODD,UCB$B_TT_SPEED(R5); CLEAR CURRENT PARITY
       009C C5         34 A3     88  00B5   139 	BISB	IRP$L_MEDIA(R3),UCB$B_TT_SPEED(R5); INSERT NEW VALUE
                                     00BB   140 ;
                                     00BB   141 ; PROCESS FILL DATA
                                     00BB   142 ;
                          50     D4  00BB   143 35$:	CLRL	R0			; ASSUME NEW VALUE IS 0
         3C A5            0A     E1  00BD   144 	BBC	#TT$V_CRFILL,UCB$L_DEVDEPEND(R5),37$; CR FILL ON?
                          0A         00C1       
            50         3E A3     9A  00C2   145 	MOVZBL	IRP$W_TT_PRMPT+2(R3),R0	; GET NEW VALUE
            54            0A     E0  00C6   146 	BBS	#TT$V_CRFILL,R4,37$	; CHANGE?
                          02         00C9       
                          0C     13  00CA   147 	BEQL	40$			; IF NEQ EQL 0 THEN NO CHANGE
       009D C5            50     90  00CC   148 37$:	MOVB	R0,UCB$B_TT_CRFILL(R5)	; RESET VALUE
                          05     12  00D1   149 	BNEQ	40$			; IF NEQ THEN OK
         3C A5            0A     E5  00D3   150 	BBCC	#TT$V_CRFILL,UCB$L_DEVDEPEND(R5),40$; SET OFF
                          00         00D7       
                          50     D4  00D8   151 40$:	CLRL	R0			; ASSUME NEW VALUE IS 0
TTYSTRSTP       - TERMINAL DRIVER START AND STOP I/O ROUTINES    21-AUG-1978 21:02:34   VAX-11 MACRO X0.3-11               Page   4
V06             TTY$STARTIO - START I/O OPERATION ON TERMINAL                                                                    (2)

         3C A5            0B     E1  00DA   152 	BBC	#TT$V_LFFILL,UCB$L_DEVDEPEND(R5),47$; CR FILL ON?
                          0A         00DE       
            50         3F A3     9A  00DF   153 	MOVZBL	IRP$W_TT_PRMPT+3(R3),R0	; GET NEW VALUE
            54            0B     E0  00E3   154 	BBS	#TT$V_LFFILL,R4,47$	; CHANGE?
                          02         00E6       
                          0C     13  00E7   155 	BEQL	50$			; IF NEQ EQL 0 THEN NO CHANGE
       009E C5            50     90  00E9   156 47$:	MOVB	R0,UCB$B_TT_LFFILL(R5)	; RESET VALUE
                          05     12  00EE   157 	BNEQ	50$			; IF NEQ THEN OK
         3C A5            0B     E5  00F0   158 	BBCC	#TT$V_LFFILL,UCB$L_DEVDEPEND(R5),50$; SET OFF
                          00         00F4       
                                     00F5   159 ;
                                     00F5   160 ; COPY OVER PASSALL AND NOECHO TO CURRENT STATE
                                     00F5   161 ;
         3C A5         FC 8F     8B  00F5   162 50$:	BICB3	#^C<TT$M_PASSALL!TT$M_NOECHO>,UCB$L_DEVDEPEND(R5),R4
                          54         00FA       
            0E            54     F0  00FB   163 	INSV	R4,#TTY$V_ST_PASALL,#2,(R2); INSERT IN STATE VECTOR
            62            02         00FE       
                                     0100   164 ;
                                     0100   165 ; INIT THE UNIT TO CHANGE THE SPEED AND PARITY
                                     0100   166 ;
            54         20 A5     D0  0100   167 	MOVL	UCB$L_CRB(R5),R4	; GET CRB ADDRESS
                       2C B4     16  0104   168 	JSB	@CRB$L_INTD+VEC$L_UNITINIT(R4); INIT LINE SPEED AND PARITY
                                     0107   169 ;
                                     0107   170 ; IF MULTI IS SET THEN THE I/O MUST BE STARTED
                                     0107   171 ;
                                     0107   172 100$:	IF_NOT_STATE MULTI,110$		; BR IF MULTI NO SET
                          00D2   30  010D   173 	BSBW	TTY$STARTOUTPUT		; START THE MULTIPLE OUTPUT
                                     0110   174 ;
                                     0110   175 ; RETURN IOSB DATA
                                     0110   176 ;
            53         4C A5     D0  0110   177 110$:	MOVL	UCB$L_IRP(R5),R3	; GET CURRENT PACKET ADDRESS
            06            00     ED  0114   178 	CMPZV	#IRP$V_FCODE,#IRP$S_FCODE,IRP$W_FUNC(R3),#TTY$C_FC_SETC; SET CHAR?
            03         20 A3         0117       
                          18     12  011A   179 	BNEQ	120$			; IF NEQ THEN NO
       00A0 C5       009C C5     D0  011C   180 	MOVL	UCB$B_TT_SPEED(R5),UCB$B_TT_DESPEE(R5); RESET PERM SPEED
       00A4 C5         39 A5     D0  0123   181 	MOVL	UCB$B_DEVTYPE(R5),UCB$B_TT_DETYPE(R5); RESET TYPE AND WIDTH
         3C A5   00002000 8F     CB  0129   182 	BICL3	#TT$M_REMOTE,UCB$L_DEVDEPEND(R5),UCB$L_TT_DECHAR(R5); RESET PERM CHARACTERIST
                     00A8 C5         0131       
       009A C5   FFC0FFFF 8F     CB  0134   183 120$:	BICL3	#^C<UCB$M_TT_SPEED@16>,UCB$B_TT_SPEED-2(R5),R0; RETURN SPEED
                          50         013D       
       009A C5   FF3FFFFF 8F     CB  013E   184 	BICL3	#^C<<UCB$M_TT_PARTY!UCB$M_TT_ODD>@16>,UCB$B_TT_SPEED-2(R5),R1;
                          51         0147       
            51       009D C5     B0  0148   185 	MOVW	UCB$B_TT_CRFILL(R5),R1	; INSERT FILL DATA
            50       0000'8F     B0  014D   186 	MOVW	#SS$_NORMAL,R0		; SET STATUS
                                     0152   187 	REQCOM
                                     0158   188 ;
                                     0158   189 ; WRITE OPERATION
                                     0158   190 ;
                                     0158   191 DO_WRITE:				;
            62         34 A3     C8  0158   192 	BISL	IRP$L_MEDIA(R3),(R2)	; SET NEW STATE BITS
                       34 A3     D4  015C   193 	CLRL	IRP$L_MEDIA(R3)		; SET UP OPERATION STORAGE
         20 A3            07     E1  015F   194 	BBC	#IO$V_ENABLMBX,IRP$W_FUNC(R3),20$; BR IF ENABLE MBX NOT REQUESTED
                          05         0163       
         3C A5            10     E5  0164   195 	BBCC	#TT$V_MBXDSABL,UCB$L_DEVDEPEND(R5),20$; ENABLE MAILBOX
                          00         0168       
         20 A3            06     E1  0169   196 20$:	BBC	#IO$V_CANCTRLO,IRP$W_FUNC(R3),30$; BR IF CANCEL CTRLO NOT REQUESTED
                          04         016D       
TTYSTRSTP       - TERMINAL DRIVER START AND STOP I/O ROUTINES    21-AUG-1978 21:02:34   VAX-11 MACRO X0.3-11               Page   5
V06             TTY$STARTIO - START I/O OPERATION ON TERMINAL                                                                    (2)

                                     016E   197 	CLR_STATE CTRLO			; CANCEL THE CONTROL O
                          006D   31  0172   198 30$:	BRW	TTY$STARTOUTPUT		; START THE OUTPUT
                                     0175   199 ;
                                     0175   200 ; READ OPERATION
                                     0175   201 ;
                                     0175   202 DO_READ:				; 
            62         34 A3     C8  0175   203 	BISL	IRP$L_MEDIA(R3),(R2)	; INSERT READ STATE BITS IN VECTOR
         6C A5         3C A3     3C  0179   204 	MOVZWL	IRP$W_TT_PRMPT(R3),UCB$W_BOFF(R5); SAVE PROMPT SIZE
                       34 A3     D4  017E   205 	CLRL	IRP$L_MEDIA(R3)		; SET UP READ TERMINATOR STORAGE
            54         2C A3     D0  0181   206 	MOVL	IRP$L_SVAPTE(R3),R4	; GET BUFFERED BLOCK ADDRESS
         0C A4       009A C5     B0  0185   207 	MOVW	UCB$W_TT_CURSOR(R5),TTY$W_RB_ORGHOR(R4); SAVE OPERATION START CURSOR IN BLOCK
         20 A3            0A     E1  018B   208 	BBC	#IO$V_DSABLMBX,IRP$W_FUNC(R3),10$; BR IF ENABLE MBX NOT REQUESTED
                          05         018F       
         3C A5            10     E2  0190   209 	BBSS	#TT$V_MBXDSABL,UCB$L_DEVDEPEND(R5),10$; DISABLE MAILBOX
                          00         0194       
                                     0195   210 ;
                                     0195   211 ; SET UP READ TIMEOUT IF NECESSARY
                                     0195   212 ;
         20 A3            07     E1  0195   213 10$:	BBC	#IO$V_TIMED,IRP$W_FUNC(R3),20$; BR IF NOT READ TIMED
                          12         0199       
            54         0E A4     3C  019A   214 	MOVZWL	TTY$W_RB_TIMOS(R4),R4	; GET THE NUMBER OF SECONDS BETWEEN CHARACTERS
   00000000'GF            54     C1  019E   215 	ADDL3	R4,G^EXE$GL_ABSTIM,UCB$L_TT_RDUE(R5); SET UP DUE TIME
                     008C C5         01A5       
         5A A5            02     A8  01A8   216 	BISW	#UCB$M_TT_TIMO,UCB$W_DEVSTS(R5); SET READ TIMEOUT ENABLE
                                     01AC   217 ;
                                     01AC   218 ; PROCESS STATE DEPENDENT I/O FUNCTIONS FOR READ
                                     01AC   219 ;
                                     01AC   220 20$:	CLR_STATE	<CTRLO>		; TURN OFF CONTROLO
         5A A5            04     AA  01B0   221 	BICW	#UCB$M_TT_NOTIF,UCB$W_DEVSTS(R5); SET USER NOT NOTIFIED
         20 A3            0B     E1  01B4   222 	BBC	#IO$V_PURGE,IRP$W_FUNC(R3),50$; BR IF NOT "FLUSH" SUBFUNCTION
                          03         01B8       
                          FE44'  30  01B9   223 	BSBW	TTY$PURGE_AHEAD		; PURGE TYPEAHEAD BUFFER
                                     01BC   224 ;
                                     01BC   225 ; CHECK FOR LINE FEED NEEDED
                                     01BC   226 ;
            62            15     E4  01BC   227 50$:	BBSC	#TTY$V_ST_NL,(R2),60$	; BR IF AT NEWLINE BECAUSE OF CURSOR OVERFLOW
                          14         01BF       
                                     01C0   228 	IF_STATE <PASALL,NOECHO>,60$	; NO TEST IF PASSALL OR NOECHO
                     009A C5     B5  01C7   229 	TSTW	UCB$W_TT_CURSOR(R5)	; CURSOR AT 0?
                          07     12  01CB   230 	BNEQ	60$			; IF NO THEN SEND NO LINE FEED
                                     01CD   231 	SET_STATE <SENDLF,SKIPLF>	; SEND A LINE FEED FIRST
                                     01D4   232 ;
         3C A5            12     E1  01D4   233 60$:	BBC	#TT$V_READSYNC,UCB$L_DEVDEPEND(R5),TTY$STARTOUTPUT; BR IF NO READ SYNC
                          09         01D8       
                                     01D9   234 	IF_STATE <EOL>,TTY$STARTOUTPUT; IF EOL SET THEN NO ACTUAL READ
                                     01DF   235 	SET_STATE XON
TTYSTRSTP       - TERMINAL DRIVER START AND STOP I/O ROUTINES    21-AUG-1978 21:02:34   VAX-11 MACRO X0.3-11               Page   6
V06             TTY$STARTOUTPUT - START OUTPUT OPERATION ON UNI                                                                  (3)

                                     01E2   237 	.SBTTL	TTY$STARTOUTPUT - START OUTPUT OPERATION ON UNIT
                                     01E2   238 ;++
                                     01E2   239 ; TTY$STARTOUTPUT - START OUTPUT ON UNIT
                                     01E2   240 ;
                                     01E2   241 ; FUNCTIONAL DESCRIPTION:
                                     01E2   242 ;
                                     01E2   243 ; THIS ROUTINE IS USED TO INITIATE OUTPUT ON A UNIT. THIS OPERATION STARTS
                                     01E2   244 ; THE FLOW OF DATA EVEN IN THE CASE OF READS. THE ACTION IS TO TEST THE
                                     01E2   245 ; STATE OF INTERRUPT EXPECTED. IF AN INTERRUPT IS EXPECTED, THEN NOTHING NEED BE DON
                                     01E2   246 ; BECAUSE A SUBSEQUENT INTERRUPT WILL CONTINUE APPROP. WITH THE CURRENT STATE.
                                     01E2   247 ; IF NO INTERRUPT IS EXPECTED, THEN THE TTY$GETNEXTCHAR ROUTINE IS ENTERED TO RETURN
                                     01E2   248 ; THE NEXT CHARACTER FOR THE UNIT. THEN IF A CHARACTER IS AVAILABLE THE DEVICE
                                     01E2   249 ; DEPENDENT STARTIO ROUTINE IS ENTERED. 
                                     01E2   250 ; THIS OPERATION IS IDENTICAL TO THE OPERATION OF AN OUTPUT READY INTERRUPT.
                                     01E2   251 ;
                                     01E2   252 ; INPUTS:
                                     01E2   253 ;
                                     01E2   254 ;	R2 = ADDRESS OF THE UNIT STATE VECTOR
                                     01E2   255 ;	R5 = UCB ADDRESS
                                     01E2   256 ;
                                     01E2   257 ; OUTPUTS:
                                     01E2   258 ;
                                     01E2   259 ;	NONE
                                     01E2   260 ;--
                                     01E2   261 TTY$STARTOUTPUT::			; START OUTPUT
         58 A5            01     E0  01E2   262 	BBS	#UCB$V_INT,UCB$W_STS(R5),100$; LEAVE HERE IF INTERRUPT EXPECTED
                          0A         01E6       
                          FE16'  30  01E7   263 	BSBW	TTY$GETNEXTCHAR		; GET NEXT CHARACTER FOR UNIT
            54         20 A5     D0  01EA   264 	MOVL	UCB$L_CRB(R5),R4	; GET THE CRB ADDRESS
                       30 B4     17  01EE   265 	JMP	@CRB$L_INTD+VEC$L_START(R4); ENTER THE DEVICE DEP. ROUTINE
                                 05  01F1   266 100$:	RSB				; RETURN
TTYSTRSTP       - TERMINAL DRIVER START AND STOP I/O ROUTINES    21-AUG-1978 21:02:34   VAX-11 MACRO X0.3-11               Page   7
V06             TTY$READONE - READ OPERATION DONE                                                                                (4)

                                     01F2   268 	.SBTTL	TTY$READONE - READ OPERATION DONE
                                     01F2   269 ;++
                                     01F2   270 ; TTY$READONE - READ I/O OPERATION DONE
                                     01F2   271 ;
                                     01F2   272 ; FUNCTIONAL DESCRIPTION:
                                     01F2   273 ;
                                     01F2   274 ; THIS ROUTINE IS ENTERED TO COMPLETE THE CURRENT READ OPERATION.
                                     01F2   275 ; THE ACTION IS TO RESET THE STATE OF THE UNIT TO REFLECT THE CHANGE AND TO
                                     01F2   276 ; FORK ON THE IRP TO COMPLETE THE PROCESSING.
                                     01F2   277 ;
                                     01F2   278 ; INPUTS:
                                     01F2   279 ;
                                     01F2   280 ;	R2 = ADDRESS OF THE UNIT STATE VECTOR
                                     01F2   281 ;	R5 = UCB ADDRESS
                                     01F2   282 ;
                                     01F2   283 ;		UCB$W_BOFF = STATUS WORD
                                     01F2   284 ;		UCB$W_BCNT = COUNT OF TRANSFER
                                     01F2   285 ;	IRP$L_MEDIA(CURRENT PACKET) = TERMINATOR AND TERMINATOR SIZE
                                     01F2   286 ;
                                     01F2   287 ; OUTPUTS:
                                     01F2   288 ;
                                     01F2   289 ;
                                     01F2   290 ;	NONE
                                     01F2   291 ;--
                                     01F2   292 TTY$READONE::				; READ I/O DONE
         3C A5            12     E1  01F2   293 	BBC	#TT$V_READSYNC,UCB$L_DEVDEPEND(R5),10$; BR IF NOT READSYNC
                          03         01F6       
                                     01F7   294 	SET_STATE XOFF
         5A A5            02     AA  01FA   295 10$:	BICW	#UCB$M_TT_TIMO,UCB$W_DEVSTS(R5); CLEAR TIMEOUT ENABLED
                                     01FE   296 ;
                                     01FE   297 ; SET UP ERRORS ON ESCAPE SEQUENCES
                                     01FE   298 ;
                                     01FE   299 	IF_NOT_STATE ESC,15$		; IF NOT ESCAPE THEN BR
         6C A5       0000'8F     B0  0204   300 	MOVW	#SS$_PARTESCAPE,UCB$W_BOFF(R5); ASSUME PARTIAL ESCAPE SEQUENCE
                                     020A   301 15$:	IF_NOT_STATE BADESC,20$		; ESCAPE SYNTAX CORRECT?
         6C A5       0000'8F     B0  0210   302 	MOVW	#SS$_BADESCAPE,UCB$W_BOFF(R5); SET STATUS FOR IMPROPER ESCAPE SEQ
                                     0216   303 ;
                                     0216   304 ; RESET PASSALL AND NOECHO IF MODES
                                     0216   305 ;
         3C A5         FC 8F     8B  0216   306 20$:	BICB3	#^C<TT$M_PASSALL!TT$M_NOECHO>,UCB$L_DEVDEPEND(R5),R4;
                          54         021B       
            0E            54     F0  021C   307 	INSV	R4,#TTY$V_ST_PASALL,#2,(R2); RESET PASSALL AND NOECHO
            62            02         021F       
TTYSTRSTP       - TERMINAL DRIVER START AND STOP I/O ROUTINES    21-AUG-1978 21:02:34   VAX-11 MACRO X0.3-11               Page   8
V06             TTT$WRITEDONE - WRITE OPERATION DONE                                                                             (5)

                                     0221   309 	.SBTTL	TTT$WRITEDONE - WRITE OPERATION DONE
                                     0221   310 ;++
                                     0221   311 ; TTY$WRITEDONE - WRITE OPERATION DONE
                                     0221   312 ;
                                     0221   313 ; FUNCTIONAL DESCRIPTION:
                                     0221   314 ;
                                     0221   315 ; THIS ROUTINE PROCESSES WRITE OPERATION DONE.
                                     0221   316 ;
                                     0221   317 ; INPUTS:
                                     0221   318 ;
                                     0221   319 ;	R2 = ADDRESS OF THE UNIT STATE VECTOR
                                     0221   320 ;	R5 = UCB ADDRESS
                                     0221   321 ;
                                     0221   322 ;	UCB$W_BOFF CONTAINS THE STATUS
                                     0221   323 ;	UCB$W_BCNT CONTAINS THE TRANSFER SIZE
                                     0221   324 ;
                                     0221   325 ; OUTPUTS:
                                     0221   326 ;
                                     0221   327 ;	R2,R5 ARE PRESERVED.
                                     0221   328 ;--
                                     0221   329 TTY$WRITEDONE::				; 
                                     0221   330 	CLR_STATE <READ,DEL,XON,EOL,PROMPT,CTRLR,NOFLTR,-
                                     0221   331 		WRITE,WRTALL,ESC,ESC_O,BADESC>
            53         4C A5     D0  0228   332 	MOVL	UCB$L_IRP(R5),R3	; ADDRESS CURRENT PACKET
         68 B5         3C A3     3C  022C   333 	MOVZWL	IRP$W_TT_PRMPT(R3),@UCB$L_SVAPTE(R5); INSERT DATA ADDRESS
         68 B5         68 A5     C0  0231   334 	ADDL	UCB$L_SVAPTE(R5),@UCB$L_SVAPTE(R5);
         38 A3         0C A3     D0  0236   335 	MOVL	IRP$L_PID(R3),IRP$L_TT_TERM(R3); SAVE DATA FOR FORK BLOCK
         3C A3         0B A3     90  023B   336 	MOVB	IRP$B_RMOD(R3),IRP$W_TT_PRMPT(R3);
         0B A3         0B A5     90  0240   337 	MOVB	UCB$B_FIPL(R5),IRP$B_RMOD(R3); SET FORK IPL
         30 A3         6C A5     D0  0245   338 	MOVL	UCB$W_BOFF(R5),IRP$W_BOFF(R3); SAVE TRANSFER SIZE AND STATUS
                          24     BB  024A   339 	PUSHR	#^M<R2,R5>		;
            55            53     D0  024C   340 	MOVL	R3,R5			; SET UP FORK BLOCK ADDRESS
            53         10 A3     7D  024F   341 	MOVQ	IRP$L_AST(R3),R3	; GET PARAMS FOR FORK
                       89'AF     9F  0253   342 	PUSHAB	B^50$			; FORCE RETURN TO RESTORE UCB ADDRESS
                                     0256   343 	FORK				; CREATE FORK PROCESS
                                     025C   344 ;
                                     025C   345 ; I/O DONE FORK PROCESS
                                     025C   346 ;
            53            55     D0  025C   347 	MOVL	R5,R3			; RESTORE PACKET AND UCB ADDRESSES
            55         1C A3     D0  025F   348 	MOVL	IRP$L_UCB(R3),R5	;
            50         30 A3     D0  0263   349 	MOVL	IRP$W_BOFF(R3),R0	; GET STATUS AND TRANSFER SIZE
         32 A3         36 A3     A0  0267   350 	ADDW	IRP$L_MEDIA+2(R3),IRP$W_BCNT(R3) ; CALC TOTAL TRANSFER SIZE
            51         34 A3     D0  026C   351 	MOVL	IRP$L_MEDIA(R3),R1	; SET TERMINATOR DATA
         0C A3         38 A3     D0  0270   352 	MOVL	IRP$L_TT_TERM(R3),IRP$L_PID(R3); RETURN IRP DATA
         0B A3         3C A3     90  0275   353 	MOVB	IRP$W_TT_PRMPT(R3),IRP$B_RMOD(R3);
            54         2C A3     D0  027A   354 	MOVL	IRP$L_SVAPTE(R3),R4	; GET ADDRESS OF THE BUFFER BLOCK
         30 A3         08 A4     B0  027E   355 	MOVW	TTY$W_RB_SIZE(R4),IRP$W_BOFF(R3); MAKE IT QUOTA
                                     0283   356 	REQCOM				; COMPLETE REQUEST
                          24     BA  0289   357 50$:	POPR	#^M<R2,R5>		;
                                 05  028B   358 	RSB
                                     028C   359  
                                     028C   360 	.END
TTYSTRSTP       - TERMINAL DRIVER START AND STOP I/O ROUTINES    21-AUG-1978 21:02:34   VAX-11 MACRO X0.3-11               Page   9
SYMBOL TABLE                                                                                                                     (5)

BIT...         = 00000008            IO$M_SHUTDOWN  = 00000080            IO$_NOP        = 00000000            
CRB$B_MASK       0000000E            IO$M_STARTUP   = 00000040            IO$_OFFSET     = 00000006            
CRB$B_TT_ATTN    00000004            IO$M_SYNCH     = 00000200            IO$_PACKACK    = 00000008            
CRB$B_TT_EXPEC   00000005            IO$M_TIMED     = 00000080            IO$_PHYSICAL   = 0000001F            
CRB$B_TYPE       0000000A            IO$M_TRMNOECHO = 00001000            IO$_READHEAD   = 0000000E            
CRB$C_LENGTH     00000038            IO$M_WRTATTN   = 00000100            IO$_READLBLK   = 00000021            
CRB$K_LENGTH     00000038            IO$S_FCODE     = 00000006            IO$_READPBLK   = 0000000C            
CRB$L_INTD       00000014            IO$V_ABORT     = 00000008            IO$_READPRESET = 00000019            
CRB$L_INTD2      00000038            IO$V_ACCESS    = 00000006            IO$_READPROMPT = 00000037            
CRB$L_LINK       00000010            IO$V_ATTNAST   = 00000008            IO$_READTRACKD = 00000010            
CRB$L_TT_DIAL    00000000            IO$V_BINARY    = 00000006            IO$_READVBLK   = 00000031            
CRB$L_WQBL       00000004            IO$V_CANCTRLO  = 00000006            IO$_RECAL      = 00000003            
CRB$L_WQFL       00000000            IO$V_COMMOD    = 00000006            IO$_RELEASE    = 00000005            
CRB$M_BSY      = 00000001            IO$V_CREATE    = 00000007            IO$_RETCENTER  = 00000007            
CRB$V_BSY      = 00000000            IO$V_CTRLCAST  = 00000008            IO$_REWIND     = 00000024            
CRB$W_REFC       0000000C            IO$V_CTRLYAST  = 00000007            IO$_REWINDOFF  = 00000022            
CRB$W_SIZE       00000008            IO$V_CVTLOW    = 00000008            IO$_SEARCH     = 00000009            
DO_READ          00000175 R     03   IO$V_DATACHECK = 0000000E            IO$_SEEK       = 00000002            
DO_SETC          0000003E R     03   IO$V_DELETE    = 00000008            IO$_SENSECHAR  = 0000001B            
DO_SETM          00000018 R     03   IO$V_DMOUNT    = 0000000A            IO$_SENSEMODE  = 00000027            
DO_WRITE         00000158 R     03   IO$V_DSABLMBX  = 0000000A            IO$_SETCHAR    = 0000001A            
EXE$FORK         ********   X   03   IO$V_ENABLMBX  = 00000007            IO$_SETMODE    = 00000023            
EXE$GL_ABSTIM    ********   X   03   IO$V_FCODE     = 00000000            IO$_SKIPFILE   = 00000025            
GBL...         = 00000000            IO$V_HANGUP    = 00000009            IO$_SKIPRECORD = 00000026            
IO$M_ABORT     = 00000100            IO$V_INHERLOG  = 0000000B            IO$_SPACEFILE  = 00000002            
IO$M_ACCESS    = 00000040            IO$V_INHEXTGAP = 0000000C            IO$_SPACERECORD= 00000009            
IO$M_ATTNAST   = 00000100            IO$V_INHRETRY  = 0000000F            IO$_STARTSPNDL = 00000019            
IO$M_BINARY    = 00000040            IO$V_INHSEEK   = 0000000C            IO$_UNLOAD     = 00000001            
IO$M_CANCTRLO  = 00000040            IO$V_INTERRUPT = 00000006            IO$_VIRTUAL    = 0000003F            
IO$M_COMMOD    = 00000040            IO$V_INTSKIP   = 00000008            IO$_WRITECHECK = 0000000A            
IO$M_CREATE    = 00000080            IO$V_MOUNT     = 00000009            IO$_WRITECHECKH= 00000018            
IO$M_CTRLCAST  = 00000100            IO$V_NOECHO    = 00000006            IO$_WRITEHEAD  = 0000000D            
IO$M_CTRLYAST  = 00000080            IO$V_NOFILTR   = 00000009            IO$_WRITELBLK  = 00000020            
IO$M_CVTLOW    = 00000100            IO$V_NOFORMAT  = 00000008            IO$_WRITEMARK  = 0000001C            
IO$M_DATACHECK = 00004000            IO$V_NOW       = 00000006            IO$_WRITEOF    = 00000028            
IO$M_DELETE    = 00000100            IO$V_NOWAIT    = 00000007            IO$_WRITEPBLK  = 0000000B            
IO$M_DMOUNT    = 00000400            IO$V_PACKED    = 00000007            IO$_WRITETRACKD= 0000000F            
IO$M_DSABLMBX  = 00000400            IO$V_PURGE     = 0000000B            IO$_WRITEVBLK  = 00000030            
IO$M_ENABLMBX  = 00000080            IO$V_READATTN  = 00000007            IOC$REQCOM       ********   X   03   
IO$M_FCODE     = 0000003F            IO$V_REVERSE   = 00000006            IPL$_ASTDEL    = 00000002            
IO$M_HANGUP    = 00000200            IO$V_SHUTDOWN  = 00000007            IPL$_HWCLK     = 00000018            
IO$M_INHERLOG  = 00000800            IO$V_STARTUP   = 00000006            IPL$_IOPOST    = 00000004            
IO$M_INHEXTGAP = 00001000            IO$V_SYNCH     = 00000009            IPL$_MAILBOX   = 0000000B            
IO$M_INHRETRY  = 00008000            IO$V_TIMED     = 00000007            IPL$_POWER     = 0000001F            
IO$M_INHSEEK   = 00001000            IO$V_TRMNOECHO = 0000000C            IPL$_QUEUEAST  = 00000006            
IO$M_INTERRUPT = 00000040            IO$V_WRTATTN   = 00000008            IPL$_SCHED     = 00000003            
IO$M_INTSKIP   = 00000100            IO$_ACCESS     = 00000032            IPL$_SYNCH     = 00000007            
IO$M_MOUNT     = 00000200            IO$_ACPCONTROL = 00000038            IPL$_TIMER     = 00000007            
IO$M_NOECHO    = 00000040            IO$_CREATE     = 00000033            IRP$B_CARCON     00000038            
IO$M_NOFILTR   = 00000200            IO$_DEACCESS   = 00000034            IRP$B_EFN        00000022            
IO$M_NOFORMAT  = 00000100            IO$_DELETE     = 00000035            IRP$B_PRI        00000023            
IO$M_NOW       = 00000040            IO$_DIAGNOSE   = 0000001D            IRP$B_RMOD       0000000B            
IO$M_NOWAIT    = 00000080            IO$_DRVCLR     = 00000004            IRP$B_TYPE       0000000A            
IO$M_PACKED    = 00000080            IO$_ERASETAPE  = 00000006            IRP$C_LENGTH     0000004C            
IO$M_PURGE     = 00000800            IO$_LOGICAL    = 0000002F            IRP$K_LENGTH     0000004C            
IO$M_READATTN  = 00000080            IO$_MODIFY     = 00000036            IRP$L_AST        00000010            
IO$M_REVERSE   = 00000040            IO$_MOUNT      = 00000039            IRP$L_ASTPRM     00000014            
TTYSTRSTP       - TERMINAL DRIVER START AND STOP I/O ROUTINES    21-AUG-1978 21:02:34   VAX-11 MACRO X0.3-11               Page  10
SYMBOL TABLE                                                                                                                     (5)

IRP$L_DIAGBUF    00000044            PR$_ICR        = 0000001A            TT$M_EIGHTBIT  = 00008000            
IRP$L_IOQBL      00000004            PR$_IPL        = 00000012            TT$M_ESCAPE    = 00000008            
IRP$L_IOQFL      00000000            PR$_ISP        = 00000004            TT$M_HOLDSCREEN= 00004000            
IRP$L_IOSB       00000024            PR$_KSP        = 00000000            TT$M_HOSTSYNC  = 00000010            
IRP$L_IOST1      00000034            PR$_MAPEN      = 00000038            TT$M_LFFILL    = 00000800            
IRP$L_IOST2      00000038            PR$_NICR       = 00000019            TT$M_LOWER     = 00000080            
IRP$L_MEDIA      00000034            PR$_P0BR       = 00000008            TT$M_MBXDSABL  = 00010000            
IRP$L_PID        0000000C            PR$_P0LR       = 00000009            TT$M_MECHTAB   = 00000100            
IRP$L_SEGVBN     00000040            PR$_P1BR       = 0000000A            TT$M_NOBRDCST  = 00020000            
IRP$L_SEQNUM     00000048            PR$_P1LR       = 0000000B            TT$M_NOECHO    = 00000002            
IRP$L_SVAPTE     0000002C            PR$_PCBB       = 00000010            TT$M_NOTYPEAHD = 00000004            
IRP$L_TT_TERM    00000038            PR$_PME        = 0000003D            TT$M_ODD       = 00000080            
IRP$L_UCB        0000001C            PR$_RXCS       = 00000020            TT$M_PAGE      = FE000000            
IRP$L_WIND       00000018            PR$_RXDB       = 00000021            TT$M_PARITY    = 00000040            
IRP$M_BUFIO    = 00000001            PR$_SBIER      = 00000034            TT$M_PASSALL   = 00000001            
IRP$M_CHAINED  = 00000020            PR$_SBIFS      = 00000030            TT$M_READSYNC  = 00040000            
IRP$M_COMPLX   = 00000008            PR$_SBIMT      = 00000033            TT$M_REMOTE    = 00002000            
IRP$M_DIAGBUF  = 00000080            PR$_SBIQC      = 00000036            TT$M_SCOPE     = 00001000            
IRP$M_FUNC     = 00000002            PR$_SBIS       = 00000031            TT$M_SCRIPT    = 00000040            
IRP$M_MBXIO    = 00000400            PR$_SBISC      = 00000032            TT$M_TTSYNC    = 00000020            
IRP$M_PAGIO    = 00000004            PR$_SBITA      = 00000035            TT$M_WRAP      = 00000200            
IRP$M_PHYSIO   = 00000100            PR$_SBR        = 0000000C            TT$S_PAGE      = 00000008            
IRP$M_PRIVIO   = 00000200            PR$_SCBB       = 00000011            TT$V_ALTRPAR   = 00000005            
IRP$M_SWAPIO   = 00000040            PR$_SID        = 0000003E            TT$V_CRFILL    = 0000000A            
IRP$M_VIRTUAL  = 00000010            PR$_SIRR       = 00000014            TT$V_EIGHTBIT  = 0000000F            
IRP$Q_NT_PRVMSK  0000003C            PR$_SISR       = 00000015            TT$V_ESCAPE    = 00000003            
IRP$S_FCODE    = 00000006            PR$_SLR        = 0000000D            TT$V_HOLDSCREEN= 0000000E            
IRP$S_FMOD     = 0000000A            PR$_SSP        = 00000002            TT$V_HOSTSYNC  = 00000004            
IRP$S_MODE     = 00000002            PR$_TBIA       = 00000039            TT$V_LFFILL    = 0000000B            
IRP$V_BUFIO    = 00000000            PR$_TBIS       = 0000003A            TT$V_LOWER     = 00000007            
IRP$V_CHAINED  = 00000005            PR$_TODR       = 0000001B            TT$V_MBXDSABL  = 00000010            
IRP$V_COMPLX   = 00000003            PR$_TXCS       = 00000022            TT$V_MECHTAB   = 00000008            
IRP$V_DIAGBUF  = 00000007            PR$_TXDB       = 00000023            TT$V_NOBRDCST  = 00000011            
IRP$V_FCODE    = 00000000            PR$_USP        = 00000003            TT$V_NOECHO    = 00000001            
IRP$V_FMOD     = 00000006            PR$_WCSA       = 0000002C            TT$V_NOTYPEAHD = 00000002            
IRP$V_FUNC     = 00000001            PR$_WCSD       = 0000002D            TT$V_ODD       = 00000007            
IRP$V_MBXIO    = 0000000A            SS$_BADESCAPE    ********   X   03   TT$V_PAGE      = 00000019            
IRP$V_MODE     = 00000000            SS$_NOPRIV       ********   X   03   TT$V_PARITY    = 00000006            
IRP$V_PAGIO    = 00000002            SS$_NORMAL       ********   X   03   TT$V_PASSALL   = 00000000            
IRP$V_PHYSIO   = 00000008            SS$_PARTESCAPE   ********   X   03   TT$V_READSYNC  = 00000012            
IRP$V_PRIVIO   = 00000009            TT$C_BAUD_110  = 00000003            TT$V_REMOTE    = 0000000D            
IRP$V_SWAPIO   = 00000006            TT$C_BAUD_1200 = 00000008            TT$V_SCOPE     = 0000000C            
IRP$V_VIRTUAL  = 00000004            TT$C_BAUD_134  = 00000004            TT$V_SCRIPT    = 00000006            
IRP$W_ABCNT      0000003C            TT$C_BAUD_150  = 00000005            TT$V_TTSYNC    = 00000005            
IRP$W_BCNT       00000032            TT$C_BAUD_1800 = 00000009            TT$V_WRAP      = 00000009            
IRP$W_BOFF       00000030            TT$C_BAUD_2000 = 0000000A            TT$_LA36       = 00000020            
IRP$W_CHAN       00000028            TT$C_BAUD_2400 = 0000000B            TT$_LAX        = 00000020            
IRP$W_FUNC       00000020            TT$C_BAUD_300  = 00000006            TT$_UNKNOWN    = 00000000            
IRP$W_OBCNT      0000003E            TT$C_BAUD_3600 = 0000000C            TT$_VT05       = 00000001            
IRP$W_SIZE       00000008            TT$C_BAUD_4800 = 0000000D            TT$_VT52       = 00000040            
IRP$W_STS        0000002A            TT$C_BAUD_50   = 00000001            TT$_VT55       = 00000041            
IRP$W_TT_PRMPT   0000003C            TT$C_BAUD_600  = 00000007            TT$_VT5X       = 00000040            
PR$_ACCR       = 00000029            TT$C_BAUD_7200 = 0000000E            TTY$A_HLDSCREEN  ********   X   03   
PR$_ACCS       = 00000028            TT$C_BAUD_75   = 00000002            TTY$A_RLSCREEN   ********   X   03   
PR$_ASTLVL     = 00000013            TT$C_BAUD_9600 = 0000000F            TTY$B_BD_CNT     00000015            
PR$_ESP        = 00000001            TT$M_ALTRPAR   = 00000020            TTY$B_BD_IPL     00000017            
PR$_ICCS       = 00000018            TT$M_CRFILL    = 00000400            TTY$B_BD_REFC    00000016            
TTYSTRSTP       - TERMINAL DRIVER START AND STOP I/O ROUTINES    21-AUG-1978 21:02:34   VAX-11 MACRO X0.3-11               Page  11
SYMBOL TABLE                                                                                                                     (5)

TTY$B_BD_TYPE    0000000A            TTY$L_TA_PUT     00000000            TTY$V_ST_FILL  = 00000003            
TTY$B_BD_WHO     00000014            TTY$L_WB_DATA    0000000C            TTY$V_ST_GETAHD= 00000018            
TTY$B_TA_TYPE    0000000A            TTY$L_WB_END     00000004            TTY$V_ST_MULTI = 00000006            
TTY$C_BELL     = 00000007            TTY$L_WB_NXT     00000000            TTY$V_ST_NL    = 00000015            
TTY$C_BLANK    = 00000020            TTY$M_A        = 00003FFF            TTY$V_ST_NOECHO= 0000000F            
TTY$C_BS       = 00000008            TTY$M_CH_CTRL  = 00000020            TTY$V_ST_NOFLTR= 00000012            
TTY$C_CR       = 0000000D            TTY$M_CH_CTRL2 = 00000080            TTY$V_ST_PASALL= 0000000E            
TTY$C_CTRLC    = 00000003            TTY$M_CH_LOWER = 00000040            TTY$V_ST_PROMPT= 00000011            
TTY$C_CTRLO    = 0000000F            TTY$M_CH_SPEC  = 00000010            TTY$V_ST_READ  = 0000000B            
TTY$C_CTRLQ    = 00000011            TTY$M_ST_BADESC= 00100000            TTY$V_ST_SENDLF= 00000005            
TTY$C_CTRLR    = 00000012            TTY$M_ST_BRDCST= 00000080            TTY$V_ST_SKIPLF= 00000017            
TTY$C_CTRLS    = 00000013            TTY$M_ST_CTRLO = 00001000            TTY$V_ST_TYPFUL= 00000016            
TTY$C_CTRLU    = 00000015            TTY$M_ST_CTRLR = 00000400            TTY$V_ST_UNSOL = 00000019            
TTY$C_CTRLX    = 00000018            TTY$M_ST_CTRLS = 00000004            TTY$V_ST_WRITE = 00000008            
TTY$C_CTRLY    = 00000019            TTY$M_ST_CURSOR= 00000010            TTY$V_ST_WRTALL= 00000010            
TTY$C_CTRLZ    = 0000001A            TTY$M_ST_DEL   = 00002000            TTY$V_ST_XOFF  = 00000001            
TTY$C_DELETE   = 0000007F            TTY$M_ST_EOL   = 00000200            TTY$V_ST_XON   = 00000000            
TTY$C_DOLLAR   = 00000024            TTY$M_ST_ESC   = 00080000            TTY$WRITEDONE    00000221 RG    03   
TTY$C_DS_ACTIVE= 00000001            TTY$M_ST_ESC_O = 04000000            TTY$W_BD_SIZE    00000008            
TTY$C_DS_ATTN1 = 00000002            TTY$M_ST_FILL  = 00000008            TTY$W_RB_ORGHOR  0000000C            
TTY$C_DS_ATTN3 = 00000009            TTY$M_ST_GETAHD= 01000000            TTY$W_RB_SIZE    00000008            
TTY$C_DS_HANG  = 0000000A            TTY$M_ST_MULTI = 00000040            TTY$W_RB_TIMOS   0000000E            
TTY$C_DS_IDLE  = 00000000            TTY$M_ST_NL    = 00200000            TTY$W_TA_SIZE    00000008            
TTY$C_DS_RESET = 0000000B            TTY$M_ST_NOECHO= 00008000            TTY$W_WB_SIZE    00000008            
TTY$C_ESCAPE   = 0000001B            TTY$M_ST_NOFLTR= 00040000            UCB$B_AMOD       00000053            
TTY$C_FC_N_SET = 00000004            TTY$M_ST_PASALL= 00004000            UCB$B_CEX        00000077            
TTY$C_FC_READ  = 00000000            TTY$M_ST_PROMPT= 00020000            UCB$B_CM1        0000004A            
TTY$C_FC_SETC  = 00000003            TTY$M_ST_READ  = 00000800            UCB$B_CM2        0000004B            
TTY$C_FC_SETM  = 00000002            TTY$M_ST_SENDLF= 00000020            UCB$B_DEVCLASS   00000038            
TTY$C_FC_WRITE = 00000001            TTY$M_ST_SKIPLF= 00800000            UCB$B_DEVTYPE    00000039            
TTY$C_FF       = 0000000C            TTY$M_ST_TYPFUL= 00400000            UCB$B_DIPL       00000052            
TTY$C_HIGHIPL  = 00000016            TTY$M_ST_UNSOL = 02000000            UCB$B_DX_SCTCNT  000000A6            
TTY$C_LF       = 0000000A            TTY$M_ST_WRITE = 00000100            UCB$B_ERTCNT     00000070            
TTY$C_LOWA     = 00000061            TTY$M_ST_WRTALL= 00010000            UCB$B_ERTMAX     00000071            
TTY$C_LOWZ     = 0000007B            TTY$M_ST_XOFF  = 00000002            UCB$B_ESCAPE     0000004B            
TTY$C_NL       = 00000080            TTY$M_ST_XON   = 00000001            UCB$B_FEX        00000076            
TTY$C_ONE      = 00000031            TTY$PURGE_AHEAD  ********   X   03   UCB$B_FIPL       0000000B            
TTY$C_PLUS     = 0000002B            TTY$Q_BD_LINK    00000000            UCB$B_LOCSRV     0000003C            
TTY$C_SCRIPT   = 00000060            TTY$READONE      000001F2 RG    03   UCB$B_OFFNDX     00000094            
TTY$C_TAB      = 00000009            TTY$STARTIO      00000000 RG    03   UCB$B_OFFRTC     00000095            
TTY$C_TYPAHDSIZ= 0000004E            TTY$STARTOUTPUT  000001E2 RG    03   UCB$B_REMSRV     0000003D            
TTY$C_VT       = 0000000B            TTY$S_A        = 0000000E            UCB$B_SECTORS    0000003C            
TTY$C_XOFF     = 00000013            TTY$V_A        = 00000000            UCB$B_SLAVE      00000074            
TTY$C_XON      = 00000011            TTY$V_CH_CTRL  = 00000005            UCB$B_SPR        00000075            
TTY$C_ZERO     = 00000030            TTY$V_CH_CTRL2 = 00000007            UCB$B_STATE      00000052            
TTY$GETNEXTCHAR  ********   X   03   TTY$V_CH_LOWER = 00000006            UCB$B_TRACKS     0000003D            
TTY$LOCK         ********   X   03   TTY$V_CH_SPEC  = 00000004            UCB$B_TT_BRDPT   00000098            
TTY$L_BD_DATA    00000018            TTY$V_ST_BADESC= 00000014            UCB$B_TT_CRFILL  0000009D            
TTY$L_BD_FORK    0000000C            TTY$V_ST_BRDCST= 00000007            UCB$B_TT_DECRF   000000A1            
TTY$L_BD_MIN     00000028            TTY$V_ST_CTRLO = 0000000C            UCB$B_TT_DELFF   000000A2            
TTY$L_BD_UCB     00000010            TTY$V_ST_CTRLR = 0000000A            UCB$B_TT_DESPEE  000000A0            
TTY$L_RB_DATA    00000010            TTY$V_ST_CTRLS = 00000002            UCB$B_TT_DETYPE  000000A4            
TTY$L_RB_NXT     00000000            TTY$V_ST_CURSOR= 00000004            UCB$B_TT_DIAL    00000096            
TTY$L_RB_UVA     00000004            TTY$V_ST_DEL   = 0000000D            UCB$B_TT_ESC     00000095            
TTY$L_TA_DATA    00000010            TTY$V_ST_EOL   = 00000009            UCB$B_TT_ESC_O   00000099            
TTY$L_TA_END     0000000C            TTY$V_ST_ESC   = 00000013            UCB$B_TT_FILL    00000097            
TTY$L_TA_GET     00000004            TTY$V_ST_ESC_O = 0000001A            UCB$B_TT_LFFILL  0000009E            
TTYSTRSTP       - TERMINAL DRIVER START AND STOP I/O ROUTINES    21-AUG-1978 21:02:34   VAX-11 MACRO X0.3-11               Page  12
SYMBOL TABLE                                                                                                                     (5)

UCB$B_TT_LINE    00000094            UCB$M_DELMBX   = 00000002            UCB$V_TIMOUT   = 00000006            
UCB$B_TT_SPEED   0000009C            UCB$M_DIAGBUF  = 00000002            UCB$V_TT_NOTIF = 00000002            
UCB$B_TYPE       0000000A            UCB$M_DX_WRITE = 00000008            UCB$V_TT_ODD   = 00000007            
UCB$B_VERTSZ     0000003F            UCB$M_ECC      = 00000001            UCB$V_TT_PARTY = 00000006            
UCB$C_LENGTH     00000074            UCB$M_ERLOGIP  = 00000004            UCB$V_TT_SPEED = 00000000            
UCB$C_LOGLNK   = 00000001            UCB$M_INT      = 00000002            UCB$V_TT_TIMO  = 00000001            
UCB$K_LENGTH     00000074            UCB$M_INTTYPE  = 00000080            UCB$V_UNLOAD   = 0000000C            
UCB$L_AMB        00000054            UCB$M_JOB      = 00000001            UCB$V_VALID    = 0000000B            
UCB$L_ASTQBL     00000010            UCB$M_MOUNTING = 00000200            UCB$W_BCNT       0000006E            
UCB$L_ASTQFL     0000000C            UCB$M_NOCNVRT  = 00000004            UCB$W_BCR        00000096            
UCB$L_CPID       0000005C            UCB$M_NT_BFROVF= 00000004            UCB$W_BOFF       0000006C            
UCB$L_CRB        00000020            UCB$M_NT_BREAK = 00000020            UCB$W_BUFQUO     00000018            
UCB$L_DDB        00000024            UCB$M_NT_NAME  = 00000010            UCB$W_BYTESTOGO  0000003E            
UCB$L_DEVCHAR    00000034            UCB$M_ONLINE   = 00000010            UCB$W_CHARGE     0000004A            
UCB$L_DEVDEPEND  0000003C            UCB$M_POWER    = 00000020            UCB$W_CYLINDERS  0000003E            
UCB$L_DPC        00000080            UCB$M_PRMMBX   = 00000001            UCB$W_DA         0000008C            
UCB$L_DUETIM     0000005C            UCB$M_TIM      = 00000001            UCB$W_DC         0000008E            
UCB$L_DX_BFPNT   0000009C            UCB$M_TIMOUT   = 00000040            UCB$W_DEVBUFSIZ  0000003A            
UCB$L_DX_BUF     00000098            UCB$M_TT_NOTIF = 00000004            UCB$W_DEVSTS     0000005A            
UCB$L_DX_RXDB    000000A0            UCB$M_TT_ODD   = 00000080            UCB$W_DIRSEQ     00000088            
UCB$L_EMB        00000078            UCB$M_TT_PARTY = 00000040            UCB$W_DSTADDR    00000018            
UCB$L_FIRST      00000014            UCB$M_TT_SPEED = 0000003F            UCB$W_DX_BCR     000000A4            
UCB$L_FPC        0000000C            UCB$M_TT_TIMO  = 00000002            UCB$W_EC1        00000090            
UCB$L_FQBL       00000004            UCB$M_UNLOAD   = 00001000            UCB$W_EC2        00000092            
UCB$L_FQFL       00000000            UCB$M_VALID    = 00000800            UCB$W_ERRCNT     00000072            
UCB$L_FR3        00000010            UCB$S_LNKPRI   = 00000002            UCB$W_FUNC       0000007E            
UCB$L_FR4        00000014            UCB$S_LTYPE    = 00000002            UCB$W_MB_SEED    FFFFFFFC            
UCB$L_IOQBL      00000044            UCB$S_TT_ODD   = 00000001            UCB$W_MSGCNT     00000016            
UCB$L_IOQFL      00000040            UCB$S_TT_PARTY = 00000001            UCB$W_MSGMAX     00000014            
UCB$L_IRP        0000004C            UCB$S_TT_SPEED = 00000006            UCB$W_NT_CHAN    0000007C            
UCB$L_LINK       0000002C            UCB$T_PARTNER    0000000C            UCB$W_OFFSET     0000008A            
UCB$L_LOGADR     00000064            UCB$V_BACKP    = 00000005            UCB$W_REFC       00000050            
UCB$L_MAXBLOCK   00000084            UCB$V_BSY      = 00000008            UCB$W_SIZE       00000008            
UCB$L_MEDIA      0000008C            UCB$V_CANCEL   = 00000003            UCB$W_SRCADDR    0000001A            
UCB$L_NT_DATSSB  00000074            UCB$V_DEADMO   = 0000000A            UCB$W_STS        00000058            
UCB$L_NT_INTSSB  00000078            UCB$V_DELMBX   = 00000001            UCB$W_TT_CURSOR  0000009A            
UCB$L_OPCNT      00000060            UCB$V_DIAGBUF  = 00000001            UCB$W_TT_DESIZE  000000A5            
UCB$L_OWNUIC     0000001C            UCB$V_DX_WRITE = 00000003            UCB$W_TT_HOLD    00000090            
UCB$L_PID        00000028            UCB$V_ECC      = 00000000            UCB$W_TT_INAHD   00000092            
UCB$L_RQBL       00000004            UCB$V_ERLOGIP  = 00000002            UCB$W_UNIT       00000048            
UCB$L_RQFL       00000000            UCB$V_INT      = 00000001            UCB$W_VPROT      0000001A            
UCB$L_SVAPTE     00000068            UCB$V_INTTYPE  = 00000007            VEC$B_DATAPATH   00000013            
UCB$L_SVPN       00000064            UCB$V_JOB      = 00000000            VEC$B_NUMREG     00000012            
UCB$L_TTCHAR     0000003C            UCB$V_LNKPRI   = 00000006            VEC$C_LENGTH     00000024            
UCB$L_TT_BRDCST  00000084            UCB$V_LTYPE    = 00000000            VEC$K_LENGTH     00000024            
UCB$L_TT_CTRLC   00000080            UCB$V_MOUNTING = 00000009            VEC$L_ADP        00000014            
UCB$L_TT_CTRLY   0000007C            UCB$V_MSGACK   = 00000004            VEC$L_IDB        00000008            
UCB$L_TT_DECHAR  000000A8            UCB$V_MSGFLO   = 00000003            VEC$L_INITIAL    0000000C            
UCB$L_TT_MULTI   00000078            UCB$V_NOCNVRT  = 00000002            VEC$L_START      0000001C            
UCB$L_TT_RDUE    0000008C            UCB$V_NT_BFROVF= 00000002            VEC$L_UNITDISC   00000020            
UCB$L_TT_STATE   00000074            UCB$V_NT_BREAK = 00000005            VEC$L_UNITINIT   00000018            
UCB$L_TT_TYPAHD  00000088            UCB$V_NT_NAME  = 00000004            VEC$M_MAPLOCK  = 00008000            
UCB$L_VCB        00000030            UCB$V_ONLINE   = 00000004            VEC$M_PATHLOCK = 00000080            
UCB$M_BACKP    = 00000020            UCB$V_POWER    = 00000005            VEC$Q_DISPATCH   00000000            
UCB$M_BSY      = 00000100            UCB$V_PRMMBX   = 00000000            VEC$S_DATAPATH = 00000007            
UCB$M_CANCEL   = 00000008            UCB$V_SEGFLO   = 00000002            VEC$S_MAPREG   = 0000000F            
UCB$M_DEADMO   = 00000400            UCB$V_TIM      = 00000000            VEC$V_DATAPATH = 00000000            
TTYSTRSTP       - TERMINAL DRIVER START AND STOP I/O ROUTINES    21-AUG-1978 21:02:34   VAX-11 MACRO X0.3-11               Page  13
SYMBOL TABLE                                                                                                                     (5)

VEC$V_MAPLOCK  = 0000000F            
VEC$V_MAPREG   = 00000000            
VEC$V_PATHLOCK = 00000007            
VEC$W_MAPREG     00000010            
W              = 041F2F01            
X              = 0000041F            
Z              = 00000000            


PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            FFFFFFFE      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
$$$115_DRIVER    0000028C      03     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT LONG  


THERE WERE NO ERRORS OR WARNINGS.
6974. BYTES LEFT IN FREE MEMORY POOL.
2438. BYTES OF RECLAIMED MEMORY.
OBJ$:TTYSTRSTP,LIS$:TTYSTRSTP/-SP=EXECML$/ML,SRC$:TTYSTRSTP
12 MLB DIR RDS - 1013 GETS TO DEFINE 23 MACROS. 85 INTER. FILE WRITES. 
