DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (2)     219  DECLARATIONS
   (3)     319  BEGINHERE	- called by DCL via DBGBOOT
   (4)     449  START_DEBUG	- DEBUG setup
   (5)     594  PRIMARY_HANDLER
   (6)     697  WINDOW_HANDLER	- Call frame exception handler
   (7)     748  TERM_HANDLER	- Termination handler for DEBUG
   (7)     786  DBG$LAST_CHANCE	- The last chance handler
   (8)     806  DBG$PSEUDO_PROG	- Structure to implement CALL
   (9)     901  DBG$FINAL_HANDL	- Call frame exception handler
   (10)   1093  DBG$OUT_MESSAGE	- Write SYS$PUTMSG output to DB
   (11)   1124  DBG$CHECK_PROT	- Makes page writable
   (12)   1174  DBG$REDO_PROT	- Sets page to read only
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page   1
000050                                                                                                                           (1)

                                     0000     1 	.TITLE	DBGSTART
                                     0000     2 	.IDENT	'000050'
                                     0000     3 
                                     0000     4 
                                     0000     5 ; COPYRIGHT (C) 1977
                                     0000     6 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
                                     0000     7 ;
                                     0000     8 ; THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR USE ONLY ON A
                                     0000     9 ; SINGLE COMPUTER SYSTEM AND MAY BE COPIED ONLY WITH THE INCLUSION
                                     0000    10 ; OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE, OR ANY
                                     0000    11 ; OTHER COPIES THEREOF, MAY NOT BE PROVIDED OR OTHERWISE MADE
                                     0000    12 ; AVAILABLE TO ANY OTHER PERSON EXCEPT FOR USE ON SUCH SYSTEM
                                     0000    13 ; AND TO ONE WHO AGREES TO THESE LECENSE TERMS. TITLE TO AND
                                     0000    14 ; OWNERSHIP OF THE SOFTWARE SHALL AT ALL TIMES REMAIN INDEC.
                                     0000    15 ;
                                     0000    16 ; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT
                                     0000    17 ; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
                                     0000    18 ; EQUIPMENT CORPORATION.
                                     0000    19 ;
                                     0000    20 ; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF ITS
                                     0000    21 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
                                     0000    22 
                                     0000    23 ;++
                                     0000    24 ; FACILITY: DEBUG
                                     0000    25 ;
                                     0000    26 ; ABSTRACT: 
                                     0000    27 ;	START UP MODULE FOR DEBUG FACILITY.
                                     0000    28 ;
                                     0000    29 ; ENVIRONMENT:
                                     0000    30 ;	ROUTINE BEGINHERE CALLS START_DEBUG WITH THE SAME
                                     0000    31 ;	ARGUMENT LIST THAT CLI SENT. START_DEBUG CALLS THE
                                     0000    32 ;	EXCEPTION HANDLER THAT INITIATES THE COMMAND HANDLING.
                                     0000    33 ;
                                     0000    34 ; REVISION HISTORY:
                                     0000    35 ;
                                     0000    36 ;	000006	02-03-77	CP	ADD PSECT DECLARATIONS
                                     0000    37 ;					RETURN SUCCESS VALUE IN R0
                                     0000    38 ;					WHEN RETURNING TO CLI.
                                     0000    39 ;	000007	07-04-77	CP	COMMENT OUT AST ENABLE
                                     0000    40 ;					AND DISABLE CODE FOR NOW.
                                     0000    41 ;	000008	12-04-77	CP	SAVE PSL WHEN SAVING USER
                                     0000    42 ;					REGISTERS. IN TERMINATION
                                     0000    43 ;					HANDLER, SET START ADDRESS
                                     0000    44 ;					TO ZERO. MAKE PRIMARY EXCEPTION
                                     0000    45 ;					HANDLER A GLOBAL ROUTINE.
                                     0000    46 ;	000009	20-04-77	CP	OUTPUT EXIT ANNOUNCEMENT
                                     0000    47 ;					and status code when going
                                     0000    48 ;					THROUGH TERMINATION HANDLER.
                                     0000    49 ;	000010	21-04-77	CP	Change computation of
                                     0000    50 ;					SP in PRIM_HANDL so that
                                     0000    51 ;					it works on OS created
                                     0000    52 ;					exception lists and BLISS copied
                                     0000    53 ;					exception lists.
                                     0000    54 ;	000011	22-04-77	CP	REENABLE AST LOGIC.
                                     0000    55 ;	000012	27-04-77	CP	MOVE MAIN ROUTINE OF
                                     0000    56 ;					DEBUG INTO THIS MODULE.
                                     0000    57 ;					HAVE IT CALL START_DEBUG
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page   2
000050                                                                                                                           (1)

                                     0000    58 ;					WITH CLI'S ARGUMENT LIST.
                                     0000    59 ;	000013	28-04-77	cP	rename PSECTS to begin
                                     0000    60 ;					with _DBG. declare on stack
                                     0000    61 ;					handler in beginhere.
                                     0000    62 ;	14	18-05-77	CP	Change initial fake exception
                                     0000    63 ;					to SS$_DEBUG.
                                     0000    64 ;	15	19-05-77	CP	Evaluate result of SETAST
                                     0000    65 ;					call with CMPL instruction,
                                     0000    66 ;					not BITL.
                                     0000    67 ;	16	06-06-77	CP	Recognize end of user image in
                                     0000    68 ;					BEGINHERE. Output message, and
                                     0000    69 ;					reestablish the phony exception
                                     0000    70 ;					frame by CALLGing to RESTART_2.
                                     0000    71 ;	17	09-06-77	CP	CHANGE W^ SPECIFICATIONS TO 
                                     0000    72 ;					DEFAULT (NAMELY L^).
                                     0000    73 ;	18	23-06-77	CP	Add global label dbg$user_exit
                                     0000    74 ;					to routine BEGINHERE. This label
                                     0000    75 ;					can be recognized by the stepping
                                     0000    76 ;					handlers as a sign to turn off
                                     0000    77 ;					the tbit.
                                     0000    78 ;	19	07-07-77	CP	Rewrite BEGINHERE and the
                                     0000    79 ;					termination handler to use new
                                     0000    80 ;					CLI argument list and to force
                                     0000    81 ;					a sys$exit when the user program
                                     0000    82 ;					returns. Thus, our termination
                                     0000    83 ;					handler does not get called until
                                     0000    84 ;					the user has performed termination
                                     0000    85 ;					activities. In PRIM_HANDL, set
                                     0000    86 ;					dbg$gb_debug after disabling
                                     0000    87 ;					ASTs and turn it off before
                                     0000    88 ;					reenabling them.
                                     0000    89 ;	20	15-08-77	CP	Change reading of argument list
                                     0000    90 ;					to coordinate with new (BL4)
                                     0000    91 ;					image activator.
                                     0000    92 ;	21	17-08-77	CP	Call dbg$init_debug with no 
                                     0000    93 ;					arguments. Call dbg$find_dst with the
                                     0000    94 ;					address of the result name
                                     0000    95 ;					counted string of the EXE file's
                                     0000    96 ;					file specification and the address
                                     0000    97 ;					of the image header info. Move the
                                     0000    98 ;					setting of dbg$gb_debug to
                                     0000    99 ;					restart_1 in an attempt to solve
                                     0000   100 ;					the infinite loop through the
                                     0000   101 ;					termination handler bug. Delete
                                     0000   102 ;					the second and presumably unnecessary
                                     0000   103 ;					setting of dbg$gl_start_ad in
                                     0000   104 ;					start_debug. Also set gl_uregs
                                     0000   105 ;					with this PC value since the RST
                                     0000   106 ;					initialization needs it. Add a
                                     0000   107 ;					new handler, dbg$final_handl, to
                                     0000   108 ;					this module. It was in DBGEXC in
                                     0000   109 ;					BLISS but there were register
                                     0000   110 ;					clobbering problems.
                                     0000   111 ;	22	22-AUG-77	KGP	-CHANGED HOW WE PICK UP THE ADDRESS
                                     0000   112 ;					 OF THE FILE_NAME FROM THE IFD
                                     0000   113 ;					 STRUCT BECAUSE THE OFFSET WE PICPICK
                                     0000   114 ;					 UP IS A WORD, NOT A LONGWORD.
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page   3
000050                                                                                                                           (1)

                                     0000   115 ;					 (NOW WE DO MOVZWL, NOT MOVL).
                                     0000   116 ;					-ALSO CHANGED A MOVZBL OF SS$_RESIGNAL
                                     0000   117 ;					 TO A MOVZWL CAUSE AS OF BL4,
                                     0000   118 ;					 PRESUMABLY, THE SS CODES ARE 1 WORD
                                     0000   119 ;					 LONG.  (I DON'T REALLY KNOW THIS,
                                     0000   120 ;					 IT'S JUST THAT LNK GIVES A 
                                     0000   121 ;					  TRUNCATION MESSAGE OTHERWISE.)
                                     0000   122 ;	23	08-09-77	CP	Integrate global section requirements
                                     0000   123 ;					like the initial vector that
                                     0000   124 ;					contains the beginning and end
                                     0000   125 ;					of writable storage plus the
                                     0000   126 ;					start address of writable
                                     0000   127 ;					DEBUG.
                                     0000   128 ;	24	19-09-77	CP	Make the declaration of addresses
                                     0000   129 ;					in the termination dynamic so
                                     0000   130 ;					that they are PIC. Also, load
                                     0000   131 ;					start_ad into PC in the register
                                     0000   132 ;					vector, not into R0 as in the
                                     0000   133 ;					buggy version.
                                     0000   134 ;	000025	12-10-77	CP	Rewrite final_handl to be
                                     0000   135 ;					the general error handler and
                                     0000   136 ;					reporter for all of DEBUG.
                                     0000   137 ;	000026	27-10-77	CP	Call end_of_line instead of
                                     0000   138 ;					end_of_cmd.
                                     0000   139 ;	000027	01-11-77	CP	Redefine variables dbg$k_reset_prt
                                     0000   140 ;					and dbg$k_no_reset. Put them in
                                     0000   141 ;					dbgdef.
                                     0000   142 ;	000028	02-11-77	CP	In beginhere, when the user program
                                     0000   143 ;					completes, call termination handler
                                     0000   144 ;					with real, not user saved, R0.
                                     0000   145 ;					Change references to start_ad to
                                     0000   146 ;					dbg$gl_uregs+<15*4>.
                                     0000   147 ;	000029	03-11-77	CP	Change place where registers are
                                     0000   148 ;					found to the block pointed to by
                                     0000   149 ;					dbg$gl_runframe.
                                     0000   150 ;	000030	08-11-77	CP	Add code labeled dbg$pseudo_prog
                                     0000   151 ;					that constructs another phony
                                     0000   152 ;					exception frame, and CALLGs the
                                     0000   153 ;					user's CALLed routine as though
                                     0000   154 ;					it were the user's program.
                                     0000   155 ;	000031	30-dec-77	KGP	-added parameter passing code in
                                     0000   156 ;					 final_handler for DEBUG messages.
                                     0000   157 ;	000032	12-jan-78	KGP	-Set flag that says that DEBUG is in
                                     0000   158 ;					 control in TERM_HANDLER, NOT just 
                                     0000   159 ;					 after DBG$USER_EXIT because we don't
                                     0000   160 ;					 really have control until $EXIT_S
                                     0000   161 ;					 has exhausted users' exit handlers.
                                     0000   162 ;	000033	23-jan-78	KGP	-Value printed after DBG>CALL <rtn>
                                     0000   163 ;					 is now done in current MODE
                                     0000   164 ;					-"image exit status" is now displayed
                                     0000   165 ;					 via system GET_MESSAGE
                                     0000   166 ;	000034	31-jan-78	KGP	-Fixed bug in restoring R0,R1 on
                                     0000   167 ;					 initial startup of user prog. 
                                     0000   168 ;					 We now restore from mechanism 
                                     0000   169 ;					 just as VAX/VMS does after a real
                                     0000   170 ;					 exception.
                                     0000   171 ;	000035	1-feb-78	KGP	-Building of phony exception arg list
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page   4
000050                                                                                                                           (1)

                                     0000   172 ;					 now puts SAVED_R0_R1 into mechanism.
                                     0000   173 ;					 This preserves R0,R1 across $EXIT_S.
                                     0000   174 ;	36	01-Mar-78	DAR	Moved DBG$PLIT to section after declarations
                                     0000   175 ;					Cancel ctrl-O moved to after check for
                                     0000   176 ;					RESIGNAL in DBG$FINAL_HANDL.
                                     0000   177 ;					After GETMSG_S use $FAOL instead of $FAO_S.
                                     0000   178 ;	37	21-Mar-78	DAR	Call SYS$PUTMSG instead of GETMSG and
                                     0000   179 ;					FAOL in final handler.  Also added routine
                                     0000   180 ;					DBG$OUT_MESSAGE to write the formatted
                                     0000   181 ;					string to DBG$OUTPUT.
                                     0000   182 ;	38	23-Mar-78	DAR	Removed conditional call to DBG$OUT_NAM_VAL
                                     0000   183 ;					in the termination handler.
                                     0000   184 ;	39	06-apr-78	KGP	-Added label DBG$PSEUDO_EXIT so that
                                     0000   185 ;					 EXC can know when a STEP runs off the
                                     0000   186 ;					 end of a DBG>CALLed routine.
                                     0000   187 ;	40	10-apr-78	KGP	-We now DON'T purge type ahead for
                                     0000   188 ;					 success or informational messages.
                                     0000   189 ;	41	13-APR-78	DAR	Added the LAST CHANCE HANDLER.
                                     0000   190 ;	42	18-APR-78	DAR	Last chance handler message and
                                     0000   191 ;					image exit message now come from the
                                     0000   192 ;					message file.
                                     0000   193 ;	43	05-MAY-78	KGP	This module now declares psect DBG$GLOBAL
                                     0000   194 ;					and defines label DBG$BPTLEGAL since
                                     0000   195 ;					module DBGBREAK is no longer used.
                                     0000   196 ;	44	11-MAY-78	KGP	-Moved RESTART_2, the 'entry' point
                                     0000   197 ;					 used by PSEUDO_PROG (for DBG>CALL ...)
                                     0000   198 ;					 back 2 instructions so that R0,R1
                                     0000   199 ;					 get restored properly after CALL
                                     0000   200 ;	45	12-MAY-78	KGP	Fixed logic to save state of user's AST.
                                     0000   201 ;	46	24-MAY-78	DAR	Initialize 'IV' and 'DV' bits in PSL 
                                     0000   202 ;					according to transfer address's entry mask.
                                     0000   203 ;	47	09-JUN-78	DAR	Changed psect attributes of DBG$ABS_ZERO
                                     0000   204 ;					DBG$PLIT, and DBG$CODE so that there are
                                     0000   205 ;					only 2 blocks of the debugger instead of
                                     0000   206 ;					3 and so that the vector in DBG$ABS_ZERO
                                     0000   207 ;					is still in the front of the image.
                                     0000   208 ;	48	12-JUN-78	DAR	Added label dbg$term_handlr and made label
                                     0000   209 ;					prim_handl_2 global so we won't t-bit trap
                                     0000   210 ;					through the debugger.
                                     0000   211 ;	49	13-JUN-78	DAR	DEBUG can now be started after "ctrl-Y"
                                     0000   212 ;					"DEBUG".  Added a call frame handler put
                                     0000   213 ;					up by the primary handler to catch exceptions
                                     0000   214 ;					during the servicing of an exception.
                                     0000   215 ;	50	19-JUL-78	DAR	DEBUG's PSECT definitions are changed
                                     0000   216 ;					to work with the new link option /SHARE
                                     0000   217 ;--
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page   5
000050          DECLARATIONS                                                                                                     (2)

                                     0000   219 	.SBTTL	DECLARATIONS
                                     0000   220 
                                     0000   221 	.EXTRN	DBG$CP_OUT_STR, DBG$GB_DEBUG, DBG$GL_BUF_SIZ
                                     0000   222 	.EXTRN	DBG$GL_INPRAB, DBG$GL_OUTPRAB, DBG$GL_RUNFRAME
                                     0000   223 	.EXTRN	PRT$C_UW
                                     0000   224 	.EXTRN	DBG$END_OF_LINE, DBG$EXC_HANDLER, DBG$FAO_PUT, DBG$FIND_DST
                                     0000   225 	.EXTRN	DBG$FREERELEASE, DBG$INIT_DEBUG, DBG$OUT_NUM_VAL, DBG$OUT_PUT
                                     0000   226 	.EXTRN	DBG$PUTMSG, DBG$INS_OPCODES, LIB$SIGNAL, SYS$DCLEXH, SYS$EXIT
                                     0000   227 	.EXTRN	SYS$GETMSG, SYS$PUT, SYS$SETAST, SYS$SETPRT, SYS$UNWIND
                                     0000   228 
                                     0000   229 
                                     0000   230 ;
                                     0000   231 ; invoke data definitions
                                     0000   232 ;
                                     0000   233 	$CLIDEF			; CLI status bit definitions
                                     0000   234 	$DBGDEF			; DEBUG DEFINITIONS
                                     0000   235 	$IFDDEF			; image file definitions
                                     0000   236 	$RABDEF			; RAB definitions
                                     0000   237 	$SSDEF			; system error codes
                                     0000   238 	$STSDEF			; status code field labels
                                     0000   239 
                                     0000   240 ;
                                     0000   241 ; Equated symbols
                                     0000   242 ;
                           00000000  0000   243 	dbg_start1	= 0		; debug diagnostic switch, 0 => no messages
                           00000000  0000   244 	dbg_start2	= 0		; Last chance handler diagnostics
                           00000100  0000   245 	buf_siz		= 256		; length of getmsg, FAO, and $PUT buffers
                           00000002  0000   246 	dbg_facility	= 2		; DEBUG facility code.
                           0000000E  0000   247 	integer_ovr	= 14		; integer overflow bit in entry mask
                           0000000F  0000   248 	divide_ovr	= 15		; divide overflow bit in entry mask
                           00000020  0000   249 	DBG$M_IV_BIT	= ^X20		; bit 5 in PSL is integer overflow enable
                           00000080  0000   250 	DBG$M_DV_BIT	= ^X80		; bit 7 in PSL is divide overflow enable
                                     0000   251 
                                     0000   252 ;+
                                     0000   253 ; Special vector that contains the beginning and end address of
                                     0000   254 ; DEBUG's writable storage area. The third value in the vector is
                                     0000   255 ; the transfer address of DEBUG that is in this module.
                                     0000   256 ;-
                                 00000000   257 	.PSECT	DBG$ABS_ZERO LONG, PIC, SHR, NOWRT, EXE
                                     0000   258 
                           00000000' 0000   259 	.ADDRESS writable_stor			; lowest writable storage location
                           000005FF' 0004   260 	.ADDRESS writable_stor + <3*^X200> - 1	; highest writable location (3 pages)
                           00000002' 0008   261 	.LONG	 beginhere+2			; start address of mapped DEBUG
                                     000C   262 
                                     000C   263 
                                 00000000   264 	.PSECT	DBG$GLOBAL LONG, PIC, NOSHR, NOEXE
                                     0000   265 
                                     0000   266 writable_stor:					; Define lowest writable address
                                     0000   267 
                                     0000   268 
                                     0000   269 ;
                                     0000   270 ; OWN STORAGE
                                     0000   271 ;
                                 00000000   272 	.PSECT	DBG$OWN LONG, PIC, NOSHR, NOEXE
                                     0000   273 
                                     0000   274 term_reason:
                           00000000  0000   275 	.LONG	0		; LOCATION FOR TERMINATION REASON
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page   6
000050          DECLARATIONS                                                                                                     (2)

                                     0004   276 termin_block:
                           00000000  0004   277 	.LONG	0		; FORWARD LINK
                           00000000  0008   278 	.LONG	0		; address of termination handler
                           00000001  000C   279 	.LONG	1		; ARGUMENT COUNT
                           00000000  0010   280 	.LONG	0		; address of termination reason
                                     0014   281 
                                     0014   282 OLD_LAST_CHANCE:
                           00000000  0014   283 	.LONG	0		; Holds the address of the previous last
                                     0018   284 				; chance handler.
                                     0018   285 
                                     0018   286 SAVED_AP:
                           00000000  0018   287 	.LONG	0		; FOR ORIGINAL AP
                                     001C   288 SAVED_FP:
                           00000000  001C   289 	.LONG	0		; FOR ORIGINAL FP
                                     0020   290 SAVED_R0:
                           00000000  0020   291 	.LONG	0		; R0 and R1 are saved contiguously so that
                                     0024   292 SAVED_R1:
                           00000000  0024   293 	.LONG	0		; they can be preserved across $EXIT_S
                                     0028   294 
                                     0028   295 msg_length:
                               0000  0028   296 	.WORD	0		; holds temporary buffer lengths
                                     002A   297 fao_buf:
                           0000012A  002A   298 	.BLKB	buf_siz		; buffer for FAO messages
                                     012A   299 faobufdesc:
                           00000100  012A   300 	.LONG	buf_siz		; length of FAO buffer
                           00000000  012E   301 	.LONG	0		; address of FAO buffer
                                     0132   302 
                                     0132   303 
                                 00000000   304 	.PSECT	DBG$PLIT BYTE, PIC, SHR, NOWRT, EXE
                                     0000   305 
                                     0000   306 routine_value:
72 75 74 65 72 20 65 75 6C 61 76 00' 0000   307 	.ASCIC \value returned is \
               20 73 69 20 64 65 6E  000C       
                                 12  0000       
                                     0013   308 
                           00000000  0013   309 .IF NE DBG_START1
                                     0013   310 
                                     0013   311 code_message:
                                     0013   312 	.ASCIC	\code is !XL\
                                     0013   313 frame_info:
                                     0013   314 	.ASCIC	\frame is at !XL, count is !SL\
                                     0013   315 sig_arg_list:
                                     0013   316 	.ASCIC	\Signal argument list:!/!#(9XL)\
                                     0013   317 .ENDC
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page   7
000050          BEGINHERE - called by DCL via DBGBOOT                                                                            (3)

                                     0013   319 .SBTTL	BEGINHERE	- called by DCL via DBGBOOT
                                     0013   320 
                                     0013   321 ;++
                                     0013   322 ; FUNCTIONAL DESCRIPTION:
                                     0013   323 ;	Declares the stack frame exception handler dbg$final_handl.
                                     0013   324 ;	Then calls START_DEBUG passing along the original argument list.
                                     0013   325 ;	The argument list from CLI looks as follows:
                                     0013   326 ;
                                     0013   327 ;	AP --->	----------------
                                     0013   328 ;		|            6 |
                                     0013   329 ;		----------------
                                     0013   330 ;		|  address of  |
                                     0013   331 ;		| transfer vect|
                                     0013   332 ;		----------------
                                     0013   333 ;		|   parsing    |
                                     0013   334 ;		|  information |
                                     0013   335 ;		----------------
                                     0013   336 ;		| image header |
                                     0013   337 ;		|  information |
                                     0013   338 ;		----------------
                                     0013   339 ;		|  image file  |
                                     0013   340 ;		|  information |
                                     0013   341 ;		----------------
                                     0013   342 ;		| LINK status  |
                                     0013   343 ;		|   bits       |
                                     0013   344 ;		----------------
                                     0013   345 ;		|  CLI status  |
                                     0013   346 ;		|   bits       |
                                     0013   347 ;		----------------
                                     0013   348 ;
                                     0013   349 ;	The transfer vector has three or less transfer addresses in it.
                                     0013   350 ;	They are ordered as in the picture below:
                                     0013   351 ;
                                     0013   352 ;		----------------
                                     0013   353 ;		|     DEBUG    |
                                     0013   354 ;		|    transfer  |
                                     0013   355 ;		|    address   |
                                     0013   356 ;		----------------
                                     0013   357 ;		| OTS transfer |
                                     0013   358 ;		|    address   |
                                     0013   359 ;		----------------
                                     0013   360 ;		|     user     |
                                     0013   361 ;		|    transfer  |
                                     0013   362 ;		|    address   |
                                     0013   363 ;		----------------
                                     0013   364 ;
                                     0013   365 ;	If the DEBUG or OTS transfer addresses are absent, the subsequent
                                     0013   366 ;	addresses are moved upward in the list.
                                     0013   367 ;
                                     0013   368 ;	When the user program runs to completion, then control runs
                                     0013   369 ;	back to the label dbg$user_exit. If DEBUG really wants to
                                     0013   370 ;	exit, then just return from beginhere. Otherwise, force a
                                     0013   371 ;	SYS$EXIT with the user's value of R0.  Our termination
                                     0013   372 ;	handler, then reports this R0 as a system message.  The rest of
                                     0013   373 ;	this routine, starting at beginhere_2, is jumped to from the
                                     0013   374 ;	termination handler. It recreates the original argument list
                                     0013   375 ;	(with a new R0,R1 pair to preserve them across $EXIT_S),
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page   8
000050          BEGINHERE - called by DCL via DBGBOOT                                                                            (3)

                                     0013   376 ;	and moves back through the restart logic to the command
                                     0013   377 ;	processor.
                                     0013   378 ;
                                     0013   379 ; CALLING SEQUENCE:
                                     0013   380 ;	4(AP)	- Address of the transfer vector.
                                     0013   381 ;		- Address of the Condition Handler argument list
                                     0013   382 ;		  if CLI$V_DBGEXCP is set in 24(AP) indicating that
                                     0013   383 ;		  the program was run without DEBUG initially.
                                     0013   384 ;	8(AP)	- Parsing information.
                                     0013   385 ;	12(AP)	- Image header information.
                                     0013   386 ;	16(AP)	- Image file information.
                                     0013   387 ;	20(AP)	- Link status bits.
                                     0013   388 ;	24(AP)	- CLI status bits.
                                     0013   389 ;
                                     0013   390 ;
                                     0013   391 ; IMPLICIT INPUTS:
                                     0013   392 ;	NONE
                                     0013   393 ;
                                     0013   394 ;
                                     0013   395 ; IMPLICIT OUTPUTS:
                                     0013   396 ;	NONE
                                     0013   397 ;
                                     0013   398 ; ROUTINE VALUE:
                                     0013   399 ;	WHATEVER IS IN R0
                                     0013   400 ;
                                     0013   401 ; SIDE EFFECTS:
                                     0013   402 ;	NONE
                                     0013   403 ;--
                                     0013   404 
                                 00000000   405 	.PSECT	DBG$CODE BYTE, PIC, SHR, NOWRT, EXE
                                     0000   406 
                               0000' 0000   407 	.ENTRY	BEGINHERE, ^M<>		; Null entry mask
                                     0002   408 
   00000000'EF            01     90  0002   409 	MOVB	#1, dbg$gb_debug	; set flag saying that DEBUG is
                                     0009   410 					; running.
         18 AC            10     E1  0009   411 	BBC	#CLI$V_DBGEXCP,24(AP),10$ ; Branch if normal start for DEBUG
                          27         000D       
                                     000E   412 
            50         04 AC     D0  000E   413 	MOVL	4(AP),R0		; Pick up address of condition handler
                                     0012   414 					; argument list
            50         08 A0     D0  0012   415 	MOVL	8(R0),R0		; Get address of MECHANISM ARRAY
         04 B0       0432'CF     DE  0016   416 	MOVAL	W^DBG$FINAL_HANDL,@4(R0) ; Establish final exception handler
   0000001C'EF         04 A0     D0  001C   417 	MOVL	4(R0), SAVED_FP		; Save original FP
   00000018'EF            5C     D0  0024   418 	MOVL	AP, SAVED_AP		; Save current AP
   00000020'EF         0C A0     7D  002B   419 	MOVQ	12(R0), SAVED_R0	; Save current R0 and R1
                          46'    11  0033   420 	BRB	START_DEBUG+2		; Start up the debugger
                                     0035   421 
            6D       0432'CF     DE  0035   422 10$:	MOVAL	W^dbg$final_handl,(FP)	; DECLARE AN EXCEPTION HANDLER FOR
                                     003A   423 					; THIS CALL FRAME
   0000001C'EF            5D     D0  003A   424 	MOVL	FP, SAVED_FP		; SAVE CURRENT FP
         04 AC            04     C0  0041   425 	ADDL2	#4, 4(AP)		; this is address of
                                     0045   426 					; user or OTS transfer address
   00000018'EF            5C     D0  0045   427 	MOVL	AP, SAVED_AP		; SAVE CURRENT AP
                                     004C   428 
         79'AF            6C     FA  004C   429 	CALLG	(AP), B^start_debug	; call the real debugger
                                     0050   430 
                                     0050   431 dbg$user_exit::
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page   9
000050          BEGINHERE - called by DCL via DBGBOOT                                                                            (3)

            21   00000000'EF     E8  0050   432 	BLBS	dbg$gb_exit_dbg, debug_return	; return if DEBUG exiting
   00000020'EF            50     7D  0057   433 	MOVQ	R0, SAVED_R0		; Stuff away for later restoration.
                                     005E   434 	$EXIT_S	R0			; force a sys$exit with the
                                     0067   435 					; user's R0 value as the code.
                                     0067   436 
                                     0067   437 beginhere_2:
            50   00000000'EF     D0  0067   438 	MOVL	dbg$gl_runframe, R0	; get block that contains user
                                     006E   439 					; registers
                       40 A0     D4  006E   440 	CLRL	dbg$l_user_pc(R0)	; clear start address so user
                                     0071   441 					; cannot easily restart program
       0147'CF            6C     FA  0071   442 	CALLG	(AP), W^restart		; restart here
                          D8     11  0076   443 	BRB	dbg$user_exit		; if ever return again, repeat
                                     0078   444 					; this loop.
                                     0078   445 
                                     0078   446 debug_return:
                                 04  0078   447 	RET				; don't need to set R0 here, 
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  10
000050          START_DEBUG - DEBUG setup                                                                                        (4)

                                     0079   449 .SBTTL	START_DEBUG	- DEBUG setup
                                     0079   450 
                                     0079   451 ;++
                                     0079   452 ; FUNCTIONAL DESCRIPTION:
                                     0079   453 ;	SETS UP THE PRIMARY EXCEPTION VECTOR.
                                     0079   454 ;	INITIALIZES THE DEBUG CONTEXT.
                                     0079   455 ;	DECLARES A TERMINATION HANDLER THAT IS INVOKED BY SYS$EXIT.
                                     0079   456 ;	BUILDS AN EXCEPTION ARGUMENT LIST AND CALLS PRIMARY_HANDLER TO
                                     0079   457 ;	REACH THE ROUTINE THAT ACCEPTS USER COMMANDS.
                                     0079   458 ;	WHEN THE USER PROGRAM COMPLETES, THE EXCEPTION
                                     0079   459 ;	HANDLER RETURNS HERE, AND THE CALL IS REGENERATED.
                                     0079   460 ;
                                     0079   461 ; CALLING SEQUENCE:
                                     0079   462 ;	4(AP)	- Address of the transfer vector.
                                     0079   463 ;		- Address of the Condition Handler argument list
                                     0079   464 ;		  if CLI$V_DBGEXCP is set in 24(AP) indicating that
                                     0079   465 ;		  the program was run without DEBUG initially.
                                     0079   466 ;	8(AP)	- Parsing information.
                                     0079   467 ;	12(AP)	- Image header information.
                                     0079   468 ;	16(AP)	- Image file information.
                                     0079   469 ;	20(AP)	- Link status bits.
                                     0079   470 ;	24(AP)	- CLI status bits.
                                     0079   471 ;
                                     0079   472 ; IMPLICIT INPUTS:
                                     0079   473 ;	THE NAME OF THE EXCEPTION HANDLER.
                                     0079   474 ;	THE ADDRESS OF THE TERMINATION CONTROL BLOCK.
                                     0079   475 ;	R0 and R1 are saved away - we insert them into the
                                     0079   476 ;	phony mechanism so they will be preserved.
                                     0079   477 ;
                                     0079   478 ; IMPLICIT OUTPUTS:
                                     0079   479 ;	NONE
                                     0079   480 ;
                                     0079   481 ; ROUTINE VALUE:
                                     0079   482 ;	NONE
                                     0079   483 ;
                                     0079   484 ; SIDE EFFECTS:
                                     0079   485 ;	STARTS THE DEBUG FACILITY
                                     0079   486 ;--
                                     0079   487 
                                     0079   488 START_DEBUG:
                               0000  0079   489 	.WORD	^M<>			; Null entry mask
                                     007B   490 
                                     007B   491 	$SETEXV_S vector = #2,addres=DBG$LAST_CHANCE,-	; Declare last chance
                                     007B   492 		  prvhnd = OLD_LAST_CHANCE		; handler.
            16            50     E9  0092   493 	BLBC	R0, 5$					; Skip if error.
                                     0095   494 	$SETEXV_S vector = #0,addres = primary_handler	; Declare a primary vector
                                     00A8   495 							; to have first rights exceptions
            03            50     E8  00A8   496 	BLBS	R0, 7$					; Skip if cool
                          0084   31  00AB   497 5$:	BRW	error_signal				; RETURN STATUS OF ZERO IS ERROR
                                     00AE   498 
   00000000'EF            00     FB  00AE   499 7$:	CALLS	#0, dbg$init_debug	; initialize DEBUG context.
         18 AC            10     E0  00B5   500 	BBS	#CLI$V_DBGEXCP,24(AP),20$ ; Skip PC - PSL initialization if
                          28         00B9       
                                     00BA   501 					  ; started after ctrl-Y.
            50   00000000'EF     D0  00BA   502 	MOVL	dbg$gl_runframe, R0	; get current block that has
                                     00C1   503 					; user registers
         04 BC            02     C1  00C1   504 	ADDL3	#2,@4(AP),dbg$l_user_pc(R0) ; store the transfer address of
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  11
000050          START_DEBUG - DEBUG setup                                                                                        (4)

                       40 A0         00C5       
                                     00C7   505 					    ; the user program.
                       44 A0     DC  00C7   506 	MOVPSL	dbg$l_user_psl(R0)	; Initialize the program status longword
            51         04 BC     D0  00CA   507 	MOVL	@4(AP), R1		; Get address of entry mask
            61            0F     E1  00CE   508 	BBC	#divide_ovr,(R1),10$	; skip if divide overflow not enabled
                          08         00D1       
         44 A0   00000080 8F     C8  00D2   509 	BISL2	#DBG$M_DV_BIT, dbg$l_user_psl(R0) ; set divide overflow enable
            61            0E     E1  00DA   510 10$:	BBC	#integer_ovr,(R1),20$	; skip if integer overflow not enabled
                          04         00DD       
         44 A0            20     C8  00DE   511 	BISL2	#DBG$M_IV_BIT, dbg$l_user_psl(R0) ; set integer oberflow enable
                                     00E2   512 
                          01     DD  00E2   513 20$:	PUSHL	#1			; send a true flag to dbg$find_dst
                                     00E4   514 					; so that it performs the open
                                     00E4   515 					; and the create and map.
                       0C AC     DD  00E4   516 	PUSHL	12(AP)			; push the address of the
                                     00E7   517 					; image header information prepared
                                     00E7   518 					; by the image activator.
            50         10 AC     D0  00E7   519 	MOVL	16(AP), R0		; get the address of the image file
            51         02 A0     3C  00EB   520 	MOVZWL	ifd$w_filnamoff(R0),R1
            51            50     C1  00EF   521 	ADDL3	R0,R1,-(SP)		; and push onto stack
                          7E         00F2       
   00000000'EF            03     FB  00F3   522 	CALLS	#3, dbg$find_dst	; and initialize the symbol tables.
         18 AC            10     E1  00FA   523 	BBC	#CLI$V_DBGEXCP,24(AP),RESTART_1 ; Skip if normal start.
                          4A         00FE       
   00000008'EF   000002C2'EF     DE  00FF   524 	MOVAL	term_handler, termin_block+4 ; Set up the termination block
   00000010'EF   00000000'EF     DE  010A   525 	MOVAL	term_reason, termin_block+12 ;
                                     0115   526 	$DCLEXH_S desblk=termin_block	     ;
            0D            50     E9  0122   527 	BLBC	R0, error_signal	; Exit if directive failed.
            5C         04 AC     D0  0125   528 	MOVL	4(AP), AP		; Set argument pointer to exception
                                     0129   529 					; argument list passed in from bootstrap
                 00000000'EF     94  0129   530 	CLRB	dbg$gb_debug		; clear environment flag for primary handler
                          0090   31  012F   531 	BRW	prim_handl_2		; Act as though its a normal exception.
                                     0132   532 
                                     0132   533 error_signal:
   00000000'EF            01     90  0132   534 	MOVB	#1, dbg$gb_exit_dbg	; turn on DEBUG exit flag and
            00            04     F0  0139   535 	INSV	#4,#0,#3, R0		; Make this a fatal error,
            50            03         013C       
                                     013E   536 	$EXIT_S	R0			; and force a sys$exit.
                                     0147   537 
                                     0147   538 
                                     0147   539 ;++
                                     0147   540 ; The following entry point is used by the termination
                                     0147   541 ; handler to reset the stack and get back into the DEBUG
                                     0147   542 ; command processing after the user program being debugged
                                     0147   543 ; has caused an exception unfieldable by DEBUG or has
                                     0147   544 ; done a sys$exit.
                                     0147   545 ;--
                                     0147   546 restart:
                               0000  0147   547 	.WORD	^M<>			; Null entry mask
                                     0149   548 
                                     0149   549 restart_1:
   00000008'EF   000002C2'EF     DE  0149   550 	MOVAL	term_handler, termin_block + 4	; put address of handler
   00000010'EF   00000000'EF     DE  0154   551 	MOVAL	term_reason, termin_block + 12	; and address for termination
                                     015F   552 					; reason into termination block.
                                     015F   553 	$DCLEXH_S desblk=termin_block	; declare the termination
                                     016C   554 					; handler
            C3            50     E9  016C   555 	BLBC	R0, error_signal	; on error, exit to CLI
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  12
000050          START_DEBUG - DEBUG setup                                                                                        (4)

            50   00000000'EF     D0  016F   556 	MOVL	dbg$gl_runframe, R0	; get block of user's registers
                       44 A0     DD  0176   557 	PUSHL	dbg$l_user_psl(R0)	; Create an argument list that
                       40 A0     DD  0179   558 	PUSHL	dbg$l_user_pc(R0)	; looks like an exception call frame
                 0000046C 8F     DD  017C   559 	PUSHL	#ss$_debug		; name the exception the DEBUG
                                     0182   560 					; special exception.
                          03     DD  0182   561 	PUSHL	#3			; the signal argument list has
                                     0184   562 					; three arguments.
                 00000024'EF     DD  0184   563 	PUSHL	SAVED_R1		; Fill mechanism R0,R1 so that
                 00000020'EF     DD  018A   564 	PUSHL	SAVED_R0		; they will be preserved across $EXIT
                          7E     7C  0190   565 	CLRQ	-(SP)			; 2 zeroes for the remaining
                                     0192   566 					; mechanism argument list.
                          04     DD  0192   567 	PUSHL	#4			; Which has 4 args all together.
                          6E     DF  0194   568 	PUSHAL	(SP)			; And the address of the mechanism
                       18 AE     DF  0196   569 	PUSHAL	24(SP)			; and signal arguments lists.
                          02     DD  0199   570 	PUSHL	#2			; and another argument count.
                                     019B   571 
                 00000000'EF     94  019B   572 	CLRB	dbg$gb_debug		; clear environment flag so
                                     01A1   573 					; that DEBUG's exception handler
                                     01A1   574 					; believes that user is running.
       01C0'CF            6E     FA  01A1   575 	CALLG	(SP), W^primary_handler	; Call the primary exception
                                     01A6   576 					; handler to fake the first exception.
                                     01A6   577 
                                     01A6   578 restart_2:
         08 AE            0C     C1  01A6   579 	ADDL3	#12,8(SP),R0		; Restore R0,R1 just as the operating system
                          50         01AA       
            50            60     7D  01AB   580 	MOVQ	(R0),R0			; would in the case of a real exception.
            5E            28     C0  01AE   581 	ADDL2	#40, SP			; Pop all arguments except the 
                                     01B1   582 					; PC and the PSL.
            01   00000000'EF     E8  01B1   583 	BLBS	dbg$gb_exit_dbg, 10$	; If exiting from DEBUG,
                                     01B8   584 					; pop the rest of the arguments.
                                 02  01B8   585 	REI				; otherwise, return as though
                                     01B9   586 					; from an exception.
                                     01B9   587 
                                     01B9   588 10$:
            5E            08     C0  01B9   589 	ADDL2	#8, SP			; pop the PC and the PSL.
            50            01     D0  01BC   590 	MOVL	#ss$_normal, R0		; return success value
                                 04  01BF   591 	RET
                                     01C0   592 
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  13
000050          PRIMARY_HANDLER                                                                                                  (5)

                                     01C0   594 .SBTTL	PRIMARY_HANDLER
                                     01C0   595 ;++
                                     01C0   596 ; FUNCTIONAL DESCRIPTION:
                                     01C0   597 ;	EXCEPTION HANDLER DECLARED IN THE PRIMARY VECTOR. IMMEDIATELY RESIGNALS
                                     01C0   598 ;	IF THE EXCEPTION OCCURRED IN THE EXECUTION OF A DEBUG COMMAND. IF
                                     01C0   599 ;	THE EXCEPTION OCCURRED IN THE USER PROGRAM BEING DEBUGGED, THIS
                                     01C0   600 ;	ROUTINE DISABLES ASTS (IF THEY WERE ENABLED), SAVES THE REGISTERS
                                     01C0   601 ;	FROM THE USER PROGRAM AT THE TIME OF THE EXCEPTION, AND THEN CALLS
                                     01C0   602 ;	A ROUTINE TO HANDLE THE EXCEPTION.
                                     01C0   603 ;
                                     01C0   604 ;	WHEN THE CALLED ROUTINE RETURNS, THE REGISTERS ARE RESTORED,
                                     01C0   605 ;	THE ASTS ARE REENABLED (IF THEY WERE DISABLED), AND THE EXCEPTION
                                     01C0   606 ;	HANDLER RETURNS WITH THE RESIGNAL VALUE IT RECEIVED FROM THE CALLED
                                     01C0   607 ;	ROUTINE.
                                     01C0   608 ;
                                     01C0   609 ; CALLING SEQUENCE:
                                     01C0   610 ;	4(AP)	- Address of SIGNAL ARRAY
                                     01C0   611 ;	8(AP)	- Address of MECHANISM ARRAY
                                     01C0   612 ;
                                     01C0   613 ; IMPLICIT INPUTS:
                                     01C0   614 ;	THE GLOBAL SYMBOL dbg$gb_debug, WHICH INDICATES WHETHER THE USER
                                     01C0   615 ;	PROGRAM WAS RUNNING, OR DEBUG WAS EXECUTING A DEBUG COMMAND.
                                     01C0   616 ;
                                     01C0   617 ; IMPLICIT OUTPUTS:
                                     01C0   618 ;	THE "DBG$V_ENAB_AST" FLAG INDICATES WHETHER ASTS WERE ENABLED
                                     01C0   619 ;	AT THE TIME OF THE INTERRUPT
                                     01C0   620 ;
                                     01C0   621 ; ROUTINE VALUE:
                                     01C0   622 ;	SS$_RESIGNAL or the value returned by DBG$EXC_HANDLER
                                     01C0   623 ;
                                     01C0   624 ; SIDE EFFECTS:
                                     01C0   625 ;	THE USER MAY GET CONTROL UNDER DEBUG
                                     01C0   626 ;--
                                     01C0   627 
                                     01C0   628 
                               0FFC' 01C0   629 	.ENTRY	PRIMARY_HANDLER, ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
                                     01C2   630 
                                     01C2   631 prim_handl_2::
            6D       027E'CF     DE  01C2   632 	MOVAL	W^WINDOW_HANDLER,(FP)	; Establish an exception handler to be
                                     01C7   633 					; in effect until commands are accepted
            06   00000000'EF     E9  01C7   634 	BLBC	dbg$gb_debug,10$	; ARE DEBUG COMMANDS BEING EXECUTED?
            50       0918 8F     3C  01CE   635 	MOVZWL	#ss$_resignal, R0	; yes, resignal exception
                                 04  01D3   636 	RET				; AND RETURN
                                     01D4   637 
   00000000'EF            01     90  01D4   638 10$:	MOVB	#1, dbg$gb_debug	; set flag that says DEBUG is
                                     01DB   639 					; running.
            52   00000000'EF     D0  01DB   640 	MOVL	dbg$gl_runframe, R2	; get current user registers
                                     01E2   641 	$SETAST_S #0			; TRY TO DISABLE INTERRUPTS
            50            01     D1  01EB   642 	CMPL	#SS$_WASCLR,R0		; WERE THEY ENABLED?
                          06     13  01EE   643 	BEQL	20$			; NO, SET FLAG TO FALSE
         48 A2            20     A8  01F0   644 	BISW2	#dbg$m_enab_ast,dbg$w_run_stat(R2)	; YES, SET FLAG TO TRUE
                          04     11  01F4   645 	BRB	30$			; AND PROCEED
                                     01F6   646 
         48 A2            20     AA  01F6   647 20$:	BICW2	#dbg$m_enab_ast,dbg$w_run_stat(R2)	; SET FLAG TO
                                     01FA   648 					; FALSE FOR INTERRUPTS
                                     01FA   649 
            01         04 BC     C1  01FA   650 30$:	ADDL3 	@4(AP),#1,R11		; get signal arg count plus 1
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  14
000050          PRIMARY_HANDLER                                                                                                  (5)

                          5B         01FE       
            5B         04 BC4B   DE  01FF   651 	MOVAL	@4(AP)[R11],R11		; add to address of signal arg list
                                     0204   652 					; this is SP.
            5A   00000000'EF     D0  0204   653 	MOVL	dbg$gl_runframe, R10	; get pointer to current run frame
            5A         04 AA     DE  020B   654 	MOVAL	dbg$l_user_regs(R10),R10; to obtain address of storage
                                     020F   655 					; for user's registers
            53            5A     D0  020F   656 	MOVL	R10,R3			; COPY INTO WORKING POINTER
         08 AC            0C     C1  0212   657 	ADDL3	#12, 8(AP), R9		; Calculate address of R0 in MECHANISM
                          59         0216       
            83            69     7D  0217   658 	MOVQ	(R9), (R3)+		; Save R0 and R1 in the runframe
         14 AD            28     28  021A   659 	MOVC3	#40,20(FP),(R3)		; SAVE USER REGISTERS R2 - R11
                          63         021E       
            83         08 AD     7D  021F   660 	MOVQ	8(FP),(R3)+		; SAVE USER AP - FP
            83            5B     D0  0223   661 	MOVL	R11,(R3)+		; SAVE USER SP
            59         04 AC     D0  0226   662 	MOVL	4(AP), R9		; GET ADDRESS OF SIGNAL ARG LIST
            58            69     D0  022A   663 	MOVL	(R9), R8		; AND COUNT OF ITS ARGS
            83            7948   D0  022D   664 	MOVL	-(R9)[R8], (R3)+	; THE NEXT TO LAST ONE IS PC, SAVE IT
            63         04 A948   D0  0231   665 	MOVL	4(R9)[R8], (R3)		; THE PSL IS THE LAST ARGUMENT,
                                     0236   666 					; SAVE IT TOO.
                          02     11  0236   667 	BRB	prim_handl_4		; and proceed
                                     0238   668 
                                     0238   669 ;++
                                     0238   670 ; This entrance is for returning to DEBUG from a routine CALLed by
                                     0238   671 ; a DEBUG CALL command.
                                     0238   672 ;--
                                     0238   673 prim_handl_3:
                               0FFC  0238   674 	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
                                     023A   675 
                                     023A   676 prim_handl_4:
   00000000'EF            6C     FA  023A   677 	CALLG	(AP),DBG$EXC_HANDLER	; call inner exception handler
                          01     BB  0241   678 	PUSHR	#^M<R0>			; SAVE RESIGNAL VALUE
            51   00000000'EF     D0  0243   679 	MOVL	dbg$gl_runframe,R1	; get address of block that
                                     024A   680 					; holds user's registers
            51         04 A1     DE  024A   681 	MOVAL	dbg$l_user_regs(R1),R1	; put it R1
         08 AC            0C     C1  024E   682 	ADDL3	#12, 8(AP), R9		; GET THE ADDRESS FOR R0 - R1 ON STACK
                          59         0252       
            69            81     7D  0253   683 	MOVQ	(R1)+, (R9)		; AND RESTORE R0 - R1
            61            28     28  0256   684 	MOVC3	#40,(R1),20(FP)		; RESTORE USER R2 - R11
                       14 AD         0259       
         08 AD            81     7D  025B   685 	MOVQ	(R1)+,8(FP)		; RESTORE USER AP - FP
                 00000000'EF     94  025F   686 	CLRB	dbg$gb_debug		; and turn off DEBUG environment
                                     0265   687 					; flag.
            52   00000000'EF     D0  0265   688 	MOVL	dbg$gl_runframe,R2	; get base of current run frame
         48 A2            20     B3  026C   689 	BITW	#dbg$m_enab_ast,dbg$w_run_stat(R2)	; SHOULD
                                     0270   690 					; INTERRUPTS BE REENABLED?
                          09     13  0270   691 	BEQL	40$			; NO
                                     0272   692 	$SETAST_S #1			; YES, REENABLE THEM
                                     027B   693 
                          01     BA  027B   694 40$:	POPR	#^M<R0>			; GET THE RESIGNAL VALUE BACK
                                 04  027D   695 	RET				; AND RETURN
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  15
000050          WINDOW_HANDLER - Call frame exception handler                                                                    (6)

                                     027E   697 .SBTTL	WINDOW_HANDLER	- Call frame exception handler
                                     027E   698 ;++
                                     027E   699 ; FUNCTIONAL DESCRIPTION:
                                     027E   700 ;	This handler is put up by the primary handler to be used during the
                                     027E   701 ;	"window" during the processing of an exception and before the DEBUG
                                     027E   702 ;	prompt is output.  If the exception name is SS$_DEBUG it causes the
                                     027E   703 ;	stack to be unwound to the level where the primary handler was called
                                     027E   704 ;	for the first exception.  At the end of the unwinding process control is
                                     027E   705 ;	transfered to WINDOW_2 where the original exception frame is modified.
                                     027E   706 ;	The exception name is changed to SS$_DEBUG and the primary handler
                                     027E   707 ;	is called at label PRIM_HANDL_3.  After the user's commands have been
                                     027E   708 ;	processed the primary handler will return and we will exit through
                                     027E   709 ;	RESTART_2 to the user's code.
                                     027E   710 ;	If the exception name was not SS$_DEBUG we exit through DBG$FINAL_HANDL.
                                     027E   711 ;
                                     027E   712 ; CALLING SEQUENCE:
                                     027E   713 ;	4(AP)	- Address of SIGNAL ARRAY
                                     027E   714 ;	8(AP)	- Address of MECHANISM ARRAY
                                     027E   715 ;
                                     027E   716 ; IMPLICIT INPUTS:
                                     027E   717 ;	NONE
                                     027E   718 ;
                                     027E   719 ; IMPLICIT OUTPUTS:
                                     027E   720 ;	NONE
                                     027E   721 ;
                                     027E   722 ; ROUTINE VALUE:
                                     027E   723 ;	Exit to user program through RESTART_2
                                     027E   724 ;
                                     027E   725 ; SIDE EFFECTS:
                                     027E   726 ;	Unwinds the stack to DBG$EXC_HANDLER with the exception name
                                     027E   727 ;	SS$_DEBUG if the original name was SS$_DEBUG.
                                     027E   728 ;--
                                     027E   729 WINDOW_HANDLER:
                               0FFC  027E   730 	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
                                     0280   731 
            50         04 AC     D0  0280   732 	MOVL	4(AP),R0		; Get address of SIGNAL ARRAY
   0000046C 8F         04 A0     D1  0284   733 	CMPL	4(R0),#SS$_DEBUG	; Is this the DEBUG exception
                          03     13  028C   734 	BEQL	10$			; Unwind if SS$_DEBUG
                          01A3'  31  028E   735 	BRW	DBG$FINAL_HANDL+2	; Transfer control to the final handler
   00000000'EF            00     FB  0291   736 10$:	CALLS	#0, DBG$END_OF_LINE	; Clean up DEBUG internal status
                                     0298   737 	$UNWIND_S NEWPC=WINDOW_2	; Give control to WINDOW_2
            50            01     3C  02A7   738 	MOVZWL	#SS$_CONTINUE, R0	; Load CONTINUE code
                                 04  02AA   739 	RET				;
                                     02AB   740 
                                     02AB   741 WINDOW_2:
            5E            04     C0  02AB   742 	ADDL2	#4,SP			; Remove JSB return address
            50         04 AE     D0  02AE   743 	MOVL	4(SP), R0		; Get address of SIGNAL ARRAY
         04 A0   0000046C 8F     D0  02B2   744 	MOVL	#SS$_DEBUG, 4(R0)	; Change exception name to SS$_DEBUG
       FF79 CF            6E     FA  02BA   745 	CALLG	(SP), PRIM_HANDL_3	; Go get user commands
                          FEE4   31  02BF   746 	BRW	RESTART_2		; Exit to user program
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  16
000050          TERM_HANDLER - Termination handler for DEBUG                                                                     (7)

                                     02C2   748 .SBTTL	TERM_HANDLER	- Termination handler for DEBUG
                                     02C2   749 
                                     02C2   750 TERM_HANDLER:
                               0000  02C2   751 	.WORD	^M<>			; Null entry mask
                                     02C4   752 dbg$term_handlr::
                                     02C4   753 
   00000000'EF            01     90  02C4   754 	MOVB	#1,dbg$gb_debug		; note that DEBUG is in control
            01   00000000'EF     E9  02CB   755 	BLBC	dbg$gb_exit_dbg,10$	; IF EXITING, JUST RETURN TO CLI
                                 04  02D2   756 	RET				; return to CLI
                                     02D3   757 ;+
                                     02D3   758 ; Normal exit of image says that we output
                                     02D3   759 ; TERM_REASON as the "exit status".  First we try to
                                     02D3   760 ; output this TERM_REASON as a system message number.
                                     02D3   761 ; If that fails, we simply output the status
                                     02D3   762 ; in the current mode.
                                     02D3   763 ;-
                                     02D3   764 
   0000012A'EF       00FF 8F     3C  02D3   765 10$:	MOVZWL	#BUF_SIZ-1,FAOBUFDESC	; Try to convert the status	
   0000012E'EF   0000002B'EF     9E  02DC   766 	MOVAB	FAO_BUF+1,FAOBUFDESC+4	; to a system message
                                     02E7   767 	$GETMSG_S TERM_REASON, MSG_LENGTH, FAOBUFDESC
   0000002A'EF   00000028'EF     90  0304   768 	MOVB	MSG_LENGTH, FAO_BUF	; Make counted string in FAO_BUF
                 0000002A'EF     9F  030F   769 	PUSHAB	FAO_BUF			; Address of counted string
                          01     DD  0315   770 	PUSHL	#1			; One parameter
                 0002808B 8F     DD  0317   771 	PUSHL	#DBG$_EXITSTATUS	; Message number
                          03     DD  031D   772 	PUSHL	#3			; Length of signal argument list
            50            6E     9E  031F   773 	MOVAB	(SP), R0		; Save address of argument list
                          00     DD  0322   774 	PUSHL	#0			; No facility string
                     0544'CF     9F  0324   775 	PUSHAB	W^DBG$OUT_MESSAGE	; Routine to print message
                          60     9F  0328   776 	PUSHAB	(R0)			; Address of argument list
   00000000'GF            03     FB  032A   777 	CALLS	#3, G^SYS$PUTMSG	; Get message formatted and output
            5E            10     C0  0331   778 	ADDL2	#16, SP			; remove argument list from stack.
                                     0334   779 RESUME_DEBUG:
            5C   00000018'EF     D0  0334   780 	MOVL	SAVED_AP, AP		; RESTORE SAVED AP
            5D   0000001C'EF     D0  033B   781 	MOVL	SAVED_FP, FP		; AND SAVED FP
            5E            5D     D0  0342   782 	MOVL	FP, SP			; RESTORE SP TO BE THE SAVED FP
                          FD1F   31  0345   783 	BRW	BEGINHERE_2		; RELOOP THROUGH DEBUG
                                     0348   784 
                                     0348   785 
                                     0348   786 .SBTTL	DBG$LAST_CHANCE	- The last chance handler
                                     0348   787 
                                     0348   788 DBG$LAST_CHANCE:
                               0000  0348   789 	.WORD	^M<>			; Null entry mask
                                     034A   790 
            7E            01     CE  034A   791 	MNEGL	#1, -(SP)		; Replace all BPT's with their real
   00000000'EF            01     FB  034D   792 	CALLS	#1, DBG$INS_OPCODES	; opcodes, and unprotect all pages.
                       04 AC     DD  0354   793 	PUSHL	4(AP)			; Push address of signal argument list
   00000000'EF            01     FB  0357   794 	CALLS	#1, DBG$PUTMSG		; Output the error message
                                     035E   795 
                 00028318 8F     DD  035E   796 	PUSHL	#DBG$_LASTCHANCE	; Message number
                          01     DD  0364   797 	PUSHL	#1			; Number of parameters in argument list
            50            6E     9E  0366   798 	MOVAB	(SP), R0		; Save address of list
                          00     DD  0369   799 	PUSHL	#0			; No facility string
                     0544'CF     9F  036B   800 	PUSHAB	W^DBG$OUT_MESSAGE	; Routine to output error message
                          60     9F  036F   801 	PUSHAB	(R0)			; Address of argument list
   00000000'GF            03     FB  0371   802 	CALLS	#3, G^SYS$PUTMSG	; Format message and output it
            5E            08     C0  0378   803 	ADDL2	#8, SP			; Remove argument list from stack
                          B7     11  037B   804 	BRB	RESUME_DEBUG		; Prepare to restart DEBUG
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  17
000050          DBG$PSEUDO_PROG - Structure to implement CALL                                                                    (8)

                                     037D   806 .SBTTL	DBG$PSEUDO_PROG	- Structure to implement CALL
                                     037D   807 ;++
                                     037D   808 ; The following code is almost exactly like the preceding setting up
                                     037D   809 ; of a phony exception call frame. Instead of calling the primary
                                     037D   810 ; handler and then REIing, it CALLGs the address the user has specified
                                     037D   811 ; with a CALL command, then reports the returned value, pops a run
                                     037D   812 ; frame, and jumps into the middle of the primary handler.
                                     037D   813 ;
                                     037D   814 ; This method allows the user's CALLed routine to execute just as 
                                     037D   815 ; though it were the user's program. Breakpoints may be set in it; the
                                     037D   816 ; user can CALL another routine when stopped at a breakpoint in a CALLed
                                     037D   817 ; routine.
                                     037D   818 ; CALLING SEQUENCE:
                                     037D   819 ;
                                     037D   820 ; IMPLICIT INPUTS:
                                     037D   821 ;
                                     037D   822 ; IMPLICIT OUTPUTS:
                                     037D   823 ;
                                     037D   824 ; RETURN VALUE:
                                     037D   825 ;	This code returns through label RESTART_2 which results in the
                                     037D   826 ;	command processor being re-invoked.
                                     037D   827 ;
                                     037D   828 ; SIDE EFFECTS:
                                     037D   829 ;--
                                     037D   830 DBG$PSEUDO_PROG::
   00000000'EF            01     90  037D   831 	MOVB	#1, dbg$gb_debug	; DEBUG must appear to be running
                                     0384   832 					; during these setup operations.
            50   00000000'EF     D0  0384   833 	MOVL	dbg$gl_runframe,R0	; get address of current run
                                     038B   834 					; frame (registers and status)
            51            60     D0  038B   835 	MOVL	dbg$l_next_link(R0),R1	; now pick up the address of the
                                     038E   836 					; previous run frame. This
                                     038E   837 					; contains the PC and PSL values
                                     038E   838 					; that are to be restored after
                                     038E   839 					; this routine runs.
                       44 A1     DD  038E   840 	PUSHL	dbg$l_user_psl(R1)	; put the PSL on the stack
                       40 A1     DD  0391   841 	PUSHL	dbg$l_user_pc(R1)	; and the PC
                 0000046C 8F     DD  0394   842 	PUSHL	#ss$_debug		; and the exception called DEBUG.
                          03     DD  039A   843 	PUSHL	#3			; the length of the signal argument
                                     039C   844 					; list.
                          7E     7C  039C   845 	CLRQ	-(SP)			; null arguments for the
                          7E     7C  039E   846 	CLRQ	-(SP)			; mechanism argument list
                          04     DD  03A0   847 	PUSHL	#4			; length of mechanism arg list.
                          6E     DF  03A2   848 	PUSHAL	(SP)			; push the address of the
                                     03A4   849 					; mechanism argument list,
                       18 AE     DF  03A4   850 	PUSHAL	24(SP)			; and of the signal arg list.
                          02     DD  03A7   851 	PUSHL	#2			; and the count of these two.
                 00000000'EF     94  03A9   852 	CLRB	dbg$gb_debug		; turn of DEBUG's presence
                                     03AF   853 					; and finally call the routine.
         52 B0         4E B0     FA  03AF   854 	CALLG	@dbg$l_frame_ptr(R0),@dbg$l_call_addr(R0)
                                     03B4   855 
                                     03B4   856 dbg$pseudo_exit::	; EXC uses this label to detect STEPing
                                     03B4   857 			; off the end of the above CALLed routine.
   00000000'EF            01     90  03B4   858 	MOVB	#1,dbg$gb_debug		; Set flag indicating DEBUG is in control
            56            50     D0  03BB   859 	MOVL	R0,R6			; save return value.
                                     03BE   860 	$SETAST_S	#0		; disable interrupts
   00000000'EF   0000002B'EF     9E  03C7   861 	MOVAB	1+FAO_BUF,DBG$CP_OUT_STR ; set up for standard
                 00000000'EF     D4  03D2   862 	CLRL	DBG$GL_BUF_SIZ		;  DEBUG output
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  18
000050          DBG$PSEUDO_PROG - Structure to implement CALL                                                                    (8)

                                     03D8   863 					; now report the value returned
                 00000000'EF     DF  03D8   864 	PUSHAL	routine_value		; from the user's routine
   00000000'EF            01     FB  03DE   865 	CALLS	#1,DBG$FAO_PUT		; in the standard way
                          7E     7C  03E5   866 	CLRQ	-(SP)			; no LENGTH or RADIX override
                          56     DD  03E7   867 	PUSHL	R6			; output in the current MODE
   00000000'EF            03     FB  03E9   868 	CALLS	#3,DBG$OUT_NUM_VAL
                 0000002A'EF     DF  03F0   869 	PUSHAL	FAO_BUF			; Address of counted string
   00000000'EF            01     FB  03F6   870 	CALLS	#1,DBG$OUT_PUT		;
            53   00000000'EF     D0  03FD   871 	MOVL	dbg$gl_runframe,R3	; get the address of the called
                                     0404   872 					; routine's runframe.
            54            63     D0  0404   873 	MOVL	dbg$l_next_link(R3),R4	; and the address of the previous
                                     0407   874 					; runframe. We want to restore
                                     0407   875 					; context to this previous frame.
            55         4E A3     D0  0407   876 	MOVL	dbg$l_frame_ptr(R3),R5	; get address of CALLed routine's
                                     040B   877 					; argument list.
                           00000000  040B   878 .IF NE DBG_START1
                                     040B   879 	PUSHL	(R5)			; diagnostic, gives address and
                                     040B   880 	PUSHL	R5			; count of call frame
                                     040B   881 	PUSHAL	frame_info		; FAO message
                                     040B   882 	CALLS	#3,dbg$fao_out		; output it
                                     040B   883 .ENDC
                          65     D6  040B   884 	INCL	(R5)			; add one for count longword
                          65     DD  040D   885 	PUSHL	(R5)			; push length of block
                          55     DD  040F   886 	PUSHL	R5			; and address of block.
   00000000'EF            02     FB  0411   887 	CALLS	#2,dbg$freerelease	; free the space.
                          19     DD  0418   888 	PUSHL	#<<dbg$k_runfr_len+3>/4>; calculate length of entire
                                     041A   889 					; runframe.
                          53     DD  041A   890 	PUSHL	R3			; push length and address on stack
   00000000'EF            02     FB  041C   891 	CALLS	#2,dbg$freerelease	; and free this storage too.
   00000000'EF            54     D0  0423   892 	MOVL	R4,dbg$gl_runframe	; now load address of the
                                     042A   893 					; previous runframe into its
                                     042A   894 					; global pointer.
       FE09 CF            6E     FA  042A   895 	CALLG	(SP),prim_handl_3	; and CALL into the middle of
                                     042F   896 					; the primary handler. This 
                                     042F   897 					; permits commands to be taken.
                          FD74   31  042F   898 	BRW	RESTART_2		; when we return, it's time
                                     0432   899 					; to do an REI.
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  19
000050          DBG$FINAL_HANDL - Call frame exception handler                                                                   (9)

                                     0432   901 .SBTTL	DBG$FINAL_HANDL	- Call frame exception handler
                                     0432   902 ;++
                                     0432   903 ; Functional description:
                                     0432   904 ;	This handler is the ultimate exception handler for exceptions
                                     0432   905 ;	that occur under DEBUG control or during execution of the user
                                     0432   906 ;	program. Any exception that gets here has already passed thru
                                     0432   907 ;	primary handlers, secondary handlers, and user-declared
                                     0432   908 ;	stack handlers. This handler stops the exception from causing
                                     0432   909 ;	an exit to the operating system, and drops the user back at
                                     0432   910 ;	DEBUG command level.
                                     0432   911 ;
                                     0432   912 ;	This routine first determines whether it was called because of
                                     0432   913 ;	a hard/software exception condition, or because of a software
                                     0432   914 ;	generated SIGNAL. The identification of the error is from the
                                     0432   915 ;	signal-arg-list.
                                     0432   916 ;
                                     0432   917 ;	The handler outputs DEBUG generated messages and operating
                                     0432   918 ;	system generated conditions in distinct manners. The latter
                                     0432   919 ;	conditions are reported, analyzed for source of error, and
                                     0432   920 ;	then the user regains control. DEBUG messages are output, and
                                     0432   921 ;	control is returned to the user or to CLI according to the
                                     0432   922 ;	severity of the message.
                                     0432   923 ;
                                     0432   924 ; Calling sequence:
                                     0432   925 ;	4(AP)	- Address of SIGNAL ARRAY for an exception. Contains the
                                     0432   926 ;		  exception name, the PC of the exception, and the PSL
                                     0432   927 ;		  and any additional FAO arguments required by the
                                     0432   928 ;		  particular message to be generated.
                                     0432   929 ;	8(AP)	- Address of MECHANISM ARRAY for an exception. Contains
                                     0432   930 ;		  R0 and R1.
                                     0432   931 ;
                                     0432   932 ; Implicit inputs:
                                     0432   933 ;	The global symbol dbg$gb_debug says whether DEBUG or the user
                                     0432   934 ;	was running when the exception occurred. The severity of the
                                     0432   935 ;	error is determined by the low three bits in the error
                                     0432   936 ;	identifier (exception name).
                                     0432   937 ;
                                     0432   938 ; Implicit outputs:
                                     0432   939 ;	The name of the exception is changed if primary_handler is
                                     0432   940 ;	called.
                                     0432   941 ;
                                     0432   942 ; Routine value:
                                     0432   943 ;	SS$_RESIGNAL is returned when the exception was SS$_UNWIND.
                                     0432   944 ;	SS$_CONTINUE is returned when the exception occurred in DEBUG
                                     0432   945 ;		code (unless the error was fatal).
                                     0432   946 ;	Otherwise, this code JMPs to primary_handler and the return is
                                     0432   947 ;		dependent upon many subsequent things.
                                     0432   948 ;
                                     0432   949 ; Side effects:
                                     0432   950 ;	An error message is output to the terminal.
                                     0432   951 ;--
                                     0432   952 
                                     0432   953 
                               0FFC' 0432   954 	.ENTRY	DBG$FINAL_HANDL, ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
                                     0434   955 
            53   00000000'EF     9A  0434   956 	MOVZBL	dbg$gb_debug, R3	; save who was running, DEBUG or
                                     043B   957 					; the user.
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  20
000050          DBG$FINAL_HANDL - Call frame exception handler                                                                   (9)

   00000000'EF            01     90  043B   958 	MOVB	#1, dbg$gb_debug	; now set the flag that says DEBUG
                                     0442   959 					; is running.
            52         04 AC     D0  0442   960 	MOVL	4(AP), R2		; get the address of the signal
                                     0446   961 					; argument list
                           00000000  0446   962 .IF NE DBG_START1
                                     0446   963 	PUSHL	4(R2)			; push error code
                                     0446   964 	PUSHAB	code_message		; and FAO message
                                     0446   965 	CALLS	#2, dbg$fao_out		; and output the hex value of
                                     0446   966 .ENDC
                          10     ED  0446   967 	CMPZV	#STS$V_FAC_NO,#STS$S_FAC_NO,- ; Check the facility code field
         04 A2            0C         0448   968 		4(R2),#DBG_FACILITY		; of the exception.
                          02         044B       
                          08     12  044C   969 	BNEQ	25$			; Skip if facility is not DEBUG
         04 A2            0F     E1  044E   970 	BBC	#STS$V_FAC_SP,4(R2),25$	; Not DEBUG if bit 15 is clear
                          03         0452       
                          0086   31  0453   971 	BRW	50$			; otherwise it is from DEBUG.
                                     0456   972 
                                     0456   973 ;+
                                     0456   974 ; Definitely an operating system code. See whether it is the unwind
                                     0456   975 ; code, and if so, resignal immediately.
                                     0456   976 ;-
   00000920 8F         04 A2     D1  0456   977 25$:	CMPL	4(R2), #SS$_UNWIND	; Is this a SYSTEM unwind
                          0D     12  045E   978 	BNEQ	30$			; If not unwind, look at it further.
            50       0918 8F     3C  0460   979 	MOVZWL	#ss$_resignal, R0	; if unwind, just resignal
   00000000'EF            53     90  0465   980 	MOVB	R3, dbg$gb_debug	; restore real state of DEBUG
                                     046C   981 					; "who's running" flag.
                                 04  046C   982 	RET
                                     046D   983 
   00000004'EF   80000000 8F     C8  046D   984 30$:	BISL	#rab$m_cco, dbg$gl_outprab+rab$l_rop ;
                                     0478   985 					; cancel the effect of control O
   0000046C 8F         04 A2     D1  0478   986 	CMPL	4(R2), #SS$_DEBUG	; Is this the DEBUG exception
                          05     12  0480   987 	BNEQ	35$			; NO, output signal's message
            6F            53     E8  0482   988 	BLBS	R3, 70$			; Unwind if DEBUG was running
                          2B     11  0485   989 	BRB	40$			; YES, branch to exit
                                     0487   990 
                                     0487   991 ;+
                                     0487   992 ; Write system message to DBG$OUTPUT
                                     0487   993 ;-
                                     0487   994 35$:
                          62     9F  0487   995 	PUSHAB	(R2)			; address of signal argument list
   00000000'EF            01     FB  0489   996 	CALLS	#1, DBG$PUTMSG		; output error message
                                     0490   997 
                                     0490   998 ;+
                                     0490   999 ; The exception code message is output. If the user was running, just
                                     0490  1000 ; jump into the register saving exception handler. If DEBUG was
                                     0490  1001 ; running, output another message saying that DEBUG was the cause of
                                     0490  1002 ; the error.
                                     0490  1003 ;-
            1F            53     E9  0490  1004 	BLBC	R3, 40$			; EXIT if DEBUG was not running
                                     0493  1005 
                                     0493  1006 ;+
                                     0493  1007 ; This message blames DEBUG for the problem.
                                     0493  1008 ;-
                 00028322 8F     DD  0493  1009 	PUSHL	#DBG$_DBGERR		; DEBUG coding error message
                          01     DD  0499  1010 	PUSHL	#1			; Number of parameters
            50            6E     9E  049B  1011 	MOVAB	(SP),R0			; Save address of argument list
                          00     DD  049E  1012 	PUSHL	#0			; No facility string
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  21
000050          DBG$FINAL_HANDL - Call frame exception handler                                                                   (9)

                     0544'CF     9F  04A0  1013 	PUSHAB	W^DBG$OUT_MESSAGE	; Action routine name to output message
                          60     9F  04A4  1014 	PUSHAB	(R0)			; Address of argument list
   00000000'GF            03     FB  04A6  1015 	CALLS	#3, G^SYS$PUTMSG	; Get message formatted and output
            5E            08     C0  04AD  1016 	ADDL2	#8, SP			; Remove temporary argument list
                          42     11  04B0  1017 	BRB	70$			; join DEBUG signal exit logic
                                     04B2  1018 ;+
                                     04B2  1019 ; Change the exception's name to the special DEBUG exception and
                                     04B2  1020 ; branch into the DEBUG normal handler that saves registers.
                                     04B2  1021 ;-
            57         04 A2     E8  04B2  1022 40$:	BLBS	4(R2), 75$		; Continue if signal is INFORMATION
                                     04B6  1023 					; or SUCCESS.
         04 A2       046C 8F     3C  04B6  1024 	MOVZWL	#ss$_debug, 4(R2)	; change name of exception to
                                     04BC  1025 					; special DEBUG exception
   00000000'EF            53     90  04BC  1026 	MOVB	R3, dbg$gb_debug	; restore real state of DEBUG
                                     04C3  1027 					; "who's running" flag
   00000004'EF   20000000 8F     C8  04C3  1028 	BISL2	#rab$m_pta, dbg$gl_inprab+rab$l_rop	; purge typeahead
                                     04CE  1029 					; for next input read
   00000004'EF   80000000 8F     CA  04CE  1030 	BICL2	#rab$m_cco, dbg$gl_outprab+rab$l_rop ; Clear cancel ctrl-O bit
                          FCE6   31  04D9  1031 	BRW	prim_handl_2		; and jump into the register
                                     04DC  1032 					; saving exception handler.
                                     04DC  1033 
                                     04DC  1034 ;+
                                     04DC  1035 ; Arrive here because the error was generated by a DEBUG signal.
                                     04DC  1036 ;-
   00000004'EF   80000000 8F     C8  04DC  1037 50$:	BISL2	#rab$m_cco, dbg$gl_outprab+rab$l_rop ;
                                     04E7  1038 						; cancel the effect of control O
                                     04E7  1039 
                           00000000  04E7  1040 .IF NE DBG_START1
                                     04E7  1041 	MOVL	(R2),R0			; ARG LIST COUNT
                                     04E7  1042 1010$:	PUSHL	(R2)[R0]		; PUSH ARGS ONTO STACK
                                     04E7  1043 	SOBGEQ	R0,1010$		; INCLUDING ARG COUNT
                                     04E7  1044 	ADDL3	(R2),#1,-(SP)		; NUMBER OF ITEMS TO BE FORMATTED
                                     04E7  1045 	PUSHAB	SIG_ARG_LIST		; FAO CONTROL STRING
                                     04E7  1046 	ADDL3	#2,(R2),R0		; TOTAL NUMBER OF ARGUMENTS BEING PASSED
                                     04E7  1047 	CALLS	R0,DBG$FAO_OUT		; SHOW ARG LIST
                                     04E7  1048 .ENDC
                          62     9F  04E7  1049 	PUSHAB	(R2)			; address of signal argument list
   00000000'EF            01     FB  04E9  1050 	CALLS	#1, DBG$PUTMSG		; output error message
                                     04F0  1051 
            19         04 A2     E8  04F0  1052 	BLBS	4(R2), 75$		; Exit and allow DEBUG to continue
                                     04F4  1053 					; if message is 'INFORMATION'
                                     04F4  1054 
                                     04F4  1055 ;+
                                     04F4  1056 ; The messages are all out. Unless the exit flag is set, do end-of-command
                                     04F4  1057 ; processing and unwind the stack to the caller of the command processor,
                                     04F4  1058 ; (or whoever put up DBG$FINAL_HANDL as the exception handler)
                                     04F4  1059 ; and return a continue code.
                                     04F4  1060 ;-
                                     04F4  1061 
            37   00000000'EF     E8  04F4  1062 70$:	BLBS	dbg$gb_exit_dbg, 100$	; EXIT if the exit flag is set
                                     04FB  1063 
   00000000'EF            00     FB  04FB  1064 	CALLS	#0, dbg$end_of_line	; clean up DEBUG internal status.
                                     0502  1065 	$UNWIND_S			; unwind to the caller of the
                                     050D  1066 					; routine that declared this
                                     050D  1067 					; handler.
                                     050D  1068 
                                     050D  1069 ;+
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  22
000050          DBG$FINAL_HANDL - Call frame exception handler                                                                   (9)

                                     050D  1070 ; Processing finished. Load a continue code and return.
                                     050D  1071 ;-
                                     050D  1072 
            50            01     3C  050D  1073 75$:	MOVZWL	#ss$_continue, R0	; load a continue code into the
                                     0510  1074 					; return register
   00000000'EF            53     90  0510  1075 	MOVB	R3, dbg$gb_debug	; restore real state of DEBUG
                                     0517  1076 					; "who's running" flag
            0B         04 A2     E8  0517  1077 	BLBS	4(r2),76$		; Don't purge type ahead unless
   00000004'EF   20000000 8F     C8  051B  1078 	BISL2	#rab$m_pta, dbg$gl_inprab+rab$l_rop	; not INFO or SUCCESS
   00000004'EF   80000000 8F     CA  0526  1079 76$:	BICL2	#rab$m_cco, dbg$gl_outprab+rab$l_rop ; Clear cancel ctrl-O bit
                                 04  0531  1080 	RET				; and return to exception mechanism
                                     0532  1081 
                                     0532  1082 
            50         04 A2     D0  0532  1083 100$:	MOVL	4(R2), R0		; load the error into the appropriate
                                     0536  1084 					; register
                                     0536  1085 
                                     0536  1086 ;+
                                     0536  1087 ; This is an unrecoverable error.
                                     0536  1088 ;-
                                     0536  1089 error_exit:
            00            04     F0  0536  1090 	INSV	#4,#0,#3, R0		; Change severity to FATAL
            50            03         0539       
                                     053B  1091 	$EXIT_S	R0			; and take an exit.
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  23
000050          DBG$OUT_MESSAGE - Write SYS$PUTMSG output to DB                                                                 (10)

                                     0544  1093 .SBTTL	DBG$OUT_MESSAGE	- Write SYS$PUTMSG output to DBG$OUTPUT
                                     0544  1094 
                                     0544  1095 ;++
                                     0544  1096 ; FUNCTIONAL DESCRIPTION:
                                     0544  1097 ;	This routine is called as an action routine from EXE$PUTMSG to output
                                     0544  1098 ;	the string that EXE$PUTMSG has just formatted.  The string is output
                                     0544  1099 ;	to the logical device DBG$OUTPUT, and a value of zero is returned to
                                     0544  1100 ;	EXE$PUTMSG preventing it from outputing the message also.
                                     0544  1101 ;
                                     0544  1102 ; CALLING SEQUENCE:
                                     0544  1103 ;	4(AP)	- Address of a quadword string descriptor
                                     0544  1104 ;
                                     0544  1105 ; IMPLICIT INPUTS:
                                     0544  1106 ;	The output RAB for DBG$OUTPUT at location DBG$GL_OUTPRAB
                                     0544  1107 ;
                                     0544  1108 ; ROUTINE VALUE:
                                     0544  1109 ;	R0 = 0	- To inhibit further typing of the message
                                     0544  1110 ;
                                     0544  1111 ;--
                                     0544  1112 
                               0000' 0544  1113 	.ENTRY	DBG$OUT_MESSAGE, ^M<>
                                     0546  1114 
            50         04 BC     9E  0546  1115 	MOVAB	@4(AP),R0		; Get address of string descriptor
   00000022'EF            60     B0  054A  1116 	MOVW	(R0), DBG$GL_OUTPRAB + RAB$W_RSZ ; load string length into RAB
   00000028'EF         04 A0     D0  0551  1117 	MOVL	4(R0), DBG$GL_OUTPRAB + RAB$L_RBF ; load address of string
                                     0559  1118 	$PUT	RAB = DBG$GL_OUTPRAB	; Write string to DBG$OUTPUT
            03            50     E8  0566  1119 	BLBS	R0,10$			; Skip to exit if successful
                          FFCA   31  0569  1120 	BRW	ERROR_EXIT		;
                          50     D4  056C  1121 10$:	CLRL	R0			; Return 0
                                 04  056E  1122 	RET				;
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  24
000050          DBG$CHECK_PROT - Makes page writable                                                                            (11)

                                     056F  1124 .SBTTL	DBG$CHECK_PROT	- Makes page writable
                                     056F  1125 ;++
                                     056F  1126 ; FUNCTIONAL DESCRIPTION:
                                     056F  1127 ;	PROBES A SINGLE BYTE TO SEE WHETHER IT CAN BE WRITTEN. IF IT
                                     056F  1128 ;	CAN, THE VALUE dbg$k_no_reset IS RETURNED. OTHERWISE, THE SETPRT
                                     056F  1129 ;	SYSTEM SERVICE IS CALLED TO CHANGE THE PROTECTION OF THE PAGE
                                     056F  1130 ;	IN WHICH THE BYTE IS LOCATED TO READ/WRITE PROTECTION AND THE
                                     056F  1131 ;	VALUE dbg$k_reset_prt IS RETURNED. IF THE SYSTEM SERVICE RETURNS
                                     056F  1132 ;	AN ERROR, ZERO IS RETURNED.
                                     056F  1133 ;
                                     056F  1134 ; CALLING SEQUENCE:
                                     056F  1135 ;	4(AP)	- THE ADDRESS OF THE BYTE TO MAKE WRITEABLE
                                     056F  1136 ;	8(AP)	- A BYTE ADDRESS IN WHICH THE SYSTEM SERVICE CAN PUT THE
                                     056F  1137 ;		  PREVIOUS PROTECTION OF THE PAGE.
                                     056F  1138 ;
                                     056F  1139 ; IMPLICIT INPUTS:
                                     056F  1140 ;	NONE
                                     056F  1141 ;
                                     056F  1142 ; IMPLICIT OUTPUTS:
                                     056F  1143 ;	NONE
                                     056F  1144 ;
                                     056F  1145 ; ROUTINE VALUE:
                                     056F  1146 ;	dbg$k_no_reset	- PROTECTION WAS ALREADY WRITEABLE, NO CHANGE MADE
                                     056F  1147 ;	dbg$k_reset_prt	- PROTECTION CHANGED, OLD PROTECTION IS IN THE ADDRESS
                                     056F  1148 ;			  PASSED FOR IT.
                                     056F  1149 ;	0		- ERROR IN SYSTEM SERVICE CALL.
                                     056F  1150 ;
                                     056F  1151 ; SIDE EFFECTS:
                                     056F  1152 ;	NONE
                                     056F  1153 ;--
                                     056F  1154 
                               0000' 056F  1155 	.ENTRY	DBG$CHECK_PROT, ^M<>
                                     0571  1156 
            01            00     0D  0571  1157 	PROBEW	#0,#1,@4(AP)		; SEE IF THIS BYTE CAN BE WRITTEN
                       04 BC         0574       
                          04     13  0576  1158 	BEQL	10$			; NO, MUST CHANGE PROTECTION
            50            01     D0  0578  1159 	MOVL	#dbg$k_no_reset,R0	; YES, SET RETURN VALUE
                                 04  057B  1160 	RET				; TO NO CHANGE, AND RETURN
                                     057C  1161 
                       04 AC     DD  057C  1162 10$:	PUSHL	4(AP)			; GET ADDRESS PASSED AS ARGUMENT
                       04 AC     DD  057F  1163 	PUSHL	4(AP)			; SAME ADDRESS FOR END OF AREA
            50            5E     D0  0582  1164 	MOVL	SP,R0			; SAVE STACK ADDRESS
                                     0585  1165 	$SETPRT_S INADR=(R0),PROT=#PRT$C_UW,PRVPRT=@8(AP)	; CHANGE THE PROTECTION
            04            50     E9  059B  1166 	BLBC	R0,20$			; JUMP TO ERROR SETTING IF SERVICE FAILED
            50            02     D0  059E  1167 	MOVL	#dbg$k_reset_prt,R0	; SERVICE SUCCEEDED, SET RETURN VALUE
                                 04  05A1  1168 	RET				; AND RETURN
                                     05A2  1169 
                          50     D4  05A2  1170 20$:	CLRL	R0			; SET ERROR RETURN VALUE
                                 04  05A4  1171 	RET
                                     05A5  1172 
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  25
000050          DBG$REDO_PROT - Sets page to read only                                                                          (12)

                                     05A5  1174 .SBTTL	DBG$REDO_PROT	- Sets page to read only
                                     05A5  1175 ;++
                                     05A5  1176 ; FUNCTIONAL DESCRIPTION:
                                     05A5  1177 ;	SETS THE PROTECTION OF A PAGE TO A SPECIFIED PROTECTION.
                                     05A5  1178 ;
                                     05A5  1179 ; CALLING SEQUENCE:
                                     05A5  1180 ;	4(AP)	- ADDRESS OF BYTE WHOSE PROTECTION MUST BE CHANGED
                                     05A5  1181 ;	8(AP)	- ADDRESS OF BYTE WHICH CONTAINS THE NEW PROTECTION
                                     05A5  1182 ;
                                     05A5  1183 ; IMPLICIT INPUTS:
                                     05A5  1184 ;	NONE
                                     05A5  1185 ;
                                     05A5  1186 ; OUTPUTS:
                                     05A5  1187 ;	NONE
                                     05A5  1188 ;
                                     05A5  1189 ; IMPLICIT OUTPUTS:
                                     05A5  1190 ;	NONE
                                     05A5  1191 ;
                                     05A5  1192 ; ROUTINE VALUE:
                                     05A5  1193 ;	NONE
                                     05A5  1194 ;
                                     05A5  1195 ; SIDE EFFECTS:
                                     05A5  1196 ;	SIGNAL "DBG$_NOWPROT" if page cannot be write protected.
                                     05A5  1197 ;--
                                     05A5  1198 
                               0000' 05A5  1199 	.ENTRY	DBG$REDO_PROT, ^M<>	; Null entry mask
                                     05A7  1200 
                       04 AC     DD  05A7  1201 	PUSHL	4(AP)			; GET ADDRESS PASSED AS ARGUMENT
                       04 AC     DD  05AA  1202 	PUSHL	4(AP)			; SAME ADDRESS FOR END OF AREA
            50            5E     D0  05AD  1203 	MOVL	SP,R0			; SAVE STACK ADDRESS
            51         08 BC     9A  05B0  1204 	MOVZBL	@8(AP),R1		; GET PROTECTION OF THIS PAGE
                                     05B4  1205 	$SETPRT_S INADR=(R0),PROT=R1	; RESET PROTECTION
            0D            50     E8  05C5  1206 	BLBS	R0,10$			; RETURN IF SERVICE SUCCEEDED
                 000284C4 8F     DD  05C8  1207 	PUSHL	#dbg$_nowprot		; IF NOT, TELL USER THAT PROTECTION
   00000000'EF            01     FB  05CE  1208 	CALLS	#1,lib$signal		; RESETTING DID NOT WORK
                                 04  05D5  1209 10$:	RET				; AND RETURN
                                     05D6  1210 
                                     05D6  1211 
                                     05D6  1212 	.END	beginhere
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  26
SYMBOL TABLE                                                                                                                    (12)

$$.TMP1        = 00000001            CLI$K_QUALDEF    00000014            CLI$V_PRITYP   = 00000004            
$$.TMP2        = 000000EF            CLI$K_REQDESC    0000001C            CLI$V_QDEXPA   = 00000002            
BEGINHERE        00000000 RG    07   CLI$K_UTILOPR  = 00000000            CLI$V_QDUSRV   = 00000001            
BEGINHERE_2      00000067 R     07   CLI$K_VALCONV  = 00000004            CLI$V_QUALEXP  = 00000001            
BIT...         = 00000020            CLI$K_WORKAREA   00000080            CLI$V_QUALTRU  = 00000000            
BUF_SIZ        = 00000100            CLI$L_CLIFLAG    00000018            CLI$V_SUBTYP   = 00000000            
CLI$A_ABSACT     00000014            CLI$L_INIARGCNT  00000000            CLI$V_TRMVRBLV = 00000008            
CLI$A_ERRACT     00000004            CLI$L_LINKFLAG   00000014            CLI$V_VERIFY   = 00000002            
CLI$A_FLSACT     00000010            CLI$L_RQVALU     0000000C            CLI$V_VFYINP   = 00000005            
CLI$A_IMGFILED   00000010            CLI$L_USRVAL     00000014            CLI$W_QDVALSIZ   00000004            
CLI$A_IMGHDADR   0000000C            CLI$L_WORKAREA   00000000            CLI$W_RQSIZE     00000008            
CLI$A_PROGXFER   00000004            CLI$M_ABSADR   = 00000002            CLI$W_SERVCOD    00000001            
CLI$A_PRSACT     00000010            CLI$M_ALLOCCUR = 00000001            DBG$B_BPT_INS    00000060            
CLI$A_QDVALADR   00000008            CLI$M_BATCH    = 00000008            DBG$B_PREV_PRO1  0000005E            
CLI$A_QUALST     00000018            CLI$M_CONCATINP= 00000002            DBG$B_PREV_PRO2  0000005F            
CLI$A_RQADDR     0000000C            CLI$M_DBGEXCP  = 00010000            DBG$B_USER_OPCO  00000040            
CLI$A_TRUACT     0000000C            CLI$M_DBGTRU   = 00000002            DBG$CHECK_PROT   0000056F RG    07   
CLI$A_UTILSERV   00000008            CLI$M_DEBUG    = 00000001            DBG$CP_OUT_STR   ********   X   01   
CLI$B_BITNUM     00000001            CLI$M_DUMMY    = 00000002            DBG$C_RUNFR_LEN  00000061            
CLI$B_QDBLKSIZ   00000000            CLI$M_EXPNAM   = 00000004            DBG$END_OF_LINE  ********   X   01   
CLI$B_QDCODE     00000001            CLI$M_INDIRECT = 00000010            DBG$EXC_HANDLER  ********   X   01   
CLI$B_QDFLGS     00000002            CLI$M_KEYVALU  = 00000002            DBG$FAO_PUT      ********   X   01   
CLI$B_QDSTAT     00000003            CLI$M_LASTVAL  = 00000001            DBG$FINAL_HANDL  00000432 RG    07   
CLI$B_RQFLGS     00000002            CLI$M_MOREINP  = 00000004            DBG$FIND_DST     ********   X   01   
CLI$B_RQINDX     00000001            CLI$M_MOREVALS = 00000001            DBG$FREERELEASE  ********   X   01   
CLI$B_RQSTAT     00000003            CLI$M_PARMDEF  = 00000008            DBG$GB_DEBUG     ********   X   01   
CLI$B_RQTYPE     00000000            CLI$M_PARMPRS  = 00000001            DBG$GB_EXIT_DBG  ********   X   07   
CLI$C_QDBITS     00000014            CLI$M_PARMREQ  = 00000001            DBG$GL_BUF_SIZ   ********   X   01   
CLI$C_QUALDEF    00000014            CLI$M_QDEXPA   = 00000004            DBG$GL_INPRAB    ********   X   01   
CLI$C_REQDESC    0000001C            CLI$M_QDUSRV   = 00000002            DBG$GL_OUTPRAB   ********   X   01   
CLI$C_WORKAREA   00000080            CLI$M_QUALEXP  = 00000002            DBG$GL_RUNFRAME  ********   X   01   
CLI$K_ASCIIVAL = 00000041            CLI$M_QUALTRU  = 00000001            DBG$INIT_DEBUG   ********   X   01   
CLI$K_CLISERV  = 00000005            CLI$M_TRMVRBLV = 00000300            DBG$INS_OPCODES  ********   X   01   
CLI$K_ENDPRM1  = 00000030            CLI$M_VERIFY   = 00000004            DBG$K_ALL      = 00000009            
CLI$K_ENDPRM2  = 00000031            CLI$M_VFYINP   = 00000020            DBG$K_ALL_BREAK= 00000010            
CLI$K_ENDPRM3  = 00000032            CLI$Q_QDVALDESC  00000004            DBG$K_ALL_TRACE= 00000012            
CLI$K_ENDPRM4  = 00000033            CLI$Q_RQDESC     00000008            DBG$K_ALL_WATCH= 00000011            
CLI$K_FILSPEC  = 00000044            CLI$S_PRITYP   = 00000004            DBG$K_BREAK    = 00000002            
CLI$K_GETCMD   = 00000001            CLI$S_SUBTYP   = 00000004            DBG$K_CANCEL   = 00000005            
CLI$K_GETOPT   = 00000003            CLI$S_TRMVRBLV = 00000002            DBG$K_EXAMINE  = 00000006            
CLI$K_GETQUAL  = 00000002            CLI$V_ABSADR   = 00000001            DBG$K_LANGUAGE = 00000004            
CLI$K_INITPRS  = 00000000            CLI$V_ALLOCCUR = 00000000            DBG$K_MODE     = 00000000            
CLI$K_INPSPEC  = 00000001            CLI$V_BATCH    = 00000003            DBG$K_MODULE   = 0000000C            
CLI$K_INPUT1   = 00000010            CLI$V_CONCATINP= 00000001            DBG$K_NO_RESET = 00000001            
CLI$K_INPUT2   = 00000011            CLI$V_DBGEXCP  = 00000010            DBG$K_OVERRIDE = 00000007            
CLI$K_INPUT3   = 00000012            CLI$V_DBGTRU   = 00000001            DBG$K_RESET_PRT= 00000002            
CLI$K_INPUT4   = 00000013            CLI$V_DEBUG    = 00000000            DBG$K_RESIGNAL = 0000000A            
CLI$K_KEYVAL   = 00000043            CLI$V_DUMMY    = 00000001            DBG$K_RUNFR_LEN  00000061            
CLI$K_KEYWORD  = 00000042            CLI$V_EXPNAM   = 00000002            DBG$K_SCOPE    = 0000000B            
CLI$K_NUMERVAL = 00000040            CLI$V_INDIRECT = 00000004            DBG$K_SET_BREAK= 00000003            
CLI$K_OUTPUT1  = 00000020            CLI$V_KEYVALU  = 00000001            DBG$K_SPOS_EIGH= 00000010            
CLI$K_OUTPUT2  = 00000021            CLI$V_LASTVAL  = 00000000            DBG$K_SPOS_FIVE= 0000000A            
CLI$K_OUTPUT3  = 00000022            CLI$V_MOREINP  = 00000002            DBG$K_SPOS_FOUR= 00000008            
CLI$K_OUTPUT4  = 00000023            CLI$V_MOREVALS = 00000000            DBG$K_SPOS_NINE= 00000012            
CLI$K_OUTSPEC  = 00000002            CLI$V_PARMDEF  = 00000003            DBG$K_SPOS_ONE = 00000002            
CLI$K_PARDONE  = 00000003            CLI$V_PARMPRS  = 00000000            DBG$K_SPOS_SEVE= 0000000E            
CLI$K_QDBITS     00000014            CLI$V_PARMREQ  = 00000000            DBG$K_SPOS_SIX = 0000000C            
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  27
SYMBOL TABLE                                                                                                                    (12)

DBG$K_SPOS_THRE= 00000006            DBG$S_AT_TRACE = 00000001            DBG$_INVNUMBER = 000281D0            
DBG$K_SPOS_TWO = 00000004            DBG$S_ENAB_AST = 00000001            DBG$_INVOPR    = 000280F0            
DBG$K_SPOS_ZERO= 00000000            DBG$S_IN_A_BPT = 00000001            DBG$_INVPATH   = 000280F8            
DBG$K_STELMSIZE= 00000002            DBG$S_IN_A_WPT = 00000001            DBG$_LASTCHANCE= 00028318            
DBG$K_STEP     = 0000000F            DBG$S_REAL_WPT = 00000001            DBG$_LONGDST   = 0002801B            
DBG$K_TRACE    = 00000001            DBG$S_STAR_PROG= 00000001            DBG$_MAXDIMSN  = 00028238            
DBG$K_TRACEBACK= 0000000D            DBG$S_STEPPING = 00000001            DBG$_MODNOTADD = 00028023            
DBG$K_TRCE_BRCH= 00000013            DBG$S_STEP_OVER= 00000001            DBG$_MULTOPR   = 000280D0            
DBG$K_TRCE_CALL= 00000008            DBG$S_TBIT_OK  = 00000001            DBG$_NEEDMORE  = 00028108            
DBG$K_WATCH    = 0000000E            DBG$S_TRACE_ALL= 00000001            DBG$_NOACCESSR = 000282B8            
DBG$LAST_CHANCE  00000348 R     07   DBG$TERM_HANDLR  000002C4 RG    07   DBG$_NOACCESSW = 000282B0            
DBG$L_BPT_PC     0000004A            DBG$USER_EXIT    00000050 RG    07   DBG$_NOANGLE   = 000280E0            
DBG$L_CALL_ADDR  00000052            DBG$V_AT_BREAK = 00000000            DBG$_NOBRANCH  = 00028298            
DBG$L_FRAME_PTR  0000004E            DBG$V_AT_TRACE = 00000004            DBG$_NOBREAKS  = 0002802B            
DBG$L_NEXT_LINK  00000000            DBG$V_ENAB_AST = 00000005            DBG$_NOCALLS   = 000281E0            
DBG$L_USER_AP    00000034            DBG$V_IN_A_BPT = 00000006            DBG$_NODECODE  = 000281E8            
DBG$L_USER_FP    00000038            DBG$V_IN_A_WPT = 00000008            DBG$_NODELIMTR = 000282A0            
DBG$L_USER_PC    00000040            DBG$V_REAL_WPT = 00000009            DBG$_NOEND     = 000281F8            
DBG$L_USER_PSL   00000044            DBG$V_STAR_PROG= 00000001            DBG$_NOFREE    = 00028342            
DBG$L_USER_R0    00000004            DBG$V_STEPPING = 00000003            DBG$_NOGLOBALS = 00028073            
DBG$L_USER_R1    00000008            DBG$V_STEP_OVER= 0000000A            DBG$_NOINSTRAN = 000281F0            
DBG$L_USER_R10   0000002C            DBG$V_TBIT     = 00000004            DBG$_NOLABEL   = 000282C8            
DBG$L_USER_R11   00000030            DBG$V_TBIT_OK  = 00000007            DBG$_NOLINE    = 000282D0            
DBG$L_USER_R2    0000000C            DBG$V_TRACE_ALL= 00000002            DBG$_NOLITERAL = 00028100            
DBG$L_USER_R3    00000010            DBG$W_RUN_STAT   00000048            DBG$_NOLOCALS  = 0002806B            
DBG$L_USER_R4    00000014            DBG$_BADCSP    = 00028198            DBG$_NOOPRND   = 000280E8            
DBG$L_USER_R5    00000018            DBG$_BADOPCODE = 00028278            DBG$_NORMAL    = 00028001            
DBG$L_USER_R6    0000001C            DBG$_BADSTARTPC= 00028208            DBG$_NORSTBLD  = 0002835A            
DBG$L_USER_R7    00000020            DBG$_BADWATCH  = 000282D8            DBG$_NOSUCHBPT = 00028033            
DBG$L_USER_R8    00000024            DBG$_BITRANGE  = 000282F8            DBG$_NOSUCHLAB = 00028310            
DBG$L_USER_R9    00000028            DBG$_BRTOOFAR  = 00028290            DBG$_NOSUCHLAN = 00028210            
DBG$L_USER_REGS  00000004            DBG$_DBGBUG    = 0002800B            DBG$_NOSUCHLIN = 00028218            
DBG$L_USER_SP    0000003C            DBG$_DBGERR    = 00028322            DBG$_NOSUCHMODU= 00028220            
DBG$L_WATCHPT    00000056            DBG$_DBGNULL   = 00028190            DBG$_NOSUCHTPT = 0002803B            
DBG$L_WATCHPTEN  0000005A            DBG$_DBGNULLA  = 000281A0            DBG$_NOSUCHWPT = 00028043            
DBG$M_AT_BREAK = 00000001            DBG$_DBGNULLB  = 000281C0            DBG$_NOSYMBOL  = 00028230            
DBG$M_AT_TRACE = 00000010            DBG$_DBGNULLC  = 000281C8            DBG$_NOTALLSYM = 0002807B            
DBG$M_DV_BIT   = 00000080            DBG$_DBGNULLD  = 000281D8            DBG$_NOTDONE   = 000282C0            
DBG$M_ENAB_AST = 00000020            DBG$_DBGNULLE  = 00028200            DBG$_NOTIMPLAN = 00028308            
DBG$M_IN_A_BPT = 00000040            DBG$_DBGNULLF  = 00028228            DBG$_NOTRACES  = 0002804B            
DBG$M_IN_A_WPT = 00000100            DBG$_DBGNULLG  = 00028258            DBG$_NOWATCHES = 00028053            
DBG$M_IV_BIT   = 00000020            DBG$_DBGNULLH  = 00028268            DBG$_NOWBPT    = 000284B4            
DBG$M_REAL_WPT = 00000200            DBG$_DBGNULLI  = 000282E0            DBG$_NOWOPCO   = 000284BC            
DBG$M_STAR_PROG= 00000002            DBG$_DEBUGBUG  = 00028352            DBG$_NOWPROT   = 000284C4            
DBG$M_STEPPING = 00000008            DBG$_DIVBYZERO = 000282F0            DBG$_NUMOPRNDS = 000282A8            
DBG$M_STEP_OVER= 00000400            DBG$_ENDWITHGO = 00028270            DBG$_NUMTRUNC  = 0002805B            
DBG$M_TBIT     = 00000010            DBG$_EXARANGE  = 000281A8            DBG$_OPSYNTAX  = 00028288            
DBG$M_TBIT_OK  = 00000080            DBG$_EXITSTATUS= 0002808B            DBG$_PARSEERR  = 00028248            
DBG$M_TRACE_ALL= 00000004            DBG$_EXPSTKOVR = 000280D8            DBG$_PARSTKOVR = 00028118            
DBG$OUT_MESSAGE  00000544 RG    07   DBG$_FRERANGE  = 0002832A            DBG$_PATHTLONG = 00028250            
DBG$OUT_NUM_VAL  ********   X   01   DBG$_FRESIZE   = 00028332            DBG$_REDEFREG  = 00028260            
DBG$OUT_PUT      ********   X   01   DBG$_INITIAL   = 00028013            DBG$_RESOPCODE = 00028280            
DBG$PSEUDO_EXIT  000003B4 RG    07   DBG$_INTEGER   = 00028300            DBG$_RSTERR    = 0002834A            
DBG$PSEUDO_PROG  0000037D RG    07   DBG$_INVARRDSC = 000281B0            DBG$_STEPINTO  = 00028083            
DBG$PUTMSG       ********   X   01   DBG$_INVCHAR   = 000281B8            DBG$_STGTRUNC  = 00028063            
DBG$REDO_PROT    000005A5 RG    07   DBG$_INVDIM    = 00028240            DBG$_SUBSTRING = 00028110            
DBG$S_AT_BREAK = 00000001            DBG$_INVDSTREC = 0002833A            DBG$_SYNTAX    = 000282E8            
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  28
SYMBOL TABLE                                                                                                                    (12)

DBG_FACILITY   = 00000002            RAB$L_STS        00000008            RAB$V_TPT      = 00000001            
DBG_START1     = 00000000            RAB$L_STV        0000000C            RAB$V_UIF      = 00000004            
DBG_START2     = 00000000            RAB$L_UBF        00000024            RAB$V_ULK      = 00000012            
DEBUG_RETURN     00000078 R     07   RAB$M_ASY      = 00000001            RAB$V_WAT      = 00000011            
DIVIDE_OVR     = 0000000F            RAB$M_BIO      = 00000800            RAB$V_WBH      = 0000000A            
ERROR_EXIT       00000536 R     07   RAB$M_CCO      = 80000000            RAB$W_ISI        00000002            
ERROR_SIGNAL     00000132 R     07   RAB$M_CVT      = 04000000            RAB$W_RFA        00000010            
FAOBUFDESC       0000012A R     05   RAB$M_EOF      = 00000100            RAB$W_RFA4       00000014            
FAO_BUF          0000002A R     05   RAB$M_FDL      = 00000040            RAB$W_RSZ        00000022            
GBL...         = 00000000            RAB$M_HSH      = 00000080            RAB$W_USZ        00000020            
IFD$C_LENGTH     00000014            RAB$M_KGE      = 00200000            RESTART          00000147 R     07   
IFD$K_LENGTH     00000014            RAB$M_KGT      = 00400000            RESTART_1        00000149 R     07   
IFD$L_CMKFIADR   0000000C            RAB$M_LIM      = 00004000            RESTART_2        000001A6 R     07   
IFD$M_EXEONLY  = 00000001            RAB$M_LOA      = 00002000            RESUME_DEBUG     00000334 R     07   
IFD$V_EXEONLY  = 00000000            RAB$M_LOC      = 00010000            ROUTINE_VALUE    00000000 R     06   
IFD$W_CHAN       00000008            RAB$M_MAS      = 00000020            SAVED_AP         00000018 R     05   
IFD$W_CMCHAN     0000000A            RAB$M_NLK      = 00100000            SAVED_FP         0000001C R     05   
IFD$W_FILNAMOFF  00000002            RAB$M_NXR      = 00800000            SAVED_R0         00000020 R     05   
IFD$W_FLAGS      00000010            RAB$M_PMT      = 40000000            SAVED_R1         00000024 R     05   
IFD$W_SIZE       00000000            RAB$M_PPF_IND  = 00004000            SS$_ABORT      = 0000002C            
INTEGER_OVR    = 0000000E            RAB$M_PPF_RAT  = 00003FC0            SS$_ACCONFLICT = 00000800            
LIB$SIGNAL       ********   X   01   RAB$M_PTA      = 20000000            SS$_ACCVIO     = 0000000C            
MSG_LENGTH       00000028 R     05   RAB$M_RAH      = 00000200            SS$_ACPVAFUL   = 000002FC            
OLD_LAST_CHANCE  00000014 R     05   RAB$M_RLK      = 00080000            SS$_ARTRES     = 00000474            
PRIMARY_HANDLER  000001C0 RG    07   RAB$M_RNE      = 01000000            SS$_ASTFLT     = 0000040C            
PRIM_HANDL_2     000001C2 RG    07   RAB$M_RNF      = 08000000            SS$_BADATTRIB  = 00000034            
PRIM_HANDL_3     00000238 R     07   RAB$M_TMO      = 02000000            SS$_BADCHKSUM  = 00000808            
PRIM_HANDL_4     0000023A R     07   RAB$M_TPT      = 00000002            SS$_BADESCAPE  = 0000003C            
PRT$C_UW         ********   X   01   RAB$M_UIF      = 00000010            SS$_BADFILEHDR = 00000810            
RAB$B_BID        00000000            RAB$M_ULK      = 00040000            SS$_BADFILENAME= 00000818            
RAB$B_BLN        00000001            RAB$M_WAT      = 00020000            SS$_BADFILEVER = 00000820            
RAB$B_KRF        00000035            RAB$M_WBH      = 00000400            SS$_BADIMGHDR  = 00000044            
RAB$B_KSZ        00000034            RAB$S_PPF_RAT  = 00000008            SS$_BADIRECTORY= 00000828            
RAB$B_MBC        00000037            RAB$V_ASY      = 00000000            SS$_BADPARAM   = 00000014            
RAB$B_MBF        00000036            RAB$V_BIO      = 0000000B            SS$_BADSTACK   = 000002B4            
RAB$B_PSZ        00000034            RAB$V_CCO      = 0000001F            SS$_BEGOFFILE  = 00000938            
RAB$B_RAC        0000001E            RAB$V_CVT      = 0000001A            SS$_BLOCKCNTERR= 00000940            
RAB$B_ROP1       00000005            RAB$V_EOF      = 00000008            SS$_BREAK      = 00000414            
RAB$B_ROP2       00000006            RAB$V_FDL      = 00000006            SS$_BUFBYTALI  = 0000030C            
RAB$B_ROP3       00000007            RAB$V_HSH      = 00000007            SS$_BUFFEROVF  = 00000601            
RAB$B_TMO        0000001F            RAB$V_KGE      = 00000015            SS$_BUGCHECK   = 000002A4            
RAB$C_BID      = 00000001            RAB$V_KGT      = 00000016            SS$_CANCEL     = 00000830            
RAB$C_BLN        00000044            RAB$V_LIM      = 0000000E            SS$_CHANINTLK  = 0000004C            
RAB$C_KEY      = 00000001            RAB$V_LOA      = 0000000D            SS$_CLIFRCEXT  = 00000980            
RAB$C_RFA      = 00000002            RAB$V_LOC      = 00000010            SS$_CMODSUPR   = 0000041C            
RAB$C_SEQ      = 00000000            RAB$V_MAS      = 00000005            SS$_CMODUSER   = 00000424            
RAB$K_BLN        00000044            RAB$V_NLK      = 00000014            SS$_COMPAT     = 0000042C            
RAB$L_BKT        00000038            RAB$V_NXR      = 00000017            SS$_CONTINUE   = 00000001            
RAB$L_CTX        00000018            RAB$V_PMT      = 0000001E            SS$_CONTROLC   = 00000651            
RAB$L_DCT        00000038            RAB$V_PPF_IND  = 0000000E            SS$_CONTROLO   = 00000609            
RAB$L_FAB        0000003C            RAB$V_PPF_RAT  = 00000006            SS$_CONTROLY   = 00000611            
RAB$L_KBF        00000030            RAB$V_PTA      = 0000001D            SS$_CREATED    = 00000619            
RAB$L_PBF        00000030            RAB$V_RAH      = 00000009            SS$_CTRLERR    = 00000054            
RAB$L_RBF        00000028            RAB$V_RLK      = 00000013            SS$_DATACHECK  = 0000005C            
RAB$L_RFA0       00000010            RAB$V_RNE      = 00000018            SS$_DATAOVERUN = 00000838            
RAB$L_RHB        0000002C            RAB$V_RNF      = 0000001B            SS$_DEBUG      = 0000046C            
RAB$L_ROP        00000004            RAB$V_TMO      = 00000019            SS$_DECOVF     = 000004A4            
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  29
SYMBOL TABLE                                                                                                                    (12)

SS$_DEVACTIVE  = 000002C4            SS$_INSFWSL    = 0000011C            SS$_OPINCOMPL  = 000002D4            
SS$_DEVALLOC   = 00000840            SS$_INTDIV     = 00000484            SS$_PAGOWNVIO  = 000001EC            
SS$_DEVALRALLOC= 00000641            SS$_INTOVF     = 0000047C            SS$_PAGRDERR   = 00000444            
SS$_DEVASSIGN  = 00000848            SS$_IVADDR     = 00000134            SS$_PARITY     = 000001F4            
SS$_DEVFOREIGN = 00000064            SS$_IVCHAN     = 0000013C            SS$_PARTESCAPE = 000001FC            
SS$_DEVICEFULL = 00000850            SS$_IVCHNLSEC  = 0000026C            SS$_PFMBSY     = 00000204            
SS$_DEVMOUNT   = 0000006C            SS$_IVDEVNAM   = 00000144            SS$_PLHLDR     = 00000404            
SS$_DEVNOTALLOC= 00000858            SS$_IVGSDNAM   = 0000014C            SS$_PSTFULL    = 0000020C            
SS$_DEVNOTMBX  = 00000074            SS$_IVLOGNAM   = 00000154            SS$_RADRMOD    = 0000044C            
SS$_DEVNOTMOUNT= 0000007C            SS$_IVLOGTAB   = 0000015C            SS$_REJECT     = 00000294            
SS$_DEVOFFLINE = 00000084            SS$_IVPROTECT  = 000002F4            SS$_REMOTE     = 00000649            
SS$_DIRFULL    = 00000860            SS$_IVQUOTAL   = 00000164            SS$_RESIGNAL   = 00000918            
SS$_DRVERR     = 0000008C            SS$_IVSECFLG   = 0000016C            SS$_RESULTOVF  = 00000214            
SS$_DUPFILENAME= 00000868            SS$_IVSECIDCTL = 000002E4            SS$_ROPRAND    = 00000454            
SS$_DUPLNAM    = 00000094            SS$_IVSSRQ     = 00000174            SS$_SECTBLFUL  = 0000021C            
SS$_ENDOFFILE  = 00000870            SS$_IVSTSFLG   = 0000017C            SS$_SSFAIL     = 0000045C            
SS$_ENDOFTAPE  = 00000878            SS$_IVTIME     = 00000184            SS$_SUBRNG     = 000004AC            
SS$_ENDOFUSRLBL= 00000970            SS$_LCKPAGFUL  = 000000D4            SS$_SUPERSEDE  = 00000631            
SS$_EXQUOTA    = 0000001C            SS$_LENVIO     = 0000018C            SS$_TAPEPOSLOST= 00000224            
SS$_EXTIDXFILE = 00000880            SS$_LKWSETFUL  = 00000194            SS$_TBIT       = 00000464            
SS$_FCPREADERR = 00000888            SS$_MBFULL     = 000008D8            SS$_TIMEOUT    = 0000022C            
SS$_FCPREPSTN  = 00000988            SS$_MBTOOSML   = 0000019C            SS$_TOOMANYVER = 00000990            
SS$_FCPREWNDERR= 00000890            SS$_MCHECK     = 000002BC            SS$_TOOMUCHDATA= 0000029C            
SS$_FCPSPACERR = 00000898            SS$_MEDOFL     = 000001A4            SS$_UNASEFC    = 00000234            
SS$_FCPWRITERR = 000008A0            SS$_MSGNOTFND  = 00000621            SS$_UNSAFE     = 0000023C            
SS$_FILACCERR  = 0000009C            SS$_MTLBLLONG  = 00000304            SS$_UNWIND     = 00000920            
SS$_FILALRACC  = 000000A4            SS$_MUSTCLOSEFL= 00000948            SS$_UNWINDING  = 00000928            
SS$_FILELOCKED = 000008A8            SS$_NOAQB      = 00000314            SS$_VASFULL    = 00000244            
SS$_FILENUMCHK = 000008B0            SS$_NODATA     = 000001AC            SS$_VECINUSE   = 0000024C            
SS$_FILESEQCHK = 000008B8            SS$_NOHANDLER  = 000008F8            SS$_VOLINV     = 00000254            
SS$_FILESTRUCT = 000008C0            SS$_NOHOMEBLK  = 000008E0            SS$_WAITUSRLBL = 00000950            
SS$_FILNOTACC  = 000000AC            SS$_NOIOCHAN   = 000001B4            SS$_WASCLR     = 00000001            
SS$_FILNOTCNTG = 000002AC            SS$_NOLINKS    = 0000027C            SS$_WASECC     = 00000639            
SS$_FILNOTEXP  = 000000B4            SS$_NOLOGNAM   = 000001BC            SS$_WASSET     = 00000009            
SS$_FLTDIV     = 00000494            SS$_NOMBX      = 00000274            SS$_WRITLCK    = 0000025C            
SS$_FLTOVF     = 0000048C            SS$_NOMOREFILES= 00000930            SS$_WRONGACP   = 0000031C            
SS$_FLTUND     = 0000049C            SS$_NONEXDRV   = 000001C4            START_DEBUG      00000079 R     07   
SS$_FORMAT     = 000000BC            SS$_NONEXPR    = 000008E8            STS$K_ERROR    = 00000002            
SS$_GPTFULL    = 000000C4            SS$_NONLOCAL   = 000008F0            STS$K_INFO     = 00000003            
SS$_GSDFULL    = 000000CC            SS$_NOPRIV     = 00000024            STS$K_SEVERE   = 00000004            
SS$_HANGUP     = 000002CC            SS$_NORMAL     = 00000001            STS$K_SUCCESS  = 00000001            
SS$_HEADERFULL = 000008C8            SS$_NOSIGNAL   = 00000900            STS$K_WARNING  = 00000000            
SS$_IDXFILEFULL= 000008D0            SS$_NOSOLICIT  = 00000284            STS$M_CODE     = 00007FF8            
SS$_ILLBLKNUM  = 000000DC            SS$_NOSUCHDEV  = 00000908            STS$M_COND_ID  = 0FFFFFF8            
SS$_ILLCNTRFUNC= 000000E4            SS$_NOSUCHFILE = 00000910            STS$M_CONTROL  = F0000000            
SS$_ILLEFC     = 000000EC            SS$_NOSUCHNODE = 0000028C            STS$M_CUST_DEF = 08000000            
SS$_ILLIOFUNC  = 000000F4            SS$_NOSUCHSEC  = 00000978            STS$M_FAC_NO   = 0FFF0000            
SS$_ILLLBLAST  = 00000968            SS$_NOTAPEOP   = 00000264            STS$M_FAC_SP   = 00008000            
SS$_ILLPAGCNT  = 000000FC            SS$_NOTFILEDEV = 000001CC            STS$M_INHIB_MSG= 10000000            
SS$_ILLSEQOP   = 000002DC            SS$_NOTINTBLSZ = 000001D4            STS$M_MSG_NO   = 0000FFF8            
SS$_ILLSER     = 00000104            SS$_NOTLABELMT = 000001DC            STS$M_SEVERITY = 00000007            
SS$_ILLUSRLBLRD= 00000958            SS$_NOTMODIFIED= 00000659            STS$M_SUCCESS  = 00000001            
SS$_ILLUSRLBLWT= 00000960            SS$_NOTNETDEV  = 000002EC            STS$S_CODE     = 0000000C            
SS$_INCVOLLABEL= 0000010C            SS$_NOTRAN     = 00000629            STS$S_COND_ID  = 00000019            
SS$_INSFARG    = 00000114            SS$_NOTSQDEV   = 000001E4            STS$S_CONTROL  = 00000004            
SS$_INSFMEM    = 00000124            SS$_OPCCUS     = 00000434            STS$S_CUST_DEF = 00000001            
SS$_INSFRAME   = 0000012C            SS$_OPCDEC     = 0000043C            STS$S_FAC_NO   = 0000000C            
DBGSTART                                                         22-AUG-1978 03:57:24   VAX-11 MACRO X0.3-11               Page  30
SYMBOL TABLE                                                                                                                    (12)

STS$S_FAC_SP   = 00000001            
STS$S_INHIB_MSG= 00000001            
STS$S_MSG_NO   = 0000000D            
STS$S_SEVERITY = 00000003            
STS$S_SUCCESS  = 00000001            
STS$V_CODE     = 00000003            
STS$V_COND_ID  = 00000003            
STS$V_CONTROL  = 0000001C            
STS$V_CUST_DEF = 0000001B            
STS$V_FAC_NO   = 00000010            
STS$V_FAC_SP   = 0000000F            
STS$V_INHIB_MSG= 0000001C            
STS$V_MSG_NO   = 00000003            
STS$V_SEVERITY = 00000000            
STS$V_SUCCESS  = 00000000            
SYS$DCLEXH       ********   X   01   
SYS$EXIT         ********   X   01   
SYS$GETMSG       ********   X   01   
SYS$PUT          ********  GX   01   
SYS$PUTMSG       ********   X   07   
SYS$SETAST       ********   X   01   
SYS$SETEXV       ********   X   07   
SYS$SETPRT       ********   X   01   
SYS$UNWIND       ********   X   01   
TERMIN_BLOCK     00000004 R     05   
TERM_HANDLER     000002C2 R     07   
TERM_REASON      00000000 R     05   
WINDOW_2         000002AB R     07   
WINDOW_HANDLER   0000027E R     07   
WRITABLE_STOR    00000000 R     04   


PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            00000080      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
DBG$ABS_ZERO     0000000C      03       PIC   USR   CON   REL   LCL   SHR   EXE   RD  NOWRT LONG  
DBG$GLOBAL       00000000      04       PIC   USR   CON   REL   LCL NOSHR NOEXE   RD    WRT LONG  
DBG$OWN          00000132      05       PIC   USR   CON   REL   LCL NOSHR NOEXE   RD    WRT LONG  
DBG$PLIT         00000013      06       PIC   USR   CON   REL   LCL   SHR   EXE   RD  NOWRT BYTE  
DBG$CODE         000005D6      07       PIC   USR   CON   REL   LCL   SHR   EXE   RD  NOWRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
5972. BYTES LEFT IN FREE MEMORY POOL.
2130. BYTES OF RECLAIMED MEMORY.
OBJ$:DBGSTART,LIS$:DBGSTART/-SP=EXECML$/ML,LIB$:D/ML,SRC$:DBGSTART
59 MLB DIR RDS - 1007 GETS TO DEFINE 25 MACROS. 85 INTER. FILE WRITES. 
