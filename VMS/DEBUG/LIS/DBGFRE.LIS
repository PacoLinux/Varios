
; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 1
; Digital Equipment Corporation
;
;	0001	MODULE DBGFRE ( ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE),
;	0002			IDENT = '000019') =
;	0003	BEGIN
;	0004	
;	0005	! Copyright (C) 1976
;	0006	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0007	!
;	0008	! This software is furnished under a license for use only on a
;	0009	! single computer system and may be copied only with the inclusion
;	0010	! of the above copyright notice. This software, or any
;	0011	! other copies thereof, may not be provided or otherwise made
;	0012	! available to any other person except for use on such system
;	0013	! and to one who agrees to these license terms. Title to and
;	0014	! ownership of the software shall at all times remain in DEC.
;	0015	!
;	0016	! The information in this software is subject to change without
;	0017	! notice and should not be construed as a commitment by Digital
;	0018	! Equipment Corporation.
;	0019	!
;	0020	! DEC assumes no responsibility for the use or reliability of
;	0021	! its software on equipment which is not supplied by DEC.
;	0022	!
;	0023	! FACILITY:	DEBUG
;	0024	!
;	0025	!++
;	0026	! FUNCTIONAL DESCRIPTION:
;	0027	!	free storage allocator and manager for the DEBUG facility
;	0028	!
;	0029	! Version:	19
;	0030	!
;	0031	! History:
;	0032	!	Author:
;	0033	!		Isaac Nassi, 7 Jul 1976: Version 01
;	0034	!
;	0035	!	Modified by:
;	0036	!		Kevin Pammett, 08-jun-78: Version 19
;	0037	!
;	0038	! Revision history:
;	0039	!	05	08-04-77	CP	Call system service $CRETVA to
;	0040	!					create the virtual pages for
;	0041	!					the DEBUG symbol table. This space
;	0042	!					will be used as the free storage
;	0043	!					space from now on.
;	0044	!	06	19-04-77	CP	Change error message code to
;	0045	!					SYS_SER_ERROR.
;	0046	!	07	20-4-77		CP	Add require file DBGPCT.BEG to
;	0047	! 					declare PSECTs.
;	0048	!	08	26-04-77	CP	Expand free storage area to
;	0049	!					entire 65K bytes.
;	0050	!	09	03-05-77	CP	Add diagnostics. Change address
;	0051	!					comparisons to ...A forms.
;	0052	!					Change DBG$FREEZ so that it
;	0053	!					only zeroes the storage area if
;	0054	!					a non-null pointer is returned
;	0055	!					from FREEGET. Change FREEGET into

; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 1-1
; Digital Equipment Corporation
;
;	0056	!					a non-global routine.
;	0057	!	10	05-07-77	CP	Change REQUIRE files for
;	0058	!					STARLET system definitions
;	0059	!					to get them off NEW.
;	0060	!	11	07-09-77	CP	Change REQUIRE declarations to
;	0061	!					LIBRARY declarations for system
;	0062	!					wide files.
;	0063	!	12	05-10-77	CP	Change calls to error_reprt to
;	0064	!					SIGNALs. Change stored name of
;	0065	!					error routine strategy to simple
;	0066	!					signaling strategy.
;	0067	!	13	11-10-77	CP	In freeget, only accept a piece
;	0068	!					of storage if it is equal to the
;	0069	!					piece needed, or at least two
;	0070	!					longwords longer. This appears to
;	0071	!					be a longstanding bug.
;	0072	!	14	26-10-77	CP	Reactivate frspy and add routine
;	0073	!					check_free for diagnostic
;	0074	!					purposes. Only turn them on according
;	0075	!					to conditional compilation. Also
;	0076	!					modify the size field to be 16
;	0077	!					bits, and use the other 16 for
;	0078	!					conditional storage of the return
;	0079	!					address of the calling routine
;	0080	!					that requested the storage.
;	0081	!	15	31-10-77	CP	Fix returned count from report_free
;	0082	!					to be in bytes.
;	0083	!	16	07-11-77	CP	Change starle.req to starle.l32.
;	0084	!	17	05-APR-78	DAR	Turned off the diagnostic routines.
;	0085	!	18	27-APR-78	DAR	Modified require and library directives
;	0086	!					for the natvie build.
;	0087	!	19	08-jun-78	KGP	-New diagnostic literal FRE3 lets you
;	0088	!					 get a terse overview of what is happening.
;	0089	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 2
; Digital Equipment Corporation
;
;	0090	! TABLE OF CONTENTS
;	0091	!
;	0092	FORWARD ROUTINE
;	0093		dbg$freeinit : NOVALUE,		! routine to initialize free storage
;	0094		freeget,			! routine to get some free storage
;	0095		dbg$freerelease : NOVALUE,	! routine to release some free storage
;	0096		dbg$freez,			! routine to get and zero some free storage
;	0097		dbg$report_free;		! reports free storage left.
;	0098	
;	0099	!++
;	0100	! Abstract:
;	0101	!	THIS MODULE CONTAINS PROCEDURES TO MANAGE AN AREA OF FREE
;	0102	!	STORAGE.
;	0103	!
;	0104	!	THE ROUTINE dbg$freeinit IS CALLED AT SYSTEM INITIALIZATION
;	0105	!	TO INITIALIZE THE MODULE.  IT TAKES AS INPUT THE ADDRESS
;	0106	!	OF THE PROCEDURE TO BE CALLED IN THE EVENT AN ERROR
;	0107	!	IS ENCOUNTERED.  CODES FOR ERROR CONDITIONS ARE CONTAINED IN
;	0108	!	FILE 'dbgmsg.beg'.
;	0109	!
;	0110	!	THE ROUTINE freeget IS CALLED TO ALLOCATE A USER SPECIFIED
;	0111	!	number OF LONGWORDS.  IF THE REQUEST CAN BE SATISFIED,
;	0112	!	freeget RETURNS A POINTER TO THE BLOCK OF LONGWORDS.
;	0113	!	THE RETURNED BLOCK CONTAINS ONE EXTRA WORD CONTAINING
;	0114	!	THE SIZE REQUEST AT WORD -1 IN THE BLOCK.  THIS SIZE
;	0115	!	IS CHECKED WHEN THE STORAGE IS RETURNED.  IT SHOULD
;	0116	!	NOT BE MODIFIED.  THE ALGORITHM USED IS A FIRST FIT
;	0117	!	ALGORITHM WHICH WHILE NOT OPTIMAL SHOULD GIVE REASONABLE
;	0118	!	RESULTS, AND DO A MINIMUM OF SEARCHING.
;	0119	!
;	0120	!	Dynamic storage is the last 64K bytes of the per process
;	0121	!	address space. It is made accessible by a $CRETVA system
;	0122	!	service call made in FREEINIT.
;	0123	!
;	0124	!	dbg$freerelease IS CALLED TO RELEASE STORAGE NO LONGER needed.
;	0125	!	IT ATTEMPTS TO DO AS MUCH COMPACTION AS IS POSSIBLE.
;	0126	!
;	0127	!	ROUTINE dbg$freez IS CALLED TO ALLOCATE A BLOCK OF 
;	0128	!	CLEARED FREE STORAGE.
;	0129	!
;	0130	!	ROUTINE FRSPY IS CALLED TO MONITOR DYNAMIC STORAGE.
;	0131	!	IT CALLS A USER SPECIFIED PROCEDURE WITH THREE ARGUMENTS,
;	0132	!	FOR EACH BLOCK IN THE freelist.  THE THREE ARGUMENTS SPECIFY
;	0133	!	THE ADDRESS OF THE BLOCK, ITS SIZE, AND THE
;	0134	!	ADDRESS OF THE NEXT BLOCK IN THE list.
;	0135	!--
;	0136	
;	0137	!
;	0138	! REQUIRE FILES:
;	0139	!
;	0140	%IF %VARIANT		! True for TEN.
;     L 0141	%THEN
;     U 0142	LIBRARY 'NEW:STARLE';
;     U 0143	
;     U 0144	REQUIRE 'DBGPCT.REQ';

; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 2-1
; Digital Equipment Corporation
;
;     U 0145	REQUIRE 'VXSMAC.REQ';
;     U 0146	REQUIRE 'DBGGEN.REQ';
;     U 0147	REQUIRE 'BSTRUC.REQ';
;     U 0148	REQUIRE 'DBGMSG.REQ';
;     U 0149	REQUIRE 'SYSSER.REQ';
;     U 0150	%ELSE
;	0151	LIBRARY 'SYS$LIBRARY:STARLET.L32';
;	0152	
;	0153	REQUIRE 'SRC$:DBGPCT.REQ';
;	0165	REQUIRE 'SRC$:DBGGEN.REQ';
;	0415	REQUIRE 'SRC$:VXSMAC.REQ';
;	0455	REQUIRE 'SRC$:BSTRUC.REQ';
;	0506	REQUIRE 'LIB$:DBGMSG.REQ';
;	0785	REQUIRE 'SRC$:SYSSER.REQ';
;      R0788	SWITCHES LIST (SOURCE);
;      R0789	
;      R0790	EXTERNAL ROUTINE
;      R0791		dbg$fao_out;				! formats a line and outputs to the terminal
;      R0792	
;      R0793	SWITCHES LIST (NOSOURCE);
;	0838	%FI
;	0839	
;	0840	!
;	0841	! EQUATED SYMBOLS:
;	0842	!
;	0843	
;	0844	LITERAL
;	0845		dbg_fre		= 0,		! for debugging purposes
;	0846		dbg_fre1	= 0,		! ditto
;	0847		dbg_fre2	= 0,		! ditto
;	0848		dbg_fre3	= 0;		! Terse fre_get/fre_release output.
;	0849	
;	0850	%IF dbg_fre2
;     L 0851	%THEN
;     U 0852	FORWARD ROUTINE
;     U 0853		dbg$frspy : NOVALUE,		! routine to check out free storage
;     U 0854		dbg$check_free : NOVALUE;	! diagnostic routine
;     U 0855	%FI
;	0856	LITERAL
;	0857		sym_tab_start	=%X'7FFF0000',	! virtual address of symbol table beginning
;	0858		sym_tab_end	=%X'7FFFFFFF',	! virtual address of symbol table end
;	0859		storesize	= (sym_tab_end - sym_tab_start) / 4;
;	0860	
;	0861	OWN
;	0862		dbg$store: REF VECTOR,		! pointer to free storage area
;	0863		dbg$freelist : VECTOR [2];	! describes remaining unallocated free storage
;	0864	
;	0865	BASED_STRUCTURE (FR, 2,
;     P 0866		SIZE,	0,	0,	16,	1,
;     P 0867		caller,	0,	16,	16,	0,
;     P 0868		NEXT,	1,	0,	32,	0);

; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 3
; Digital Equipment Corporation
;
;	0869	GLOBAL ROUTINE dbg$freeinit : NOVALUE =
;	0870	
;	0871	!++
;	0872	! FUNCTIONAL DESCRIPTION:
;	0873	!	dbg$freeinit IS CALLED TO INITIALIZE THE FREE STORAGE
;	0874	!	PACKAGE.  IT TAKES ONE INPUT ARGUMENT, PROC, WHICH
;	0875	!	IS THE PROCEDURE TO BE CALLED IF A REQUEST FOR 
;	0876	!	SERVICE CANNOT BE SATISFIED.
;	0877	!
;	0878	! CALLING SEQUENCE:
;	0879	!	dbg$freeinit ()
;	0880	!
;	0881	! INPUTS:
;	0882	!	none
;	0883	!
;	0884	! IMPLICIT INPUTS:
;	0885	!	NONE
;	0886	!
;	0887	! OUTPUTS:
;	0888	!	NONE
;	0889	!
;	0890	! IMPLICIT OUTPUTS:
;	0891	!	dbg$freelist AND THE FIRST ELEMENT OF dbg$store ARE INITIALIZED.
;	0892	!
;	0893	! ROUTINE VALUE:
;	0894	!	NOVALUE
;	0895	!
;	0896	! SIDE EFFECTS:
;	0897	!	NONE
;	0898	!--
;	0899	
;	0900		BEGIN
;	0901	
;	0902		LITERAL
;	0903			start_tab	= 0,		! offset for start of symbol table
;	0904			end_tab		= 1;		! offset for end of symbol table.
;	0905	
;	0906		LOCAL
;	0907			symtab_desc : VECTOR [2],	! descriptor for space to create
;	0908			status;				! status code
;	0909	
;	0910		symtab_desc [start_tab] = sym_tab_start;
;	0911		symtab_desc [end_tab] = sym_tab_end;
;	0912		status = $CRETVA (INADR = symtab_desc, RETADR = symtab_desc);
;	0913		IF NOT .status
;	0914		THEN
;	0915			BEGIN
;	0916	
;	0917	%IF dbg_fre
;     L 0918	%THEN
;     U 0919			$fao_tt_out ('!/status code is !XL', .status);
;     U 0920	%FI
;	0921	
;	0922			SIGNAL (.status OR fatal_bit);
;	0923			RETURN

; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 3-1
; Digital Equipment Corporation
;
;	0924			END;
;	0925	
;	0926		!++
;	0927		! The create virtual page system service was successful.
;	0928		! Now initialize the first few words of the space, and the
;	0929		! freelist values.
;	0930		!--
;	0931	%IF dbg_fre
;     L 0932	%THEN
;     U 0933		$fao_tt_out ('!/start is !XL, end is !XL, size is !SL, !SL',
;     U 0934			.symtab_desc [start_tab], .symtab_desc [end_tab],
;     U 0935			.symtab_desc [end_tab] - .symtab_desc [start_tab], storesize * 4);
;     U 0936		IF (.symtab_desc [end_tab] - .symtab_desc [start_tab]) NEQ (storesize * 4)
;     U 0937		THEN $fao_tt_out ('!/difference is !SL (!SL)',
;     U 0938			(storesize * 4) - (.symtab_desc [end_tab] - .symtab_desc [start_tab]),
;     U 0939			storesize - ((.symtab_desc [end_tab] - .symtab_desc [start_tab]) / 4));
;     U 0940	%FI
;	0941		dbg$store = .symtab_desc [start_tab];
;	0942		fr_size (.dbg$store) = storesize;
;	0943		fr_next (.dbg$store) = null;
;	0944		fr_next (dbg$freelist) = .dbg$store;
;	0945		fr_size (dbg$freelist) = 2;
;	0946		END;


							    .TITLE  DBGFRE
							    .IDENT  \000019\

							    .PSECT  DBG$OWN,NOEXE,  PIC,2

					      00000 DBG$STORE:
							    .BLKB   4
					      00004 DBG$FREELIST:
							    .BLKB   8

							    .GLOBL  DBG$FAO_OUT, SYS$CRETVA
							    .WEAK   ACCESS_CHECK

							    .PSECT  DBG$CODE,NOWRT,  SHR,  PIC,0

					 0800 00000 	    .ENTRY  DBG$FREEINIT, Save R11				      ; 0869
		         5B 00000000'  EF  9E 00002 	    MOVAB   DBG$STORE, R11					      ;
		         5E	       04  C2 00009 	    SUBL2   #4, SP						      ;
			    7FFF0000   8F  DD 0000C 	    PUSHL   #2147418112						      ; 0910
		    04   AE 7FFFFFFF   8F  D0 00012 	    MOVL    #2147483647, SYMTAB_DESC+4				      ; 0911
				       7E  D4 0001A 	    CLRL    -(SP)						      ; 0912
				  04   AE  9F 0001C 	    PUSHAB  SYMTAB_DESC						      ;
				  08   AE  9F 0001F 	    PUSHAB  SYMTAB_DESC						      ;
	      00000000G  9F	       03  FB 00022 	    CALLS   #3, @#SYS$CRETVA					      ;
		         0C	       50  E8 00029 	    BLBS    STATUS, 1$						      ; 0913
	   7E	         50	       04  C9 0002C 	    BISL3   #4, STATUS, -(SP)					      ; 0922
	      00000000G  00	       01  FB 00030 	    CALLS   #1, LIB$SIGNAL					      ;
					   04 00037 	    RET     							      ; 0923
		         6B	       6E  D0 00038 1$:     MOVL    SYMTAB_DESC, DBG$STORE				      ; 0941
		         50	       6B  D0 0003B 	    MOVL    DBG$STORE, R0					      ; 0942

; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 3-2
; Digital Equipment Corporation
;
		         60	3FFF   8F  B0 0003E 	    MOVW    #16383, (R0)					      ;
				  04   A0  D4 00043 	    CLRL    4(R0)						      ; 0943
		    08   AB	       50  D0 00046 	    MOVL    R0, DBG$FREELIST+4					      ; 0944
		    04   AB	       02  B0 0004A 	    MOVW    #2, DBG$FREELIST					      ; 0945
					   04 0004E 	    RET     							      ; 0869

; Routine Size:  79 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 4
; Digital Equipment Corporation
;
;	0947	ROUTINE freeget (need1) =
;	0948	
;	0949	!++
;	0950	! FUNCTIONAL DESCRIPTION:
;	0951	!	PROCEDURE freeget IS CALLED WITH ONE INPUT ARGUMENT,
;	0952	!	need1, WHICH REPRESENTS THE number OF WORDS OF FREE
;	0953	!	STORAGE needed.  IT SEARCHES THE freelist FOR A
;	0954	!	node THAT HAS AT LEAST THE REQUIRED number OF WORDS.
;	0955	!	IF THE node HAS MORE THAN THE REQUIRED number OF WORDS,
;	0956	!	THE node IS SPLIT INTO TWO nodeS, AND ONE IS RETURNED.
;	0957	!
;	0958	! CALLING SEQUENCE:
;	0959	!	freeget ()
;	0960	!
;	0961	! INPUTS:
;	0962	!	need1	- THE number OF WORDS needed OF FREE STORAGE
;	0963	!
;	0964	! IMPLICIT INPUTS:
;	0965	!	THE CURRENT STATE OF dbg$freelist.
;	0966	!
;	0967	! OUTPUTS:
;	0968	!	THE ADDRESS OF THE FREE STORAGE ACQUIRED.
;	0969	!
;	0970	! IMPLICIT OUTPUTS:
;	0971	!	THE STATE OF dbg$freelist AND THE COUNT OF WORDS
;	0972	!	OF STORAGE LEFT ARE CHANGED.
;	0973	!
;	0974	! ROUTINE VALUE:
;	0975	!	THE ADDRESS OF THE BLOCK OR ZERO
;	0976	!
;	0977	! SIDE EFFECTS:
;	0978	!	NONE
;	0979	!--
;	0980	
;	0981		BEGIN
;	0982	
;	0983		LOCAL
;	0984			need,
;	0985			oldnode,
;	0986			list,
;	0987			have;
;	0988	
;	0989	%IF dbg_fre2
;     L 0990	%THEN
;     U 0991		LOCAL
;     U 0992			frame_ptr : REF VECTOR;
;     U 0993	
;     U 0994		BUILTIN
;     U 0995			FP;
;     U 0996	
;     U 0997		LITERAL
;     U 0998			pc_offset	= 4;		! offset to PC in stack frame
;     U 0999	
;     U 1000		frame_ptr = .fp;
;     U 1001	%FI

; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 4-1
; Digital Equipment Corporation
;
;	1002	
;	1003		need = .need1 + 1 ;	! ONE WORD BIAS FOR SIZE
;	1004	
;	1005	%IF dbg_fre OR dbg_fre3
;     L 1006	%THEN
;     U 1007		$fao_tt_out ('freeget: need !SL longwords', .need);
;     U 1008	%FI
;	1009	
;	1010		IF .need LSS 0
;	1011		THEN
;	1012			BEGIN
;	1013			SIGNAL (dbg$_nofree);
;	1014			RETURN null
;	1015			END;
;	1016		list = .fr_next (dbg$freelist);
;	1017	
;	1018	%IF dbg_fre
;     L 1019	%THEN
;     U 1020		$fao_tt_out ('!/next available chunk is at !XL, size is !SL', .list, .fr_size (.list));
;     U 1021	%FI
;	1022	
;	1023		oldnode = dbg$freelist;
;	1024		WHILE .list NEQ null
;	1025		DO
;	1026			BEGIN 	! FIND FIRST FIT
;	1027			IF ((have = .fr_size (.list)) EQL .need)
;	1028				OR (.have GEQ (.need + 2))
;	1029			THEN
;	1030				BEGIN	! FOUND 
;	1031	
;	1032	%IF dbg_fre1
;     L 1033	%THEN
;     U 1034				$fao_tt_out ('!/taking !SL from !SL', .need, .have);
;     U 1035	%FI
;	1036	
;	1037				IF .have EQL .need
;	1038				THEN fr_next (.oldnode) = .fr_next (.list)
;	1039				ELSE
;	1040					BEGIN	! LARGER THAN needed
;	1041					fr_next (.list + .need * 4) = .fr_next (.list);
;	1042					fr_size (.list + .need * 4 ) = .fr_size (.list) - .need;
;	1043					fr_next (.oldnode)  = .list + .need * 4;
;	1044					END;	! LARGER THAN needed
;	1045				fr_size (.list) = .need;
;	1046	
;	1047	%IF dbg_fre2
;     L 1048	%THEN
;     U 1049				fr_caller (.list) = .frame_ptr [pc_offset];
;     U 1050	%FI
;	1051	
;	1052	%IF dbg_fre1
;     L 1053	%THEN
;     U 1054				$fao_tt_out ('!/take !XL of size !SL', .list, .fr_size (.list));
;     U 1055	%FI
;	1056	

; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 4-2
; Digital Equipment Corporation
;
;	1057				RETURN (.list + 4);	! CONTAINS SIZE
;	1058				END	! FOUND
;	1059			ELSE list = .fr_next (.list);
;	1060			oldnode = .fr_next (.oldnode);
;	1061			END;	! FIND FIRST FIT
;	1062		SIGNAL (dbg$_nofree);		! signal error
;	1063		RETURN null
;	1064		END;	





					 001C 0004F FREEGET:.WORD   Save R2,R3,R4					      ; 0947
	   53	    04   AC	       01  C1 00051 	    ADDL3   #1, NEED1, NEED					      ; 1003
				       52  19 00056 	    BLSS    6$							      ; 1010
		         51 00000000'  EF  D0 00058 	    MOVL    DBG$FREELIST+4, LIST				      ; 1016
		         52 00000000'  EF  9E 0005F 	    MOVAB   DBG$FREELIST, OLDNODE				      ; 1023
				       51  D5 00066 1$:     TSTL    LIST						      ; 1024
				       40  13 00068 	    BEQL    6$							      ;
		         54	       61  32 0006A 	    CVTWL   (LIST), HAVE					      ; 1027
		         53	       54  D1 0006D 	    CMPL    HAVE, NEED						      ;
				       09  13 00070 	    BEQL    2$							      ;
	   50	         53	       02  C1 00072 	    ADDL3   #2, NEED, R0					      ; 1028
		         50	       54  D1 00076 	    CMPL    HAVE, R0						      ;
				       25  19 00079 	    BLSS    5$							      ;
		         53	       54  D1 0007B 2$:     CMPL    HAVE, NEED						      ; 1037
				       07  12 0007E 	    BNEQ    3$							      ;
		    04   A2	  04   A1  D0 00080 	    MOVL    4(LIST), 4(OLDNODE)					      ; 1038
				       11  11 00085 	    BRB     4$							      ; 1037
		         50	     6143  DE 00087 3$:     MOVAL   (LIST)[NEED], R0					      ; 1041
		    04   A0	  04   A1  D0 0008B 	    MOVL    4(LIST), 4(R0)					      ;
	   60	         61	       53  A3 00090 	    SUBW3   NEED, (LIST), (R0)					      ; 1042
		    04   A2	       50  D0 00094 	    MOVL    R0, 4(OLDNODE)					      ; 1043
		         61	       53  B0 00098 4$:     MOVW    NEED, (LIST)					      ; 1045
		         50	  04   A1  9E 0009B 	    MOVAB   4(LIST), R0						      ; 1057
					   04 0009F 	    RET     							      ;
		         51	  04   A1  D0 000A0 5$:     MOVL    4(LIST), LIST					      ; 1059
		         52	  04   A2  D0 000A4 	    MOVL    4(OLDNODE), OLDNODE					      ; 1060
				       BC  11 000A8 	    BRB     1$							      ; 1024
			    00028342   8F  DD 000AA 6$:     PUSHL   #164674						      ; 1062
	      00000000G  00	       01  FB 000B0 	    CALLS   #1, LIB$SIGNAL					      ;
				       50  D4 000B7 	    CLRL    R0							      ; 0947
					   04 000B9 	    RET     							      ;

; Routine Size:  107 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 5
; Digital Equipment Corporation
;
;	1065	GLOBAL ROUTINE dbg$freerelease (inode1, num1) : NOVALUE =
;	1066	
;	1067	!++
;	1068	! FUNCTIONAL DESCRIPTION:
;	1069	!	PROCEDURE dbg$freerelease IS CALLED TO RETURN STORAGE
;	1070	!	BACK INTO THE FREE STORAGE POOL.  IT MAINTAINS A
;	1071	!	freelist IN ASCENDING ORDER OF STORAGE ADDRESSES,
;	1072	!	AND FINDS THE PROPER LOCATION FOR inode IN THIS
;	1073	!	list.  THEN IT ATTEMPTS TO MERGE WITH THE LEFT HAND 
;	1074	!	NEIGHBOR AND WITH THE RIGHT HAND NEIGHBOR.
;	1075	!
;	1076	! CALLING SEQUENCE:
;	1077	!	dbg$freerelease ()
;	1078	!
;	1079	! INPUTS:
;	1080	!	inode1	- ADDRESS OF A node
;	1081	!	num1	- LENGTH OF A node
;	1082	!
;	1083	! IMPLICIT INPUTS:
;	1084	!	THE FREE STORAGE POOL, AND THE CURRENT CONTENTS OF dbg$freelist.
;	1085	!
;	1086	! OUTPUTS:
;	1087	!	NONE
;	1088	!
;	1089	! IMPLICIT OUTPUTS:
;	1090	!	AN ERROR MESSAGE CALL ON ERROR
;	1091	!
;	1092	! ROUTINE VALUE:
;	1093	!	NOVALUE
;	1094	!
;	1095	! SIDE EFFECTS:
;	1096	!	THE STORAGE IS RETURNED TO THE POOL.
;	1097	!--
;	1098	
;	1099		BEGIN
;	1100	
;	1101		LOCAL
;	1102			inode,
;	1103			num,
;	1104			node,
;	1105			oldnode;
;	1106	
;	1107		inode = .inode1 - 4 ;	! BIAS FOR SIZE WORD
;	1108		num = .num1 + 1 ;	! INVISIBLE TO USER
;	1109	
;	1110	%IF dbg_fre OR dbg_fre3
;     L 1111	%THEN
;     U 1112		$fao_tt_out ('freerelease: !SL longwords at !XL', .num, .inode); 
;     U 1113	%FI
;	1114		IF .inode GEQA .dbg$store 
;	1115		    AND .inode LEQA .dbg$store + (storesize * 4) - 1
;	1116		    AND .fr_size (.inode) EQL .num	! CORRECT SIZE
;	1117		THEN
;	1118			BEGIN	! IN RANGE
;	1119			node = .fr_next (dbg$freelist);

; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 5-1
; Digital Equipment Corporation
;
;	1120			oldnode = dbg$freelist;
;	1121			WHILE .inode GTRA .node AND .node NEQ null
;	1122			DO
;	1123				BEGIN	! FIND CORRECT SLOT
;	1124				oldnode = .node;
;	1125				node = .fr_next (.node);
;	1126				END;	! FIND CORRECT SLOT
;	1127			fr_next (.inode) = .node;	!MERGE INTO list
;	1128			fr_next (.oldnode) = .inode;
;	1129			INCR I FROM 1 TO 2 DO
;	1130				IF .oldnode + .fr_size (.oldnode) * 4 EQLA .fr_next (.oldnode)
;	1131					AND .oldnode NEQA dbg$freelist 	!NOT FIRST ON list
;	1132				THEN
;	1133					BEGIN	! MERGE A NEIGHBOR
;	1134	
;	1135	%IF dbg_fre1
;     L 1136	%THEN
;     U 1137					$fao_tt_out ('!/merging !XL with !XL, sizes !SL and !SL become !SL',
;     U 1138						.oldnode, .fr_next (.oldnode), .fr_size (.oldnode),
;     U 1139						.fr_size (.fr_next (.oldnode)),
;     U 1140						.fr_size (.oldnode) + .fr_size (.fr_next (.oldnode)));
;     U 1141	%FI
;	1142	
;	1143					fr_size (.oldnode) = .fr_size (.oldnode) + .fr_size (.fr_next (.oldnode));
;	1144					fr_next (.oldnode) = .fr_next (.fr_next (.oldnode));
;	1145					END 	!MERGE A NEIGHBOR
;	1146				ELSE oldnode = .fr_next (.oldnode);
;	1147			END	! IN RANGE
;	1148		ELSE
;	1149			BEGIN
;	1150	
;	1151	%IF dbg_fre
;     L 1152	%THEN
;     U 1153			IF .fr_size (.inode) NEQ .num
;     U 1154			THEN $fao_tt_out ('!/size error, size stored is !SL', .fr_size (.inode))
;     U 1155			ELSE $fao_tt_out ('!/range error');
;     U 1156	%FI
;	1157	
;	1158			SIGNAL (IF .fr_size (.inode) NEQ .num
;	1159					THEN dbg$_fresize
;	1160					ELSE dbg$_frerange);	! alarm
;	1161			END;
;	1162		END;





					 080C 000BA 	    .ENTRY  DBG$FREERELEASE, Save R2,R3,R11			      ; 1065
		         5B 00000000'  EF  9E 000BC 	    MOVAB   DBG$STORE, R11					      ;
	   51	    04   AC	       04  C3 000C3 	    SUBL3   #4, INODE1, INODE					      ; 1107
	   53	    08   AC	       01  C1 000C8 	    ADDL3   #1, NUM1, NUM					      ; 1108
		         6B	       51  D1 000CD 	    CMPL    INODE, DBG$STORE					      ; 1114
				       64  1F 000D0 	    BLSSU   6$							      ;
	   50	         6B 0000FFFB   8F  C1 000D2 	    ADDL3   #65531, DBG$STORE, R0				      ; 1115

; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 5-2
; Digital Equipment Corporation
;
		         50	       51  D1 000DA 	    CMPL    INODE, R0						      ;
				       57  1A 000DD 	    BGTRU   6$							      ;
	   61	         10	       00  EC 000DF 	    CMPV    #0, #16, (INODE), NUM				      ; 1116
				       53     000E3									      ;
				       50  12 000E4 	    BNEQ    6$							      ;
		         50	  08   AB  D0 000E6 	    MOVL    DBG$FREELIST+4, NODE				      ; 1119
		         52	  04   AB  9E 000EA 	    MOVAB   DBG$FREELIST, OLDNODE				      ; 1120
		         50	       51  D1 000EE 1$:     CMPL    INODE, NODE						      ; 1121
				       0D  1B 000F1 	    BLEQU   2$							      ;
				       50  D5 000F3 	    TSTL    NODE						      ;
				       09  13 000F5 	    BEQL    2$							      ;
		         52	       50  D0 000F7 	    MOVL    NODE, OLDNODE					      ; 1124
		         50	  04   A0  D0 000FA 	    MOVL    4(NODE), NODE					      ; 1125
				       EE  11 000FE 	    BRB     1$							      ; 1121
		    04   A1	       50  D0 00100 2$:     MOVL    NODE, 4(INODE)					      ; 1127
		    04   A2	       51  D0 00104 	    MOVL    INODE, 4(OLDNODE)					      ; 1128
		         53	       01  D0 00108 	    MOVL    #1, I						      ; 1129
		         50	       62  32 0010B 3$:     CVTWL   (OLDNODE), R0					      ; 1130
		         51	     6240  DE 0010E 	    MOVAL   (OLDNODE)[R0], R1					      ;
		         50	  04   A2  D0 00112 	    MOVL    4(OLDNODE), R0					      ;
		         50	       51  D1 00116 	    CMPL    R1, R0						      ;
				       13  12 00119 	    BNEQ    4$							      ;
		         51	  04   AB  9E 0011B 	    MOVAB   DBG$FREELIST, R1					      ; 1131
		         51	       52  D1 0011F 	    CMPL    OLDNODE, R1						      ;
				       0A  13 00122 	    BEQL    4$							      ;
		         62	       60  A0 00124 	    ADDW2   (R0), (OLDNODE)					      ; 1143
		    04   A2	  04   A0  D0 00127 	    MOVL    4(R0), 4(OLDNODE)					      ; 1144
				       03  11 0012C 	    BRB     5$							      ; 1130
		         52	       50  D0 0012E 4$:     MOVL    R0, OLDNODE						      ; 1146
	   D6	         53	       02  F3 00131 5$:     AOBLEQ  #2, I, 3$						      ; 1129
					   04 00135 	    RET     							      ; 1114
	   61	         10	       00  EC 00136 6$:     CMPV    #0, #16, (INODE), NUM				      ; 1158
				       53     0013A									      ;
				       08  13 0013B 	    BEQL    7$							      ;
			    00028332   8F  DD 0013D 	    PUSHL   #164658						      ;
				       06  11 00143 	    BRB     8$							      ;
			    0002832A   8F  DD 00145 7$:     PUSHL   #164650						      ;
	      00000000G  00	       01  FB 0014B 8$:     CALLS   #1, LIB$SIGNAL					      ;
					   04 00152 	    RET     							      ; 1065

; Routine Size:  153 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 6
; Digital Equipment Corporation
;
;	1163	GLOBAL ROUTINE dbg$freez (need) =
;	1164	
;	1165	!++
;	1166	! FUNCTIONAL DESCRIPTION:
;	1167	!	CALLS freeget TO ALLOCATE STORAGE, AND CLEARS IT
;	1168	!
;	1169	! CALLING SEQUENCE:
;	1170	!	dbg$freez ()
;	1171	!
;	1172	! INPUTS:
;	1173	!	LENGTH OF AREA WANTED (IN LONGWORDS)
;	1174	!
;	1175	! IMPLICIT INPUTS:
;	1176	!	NONE
;	1177	!
;	1178	! OUTPUTS:
;	1179	!	ADDRESS OF AREA
;	1180	!
;	1181	! IMPLICIT OUTPUTS:
;	1182	!	NONE
;	1183	!
;	1184	! ROUTINE VALUE:
;	1185	!	NOVALUE
;	1186	!
;	1187	! SIDE EFFECTS:
;	1188	!	NONE
;	1189	!--
;	1190	
;	1191		BEGIN
;	1192	
;	1193		LOCAL
;	1194			ptr;
;	1195	
;	1196		IF (ptr = freeget (.need)) NEQ 0
;	1197		THEN zerocor (.ptr, .need);
;	1198		RETURN .ptr
;	1199		END;





					 007C 00153 	    .ENTRY  DBG$FREEZ, Save R2,R3,R4,R5,R6			      ; 1163
				  04   AC  DD 00155 	    PUSHL   NEED						      ; 1196
		  FEF2   CF	       01  FB 00158 	    CALLS   #1, FREEGET						      ;
		         56	       50  D0 0015D 	    MOVL    R0, PTR						      ;
				       0B  13 00160 	    BEQL    1$							      ;
	   50	    04   AC	       02  78 00162 	    ASHL    #2, NEED, R0					      ; 1197
	   00	         6E	       00  2C 00167 	    MOVC5   #0, (SP), #0, R0, (PTR)				      ;
		         66	       50     0016B									      ;
		         50	       56  D0 0016D 1$:     MOVL    PTR, R0						      ; 1198
					   04 00170 	    RET     							      ; 1163

; Routine Size:  30 bytes

; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 6-1
; Digital Equipment Corporation
;



; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 7
; Digital Equipment Corporation
;
;	1200	GLOBAL ROUTINE dbg$report_free =
;	1201	
;	1202	!++
;	1203	! Functional description:
;	1204	!	reports the number of bytes left in free storage.
;	1205	!
;	1206	! Calling sequence:
;	1207	!	CALLS #0, dbg$report_free
;	1208	!
;	1209	! Formal parameters:
;	1210	!	none
;	1211	!
;	1212	! Implicit inputs:
;	1213	!	the elements of the free list.
;	1214	!
;	1215	! Implicit outputs:
;	1216	!	none
;	1217	!
;	1218	! Routine value:
;	1219	!	the number of bytes of storage that is free
;	1220	!
;	1221	! Side effects:
;	1222	!	none
;	1223	!
;	1224	!--
;	1225	
;	1226		BEGIN
;	1227	
;	1228		LOCAL
;	1229			count,
;	1230			pointer;
;	1231	
;	1232		count = 0;
;	1233	
;	1234		!++
;	1235		! Step through the freelist.
;	1236		!--
;	1237		pointer = .fr_next (dbg$freelist);
;	1238		WHILE .pointer NEQ null
;	1239		DO
;	1240			BEGIN
;	1241			count = .count + .fr_size (.pointer);
;	1242			pointer = .fr_next (.pointer);
;	1243			END;
;	1244		RETURN .count * 4
;	1245		END;





					 0004 00171 	    .ENTRY  DBG$REPORT_FREE, Save R2				      ; 1200
				       50  D4 00173 	    CLRL    COUNT						      ; 1232
		         51 00000000'  EF  D0 00175 	    MOVL    DBG$FREELIST+4, POINTER				      ; 1237
				       51  D5 0017C 1$:     TSTL    POINTER						      ; 1238

; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 7-1
; Digital Equipment Corporation
;
				       0C  13 0017E 	    BEQL    2$							      ;
		         52	       61  32 00180 	    CVTWL   (POINTER), R2					      ; 1241
		         50	       52  C0 00183 	    ADDL2   R2, COUNT						      ;
		         51	  04   A1  D0 00186 	    MOVL    4(POINTER), POINTER					      ; 1242
				       F0  11 0018A 	    BRB     1$							      ; 1238
		         50	       04  C4 0018C 2$:     MULL2   #4, R0						      ; 1244
					   04 0018F 	    RET     							      ; 1200

; Routine Size:  31 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 8
; Digital Equipment Corporation
;
;	1246	%IF dbg_fre2
;     L 1247	%THEN
;     U 1248	
;     U 1249	GLOBAL ROUTINE dbg$frspy (proc) : NOVALUE =
;     U 1250	
;     U 1251	!++
;     U 1252	! FUNCTIONAL DESCRIPTION:
;     U 1253	!	procedure frspy IS CALLED WITH ONE ARGUMENT, THE ADDRESS
;     U 1254	!	OF A procedure TO BE CALLED ONCE FOR EACH BLOCK ON THE
;     U 1255	!	freelist.  IT CALLS THE procedure WITH THREE ARGUMENTS:
;     U 1256	!	THE ADDRESS OF THE BLOCK, THE SIZE OF THE BLOCK, AND THE ADDRESS
;     U 1257	!	OF THE NEXT BLOCK IN THE list.
;     U 1258	!
;     U 1259	! CALLING SEQUENCE:
;     U 1260	!	dbg$frspy ()
;     U 1261	!
;     U 1262	! INPUTS:
;     U 1263	!	proc	- THE ADDRESS OF A procedure TO CALL TO EXAMINE THE
;     U 1264	!		  FREE STORAGE POOL.
;     U 1265	!
;     U 1266	! IMPLICIT INPUTS:
;     U 1267	!	THE FREE STORAGE POOL
;     U 1268	!
;     U 1269	! OUTPUTS:
;     U 1270	!	NONE
;     U 1271	!
;     U 1272	! IMPLICIT OUTPUTS:
;     U 1273	!	THE ROUTINE CALLS
;     U 1274	!
;     U 1275	! ROUTINE VALUE:
;     U 1276	!	NOVALUE
;     U 1277	!
;     U 1278	! SIDE EFFECTS:
;     U 1279	!	NONE
;     U 1280	!--
;     U 1281	
;     U 1282		BEGIN
;     U 1283	
;     U 1284		LOCAL 
;     U 1285			ptr;			! BLOCK POINTER
;     U 1286	
;     U 1287		!++
;     U 1288		! STEP THROUGH freelist
;     U 1289		!--
;     U 1290		ptr = .fr_next (dbg$freelist);
;     U 1291		WHILE .ptr NEQ null
;     U 1292		DO
;     U 1293			BEGIN
;     U 1294			(.proc) (.ptr, .fr_size (.ptr), .fr_next (.ptr));
;     U 1295			ptr = .fr_next (.ptr);
;     U 1296			END;
;     U 1297		END;

; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 9
; Digital Equipment Corporation
;
;     U 1298	GLOBAL ROUTINE dbg$check_free (address, size, next, caller) : NOVALUE =
;     U 1299	
;     U 1300		BEGIN
;     U 1301		$fao_tt_out ('!/!SL longwords at !XL pointing to !XL',.size, .address, .next);
;     U 1302		END;
;     U 1303	%FI

; Bliss-32 7.352	Saturday 22-AUG-1978 04:20:56	DBB3:[DEBUG.SRC]DBGFRE.B32;5					Page 10
; Digital Equipment Corporation
;
;	1304	END
;	1305	ELUDOM




							    .GLOBL  LIB$SIGNAL

;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  DBG$OWN        	    12    WRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
;  DBG$CODE       	   400  NOWRT,  RD ,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(0)
;  $CODE$         	     0  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]STARLET.L32;1		      2688         4         0       109






;			COMPILER INTERNAL TIMING

;	Phase	    Faults	Cpu-time      Elapsed-time
;	LEXSYN	      316	00:19.6		00:35.6
;	FLOWAN	       23	00:00.9		00:01.2
;	DELAY	       25	00:00.6		00:00.8
;	TNBIND	       29	00:00.7		00:00.9
;	CODE	       47	00:01.1		00:01.6
;	FINAL	       78	00:02.3		00:03.3
;	Total	      518	00:25.2		00:43.4

; Size:		400 code + 12 data bytes
; Run Time:	00:25.5
; Elapsed Time:	00:44.0
; Memory Used:	198 pages
; Compilation Complete
