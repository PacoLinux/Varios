
; Bliss-32 7.352	Saturday 22-AUG-1978 04:09:38	DBB3:[DEBUG.SRC]DBGCON.B32;6					Page 1
; Digital Equipment Corporation
;
;	0001	MODULE DBGCON ( ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE),
;	0002			IDENT = '000013') =
;	0003	BEGIN
;	0004	
;	0005	! Copyright (C) 1976
;	0006	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0007	!
;	0008	! This software is furnished under a license for use only on a
;	0009	! single computer system and may be copied only with the inclusion
;	0010	! of the above copyright notice. This software, or any
;	0011	! other copies thereof, may not be provided or otherwise made
;	0012	! available to any other person except for use on such system
;	0013	! and to one who agrees to these license terms. Title to and
;	0014	! ownership of the software shall at all times remain in DEC.
;	0015	!
;	0016	! The information in this software is subject to change without
;	0017	! notice and should not be construed as a commitment by Digital
;	0018	! Equipment Corporation.
;	0019	!
;	0020	! DEC assumes no responsibility for the use or reliability of
;	0021	! its software on equipment which is not supplied by DEC.
;	0022	!
;	0023	! FACILITY:	General Library
;	0024	!
;	0025	!++
;	0026	! FUNCTIONAL DESCRIPTION:
;	0027	!	CONVERSION ROUTINES.
;	0028	!
;	0029	! Version:	13
;	0030	!
;	0031	! History:
;	0032	!	Author:
;	0033	!		Carol Peters, 18 May 1976: Version 01
;	0034	!
;	0035	!	Modified by:
;	0036	!		Mike Candela, 19-May-78: Version 13
;	0037	!
;	0038	! Revision history:
;	0039	!	6	29-04-77	CP	Added routine DBG$CONV_R_50 to
;	0040	!					convert from RAD50 (taken from
;	0041	!					DBGMAC). Also, change second
;	0042	!					argument in RADX_CONVRT to
;	0043	!					be the address in which to place
;	0044	!					the converted value. If the
;	0045	!					routine fails to convert the
;	0046	!					string, return false, otherwise
;	0047	!					return true.
;	0048	!	07	11-10-77	CP	Change calls to error_reprt to
;	0049	!					SIGNALs. Make radx_convrt a
;	0050	!					NOVALUE routine. On error, an
;	0051	!					unwind is taken.
;	0052	!	08	23-11-77	CP	Add diagnostic to display contents
;	0053	!					of buffer when radx_convrt is
;	0054	!					called.
;	0055	!	09	23-FEB-78	DAR	Modified DBG$RADX_CONVRT to detect

; Bliss-32 7.352	Saturday 22-AUG-1978 04:09:38	DBB3:[DEBUG.SRC]DBGCON.B32;6					Page 1-1
; Digital Equipment Corporation
;
;	0056	!					overflow of 32 bits.
;	0057	!	10	24-MAR-78	DAR	Fixed logic bug in the sign detection
;	0058	!					logic of DBG$RADX_CONVRT.
;	0059	!	11	27-APR-78	DAR	Modified the require and library directives
;	0060	!					for the native build.
;	0061	!	12	11-may-78	KGP	-CONV_R_50 now tells you how many non-
;	0062	!					 blank characters the opcode has.
;	0063	!	13	19-May-78	MCC	Changed argument passed into DBG$RADX_CONVRT
;	0064	!					from string address to input_stg_desc.
;	0065	!					Also made routine return a value instead
;	0066	!					of NOVALUE.
;	0067	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 04:09:38	DBB3:[DEBUG.SRC]DBGCON.B32;6					Page 2
; Digital Equipment Corporation
;
;	0068	! TABLE OF CONTENTS
;	0069	!
;	0070	
;	0071	FORWARD ROUTINE
;	0072		dbg$conv_r_50,			! SPECIAL-PURPOSE RAD50 CONVERSION ROUTINE.
;	0073		dbg$radx_convrt ;	! CONVERTS A STRING TO A VALUE
;	0074	
;	0075	!+
;	0076	!	REQUIRE FILES
;	0077	!-
;	0078	%IF %VARIANT		! True for TEN.
;     L 0079	%THEN
;     U 0080	LIBRARY 'NEW:STARLE';
;     U 0081	
;     U 0082	REQUIRE 'DBGPCT.REQ';
;     U 0083	REQUIRE 'DBGGEN.REQ';
;     U 0084	REQUIRE 'VXSMAC.REQ';
;     U 0085	REQUIRE 'DBGMSG.REQ';
;     U 0086	REQUIRE 'SYSSER.REQ';
;     U 0087	%ELSE
;	0088	LIBRARY 'SYS$LIBRARY:STARLET.L32';
;	0089	
;	0090	REQUIRE 'SRC$:DBGPCT.REQ';
;	0102	REQUIRE 'SRC$:DBGGEN.REQ';
;	0352	REQUIRE 'SRC$:VXSMAC.REQ';
;	0392	REQUIRE 'LIB$:DBGMSG.REQ';
;	0671	REQUIRE 'SRC$:SYSSER.REQ';
;      R0674	SWITCHES LIST (SOURCE);
;      R0675	
;      R0676	EXTERNAL ROUTINE
;      R0677		dbg$fao_out;				! formats a line and outputs to the terminal
;      R0678	
;      R0679	SWITCHES LIST (NOSOURCE);
;	0724	%FI
;	0725	
;	0726	EXTERNAL
;	0727		dbg$gb_mod_ptr: REF VECTOR [, BYTE];	! pointer to current modes
;	0728	
;	0729	LITERAL
;	0730		dbg_con		= FALSE;		! diagnostic flag

; Bliss-32 7.352	Saturday 22-AUG-1978 04:09:38	DBB3:[DEBUG.SRC]DBGCON.B32;6					Page 3
; Digital Equipment Corporation
;
;	0731	GLOBAL ROUTINE DBG$RADX_CONVRT (string_desc)  =
;	0732	!++
;	0733	! FUNCTIONAL DESCRIPTION:
;	0734	!	CONVERTS AN ASCII STRING TO A LONGWORD value IN THE
;	0735	!	current radix.
;	0736	!
;	0737	!
;	0738	! INPUTS:
;	0739	!	string_desc	- ADDRESS OF ASCII STRING INFORMATION BLOCK
;	0740	!
;	0741	! IMPLICIT INPUTS:
;	0742	!	contents of dbg$gb_mod_ptr [mode_radix], which is the current
;	0743	!	radix.
;	0744	!
;	0745	! OUTPUTS:
;	0746	!	none
;	0747	!
;	0748	! IMPLICIT OUTPUTS:
;	0749	!	A signal and unwind occurs if the conversion fails.
;	0750	!	The converted value is placed in the address passed as the
;	0751	!	second argument.
;	0752	!
;	0753	! ROUTINE value:
;	0754	!	32 bit converted value.
;	0755	!
;	0756	! SIDE EFFECTS:
;	0757	!	signals errors.
;	0758	!--
;	0759	
;	0760		BEGIN
;	0761	
;	0762		BUILTIN
;	0763			EMUL;			! Multiply and add two longwords
;	0764						! to produce quadword result.
;	0765	
;	0766		MAP
;	0767			string_desc: REF BLOCK [, BYTE];
;	0768	
;	0769		LOCAL
;	0770			trunc_flag,		! Truncation flag
;	0771			string_ptr,		! Temporary pointer to string
;	0772			negate,			! NEGATIVE NUMBER FLAG
;	0773			char,			! character-HOLDING VARIABLE
;	0774			VALUE : VECTOR[2,LONG];	! Quadword to hold converted value.
;	0775	
;	0776	%IF dbg_con
;     L 0777	%THEN
;     U 0778		$fao_tt_out ('string is "!AS"', .string_desc);
;     U 0779	%FI
;	0780	
;	0781		trunc_flag = FALSE;				! Initialize truncation flag
;	0782		VALUE[1] = 0;				 	! Initialize result
;	0783		VALUE[0] = 0;			
;	0784		string_ptr = .string_desc [dsc$a_pointer];	! Initialize temp
;	0785								! string pointer

; Bliss-32 7.352	Saturday 22-AUG-1978 04:09:38	DBB3:[DEBUG.SRC]DBGCON.B32;6					Page 3-1
; Digital Equipment Corporation
;
;	0786		negate = FALSE;
;	0787	
;	0788		INCR n FROM 0 TO (.string_desc [dsc$w_length] - 1) DO
;	0789			BEGIN
;	0790			char = CH$RCHAR_A (string_ptr);
;	0791			IF .n EQL 0
;	0792			THEN
;	0793				BEGIN
;	0794				IF (.char EQL %C'-')
;	0795				THEN
;	0796				    BEGIN
;	0797					negate = TRUE;
;	0798					char = %C'0';
;	0799				    END;
;	0800				IF (.char EQL %C'+')
;	0801				THEN	char = %C'0';
;	0802				END;
;	0803			IF ((.char GEQ %C'0') AND (.char LEQ %C'9'))
;	0804			THEN char = .char - %C'0'
;	0805			ELSE
;	0806				IF ((.char GEQ %C'A') AND (.char LEQ %C'F'))
;	0807				THEN char = .char - %C'A' + 10
;	0808				ELSE char = 256;
;	0809			IF .char GEQ .dbg$gb_mod_ptr [mode_radix]
;	0810			THEN SIGNAL ( DBG$_INVNUMBER, 1, .string_desc)
;	0811			ELSE
;	0812				EMUL (VALUE[0], %REF(.DBG$GB_MOD_PTR[MODE_RADIX]), CHAR, VALUE);
;	0813			IF .VALUE[1] NEQ 0 THEN   trunc_flag = TRUE;
;	0814	
;	0815			END;
;	0816	
;	0817	
;	0818		IF .trunc_flag
;	0819		THEN SIGNAL (DBG$_NUMTRUNC);
;	0820	      
;	0821		IF .negate
;	0822		THEN	VALUE[0] = - .VALUE[0];
;	0823	    
;	0824	    
;	0825	%IF dbg_con
;     L 0826	%THEN
;     U 0827		$fao_tt_out ('returned value = !XL', .VALUE[0]);
;     U 0828	%FI
;	0829	   
;	0830		RETURN .value[0];
;	0831		END;


							    .TITLE  DBGCON
							    .IDENT  \000013\

							    .GLOBL  DBG$FAO_OUT, DBG$GB_MOD_PTR

							    .PSECT  DBG$CODE,NOWRT,  SHR,  PIC,0


; Bliss-32 7.352	Saturday 22-AUG-1978 04:09:38	DBB3:[DEBUG.SRC]DBGCON.B32;6					Page 3-2
; Digital Equipment Corporation
;
					 09FC 00000 	    .ENTRY  DBG$RADX_CONVRT, Save R2,R3,R4,R5,R6,R7,R8,R11	      ; 0731
		         5B 00000000G  00  9E 00002 	    MOVAB   LIB$SIGNAL, R11					      ;
				       56  D4 00009 	    CLRL    TRUNC_FLAG						      ; 0781
				       7E  7C 0000B 	    CLRQ    VALUE						      ; 0783
		         54	  04   AC  D0 0000D 	    MOVL    STRING_DESC, R4					      ; 0784
		         58	  04   A4  D0 00011 	    MOVL    4(R4), STRING_PTR					      ;
				       57  D4 00015 	    CLRL    NEGATE						      ; 0786
		         55	       64  3C 00017 	    MOVZWL  (R4), R5						      ; 0788
		         53	       01  CE 0001A 	    MNEGL   #1, N						      ;
				       73  11 0001D 	    BRB     9$							      ;
		         52	       88  9A 0001F 1$:     MOVZBL  (STRING_PTR)+, CHAR					      ; 0790
				       53  D5 00022 	    TSTL    N							      ; 0791
				       13  12 00024 	    BNEQ    3$							      ;
		         2D	       52  D1 00026 	    CMPL    CHAR, #45						      ; 0794
				       06  12 00029 	    BNEQ    2$							      ;
		         57	       01  D0 0002B 	    MOVL    #1, NEGATE						      ; 0797
		         52	       30  D0 0002E 	    MOVL    #48, CHAR						      ; 0798
		         2B	       52  D1 00031 2$:     CMPL    CHAR, #43						      ; 0800
				       03  12 00034 	    BNEQ    3$							      ;
		         52	       30  D0 00036 	    MOVL    #48, CHAR						      ; 0801
		         30	       52  D1 00039 3$:     CMPL    CHAR, #48						      ; 0803
				       0A  19 0003C 	    BLSS    4$							      ;
		         39	       52  D1 0003E 	    CMPL    CHAR, #57						      ;
				       05  14 00041 	    BGTR    4$							      ;
		         52	       30  C2 00043 	    SUBL2   #48, CHAR						      ; 0804
				       1C  11 00046 	    BRB     6$							      ; 0803
	      00000041   8F	       52  D1 00048 4$:     CMPL    CHAR, #65						      ; 0806
				       0E  19 0004F 	    BLSS    5$							      ;
	      00000046   8F	       52  D1 00051 	    CMPL    CHAR, #70						      ;
				       05  14 00058 	    BGTR    5$							      ;
		         52	       37  C2 0005A 	    SUBL2   #55, CHAR						      ; 0807
				       05  11 0005D 	    BRB     6$							      ; 0806
		         52	0100   8F  3C 0005F 5$:     MOVZWL  #256, CHAR						      ; 0808
00000000G  FF	         08	       00  ED 00064 6$:     CMPZV   #0, #8, @DBG$GB_MOD_PTR, CHAR			      ; 0809
				       52     0006C									      ;
				       0F  14 0006D 	    BGTR    7$							      ;
				       54  DD 0006F 	    PUSHL   R4							      ; 0810
				       01  DD 00071 	    PUSHL   #1							      ;
			    000281D0   8F  DD 00073 	    PUSHL   #164304						      ;
		         6B	       03  FB 00079 	    CALLS   #3, LIB$SIGNAL					      ;
				       0C  11 0007C 	    BRB     8$							      ; 0809
		         50 00000000G  FF  9A 0007E 7$:     MOVZBL  @DBG$GB_MOD_PTR, R0					      ; 0812
	   52	         50	       6E  7A 00085 	    EMUL    VALUE, R0, CHAR, VALUE				      ;
				       6E     00089									      ;
				  04   AE  D5 0008A 8$:     TSTL    VALUE+4						      ; 0813
				       03  13 0008D 	    BEQL    9$							      ;
		         56	       01  D0 0008F 	    MOVL    #1, TRUNC_FLAG					      ;
	   89	         53	       55  F2 00092 9$:     AOBLSS  R5, N, 1$						      ; 0788
		         09	       56  E9 00096 	    BLBC    TRUNC_FLAG, 10$					      ; 0818
			    0002805B   8F  DD 00099 	    PUSHL   #163931						      ; 0819
		         6B	       01  FB 0009F 	    CALLS   #1, LIB$SIGNAL					      ;
		         03	       57  E9 000A2 10$:    BLBC    NEGATE, 11$						      ; 0821
		         6E	       6E  CE 000A5 	    MNEGL   VALUE, VALUE					      ; 0822
		         50	       6E  D0 000A8 11$:    MOVL    VALUE, R0						      ; 0830
					   04 000AB 	    RET     							      ; 0731

; Bliss-32 7.352	Saturday 22-AUG-1978 04:09:38	DBB3:[DEBUG.SRC]DBGCON.B32;6					Page 3-3
; Digital Equipment Corporation
;

; Routine Size:  172 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 04:09:38	DBB3:[DEBUG.SRC]DBGCON.B32;6					Page 4
; Digital Equipment Corporation
;
;	0832	GLOBAL ROUTINE dbg$conv_r_50( OPWORD, DST_PTR ) =
;	0833	!++
;	0834	! FUNCTIONAL DESCRIPTION:
;	0835	!	THIS ROUTINE IS A SPECIAL-PURPOSE RAD50-TO-ASCII CONVERSION
;	0836	!	ROUTINE.  IT TAKES A LONGWORD CONTAINING 2 RAD50 WORDS,
;	0837	!	CONVERTS THEM TO A 6-character STRING, AND 'STUFFS' THESE 
;	0838	!	characters INTO THE BYTE VECTOR WE ARE PASSED A POINTER TO.
;	0839	!
;	0840	! WARNING:
;	0841	!	THE REST OF THE CODE WHICH INTERFACES TO THIS USES THE
;	0842	!	LITERAL 'OP_CH_SIZE' TO REFER TO THIS 6-character STRING,
;	0843	!	BUT THIS SIZE IS IMPLICIT IN THE CODE HERE.  IF THIS
;	0844	!	CODE IS CHANGED, THE LITERAL MUST ALSO BE CHANGED.  JUST
;	0845	!	CHANGING THE LITERAL IS NOT ENOUGH.
;	0846	!
;	0847	! CALLING SEQUENCE:
;	0848	!	dbg$conv_r_50 ( LONGWORD, BYTE_POINTER );
;	0849	!
;	0850	! INPUTS:
;	0851	!	OPWORD	- THE LONGWORD WHICH CONTAINS THE 6 RAD50 characters.
;	0852	!		- THIS WORD COMES FROM THE OP_NAME FIELD OF THE
;	0853	!		  dbg$GB_OPINFO DATA VECTOR.
;	0854	!	DST_PTR - ANY BYTE ADDRESS INTO WHICH THIS ROUTINE WILL
;	0855	!		  STUFF THE 6 ASCII characters OBTAINED FROM OPWORD.
;	0856	!
;	0857	! IMPLICIT INPUTS:
;	0858	!	OP_CH_SIZE - FROM VAXOPS.REQ, WHICH MUST BE 6 TO MATCH THIS CODE.
;	0859	!
;	0860	! OUTPUTS:
;	0861	!	NONE.
;	0862	!
;	0863	! IMPLICIT OUTPUTS:
;	0864	!	THE 6 ASCII chars ARE STUFFED BACK INTO THE USER-SUPPLIED
;	0865	!	STRING.
;	0866	!
;	0867	! ROUTINE VALUE:
;	0868	!	The number of non-blank characters stuffed into
;	0869	!	the output string.
;	0870	!
;	0871	! SIDE EFFECTS:
;	0872	!	SEE IMPLICIT OUTPUTS.
;	0873	!--
;	0874	
;	0875	    BEGIN
;	0876	
;	0877	    MAP
;	0878		DST_PTR : REF VECTOR[,BYTE];	! WHERE TO STUFF THE chars.
;	0879	
;	0880	    LOCAL
;	0881		non_blanks,
;	0882		J,	! INDEX.
;	0883		W,	! THE LONGWORD.
;	0884		PTR : REF VECTOR[,BYTE];
;	0885	
;	0886	    BIND

; Bliss-32 7.352	Saturday 22-AUG-1978 04:09:38	DBB3:[DEBUG.SRC]DBGCON.B32;6					Page 4-1
; Digital Equipment Corporation
;
;	0887		DIVTAB = UPLIT(1, %O'50', %O'3100') : VECTOR;
;	0888	
;	0889		! JUST EXTRACT EACH OF THE TWO WORDS, CONVERT THEM,
;	0890		! AND STUFF BACK THE RESTULS.
;	0891	
;	0892		PTR = .DST_PTR;
;	0893		non_blanks = 0;
;	0894	
;	0895		INCR K FROM 0 TO 16 BY 16
;	0896		    DO
;	0897		    BEGIN ! DO THE CONVERSION ON BOTH WORDS SEPARATELY.
;	0898		
;	0899		    W = .OPWORD<.K,16>;
;	0900		
;	0901		    DECR I FROM 2 TO 0 DO
;	0902			BEGIN
;	0903			J = .W/.DIVTAB[.I]; W = .W - .J*.DIVTAB[.I];
;	0904			IF .J NEQ 0
;	0905			THEN
;	0906			    BEGIN
;	0907			    IF .J NEQ %O'33'
;	0908			    THEN
;	0909				BEGIN
;	0910				IF .J LSS %O'33' THEN J = .J + %O'56';
;	0911				J = .J + %O'11';
;	0912				END;
;	0913			    J = .J + %O'11';
;	0914			    END
;	0915			ELSE
;	0916			    J = %O'40';
;	0917		
;	0918			! AT THIS POINT, A SINGLE char IS IN BYTE 0 OF J.
;	0919			! Stuff the character back and tally up the
;	0920			! number of non-blank ones.
;	0921		
;	0922			IF( ((.PTR)<0,8> = .J) NEQ %O'40' )
;	0923			then
;	0924				non_blanks = .non_blanks +1;
;	0925	
;	0926			PTR = .PTR + 1;
;	0927			END;
;	0928		
;	0929		END;
;	0930		! END OF K LOOP.
;	0931		
;	0932	    !Return the number of non-blank characters
;	0933	    ! we stuffed back.
;	0934	
;	0935	    RETURN(.non_blanks);
;	0936	    END; ! OF conv_r_50 ROUTINE.



							    .PSECT  DBG$PLIT,NOWRT,  SHR,  PIC,0


; Bliss-32 7.352	Saturday 22-AUG-1978 04:09:38	DBB3:[DEBUG.SRC]DBGCON.B32;6					Page 4-2
; Digital Equipment Corporation
;
					      00000 P.AAA:  .LONG   1, 40, 1600						      ;

						    DIVTAB=		P.AAA


							    .PSECT  DBG$CODE,NOWRT,  SHR,  PIC,0

					 087C 000AC 	    .ENTRY  DBG$CONV_R_50, Save R2,R3,R4,R5,R6,R11		      ; 0832
		         5B 00000000'  EF  9E 000AE 	    MOVAB   DIVTAB, R11						      ;
		         56	  08   AC  D0 000B5 	    MOVL    DST_PTR, PTR					      ; 0892
				       54  7C 000B9 	    CLRQ    K							      ; 0895
      04   AC	         10	       54  EF 000BB 1$:     EXTZV   K, #16, OPWORD, W					      ; 0899
				       53     000C0									      ;
		         50	       02  D0 000C1 	    MOVL    #2, I						      ; 0901
	   51	         53	     6B40  C7 000C4 2$:     DIVL3   DIVTAB[I], W, J					      ; 0903
	   52	         51	     6B40  C5 000C9 	    MULL3   DIVTAB[I], J, R2					      ;
		         53	       52  C2 000CE 	    SUBL2   R2, W						      ;
				       51  D5 000D1 	    TSTL    J							      ; 0904
				       15  13 000D3 	    BEQL    5$							      ;
		         1B	       51  D1 000D5 	    CMPL    J, #27						      ; 0907
				       0B  13 000D8 	    BEQL    4$							      ;
		         1B	       51  D1 000DA 	    CMPL    J, #27						      ; 0910
				       03  18 000DD 	    BGEQ    3$							      ;
		         51	       2E  C0 000DF 	    ADDL2   #46, J						      ;
		         51	       09  C0 000E2 3$:     ADDL2   #9, J						      ; 0911
		         51	       09  C0 000E5 4$:     ADDL2   #9, J						      ; 0913
				       03  11 000E8 	    BRB     6$							      ; 0904
		         51	       20  D0 000EA 5$:     MOVL    #32, J						      ; 0916
		         66	       51  90 000ED 6$:     MOVB    J, (PTR)						      ; 0922
		         20	       51  D1 000F0 	    CMPL    J, #32						      ;
				       02  13 000F3 	    BEQL    7$							      ;
				       55  D6 000F5 	    INCL    NON_BLANKS						      ; 0924
				       56  D6 000F7 7$:     INCL    PTR							      ; 0926
		         C8	       50  F4 000F9 	    SOBGEQ  I, 2$						      ; 0901
	   54	         10	       10  F1 000FC 	    ACBL    #16, #16, K, 1$					      ; 0895
				     FFB9     00100									      ;
		         50	       55  D0 00102 	    MOVL    NON_BLANKS, R0					      ; 0935
					   04 00105 	    RET     							      ; 0832

; Routine Size:  90 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 04:09:38	DBB3:[DEBUG.SRC]DBGCON.B32;6					Page 5
; Digital Equipment Corporation
;
;	0937	END
;	0938	ELUDOM




							    .GLOBL  LIB$SIGNAL

;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  DBG$CODE       	   262  NOWRT,  RD ,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(0)
;  DBG$PLIT       	    12  NOWRT,  RD ,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(0)
;  $CODE$         	     0  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]STARLET.L32;1		      2688         5         0       109






;			COMPILER INTERNAL TIMING

;	Phase	    Faults	Cpu-time      Elapsed-time
;	LEXSYN	      304	00:12.8		00:26.4
;	FLOWAN	       23	00:00.7		00:01.2
;	DELAY	       25	00:00.4		00:00.6
;	TNBIND	       24	00:00.5		00:00.9
;	CODE	       47	00:00.7		00:01.3
;	FINAL	       78	00:01.7		00:03.3
;	Total	      501	00:16.7		00:33.6

; Size:		262 code + 12 data bytes
; Run Time:	00:17.0
; Elapsed Time:	00:34.3
; Memory Used:	187 pages
; Compilation Complete
