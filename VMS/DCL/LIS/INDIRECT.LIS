INDIRECT        - INDIRECT FILE MANIPULATION ROUTINES            22-AUG-1978 01:08:40   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (1)      63  STACK INDIRECT FILE
   (1)     284  UNSTACK INDIRECT FILE SPECIFICATION
   (1)     337  UNSTACK NEXT INDIRECT FILE
   (1)     409  CREATE LOGICAL NAMES FOR 'INPUT' AND 'OUTPUT'
INDIRECT        - INDIRECT FILE MANIPULATION ROUTINES            22-AUG-1978 01:08:40   VAX-11 MACRO X0.3-11               Page   1
01                                                                                                                               (1)

                                     0000     1 	.TITLE	INDIRECT - INDIRECT FILE MANIPULATION ROUTINES
                                     0000     2 	.IDENT	/01/
                                     0000     3 
                                     0000     4 ;
                                     0000     5 ; COPYRIGHT (C) 1977
                                     0000     6 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS 01754
                                     0000     7 ;
                                     0000     8 ; THIS SOFTWARE IS FURNISHED  UNDER A LICENSE FOR USE ONLY ON A SINGLE
                                     0000     9 ; COMPUTER  SYSTEM AND  MAY BE  COPIED ONLY WITH  THE INCLUSION OF THE
                                     0000    10 ; ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,
                                     0000    11 ; MAY NOT BE PROVIDED OR  OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
                                     0000    12 ; EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE
                                     0000    13 ; TERMS.  TITLE TO AND  OWNERSHIP OF THE  SOFTWARE  SHALL AT ALL TIMES
                                     0000    14 ; REMAIN IN DEC.
                                     0000    15 ;
                                     0000    16 ; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE
                                     0000    17 ; AND SHOULD  NOT BE CONSTRUED  AS A COMMITMENT  BY DIGITAL  EQUIPMENT
                                     0000    18 ; CORPORATION.
                                     0000    19 ;
                                     0000    20 ; DEC ASSUMES  NO  RESPONSIBILITY  FOR  THE USE OR  RELIABILITY OF ITS
                                     0000    21 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
                                     0000    22 ;
                                     0000    23 ; D. N. CUTLER 2-MAY-77
                                     0000    24 ;
                                     0000    25 ; INDIRECT FILE MANIPULATION ROUTINES
                                     0000    26 ;
                                     0000    27 ; MACRO LIBRARY CALLS
                                     0000    28 ;
                                     0000    29  
                                     0000    30 	DEFCMDWRK			;DEFINE WORK AREA OFFSETS
                                     0000    31 	DEFERRCOD			;DEFINE ERROR/STATUS VALUES
                                     0000    32 	DEFPTRDSC			;DEFINE RESULT PARSE DESCRIPTOR FORMAT
                                     0000    33 	IDFDEF				;DEFINE INDIRECT FRAME OFFSETS
                                     0000    34 	$PRDDEF				;PROCESS RMS DATA
                                     01B8    35 	$DEVDEF				;DEFINE DEVICE CHARACTERISTIC BITS
                                     01B8    36 	$FABDEF				;DEFINE FAB OFFSETS
                                     01B8    37 	$LOGDEF				;DEFINE LOG OFFSETS
                                     01B8    38 	$NAMDEF				;DEFINE NAM OFFSETS
                                     01B8    39 	$PSLDEF				;DEFINE PROCESSOR STATUS FIELDS
                                     01B8    40 	$RABDEF				;DEFINE RAB OFFSETS
                                     01B8    41  
                                     01B8    42 ;
                                     01B8    43 ; LOCAL SYMBOLS
                                     01B8    44 ;
                                     01B8    45  
                           00000008  01B8    46 SYMBOLS=8				;MAXIMUM NUMBER OF INDIRECT FILE SYMBOLS
                                     01B8    47  
                                     01B8    48 ;
                                     01B8    49 ; LOCAL DATA
                                     01B8    50 ;
                                     01B8    51  
                                 00000000    52 	.PSECT	DCL$ZCODE,BYTE,RD,NOWRT
                                     0000    53 INPFILE:				;INPUT FILE DEFAULT NAME STRING
                        4D 4F 43 2E  0000    54 	.ASCII	/.COM/			;
                                     0004    55 INPUTNAM:				;'INPUT' LOGICAL NAME TEXT
      54 55 50 4E 49 24 53 59 53 09  0004    56 	.ASCII	<9>/SYS$INPUT/		;
                                     000E    57 OUTFILE:				;OUTPUT FILE DEFAULT NAME STRING
INDIRECT        - INDIRECT FILE MANIPULATION ROUTINES            22-AUG-1978 01:08:40   VAX-11 MACRO X0.3-11               Page   2
01                                                                                                                               (1)

                        53 49 4C 2E  000E    58 	.ASCII	/.LIS/			;
                                     0012    59 OUTPUTNAM:				;'OUTPUT' LOGICAL NAME TEXT
                     24 53 59 53 0A  0012    60 	.ASCII	<10>/SYS$/		;
                  54 55 50 54 55 4F  0017    61 OUTQUAL:.ASCII	/OUTPUT/		; REST OF NAME AND THE QUALIFIER
INDIRECT        - INDIRECT FILE MANIPULATION ROUTINES            22-AUG-1978 01:08:40   VAX-11 MACRO X0.3-11               Page   3
01              STACK INDIRECT FILE                                                                                              (1)

                                     001D    63 	.SBTTL	STACK INDIRECT FILE
                                     001D    64 ;+
                                     001D    65 ; DCL$STACKIND - STACK INDIRECT FILE
                                     001D    66 ;
                                     001D    67 ; THIS ROUTINE IS CALLED TO STACK THE CURRENT INDIRECT FILE LEVEL AND TO PARSE
                                     001D    68 ; AND OPEN THE NEXT INDIRECT FILE.
                                     001D    69 ;
                                     001D    70 ; INPUTS:
                                     001D    71 ;
                                     001D    72 ;	IT IS ASSUMED THAT THE INDIRECT FILE PROCESSING FLAG IS SET.
                                     001D    73 ;
                                     001D    74 ; OUTPUTS:
                                     001D    75 ;
                                     001D    76 ;	THE CURRENT INDIRECT FILE SPECIFICATION IS SAVED ON THE INDIRECT FILE
                                     001D    77 ;	STACK AND THE NEXT INDIRECT FILE IS PROCESSED.
                                     001D    78 ;
                                     001D    79 ;	R0 LOW BIT CLEAR INDICATES INDIRECT FILE PROCESSING FAILURE.
                                     001D    80 ;
                                     001D    81 ;		R0 = DCL$_ATLAST - INDIRECT FILE SPECIFICATION NOT LAST ITEM ON
                                     001D    82 ;			COMMAND LINE.
                                     001D    83 ;		R0 = DCL$_DEFOVF - ATTEMPT TO DEFINE MORE THAN EIGHT PARAMETERS.
                                     001D    84 ;		R0 = DCL$_STKOVF - INDIRECT FILE INTERNAL STACK OVERFLOW.
                                     001D    85 ;
                                     001D    86 ;	R0 LOW BIT SET INDICATES SUCCESSFUL COMPLETION.
                                     001D    87 ;
                                     001D    88 ;		R0 = DCL$_NORMAL - NORMAL COMPLETION.
                                     001D    89 ;-
                                     001D    90  
                                     001D    91 DCL$STACKIND::				;STACK INDIRECT FILE
                          0287   30  001D    92 	BSBW	SETIND			;SET INDIRECT PROCESSING UP
            5E         B8 AE     9E  0020    93 	MOVAB	-<<SYMBOLS+1>*8>(SP),SP ;ALLOCATE SPACE FOR SYMBOL DESCRIPTORS
                          7E     D4  0024    94 	CLRL	-(SP)			;CLEAR COUNT OF GENERATED SYMBOLS
                       FC AD     D7  0026    95 	DECL	WRK_L_CHARPTR(FP)	;BACK UP TO AT SIGN
            56            59     D0  0029    96 10$:	MOVL	R9,R6			;SAVE DISPLAY PARAMETER
                                     002C    97 	PROCFILE			;PROCESS FILE SPECIFICATION
            2C            50     E9  002F    98 	BLBC	R0,15$			;IF LBC PARSE FAILURE
                                     0032    99 	SETCHAR				;PEEK AT NEXT CHARACTER IN INPUT BUFFER
            50            2F     91  0035   100 	CMPB	#^A\/\,R0		;SLASH?
                          26     12  0038   101 	BNEQ	20$			;IF NEQ NO
                                     003A   102 	MOVTOKN				;MOVE TERMINATOR AND GET NEXT TOKEN
            50            3D     91  003D   103 	CMPB	#^A/=/,R0		;EQUAL SIGN TERMINATOR?
                          05     13  0040   104 	BEQL	12$			;IF EQL YES
            50            3A     91  0042   105 	CMPB	#^A/:/,R0		;COLON TERMINATOR?
                          14     12  0045   106 	BNEQ	14$			;BR IF ILLEGAL QUALIFIER TERMINATOR
            04            51     D1  0047   107 12$:	CMPL	R1,#4			;MORE THAN MAX MATCH NAME
                          03     19  004A   108 	BLSS	13$			;BR IF NO
            51            04     D0  004C   109 	MOVL	#4,R1			;ONLY CHECK FOR 4 CHARS
            62            51     29  004F   110 13$:	CMPC	R1,(R2),OUTQUAL		;CHECK FOR VALID QUAL
                       C3 AF         0052       
                          D3     13  0054   111 	BEQL	10$			;BR IF OK
                                     0056   112 	STATUS	IVKEYW			;SET ILLEGAL QUALIFIER CODE
                          03     11  0059   113 	BRB	15$			;
                                     005B   114 14$:	STATUS	IVVALU			;SET INVALID VALUE SYNTAX
                          59     11  005E   115 15$:	BRB	80$			;
                                     0060   116  
                                     0060   117 ;
                                     0060   118 ; FILE SPECIFICATIONS PARSED - PARSE SYMBOL DEFINITIONS
INDIRECT        - INDIRECT FILE MANIPULATION ROUTINES            22-AUG-1978 01:08:40   VAX-11 MACRO X0.3-11               Page   4
01              STACK INDIRECT FILE                                                                                              (1)

                                     0060   119 ;
                                     0060   120  
            58         04 AE     9E  0060   121 20$:	MOVAB	4(SP),R8		;GET ADDRESS OF SYMBOL DESCRIPTOR STORAGE
            52            59     D0  0064   122 30$:	MOVL	R9,R2			;MARK START OF PARAMETER STRING
                                     0067   123 	MOVCHAR				;LOOK AT PRECEEDING TERMINATOR
                          39     13  006A   124 	BEQL	60$			;BR IF END OF LINE IS THE FIRST BYTE
            50            20     91  006C   125 	CMPB	#^A/ /,R0		;WAS IT A BLANK
                          02     12  006F   126 	BNEQ	40$			;BR IF NO-IT COUNTS IN THE STRING
                          52     D6  0071   127 	INCL	R2			;ADJ POINTER OVER THE SPACE
                                     0073   128 40$:	MOVCHAR				;COPY A CHARACTER FROM INPUT BUUFER
         FA AD            05     E0  0076   129 	BBS	#WRK_V_QUOTE,WRK_W_FLAGS(FP),40$ ;LOOP IF IN A QUOTED STRING
                          F8         007A       
                          05     13  007B   130 	BEQL	45$			;BR IF END OF LINE
            50            20     91  007D   131 	CMPB	#^A/ /,R0		;IS THIS A TERMINATOR
                          F1     12  0080   132 	BNEQ	40$			;BR IF NO - KEEP LOOKING FOR TERMINATOR
            59            52     C3  0082   133 45$:	SUBL3	R2,R9,R1		;FIND LENGTH OF SYMBOL
                          51         0085       
                          51     D7  0086   134 	DECL	R1			;REMOVE COUNT FOR TERMINATOR
                          1B     13  0088   135 	BEQL	60$			;IF NULL STRING - NO MORE SYMBOLS
            62            22     91  008A   136 	CMPB	#^A/"/,(R2)		;SYMBOL START WITH A QUOTE
                          07     12  008D   137 	BNEQ	50$			;IF NO - LEAVE THE SYMBOL ALONE
                                     008F   138 	COMPSTRING			;ELSE REMOVE THE QUOTE PAIRS
            52            51     C1  0092   139 	ADDL3	R1,R2,R9		;RESET POINTER TO COMMADN BUFFER
                          59         0095       
            88            51     7D  0096   140 50$:	MOVQ	R1,(R8)+		;STORE SYMBOL DESCRIPTOR
            52            59     D0  0099   141 	MOVL	R9,R2			;SET START OF NEXT SYMBOL
            6E            08     F3  009C   142 	AOBLEQ	#SYMBOLS,(SP),40$	;ANY MORE SYMBOL DEFINITIONS ALLOWED?
                          D3         009F       
                                     00A0   143 	STATUS	DEFOVF			;SET SYMBOL DEFINITION OVERFLOW
                          14     11  00A3   144 	BRB	80$			;
                                     00A5   145  
                                     00A5   146 ;
                                     00A5   147 ; FILE SPECIFICATION AND SYMBOL DEFINITIONS PARSED - STACK CURRENT FILE
                                     00A5   148 ;
                                     00A5   149  
            56       0084 CB     D0  00A5   150 60$:	MOVL	PRC_L_STACKPT(R11),R6	;GET CURRENT INDIRECT STACK POINTER
            58         A4 A6     9E  00AA   151 	MOVAB	-IDF_K_LENGTH(R6),R8	;CALCULATE NEW INDIRECT STACK POINTER
       0088 CB            58     D1  00AE   152 	CMPL	R8,PRC_L_STACKLM(R11)	;INDIRECT STACK OVERFLOW?
                          0A     1A  00B3   153 	BGTRU	RAISE			;IF GTRU NO
                                     00B5   154  
                                     00B5   155 ;
                                     00B5   156 ; INDIRECT FILES TOO DEEPLY NESTED
                                     00B5   157 ;
                                     00B5   158  
                                     00B5   159 	STATUS	STKOVF			;SET INDIRECT STACK OVERFLOW
                                     00B9   160 80$:	ERRMSG				;OUTPUT ERROR MESSAGE
                          01B5   31  00BC   161 	BRW	INDXIT			;
                                     00BF   162  
                                     00BF   163 ;
                                     00BF   164 ; SAVE CURRENT INDIRECT FILE INFORMATION AND OPEN NEW FILES
                                     00BF   165 ;
                                     00BF   166  
                       48 AB     D6  00BF   167 RAISE:	INCL	PRC_L_INDEPTH(R11)	;CLOCK THE INDIRECT DEPTH INDICATOR
                          5A     DD  00C2   168 	PUSHL	R10			;SAVE POINTER INTO COMMAND WORK AREA
                                     00C4   169 	RUNDOWN				;RUN DOWN IMAGE AND INDIRECT LEVELS
       FD34 CD            8E     C3  00C7   170 	SUBL3	(SP)+,WRK_L_RSLNXT(FP),R0 ;CALCULATE LENGTH OF MOVE
                          50         00CC       
INDIRECT        - INDIRECT FILE MANIPULATION ROUTINES            22-AUG-1978 01:08:40   VAX-11 MACRO X0.3-11               Page   5
01              STACK INDIRECT FILE                                                                                              (1)

         6C AE            50     C0  00CD   171 	ADDL	R0,<<<SYMBOLS+1>*8>+4+<8*4>>(SP) ;RELOCATE SAVED BUFFER POINTER
         70 AE            50     C0  00D1   172 	ADDL	R0,<<<SYMBOLS+1>*8>+4+<9*4>>(SP) ;RELOCATE SAVED DESCRIPTOR POINTER
            56       0084 CB     D0  00D5   173 	MOVL	PRC_L_STACKPT(R11),R6	;GET CURRENT INDIRECT STACK POINTER
            58         A4 A6     9E  00DA   174 	MOVAB	-IDF_K_LENGTH(R6),R8	;CALCULATE NEW INDIRECT STACK POINTER
       0084 CB            58     D0  00DE   175 	MOVL	R8,PRC_L_STACKPT(R11)	;SET NEW INDIRECT STACK POINTER
            5C         1C AB     D0  00E3   176 	MOVL	PRC_L_INDFAB(R11),AP	;GET ADDRESS OF INDIRECT FAB
         14 A6         38 AB     7D  00E7   177 	MOVQ	PRC_Q_LOCAL(R11),IDF_Q_LOCAL(R6) ;SAVE LOCAL SYMBOL TABLE LISTHEAD
         1C A6         30 AB     7D  00EC   178 	MOVQ	PRC_Q_LABEL(R11),IDF_Q_LABEL(R6) ;SAVE LABEL SYMBOL TABLE LISTHEAD
         06 A6         56 AB     B0  00F1   179 	MOVW	PRC_W_ONLEVEL(R11),IDF_W_ONLEVEL(R6) ;SAVE ON ERROR LEVEL NUMBER
         08 A6         58 AB     D0  00F6   180 	MOVL	PRC_L_ONERROR(R11),IDF_L_ONERROR(R6) ;SAVE ON ERROR COMMAND TEXT
            50         30 AB     9E  00FB   181 	MOVAB	PRC_Q_LABEL(R11),R0	;GET ADDRESS OF LABEL TABLE LISTHEAD
            60            50     D0  00FF   182 	MOVL	R0,(R0)			;SET ADDRESS OF LISTHEAD AS FORWARD LINK
            80            80     D0  0102   183 	MOVL	(R0)+,(R0)+		;SET ADDRESS OF LISTHEAD AS BACKWARD LINK
            60            50     D0  0105   184 	MOVL	R0,(R0)			;SET ADDRESS OF LISTHEAD AS FORWARD LINK
            80            80     D0  0108   185 	MOVL	(R0)+,(R0)+		;SET ADDRESS OF LISTHEAD AS BACKWARD LINK
                       58 AB     D4  010B   186 	CLRL	PRC_L_ONERROR(R11)	;CLEAR ADDRESS OF ON ERROR COMMAND TEXT
         56 AB            02     B0  010E   187 	MOVW	#2,PRC_W_ONLEVEL(R11)	;RESET ON ERROR LEVEL TO ERROR
         58 A6       009C CB     D0  0112   188 	MOVL	PRC_L_ONCTLY(R11),IDF_L_ONCTLY(R6) ;SAVE ON CONTROL Y COMMAND
                          07     13  0118   189 	BEQL	5$			;BR IF THERE WAS NONE
       009C CB       0000'CF     9E  011A   190 	MOVAB	W^DCL$T_DEFONTXT,PRC_L_ONCTLY(R11) ;SET DEFUALT FOR NEXT LEVEL
                                     0121   191 	ASSUME	IDF_W_OUTISI EQ IDF_W_OUTIFI+2
         02 A8         02 A6     D0  0121   192 5$:	MOVL	IDF_W_OUTIFI(R6),IDF_W_OUTIFI(R8) ;SAVE PREVIOUS INTERNAL FILE INDEX
         10 A8         10 A6     D0  0126   193 	MOVL	IDF_L_OUTRABCTX(R6),IDF_L_OUTRABCTX(R8) ;SAME FOR RAB CONTEXT
         24 A6            10     28  012B   194 	MOVC	#16,IDF_T_OUTDVI(R6),IDF_T_OUTDVI(R8) ;SAVE PREVIOUS DEVICE NAME
                       24 A8         012F       
         56 A8            01     B0  0131   195 	MOVW	#1@IDF_V_INPOPN,IDF_W_FLAG(R8) ;SET INPUT FILE OPEN FLAG
            50         14 AB     D0  0135   196 	MOVL	PRC_L_INDINPRAB(R11),R0	;SET CURRENT INDIRECT RAB POINTER
         08 AB            50     D1  0139   197 	CMPL	R0,PRC_L_INPRAB(R11)	;IS THIS THE PRIMARY INPUT STREAM?
                          13     13  013D   198 	BEQL	7$			;BR IF YES-THAT NEVER GETS CLOSED
         10 A0            06     28  013F   199 	MOVC	#6,RAB$W_RFA(R0),IDF_W_INPRFA(R6) ;SAVE PLACE IN FILE
                       50 A6         0143       
         02 AC            66     B0  0145   200 	MOVW	IDF_W_INPIFI(R6),FAB$W_IFI(AP) ;SET INTERNAL FILE IDENTIFICATION
                                     0149   201 	$CLOSE	FAB=(AP)		;
                          68     B4  0152   202 7$:	CLRW	IDF_W_INPIFI(R8)	;CLEAR INPUT FILE INTERNAL INDEX
            5A         70 AE     D0  0154   203 	MOVL	<<<SYMBOLS+1>*8>+4+<9*4>>(SP),R10 ;RETRIEVE ADDRESS OF DESCRIPTORS
                                     0158   204 	GETDVAL				;GET INPUT FILE DESCRIPTOR VALUES
         35 AC            04     90  015B   205 	MOVB	#4,FAB$B_DNS(AP)	;SET SIZE OF DEFAULT NAME STRING
         30 AC       FE9D CF     9E  015F   206 	MOVAB	INPFILE,FAB$L_DNA(AP)	;SET ADDRESS OF DEFAULT NAME STRING
         34 AC            51     90  0165   207 	MOVB	R1,FAB$B_FNS(AP)	;SET SIZE OF FILE NAME STRING
         2C AC            52     D0  0169   208 	MOVL	R2,FAB$L_FNA(AP)	;SET ADDRESS OF FILE NAME STRING
         16 AC            02     90  016D   209 	MOVB	#FAB$M_GET,FAB$B_FAC(AP) ;SET FILE ACCESS TYPE
         04 AC   000C0040 8F     D0  0171   210 	MOVL	#FAB$M_INP!FAB$M_PPF!-	;SET FILE OPEN OPTIONS
                                     0179   211 		FAB$M_SQO,FAB$L_FOP(AP)	;
                       02 AC     B4  0179   212 	CLRW	FAB$W_IFI(AP)		;CLEAR INTERNAL FILE INDEX
                                     017C   213 	$OPEN	FAB=(AP)		;OPEN INDIRECT INPUT FILE
            2A            50     E9  0185   214 	BLBC	R0,9$			;IF LBC OPEN FAILURE
            57         28 AC     D0  0188   215 	MOVL	FAB$L_NAM(AP),R7	;GET ADDRESS OF INDIRECT NAME BLOCK
            68         02 AC     B0  018C   216 	MOVW	FAB$W_IFI(AP),IDF_W_INPIFI(R8) ;SAVE INPUT FILE INTERNAL INDEX
            56       00CC CC     9E  0190   217 	MOVAB	PRD_G_ALTINPRAB(AP),R6	;GET ALTERNATE INPUT RAB
         18 A6         40 AC     D0  0195   218 	MOVL	FAB$L_DEV(AP),RAB$L_CTX(R6) ;SAVE DEVICE CHARACTERISTICS
         0C A8         18 A6     D0  019A   219 	MOVL	RAB$L_CTX(R6),IDF_L_INPRABCTX(R8) ;AND A COPY IN THE STACK FRAME
                          1C     28  019F   220 	MOVC	#28,NAM$T_DVI(R7),-	;COPY DEVICE,FILE AND DIRECTORY ID'S
         34 A8         14 A7         01A1   221 		IDF_T_INPDVI(R8)	;INTO INDIRECT STACK FRAME
         3C A6            5C     D0  01A5   222 	MOVL	AP,RAB$L_FAB(R6)	;LINK FAB TO RAB
                                     01A9   223 	$CONNECT RAB=(R6)		;CONNECT TO NEW INPUT
            6D            50     E9  01B2   224 9$:	BLBC	R0,10$			;IF LBC CONNECT FAILURE
         02 A6       4000 8F     AA  01B5   225 	BICW	#RAB$M_PPF_IND,RAB$W_ISI(R6) ;MAKE SURE INDIRECT FLAG IS CLEAR
INDIRECT        - INDIRECT FILE MANIPULATION ROUTINES            22-AUG-1978 01:08:40   VAX-11 MACRO X0.3-11               Page   6
01              STACK INDIRECT FILE                                                                                              (1)

         14 AB            56     D0  01BB   226 	MOVL	R6,PRC_L_INDINPRAB(R11)	;SET INDIRECT INPUT RAB
                                     01BF   227 	GETDVAL				;GET OUTPUT FILE DESCRIPTOR VALUES
            71            50     E9  01C2   228 	BLBC	R0,20$			;IF LBC NO OUTPUT FILE SPECIFIED
         30 AC       FE45 CF     9E  01C5   229 	MOVAB	OUTFILE,FAB$L_DNA(AP)	;SET ADDRESS OF DEFAULT NAME STRING
         16 AC            01     90  01CB   230 	MOVB	#FAB$M_PUT,FAB$B_FAC(AP) ;SET FILE ACCESS TYPE
         34 AC            51     90  01CF   231 	MOVB	R1,FAB$B_FNS(AP)	;SET SIZE OF FILENAME STRING
         2C AC            52     D0  01D3   232 	MOVL	R2,FAB$L_FNA(AP)	;SET ADDRESS OF FILE NAME STRING
         04 AC   00040040 8F     D0  01D7   233 	MOVL	#FAB$M_PPF!FAB$M_SQO,FAB$L_FOP(AP) ;SET FILE OPEN OPTIONS
         1D AC            00     90  01DF   234 	MOVB	#FAB$C_SEQ,FAB$B_ORG(AP) ;SET FILE ORGANIZATION TYPE
         1E AC            04     90  01E3   235 	MOVB	#FAB$M_PRN,FAB$B_RAT(AP) ;SET RECORD ATTRIBUTE TYPE TO PRINT
         1F AC            03     90  01E7   236 	MOVB	#FAB$C_VFC,FAB$B_RFM(AP) ;SET RECORD FORMAT TYPE-FIXED CONTROL
                       02 AC     B4  01EB   237 	CLRW	FAB$W_IFI(AP)		;CLEAR INTERNAL FILE INDEX
                                     01EE   238 	$CREATE	FAB=(AP)		;CREATE NEW OUTPUT FILE
            28            50     E9  01F7   239 	BLBC	R0,10$			;IF LBC CREATION FAILURE
         02 A8         02 AC     B0  01FA   240 	MOVW	FAB$W_IFI(AP),IDF_W_OUTIFI(R8) ;SAVE OUTPUT FILE INTERNAL INDEX
            52       0110 CC     9E  01FF   241 	MOVAB	PRD_G_ALTOUTRAB(AP),R2	;GET ALTERNATE OUTPUT RAB ADDRESS
         18 A2         40 AC     D0  0204   242 	MOVL	FAB$L_DEV(AP),RAB$L_CTX(R2) ;SAVE DEVICE CHARACTERISTICS HERE
         10 A8         18 A2     D0  0209   243 	MOVL	RAB$L_CTX(R2),IDF_L_OUTRABCTX(R8) ;AND HERE AS WELL
         18 AB            62     9E  020E   244 	MOVAB	(R2),PRC_L_INDOUTRAB(R11) ;SET ADDRESS OF OUTPUT RAB
                       02 A2     B4  0212   245 	CLRW	RAB$W_ISI(R2) 		;CLEAR INTERNAL STREAM INDEX
         3C A2            5C     D0  0215   246 	MOVL	AP,RAB$L_FAB(R2)	;LINK FAB TO RAB
                                     0219   247 	$CONNECT RAB=(R2)		;CONNECT TO OUTPUT
            46            50     E9  0222   248 10$:	BLBC	R0,50$			;IF LBS CONNECT FAILURE
                          02     F0  0225   249 	INSV	#FAB$M_CR,#RAB$V_PPF_RAT,- ;SET TO USE IMPLIED
            08            06         0227   250 		#RAB$S_PPF_RAT,RAB$W_ISI(R2) ;CR/LF FOR OUTPUT
                       02 A2         0229       
         04 A8         02 A2     B0  022B   251 	MOVW	RAB$W_ISI(R2),IDF_W_OUTISI(R8) ;COPY OUTPUT ISI TO STACK FRAME
         14 A7            10     28  0230   252 	MOVC	#16,NAM$T_DVI(R7),IDF_T_OUTDVI(R8) ;SAVE DEVICE IDENTIFICATION
                       24 A8         0234       
                          0173   30  0236   253 20$:	BSBW	CREATE			;CREATE LOGICAL NAMES FOR 'INPUT' AND 'OUTPUT'
            58            6E     9E  0239   254 	MOVAB	(SP),R8			;GET ADDRESS OF NUMBER OF SYMBOL DEFINITIONS
            5A            68     D0  023C   255 	MOVL	(R8),R10		;GET NUMBER OF SYMBOL DEFINITIONS
            88       3050 8F     3C  023F   256 	MOVZWL	#^A/P0/,(R8)+		;SET GENERATED SYMBOL PROTOTYPE
            57            08     D0  0244   257 	MOVL	#SYMBOLS,R7		;NUMBER OF SYMBOLS TO GENERATE
                          51     D4  0247   258 30$:	CLRL	R1			;ASSUME NO MORE SYMBOLS DEFINED
                          5A     D7  0249   259 	DECL	R10			;IS THERE ANY MORE TO DEFINE
                          03     19  024B   260 	BLSS	35$			;BR IF NO - DEFINE AS NULL STRING
            51            88     7D  024D   261 	MOVQ	(R8)+,R1		;GET VALUE DESCRIPTOR
                       01 AE     96  0250   262 35$:	INCB	1(SP)			;INCREMENT SYMBOL NUMBER
            53            02     D0  0253   263 	MOVL	#2,R3			;SET LENGTH OF SYMBOL NAME
            54            6E     9E  0256   264 	MOVAB	(SP),R4			;SET ADDRESS OF SYMBOL NAME
            55         38 AB     9E  0259   265 	MOVAB	PRC_Q_LOCAL(R11),R5	;GET ADDRESS OF LOCAL SYMBOL TABLE LISTHEAD
                                     025D   266 	ALLOCSYM			;ALLOCATE AND INSERT SYMBOL TABLE ENTRY
            08            50     E9  0260   267 	BLBC	R0,50$			;IF LBC ALLOCATION FAILURE
            E1            57     F5  0263   268 	SOBGTR	R7,30$			;ANY MORE SYMBOL TO PROCESS?
                                     0266   269 40$:	STATUS	NORMAL			;SET NORMAL COMPLETION STATUS
                          09     11  0269   270 	BRB	INDXIT			;
                                     026B   271  
                                     026B   272 ;
                                     026B   273 ; OPEN, CONNECT, OR SYMBOL ALLOCATION FAILURE
                                     026B   274 ;
                                     026B   275  
                                     026B   276 50$:	ERRMSG				;OUTPUT ERROR MESSAGE
                          50     DD  026E   277 	PUSHL	R0			;SAVE ERROR/STATUS VALUE
                          47     10  0270   278 	BSBB	UNSTACK			;UNSTACK PREVIOUS INDIRECT FILE
                          01     BA  0272   279 	POPR	#^M<R0>			;RETRIEVE ERROR/STATUS VALUE
            5E         4C AE     9E  0274   280 INDXIT:	MOVAB	<<SYMBOLS+1>*8>+4(SP),SP ;DEALLOCATE SYMBOL DESCRIPTOR STORAGE
INDIRECT        - INDIRECT FILE MANIPULATION ROUTINES            22-AUG-1978 01:08:40   VAX-11 MACRO X0.3-11               Page   7
01              STACK INDIRECT FILE                                                                                              (1)

                          50     DD  0278   281 	PUSHL	R0			;SAVE FINAL STATUS
                          1C     11  027A   282 	BRB	STKXIT			;
INDIRECT        - INDIRECT FILE MANIPULATION ROUTINES            22-AUG-1978 01:08:40   VAX-11 MACRO X0.3-11               Page   8
01              UNSTACK INDIRECT FILE SPECIFICATION                                                                              (1)

                                     027C   284 	.SBTTL	UNSTACK INDIRECT FILE SPECIFICATION
                                     027C   285 ;+
                                     027C   286 ; DCL$UNSTACK - UNSTACK INDIRECT FILE SPECIFICATION
                                     027C   287 ;
                                     027C   288 ; THIS ROUTINE IS CALLED TO CLOSE THE CURRENT INDIRECT FILE AND TO UNSTACK THE
                                     027C   289 ; PREVIOUS SPECIFICATION.
                                     027C   290 ;
                                     027C   291 ; INPUTS:
                                     027C   292 ;
                                     027C   293 ;	NONE.
                                     027C   294 ;
                                     027C   295 ; OUTPUTS:
                                     027C   296 ;
                                     027C   297 ;	THE CURRENT INDIRECT FILE IS CLOSED AND ALL LOCAL SYMBOLS FOR THE LEVEL
                                     027C   298 ;	ARE DEALLOCATED. THE PREVIOUS INDIRECT FILE IS THEN UNSTACKED AND REOPENED.
                                     027C   299 ;
                                     027C   300 ;	R0 LOW BIT CLEAR INDICATES UNSUCCESSFUL COMPLETION.
                                     027C   301 ;
                                     027C   302 ;	R0 LOW BIT SET INDICATES SUCCESSFUL COMPLETION.
                                     027C   303 ;
                                     027C   304 ;		R0 = DCL$_NORMAL - NORMAL COMPLETION.
                                     027C   305 ;-
                                     027C   306  
                                     027C   307 DCL$UNSTACK::				;UNSTACK INDIRECT FILE SPECIFICATION
                          29     10  027C   308 	BSBB	SETIND			;SETUP INDIRECT PROCESSING
                          00'    DD  027E   309 	PUSHL	S^#SS$_NORMAL		;ASSUME NORMAL COMPLETION
         54 AB            04     E5  0280   310 	BBCC	#PRC_V_GOTO,PRC_W_FLAGS(R11),10$ ;IF CLR, NO GOTO IN PROGRESS
                          0D         0284       
                          FD78'  30  0285   311 	BSBW	DCL$DEALGOTO		;DEALLOCATE THE SPACE
                                     0288   312 	STATUS	USGOTO			;SET UNSATISFIED GOTO STATUS
            6E            50     D0  028C   313 	MOVL	R0,(SP)			;SET COMPLETION STATUS
                                     028F   314 	ERRMSG				;OUTPUT ERROR MESSAGE
            5C         1C AB     D0  0292   315 10$:	MOVL	PRC_L_INDFAB(R11),AP	;GET ADDRESS OF INDIRECT FAB
                          21     10  0296   316 	BSBB	UNSTACK			;UNSTACK NEXT INDIRECT FILE
                     17FF 8F     BA  0298   317 STKXIT:	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,AP> ;RESTORE REGISTERS
                                     029C   318 					; R0=STATUS, R1=ORIGINAL FLAGS
                                     029C   319 	ENABLE				;ENABLE CONTROL Y/C AST'S
            51            01     E0  029E   320 	BBS	#WRK_V_COMMAND,R1,10$	;BR IF COMMAND WAS SET
                          04         02A1       
         FA AD            02     AA  02A2   321 	BICW	#WRK_M_COMMAND,WRK_W_FLAGS(FP) ;CLEAR COMMAND IN PROGRESS
                                 05  02A6   322 10$:	RSB				;
                                     02A7   323  
                                     02A7   324 ;
                                     02A7   325 ; SETIND - SETUP INDIRECT
                                     02A7   326 ;
                                     02A7   327 ; SAVE THE NON-VOLATILE REGISTERS AND THE COMMAND WORK FLAGS, THEN SET COMMAND
                                     02A7   328 ;
                                     02A7   329  
                          01     BA  02A7   330 SETIND:	POPR	#^M<R0>			;GET RETURN PC
                                     02A9   331 	DISABLE				;DISABLE CONTROL Y/C AST'S
                     17FC 8F     BB  02AC   332 	PUSHR	#^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,AP> ;SAVE REGISTERS
                       FA AD     DD  02B0   333 	PUSHL	WRK_W_FLAGS(FP)		;SAVE PREVIOUS COMMAND FLAGS
                                     02B3   334 	SETBIT	WRK_V_COMMAND,WRK_W_FLAGS(FP) ;SET COMMAND IN PROGRESS
                          60     17  02B7   335 	JMP	(R0)			;RETURN TO CALLER
INDIRECT        - INDIRECT FILE MANIPULATION ROUTINES            22-AUG-1978 01:08:40   VAX-11 MACRO X0.3-11               Page   9
01              UNSTACK NEXT INDIRECT FILE                                                                                       (1)

                                     02B9   337 	.SBTTL	UNSTACK NEXT INDIRECT FILE
                                     02B9   338 ;
                                     02B9   339 ; UNSTACK - UNSTACK NEXT INDIRECT FILE
                                     02B9   340 ;
                                     02B9   341 ; THIS ROUTINE IS CALLED TO CLOSE THE CURRENT INDIRECT FILE AND UNSTACK THE
                                     02B9   342 ; CONTEXT INFORMATION FOR THE PREVIOUS LEVEL INDIRECT FILE.
                                     02B9   343 ;
                                     02B9   344  
                                     02B9   345 UNSTACK:				;UNSTACK INDIRECT FILE
            58       0084 CB     D0  02B9   346 	MOVL	PRC_L_STACKPT(R11),R8	;GET ADDRESS OF INDIRECT STACK FRAME
         02 AC            68     B0  02BE   347 	MOVW	IDF_W_INPIFI(R8),FAB$W_IFI(AP) ;RESTORE INTERNAL FILE INDEX
                                     02C2   348 	$CLOSE	FAB=(AP)		;CLOSE INDIRECT INPUT FILE
                                 B1  02CB   349 	CMPW	IDF_W_OUTIFI(R8),-	;SEE IF THE OUTPUT FILE CHANGED
         5E A8         02 A8         02CC   350 		IDF_W_OUTIFI+IDF_K_LENGTH(R8) ;FROM PREVIOUS COMMAND LEVEL
                          2B     13  02D0   351 	BEQL	10$			;BR IF NO
         02 AC         02 A8     B0  02D2   352 	MOVW	IDF_W_OUTIFI(R8),FAB$W_IFI(AP) ;RESTORE INTERNAL FILE INDEX
                                     02D7   353 	$CLOSE	FAB=(AP)		;CLOSE INDIRECT OUTPUT FILE
            50         18 AB     D0  02E0   354 	MOVL	PRC_L_INDOUTRAB(R11),R0	;GET POINTER TO INDIRECT OUTPUT RAB
                                 B0  02E4   355 	MOVW	IDF_W_OUTISI+IDF_K_LENGTH(R8),- ;GET ISI FROM PREVIOUS OUTPUT
         02 A0         60 A8         02E5   356 		RAB$W_ISI(R0)		;AND SET INTO RAB
                                 D0  02E9   357 	MOVL	IDF_L_OUTRABCTX+IDF_K_LENGTH(R8),- ;RESTORE STACKED CONTEXT-
         18 A0         6C A8         02EA   358 		RAB$L_CTX(R0)		;VALUE FROM PREVIOUS STACK FRAME
            51         0C AB     D0  02EE   359 	MOVL	PRC_L_OUTRAB(R11),R1	;GET DIRECT OUTPUT RAB
         02 A1         02 A0     B1  02F2   360 	CMPW	RAB$W_ISI(R0),RAB$W_ISI(R1) ;IS OUTPUT NESTED AT ALL?
                          04     12  02F7   361 	BNEQ	10$			;BR IF YES
         18 AB            51     D0  02F9   362 	MOVL	R1,PRC_L_INDOUTRAB(R11)	;SET INDIRECT OUTPUT AND OUTPUT THE SAME
            53         38 BB     0F  02FD   363 10$:	REMQUE	@PRC_Q_LOCAL(R11),R3	;REMOVE NEXT ENTRY FROM LOCAL SYMBOL TABLE
                          06     1C  0301   364 	BVC	20$			;IF VC ENTRY REMOVED
            53         30 BB     0F  0303   365 	REMQUE	@PRC_Q_LABEL(R11),R3	;REMOVE NEXT ENTRY FROM LOCAL LABEL TABLE
                          05     1D  0307   366 	BVS	30$			;IF VS TABLE EMPTY
                                     0309   367 20$:	DEALLOCSYM			;DEALLOCATE SYMBOL ENTRY
                          EF     11  030C   368 	BRB	10$			;
                                     030E   369 30$:	ONRESET				;RESET ON ERROR PARAMETERS
                          FCEC'  30  0311   370 	BSBW	DCL$ONCTLYRST		;AND THE ON CONTROL Y HANDLER
            58         5C A8     9E  0314   371 	MOVAB	IDF_K_LENGTH(R8),R8	;CALCULATE ADDRESS OF NEXT FRAME
       0084 CB            58     D0  0318   372 	MOVL	R8,PRC_L_STACKPT(R11)	;SAVE UPDATED STACK POINTER
                                 D0  031D   373 	MOVL	PRC_L_INPRAB(R11),-	;ASSUME RETURNING TO LEVEL ZERO AND-
         14 AB         08 AB         031E   374 		PRC_L_INDINPRAB(R11)	;SET INPUT AS INDIRECT INPUT ALSO
         56 A8            00     E1  0322   375 	BBC	#IDF_V_INPOPN,IDF_W_FLAG(R8),40$ ;BR IF GOING TO LEVEL 0
                          61         0326       
            56       00CC CC     9E  0327   376 	MOVAB	PRD_G_ALTINPRAB(AP),R6	;GET THE ALTERNATE INPUT RAB
         14 AB            56     D0  032C   377 	MOVL	R6,PRC_L_INDINPRAB(R11)	;SET THAT IS INDIRECT INPUT RAB
                                 D0  0330   378 	MOVL	IDF_L_INPRABCTX(R8),-	;RESTORE STACKED DEVICE CHARACTERISTICS-
         18 A6         0C A8         0331   379 		RAB$L_CTX(R6)		;VALUE FROM STACK FRAME
            57         28 AC     D0  0335   380 	MOVL	FAB$L_NAM(AP),R7	;ADDRESS OF NAME BLOCK
                          1C     28  0339   381 	MOVC	#28,IDF_T_INPDVI(R8),-	;COPY PREVIOUS INPUT DEVICE,FILE AND-
         14 A7         34 A8         033B   382 		NAM$T_DVI(R7)		;DIRECTORY ID'S INTO NAME BLOCK
         16 AC            02     90  033F   383 	MOVB	#FAB$M_GET,FAB$B_FAC(AP) ;SET FILE ACCESS TYPE
         04 AC   010C0040 8F     D0  0343   384 	MOVL	#FAB$M_INP!FAB$M_PPF!-	;SET FILE OPEN OPTIONS
                                     034B   385 		FAB$M_NAM!-		; OPEN BY NAME BLOCK
                                     034B   386 		FAB$M_SQO,FAB$L_FOP(AP)	;
                       34 AC     94  034B   387 	CLRB	FAB$B_FNS(AP)		;REMOVE RESIDUAL FILE NAME SIZE
                                     034E   388 	$OPEN	FAB=(AP)		;OPEN PREVIOUS INPUT
                                     0357   389 	CLRBIT	FAB$V_NAM,FAB$L_FOP(AP)	;REMOVE OPEN BY NAME BLOCK FLAG
            68         02 AC     B0  035C   390 	MOVW	FAB$W_IFI(AP),IDF_W_INPIFI(R8) ;SET NEW INPUT IFI
                       02 A6     B4  0360   391 	CLRW	RAB$W_ISI(R6)		;ZERO PREVIOUS INTERNAL SEQUENCE NUMBER
                                     0363   392 	$CONNECT RAB=(R6)		;CONNECT TO PREVIOUS INPUT
INDIRECT        - INDIRECT FILE MANIPULATION ROUTINES            22-AUG-1978 01:08:40   VAX-11 MACRO X0.3-11               Page  10
01              UNSTACK NEXT INDIRECT FILE                                                                                       (1)

         14 A6         54 A8     B0  036C   393 	MOVW	IDF_W_INPRFA+4(R8),RAB$W_RFA4(R6) ;COPY RECORD FILE ADDRESS FROM
         10 A6         50 A8     D0  0371   394 	MOVL	IDF_W_INPRFA(R8),RAB$W_RFA(R6) ;FROM INDIRECT STACK TO RAB
                          10     13  0376   395 	BEQL	40$			;BR IF PREVIOUS FILE AT TOP_OF_FILE
         1E A6            02     90  0378   396 	MOVB	#RAB$C_RFA,RAB$B_RAC(R6) ;SET ACCESS MODE TO RECORD FILE ADR
                                     037C   397 	$GET	RAB=(R6)		;GET THE PREVIOUS INDIRECT COMMAND
                                     0385   398 	ASSUME	RAB$C_SEQ EQ 0
                       1E A6     94  0385   399 	CLRB	RAB$B_RAC(R6)		;SET ACCESS TO SEQUENTIAL
                                 9E  0388   400 40$:	MOVAB	WRK_AB_BUFFER+CMDBUFSIZ+3(FP),- ;SET STARTING ADDRESS OF INPUT
         FC AD       FF37 CD         0389   401 		WRK_L_CHARPTR(FP)	;BUFFER AS LAST BYTE FETCHED
                     FF38 CD     94  038E   402 	CLRB	WRK_AB_BUFFER+CMDBUFSIZ+4(FP) ;SET EOL AS NEXT BYTE TO FETCH
         38 AB         14 A8     7D  0392   403 	MOVQ	IDF_Q_LOCAL(R8),PRC_Q_LOCAL(R11) ;RESTORE LOCAL SYMBOL TABLE LISTHEAD
         30 AB         1C A8     7D  0397   404 	MOVQ	IDF_Q_LABEL(R8),PRC_Q_LABEL(R11) ;RESTORE LOCAL LABEL TABLE LISTHEAD
         56 AB         06 A8     B0  039C   405 	MOVW	IDF_W_ONLEVEL(R8),PRC_W_ONLEVEL(R11) ;RESTORE ON ERROR LEVEL NUMBER
         58 AB         08 A8     D0  03A1   406 	MOVL	IDF_L_ONERROR(R8),PRC_L_ONERROR(R11) ;RESTORE ADDRESS OF COMMAND TEXT
       009C CB         58 A8     D0  03A6   407 	MOVL	IDF_L_ONCTLY(R8),PRC_L_ONCTLY(R11) ;AND THE ON CONTROL T HANDLER
INDIRECT        - INDIRECT FILE MANIPULATION ROUTINES            22-AUG-1978 01:08:40   VAX-11 MACRO X0.3-11               Page  11
01              CREATE LOGICAL NAMES FOR 'INPUT' AND 'OUTPUT'                                                                    (1)

                                     03AC   409 	.SBTTL	CREATE LOGICAL NAMES FOR 'INPUT' AND 'OUTPUT'
                                     03AC   410 ;
                                     03AC   411 ; CREATE - CREATE LOGICAL NAMES FOR 'INPUT' AND 'OUTPUT'
                                     03AC   412 ;
                                     03AC   413 ; THIS ROUTINE IS CALLED TO CREATE LOGICAL NAMES FOR 'INPUT' AND 'OUTPUT'
                                     03AC   414 ; BASE ON THE CURRENT INDIRECT FILE DEPTH.
                                     03AC   415 ;
                                     03AC   416  
                                     03AC   417 CREATE:					;
            50         14 AB     D0  03AC   418 	MOVL	PRC_L_INDINPRAB(R11),R0	;GET INDIRECT INPUT RAB ADDRESS
            56         34 A8     9E  03B0   419 	MOVAB	IDF_T_INPDVI(R8),R6	;GET ADDRESS OF INPUT DEVICE IDENTIFICATION
                                 AB  03B4   420 	BICW3	#FAB$M_PPF_IND,-	;GET INTERNAL FILE ID FOR INPUT -
            68       4000 8F         03B5   421 		IDF_W_INPIFI(R8),R7	;ALWAYS CLEAR INDIRECT BIT IF SET
                          57         03B9       
            5A       FC46 CF     9E  03BA   422 	MOVAB	INPUTNAM,R10		;GET ADDRESS OF INPUT LOGICAL NAME
                          14     10  03BF   423 	BSBB	10$			;CREATE 'INPUT' LOGICAL NAME
            50         18 AB     D0  03C1   424 	MOVL	PRC_L_INDOUTRAB(R11),R0	;GET INDIRECT OUTPUT RAB ADDRESS
            56         24 A8     9E  03C5   425 	MOVAB	IDF_T_OUTDVI(R8),R6	;GET ADDRESS OF OUTPUT DEVICE IDENTIFICATION
                                 AB  03C9   426 	BICW3	#FAB$M_PPF_IND,-	;GET INTERNAL FILE ID FOR OUTPUT FILE -
         02 A8       4000 8F         03CA   427 		IDF_W_OUTIFI(R8),R7	;ALWAYS CLEAR INDIRECT BIT IF SET
                          57         03CF       
            5A       FC3E CF     9E  03D0   428 	MOVAB	OUTPUTNAM,R10		;GET ADDRESS OF OUTPUT LOGICAL NAME
            5E            10     C2  03D5   429 10$:	SUBL	#16,SP			;ALLOCATE SPACE TO STORE DEVICE NAME
            50            86     9A  03D8   430 	MOVZBL	(R6)+,R0		;GET LENGTH OF DEVICE NAME
            66            50     28  03DB   431 	MOVC	R0,(R6),1(SP)		;COPY DEVICE IDENTIFICATION
                       01 AE         03DE       
            6E         5F 8F     90  03E0   432 	MOVB	#^A/_/,(SP)		;INSERT PHYSICAL DEVICE DESIGNATOR
            7E            1B     9A  03E4   433 	MOVZBL	#27,-(SP)		;INSERT ESCAPE AND TYPE ZERO
         02 AE            57     B0  03E7   434 	MOVW	R7,2(SP)		;INSERT INTERNAL FILE INDEX
                          6E     9F  03EB   435 	PUSHAB	(SP)			;BUILD DESCRIPTOR FOR EQUIVALENCE NAME
            50            76     9A  03ED   436 	MOVZBL	-(R6),R0		;GET LENGTH OF DEVICE IDENTIFICATION
                       05 A0     9F  03F0   437 	PUSHAB	5(R0)			;SET LENGTH OF LOGICAL NAME
            50            5E     D0  03F3   438 	MOVL	SP,R0			;SAVE ADDRESS OF EQUIVALENCE NAME DESCRIPTOR
            59            8A     9A  03F6   439 	MOVZBL	(R10)+,R9		;GET LENGTH OF LOGICAL NAME
            7E            59     7D  03F9   440 	MOVQ	R9,-(SP)		;BUILD LOGICAL NAME DESCRIPTOR
            51            5E     D0  03FC   441 	MOVL	SP,R1			;SAVE ADDRESS OF LOGICAL NAME DESCRIPTOR
         14 AB         08 AB     D1  03FF   442 	CMPL	PRC_L_INPRAB(R11),PRC_L_INDINPRAB(R11) ;INDIRECT LEVEL ZERO?
                          11     13  0404   443 	BEQL	20$			;IF EQL YES
                                     0406   444 	$CRELOG_S #LOG$C_PROCESS,(R1),(R0),#PSL$C_SUPER ;CREATE LOGICAL NAME
                          0D     11  0415   445 	BRB	30$			;
                                     0417   446 20$:	$DELLOG_S #LOG$C_PROCESS,(R1),#PSL$C_SUPER ;DELETE LOGICAL NAME
            5E            24     C0  0424   447 30$:	ADDL	#36,SP			;CLEAN STACK
                                 05  0427   448 	RSB				;
                                     0428   449  
                                     0428   450 	.END
INDIRECT        - INDIRECT FILE MANIPULATION ROUTINES            22-AUG-1978 01:08:40   VAX-11 MACRO X0.3-11               Page  12
SYMBOL TABLE                                                                                                                     (1)

$$.TMP1        = 00000001            CLI$_ONLEVL    = 00038100            DEV$M_RND      = 10000000            
$$.TMP2        = 00000066            CLI$_ONOVF     = 00038108            DEV$M_RTM      = 20000000            
BIT...         = 00000000            CLI$_OVRFLW    = 00038160            DEV$M_SDI      = 00000010            
CLI$_ABFNAM    = 000381B8            CLI$_PARMDEL   = 00038110            DEV$M_SHR      = 00010000            
CLI$_ABKEYW    = 00038000            CLI$_PROC_ID   = 0003FFF1            DEV$M_SPL      = 00000040            
CLI$_ABVERB    = 00038008            CLI$_QUEJOBCRE = 0003FFF9            DEV$M_SQD      = 00000020            
CLI$_BADRET    = 00038198            CLI$_REQPRMABS = 00038812            DEV$M_SWL      = 02000000            
CLI$_BADTEXT   = 000381B0            CLI$_RSLOVF    = 00038118            DEV$M_TRM      = 00000004            
CLI$_BUFOVF    = 00038018            CLI$_SKPDAT    = 00038120            DEV$M_WCK      = 80000000            
CLI$_COMPLX    = 00038020            CLI$_SPARE0    = 00038010            DEV$V_ALL      = 00000017            
CLI$_CONFQUAL  = 00038802            CLI$_SPARE1    = 00038058            DEV$V_AVL      = 00000012            
CLI$_CREQUEJOB = 0003884A            CLI$_STKOVF    = 00038128            DEV$V_CCL      = 00000001            
CLI$_DEFOVF    = 00038028            CLI$_SUBMITERR = 00038852            DEV$V_DIR      = 00000003            
CLI$_DEVALSPL  = 0003885A            CLI$_SYMDEL    = 00038130            DEV$V_DMT      = 00000015            
CLI$_DEVNOTFOR = 0003887A            CLI$_SYMOVF    = 00038138            DEV$V_ELG      = 00000016            
CLI$_DEVNOTSPL = 00038862            CLI$_UNDFIL    = 00038188            DEV$V_FOD      = 0000000E            
CLI$_DIRECT    = 00038030            CLI$_UNDSYM    = 00038140            DEV$V_FOR      = 00000018            
CLI$_EXPSYN    = 00038038            CLI$_UNPROPARM = 00038170            DEV$V_GEN      = 00000011            
CLI$_FILOPN    = 00038190            CLI$_UNPROQUAL = 00038168            DEV$V_IDV      = 0000001A            
CLI$_ILLVAL    = 0003883A            CLI$_USGOTO    = 00038148            DEV$V_MBX      = 00000014            
CLI$_IMCHNG    = 00038040            CLI$_VALCNVERR = 00038832            DEV$V_MNT      = 00000013            
CLI$_IMGFNF    = 00038872            CLI$_VALREQ    = 00038150            DEV$V_NET      = 0000000D            
CLI$_INSFPRM   = 00038048            CMDBUFSIZ      = 000001FC            DEV$V_ODV      = 0000001B            
CLI$_INVKEY    = 00038178            CREATE           000003AC R     03   DEV$V_RCK      = 0000001E            
CLI$_INVQUAL   = 0003880A            DCL$ALLOCSYM     ********   X   03   DEV$V_REC      = 00000000            
CLI$_INVQUALNUM= 0003881A            DCL$COMPSTRING   ********   X   03   DEV$V_RND      = 0000001C            
CLI$_INVREQTYP = 00038822            DCL$DEALGOTO     ********   X   03   DEV$V_RTM      = 0000001D            
CLI$_INVRSP    = 00038180            DCL$DEALLOCSYM   ********   X   03   DEV$V_SDI      = 00000004            
CLI$_INVUIC    = 000381A8            DCL$DISABLE      ********   X   03   DEV$V_SHR      = 00000010            
CLI$_IVCHAR    = 00038050            DCL$ERRORMSG     ********   X   03   DEV$V_SPL      = 00000006            
CLI$_IVDEVTYPE = 0003886A            DCL$GETDVAL      ********   X   03   DEV$V_SQD      = 00000005            
CLI$_IVFNAM    = 000381C0            DCL$MOVCHAR      ********   X   03   DEV$V_SWL      = 00000019            
CLI$_IVKEYW    = 00038060            DCL$MOVTOKN      ********   X   03   DEV$V_TRM      = 00000002            
CLI$_IVOPER    = 00038068            DCL$ONCTLYRST    ********   X   03   DEV$V_WCK      = 0000001F            
CLI$_IVPROT    = 00038070            DCL$ONRESET      ********   X   03   FAB$B_BID        00000000            
CLI$_IVQLOC    = 00038078            DCL$PROCFILE     ********   X   03   FAB$B_BKS        0000003E            
CLI$_IVSYMB    = 00038080            DCL$RUNDOWN      ********   X   03   FAB$B_BLN        00000001            
CLI$_IVVALU    = 00038088            DCL$SETCHAR      ********   X   03   FAB$B_DNS        00000035            
CLI$_IVVERB    = 00038090            DCL$STACKIND     0000001D RG    03   FAB$B_FAC        00000016            
CLI$_MAXPARM   = 00038098            DCL$T_DEFONTXT   ********   X   03   FAB$B_FNS        00000034            
CLI$_MULKEY    = 000381A0            DCL$UNSTACK      0000027C RG    03   FAB$B_FSZ        0000003F            
CLI$_NOATFIL   = 000380A0            DEV$M_ALL      = 00800000            FAB$B_ORG        0000001D            
CLI$_NOCCAT    = 000380A8            DEV$M_AVL      = 00040000            FAB$B_RAT        0000001E            
CLI$_NOCOMD    = 000380B0            DEV$M_CCL      = 00000002            FAB$B_RFM        0000001F            
CLI$_NOKEYW    = 000380B8            DEV$M_DIR      = 00000008            FAB$B_RTV        0000001C            
CLI$_NOLIST    = 000380C0            DEV$M_DMT      = 00200000            FAB$B_SHR        00000017            
CLI$_NOOPTPRS  = 00038842            DEV$M_ELG      = 00400000            FAB$C_BID      = 00000003            
CLI$_NOQUAL    = 000380C8            DEV$M_FOD      = 00004000            FAB$C_BLN        00000050            
CLI$_NORMAL    = 00030001            DEV$M_FOR      = 01000000            FAB$C_FIX      = 00000001            
CLI$_NOTNEG    = 000380D8            DEV$M_GEN      = 00020000            FAB$C_HSH      = 00000030            
CLI$_NOVALU    = 000380D0            DEV$M_IDV      = 04000000            FAB$C_IDX      = 00000020            
CLI$_NOVALUE   = 0003882A            DEV$M_MBX      = 00100000            FAB$C_MAXRFM   = 00000003            
CLI$_NULFIL    = 000380E0            DEV$M_MNT      = 00080000            FAB$C_REL      = 00000010            
CLI$_NUMBER    = 000380E8            DEV$M_NET      = 00002000            FAB$C_RFM_DFLT = 00000002            
CLI$_ONCOMD    = 000380F0            DEV$M_ODV      = 08000000            FAB$C_SEQ      = 00000000            
CLI$_ONERR     = 000380F8            DEV$M_RCK      = 40000000            FAB$C_UDF      = 00000000            
CLI$_ONEVAL    = 00038158            DEV$M_REC      = 00000001            FAB$C_VAR      = 00000002            
INDIRECT        - INDIRECT FILE MANIPULATION ROUTINES            22-AUG-1978 01:08:40   VAX-11 MACRO X0.3-11               Page  13
SYMBOL TABLE                                                                                                                     (1)

FAB$C_VFC      = 00000003            FAB$M_TEF      = 10000000            FAB$V_TRN      = 00000004            
FAB$K_BLN        00000050            FAB$M_TMD      = 00000010            FAB$V_UFM      = 0000001A            
FAB$L_ALQ        00000010            FAB$M_TMP      = 00000008            FAB$V_UFO      = 00000011            
FAB$L_CTX        00000018            FAB$M_TRN      = 00000010            FAB$V_UPD      = 00000003            
FAB$L_DEV        00000040            FAB$M_UFM      = 04000000            FAB$V_UPI      = 00000006            
FAB$L_DNA        00000030            FAB$M_UFO      = 00020000            FAB$V_WCK      = 00000009            
FAB$L_FNA        0000002C            FAB$M_UPD      = 00000008            FAB$W_BLS        0000003C            
FAB$L_FOP        00000004            FAB$M_UPI      = 00000040            FAB$W_DEQ        00000014            
FAB$L_JNL        00000020            FAB$M_WCK      = 00000200            FAB$W_IFI        00000002            
FAB$L_MRN        00000038            FAB$S_ORG      = 00000004            FAB$W_MRS        00000036            
FAB$L_NAM        00000028            FAB$S_PPF_RAT  = 00000008            GBL...         = 00000000            
FAB$L_SDC        00000044            FAB$V_BIO      = 00000005            IDF_K_LENGTH     0000005C            
FAB$L_STS        00000008            FAB$V_BLK      = 00000003            IDF_L_INPRABCTX  0000000C            
FAB$L_STV        0000000C            FAB$V_BRO      = 00000006            IDF_L_ONCTLY     00000058            
FAB$L_XAB        00000024            FAB$V_CBT      = 00000015            IDF_L_ONERROR    00000008            
FAB$M_BIO      = 00000020            FAB$V_CIF      = 00000019            IDF_L_OUTRABCTX  00000010            
FAB$M_BLK      = 00000008            FAB$V_CR       = 00000001            IDF_Q_LABEL      0000001C            
FAB$M_BRO      = 00000040            FAB$V_CTG      = 00000014            IDF_Q_LOCAL      00000014            
FAB$M_CBT      = 00200000            FAB$V_DEL      = 00000002            IDF_T_INPDVI     00000034            
FAB$M_CIF      = 02000000            FAB$V_DFW      = 00000005            IDF_T_OUTDVI     00000024            
FAB$M_CR       = 00000002            FAB$V_DLT      = 0000000F            IDF_V_INPOPN   = 00000000            
FAB$M_CTG      = 00100000            FAB$V_DMO      = 0000000C            IDF_W_FLAG       00000056            
FAB$M_DEL      = 00000004            FAB$V_ESC      = 0000001B            IDF_W_INPDID     0000004A            
FAB$M_DFW      = 00000020            FAB$V_EXE      = 00000007            IDF_W_INPFID     00000044            
FAB$M_DLT      = 00008000            FAB$V_FTN      = 00000000            IDF_W_INPIFI     00000000            
FAB$M_DMO      = 00001000            FAB$V_GET      = 00000001            IDF_W_INPRFA     00000050            
FAB$M_ESC      = 08000000            FAB$V_INP      = 00000013            IDF_W_ONLEVEL    00000006            
FAB$M_EXE      = 00000080            FAB$V_JNL      = 00000016            IDF_W_OUTIFI     00000002            
FAB$M_FTN      = 00000001            FAB$V_KFO      = 0000001E            IDF_W_OUTISI     00000004            
FAB$M_GET      = 00000002            FAB$V_MSE      = 00000004            INDXIT           00000274 R     03   
FAB$M_INP      = 00080000            FAB$V_MXV      = 00000001            INPBUFSIZ      = 00000084            
FAB$M_JNL      = 00400000            FAB$V_NAM      = 00000018            INPFILE          00000000 R     03   
FAB$M_KFO      = 40000000            FAB$V_NEF      = 0000000A            INPUTNAM         00000004 R     03   
FAB$M_MSE      = 00000010            FAB$V_NFS      = 00000010            LOG$B_AMOD       0000000E            
FAB$M_MXV      = 00000002            FAB$V_NIL      = 00000005            LOG$B_TABLE      0000000B            
FAB$M_NAM      = 01000000            FAB$V_OFP      = 0000001D            LOG$B_TYPE       0000000A            
FAB$M_NEF      = 00000400            FAB$V_ORG      = 00000004            LOG$C_GROUP    = 00000001            
FAB$M_NFS      = 00010000            FAB$V_POS      = 00000008            LOG$C_LENGTH     00000014            
FAB$M_NIL      = 00000020            FAB$V_PPF      = 00000012            LOG$C_NAMLENGTH= 00000040            
FAB$M_OFP      = 20000000            FAB$V_PPF_IND  = 0000000E            LOG$C_PROCESS  = 00000002            
FAB$M_POS      = 00000100            FAB$V_PPF_RAT  = 00000006            LOG$C_SYSTEM   = 00000000            
FAB$M_PPF      = 00040000            FAB$V_PRN      = 00000002            LOG$K_LENGTH     00000014            
FAB$M_PPF_IND  = 00004000            FAB$V_PUT      = 00000000            LOG$L_LTBL       00000004            
FAB$M_PPF_RAT  = 00003FC0            FAB$V_RCK      = 00000017            LOG$L_LTFL       00000000            
FAB$M_PRN      = 00000004            FAB$V_RWC      = 0000000B            LOG$L_MBXUCB     00000010            
FAB$M_PUT      = 00000001            FAB$V_RWO      = 00000007            LOG$T_NAME       00000014            
FAB$M_RCK      = 00800000            FAB$V_SCF      = 0000000E            LOG$W_GROUP      0000000C            
FAB$M_RWC      = 00000800            FAB$V_SHRDEL   = 00000002            LOG$W_SIZE       00000008            
FAB$M_RWO      = 00000080            FAB$V_SHRGET   = 00000001            MSGBUFSIZ      = 00000084            
FAB$M_SCF      = 00004000            FAB$V_SHRPUT   = 00000000            NAM$B_BID        00000000            
FAB$M_SHRDEL   = 00000004            FAB$V_SHRUPD   = 00000003            NAM$B_BLN        00000001            
FAB$M_SHRGET   = 00000002            FAB$V_SPL      = 0000000D            NAM$B_CURLVL     00000038            
FAB$M_SHRPUT   = 00000001            FAB$V_SQO      = 00000006            NAM$B_ESL        0000000B            
FAB$M_SHRUPD   = 00000008            FAB$V_SUP      = 00000002            NAM$B_ESS        0000000A            
FAB$M_SPL      = 00002000            FAB$V_TEF      = 0000001C            NAM$B_RSL        00000003            
FAB$M_SQO      = 00000040            FAB$V_TMD      = 00000004            NAM$B_RSS        00000002            
FAB$M_SUP      = 00000004            FAB$V_TMP      = 00000003            NAM$C_BID      = 00000002            
INDIRECT        - INDIRECT FILE MANIPULATION ROUTINES            22-AUG-1978 01:08:40   VAX-11 MACRO X0.3-11               Page  14
SYMBOL TABLE                                                                                                                     (1)

NAM$C_BLN        00000038            NAM$V_QUOTED   = 00000012            PRC_L_SAVAP      00000000            
NAM$C_BLN_DIRWC  00000050            NAM$V_WILDCARD = 00000008            PRC_L_SAVFP      00000004            
NAM$C_DVI      = 00000010            NAM$V_WILD_DIR = 00000014            PRC_L_SEVERITY   00000040            
NAM$C_MAXRSS   = 00000080            NAM$V_WILD_GRP = 00000018            PRC_L_STACKLM    00000088            
NAM$C_MAXRSSLCL= 00000060            NAM$V_WILD_MBR = 00000019            PRC_L_STACKPT    00000084            
NAM$K_BLN        00000038            NAM$V_WILD_NAME= 00000005            PRC_L_STATUS     00000044            
NAM$K_BLN_DIRWC  00000050            NAM$V_WILD_SFD1= 00000019            PRC_L_SYMBOL     0000004C            
NAM$L_DIRWCC1    00000040            NAM$V_WILD_SFD2= 0000001A            PRC_M_CNTRLY   = 00000002            
NAM$L_DIRWCC2    00000044            NAM$V_WILD_SFD3= 0000001B            PRC_M_DBGQUAL  = 00000200            
NAM$L_DIRWCC3    00000048            NAM$V_WILD_SFD4= 0000001C            PRC_M_DBGTRUE  = 00000400            
NAM$L_DIRWCC4    0000004C            NAM$V_WILD_SFD5= 0000001D            PRC_M_DISABL   = 00000004            
NAM$L_DWC        00000038            NAM$V_WILD_SFD6= 0000001E            PRC_M_EXIT     = 00000008            
NAM$L_ESA        0000000C            NAM$V_WILD_SFD7= 0000001F            PRC_M_GOEOF    = 00000001            
NAM$L_FNB        00000034            NAM$V_WILD_TYPE= 00000004            PRC_M_GOTO     = 00000010            
NAM$L_RLF        00000010            NAM$V_WILD_UFD = 00000018            PRC_M_HANGUP   = 00001000            
NAM$L_RSA        00000004            NAM$V_WILD_VER = 00000003            PRC_M_IND      = 00000020            
NAM$L_WCC        00000030            NAM$W_DID        0000002A            PRC_M_MODE     = 00000040            
NAM$M_DIR_LVLS = 00E00000            NAM$W_DID_NUM    0000002A            PRC_M_NOCTLY   = 00004000            
NAM$M_EXP_DEV  = 00000080            NAM$W_DID_RVN    0000002E            PRC_M_PAUSE    = 00002000            
NAM$M_EXP_DIR  = 00000040            NAM$W_DID_SEQ    0000002C            PRC_M_USRDET   = 00000100            
NAM$M_EXP_NAME = 00000004            NAM$W_FID        00000024            PRC_M_VERIFY   = 00000080            
NAM$M_EXP_TYPE = 00000002            NAM$W_FID_NUM    00000024            PRC_M_YLEVEL   = 00000800            
NAM$M_EXP_VER  = 00000001            NAM$W_FID_RVN    00000028            PRC_Q_ALLOCREG   00000020            
NAM$M_GRP_MBR  = 00080000            NAM$W_FID_SEQ    00000026            PRC_Q_GLOBAL     00000028            
NAM$M_HIGHVER  = 00008000            NAM$W_PRV_DID    0000003A            PRC_Q_LABEL      00000030            
NAM$M_LOWVER   = 00004000            OUTFILE          0000000E R     03   PRC_Q_LOCAL      00000038            
NAM$M_NODE     = 00020000            OUTPUTNAM        00000012 R     03   PRC_V_CNTRLY   = 00000001            
NAM$M_PPF      = 00010000            OUTQUAL          00000017 R     03   PRC_V_DBGQUAL  = 00000009            
NAM$M_QUOTED   = 00040000            PRC_B_DEFRADIX   00000092            PRC_V_DBGTRUE  = 0000000A            
NAM$M_WILDCARD = 00000100            PRC_B_EXMDEPMOD  00000091            PRC_V_DISABL   = 00000002            
NAM$M_WILD_DIR = 00100000            PRC_B_EXMDEPWID  00000090            PRC_V_EXIT     = 00000003            
NAM$M_WILD_GRP = 01000000            PRC_K_DEC      = 00000001            PRC_V_GOEOF    = 00000000            
NAM$M_WILD_MBR = 02000000            PRC_K_HEX      = 00000000            PRC_V_GOTO     = 00000004            
NAM$M_WILD_NAME= 00000020            PRC_K_LENGTH     000000A0            PRC_V_HANGUP   = 0000000C            
NAM$M_WILD_SFD1= 02000000            PRC_K_OCT      = 00000002            PRC_V_IND      = 00000005            
NAM$M_WILD_SFD2= 04000000            PRC_L_CLIWRK0    0000005C            PRC_V_MODE     = 00000006            
NAM$M_WILD_SFD3= 08000000            PRC_L_CLIWRK1    00000060            PRC_V_NOCTLY   = 0000000E            
NAM$M_WILD_SFD4= 10000000            PRC_L_CLIWRK2    00000064            PRC_V_PAUSE    = 0000000D            
NAM$M_WILD_SFD5= 20000000            PRC_L_CLIWRK3    00000068            PRC_V_USRDET   = 00000008            
NAM$M_WILD_SFD6= 40000000            PRC_L_CLIWRK4    0000006C            PRC_V_VERIFY   = 00000007            
NAM$M_WILD_SFD7= 80000000            PRC_L_ERRRAB     00000010            PRC_V_YLEVEL   = 0000000B            
NAM$M_WILD_TYPE= 00000010            PRC_L_EXMDEPADR  0000008C            PRC_W_CLIFLAG    00000052            
NAM$M_WILD_UFD = 01000000            PRC_L_EXTARG     00000078            PRC_W_ERRIFI     00000052            
NAM$M_WILD_VER = 00000008            PRC_L_EXTBLK     00000070            PRC_W_FLAGS      00000054            
NAM$S_DIR_LVLS = 00000003            PRC_L_EXTCOD     00000080            PRC_W_INPCHAN    00000050            
NAM$T_DVI        00000014            PRC_L_EXTHND     00000074            PRC_W_ONLEVEL    00000056            
NAM$V_DIR_LVLS = 00000015            PRC_L_EXTPRM     0000007C            PRD_G_ALTINPRAB  000000CC            
NAM$V_EXP_DEV  = 00000007            PRC_L_INDEPTH    00000048            PRD_G_ALTOUTRAB  00000110            
NAM$V_EXP_DIR  = 00000006            PRC_L_INDFAB     0000001C            PRD_G_FAB        00000000            
NAM$V_EXP_NAME = 00000002            PRC_L_INDINPRAB  00000014            PRD_G_INPRAB     00000088            
NAM$V_EXP_TYPE = 00000001            PRC_L_INDOUTRAB  00000018            PRD_G_NAM        00000050            
NAM$V_EXP_VER  = 00000000            PRC_L_INPRAB     00000008            PRD_G_OUTRAB     00000154            
NAM$V_GRP_MBR  = 00000013            PRC_L_LSTSTATUS  00000094            PRD_K_LENGTH     00000198            
NAM$V_HIGHVER  = 0000000F            PRC_L_ONCTLY     0000009C            PRD_K_XLENGTH    000001B8            
NAM$V_LOWVER   = 0000000E            PRC_L_ONERROR    00000058            PRD_T_OUTFNM     000001A4            
NAM$V_NODE     = 00000011            PRC_L_OUTRAB     0000000C            PRD_W_OUTDID     0000019E            
NAM$V_PPF      = 00000010            PRC_L_PROCUIC    00000098            PRD_W_OUTFID     00000198            
INDIRECT        - INDIRECT FILE MANIPULATION ROUTINES            22-AUG-1978 01:08:40   VAX-11 MACRO X0.3-11               Page  15
SYMBOL TABLE                                                                                                                     (1)

PSL$C_EXEC     = 00000001            RAB$B_KSZ        00000034            RAB$S_PPF_RAT  = 00000008            
PSL$C_KERNEL   = 00000000            RAB$B_MBC        00000037            RAB$V_ASY      = 00000000            
PSL$C_SUPER    = 00000002            RAB$B_MBF        00000036            RAB$V_BIO      = 0000000B            
PSL$C_USER     = 00000003            RAB$B_PSZ        00000034            RAB$V_CCO      = 0000001F            
PSL$M_CM       = 80000000            RAB$B_RAC        0000001E            RAB$V_CVT      = 0000001A            
PSL$M_CURMOD   = 03000000            RAB$B_ROP1       00000005            RAB$V_EOF      = 00000008            
PSL$M_DV       = 00000080            RAB$B_ROP2       00000006            RAB$V_FDL      = 00000006            
PSL$M_FPD      = 08000000            RAB$B_ROP3       00000007            RAB$V_HSH      = 00000007            
PSL$M_FU       = 00000040            RAB$B_TMO        0000001F            RAB$V_KGE      = 00000015            
PSL$M_IPL      = 001F0000            RAB$C_BID      = 00000001            RAB$V_KGT      = 00000016            
PSL$M_IS       = 04000000            RAB$C_BLN        00000044            RAB$V_LIM      = 0000000E            
PSL$M_IV       = 00000020            RAB$C_KEY      = 00000001            RAB$V_LOA      = 0000000D            
PSL$M_PRVMOD   = 00C00000            RAB$C_RFA      = 00000002            RAB$V_LOC      = 00000010            
PSL$M_SAFBITS  = 000037FF            RAB$C_SEQ      = 00000000            RAB$V_MAS      = 00000005            
PSL$M_TBIT     = 00000010            RAB$K_BLN        00000044            RAB$V_NLK      = 00000014            
PSL$M_TP       = 40000000            RAB$L_BKT        00000038            RAB$V_NXR      = 00000017            
PSL$S_CURMOD   = 00000002            RAB$L_CTX        00000018            RAB$V_PMT      = 0000001E            
PSL$S_IPL      = 00000005            RAB$L_DCT        00000038            RAB$V_PPF_IND  = 0000000E            
PSL$S_PRVMOD   = 00000002            RAB$L_FAB        0000003C            RAB$V_PPF_RAT  = 00000006            
PSL$V_CM       = 0000001F            RAB$L_KBF        00000030            RAB$V_PTA      = 0000001D            
PSL$V_CURMOD   = 00000018            RAB$L_PBF        00000030            RAB$V_RAH      = 00000009            
PSL$V_DV       = 00000007            RAB$L_RBF        00000028            RAB$V_RLK      = 00000013            
PSL$V_FPD      = 0000001B            RAB$L_RFA0       00000010            RAB$V_RNE      = 00000018            
PSL$V_FU       = 00000006            RAB$L_RHB        0000002C            RAB$V_RNF      = 0000001B            
PSL$V_IPL      = 00000010            RAB$L_ROP        00000004            RAB$V_TMO      = 00000019            
PSL$V_IS       = 0000001A            RAB$L_STS        00000008            RAB$V_TPT      = 00000001            
PSL$V_IV       = 00000005            RAB$L_STV        0000000C            RAB$V_UIF      = 00000004            
PSL$V_PRVMOD   = 00000016            RAB$L_UBF        00000024            RAB$V_ULK      = 00000012            
PSL$V_TBIT     = 00000004            RAB$M_ASY      = 00000001            RAB$V_WAT      = 00000011            
PSL$V_TP       = 0000001E            RAB$M_BIO      = 00000800            RAB$V_WBH      = 0000000A            
PTR_K_BLANK    = 00000001            RAB$M_CCO      = 80000000            RAB$W_ISI        00000002            
PTR_K_COLON    = 00000002            RAB$M_CVT      = 04000000            RAB$W_RFA        00000010            
PTR_K_COMDQUAL = 00000000            RAB$M_EOF      = 00000100            RAB$W_RFA4       00000014            
PTR_K_COMMA    = 00000005            RAB$M_FDL      = 00000040            RAB$W_RSZ        00000022            
PTR_K_ENDLINE  = 00000004            RAB$M_HSH      = 00000080            RAB$W_USZ        00000020            
PTR_K_LPAREN   = 00000007            RAB$M_KGE      = 00200000            RAISE            000000BF R     03   
PTR_K_PARAMETR = 00000003            RAB$M_KGT      = 00400000            RSLBUFSIZ      = 00000180            
PTR_K_PARMQUAL = 00000001            RAB$M_LIM      = 00004000            SETIND           000002A7 R     03   
PTR_K_PLUS     = 00000004            RAB$M_LOA      = 00002000            SS$_NORMAL       ********   X   03   
PTR_K_QUALVALU = 00000002            RAB$M_LOC      = 00010000            STKXIT           00000298 R     03   
PTR_K_RPAREN   = 00000006            RAB$M_MAS      = 00000020            SYMBOLS        = 00000008            
PTR_K_SLASH    = 00000003            RAB$M_NLK      = 00100000            SYS$CLOSE        ********  GX   03   
PTR_L_DESCR      00000000            RAB$M_NXR      = 00800000            SYS$CONNECT      ********  GX   03   
PTR_S_FLAGS    = 00000004            RAB$M_PMT      = 40000000            SYS$CREATE       ********  GX   03   
PTR_S_OFFSET   = 0000000C            RAB$M_PPF_IND  = 00004000            SYS$CRELOG       ********   X   03   
PTR_S_TERM     = 00000004            RAB$M_PPF_RAT  = 00003FC0            SYS$DELLOG       ********   X   03   
PTR_S_TYPE     = 00000004            RAB$M_PTA      = 20000000            SYS$GET          ********  GX   03   
PTR_S_VALUE    = 00000008            RAB$M_RAH      = 00000200            SYS$OPEN         ********  GX   03   
PTR_V_FLAGS    = 00000014            RAB$M_RLK      = 00080000            UNSTACK          000002B9 R     03   
PTR_V_NEGATE   = 00000000            RAB$M_RNE      = 01000000            WRK_AB_BUFFER    FFFFFD38            
PTR_V_OFFSET   = 00000008            RAB$M_RNF      = 08000000            WRK_AG_RESULT    FFFFFBB4            
PTR_V_TERM     = 00000018            RAB$M_TMO      = 02000000            WRK_B_VERBTYP    FFFFFFC0            
PTR_V_TYPE     = 0000001C            RAB$M_TPT      = 00000002            WRK_K_LENGTH     FFFFFBB4            
PTR_V_VALUE    = 00000000            RAB$M_UIF      = 00000010            WRK_L_CHARPTR    FFFFFFFC            
RAB$B_BID        00000000            RAB$M_ULK      = 00040000            WRK_L_CMDOUT     FFFFFFBC            
RAB$B_BLN        00000001            RAB$M_WAT      = 00020000            WRK_L_IMAGE      FFFFFFEC            
RAB$B_KRF        00000035            RAB$M_WBH      = 00000400            WRK_L_MAXPARM    FFFFFFE4            
INDIRECT        - INDIRECT FILE MANIPULATION ROUTINES            22-AUG-1978 01:08:40   VAX-11 MACRO X0.3-11               Page  16
SYMBOL TABLE                                                                                                                     (1)

WRK_L_MINPARM    FFFFFFE8            
WRK_L_PARMCNT    FFFFFFF0            
WRK_L_PAROUT     FFFFFFF4            
WRK_L_PROMPT     FFFFFFD0            
WRK_L_PROPTR     FFFFFFDC            
WRK_L_QUABLK     FFFFFFE0            
WRK_L_RSLNXT     FFFFFD34            
WRK_L_SAVAP      FFFFFFC8            
WRK_L_SAVFP      FFFFFFCC            
WRK_L_SAVSP      FFFFFFC4            
WRK_M_COMMAND  = 00000002            
WRK_M_IMCHNG   = 00000004            
WRK_M_INQUIRE  = 00000100            
WRK_M_NOSTAT   = 00000200            
WRK_M_PROMPT   = 00000008            
WRK_M_QUAL     = 00000010            
WRK_M_QUOTE    = 00000020            
WRK_M_RUNDWN   = 00000001            
WRK_M_STAR     = 00000040            
WRK_M_TRAILSPC = 00000400            
WRK_M_VERB     = 00000080            
WRK_Q_IOSB       FFFFFFD4            
WRK_V_COMMAND  = 00000001            
WRK_V_IMCHNG   = 00000002            
WRK_V_INQUIRE  = 00000008            
WRK_V_NOSTAT   = 00000009            
WRK_V_PROMPT   = 00000003            
WRK_V_QUAL     = 00000004            
WRK_V_QUOTE    = 00000005            
WRK_V_RUNDWN   = 00000000            
WRK_V_STAR     = 00000006            
WRK_V_TRAILSPC = 0000000A            
WRK_V_VERB     = 00000007            
WRK_W_FLAGS      FFFFFFFA            
WRK_W_IMGCHAN    FFFFFFF8            
_$$_           = 000000EF            


PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            FFFFFFFC      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
DCL$ZCODE        00000428      03     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD  NOWRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
5462. BYTES LEFT IN FREE MEMORY POOL.
228. BYTES OF RECLAIMED MEMORY.
EXE$:INDIRECT,LIS$:INDIRECT/-SP=EXECML$/ML,LIB$:DCL/ML,SRC$:INDIRECT
60 MLB DIR RDS - 1051 GETS TO DEFINE 50 MACROS. 89 INTER. FILE WRITES. 
