STATEMENT       - ARITHMETIC ASSIGNMENT AND STRING EQUATE PROCE  22-AUG-1978 01:26:10   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (1)      44  SUBSTRING ASSIGNMENT STATEMENT
   (1)     100  EVALUATE ARITHMETIC ASSIGNMENT STATEMENT
   (1)     198  PROCESS STRING EQUATE STATEMENT
   (1)     295  LOCAL SUBROUTINES
   (1)     383  CHECK A CHARACTER FOR VALID ALPHA
STATEMENT       - ARITHMETIC ASSIGNMENT AND STRING EQUATE PROCE  22-AUG-1978 01:26:10   VAX-11 MACRO X0.3-11               Page   1
01                                                                                                                               (1)

                                     0000     1 	.TITLE	STATEMENT - ARITHMETIC ASSIGNMENT AND STRING EQUATE PROCESSING
                                     0000     2 	.IDENT	/01/
                                     0000     3  
                                     0000     4 ;
                                     0000     5 ; COPYRIGHT (C) 1977
                                     0000     6 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
                                     0000     7 ;
                                     0000     8 ; THIS SOFTWARE IS FURNISHED UNDER  A LICENSE FOR USE ONLY  ON  A
                                     0000     9 ; SINGLE COMPUTER SYSTEM AND MAY BE  COPIED ONLY WITH  THE INCLU-
                                     0000    10 ; SION OF  THE  ABOVE  COPYRIGHT NOTICE.  THIS SOFTWARE,  OR  ANY
                                     0000    11 ; OTHER COPIES THEREOF, MAY NOT BE  PROVIDED  OR  OTHERWISE  MADE
                                     0000    12 ; AVAILABLE TO ANY OTHER PERSON EXCEPT  FOR  USE  ON  SUCH SYSTEM
                                     0000    13 ; AND TO  ONE WHO AGREES  TO  THESE LICENSE  TERMS.  TITLE TO AND
                                     0000    14 ; OWNERSHIP OF THE SOFTWARE SHALL AT ALL TIMES REMAIN IN DEC.
                                     0000    15 ;
                                     0000    16 ; THE INFORMATION IN THIS SOFTWARE  IS  SUBJECT TO CHANGE WITHOUT
                                     0000    17 ; NOTICE AND SHOULD NOT BE CONSTRUED  AS  A COMMITMENT BY DIGITAL
                                     0000    18 ; EQUIPMENT CORPORATION.
                                     0000    19 ;
                                     0000    20 ; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF ITS
                                     0000    21 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
                                     0000    22 ;
                                     0000    23 ; D. N. CUTLER 16-MAY-77
                                     0000    24 ;
                                     0000    25 ; ARITHMETIC ASSIGNMENT AND STRING EQUATE STATEMENT PROCESSING
                                     0000    26 ;
                                     0000    27 ; MACRO LIBRARY CALLS
                                     0000    28 ;
                                     0000    29  
                                     0000    30 	DEFCMDWRK			;DEFINE WORK AREA OFFSETS
                                     0000    31 	DEFERRCOD			;DEFINE ERROR/STATUS VALUES
                                     0000    32  
                                     0000    33 ;
                                     0000    34 ; LOCAL DATA
                                     0000    35 ;
                                     0000    36  
                                 00000000    37 	.PSECT	DCL$ZCODE,BYTE,RD,NOWRT
                                     0000    38 CONTROLFMT:				;VALUE CONVERSION FORMAT CONTROL STRING
                           4C 53 21  0000    39 	.ASCII	/!SL/			;
                                     0003    40 CONTROLEND:				;
                                     0003    41 TRUFLS:					;TRUE/FALSE BOOLEAN VALUE STRING
                        59 4E 54 46  0003    42 	.ASCII	/FTNY/			;
STATEMENT       - ARITHMETIC ASSIGNMENT AND STRING EQUATE PROCE  22-AUG-1978 01:26:10   VAX-11 MACRO X0.3-11               Page   2
01              SUBSTRING ASSIGNMENT STATEMENT                                                                                   (1)

                                     0007    44 	.SBTTL	SUBSTRING ASSIGNMENT STATEMENT
                                     0007    45 ;+
                                     0007    46 ; DCL$SUBASSIGN - SUBSTRING ASSIGNMENT
                                     0007    47 ;
                                     0007    48 ; THIS ROUTINE IS CALLED WHEN A SYMBOL DEFINITION IS TERMINATED WITH A LEFT SQUARE
                                     0007    49 ; BRACKET.
                                     0007    50 ;
                                     0007    51 ; INPUTS:
                                     0007    52 ;
                                     0007    53 ;	R1 = LENGTH OF SYMBOL NAME.
                                     0007    54 ;	R2 = ADDRESS OF SYMBOL NAME.
                                     0007    55 ;	R6 = COMMAND BUFFER DISPLAY PARAMETER.
                                     0007    56 ;	R9 = ADDRESS OF NEXT BYTE IN COMMAND BUFFER.
                                     0007    57 ;	R10 = RESULT PARSE DESCRIPTOR TABLE POINTER.
                                     0007    58 ;	R11 = BASE ADDRESS OF PROCESS WORK AREA.
                                     0007    59 ;	FP = BASE ADDRESS OF COMMAND WORK AREA.
                                     0007    60 ;
                                     0007    61 ; OUTPUTS:
                                     0007    62 ;
                                     0007    63 ;	THE POSITION AND SIZE PARAMETERS ARE PARSED AND THE ASSIGNMENT IS DISPATCHED
                                     0007    64 ;	TO THE PROPER ASSIGNMENT STATEMENT PROCESSOR.
                                     0007    65 ;-
                                     0007    66  
                                     0007    67 DCL$SUBASSIGN::				;SUBSTRING ASSIGNMENT
            57            51     7D  0007    68 	MOVQ	R1,R7			;SAVE SYMBOL NAME PARAMETERS
                          01DD   30  000A    69 	BSBW	GETARG			;GET POSITION ARGUMENT
                                 2C  000D    70 	.ASCII	/,/			;EXPECTED TERMINATOR
            5A            51     D0  000E    71 	MOVL	R1,R10			;SAVE POSITION PARAMETER
                          01D6   30  0011    72 	BSBW	GETARG			;GET SIZE ARGUMENT
                                 5D  0014    73 	.ASCII	/]/			;EXPECTED TERMINATOR
            55            51     D0  0015    74 	MOVL	R1,R5			;SAVE SIZE PARAMETER
                                     0018    75 	MOVCHAR				;MOVE TERMINATOR TO COMMAND BUFFER
            56            59     D0  001B    76 	MOVL	R9,R6			;UPDATE DISPLAY PARAMETER
                                     001E    77 	SETCHAR				;PEEK AT NEXT CHARACTER IN COMMAND BUFFER
            50            3D     91  0021    78 	CMPB	#^A/=/,R0		;ARITHMETIC ASSIGNMENT?
                          22     13  0024    79 	BEQL	10$			;IF EQL YES
            50            3A     91  0026    80 	CMPB	#^A/:/,R0		;STRING EQUATE?
                          2E     12  0029    81 	BNEQ	20$			;IF NEQ NO
                                     002B    82 	MOVCHAR				;MOVE NEXT CHARACTER TO COMMAND BUFFER
                                     002E    83 	SETCHAR				;PEEK AT NEXT CHARACTER IN COMMAND BUFFER
            50            3D     91  0031    84 	CMPB	#^A/=/,R0		;STRING EQUATE?
                          23     12  0034    85 	BNEQ	20$			;IF NE NO
            51            57     7D  0036    86 	MOVQ	R7,R1			;RESTORE SYMBOL NAME PARAMETERS
            56            52     D0  0039    87 	MOVL	R2,R6			;RESET DISPLAY PARAMETER
            57            55     D0  003C    88 	MOVL	R5,R7			;SET SIZE VALUE
            58            5A     D0  003F    89 	MOVL	R10,R8			;SET POSITION VALUE
            5A            01     D0  0042    90 	MOVL	#1,R10			;SET SUBSTRING INDICATOR
                          00C4   31  0045    91 	BRW	EQUATE			;
            51            57     7D  0048    92 10$:	MOVQ	R7,R1			;RESTORE SYMBOL NAME PARAMETERS
            56            52     D0  004B    93 	MOVL	R2,R6			;RESET DISPLAY PARAMETER
            57            55     D0  004E    94 	MOVL	R5,R7			;SET SIZE VALUE
            58            5A     D0  0051    95 	MOVL	R10,R8			;SET POSITION VALUE
            5A            01     D0  0054    96 	MOVL	#1,R10			;SET SUBSTRING INDICATOR
                          05     11  0057    97 	BRB	EVALUATE		;
                          00A9   31  0059    98 20$:	BRW	SYMDEL			;
STATEMENT       - ARITHMETIC ASSIGNMENT AND STRING EQUATE PROCE  22-AUG-1978 01:26:10   VAX-11 MACRO X0.3-11               Page   3
01              EVALUATE ARITHMETIC ASSIGNMENT STATEMENT                                                                         (1)

                                     005C   100 	.SBTTL	EVALUATE ARITHMETIC ASSIGNMENT STATEMENT
                                     005C   101 ;+
                                     005C   102 ; DCL$EVALUATE - EVALUATE ARITHMETIC ASSIGNMENT STATEMENT
                                     005C   103 ;
                                     005C   104 ; THIS ROUTINE IS CALLED TO PROCESS AN ARITHMETIC ASSIGNMENT STATEMENT.
                                     005C   105 ;
                                     005C   106 ; INPUTS:
                                     005C   107 ;
                                     005C   108 ;	R1 = LENGTH OF SYMBOL NAME.
                                     005C   109 ;	R2 = ADDRESS OF SYMBOL NAME.
                                     005C   110 ;	R6 = COMMAND BUFFER DISPLAY PARAMETER.
                                     005C   111 ;	R9 = ADDRESS OF NEXT BYTE IN COMMAND BUFFER.
                                     005C   112 ;	R10 = RESULT PARSE DESCRIPTOR TABLE POINTER.
                                     005C   113 ;	R11 = BASE ADDRESS OF PROCESS WORK AREA.
                                     005C   114 ;	FP = BASE ADDRESS OF COMMAND WORK AREA.
                                     005C   115 ;
                                     005C   116 ; OUTPUTS:
                                     005C   117 ;
                                     005C   118 ;	R0 LOW BIT CLEAR INDICATES EXPRESSION ANALYSIS OR ASSIGNMENT FAILURE.
                                     005C   119 ;
                                     005C   120 ;		R0 = DCL$_COMPLX - EXPRESSION TOO COMPLEX.
                                     005C   121 ;		R0 = DCL$_EXPSYN - EXPRESSION SYNTAX ERROR.
                                     005C   122 ;		R0 = DCL$_IVCHAR - INVALID NUMERIC CHARACTER.
                                     005C   123 ;		R0 = DCL$_IVOPER - INVALID EXPRESSION OPERATOR.
                                     005C   124 ;		R0 = DCL$_IVSYMB - INVALID SYMBOL CHARACTER.
                                     005C   125 ;		R0 = DCL$_SYMDEL - INVALID SYMBOL DELIMITER.
                                     005C   126 ;		R0 = DCL$_SYMOVF - SYMBOL TABLE OVERFLOW.
                                     005C   127 ;		R0 = DCL$_UNDSYM - UNDEFINED SYMBOL.
                                     005C   128 ;
                                     005C   129 ;	R0 LOW BIT SET INDICATES SUCCESSFUL COMPLETION.
                                     005C   130 ;
                                     005C   131 ;		R0 = DCL$_NORMAL - NORMAL COMPLETION.
                                     005C   132 ;-
                                     005C   133  
                                     005C   134 DCL$EVALUATE::				;EVALUATE ARITHMETIC ASSIGNMENT STATEMENT
                          5A     D4  005C   135 	CLRL	R10			;CLEAR BIT FIELD SUBSTRING INDICATOR
                                     005E   136 EVALUATE:				;EVALUATE EXPRESSION
                                     005E   137 	SETBIT	PRC_V_IND,PRC_W_FLAGS(R11) ;DISABLE INDIRECT FILE RECOGNITION
            57            20     D1  0062   138 	CMPL	#32,R7			;FIELD WIDTH GREATER THAN LONGWORD?
                          03     1E  0065   139 	BGEQU	10$			;IF GEQU NO
            57            20     D0  0067   140 	MOVL	#32,R7			;REDUCE FIELD WIDTH TO A LONGWORD
                          0149   30  006A   141 10$:	BSBW	CHECKSYM		;CHECK SYMBOL AND SAVE PARAMETERS
                     0580 8F     BB  006D   142 	PUSHR	#^M<R7,R8,R10>		;SAVE BIT FIELD SUBSTRING PARAMETERS
                                     0071   143 	EXPRESS				;EVALUATE ARITHMETIC EXPRESSION
                     0580 8F     BA  0074   144 	POPR	#^M<R7,R8,R10>		;RESTORE BIT FIELD SUBSTRING PARAMETERS
                          38     BA  0078   145 	POPR	#^M<R3,R4,R5>		;RETRIEVE SYMBOL NAME PARAMETERS
            7C            50     E9  007A   146 	BLBC	R0,80$			;IF LBC EXPRESSION ANALYSIS ERROR
            4B            5A     E9  007D   147 	BLBC	R10,60$			;IF LBC NO BIT FIELD SUBSTRING SPECIFIED
                          3A     BB  0080   148 	PUSHR	#^M<R1,R3,R4,R5>	;SAVE EXPRESSION AND SYMBOL NAME PARAMETERS
            51            53     7D  0082   149 	MOVQ	R3,R1			;SET SYMBOL NAME PARAMETERS FOR SEARCH
                                     0085   150 	SEARCH				;SEARCH FOR SYMBOL
            59       FE37 CD     9E  0088   151 	MOVAB	WRK_AB_BUFFER+255(FP),R9 ;RELOAD ADDRESS OF COMMAND BUFFER
            56            59     D0  008D   152 	MOVL	R9,R6			;RESET DISPLAY PARAMETER
            58            57     C1  0090   153 	ADDL3	R7,R8,R10		;CALCULATE ENDING BIT NUMBER
                          5A         0093       
            5A            07     C0  0094   154 	ADDL	#7,R10			;ROUTND UP TO NEXT BYTE
            5A            08     C6  0097   155 	DIVL	#8,R10			;CALCULATE ENDING BYTE NUMBER
STATEMENT       - ARITHMETIC ASSIGNMENT AND STRING EQUATE PROCE  22-AUG-1978 01:26:10   VAX-11 MACRO X0.3-11               Page   4
01              EVALUATE ARITHMETIC ASSIGNMENT STATEMENT                                                                         (1)

            55            51     D0  009A   156 	MOVL	R1,R5			;SAVE LENGTH OF SYMBOL STRING
                          55     D7  009D   157 20$:	DECL	R5			;ANY MORE CHARACTERS TO COPY?
                          08     19  009F   158 	BLSS	30$			;IF LSS NO
            50            82     9A  00A1   159 	MOVZBL	(R2)+,R0		;GET NEXT SYMBOL CHARACTER
                                     00A4   160 	PUTCHAR				;PUT CHARACTER IN COMMAND BUFFER
                          F4     11  00A7   161 	BRB	20$			;
            5A            51     C3  00A9   162 30$:	SUBL3	R1,R10,R5		;CALCULATE NUMBER OF EXTENSION CHARACTERS
                          55         00AC       
                          0B     15  00AD   163 	BLEQ	50$			;IF LEQ NO EXTENSION REQUIRED
            51            5A     D0  00AF   164 	MOVL	R10,R1			;SET LENGTH OF RESULTANT STRING
                          50     D4  00B2   165 40$:	CLRL	R0			;CLEAR EXTENSION BYTE
                                     00B4   166 	PUTCHAR				;PUT CHARACTER IN COMMAND BUFFER
            F8            55     F5  00B7   167 	SOBGTR	R5,40$			;ANY MORE EXTENSION CHARACTERS?
            52       FE37 CD     9E  00BA   168 50$:	MOVAB	WRK_AB_BUFFER+255(FP),R2 ;GET ADDRESS OF NEW SYMBOL VALUE
            58            8E     F0  00BF   169 	INSV	(SP)+,R8,R7,(R2)	;INSERT BIT FIELD SUBSTRING
            62            57         00C2       
                          38     BA  00C4   170 	POPR	#^M<R3,R4,R5>		;RETRIEVE SYMBOL PARAMETERS
                                     00C6   171 	ALLOCSYM			;ALLOCATE AND INSERT SYMBOL IN TABLE
                          2A     11  00C9   172 	BRB	70$			;
                     FF31 CF     9F  00CB   173 60$:	PUSHAB	CONTROLFMT		;BUILD FORMAT CONTROL STRING DESCRIPTOR
                          03     DD  00CF   174 	PUSHL	#CONTROLEND-CONTROLFMT	;
            52            5E     D0  00D1   175 	MOVL	SP,R2			;SET ADDRESS OF CONTROL STRING DESCRIPTOR
            5E            10     C2  00D4   176 	SUBL	#16,SP			;ALLOCATE SPACE TO STORE CONVERTED VALUE
                          6E     9F  00D7   177 	PUSHAB	(SP)			;BUILD CONVERSION BUFFER DESCRIPTOR
                          10     DD  00D9   178 	PUSHL	#16			;
            50            5E     D0  00DB   179 	MOVL	SP,R0			;SET ADDRESS OF CONVERSION BUFFER DESCRIPTOR
                                     00DE   180 	$FAO_S	(R2),(R0),(R0),R1	;CONVERT RESULT VALUE TO ASCII
                          06     BA  00ED   181 	POPR	#^M<R1,R2>		;RETRIEVE VALUE PARAMETERS
                                     00EF   182 	ALLOCSYM			;ALLOCATE AND INSERT SYMBOL IN TABLE
            5E            18     C0  00F2   183 	ADDL	#24,SP			;REMOVE CONVERTED VALUE FROM STACK
         FA AD            02     A8  00F5   184 70$:	BISW	#WRK_M_COMMAND,WRK_W_FLAGS(FP) ;SET COMMAND EXECUTION IN PROGRESS
            08            50     E9  00F9   185 80$:	BLBC	R0,90$			;IF LBC SYMBOL ALLOCATION ERROR
                                     00FC   186 	SETCHAR				;PEEK AT NEXT CHARACTER IN INPUT BUFFER
                          04     12  00FF   187 	BNEQ	SYMDEL			;IF NEQ INVALID SYMBOL DELIMITER
                                     0101   188 	STATUS	NORMAL			;SET NORMAL COMPLETION
                                 05  0104   189 90$:	RSB				;
                                     0105   190  
                                     0105   191 ;
                                     0105   192 ; INVALID SYMBOL DELIMITER
                                     0105   193 ;
                                     0105   194  
                                     0105   195 SYMDEL:	STATUS	SYMDEL			;SET INVALID SYMBOL DELIMITER
                                 05  0109   196 	RSB				;
STATEMENT       - ARITHMETIC ASSIGNMENT AND STRING EQUATE PROCE  22-AUG-1978 01:26:10   VAX-11 MACRO X0.3-11               Page   5
01              PROCESS STRING EQUATE STATEMENT                                                                                  (1)

                                     010A   198 	.SBTTL	PROCESS STRING EQUATE STATEMENT
                                     010A   199 ;+
                                     010A   200 ; DCL$EQUATE - PROCESS STRING EQUATE STATEMENT
                                     010A   201 ;
                                     010A   202 ; THIS ROUTINE IS CALLED TO PROCESS A STRING EQUATE STATEMENT.
                                     010A   203 ;
                                     010A   204 ; INPUTS:
                                     010A   205 ;
                                     010A   206 ;	R0 = TERMINATOR CHARACTER.
                                     010A   207 ;	R1 = LENGTH OF SYMBOL NAME.
                                     010A   208 ;	R2 = ADDRESS OF SYMBOL NAME.
                                     010A   209 ;	R6 = COMMAND BUFFER DISPLAY PARAMETER.
                                     010A   210 ;	R9 = ADDRESS OF NEXT BYTE IN COMMAND BUFFER.
                                     010A   211 ;	R10 = RESULT PARSE DESCRIPTOR TABLE POINTER.
                                     010A   212 ;	R11 = BASE ADDRESS OF PROCESS WORK AREA.
                                     010A   213 ;	FP = BASE ADDRESS OF COMMAND WORK AREA.
                                     010A   214 ;
                                     010A   215 ; OUTPUTS:
                                     010A   216 ;
                                     010A   217 ;	R0 LOW BIT CLEAR INDICATES SYMBOL ALLOCATION FAILURE.
                                     010A   218 ;
                                     010A   219 ;		R0 = DCL$_INSYMB - INVALID SYMBOL CHARACTER.
                                     010A   220 ;		R0 = DCL$_SYMDEL - INVALID SYMBOL DELIMITER.
                                     010A   221 ;		R0 = DCL$_SYMOVF - SYMBOL TABLE OVERFLOW.
                                     010A   222 ;
                                     010A   223 ;	R0 LOW BIT SET INDICATES SUCCESSFUL ALLOCATION.
                                     010A   224 ;
                                     010A   225 ;		R0 = DCL$_NORMAL - NORMAL COMPLETION.
                                     010A   226 ;-
                                     010A   227  
                                     010A   228 DCL$EQUATE::				;PROCESS STRING EQUATE STATEMENT
                          5A     D4  010A   229 	CLRL	R10			;CLEAR SUBSTRING INDICATOR
                                     010C   230 EQUATE:					;EQUATE SYMBOL
                                     010C   231 	SETBIT	PRC_V_IND,PRC_W_FLAGS(R11) ;DISABLE INDIRECT FILE RECOGNITION
                          00A3   30  0110   232 	BSBW	CHECKSYM		;CHECK SYMBOL AND SAVE PARAMETERS
            52            59     D0  0113   233 	MOVL	R9,R2			;COPY CURRENT PLACE IN COMMAND BUFFER
                                     0116   234 	MOVCHAR				;COPY NEXT CHARACTER INTO COMMAND BUFFER
                          0C     13  0119   235 	BEQL	30$			;IF EQL NULL LINE
            50            20     91  011B   236 	CMPB	#^A/ /,R0		;WAS IT A BLANK?
                          02     12  011E   237 	BNEQ	20$			;IF NEQ NO
                          52     D6  0120   238 	INCL	R2			;IGNORE LEADING BLANK
                                     0122   239 20$:	MOVCHAR				;COPY NEXT CHARACTER INTO THE BUFFER
                          FB     12  0125   240 	BNEQ	20$			;BR BACK IF NOT END OF LINE
            59            52     C3  0127   241 30$:	SUBL3	R2,R9,R1		;CALCULATE LENGTH OF SYMBOL TEXT
                          51         012A       
                          51     D7  012B   242 	DECL	R1			;SUBTRACT OUT EOL
                          03     13  012D   243 	BEQL	40$			;IF EQL NULL STRING VALUE
                                     012F   244 	COMPSTRING			;COMPRESS QUOTED STRING
            67            5A     E9  0132   245 40$:	BLBC	R10,120$		;IF LBC NO SUBSTRING SPECIFIED
            7E            51     7D  0135   246 	MOVQ	R1,-(SP)		;SAVE EQUIVALENCE STRING PARAMETERS
            51         08 AE     7D  0138   247 	MOVQ	8(SP),R1		;RETRIEVE SYMBOL NAME PARAMETERS
                                     013C   248 	SEARCH				;SEARCH FOR SYMBOL
            59       FE37 CD     9E  013F   249 	MOVAB	WRK_AB_BUFFER+255(FP),R9 ;RELOAD ADDRESS OF COMMAND BUFFER
            56            59     D0  0144   250 	MOVL	R9,R6			;SAVE STARTING ADDRESS OF VALUE STRING
                          5A     D4  0147   251 	CLRL	R10			;CLEAR STRING POSITION COUNT
            58            5A     D1  0149   252 50$:	CMPL	R10,R8			;SUBSTRING POSITION REACHED?
                          13     13  014C   253 	BEQL	70$			;IF EQL YES
STATEMENT       - ARITHMETIC ASSIGNMENT AND STRING EQUATE PROCE  22-AUG-1978 01:26:10   VAX-11 MACRO X0.3-11               Page   6
01              PROCESS STRING EQUATE STATEMENT                                                                                  (1)

            50            20     9A  014E   254 	MOVZBL	#^A/ /,R0		;ASSUME NO INPUT CHARACTERS LEFT
                          51     D5  0151   255 	TSTL	R1			;ANY MORE CHARACTERS IN INPUT STRING
                          05     13  0153   256 	BEQL	60$			;IF EQL NO
                          51     D7  0155   257 	DECL	R1			;REDUCE NUMBER OF CHARACTERS REMAINING
            50            82     9A  0157   258 	MOVZBL	(R2)+,R0		;GET NEXT CHARACTER FROM INPUT STRING
                                     015A   259 60$:	PUTCHAR				;PUT CHARACTER IN COMMAND BUFFER
                          5A     D6  015D   260 	INCL	R10			;INCREMENT STRING POSITION
                          E8     11  015F   261 	BRB	50$			;
            58            57     C0  0161   262 70$:	ADDL	R7,R8			;CALCULATE POSITION BEYOND SUBSTRING
            53            8E     7D  0164   263 	MOVQ	(SP)+,R3		;RETRIEVE SUBSTRING PARAMETERS
            52            57     C0  0167   264 	ADDL	R7,R2			;CALCULATE ADDRESS OF NEXT CHARACTER
            51            57     C2  016A   265 	SUBL	R7,R1			;REDUCE NUMBER OF CHARACTERS REMAINING
                          02     18  016D   266 	BGEQ	80$			;IF GEQ MORE CHARACTERS IN INPUT STRING
                          51     D4  016F   267 	CLRL	R1			;CLEAR NUMBER OF CHARACTERS REMAINING
            58            5A     D1  0171   268 80$:	CMPL	R10,R8			;END OF SUBSTRING?
                          13     13  0174   269 	BEQL	100$			;IF EQL YES
            50            20     9A  0176   270 	MOVZBL	#^A/ /,R0		;ASSUME NO MORE CHARACTERS IN SUBSTRING
                          53     D5  0179   271 	TSTL	R3			;ANY MORE CHARACTERS IN SUBSTRING?
                          05     13  017B   272 	BEQL	90$			;IF EQL NO
                          53     D7  017D   273 	DECL	R3			;REDUCE NUMBER OF CHARACTERS IN SUBSTRING
            50            84     9A  017F   274 	MOVZBL	(R4)+,R0		;GET NEXT CHARACTER FROM SUBSTRING
                                     0182   275 90$:	PUTCHAR				;PUT CHARACTER IN COMMAND BUFFER
                          5A     D6  0185   276 	INCL	R10			;INCREMENT STRING POSITION
                          E8     11  0187   277 	BRB	80$			;
                          51     D7  0189   278 100$:	DECL	R1			;ANY MORE CHARACTERS IN INPUT STRING?
                          08     19  018B   279 	BLSS	110$			;IF LSS NO
            50            82     9A  018D   280 	MOVZBL	(R2)+,R0		;GET NEXT CHARACTER FROM INPUT STRING
                                     0190   281 	PUTCHAR				;PUT CHARACTER IN COMMAND BUFFER
                          F4     11  0193   282 	BRB	100$			;
            59            56     C3  0195   283 110$:	SUBL3	R6,R9,R1		;CALCULATE LENGTH OF RESULTANT STRING
                          51         0198       
            52            56     D0  0199   284 	MOVL	R6,R2			;SET ADDRESS OF RESULTANT STRING
                          38     BA  019C   285 120$:	POPR	#^M<R3,R4,R5>		;RETRIEVE SYMBOL PARAMETERS
         FF 8F            51     91  019E   286 	CMPB	R1,#255			;STRING TO LONG
                          04     1B  01A2   287 	BLEQU	130$			;IF LEQU NO
            51         FF 8F     9A  01A4   288 	MOVZBL	#255,R1			;TRUNCATE TO MAXIMUM LENGTH
                                     01A8   289 130$:	ALLOCSYM			;ALLOCATE AND INSERT ENTRY IN SYMBOL TABLE
         FA AD            02     A8  01AB   290 	BISW	#WRK_M_COMMAND,WRK_W_FLAGS(FP) ;SET COMMAND EXECUTION IN PROGRESS
            03            50     E9  01AF   291 	BLBC	R0,140$			;IF LBC ERROR
                                     01B2   292 	STATUS	NORMAL			;SET NORMAL COMPLETION STATUS
                                 05  01B5   293 140$:	RSB				;
STATEMENT       - ARITHMETIC ASSIGNMENT AND STRING EQUATE PROCE  22-AUG-1978 01:26:10   VAX-11 MACRO X0.3-11               Page   7
01              LOCAL SUBROUTINES                                                                                                (1)

                                     01B6   295 	.SBTTL	LOCAL SUBROUTINES
                                     01B6   296 ;
                                     01B6   297 ; CHECKSYM - CHECK SYMBOL AND SAVE PARAMETERS
                                     01B6   298 ;
                                     01B6   299  
                                     01B6   300 CHECKSYM:				;CHECK SYMBOL
                          10     BA  01B6   301 	POPR	#^M<R4>			;REMOVE RETURN ADDRESS FROM STACK
                          0096   30  01B8   302 	BSBW	DCL$CHKALPHA		;VERIFY IT IS VALID
            28            50     E9  01BB   303 	BLBC	R0,30$			;BR IF INVALID FIRST CHARACTER
   000000FF 8F            51     D1  01BE   304 	CMPL	R1,#255			;SYMBOL NAME TO LARGE
                          1F     1A  01C5   305 	BGTRU	30$			;IF GTRU YES
            53         38 AB     9E  01C7   306 10$:	MOVAB	PRC_Q_LOCAL(R11),R3	;ASSUME LOCAL SYMBOL TABLE
                                     01CB   307 	MOVCHAR				;MOVE CHARACTER TO COMMAND BUFFER
                                     01CE   308 	SETCHAR				;PEEK AT NEXT CHARACTER IN INPUT BUFFER
            50            3D     91  01D1   309 	CMPB	#^A/=/,R0		;ANOTHER EQUAL SIGN?
                          07     12  01D4   310 	BNEQ	20$			;IF NEQ NO
                                     01D6   311 	MOVCHAR				;MOVE CHARACTER TO COMMAND BUFFER
            53         28 AB     9E  01D9   312 	MOVAB	PRC_Q_GLOBAL(R11),R3	;SET FOR GLOBAL SYMBOL TABLE
                          0E     BB  01DD   313 20$:	PUSHR	#^M<R1,R2,R3>		;SAVE SYMBOL PARAMETERS
                                     01DF   314 	DISABLE				;DISABLE CONTROL Y/C AST'S
                          8E     7C  01E2   315 	CLRQ	(SP)+			;REMOVE RETURN INFORMATION FROM STACK
                          64     17  01E4   316 	JMP	(R4)			;
                                     01E6   317  
                                     01E6   318 ;
                                     01E6   319 ; INVALID SYMBOL CHARACTER
                                     01E6   320 ;
                                     01E6   321  
                                     01E6   322 30$:	STATUS	IVSYMB			;SET INVALID SYMBOL CHARACTER
                                 05  01E9   323 	RSB				;
                                     01EA   324  
                                     01EA   325 ;
                                     01EA   326 ; GETARG - GET ARGUMENT VALUE
                                     01EA   327 ;
                                     01EA   328  
                                     01EA   329 GETARG:					;
                                     01EA   330 	MOVTOKN				;MOVE TERMINATOR AND GET NEXT TOKEN
            56            59     D0  01ED   331 	MOVL	R9,R6			;UPDATE DISPLAY PARAMETER
         00 BE            50     91  01F0   332 	CMPB	R0,@(SP)		;CORRECT TERMINATOR?
                          42     12  01F4   333 	BNEQ	40$			;IF NEQ NO
                          6E     D6  01F6   334 	INCL	(SP)			;STEP OVER TERMINATOR CHARACTER
            55            62     9A  01F8   335 	MOVZBL	(R2),R5			;GET STARTING CHARACTER OF STRING
                                     01FB   336 	COMPSTRING			;COMPRESS STRING
                          1A     13  01FE   337 	BEQL	20$			;IF EQL NULL STRING
            55            22     91  0200   338 	CMPB	#^A/"/,R5		;LITERAL STRING?
                          15     13  0203   339 	BEQL	20$			;IF EQL YES
            62            25     91  0205   340 	CMPB	#^A/%/,(R2)		;PERCENT ESCAPE?
                          10     13  0208   341 	BEQL	20$			;IF EQL YES
            62            30     91  020A   342 	CMPB	#^A/0/,(R2)		;POSSIBLY NUMERIC LITERAL?
                          05     1A  020D   343 	BGTRU	10$			;IF GTRU NO
            62            39     91  020F   344 	CMPB	#^A/9/,(R2)		;POSSIBLY NUMERIC LITERAL?
                          06     1E  0212   345 	BGEQU	20$			;IF GEQU YES
                                     0214   346 10$:	SEARCH				;SEARCH FOR SYMBOL
            24            50     E9  0217   347 	BLBC	R0,50$			;IF LBC UNDEFINED SYMBOL
            7E            51     7D  021A   348 20$:	MOVQ	R1,-(SP)		;SAVE VALUE PARAMETERS
            52            51     7D  021D   349 	MOVQ	R1,R2			;SET UP ARGUMENTS FOR CONVERSION
                                     0220   350 	CNVNUMDEC			;CONVERT DECIMAL NUMBER
                          0F     13  0223   351 	BEQL	30$			;IF EQL SUCCESSFUL CONVERSION
STATEMENT       - ARITHMETIC ASSIGNMENT AND STRING EQUATE PROCE  22-AUG-1978 01:26:10   VAX-11 MACRO X0.3-11               Page   8
01              LOCAL SUBROUTINES                                                                                                (1)

            52            6E     7D  0225   352 	MOVQ	(SP),R2			;RETRIEVE VALUE PARAMETERS
            04            63     3A  0228   353 	LOCC	(R3),#4,TRUFLS		;BOOLEAN VARIABLE?
                     FDD5 CF         022B       
                          14     13  022E   354 	BEQL	60$			;IF EQL NO
            50            06     CB  0230   355 	BICL3	#6,R0,R1		;CONVERT COUNT TO BOOLEAN VALUE
                          51         0233       
            5E            08     C0  0234   356 30$:	ADDL	#8,SP			;REMOVE VALUE PARAMETERS FROM STACK
                                 05  0237   357 	RSB				;
                                     0238   358  
                                     0238   359 ;
                                     0238   360 ; INVALID SYMBOL DELIMITER
                                     0238   361 ;
                                     0238   362  
                                     0238   363 40$:	STATUS	SYMDEL			;SET INVALID SYMBOL DELIMITER STATUS
                          10     11  023C   364 	BRB	70$			;
                                     023E   365  
                                     023E   366 ;
                                     023E   367 ; UNDEFINED SYMBOL
                                     023E   368 ;
                                     023E   369  
                                     023E   370 50$:	STATUS	UNDSYM			;SET UNDEFINED SYMBOL STATUS
                          0A     11  0242   371 	BRB	70$			;
                                     0244   372  
                                     0244   373 ;
                                     0244   374 ; INVALID CHARACTER IN CONVERSION STRING
                                     0244   375 ;
                                     0244   376  
            55            8E     7D  0244   377 60$:	MOVQ	(SP)+,R5		;RETRIEVE VALUE PARAMETERS
            56            55     C1  0247   378 	ADDL3	R5,R6,R9		;CALCULATE ENDING ADDRESS OF STRING
                          59         024A       
                                     024B   379 	STATUS	IVCHAR			;SET INVALID CHARACTER STATUS
                          8E     D5  024E   380 70$:	TSTL	(SP)+			;REMOVE RETURN ADDRESS FROM STACK
                                 05  0250   381 	RSB				;
STATEMENT       - ARITHMETIC ASSIGNMENT AND STRING EQUATE PROCE  22-AUG-1978 01:26:10   VAX-11 MACRO X0.3-11               Page   9
01              CHECK A CHARACTER FOR VALID ALPHA                                                                                (1)

                                     0251   383 	.SBTTL	CHECK A CHARACTER FOR VALID ALPHA
                                     0251   384 ;+
                                     0251   385 ; DCL$CHKALPHA - CHECK A CHARACTER FOR VALID ALPHA
                                     0251   386 ;
                                     0251   387 ; THIS ROUTINE CHECKS THAT THE CHARACTER POINTED TO BY R2 IS VALID
                                     0251   388 ; FIRST CHARACTER FOR A SYMBOL.
                                     0251   389 ;
                                     0251   390 ; INPUTS:
                                     0251   391 ;
                                     0251   392 ;	R2 = ADDRESS OF CHARACTER
                                     0251   393 ;
                                     0251   394 ; OUTPUT:
                                     0251   395 ;
                                     0251   396 ;	R0 LOW BIT CLEAR IS NOT ACCEPTABLE
                                     0251   397 ;	R1 LOW BIT SET IS ACCEPATBLE CHARACTER
                                     0251   398 ;-
                                     0251   399  
                                     0251   400 DCL$CHKALPHA::				; CHAECK VALID ALPHA
                          50     D4  0251   401 	CLRL	R0			; ASSUME INVALID
            24            62     91  0253   402 	CMPB	(R2),#^A/$/		; NOW TRY FOR DOLLAR SIGN
                          12     13  0256   403 	BEQL	10$			; BR IF THAT MATCHES
         41 8F            62     91  0258   404 	CMPB	(R2),#^A/A/		; CHECK LOW LIMIT FOR ALPHA
                          0E     1F  025C   405 	BLSSU	20$			; BR IF FAILED
         5A 8F            62     91  025E   406 	CMPB	(R2),#^A/Z/		; NOW CHECK HI LIMIT
                          06     1B  0262   407 	BLEQU	10$			; BR IF VALID CHARACTER
         5F 8F            62     91  0264   408 	CMPB	(R2),#^A/_/		; TRY PSEUDO ALPHA
                          02     12  0268   409 	BNEQ	20$			; BR IF NOT VALID
                          50     D6  026A   410 10$:	INCL	R0			; SET SUCESSFUL STATUS
                                 05  026C   411 20$:	RSB				; RETURN WITH STATUS
                                     026D   412  
                                     026D   413 	.END
STATEMENT       - ARITHMETIC ASSIGNMENT AND STRING EQUATE PROCE  22-AUG-1978 01:26:10   VAX-11 MACRO X0.3-11               Page  10
SYMBOL TABLE                                                                                                                     (1)

$$T2           = 00000004            CLI$_ONLEVL    = 00038100            PRC_L_ERRRAB     00000010            
BIT...         = 0003FFE9            CLI$_ONOVF     = 00038108            PRC_L_EXMDEPADR  0000008C            
CHECKSYM         000001B6 R     03   CLI$_OVRFLW    = 00038160            PRC_L_EXTARG     00000078            
CLI$_ABFNAM    = 000381B8            CLI$_PARMDEL   = 00038110            PRC_L_EXTBLK     00000070            
CLI$_ABKEYW    = 00038000            CLI$_PROC_ID   = 0003FFF1            PRC_L_EXTCOD     00000080            
CLI$_ABVERB    = 00038008            CLI$_QUEJOBCRE = 0003FFF9            PRC_L_EXTHND     00000074            
CLI$_BADRET    = 00038198            CLI$_REQPRMABS = 00038812            PRC_L_EXTPRM     0000007C            
CLI$_BADTEXT   = 000381B0            CLI$_RSLOVF    = 00038118            PRC_L_INDEPTH    00000048            
CLI$_BUFOVF    = 00038018            CLI$_SKPDAT    = 00038120            PRC_L_INDFAB     0000001C            
CLI$_COMPLX    = 00038020            CLI$_SPARE0    = 00038010            PRC_L_INDINPRAB  00000014            
CLI$_CONFQUAL  = 00038802            CLI$_SPARE1    = 00038058            PRC_L_INDOUTRAB  00000018            
CLI$_CREQUEJOB = 0003884A            CLI$_STKOVF    = 00038128            PRC_L_INPRAB     00000008            
CLI$_DEFOVF    = 00038028            CLI$_SUBMITERR = 00038852            PRC_L_LSTSTATUS  00000094            
CLI$_DEVALSPL  = 0003885A            CLI$_SYMDEL    = 00038130            PRC_L_ONCTLY     0000009C            
CLI$_DEVNOTFOR = 0003887A            CLI$_SYMOVF    = 00038138            PRC_L_ONERROR    00000058            
CLI$_DEVNOTSPL = 00038862            CLI$_UNDFIL    = 00038188            PRC_L_OUTRAB     0000000C            
CLI$_DIRECT    = 00038030            CLI$_UNDSYM    = 00038140            PRC_L_PROCUIC    00000098            
CLI$_EXPSYN    = 00038038            CLI$_UNPROPARM = 00038170            PRC_L_SAVAP      00000000            
CLI$_FILOPN    = 00038190            CLI$_UNPROQUAL = 00038168            PRC_L_SAVFP      00000004            
CLI$_ILLVAL    = 0003883A            CLI$_USGOTO    = 00038148            PRC_L_SEVERITY   00000040            
CLI$_IMCHNG    = 00038040            CLI$_VALCNVERR = 00038832            PRC_L_STACKLM    00000088            
CLI$_IMGFNF    = 00038872            CLI$_VALREQ    = 00038150            PRC_L_STACKPT    00000084            
CLI$_INSFPRM   = 00038048            CMDBUFSIZ      = 000001FC            PRC_L_STATUS     00000044            
CLI$_INVKEY    = 00038178            CONTROLEND       00000003 R     03   PRC_L_SYMBOL     0000004C            
CLI$_INVQUAL   = 0003880A            CONTROLFMT       00000000 R     03   PRC_M_CNTRLY   = 00000002            
CLI$_INVQUALNUM= 0003881A            DCL$ALLOCSYM     ********   X   03   PRC_M_DBGQUAL  = 00000200            
CLI$_INVREQTYP = 00038822            DCL$CHKALPHA     00000251 RG    03   PRC_M_DBGTRUE  = 00000400            
CLI$_INVRSP    = 00038180            DCL$CNVNUMDEC    ********   X   03   PRC_M_DISABL   = 00000004            
CLI$_INVUIC    = 000381A8            DCL$COMPSTRING   ********   X   03   PRC_M_EXIT     = 00000008            
CLI$_IVCHAR    = 00038050            DCL$DISABLE      ********   X   03   PRC_M_GOEOF    = 00000001            
CLI$_IVDEVTYPE = 0003886A            DCL$EQUATE       0000010A RG    03   PRC_M_GOTO     = 00000010            
CLI$_IVFNAM    = 000381C0            DCL$EVALUATE     0000005C RG    03   PRC_M_HANGUP   = 00001000            
CLI$_IVKEYW    = 00038060            DCL$EXPRESS      ********   X   03   PRC_M_IND      = 00000020            
CLI$_IVOPER    = 00038068            DCL$MOVCHAR      ********   X   03   PRC_M_MODE     = 00000040            
CLI$_IVPROT    = 00038070            DCL$MOVTOKN      ********   X   03   PRC_M_NOCTLY   = 00004000            
CLI$_IVQLOC    = 00038078            DCL$PUTCHAR      ********   X   03   PRC_M_PAUSE    = 00002000            
CLI$_IVSYMB    = 00038080            DCL$SEARCH       ********   X   03   PRC_M_USRDET   = 00000100            
CLI$_IVVALU    = 00038088            DCL$SETCHAR      ********   X   03   PRC_M_VERIFY   = 00000080            
CLI$_IVVERB    = 00038090            DCL$SUBASSIGN    00000007 RG    03   PRC_M_YLEVEL   = 00000800            
CLI$_MAXPARM   = 00038098            EQUATE           0000010C R     03   PRC_Q_ALLOCREG   00000020            
CLI$_MULKEY    = 000381A0            EVALUATE         0000005E R     03   PRC_Q_GLOBAL     00000028            
CLI$_NOATFIL   = 000380A0            GBL...         = 00000000            PRC_Q_LABEL      00000030            
CLI$_NOCCAT    = 000380A8            GETARG           000001EA R     03   PRC_Q_LOCAL      00000038            
CLI$_NOCOMD    = 000380B0            INPBUFSIZ      = 00000084            PRC_V_CNTRLY   = 00000001            
CLI$_NOKEYW    = 000380B8            MSGBUFSIZ      = 00000084            PRC_V_DBGQUAL  = 00000009            
CLI$_NOLIST    = 000380C0            PRC_B_DEFRADIX   00000092            PRC_V_DBGTRUE  = 0000000A            
CLI$_NOOPTPRS  = 00038842            PRC_B_EXMDEPMOD  00000091            PRC_V_DISABL   = 00000002            
CLI$_NOQUAL    = 000380C8            PRC_B_EXMDEPWID  00000090            PRC_V_EXIT     = 00000003            
CLI$_NORMAL    = 00030001            PRC_K_DEC      = 00000001            PRC_V_GOEOF    = 00000000            
CLI$_NOTNEG    = 000380D8            PRC_K_HEX      = 00000000            PRC_V_GOTO     = 00000004            
CLI$_NOVALU    = 000380D0            PRC_K_LENGTH     000000A0            PRC_V_HANGUP   = 0000000C            
CLI$_NOVALUE   = 0003882A            PRC_K_OCT      = 00000002            PRC_V_IND      = 00000005            
CLI$_NULFIL    = 000380E0            PRC_L_CLIWRK0    0000005C            PRC_V_MODE     = 00000006            
CLI$_NUMBER    = 000380E8            PRC_L_CLIWRK1    00000060            PRC_V_NOCTLY   = 0000000E            
CLI$_ONCOMD    = 000380F0            PRC_L_CLIWRK2    00000064            PRC_V_PAUSE    = 0000000D            
CLI$_ONERR     = 000380F8            PRC_L_CLIWRK3    00000068            PRC_V_USRDET   = 00000008            
CLI$_ONEVAL    = 00038158            PRC_L_CLIWRK4    0000006C            PRC_V_VERIFY   = 00000007            
STATEMENT       - ARITHMETIC ASSIGNMENT AND STRING EQUATE PROCE  22-AUG-1978 01:26:10   VAX-11 MACRO X0.3-11               Page  11
SYMBOL TABLE                                                                                                                     (1)

PRC_V_YLEVEL   = 0000000B            
PRC_W_CLIFLAG    00000052            
PRC_W_ERRIFI     00000052            
PRC_W_FLAGS      00000054            
PRC_W_INPCHAN    00000050            
PRC_W_ONLEVEL    00000056            
RSLBUFSIZ      = 00000180            
SYMDEL           00000105 R     03   
SYS$FAO          ********   X   03   
TRUFLS           00000003 R     03   
WRK_AB_BUFFER    FFFFFD38            
WRK_AG_RESULT    FFFFFBB4            
WRK_B_VERBTYP    FFFFFFC0            
WRK_K_LENGTH     FFFFFBB4            
WRK_L_CHARPTR    FFFFFFFC            
WRK_L_CMDOUT     FFFFFFBC            
WRK_L_IMAGE      FFFFFFEC            
WRK_L_MAXPARM    FFFFFFE4            
WRK_L_MINPARM    FFFFFFE8            
WRK_L_PARMCNT    FFFFFFF0            
WRK_L_PAROUT     FFFFFFF4            
WRK_L_PROMPT     FFFFFFD0            
WRK_L_PROPTR     FFFFFFDC            
WRK_L_QUABLK     FFFFFFE0            
WRK_L_RSLNXT     FFFFFD34            
WRK_L_SAVAP      FFFFFFC8            
WRK_L_SAVFP      FFFFFFCC            
WRK_L_SAVSP      FFFFFFC4            
WRK_M_COMMAND  = 00000002            
WRK_M_IMCHNG   = 00000004            
WRK_M_INQUIRE  = 00000100            
WRK_M_NOSTAT   = 00000200            
WRK_M_PROMPT   = 00000008            
WRK_M_QUAL     = 00000010            
WRK_M_QUOTE    = 00000020            
WRK_M_RUNDWN   = 00000001            
WRK_M_STAR     = 00000040            
WRK_M_TRAILSPC = 00000400            
WRK_M_VERB     = 00000080            
WRK_Q_IOSB       FFFFFFD4            
WRK_V_COMMAND  = 00000001            
WRK_V_IMCHNG   = 00000002            
WRK_V_INQUIRE  = 00000008            
WRK_V_NOSTAT   = 00000009            
WRK_V_PROMPT   = 00000003            
WRK_V_QUAL     = 00000004            
WRK_V_QUOTE    = 00000005            
WRK_V_RUNDWN   = 00000000            
WRK_V_STAR     = 00000006            
WRK_V_TRAILSPC = 0000000A            
WRK_V_VERB     = 00000007            
WRK_W_FLAGS      FFFFFFFA            
WRK_W_IMGCHAN    FFFFFFF8            
_$$_           = 00000014            


PROGRAM SECTION SYNOPSIS
STATEMENT       - ARITHMETIC ASSIGNMENT AND STRING EQUATE PROCE  22-AUG-1978 01:26:10   VAX-11 MACRO X0.3-11               Page  12
PROGRAM SECTION SYNOPSIS                                                                                                         (1)


.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            FFFFFFFC      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
DCL$ZCODE        0000026D      03     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD  NOWRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
17908. BYTES LEFT IN FREE MEMORY POOL.
536. BYTES OF RECLAIMED MEMORY.
EXE$:STATEMENT,LIS$:STATEMENT/-SP=EXECML$/ML,LIB$:DCL/ML,SRC$:STATEMENT
25 MLB DIR RDS - 410 GETS TO DEFINE 28 MACROS. 29 INTER. FILE WRITES. 
