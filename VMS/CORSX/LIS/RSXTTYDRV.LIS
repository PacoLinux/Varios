RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (2)     176  RSX$TTY_DRV - RSX11M AME TERMINAL I/O DRIVER
   (3)     230  TTY_RPR,TTY_RVB AND TTY_RLB FUNCTIONS
   (4)     314  TTY_WVB AND TTY_WLB FUNCTIONS
   (6)     369  TTY_ATT - ATTACH FUNCTION
   (7)     410  RSX$CTRLCASTEN - ENABLE CONTROL C AST
   (8)     446  TTY_DET DETACH TERMINAL FUNCTION
   (9)     468  RSX$CTRLCDSABL - DISABLE CONTROL C AST
   (10)    495  TTY_SET FUNCTIONS
   (11)    621  TTY_HANG FUNCTION
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page   1
V05.0                                                                                                                            (1)

                                     0000     1 	.TITLE	RSXTTYDRV - VAX/VMS RSX11M AME TERMINAL DRIVER
                                     0000     2 	.IDENT	/V05.0/		;
                                     0000     3 
                                     0000     4 ;
                                     0000     5 ; COPYRIGHT (C) 1977
                                     0000     6 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS 01754
                                     0000     7 ;
                                     0000     8 ; THIS SOFTWARE IS FURNISHED  UNDER A LICENSE FOR USE ONLY ON A SINGLE
                                     0000     9 ; COMPUTER  SYSTEM AND  MAY BE  COPIED ONLY WITH  THE INCLUSION OF THE
                                     0000    10 ; ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,
                                     0000    11 ; MAY NOT BE PROVIDED OR  OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
                                     0000    12 ; EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE
                                     0000    13 ; TERMS.  TITLE TO AND  OWNERSHIP OF THE  SOFTWARE  SHALL AT ALL TIMES
                                     0000    14 ; REMAIN IN DEC.
                                     0000    15 ;
                                     0000    16 ; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE
                                     0000    17 ; AND SHOULD  NOT BE CONSTRUED  AS A COMMITMENT  BY DIGITAL  EQUIPMENT
                                     0000    18 ; CORPORATION.
                                     0000    19 ;
                                     0000    20 ; DEC ASSUMES  NO  RESPONSIBILITY  FOR  THE USE OR  RELIABILITY OF ITS
                                     0000    21 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
                                     0000    22 
                                     0000    23 ;++
                                     0000    24 ; FACILITY:
                                     0000    25 ;
                                     0000    26 ;	VAX/VMS RSX11M AME 
                                     0000    27 ;
                                     0000    28 ; ABSTRACT:
                                     0000    29 ;
                                     0000    30 ;	TERMINAL I/O DRIVER
                                     0000    31 ;
                                     0000    32 ; AUTHOR: R.HEINEN 4-NOV-76
                                     0000    33 ;--
                                     0000    34 ;
                                     0000    35 ; EXTERNAL SYMBOLS
                                     0000    36 ;
                                     0000    37 	$RSXDEF			; DEFINE RSX SYMBOLS
                                     0000    38 	DRERR$			; DEFINE RSX11M DIRECTIVE STATUS CODES
                                     0000    39 	SPCIO$			; DEFINE RSX11M SPECIAL I/O CODES
                                     0000    40 	FILIO$			; DEFINE RSX11M FILE I/O CODES
                                     0000    41 	$DEVDEF			; DEFINE DEVICE CHARACTERISTICS BITS
                                     0000    42 	$TTDEF			; DEFINE TERMINAL SPECIAL SYMBOLS
                                     0000    43 	TTSYM$			; DEFINE RSX TERMINAL CODES
                                     0000    44 ;
                                     0000    45 ; LOCAL SYMBOLS
                                     0000    46 ;
                                     0000    47 ; THESE SYMBOLS DEVICE THE SCRATCH AREA
                                     0000    48 ;
                           00000034  0000    49 I_CHARACTER	=I_SCRATCH+<4*12>+4
                                     0000    50 ;
                                     0000    51 ; LOCAL STORAGE
                                     0000    52 ;
                                 00000000    53 	.PSECT	RSXPURE,NOWRT,NOEXE,LONG
                                     0000    54 SETGETTAB:				; TABLE OF TERMINAL CHARACTERISTIC RELATIONS
                              03 1D  0000    55 	.BYTE	TC.ESQ,TT$V_ESCAPE	;
                              0C 0A  0002    56 	.BYTE	TC.SCP,TT$V_SCOPE	;
                              01 27  0004    57 	.BYTE	TC.NEC,TT$V_NOECHO	;
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page   2
V05.0                                                                                                                            (1)

                              07 15  0006    58 	.BYTE	TC.SMR,TT$V_LOWER	;
                              0E 24  0008    59 	.BYTE	TC.HLD,TT$V_HOLDSCREEN	;
                              20 29  000A    60 	.BYTE	TC.PRI,32		;
                              02 28  000C    61 	.BYTE	TC.SLV,TT$V_NOTYPEAHD	;
                                 00  000E    62 	.BYTE	0			;
                                     000F    63 ;
                                     000F    64 ; TERMINAL READ TERMINATOR TABLE
                                     000F    65 ;
                                     000F    66 TERMINATOR:
                           00000000  000F    67 	.LONG	0			;
                           0C002000  0013    68 	.LONG	<1@13>+<1@26>+<1@27>	; CR,ESC AND ^Z
                                     0017    69 PASSALLTRM:				; PASSALL TERMINATOR SET
                           00000001  0017    70 	.LONG	1			; ONE BYTE ( DRIVER ZERO FILLS )
                           0000000F' 001B    71 	.LONG	TERMINATOR		; ADDRESS A ZERO
                                     001F    72 SPECIALTRM:				; 11M READ WITH SPECIAL TERMINATORS
                           00000010  001F    73 	.LONG	16			;
                           00000027' 0023    74 	.LONG	10$
                           FFFFFFFF  0027    75 10$:	.LONG	-1
                           00000000  002B    76 	.LONG	0
                           00000000  002F    77 	.LONG	0
                           80000000  0033    78 	.LONG	1@31
                                     0037    79 RSX$GL_CARRIAGE::			; CARRIAGE CONTROL CONVERTION
                           20 8D 01  0037    80 	.BYTE	1,128+13,^A/ /		; SPACE
                           30 8D 02  003A    81 	.BYTE	2,128+13,^A/0/		; 0
                           31 8D 8C  003D    82 	.BYTE	128+12,128+13,^A/1/	; 1
                           2B 8D 00  0040    83 	.BYTE	0,128+13,^A/+/		; +
                           24 00 01  0043    84 	.BYTE	1,0,^A/$/		; $
                           00 8D 01  0046    85 	.BYTE	1,128+13,0		; DEFAULT
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page   3
V05.0           RSX$TTY_DRV - RSX11M AME TERMINAL I/O DRIVER                                                                     (2)

                                     0049    87 	.SBTTL	RSX$TTY_DRV - RSX11M AME TERMINAL I/O DRIVER
                                 00000000    88 	.PSECT	RSXCODE,NOWRT
                                     0000    89 ;++
                                     0000    90 ; RSX$TTY_DRV TERMINAL I/O DRIVER
                                     0000    91 ;
                                     0000    92 ; FUNCTIONAL DESCRIPTION:
                                     0000    93 ;
                                     0000    94 ; THIS ROUTINE PROCESSES TERMINAL DIRECTED I/O.
                                     0000    95 ;
                                     0000    96 ; INPUTS:
                                     0000    97 ;
                                     0000    98 ;	R2 = ADDRESS OF THE QIO CONTEXT BLOCK
                                     0000    99 ;	R3 = MAJOR FUNCTION CODE
                                     0000   100 ;	R5 = QIO DPB AREA ADDRESS
                                     0000   101 ;	R6 = IMAGE STACK POINTER
                                     0000   102 ;	R7 = ENTIRE FUNCTION CODE
                                     0000   103 ;	R8 = LUT ADDRESS
                                     0000   104 ;	R10 = ADDRESS OF THE IMAGE IMPURE DATA BASE
                                     0000   105 ;	R11 = ADDRESS OF THE IMAGE
                                     0000   106 ;
                                     0000   107 ; OUTPUTS:
                                     0000   108 ;
                                     0000   109 ;	R6,R10,R11 ARE PRESERVED.
                                     0000   110 ;--
                                     0000   111 RSX$TTY_DRV::				; TERMINAL I/O DRIVER
                                     0000   112 	CASE	R3,<-			;
                                     0000   113 		TTY_KILL,-		; I/O KILL
                                     0000   114 		TTY_WLB,-		; WRITE LOGICAL BLOCK
                                     0000   115 		TTY_RLB,-		; READ LOGICAL BLOCK
                                     0000   116 		TTY_ATT,-		; ATTACH DEVICE
                                     0000   117 		TTY_DET,-		; DETACH DEVICE
                                     0000   118 		TTY_SET,-		; FUNCTION CODE 5
                                     0000   119 		TTY_HANG,-		; FUNCTION CODE 6
                                     0000   120 		RSX$IEIFC,-		; ILLEGAL
                                     0000   121 		RSX$IEIFC,-		; ILLEGAL
                                     0000   122 		TTY_RPR,-		; FUNCTION CODE 9
                                     0000   123 		RSX$IEIFC,-		; ILLEGAL
                                     0000   124 		RSX$DLVRQIOAST,-	; REMOVE FILE NAME
                                     0000   125 		RSX$DLVRQIOAST,-	; ENTER FILE NAME
                                     0000   126 		RSX$DLVRQIOAST,-	; ACCESS FOR READ
                                     0000   127 		RSX$DLVRQIOAST,-	; ACCESS FOR WRITE
                                     0000   128 		RSX$DLVRQIOAST,-	; ACCESS FOR EXTEND
                                     0000   129 		RSX$DLVRQIOAST,-	; DEACCESS
                                     0000   130 		TTY_RVB,-		; READ VIRTUAL BLOCK
                                     0000   131 		TTY_WVB,-		; WRITE VIRTUAL BLOCK
                                     0000   132 		RSX$DLVRQIOAST,-	; EXTEND FILE
                                     0000   133 		RSX$DLVRQIOAST,-	; CREATE FILE
                                     0000   134 		RSX$DLVRQIOAST,-	; DELETE FILE
                                     0000   135 		RSX$DLVRQIOAST,-	; READ ATTRIBUTES
                                     0000   136 		RSX$DLVRQIOAST,-	; WRITE ATTRIBUTES
                                     0000   137 		RSX$DLVRQIOAST,-	; ACP CONTROL
                                     0000   138 		>
                          FFC7'  31  0036   139 	BRW	RSX$IEIFC		; ILLEGAL FUNCTION
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page   4
V05.0           TTY_RPR,TTY_RVB AND TTY_RLB FUNCTIONS                                                                            (3)

                                     0039   141 	.SBTTL	TTY_RPR,TTY_RVB AND TTY_RLB FUNCTIONS
                                     0039   142 	.ENABL	LSB
                                     0039   143 ;
                                     0039   144 ; READ PROMPT FUNCTION
                                     0039   145 ;
                                     0039   146 TTY_RPR:				; TERMINAL READ PROMPT
         0C AA       0000'8F     3C  0039   147 	MOVZWL	#IO$_READPROMPT,I_SCRATCH+12(R10); ASSUME PROMPTED READ
         2C AA         06 A5     3C  003F   148 	MOVZWL	6(R5),I_SCRATCH+44(R10)	; INSERT PROMPT ADDRESS
         30 AA         08 A5     3C  0044   149 	MOVZWL	8(R5),I_SCRATCH+48(R10)	; INSERT SIZE OF PROMPT
         24 AA         04 A5     3C  0049   150 	MOVZWL	4(R5),I_SCRATCH+36(R10)	; INSERT TIMEOUT COUNT
                          18     13  004E   151 	BEQL	10$			; IF EQL THEN NO TIMEOUT
         0C AA       0000'8F     A8  0050   152 	BISW	#IO$M_TIMED,I_SCRATCH+12(R10)
                          10     11  0056   153 	BRB	10$			; CONTINUE IN COMMON
                                     0058   154 ;
                                     0058   155 ; READ VIRTUAL FUNCTIONS
                                     0058   156 ;
                                     0058   157 TTY_RVB:				; TERMINAL READ VIRTUAL
                          57     94  0058   158 	CLRB	R7			; REMOVE SUBFUNCTION BITS
         0C AA       0000'8F     3C  005A   159 	MOVZWL	#IO$_READVBLK,I_SCRATCH+12(R10); SET UP FUNCTION CODE
                          06     11  0060   160 	BRB	10$			; CONTINUE IN COMMON
                                     0062   161 ;
                                     0062   162 ; READ LOGICAL FUNCTION
                                     0062   163 ;
                                     0062   164 TTY_RLB:				; READ LOGICAL
         0C AA       0000'8F     3C  0062   165 	MOVZWL	#IO$_READLBLK,I_SCRATCH+12(R10); SET UP FUNCTION CODE
                                     0068   166 10$:					; ENTRY FROM READ PROMPT CODE IN IOFC9
         0A A8            01     E1  0068   167 	BBC	#LUTV_TI,LUT_FLAGS(R8),15$; BR IF NOT TI
                          12         006C       
            58       0000'CF     9E  006D   168 	MOVAB	W^RSX$A_TIIDEV,R8	; ASSUME TI INPUT
         16 A2            58     D0  0072   169 	MOVL	R8,QIO_LUT(R2)		; SAVE IN LUT
            01         18 A8     91  0076   170 	CMPB	LUT_TYPE(R8),#LUTC_TRM	; STILL TERMINAL?
                          03     13  007A   171 	BEQL	15$			; IF EQL THEN CONTINUE
                          FF81'  31  007C   172 	BRW	RSX$RMS_DRV		; TREAT AS RMS
                                     007F   173 ;
                                     007F   174 ; CLEAR CONTROL O CANCEL ON TERMINAL
                                     007F   175 ;
         0A A8            00     E5  007F   176 15$:	BBCC	#LUTV_CTRLO,LUT_FLAGS(R8),20$; CLEAR CONTROL O
                          00         0083       
                                     0084   177 ;
                                     0084   178 ; ASSUME NORMAL RSX TERMINATORS
                                     0084   179 ;
         28 AA       000F'CF     9E  0084   180 20$:	MOVAB	W^TERMINATOR,I_SCRATCH+40(R10); INSERT ADDRESS OF TERMINATOR BITMASK
                                     008A   181 ;
                                     008A   182 ; TERMINAL SUBFUNCTIONS
                                     008A   183 ;
                                     008A   184 ; READ - SPECIAL TERMINATORS - IO.RST
                                     008A   185 ;
            57            01     93  008A   186 	BITB	#<IO.RST&^X0FF>,R7	; READ SPECIAL TERMINATORS?
                          0E     13  008D   187 	BEQL	30$			; IF EQL THEN NO
                                     008F   188 ;
                                     008F   189 ; SET UP SPECIAL TERMINATORS I/O
                                     008F   190 ;
         0C AA       0000'8F     A8  008F   191 	BISW	#IO$M_TRMNOECHO!IO$M_NOFILTR,I_SCRATCH+12(R10); SET FUNCTION CODE
         28 AA       001F'CF     9E  0095   192 	MOVAB	W^SPECIALTRM,I_SCRATCH+40(R10); SET TERMINATORS
                          11     11  009B   193 	BRB	40$			; LOOK FOR NOECHO ETC.
                                     009D   194 ;
                                     009D   195 ; READ - PASSALL
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page   5
V05.0           TTY_RPR,TTY_RVB AND TTY_RLB FUNCTIONS                                                                            (3)

                                     009D   196 ;
            57            08     93  009D   197 30$:	BITB	#IO.RAL&^X0FF,R7	; READ PASSALL?
                          0C     13  00A0   198 	BEQL	40$			; IF EQL THEN NOT SPECIFIED
                                     00A2   199 ;
                                     00A2   200 ; READ PASSALL WITHOUT THE NOECHO BIT IS A READ NO FILTER
                                     00A2   201 ; READ PASSALL AND NOECHO IS A READ READ PASSALL.
                                     00A2   202 ;
         0C AA       0000'8F     A8  00A2   203 	BISW	#IO$M_NOFILTR,I_SCRATCH+12(R10); ASSUME NO FILTER
         28 AA       0017'CF     9E  00A8   204 	MOVAB	W^PASSALLTRM,I_SCRATCH+40(R10); SET NO TERMINATOR
                                     00AE   205 ;
                                     00AE   206 ; READ - NOECHO
                                     00AE   207 ;
            10            57     93  00AE   208 40$:	BITB	R7,#<IO.RNE&^X0FF>	; READ NO ECHO?
                          06     13  00B1   209 	BEQL	50$			; IF EQL THEN NO
         0C AA       0000'8F     A8  00B3   210 	BISW	#IO$M_NOECHO,I_SCRATCH+12(R10); INSERT READ NO ECHO
                                     00B9   211 ;
                                     00B9   212 ; CHECK FOR READ PHYSICAL BLOCK
                                     00B9   213 ;
            57            20     B3  00B9   214 50$:	BITW	#<IO.RPB&^X0FF>,R7	; READ PHYSICAL SET?
                          10     13  00BC   215 	BEQL	60$			; IF EQL THEN NO
            00   00000000'8F     F0  00BE   216 	INSV	#IO$_READPBLK,#0,#6,I_SCRATCH+12(R10); SET READ PHYSICAL FUNCTION
         0C AA            06         00C5       
         28 AA       0017'CF     9E  00C8   217 	MOVAB	W^PASSALLTRM,I_SCRATCH+40(R10); SET NO TERMINATORS
                                     00CE   218 ;
                                     00CE   219 ; ISSUE I/O
                                     00CE   220 ;
                          FF2F'  31  00CE   221 60$:	BRW	RSX$ISSUQIO		; EXECUTE QIO
                                     00D1   222  
                                     00D1   223 	.DSABL	LSB
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page   6
V05.0           TTY_WVB AND TTY_WLB FUNCTIONS                                                                                    (4)

                                     00D1   225 	.SBTTL	TTY_WVB AND TTY_WLB FUNCTIONS
                                     00D1   226  
                                     00D1   227 	.ENABL	LSB
                                     00D1   228 ;
                                     00D1   229 ; TERMINAL WRITE VIRTUAL BLOCK
                                     00D1   230 ;
                                     00D1   231 TTY_WVB:				; WRITE VIRTUAL BLOCK
                          57     94  00D1   232 	CLRB	R7			; REMOVE SUBFUNCTION BITS
         0C AA       0000'8F     3C  00D3   233 	MOVZWL	#IO$_WRITEVBLK,I_SCRATCH+12(R10); SET FUNCTION CODE
                          06     11  00D9   234 	BRB	10$			; CONTINUE IN COMMON
                                     00DB   235 ;
                                     00DB   236 ; TERMINAL WRITE LOGICAL BLOCK
                                     00DB   237 ;
                                     00DB   238 TTY_WLB:				; WRITE LOGICAL BLOCK
         0C AA       0000'8F     3C  00DB   239 	MOVZWL	#IO$_WRITELBLK,I_SCRATCH+12(R10); SET FUNCTION CODE
                                     00E1   240 10$:	
         0A A8            01     E1  00E1   241 	BBC	#LUTV_TI,LUT_FLAGS(R8),15$; BR IF NOT TI
                          12         00E5       
            58       0000'CF     9E  00E6   242 	MOVAB	W^RSX$A_TIODEV,R8	; ADDRESS PROPER LUT ENTRY
         16 A2            58     D0  00EB   243 	MOVL	R8,QIO_LUT(R2)		; SAVE IN CONTEXT
            01         18 A8     91  00EF   244 	CMPB	LUT_TYPE(R8),#LUTC_TRM	; STILL TERMINAL?
                          03     13  00F3   245 	BEQL	15$			; IF EQL THEN YES
                          FF08'  31  00F5   246 	BRW	RSX$RMS_DRV		; TREAT AS RMS
                                     00F8   247 ;
                                     00F8   248 ; TERMINAL WRITE SUBFUNCTIONS
                                     00F8   249 ;
            08            57     91  00F8   250 15$:	CMPB	R7,#<IO.WAL&^X0FF>	; RSX WRITE PHYSICAL?
                          08     12  00FB   251 	BNEQ	20$			; IF NEQ THEN NO
         0C AA       0000'8F     3C  00FD   252 	MOVZWL	#IO$_WRITEPBLK,I_SCRATCH+12(R10); SET NEW FUNCTION
                          10     11  0103   253 	BRB	40$			; CONTINUE IN COMMON
            20            57     91  0105   254 20$:	CMPB	R7,#<IO.CCO&^X0FF>	; CANCEL CONTROL O?
                          05     13  0108   255 	BEQL	30$			; SET SUBFUNCTION IF YES
         0A A8            00     E5  010A   256 	BBCC	#LUTV_CTRLO,LUT_FLAGS(R8),40$; BR IF NOT SPECIAL CASE
                          06         010E       
         0C AA       0000'8F     A8  010F   257 30$:	BISW	#IO$M_CANCTRLO,I_SCRATCH+12(R10); SET CANCEL CONTROL O MODIFIER
                          FEE8'  31  0115   258 40$:	BRW	RSX$ISSUQIO		; EXECUTE THE QIO
                                     0118   259  
                                     0118   260 	.DSABL	LSB
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page   7
V05.0           TTY_WVB AND TTY_WLB FUNCTIONS                                                                                    (5)

                                     0118   262 ;
                                     0118   263 ; TTY_KILL - I/O KILL  FUNCTION
                                     0118   264 ;
                                     0118   265 TTY_KILL:				; I/O KILL
                                     0118   266 	$CANCEL_S	LUT_CHAN(R8)	; CANCEL 
                                     0123   267 ;
                                     0123   268 ; SPECIAL CASE TI:
                                     0123   269 ;
         0A A8            01     E1  0123   270 	BBC	#LUTV_TI,LUT_FLAGS(R8),10$; BR IF NOT TI:
                          1C         0127       
            50       0000'CF     9E  0128   271 	MOVAB	W^RSX$A_TIIDEV,R0	; ADDRESS TI INPUT LUT
         0C A0         0C A8     B1  012D   272 	CMPW	LUT_CHAN(R8),LUT_CHAN(R0); OUTPUT SAME AS INPUT?
                          05     12  0132   273 	BNEQ	5$			;
            50       0000'CF     9E  0134   274 	MOVAB	W^RSX$A_TIODEV,R0	; GET OTHER LUT
                                     0139   275 5$:	$CANCEL_S	LUT_CHAN(R0)	; CANCEL I/O ON COMPLEMENT LUT
            50         00'8F     9A  0144   276 10$:	MOVZBL	#SS$_NORMAL,R0		; SET SUCCESS AS STATUS
                          51     D4  0148   277 	CLRL	R1			; SET NO SECOND STATUS
                          FEB3'  31  014A   278 	BRW	RSX$DLVRQIOAST		; POST THE STATUS
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page   8
V05.0           TTY_ATT - ATTACH FUNCTION                                                                                        (6)

                                     014D   280 	.SBTTL	TTY_ATT - ATTACH FUNCTION
                                     014D   281 ;
                                     014D   282 ; TTY_ATT - ATTACH DEVICE FUNCTION
                                     014D   283 ;
                                     014D   284 TTY_ATT:				;  ATTACH DEVICE
         0A A8            00     E2  014D   285 	BBSS	#LUTV_CTRLO,LUT_FLAGS(R8),10$; SET THE CONDITION
                          00         0151       
         0A A8            01     E1  0152   286 10$:	BBC	#LUTV_TI,LUT_FLAGS(R8),30$; BR IF NOT TI
                          0C         0156       
       000A'CF            00     E2  0157   287 	BBSS	#LUTV_CTRLO,W^LUT_FLAGS+RSX$A_TIIDEV,15$; SET CANCEL BIT
                          00         015C       
       000A'CF            00     E2  015D   288 15$:	BBSS	#LUTV_CTRLO,W^LUT_FLAGS+RSX$A_TIODEV,30$; SET COMPLEMENT
                          00         0162       
            57            08     91  0163   289 30$:	CMPB	#<IO.ATA&^X0FF>,R7	; ATTACH FOR UNSOLICITED DATA?
                          40     12  0166   290 	BNEQ	70$			; IF NEQ THEN NO
                                     0168   291 ;
                                     0168   292 ; AST SPECIFIED
                                     0168   293 ;
            50       0000'8F     3C  0168   294 	MOVZWL	#SS$_BADPARAM,R0	; ASSUME ERROR
            54            65     3C  016D   295 	MOVZWL	(R5),R4			; GET ADDRESS
                          36     13  0170   296 	BEQL	70$			; IF EQL THEN NO
            33            54     E8  0172   297 	BLBS	R4,70$			; IF LOW SET THEN ERROR
                                     0175   298 ;
                                     0175   299 ; ASK FOR AST ON CONTROL C
                                     0175   300 ;
         0A A8            02     E2  0175   301 	BBSS	#LUTV_CTRLC,LUT_FLAGS(R8),70$; BR IF ENABLED AND ENABLE
                          2E         0179       
            59            52     D0  017A   302 	MOVL	R2,R9			; SAVE ADDRESS OF THE I/O CONTEXT
            52         34 A8     D0  017D   303 	MOVL	LUT_CTRLC(R8),R2	; ADDRESS CURRENT BLOCK
                          07     13  0181   304 	BEQL	40$			; IF EQL THEN NONE IN USE YET
         0C A2            01     E0  0183   305 	BBS	#ACBV_INPROG,ACB_FLAGS(R2),60$; BR IF IN PROGRESS - ENABLE AFTER ASTX
                          1D         0187       
                          03     11  0188   306 	BRB	50$			; CONTINUE IN COMMON
                          FE73'  30  018A   307 40$:	BSBW	RSX$SETUPAST		; ALLOCATE A CONTROL BLOCK
         34 A8            52     D0  018D   308 50$:	MOVL	R2,LUT_CTRLC(R8)	; SAVE ADDRESS OF THE CONTEXT
         08 A2            03     9B  0191   309 	MOVZBW	#3,ACB_UPRM(R2)		; SET UP PARAMETER FOR AST
         0A A2            54     B0  0195   310 	MOVW	R4,ACB_UPC(R2)		; SAVE AST SERVICE ADDRESS
         0C A2       0201 8F     B0  0199   311 	MOVW	#<1@ACBV_PERM>+<ACBC_CTLRCAST@ACBV_TYPE>,ACB_FLAGS(R2); SET TYPE
         0E A2            58     D0  019F   312 	MOVL	R8,ACB_FLAGS+2(R2)	; SAVE LUT ADDRESS
                          0C     10  01A3   313 	BSBB	CTRLCASTEN		; ENABLE AST
            52            59     D0  01A5   314 60$:	MOVL	R9,R2			; RESET QIO CONTEXT
                                     01A8   315 ;
                                     01A8   316 ; FINISH OPERATION
                                     01A8   317 ;
                          51     D4  01A8   318 70$:	CLRL	R1			;
                          FE53'  31  01AA   319 	BRW	RSX$DLVRQIOAST		; POST STATUS
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page   9
V05.0           RSX$CTRLCASTEN - ENABLE CONTROL C AST                                                                            (7)

                                     01AD   321 	.SBTTL RSX$CTRLCASTEN - ENABLE CONTROL C AST
                                     01AD   322 ;++
                                     01AD   323 ; RSX$CTRLCASTEN - ENABLE CONTROL C AST
                                     01AD   324 ;
                                     01AD   325 ; FUNCTIONAL DESCRIPTION:
                                     01AD   326 ;
                                     01AD   327 ; THIS ROUTINE IS USED DURING THE PROCESSING OF AN IO.ATA I/O FUNCTION
                                     01AD   328 ; AND AFTER THE AST EXIT OF THE ASSOCIATED AST.
                                     01AD   329 ;
                                     01AD   330 ; THE ACTION IS TO ENABLE THE AST FUNCTION.
                                     01AD   331 ;
                                     01AD   332 ; INPUTS:
                                     01AD   333 ;
                                     01AD   334 ;	R8 = ADDRESS OF THE LUT ENTRY
                                     01AD   335 ;	R10 = ADDRESS OF THE IMAGE IMPURE DATA BASE
                                     01AD   336 ;	R11 = ADDRESS OF THE IMAGE
                                     01AD   337 ;
                                     01AD   338 ; OUTPUTS:
                                     01AD   339 ;
                                     01AD   340 ;	R0 = STATUS OF THE I/O
                                     01AD   341 ;	R10,R11 ARE PRESERVED.
                                     01AD   342 ;--
                                     01AD   343 RSX$CTRLCASTEN::			; ENTRY FROM ASTX DIRECTIVE
            58         0E A2     D0  01AD   344 	MOVL	ACB_FLAGS+2(R2),R8	; ADDRESS LUT ENTRY
                                     01B1   345 CTRLCASTEN:				; ENTRY FROM IO.ATA
         0A A8            02     E1  01B1   346 	BBC	#LUTV_CTRLC,LUT_FLAGS(R8),20$; BR IF NOT ENABLED
                          37         01B5       
                                     01B6   347 	$QIOW_S	#8,LUT_CHAN(R8),#IO$_SETMODE!IO$M_CTRLCAST,I_SCRATCH+8(R10),,,-
                                     01B6   348 		W^RSX$CTRLCAST,LUT_CTRLC(R8)
                          FE25'  30  01D8   349 	BSBW	RSX$RSXQIOERR		; MAP ERROR CODE
            0A            50     E9  01DB   350 	BLBC	R0,10$			; BR IF NOT SUCCESS
            50         08 AA     D0  01DE   351 	MOVL	I_SCRATCH+8(R10),R0	; GET IOSB STATUS
                          FE1B'  30  01E2   352 	BSBW	RSX$RSXQIOERR		; MAP IT
            05            50     E8  01E5   353 	BLBS	R0,20$			; BR IF SUCCESS
         0A A8            02     E5  01E8   354 10$:	BBCC	#LUTV_CTRLC,LUT_FLAGS(R8),20$; SET NOT ENABLED
                          00         01EC       
                                 05  01ED   355 20$:	RSB				; RETURN
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page  10
V05.0           TTY_DET DETACH TERMINAL FUNCTION                                                                                 (8)

                                     01EE   357 	.SBTTL	TTY_DET DETACH TERMINAL FUNCTION
                                     01EE   358 ;
                                     01EE   359 ; TTY_DET - DETACH TERMINAL FUNCTION
                                     01EE   360 ;
                                     01EE   361 TTY_DET:				; DETACH TERMINAL
         0A A8            00     E2  01EE   362 	BBSS	#LUTV_CTRLO,LUT_FLAGS(R8),10$; SET THE CONDITION
                          00         01F2       
         0A A8            01     E1  01F3   363 10$:	BBC	#LUTV_TI,LUT_FLAGS(R8),30$; BR IF NOT TI
                          0C         01F7       
       000A'CF            00     E2  01F8   364 	BBSS	#LUTV_CTRLO,W^LUT_FLAGS+RSX$A_TIIDEV,15$; SET CANCEL BIT
                          00         01FD       
       000A'CF            00     E2  01FE   365 15$:	BBSS	#LUTV_CTRLO,W^LUT_FLAGS+RSX$A_TIODEV,30$; SET COMPLEMENT
                          00         0203       
                                     0204   366 ;
                                     0204   367 ; DISABLE CONTROL C AST
                                     0204   368 ;
         0A A8            02     E5  0204   369 30$:	BBCC	#LUTV_CTRLC,LUT_FLAGS(R8),40$; BR IF CONTROL C NOT ENABLED
                          0B         0208       
            59         34 A8     D0  0209   370 	MOVL	LUT_CTRLC(R8),R9	; ADDRESS CONTEXT OF AST
         0C A9            01     E0  020D   371 	BBS	#ACBV_INPROG,ACB_FLAGS(R9),40$; IF IN PROGRESS THEN SKIP DISABLE
                          02         0211       
                          05     10  0212   372 	BSBB	RSX$CTRLCDSABL		; DISABLE FUNCTION
                                     0214   373 ;
                                     0214   374 ; FINISH OPERATION
                                     0214   375 ;
                          51     D4  0214   376 40$:	CLRL	R1			;
                          FDE7'  31  0216   377 	BRW	RSX$DLVRQIOAST		; POST THE STATUS
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page  11
V05.0           RSX$CTRLCDSABL - DISABLE CONTROL C AST                                                                           (9)

                                     0219   379 	.SBTTL RSX$CTRLCDSABL - DISABLE CONTROL C AST
                                     0219   380 ;++
                                     0219   381 ; RSX$CTRLCDSABL - DISABLE CONTROL C AST
                                     0219   382 ;
                                     0219   383 ; FUNCTIONAL DESCRIPTION:
                                     0219   384 ;
                                     0219   385 ; THIS ROUTINE IS USED BY THE IO.DET I/O PROCESSING, THE ALUN DEASSIGN
                                     0219   386 ; LOGIC.
                                     0219   387 ;
                                     0219   388 ; THE ACTION IS TO DISABLE THE AST FUNCTION.
                                     0219   389 ;
                                     0219   390 ; INPUTS:
                                     0219   391 ;
                                     0219   392 ;	R8 = ADDRESS OF THE LUT ENTRY FOR THE CHANNEL
                                     0219   393 ;	R10 = ADDRESS OF THE IMAGE IMPURE DATA BASE
                                     0219   394 ;	R11 = ADDRESS OF THE IMAGE
                                     0219   395 ;
                                     0219   396 ; OUTPUTS:
                                     0219   397 ;
                                     0219   398 ;	R0 = STATUS OF THE QIO OPERATION
                                     0219   399 ;	R8,R10,R11 ARE PRESERVED.
                                     0219   400 ;--
                                     0219   401 RSX$CTRLCDSABL::			; DISABLE CONTROL C AST
                                     0219   402 	$QIOW_S	#9,LUT_CHAN(R8),#IO$_SETMODE!IO$M_CTRLCAST
         0A A8            02     E5  0237   403 	BBCC	#LUTV_CTRLC,LUT_FLAGS(R8),10$; SET FUNCTION DISABLED
                          00         023B       
                                 05  023C   404 10$:	RSB				; RETURN
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page  12
V05.0           TTY_SET FUNCTIONS                                                                                               (10)

                                     023D   406 	.SBTTL	TTY_SET FUNCTIONS
                                     023D   407 ;
                                     023D   408 ; SET MODE FUNCTIONS FOR TERMINALS
                                     023D   409 ;
                                     023D   410 	.ENABL	LSB
                                     023D   411 TTY_SET:				; TERMINAL SET MODE 
            54            85     3C  023D   412 	MOVZWL	(R5)+,R4		; ADDRESS BUFFER
            59            54     D0  0240   413 	MOVL	R4,R9			; COPY START OF BUFFER FOR POSSIBLE ERROR
            55            65     3C  0243   414 	MOVZWL	(R5),R5			; GET REQUEST SIZE
                          57     95  0246   415 	TSTB	R7			; IO.GTS?
                          1E     12  0248   416 	BNEQ	20$			; IF NEQ THEN NO
                                     024A   417 ;
                                     024A   418 ; GET TERMINAL SUPPORT
                                     024A   419 ;
            50       0000'8F     3C  024A   420 	MOVZWL	#SS$_ACCVIO,R0		; ASSUME ERROR
                                     024F   421 	IFNOWRT R5,(R4),10$		; BR IF NOT WRITTABLE
            55            04     B1  0255   422 	CMPW	#4,R5			; ENOUGH?
                          0B     1A  0258   423 	BGTRU	10$			; IF GTRU THEN NO
            64   00033FB9 8F     D0  025A   424 	MOVL	#<F1.ACR!-		;
                                     0261   425 		F1.UIA!-
                                     0261   426 		F1.CCO!-
                                     0261   427 		F1.ESQ!-
                                     0261   428 		F1.LWC!-
                                     0261   429 		F1.RNE!-
                                     0261   430 		F1.RPR!-
                                     0261   431 		F1.RST!-
                                     0261   432 		F1.RUB!-
                                     0261   433 		F1.SYN!-
                                     0261   434 		F1.TRW!-
                                     0261   435 		<<F2.SCH+F2.GCH>@16>>,(R4); INSERT ANSWER
            50         00'8F     9A  0261   436 	MOVZBL	#SS$_NORMAL,R0		; SET SUCCESS
                          FD98'  31  0265   437 10$:	BRW	RSX$DLVRQIOAST		; COMPLETE THE I/O
                                     0268   438 ;
                                     0268   439 ; GET OR SET MULTIPLE
                                     0268   440 ;
                                     0268   441 20$:
         38 AA         3C AA     9E  0268   442 	MOVAB	I_SCRATCH+I_CHARACTER+8(R10),I_SCRATCH+I_CHARACTER+4(R10);
         34 AA            0C     9A  026D   443 	MOVZBL	#12,I_SCRATCH+I_CHARACTER(R10)	;
                                     0271   444 	$GETCHN_S	LUT_CHAN(R8),,I_SCRATCH+I_CHARACTER(R10)
         70 8F            57     91  0285   445 	CMPB	R7,#<SF.GMC>&^X0FF	; SF.GMC?
                          33     12  0289   446 	BNEQ	45$			; IF NEQ THEN TRY SET
                                     028B   447 ;
                                     028B   448 ; GET CHARACTERISTIC
                                     028B   449 ;
                                     028B   450 	IFNOWRT	R5,(R4),40$		; IF NO ACCESS THEN ERROR
                          55     D7  0291   451 	DECL	R5			;
                          79     19  0293   452 	BLSS	70$			; IF LSS THEN NONE TO DO
            55            54     C0  0295   453 	ADDL	R4,R5			; POINT TO END -1
            08            64     91  0298   454 25$:	CMPB	(R4),#TC.TTP		; TERMINAL TYPE?
                          06     12  029B   455 	BNEQ	30$			; IF NEQ THEN SOME OTHER
         01 A4            00     90  029D   456 	MOVB	#T.UNK0,1(R4)		; SET UNKNOWN TYPE
                          11     11  02A1   457 	BRB	35$			; AND CONTINUE
                          008A   30  02A3   458 30$:	BSBW	PICKCHAR		; GET NEXT CHARACTERISTIC
            6B            50     E9  02A6   459 	BLBC	R0,80$			; BR IF ILLEGAL REQUEST
                       01 A4     94  02A9   460 	CLRB	1(R4)			; SET NO CHARACTERISTIC PRESENT
         44 AA            51     E1  02AC   461 	BBC	R1,I_SCRATCH+I_CHARACTER+8+8(R10),35$; BR IF NOT PRESENT
                          03         02B0       
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page  13
V05.0           TTY_SET FUNCTIONS                                                                                               (10)

                       01 A4     96  02B1   462 	INCB	1(R4)			; SET PRESENT
            02            55     F1  02B4   463 35$:	ACBL	R5,#2,R4,25$		; LOOP UNTIL DONE
            FFDE          54         02B7       
                          52     11  02BA   464 	BRB	70$			; POST SUCCESS
                          60     11  02BC   465 40$:	BRB	90$
                                     02BE   466 ;
                                     02BE   467 ; SET CHARACTERISTIC
                                     02BE   468 ;
                                     02BE   469 45$:	IFNORD	R5,(R4),90$		; BR IF NOT READABLE
         0C AA       0000'8F     3C  02C4   470 	MOVZWL	#IO$_SETMODE,I_SCRATCH+12(R10); ASSUME SETMODE NEEDED
                          55     D7  02CA   471 	DECL	R5			;
                          40     19  02CC   472 	BLSS	70$			; 
            55            54     C0  02CE   473 	ADDL	R4,R5			; POINT TO END OF LIST -1
            08            64     91  02D1   474 50$:	CMPB	(R4),#TC.TTP		; TERMINAL TYPE?
                          1E     13  02D4   475 	BEQL	55$			; IF EQL THEN SKIP
            27            64     91  02D6   476 	CMPB	(R4),#TC.NEC		; NOECHO?
                          06     12  02D9   477 	BNEQ	52$
         0C AA       0000'8F     3C  02DB   478 	MOVZWL	#IO$_SETCHAR,I_SCRATCH+12(R10);
                          004C   30  02E1   479 52$:	BSBW	PICKCHAR		; GET THE NEXT CHARACTERISTIC
            2D            50     E9  02E4   480 	BLBC	R0,80$			; BR IF ERROR
         01 A4            01     91  02E7   481 	CMPB	#1,1(R4)		; LEGAL VALUE?
                          1C     1F  02EB   482 	BLSSU	60$			;
            51         01 A4     F0  02ED   483 	INSV	1(R4),R1,#1,I_SCRATCH+I_CHARACTER+8+8(R10); INSERT NEW VALUE
         44 AA            01         02F1       
            02            55     F1  02F4   484 55$:	ACBL	R5,#2,R4,50$		; LOOP UNTIL DONE
            FFD7          54         02F7       
                                     02FA   485 ;
                                     02FA   486 ; SET CHARACTERISTICS
                                     02FA   487 ;
         1C AA         40 AA     9E  02FA   488 	MOVAB	I_SCRATCH+I_CHARACTER+8+4(R10),I_SCRATCH+28(R10);
         20 AA            08     9A  02FF   489 	MOVZBL	#8,I_SCRATCH+32(R10)	;
                       24 AA     7C  0303   490 	CLRQ	I_SCRATCH+36(R10)	;
                          FCF7'  31  0306   491 	BRW	RSX$ISSUQIO		; ISSUE THE I/O
                                     0309   492 ;
                                     0309   493 ; SET ERROR IN NEW VALUE
                                     0309   494 ;
            51            03     9A  0309   495 60$:	MOVZBL	#SE.BIN,R1		; SET FUNNY STATUS
                          09     11  030C   496 	BRB	85$			;
                                     030E   497 ;
                                     030E   498 ; SET SUCCESS IN GET OR SET MULTIPLE
                                     030E   499 ;
            50         00'8F     9A  030E   500 70$:	MOVZBL	#SS$_NORMAL,R0		; SET SUCCESS
                          0F     11  0312   501 	BRB	95$			;
                                     0314   502 ;
                                     0314   503 ; ERROR IN CHARACTERISTIC
                                     0314   504 ;
            51            0C     9A  0314   505 80$:	MOVZBL	#SE.NIH,R1		; SET FUNNY STATUS
            50       0000'8F     B0  0317   506 85$:	MOVW	#SS$_ABORT,R0		; SET PROPER STATUS
                          05     11  031C   507 	BRB	95$			;
                                     031E   508 ;
                                     031E   509 ; BUFFER ACCESS VIOLATION
                                     031E   510 ;
            50       0000'8F     3C  031E   511 90$:	MOVZWL	#SS$_ACCVIO,R0		;
            54            59     C2  0323   512 95$:	SUBL	R9,R4			; RETURN SECOND STATUS AS BUFFER SIZE
            54            10     78  0326   513 	ASHL	#16,R4,R4		; SHIFT TO UPPER
                          54         0329       
            50            54     C8  032A   514 	BISL	R4,R0			; INSERT OVER OTHER STATUS
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page  14
V05.0           TTY_SET FUNCTIONS                                                                                               (10)

                          FCD0'  31  032D   515 	BRW	RSX$DLVRQIOAST		; POST THE STATUS
                                     0330   516 	.DSABL	LSB
                                     0330   517 ;
                                     0330   518 ; SUBROUTINE TO PROCESS CHARACTERISTIC ARGUMENTS
                                     0330   519 ;
                                     0330   520 PICKCHAR:
                          50     D4  0330   521 	CLRL	R0			; ASSUME ERROR
            53       FFFF'CF     9E  0332   522 	MOVAB	W^SETGETTAB-1,R3	; ADDRESS TABLE OF CHARACTERISTICS
                          53     D6  0337   523 5$:	INCL	R3			;
                          63     95  0339   524 	TSTB	(R3)			; DONE?
                          0A     13  033B   525 	BEQL	15$			; IF EQL THEN NOT FOUND
            83            64     91  033D   526 	CMPB	(R4),(R3)+		; MATCH?
                          F5     12  0340   527 	BNEQ	5$			; IF NEQ THEN NO
            51            63     9A  0342   528 	MOVZBL	(R3),R1			; GET BIT VALUE OF CHARACTERISTIC
                          50     D6  0345   529 	INCL	R0			; SET SUCCESS
                                 05  0347   530 15$:	RSB				; RETURN
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page  15
V05.0           TTY_HANG FUNCTION                                                                                               (11)

                                     0348   532 	.SBTTL	TTY_HANG FUNCTION
                                     0348   533 ;
                                     0348   534 ; HANG UP TERMINAL FUNCTION
                                     0348   535 ;
                                     0348   536 TTY_HANG:				; HANG UP TERMINAL
                       1C AA     D4  0348   537 	CLRL	I_SCRATCH+28(R10)	; SET NO PARAMETER
         0C AA       0000'8F     3C  034B   538 	MOVZWL	#IO$_SETMODE!IO$M_HANGUP,I_SCRATCH+12(R10); SET FUNCTION CODE
                          FCAC'  31  0351   539 	BRW	RSX$ISSUQIO		; PERFORM FUNCTION
                                     0354   540 	.END
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page  16
SYMBOL TABLE                                                                                                                    (11)

$$MSG          = 00000000            DEV$V_DMT      = 00000015            FP_REGISTERS     00000014            
$$T1           = 00000001            DEV$V_ELG      = 00000016            GBL...         = 00000000            
...GBL         = 00000000            DEV$V_FOD      = 0000000E            H.CSP            00000000            
ACBC_CTLRCAST  = 00000002            DEV$V_FOR      = 00000018            H.CUIC           00000008            
ACBC_FLOATAST  = 00000003            DEV$V_GEN      = 00000011            H.DSW            00000026            
ACBC_PWRAST    = 00000000            DEV$V_IDV      = 0000001A            H.DUIC           0000000A            
ACBC_RCVAST    = 00000001            DEV$V_MBX      = 00000014            H.EFLM           00000004            
ACBV_INPROG    = 00000001            DEV$V_MNT      = 00000013            H.EFSV           00000020            
ACBV_PERM      = 00000000            DEV$V_NET      = 0000000D            H.FCS            00000028            
ACBV_TYPE      = 00000008            DEV$V_ODV      = 0000001B            H.FORT           0000002A            
ACB_FLAGS        0000000C            DEV$V_RCK      = 0000001E            H.FPSA           00000022            
ACB_LINK         00000000            DEV$V_REC      = 00000000            H.FPVA           0000001C            
ACB_UPC          0000000A            DEV$V_RND      = 0000001C            H.GARD           0000003A            
ACB_UPRM         00000008            DEV$V_RTM      = 0000001D            H.HDLN           00000002            
ADR_HIGHLIM      00000004            DEV$V_SDI      = 00000004            H.IPC            0000000E            
ADR_LOWLIM       00000000            DEV$V_SHR      = 00000010            H.IPS            0000000C            
ADR_SIZE         00000008            DEV$V_SPL      = 00000006            H.ISP            00000010            
AP_NAME          00000004            DEV$V_SQD      = 00000005            H.LUN            0000003E            
AST_PARAM        00000004            DEV$V_SWL      = 00000019            H.NLUN           0000003C            
AST_PC           00000010            DEV$V_TRM      = 00000002            H.NML            00000031            
AST_PSL          00000014            DEV$V_WCK      = 0000001F            H.ODVA           00000012            
AST_R0           00000008            F1.ACR         = 00000001            H.ODVL           00000014            
AST_R1           0000000C            F1.BTW         = 00000002            H.OVLY           0000002C            
BIT...         = 00000008            F1.BUF         = 00000004            H.PFVA           0000001A            
C$$ORE         = 00000000            F1.CCO         = 00000010            H.RCVA           0000001E            
CTRLCASTEN       000001B1 R     06   F1.ESQ         = 00000020            H.RRVA           00000032            
C_CANONPS      = 83C00000            F1.HLD         = 00000040            H.SPRI           00000030            
C_RCVDSTR      = 44564352            F1.LWC         = 00000080            H.TKVA           00000016            
DEV$M_ALL      = 00800000            F1.RNE         = 00000100            H.TKVL           00000018            
DEV$M_AVL      = 00040000            F1.RPR         = 00000200            H.VEXT           0000002E            
DEV$M_CCL      = 00000002            F1.RST         = 00000400            H.WND            00000024            
DEV$M_DIR      = 00000008            F1.RUB         = 00000800            IE.2DV         = FFFFFFD0            
DEV$M_DMT      = 00200000            F1.SYN         = 00001000            IE.ABO         = FFFFFFF1            
DEV$M_ELG      = 00400000            F1.TRW         = 00002000            IE.ACT         = FFFFFFF9            
DEV$M_FOD      = 00004000            F1.UIA         = 00000008            IE.ADP         = FFFFFF9E            
DEV$M_FOR      = 01000000            F1.UTB         = 00004000            IE.ALC         = FFFFFFAC            
DEV$M_GEN      = 00020000            F1.VBF         = FFFF8000            IE.ALG         = FFFFFFAC            
DEV$M_IDV      = 04000000            F2.ALT         = 00000010            IE.ALN         = FFFFFFDE            
DEV$M_MBX      = 00100000            F2.DCH         = 00000004            IE.AST         = FFFFFFB0            
DEV$M_MNT      = 00080000            F2.DKL         = 00000008            IE.BAD         = FFFFFFFF            
DEV$M_NET      = 00002000            F2.GCH         = 00000002            IE.BBE         = FFFFFFC8            
DEV$M_ODV      = 08000000            F2.SCH         = 00000001            IE.BCC         = FFFFFFBE            
DEV$M_RCK      = 40000000            F2.SFF         = 00000020            IE.BDI         = FFFFFFCC            
DEV$M_REC      = 00000001            FCB_ATTRIBS      0000007C            IE.BDR         = FFFFFFCE            
DEV$M_RND      = 10000000            FCB_FIB          0000004C            IE.BDV         = FFFFFFC9            
DEV$M_RTM      = 20000000            FCB_FID          00000000            IE.BHD         = FFFFFFC0            
DEV$M_SDI      = 00000010            FCB_FNAME        00000014            IE.BLB         = FFFFFFBA            
DEV$M_SHR      = 00010000            FCB_FNAMEDESC    0000000C            IE.BLK         = FFFFFFEC            
DEV$M_SPL      = 00000040            FCB_FNB          00000002            IE.BNM         = FFFFFFCA            
DEV$M_SQD      = 00000020            FCB_PC           00000078            IE.BTF         = FFFFFFB4            
DEV$M_SWL      = 02000000            FCB_RESULT       00000030            IE.BTP         = FFFFFFD5            
DEV$M_TRM      = 00000004            FCB_RESULTDESC   00000004            IE.BVR         = FFFFFFC1            
DEV$M_WCK      = 80000000            FCB_SIZE         000000B4            IE.BYT         = FFFFFFED            
DEV$V_ALL      = 00000017            FP_AP            00000008            IE.CKP         = FFFFFFF6            
DEV$V_AVL      = 00000012            FP_FP            0000000C            IE.CKS         = FFFFFFE2            
DEV$V_CCL      = 00000001            FP_PC            00000010            IE.CLO         = FFFFFFDA            
DEV$V_DIR      = 00000003            FP_PSL           00000004            IE.CNR         = FFFFFFB7            
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page  17
SYMBOL TABLE                                                                                                                    (11)

IE.CON         = FFFFFFEA            IE.ONP         = FFFFFFFB            IO.ATT         = 00000300            
IE.DAA         = FFFFFFF8            IE.OVR         = FFFFFFEE            IO.CAS         = 00001B10            
IE.DAO         = FFFFFFF3            IE.PES         = FFFFFFAD            IO.CBO         = 00001B48            
IE.DFU         = FFFFFFE8            IE.PNS         = FFFFFFA2            IO.CCI         = 00001800            
IE.DNA         = FFFFFFF9            IE.PRI         = FFFFFFF0            IO.CCO         = 00000120            
IE.DNR         = FFFFFFFD            IE.PTS         = FFFFFFFD            IO.CIN         = 00001D40            
IE.DUN         = FFFFFFF7            IE.RAC         = FFFFFFD4            IO.CLK         = 00001A00            
IE.DUP         = FFFFFFC7            IE.RAT         = FFFFFFD3            IO.CLN         = 00000700            
IE.EOF         = FFFFFFF6            IE.RBG         = FFFFFFD8            IO.CNT         = 00001E00            
IE.EOT         = FFFFFFC2            IE.RBS         = FFFFFFF1            IO.CON         = 00001B00            
IE.EOV         = FFFFFFF5            IE.RCN         = FFFFFFD2            IO.CPR         = 00001B08            
IE.EXP         = FFFFFFB5            IE.RER         = FFFFFFE0            IO.CPW         = 00001D50            
IE.FEX         = FFFFFFCF            IE.RNM         = FFFFFFCD            IO.CRC         = 00000220            
IE.FHE         = FFFFFFC5            IE.RSU         = FFFFFFEF            IO.CRE         = 00001400            
IE.FIX         = FFFFFFF7            IE.SDP         = FFFFFF9D            IO.CRJ         = 00001B20            
IE.FLN         = FFFFFFAF            IE.SNC         = FFFFFFDD            IO.CSI         = 00001600            
IE.FOP         = FFFFFFCB            IE.SPC         = FFFFFFFA            IO.CSM         = 00001D38            
IE.HFU         = FFFFFFE4            IE.SQC         = FFFFFFDC            IO.CTI         = 00001B00            
IE.HWR         = FFFFFFFA            IE.SRE         = FFFFFFF2            IO.CTL         = 00001D00            
IE.IBS         = FFFFFFA7            IE.STK         = FFFFFFC6            IO.CTR         = 00001B88            
IE.IDU         = FFFFFFA4            IE.TCH         = FFFFFFF5            IO.CTY         = 00000700            
IE.IEF         = FFFFFF9F            IE.TMM         = FFFFFFB9            IO.DAC         = 00001000            
IE.IES         = FFFFFFAE            IE.TMO         = FFFFFFB6            IO.DCI         = 00001900            
IE.IFC         = FFFFFFFE            IE.ULK         = FFFFFFAB            IO.DEL         = 00001500            
IE.IFU         = FFFFFFE7            IE.ULN         = FFFFFFFB            IO.DET         = 00000400            
IE.ILL         = FFFFFFD6            IE.UNS         = FFFFFFFC            IO.DIS         = 00001C00            
IE.ILU         = FFFFFFA0            IE.UPN         = FFFFFFFF            IO.DLB         = 00001D60            
IE.ILV         = FFFFFFED            IE.VER         = FFFFFFFC            IO.DSI         = 00001700            
IE.INS         = FFFFFFFE            IE.WAC         = FFFFFFE3            IO.DTI         = 00001C00            
IE.IOP         = FFFFFFAD            IE.WAT         = FFFFFFE1            IO.DTY         = 00000D00            
IE.IPR         = FFFFFFA1            IE.WCK         = FFFFFFAA            IO.ENA         = 00000C00            
IE.ISQ         = FFFFFFC3            IE.WER         = FFFFFFDF            IO.EOF         = 00000600            
IE.ITI         = FFFFFFA3            IE.WLK         = FFFFFFF4            IO.EXT         = 00001300            
IE.ITP         = FFFFFFA8            IE.WOV         = FFFFFFAB            IO.FDX         = 00000610            
IE.ITS         = FFFFFFF8            IO$M_CANCTRLO    ********   X   06   IO.FLN         = 00001500            
IE.IUI         = FFFFFFA5            IO$M_CTRLCAST    ********   X   06   IO.FNA         = 00000900            
IE.LCK         = FFFFFFE5            IO$M_HANGUP      ********   X   06   IO.GLC         = 00001D18            
IE.LNL         = FFFFFFA6            IO$M_NOECHO      ********   X   06   IO.GLI         = 00001D10            
IE.MAP         = FFFFFFAF            IO$M_NOFILTR     ********   X   06   IO.GNI         = 00001D08            
IE.MOD         = FFFFFFEB            IO$M_TIMED       ********   X   06   IO.GRC         = 00001D28            
IE.NBF         = FFFFFFD9            IO$M_TRMNOECHO   ********   X   06   IO.GRI         = 00001D20            
IE.NBK         = FFFFFFD7            IO$_READLBLK     ********   X   06   IO.GRN         = 00001D30            
IE.NDR         = FFFFFFB8            IO$_READPBLK     ********   X   06   IO.GTS         = 00000500            
IE.NFI         = FFFFFFC4            IO$_READPROMPT   ********   X   06   IO.HDX         = 00000608            
IE.NFW         = FFFFFFBB            IO$_READVBLK     ********   X   06   IO.HIS         = 00001A00            
IE.NLK         = FFFFFFB1            IO$_SETCHAR      ********   X   06   IO.HNG         = 00000600            
IE.NLN         = FFFFFFDB            IO$_SETMODE      ********   X   06   IO.INI         = 00001900            
IE.NNC         = FFFFFFB3            IO$_WRITELBLK    ********   X   06   IO.INL         = 00000500            
IE.NNL         = FFFFFFB2            IO$_WRITEPBLK    ********   X   06   IO.ITI         = 00001E00            
IE.NNN         = FFFFFFBC            IO$_WRITEVBLK    ********   X   06   IO.KIL         = 0000000A            
IE.NOD         = FFFFFFE9            IO.ACE         = 00000F00            IO.LDI         = 00000E00            
IE.NSF         = FFFFFFE6            IO.ACR         = 00000D00            IO.LED         = 00001400            
IE.NST         = FFFFFFB0            IO.ACW         = 00000E00            IO.LEI         = 00000F08            
IE.NSW         = FFFFFFEE            IO.ADS         = 00001800            IO.LKE         = 00001400            
IE.NVR         = FFFFFFAA            IO.APC         = 00001800            IO.LOD         = 00001800            
IE.NVW         = FFFFFFA9            IO.APV         = 00001808            IO.LOV         = 00000208            
IE.OFL         = FFFFFFBF            IO.ATA         = 00000308            IO.LSI         = 00001200            
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page  18
SYMBOL TABLE                                                                                                                    (11)

IO.LTI         = 00000F00            IO.STP         = 00001D00            I_FLOATA1        000001C4            
IO.LTK         = 00000028            IO.SYN         = 00000620            I_FLOATA2        000001CC            
IO.LTY         = 00001000            IO.TRM         = 00000508            I_FLOATA3        000001D4            
IO.MAO         = 00000708            IO.UDI         = 00001308            I_FLOATA4        000001DC            
IO.MCS         = 00001700            IO.UEI         = 00001328            I_FLOATA5        000001E4            
IO.MDA         = 00001C00            IO.UER         = 00001320            I_FLOATADR       000001AC            
IO.MDI         = 00001900            IO.ULK         = 00000A00            I_FLOATAST       000001A0            
IO.MDO         = 00001B00            IO.UNL         = 00000022            I_FLOATCSR       000001A4            
IO.MLO         = 00000C00            IO.USI         = 00001330            I_FLOATERR       000001A8            
IO.MOD         = 00000600            IO.UTI         = 00001310            I_FLOATTMP       000001B4            
IO.MSO         = 00000A00            IO.UTY         = 00001318            I_GARD           000000C8            
IO.NLB         = 00001D58            IO.WAL         = 00000108            I_HIGHEFN        00000148            
IO.NLK         = 00001300            IO.WAT         = 00001700            I_HIGHSIZE       000000D0            
IO.ONL         = 00001F00            IO.WBT         = 00000140            I_IMAGEVBN       000000D4            
IO.R1C         = 00000500            IO.WDD         = 00000124            I_INISIZE        000000CC            
IO.RAD         = 00001100            IO.WLB         = 00000100            I_LENGTH         000001EC            
IO.RAL         = 00000208            IO.WLC         = 00000110            I_LOGNAME        000000B8            
IO.RAT         = 00001600            IO.WLS         = 00000108            I_LUT            00000144            
IO.RBC         = 00000600            IO.WLT         = 00000108            I_NLUN           00000140            
IO.RCI         = 00001A00            IO.WLV         = 00000140            I_PC             00000184            
IO.RCV         = 00001A00            IO.WMS         = 00000110            I_PROCNAME       00000128            
IO.RDB         = 00000280            IO.WNS         = 00000110            I_PS             00000188            
IO.RDD         = 00001008            IO.WPB         = 00000120            I_PWRAST         0000019C            
IO.RDN         = 00000012            IO.WVB         = 00001200            I_R0             00000164            
IO.REL         = 00001700            IO.XMT         = 00001900            I_R1             00000168            
IO.RHD         = 00000208            IO.XNA         = 00001908            I_R2             0000016C            
IO.RLB         = 00000200            IQ.Q           = 00000002            I_R3             00000170            
IO.RLV         = 00000240            IQ.S           = 00000004            I_R4             00000174            
IO.RMT         = 00001010            IQ.UMD         = 00000004            I_R5             00000178            
IO.RNA         = 00000B00            IQ.X           = 00000001            I_R6             0000017C            
IO.RNC         = 00000220            IS.BV          = 00000005            I_RAD50NAME      00000124            
IO.RNE         = 00000210            IS.CC          = 00000301            I_RCVAST         00000198            
IO.RNS         = 00000210            IS.CLR         = 00000000            I_RCVMAIL        0000013C            
IO.RPB         = 00000220            IS.CR          = 00000D01            I_RUNFLAGS       00000190            
IO.RPR         = 00000900            IS.EOT         = 00000401            I_SCRATCH        00000000            
IO.RST         = 00000201            IS.ESC         = 00001B01            I_STATE          0000014C            
IO.RTC         = 00000700            IS.ESQ         = 00009B01            I_TYPE           00000180            
IO.RTI         = 00001D00            IS.PES         = 00008001            I_UIC            00000118            
IO.RTK         = 00000030            IS.PND         = 00000000            I_WAIT           00000154            
IO.RTM         = 00000280            IS.RDD         = 00000002            I_WAITSAVE       0000015C            
IO.RVB         = 00001100            IS.SET         = 00000002            LUTC_CR        = 00000005            
IO.RWD         = 00000500            IS.SPD         = 00000002            LUTC_DISK      = 00000002            
IO.RWU         = 00000560            IS.SUC         = 00000001            LUTC_LP        = 00000004            
IO.SAO         = 00000800            IS.TAB         = 00000901            LUTC_RMS       = 00000000            
IO.SCS         = 00001600            IS.TMO         = 00000002            LUTC_TAPE      = 00000003            
IO.SDI         = 00001600            I_ADR0           000000D8            LUTC_TRM       = 00000001            
IO.SDO         = 00001500            I_ASCIINAME      0000011C            LUTV_CTRLC     = 00000002            
IO.SEC         = 00000550            I_ASTPOOL        000000A8            LUTV_CTRLO     = 00000000            
IO.SET         = 00000018            I_ASTQUEUE       000000A0            LUTV_PRM       = 00000003            
IO.SLO         = 00000B00            I_BAILOUTFP      0000018C            LUTV_TI        = 00000001            
IO.SMO         = 00000570            I_CHARACTER    = 00000034            LUT_CHAN         0000000C            
IO.SPB         = 00000510            I_CMDAD          000000C4            LUT_CHAR         00000014            
IO.SPF         = 00000520            I_CMDSZ          000000C0            LUT_CTRLC        00000034            
IO.SPW         = 00001D48            I_CURAST         00000194            LUT_FLAGS        0000000A            
IO.SSO         = 00000900            I_FCBPOOL        000000B0            LUT_INFONAME     00000030            
IO.STA         = 00001B00            I_FCC            000001B0            LUT_INFOUNIT     00000032            
IO.STC         = 00000540            I_FLOATA0        000001BC            LUT_LINK         00000000            
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page  19
SYMBOL TABLE                                                                                                                    (11)

LUT_REALNAME     00000020            S.104          = 00000007            SYS$CANCEL       ********   X   06   
LUT_REF          00000008            S.128          = 00000008            SYS$GETCHN       ********   X   06   
LUT_RSXNAME      00000010            S.1280         = 0000000E            SYS$QIOW         ********   X   06   
LUT_RSXUNIT      00000012            S.1800         = 0000000C            S_PC             00000020            
LUT_SIZE         00000038            S.192          = 00000009            S_PS             00000024            
LUT_TYPE         00000018            S.1920         = 0000000F            S_R0             00000000            
LUT_UNIT         00000020            S.3712         = 00000011            S_R1             00000004            
PASSALLTRM       00000017 R     05   S.384          = 0000000A            S_R2             00000008            
PICKCHAR         00000330 R     06   S.40           = 00000002            S_R3             0000000C            
PSL_CC         = 00000000            S.4800         = 00000010            S_R4             00000010            
PSL_CM         = 0000001F            S.61           = 00000003            S_R5             00000014            
PSL_FPD        = 0000001B            S.64           = 00000004            S_R6             00000018            
PSL_FU         = 00000006            S.640          = 0000000B            S_TYPE           0000001C            
PSL_TBIT       = 00000004            S.72           = 00000005            T.AS33         = 00000001            
QIOV_FILES     = 00000000            S.92           = 00000006            T.AS35         = 00000003            
QIO_FLAGS        0000001C            S.9600         = 00000012            T.KS33         = 00000002            
QIO_FUNCTION     0000001A            S.EXTA         = 00000013            T.L180         = 0000000C            
QIO_IOSB         0000000E            S.EXTB         = 00000014            T.L30P         = 00000005            
QIO_LUT          00000016            SE.BIN         = 00000003            T.L30S         = 00000004            
QIO_SECONDBLK    0000001E            SE.FIX         = 00000002            T.LA36         = 00000006            
QIO_SIZE         00000022            SE.ICN         = 00000001            T.SCR0         = 0000000D            
RSX$A_TIIDEV     ********   X   06   SE.LPR         = 00000009            T.UNK0         = 00000000            
RSX$A_TIODEV     ********   X   06   SE.NIH         = 0000000C            T.USR0         = 0000000E            
RSX$CTRLCAST     ********   X   06   SE.NSC         = 0000000A            T.USR1         = 0000000F            
RSX$CTRLCASTEN   000001AD RG    06   SE.PAR         = 00000008            T.USR2         = 00000010            
RSX$CTRLCDSABL   00000219 RG    06   SE.SPD         = 00000006            T.USR3         = 00000011            
RSX$C_SUBSYSTEM= 00000006            SE.SPL         = 00000007            T.USR4         = 00000012            
RSX$DLVRQIOAST   ********   X   06   SE.TER         = 00000005            T.VT05         = 00000007            
RSX$GL_CARRIAGE  00000037 RG    05   SE.UPN         = 0000000B            T.VT50         = 00000008            
RSX$IEIFC        ********   X   06   SE.VAL         = 00000004            T.VT52         = 00000009            
RSX$ISSUQIO      ********   X   06   SETGETTAB        00000000 R     05   T.VT55         = 0000000A            
RSX$RMS_DRV      ********   X   06   SF.DEF         = 00000008            T.VT61         = 0000000B            
RSX$RSXQIOERR    ********   X   06   SF.GAC         = 00000580            TC.ACR         = 00000014            
RSX$SETUPAST     ********   X   06   SF.GMC         = 00000570            TC.ALT         = 00000019            
RSX$TTY_DRV      00000000 RG    06   SF.GSC         = 00000560            TC.BLK         = 00000022            
RSX$_ACCVIO    = 00068044            SF.RDF         = 00000530            TC.BSP         = 00000013            
RSX$_BADLIBREF = 0006806C            SF.SAC         = 00000590            TC.CCF         = 00000018            
RSX$_BADSTACK  = 0006804C            SF.SMC         = 00000520            TC.CEQ         = 00000026            
RSX$_BREAK     = 0006800C            SF.SSC         = 00000510            TC.DLU         = 00000021            
RSX$_EXITSTATUS= 00068180            SF.STS         = 00000550            TC.EPA         = 00000020            
RSX$_EXTERNABRT= 0006805C            SF.STT         = 00000540            TC.ESQ         = 0000001D            
RSX$_ILLINST   = 0006802C            SPECIALTRM       0000001F R     05   TC.FRM         = 00000023            
RSX$_INSFDYNMEM= 00068054            SS$_ABORT        ********   X   06   TC.HFF         = 0000000F            
RSX$_IOT       = 00068014            SS$_ACCVIO       ********   X   06   TC.HFL         = 0000000B            
RSX$_LIBNOTFND = 00068074            SS$_BADPARAM     ********   X   06   TC.HHT         = 00000011            
RSX$_LOADERROR = 0006807C            SS$_NORMAL       ********   X   06   TC.HLD         = 00000024            
RSX$_NONRSXEMT = 0006801C            SV_ASTLVL        00000005            TC.IMG         = 0000001A            
RSX$_NOSUCHDEV = 000680C2            SV_DCL           00000002            TC.ISL         = 00000006            
RSX$_NOTSKIMG  = 00068064            SV_FLOATAST      0000000A            TC.LCP         = 0000001E            
RSX$_ODDADDR   = 00068034            SV_FRESTORE      00000003            TC.LPP         = 00000002            
RSX$_PMD       = 000680CA            SV_NOAST         00000004            TC.LVF         = 00000010            
RSX$_RCVMBXSIZ = 0000012C            SV_PENDWAIT      00000006            TC.MAX         = 00000034            
RSX$_RESERVED  = 00068004            SV_PWRAST        00000009            TC.NEC         = 00000027            
RSX$_TBIT      = 0006803C            SV_RCVAST        00000008            TC.NKB         = 0000001B            
RSX$_TRAP      = 00068024            SV_RESTORE       00000000            TC.NL          = 0000000D            
S.0            = 00000001            SV_TRANSLATE     00000001            TC.NPR         = 0000001C            
S.1024         = 0000000D            SV_WAIT          00000007            TC.NST         = 00000012            
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page  20
SYMBOL TABLE                                                                                                                    (11)

TC.PAR         = 0000001F            TT$M_CRFILL    = 00000400            TTY_RVB          00000058 R     06   
TC.PRI         = 00000029            TT$M_EIGHTBIT  = 00008000            TTY_SET          0000023D R     06   
TC.RAT         = 00000007            TT$M_ESCAPE    = 00000008            TTY_WLB          000000DB R     06   
TC.RSP         = 00000003            TT$M_HOLDSCREEN= 00004000            TTY_WVB          000000D1 R     06   
TC.SCP         = 0000000A            TT$M_HOSTSYNC  = 00000010            W.BATT           00000006            
TC.SCR         = 00000009            TT$M_LFFILL    = 00000800            W.BFPD           0000000C            
TC.SFF         = 0000000E            TT$M_LOWER     = 00000080            W.BHVR           00000004            
TC.SLV         = 00000028            TT$M_MBXDSABL  = 00010000            W.BLGH           00000010            
TC.SMO         = 00000017            TT$M_MECHTAB   = 00000100            W.BLPD           0000000E            
TC.SMP         = 00000016            TT$M_NOBRDCST  = 00020000            W.BLVR           00000002            
TC.SMR         = 00000015            TT$M_NOECHO    = 00000002            W.BNPD           0000000D            
TC.STB         = 00000005            TT$M_NOTYPEAHD = 00000004            W.BOFF           0000000A            
TC.TAP         = 00000025            TT$M_ODD       = 00000080            W.BPCB           00000000            
TC.TTP         = 00000008            TT$M_PAGE      = FE000000            W.BSIZ           00000008            
TC.UC0         = 0000002A            TT$M_PARITY    = 00000040            
TC.UC1         = 0000002B            TT$M_PASSALL   = 00000001            
TC.UC2         = 0000002C            TT$M_REMOTE    = 00002000            
TC.UC3         = 0000002D            TT$M_SCOPE     = 00001000            
TC.UC4         = 0000002E            TT$M_SCRIPT    = 00000040            
TC.UC5         = 0000002F            TT$M_TTSYNC    = 00000020            
TC.UC6         = 00000030            TT$M_WRAP      = 00000200            
TC.UC7         = 00000031            TT$S_PAGE      = 00000008            
TC.UC8         = 00000032            TT$V_CRFILL    = 0000000A            
TC.UC9         = 00000033            TT$V_EIGHTBIT  = 0000000F            
TC.VFL         = 0000000C            TT$V_ESCAPE    = 00000003            
TC.WID         = 00000001            TT$V_HOLDSCREEN= 0000000E            
TC.XSP         = 00000004            TT$V_HOSTSYNC  = 00000004            
TERMINATOR       0000000F R     05   TT$V_LFFILL    = 0000000B            
TF.AST         = 00000008            TT$V_LOWER     = 00000007            
TF.BIN         = 00000002            TT$V_MBXDSABL  = 00000010            
TF.CCO         = 00000020            TT$V_MECHTAB   = 00000008            
TF.ESQ         = 00000010            TT$V_NOBRDCST  = 00000011            
TF.RAL         = 00000008            TT$V_NOECHO    = 00000001            
TF.RNC         = 00000020            TT$V_NOTYPEAHD = 00000002            
TF.RNE         = 00000010            TT$V_ODD       = 00000007            
TF.RST         = 00000001            TT$V_PAGE      = 00000019            
TF.SYN         = 00000080            TT$V_PARITY    = 00000006            
TF.TMO         = 00000080            TT$V_PASSALL   = 00000000            
TF.WAL         = 00000008            TT$V_REMOTE    = 0000000D            
TF.WBT         = 00000040            TT$V_SCOPE     = 0000000C            
TF.WMS         = 00000010            TT$V_SCRIPT    = 00000006            
TF.XOF         = 00000040            TT$V_TTSYNC    = 00000005            
TT$C_BAUD_110  = 00000003            TT$V_WRAP      = 00000009            
TT$C_BAUD_1200 = 00000008            TT$_LA120      = 00000021            
TT$C_BAUD_134  = 00000004            TT$_LA36       = 00000020            
TT$C_BAUD_150  = 00000005            TT$_LAX        = 00000020            
TT$C_BAUD_1800 = 00000009            TT$_UNKNOWN    = 00000000            
TT$C_BAUD_2000 = 0000000A            TT$_VT05       = 00000001            
TT$C_BAUD_2400 = 0000000B            TT$_VT52       = 00000040            
TT$C_BAUD_300  = 00000006            TT$_VT55       = 00000041            
TT$C_BAUD_3600 = 0000000C            TT$_VT5X       = 00000040            
TT$C_BAUD_4800 = 0000000D            TTY_ATT          0000014D R     06   
TT$C_BAUD_50   = 00000001            TTY_DET          000001EE R     06   
TT$C_BAUD_600  = 00000007            TTY_HANG         00000348 R     06   
TT$C_BAUD_7200 = 0000000E            TTY_KILL         00000118 R     06   
TT$C_BAUD_75   = 00000002            TTY_RLB          00000062 R     06   
TT$C_BAUD_9600 = 0000000F            TTY_RPR          00000039 R     06   
RSXTTYDRV       - VAX/VMS RSX11M AME TERMINAL DRIVER             22-AUG-1978 00:27:59   VAX-11 MACRO X0.3-11               Page  21
PROGRAM SECTION SYNOPSIS                                                                                                        (11)



PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
..ABS.           00000042      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            00000000      03     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
RSXDEF           000001F0      04     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
RSXPURE          00000049      05     NOPIC   USR   CON   REL   LCL NOSHR NOEXE   RD  NOWRT LONG  
RSXCODE          00000354      06     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD  NOWRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
4816. BYTES LEFT IN FREE MEMORY POOL.
1392. BYTES OF RECLAIMED MEMORY.
OBJ$:RSXTTYDRV,LIS$:RSXTTYDRV/-SP=SRC$:C,RSXTTYDRV
55 MLB DIR RDS - 1002 GETS TO DEFINE 32 MACROS. 43 INTER. FILE WRITES. 
