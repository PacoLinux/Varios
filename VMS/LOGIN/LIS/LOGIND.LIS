LOGIND          - INITIALIZE COMMAND INTERPRETER AND STACK INDI  22-AUG-1978 00:34:30   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (2)     100  DECLARATIONS
   (3)     100  INITIALIZE PROCESS
   (5)     100  STACK INDIRECT FILE
LOGIND          - INITIALIZE COMMAND INTERPRETER AND STACK INDI  22-AUG-1978 00:34:30   VAX-11 MACRO X0.3-11               Page   1
01                                                                                                                               (1)

                                     0000   100 	.TITLE	LOGIND - INITIALIZE COMMAND INTERPRETER AND STACK INDIRECT
                                     0000   110 	.IDENT	/01/
                                     0000   120 
                                     0000   130 ;
                                     0000   140 ;		  COPYRIGHT (c) 1977,1978 BY
                                     0000   150 ;	      DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
                                     0000   160 ;
                                     0000   170 ; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
                                     0000   180 ; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
                                     0000   190 ; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
                                     0000   200 ; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
                                     0000   210 ; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
                                     0000   220 ; TRANSFERRED.
                                     0000   230 ;
                                     0000   240 ; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
                                     0000   250 ; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
                                     0000   260 ; CORPORATION.
                                     0000   270 ;
                                     0000   280 ; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
                                     0000   290 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
                                     0000   300 ;
                                     0000   310 
                                     0000   320 ;++
                                     0000   330 ; FACILITY:	SYSTEM UTILITY PROGRAM
                                     0000   340 ;
                                     0000   350 ; ABSTRACT:	LOGIN COMMAND INTERPRETER INITIALIZATION
                                     0000   360 ;
                                     0000   370 ;
                                     0000   380 ; ENVIRONMENT:	NATIVE MODE PRIVILEGED PROCEEDURE
                                     0000   390 ;
                                     0000   400 ; AUTHOR:	W. H. BROWN, CREATION DATE: 20-SEP-1977
                                     0000   410 ;
                                     0000   420 ; MODIFIED BY:
                                     0000   430 ;
                                     0000   440 ;	, : VERSION
                                     0000   450 ; 01	- 
                                     0000   460 ;--
LOGIND          - INITIALIZE COMMAND INTERPRETER AND STACK INDI  22-AUG-1978 00:34:30   VAX-11 MACRO X0.3-11               Page   2
01              DECLARATIONS                                                                                                     (2)

                                     0000   100 	.SBTTL	DECLARATIONS
                                     0000   110 ;
                                     0000   120 ; INCLUDE FILES:
                                     0000   130 ;
                                     0000   140 ;
                                     0000   150 ; MACROS:
                                     0000   160  
                                     0000   170 ;
                                     0000   180 ; EQUATED SYMBOLS:
                                     0000   190 ;
                                     0000   200 	LGIWRKDEF			; LOGIN WORK AREA
                                     0000   210 	DEFSYMTBL			; CLI SYMBOL TABLE VALUES
                                     0000   220 	DEFPRCWRK			; DEFINE WORK AREA PARAMETERS
                                     0000   230 	IDFDEF				; DEFINE INDIRECT FRAME OFFSETS
                                     0000   240 	$FABDEF				; DEFINE FAB OFFSETS
                                     0000   250 	$IPLDEF				; INTERRUPT PRIORITY DEFINITIONS
                                     0000   260 	$LOGDEF				; DEFINE LOGICAL NAME SYMBOLS
                                     0000   270 	$NAMDEF				; DEFINE NAM OFFSETS
                                     0000   280 	$PRDEF				; DEFINE PROCESSOR REGISTER NUMBERS
                                     0000   290 	$PSLDEF				; DEFINE PROCESSOR STATUS FIELDS
                                     0000   300 	$PCBDEF				; PROCESS CONTROL BLOCK DEFS
                                     0000   310 	$PHDDEF				; PROCESS HEADER OFFSETS
                                     0000   320 	$PRVDEF				; PRIVILEGE DEFINITIONS
                                     0000   330 	$RABDEF				; DEFINE RAB OFFSETS
                                     0000   340 	$UAFDEF				; DEFINE AUTH RECORD OFFSETS
                                     0000   350 	$DJIDEF				; DETACHED JOB INITIATE MESSAGE FORMAT
                                     0000   360 	$PRDDEF				; PROCESS RMS DATA DEFINITIONS
                                     01B8   370  
                                     01B8   380 ;
                                     01B8   390 ; OWN STORAGE:
                                     01B8   400 ;
                                 00000000   410 	.PSECT	PURE	RD,NOWRT,BYTE
                                     0000   420  
                                     0000   430 RESERVED:				;
                                 01  0000   440 	.BYTE	1			;MAXIMUM LENGTH OF SEVERITY LEVEL
      59 54 49 52 45 56 45 53 24 00' 0001   450 	.ASCIC	/$SEVERITY/		;ERROR SEVERITY LEVEL SYMBOL
                                 09  0001       
                                 40  000B   460 	.BYTE	PRC_L_SEVERITY		;OFFSET TO SEVERITY VALUE ADDRESS
                                 0A  000C   470 	.BYTE	10			;MAXIMUM LENGTH OF STATUS VALUE
            53 55 54 41 54 53 24 00' 000D   480 	.ASCIC	/$STATUS/		;STATUS VALUE SYMBOL
                                 07  000D       
                                 44  0015   490 	.BYTE	PRC_L_STATUS		;OFFSET TO STATUS VALUE ADDRESS
                                 00  0016   500 	.BYTE	0			;END OF TABLE
                                     0017   510  
                     4E 49 47 4F 4C  0017   520 DEFILE: .ASCII	\LOGIN\			; DEFAULT LOGIN COMMAND FILE NAME
                           00000005  001C   530 DEFSIZ = . - DEFILE			; LENGTH OF FILE NAME STRING
                                     001C   540  
                        4D 4F 43 2E  001C   550 DCLDEF:	.ASCII	\.COM\			; DEFAULT TYPE FOR DCL AND OTHER CLI'S
                           00000004  0020   560 DCLDEFSIZ = . - DCLDEF			; LENGTH OF THAT STRING
                                     0020   570  
                        44 4D 43 2E  0020   580 MCRDEF:	.ASCII	\.CMD\			; DEFAULT FILE TYPE FOR MCR CLI
                           00000004  0024   590 MCRDEFSIZ = . - MCRDEF			; AND ITS LENGTH
LOGIND          - INITIALIZE COMMAND INTERPRETER AND STACK INDI  22-AUG-1978 00:34:30   VAX-11 MACRO X0.3-11               Page   3
01              INITIALIZE PROCESS                                                                                               (3)

                                     0024   100 	.SBTTL	INITIALIZE PROCESS
                                     0024   110 ;++
                                     0024   120 ; FUNCTIONAL DESCRIPTION:
                                     0024   130 ;
                                     0024   140 ;	THIS ROUTINE IS CALLED ONCE DURING THE LIFE OF A PROCESS
                                     0024   150 ;	TO SET UP THE COMMAND INTERPRETER AREA.
                                     0024   160 ;
                                     0024   170 ; CALLING SEQUENCE:
                                     0024   180 ;
                                     0024   190 ;	BSBW	LGI$INICLI		;
                                     0024   200 ;
                                     0024   210 ; INPUT PARAMETERS:
                                     0024   220 ;
                                     0024   230 ;	AP HAS ADDRESS OF WORK AREA
                                     0024   240 ;
                                     0024   250 ; IMPLICIT INPUTS:
                                     0024   260 ;
                                     0024   270 ;	LOGIN DATA HAS BEEN SET UP
                                     0024   280 ;
                                     0024   290 ; OUTPUT PARAMETERS:
                                     0024   300 ;
                                     0024   310 ;	NONE
                                     0024   320 ;
                                     0024   330 ; IMPLICIT OUTPUTS:
                                     0024   340 ;
                                     0024   350 ;	THE COMMAND INTERPRETER IS MAPPED INTO THE PROCESS AND THE
                                     0024   360 ;	COMMAND INTERPRETER COMMON DATA IS INITIALIZED.
                                     0024   370 ;
                                     0024   380 ; COMPLETION CODES:
                                     0024   390 ;
                                     0024   400 ;	NONE
                                     0024   410 ;
                                     0024   420 ; SIDE EFFECTS:
                                     0024   430 ;
                                     0024   440 ;	NONE
                                     0024   450 ;
                                     0024   460 ;--
                                     0024   470  
                                     0024   480 LGI$INICLI::				; INITIALIZE THE COMMAND INTERPRETER
            6C            03     E0  0024   490 	BBS	#LGI_V_SUBPRC,LGI$W_FLAGS(AP),15$ ; BR IF SUBPROCESS
                          10         0027       
                                 E0  0028   500 	BBS	#UAF$V_DEFCLI,-		; BR IF THIS USER IS ONLY ALLOWED TO
       008B'CF            01         0029   510 		W^LGI$G_UAFREC+UAF$B_FLAGS,15$ ; USE HIS DEFAULT CLI
                          0A         002D       
            51       0000'CF     9E  002E   520 	MOVAB	W^LGI$T_CLINAM,R1	; ADDRESS OF COMMAND OTPION BUFFER
            50            81     9A  0033   530 10$:	MOVZBL	(R1)+,R0		; GET LENGTH OF OPTION
                          26     12  0036   540 	BNEQ	60$			; BR IF OPTION SUPPLIED
            50       004C'CF     9E  0038   550 15$:	MOVAB	W^LGI$G_UAFREC+UAF$T_DEFCLI,R0 ; POINT AT DEFAULT FOR USER
            51            08     9A  003D   560 	MOVZBL	#8,R1			; MAXIMUM LENGTH
            20            80     91  0040   570 20$:	CMPB	(R0)+,#^A/ /		; VALID ASCII?
                          03     1B  0043   580 	BLEQU	30$			; BR IF NOT A VALID ASCII CHAR
            F8            51     F5  0045   590 	SOBGTR	R1,20$			; LOOP LOOKING FOR END
                          50     D7  0048   600 30$:	DECL	R0			; REMOVE TRAILING CHARACTER
            51       004C'CF     9E  004A   610 	MOVAB	W^LGI$G_UAFREC+UAF$T_DEFCLI,R1 ; POINT AT DEFAULT FOR USER
            50            51     C2  004F   620 	SUBL	R1,R0			; FIND LENGTH OF CLI NAME
                          0A     12  0052   630 	BNEQ	60$			; BR IF NAME IS VALID
            51         5A'AF     9E  0054   640 40$:	MOVAB	B^50$,R1		; SET SYSTEM DEFAULT
LOGIND          - INITIALIZE COMMAND INTERPRETER AND STACK INDI  22-AUG-1978 00:34:30   VAX-11 MACRO X0.3-11               Page   4
01              INITIALIZE PROCESS                                                                                               (3)

                          D9     11  0058   650 	BRB	10$			; USE THAT
                        4C 43 44 00' 005A   660 50$:	.ASCIC	\DCL\			; MUST HAVE A COMMAND INTERPRETER
                                 03  005A       
       0000'CF            50     90  005E   670 60$:	MOVB	R0,W^LGI$Q_CLINAM	; SET LENGTH OF SECTION NAME
            61            50     28  0063   680 	MOVC3	R0,(R1),W^LGI$T_CLIFIL	; STORE NAME PART IN BUFFER
                     0000'CF         0066       
            83   4558452E 8F     D0  0069   690 	MOVL	#^A/.EXE/,(R3)+		; SET FILE TYPE FOR OPEN
            50       0004'CF     9E  0070   700 	MOVAB	W^LGI$Q_FILNAM+4,R0	; SET ADDRESS OF 2ND WORD OF DECRIPTOR
            53            60     C3  0075   710 	SUBL3	(R0),R3,-(R0)		; SET LENGTH OF ENTIRE FILE NAME
                          70         0078       
            6C            04     E5  0079   720 	BBCC	#LGI_V_DELSEC,LGI$W_FLAGS(AP),70$ ; BR IF NO DELETE REQUESTED
                          3F         007C       
                                 E0  007D   730 	BBS	#PRV$V_PRMGBL,-		; CHECK THAT USER HAS THE PRIVILEGE TO
       0058'CF            18         007E   740 		W^LGI$G_UAFREC+UAF$Q_PRIV,65$ ; CREATE PERMANENT GLOBAL SECTIONS
                          28         0082       
                          50     D4  0083   750 	CLRL	R0			; SET NO ASSOCIATED MESSAGE
                          FF78'  30  0085   760 	BSBW	LGI$FATAL		; IF NO, HE CANNOT DELETE THE EXISTING
67 65 6C 69 76 69 72 70 20 6F 6E 00' 0088   770 	.ASCIC	\no privilege to delete CLI section\	; SECTION
20 65 74 65 6C 65 64 20 6F 74 20 65  0094       
   6E 6F 69 74 63 65 73 20 49 4C 43  00A0       
                                 22  0088       
                                     00AB   780 65$:	$DGBLSC_S	-		; DELETE THE GLOBAL SECTION
                                     00AB   790 		GSDNAM=W^LGI$Q_CLINAM,- ; NAME OF SECTION TO DELETE
                                     00AB   800 		FLAGS =W^LGI$L_SECFLGS	; ASSOCIATED FLAGS
       0000'CF       0000'CF     FA  00BC   810 70$:	CALLG	W^LGI$G_SECPAR,W^LIB$_CREMAPSEC ; CREATE AND MAP GLOBAL SECTION
            17            50     E9  00C3   820 	BLBC	R0,74$			; BR IF ERROR CREATING SECTION
            52       0000'CF     7E  00C6   830 	MOVAQ	W^LGI$Q_INADR,R2	; SET ADDRESS OF INPUT REQUEST LIMITS
            53       0000'CF     7E  00CB   840 	MOVAQ	W^LGI$Q_RETADR,R3	; AND RESULTANT LIMITS
                          50     D4  00D0   850 	CLRL	R0			; SET NOP ERROR CODE INCASE OF FUNNY MAP
            63            62     D1  00D2   860 	CMPL	(R2),(R3)		; CLI MAPPED AT PROPER LOCATION
                          06     12  00D5   870 	BNEQ	74$			; BR IF NO - SOME FUNNY ERROR
            63         04 A3     D1  00D7   880 	CMPL	4(R3),(R3)		; HI ADDRESS ABOVE LOW ADDRESS
                          19     1A  00DB   890 	BGTRU	76$			; BR IF YES - EVERY THING LOOKS OK
                          FF20'  30  00DD   900 74$:	BSBW	LGI$FATAL		; FATAL ERROR MAPPING SECTION
74 73 79 73 20 43 53 50 4D 52 43 00' 00E0   910 	.ASCIC	\CRMPSC system service\
      65 63 69 76 72 65 73 20 6D 65  00EC       
                                 15  00E0       
       0000'CF            00'    E0  00F6   920 76$:	BBS	S^#SEC$V_SYSGBL,W^LGI$L_SECFLGS,90$ ; BR IF GLOBAL SECTION
                          10         00FB       
            50            63     D0  00FC   930 	MOVL	(R3),R0			; GET FIRST ADDRESS OF SECTION
                          60     D5  00FF   940 80$:	TSTL	(R0)			; FAULT THE THING INTO MEMORY
   00000200 8F         04 A3     F1  0101   950 	ACBL	4(R3),#512,R0,80$	; TOUCH ALL PAGES IN SECTION
            FFF3          50         0109       
         04 A3            01     C1  010C   960 90$:	ADDL3	#1,4(R3),(R2)		; FIND FIRST BYTE ABOVE SECTION
                          62         0110       
         04 A2            62     D1  0111   970 	CMPL	(R2),4(R2)		; ANY SPACE FOR SYMBOLS?
                          10     1E  0115   980 	BGEQU	100$			; BR IF NO
                                     0117   990 	$CRETVA_S (R2),(R3),#PSL$C_SUPER ; CREATE SPACE FOR SYMBOL TABLE
            1B            50     E8  0124  1000 	BLBS	R0,INISYM		; INIT SYMBOL TABLE IF WE GOT ONE
                          FED6'  30  0127  1010 100$:	BSBW	LGI$FATAL		; ELSE WE HAVE A FATAL ERROR
6C 62 61 74 20 6C 6F 62 6D 79 73 00' 012A  1020 	.ASCIC	\symbol table allocation\
6E 6F 69 74 61 63 6F 6C 6C 61 20 65  0136       
                                 17  012A       
                                     0142  1030 ;
                                     0142  1040 ; SET UP THE SYMBOL TABLE AREA FOR THE PROCESS COMMAND SYMBOLS
                                     0142  1050 ;
            50         28 AB     9E  0142  1060 INISYM:	MOVAB	PRC_Q_GLOBAL(R11),R0	; GET ADDRESS OF GLOBAL TABLE LISTHEAD
LOGIND          - INITIALIZE COMMAND INTERPRETER AND STACK INDI  22-AUG-1978 00:34:30   VAX-11 MACRO X0.3-11               Page   5
01              INITIALIZE PROCESS                                                                                               (3)

            60            50     D0  0146  1070 	MOVL	R0,(R0)			; SET ADDRESS OF LISTHEAD IN FORWARD LINK
            80            80     D0  0149  1080 	MOVL	(R0)+,(R0)+		; SET ADDRESS OF LISTHEAD IN BACKWARD LINK
            60            50     D0  014C  1090 	MOVL	R0,(R0)			; SET ADDRESS OF LISTHEAD IN FORWARD LINK
            80            80     D0  014F  1100 	MOVL	(R0)+,(R0)+		; SET ADDRESS OF LISTHEAD IN BACKWARD LINK
            60            50     D0  0152  1110 	MOVL	R0,(R0)			; SET ADDRESS OF LISTHEAD IN FORWARD LINK
            80            80     D0  0155  1120 	MOVL	(R0)+,(R0)+		; SET ADDRESS OF LISTHEAD IN BACKWARD LINK
            50       0000'CF     D0  0158  1130 	MOVL	W^LGI$Q_RETADR,R0	; GET ADDRESS OF START OF SYMBOL TABLE
         20 AB            50     D0  015D  1140 	MOVL	R0,PRC_Q_ALLOCREG(R11)	; SET ADDRESS OF SYMBOL ALLOCATION REGION
       0004'CF            50     C3  0161  1150 	SUBL3	R0,W^LGI$Q_RETADR+4,4(R0) ; STORE LENGTH MINUS 1 IN BLOCK
                       04 A0         0166       
                          80     D4  0168  1160 	CLRL	(R0)+			; CLEAR LINK TO NEXT BLOCK
                          60     D6  016A  1170 	INCL	(R0)			; ADJUST THE LENGTH TO LAST BYTE
                       58 AB     D4  016C  1180 	CLRL	PRC_L_ONERROR(R11)	; ZERO ADDRESS OF ON ERROR TEXT
         56 AB       0208 8F     B0  016F  1190 	MOVW	#2@8!8,PRC_W_ONLEVEL(R11) ; DISABLE ON CONDITIONS BY DEFAULT
         54 AB            06     E1  0175  1200 	BBC	#PRC_V_MODE,PRC_W_FLAGS(R11),10$ ; BR IS NOT A BATCH JOB
                          04         0179       
         56 AB            02     B0  017A  1210 	MOVW	#2,PRC_W_ONLEVEL(R11)	; BATCH JOBS GET ERROR HANDLING
            5A       FE7E CF     9E  017E  1220 10$:	MOVAB	RESERVED,R10		; GET ADDRESS OF RESERVED SYMBOLS
            51            8A     9A  0183  1230 20$:	MOVZBL	(R10)+,R1		; GET MAXIMUM LENGTH OF VALUE STRING
                          2C     13  0186  1240 	BEQL	30$			; IF EQL END OF TABLE
            53            8A     9A  0188  1250 	MOVZBL	(R10)+,R3		; GET LENGTH OF SYMBOL NAME
            52            6A     9E  018B  1260 	MOVAB	(R10),R2		; SET ADDRESS OF SYMBOL VALUE
            54            6A     9E  018E  1270 	MOVAB	(R10),R4		; SET ADDRESS OF SYMBOL NAME
            5A            53     C0  0191  1280 	ADDL	R3,R10			; ADJUST TO ADDRESS OFFSET
            55         28 AB     9E  0194  1290 	MOVAB	PRC_Q_GLOBAL(R11),R5	; GET ADDRESS OF SYMBOL TABLE LISTHEAD
                          FE65'  30  0198  1300 	BSBW	DCL$ALLOCSYM		; ALLOCATE AND INSERT PERMENENT SYMBOL
                       0A A1     96  019B  1310 	INCB	SYM_B_TYPE(R1)		; SET PERMANENT SYMBOL INDICATOR
            50         0C A1     9A  019E  1320 	MOVZBL	SYM_T_SYMBOL(R1),R0	; GET LENGTH OF SYMBOL NAME
            50         0D A140   9E  01A2  1330 	MOVAB	SYM_T_SYMBOL+1(R1)[R0],R0 ; GET ADDRESS OF SYMBOL VALUE
                          80     94  01A7  1340 	CLRB	(R0)+			; CLEAR LENGTH OF SYMBOL VALUE
            51            8A     9A  01A9  1350 	MOVZBL	(R10)+,R1		; GET OFFSET TO ADDRESS OF SYMBOL VALUE
            51            5B     C0  01AC  1360 	ADDL	R11,R1			; CALCULATE ADDRESS TO STORE VALUE ADDRESS
            61            50     D0  01AF  1370 	MOVL	R0,(R1)			; SET ADDRESS OF SYMBOL VALUE
                          CF     11  01B2  1380 	BRB	20$			;
                                     01B4  1390 ;
                                     01B4  1400 ; CREATE ANY SYMBOLS FOR THE PARAMETERS PASSED TO THE PROCESS
                                     01B4  1410 ;
                                     01B4  1420  
         54 AB            06     E1  01B4  1430 30$:	BBC	#PRC_V_MODE,PRC_W_FLAGS(R11),60$ ; BR IF INTERACTIVE JOB
                          3A         01B8       
            52         54 AC     9E  01B9  1440 	MOVAB	LGI$T_WRKBUF+DJI$T_PARMS(AP),R2 ; POINT AT PARAMETERS
         0C AC       3050 8F     B0  01BD  1450 	MOVW	#^A/P0/,LGI$Q_IOSB+4(AP) ; SET PROTOTYPE PARAMTER NAME
            54         0C AC     9E  01C3  1460 40$:	MOVAB	LGI$Q_IOSB+4(AP),R4	; POINT AT SYMBOL NAME
            51            82     9A  01C7  1470 	MOVZBL	(R2)+,R1		; FIND DESCRIPTOR FOR NEXT SYMBOL VALUE
                          08     12  01CA  1480 	BNEQ	45$			; BR IF SYMBOL IS HERE
                          52     D7  01CC  1490 	DECL	R2			; BACK UP TO GET THIS AGAIN IF NEEDED
            38         01 A4     91  01CE  1500 	CMPB	1(R4),#^A/8/		; DEFINE ATLEAST 8 SYMBOLS YET?
                          1F     1E  01D2  1510 	BGEQU	60$			; BR IF YES
                       01 A4     96  01D4  1520 45$:	INCB	1(R4)			; CHANGE THE NAME
            3A         01 A4     91  01D7  1530 	CMPB	1(R4),#^A/9/+1		; NAME OVER FLOW THE NUMBERS?
                          05     12  01DB  1540 	BNEQ	50$			; BR IF NO
         01 A4         41 8F     90  01DD  1550 	MOVB	#^A/A/,1(R4)		; MAKE NAME SOMETHING USEFUL
            53            02     D0  01E2  1560 50$:	MOVL	#2,R3			; SET LENGTH OF SYMBOL NAME
            55         38 AB     9E  01E5  1570 	MOVAB	PRC_Q_LOCAL(R11),R5	; SET THE SYMBOL TABLE TO ENTER INTO
                          6241   9F  01E9  1580 	PUSHAB	(R2)[R1]		; SAVE START OF NEXT SYMBOL
                          FE11'  30  01EC  1590 	BSBW	DCL$ALLOCSYM		; ALLOCATE THE SYMBOL
                          04     BA  01EF  1600 	POPR	#^M<R2>			; RETREIVE THE START OF NEXT STRING
LOGIND          - INITIALIZE COMMAND INTERPRETER AND STACK INDI  22-AUG-1978 00:34:30   VAX-11 MACRO X0.3-11               Page   6
01              INITIALIZE PROCESS                                                                                               (3)

                          D0     11  01F1  1610 	BRB	40$			; TRY FOR NEXT
                                     01F3  1620 60$:					; REFERENCE
                                     01F3  1630 ;
                                     01F3  1640 ; SET USERS DEFAULT DIRECTORY, NAME, ACCOUNT, PRIVILEGES AND QUOTAS
                                     01F3  1650 ;
                          08     10  01F3  1660 	BSBB	LGI$SETUSRDEF		; SET USER DEFAULTS
            6C            03     E0  01F5  1670 	BBS	#LGI_V_SUBPRC,LGI$W_FLAGS(AP),80$ ; NO LOGIN.COM FOR SUB-PROCESS
                          03         01F8       
                          0191   31  01F9  1680 	BRW	STACKIND		; GO OPEN STARTUP COMMAND FILE
                                 05  01FC  1690 80$:	RSB				;
LOGIND          - INITIALIZE COMMAND INTERPRETER AND STACK INDI  22-AUG-1978 00:34:30   VAX-11 MACRO X0.3-11               Page   7
01              INITIALIZE PROCESS                                                                                               (4)

                                     01FD   100 ;+
                                     01FD   110 ; SETUSRDEF - SET USER DEFAULT
                                     01FD   120 ;
                                     01FD   130 ; THIS ROUTINE IS CALLED TO SET UP THE LOGIN DEFAULTS FOR THE USER.
                                     01FD   140 ; PRIOR TO EXECTION OF THIS ROUTINE, THE USER AUTHORIZATION RECORD
                                     01FD   150 ; HAS BEEN READ INTO THE ASSOCIATED BUFFER.
                                     01FD   160 ;-
                                     01FD   170  
                                     01FD   180 LGI$SETUSRDEF::				;
            50       0000'CF     9E  01FD   190 	MOVAB	W^LGI$G_UAFREC,R0	; GET ADDRESS OF AUTH RECORD
       0098 CB         18 A0     D0  0202   200 	MOVL	UAF$L_UIC(R0),PRC_L_PROCUIC(R11) ; SAVE USER'S DEFAULT UIC
       008B C0            00     E1  0208   210 	BBC	#UAF$V_DISCTLY,UAF$B_FLAGS(R0),2$ ; BR IF USER GETS CONTROL Y
                          05         020D       
                                     020E   220 	SETBIT	PRC_V_NOCTLY,PRC_W_FLAGS(R11) ; DISABLE CONTROL Y'S
                                 B3  0213   230 2$:	BITW	#<LGI_M_SETDEF!-	; CHECK IF THIS HAS BEEN DONE
                                     0214   240 		LGI_M_NOACNT!-		; OR WE HAVE NO ACCOUNTING FILE
                                     0214   250 		LGI_M_SUBPRC>,-		; OF THIS IS A SUB PROCESS
            6C            0E         0214   260 		LGI$W_FLAGS(AP)		; FLAGS ARE SET
                          5A     12  0216   270 	BNEQ	50$			; IF ANY, THEN DON'T SET QUOTES, ETC
                                     0218   280 	SETBIT	LGI_V_SETDEF,LGI$W_FLAGS(AP) ; SET FLAG THAT IT HAS BEEN DONE
                       1D A0     9F  021B   290 	PUSHAB	UAF$T_DEFDIR+1(R0)	; SAVE ADDRESS OF STRING FOR DESCR
            7E         1C A0     9A  021E   300 	MOVZBL	UAF$T_DEFDIR(R0),-(SP)	; COUNT FOR DESCRIPTOR
                          7E     7C  0222   310 	CLRQ	-(SP)			; SET NULL OPTIONAL PARAMETERS
                       08 AE     DF  0224   320 	PUSHAL	8(SP)			; SET ADDRESS OF DESCRIPTOR
   00000000'9F            03     FB  0227   330 	CALLS	#3,@#SYS$SETDDIR	; SET DEFAULT DIRECTORY
            51       0000'CF     9E  022E   340 5$:	MOVAB	W^LGI$T_DSKNAM,R1	; POINT AT USER SUPPLIED DISK NAME
            50            81     9A  0233   350 	MOVZBL	(R1)+,R0		; SET LENGTH IN STRING
                          06     13  0236   360 	BEQL	10$			; BR IF NO NAME FROM COMMAND
            8041          3A     90  0238   370 	MOVB	#^A/:/,(R0)+[R1]	; ADD A COLON TO THE NAME
                          0A     11  023C   380 	BRB	20$			; JOIN COMMON CODE
            51       003C'CF     9E  023E   390 10$:	MOVAB	W^LGI$G_UAFREC+UAF$T_DEFDEV,R1 ; POINT AT USERS DEFAULT NAME
            50            81     90  0243   400 	MOVB	(R1)+,R0		; GET THE LENGTH OF DEFAULT
                          17     13  0246   410 	BEQL	30$			; IF NONE - DON'T MAKE AN ASSIGNMENT
            6E            50     7D  0248   420 20$:	MOVQ	R0,(SP)			; SET STRING DESCRIPTOR IN THE STACK
            50            5E     D0  024B   430 	MOVL	SP,R0			; SET ADDRESS OF DEFAULT DEVICE DESCRIPTOR
                                     024E   440 	$CRELOG_S #LOG$C_PROCESS,W^LGI$Q_DSKDES,(R0) ; CREATE LOGICAL NAME FOR DISK
            5E            08     C0  025F   450 30$:	ADDL	#8,SP			; CLEAN OFF DESCRIPTOR
                                     0262   460 ;
                                     0262   470 ; CHANGE MODE TO KERNAL ACCESS MODE TO SET USERS UIC, NAME, ACCOUNT
                                     0262   480 ;	PRIVLEGES AND QUOTA VALUES.
                                     0262   490 ;
            6C            01     E0  0262   500 	BBS	#LGI_V_NOACNT,LGI$W_FLAGS(AP),50$ ; BR IF NO ACCOUNT FILE
                          0C         0265       
                                     0266   510 	$CMKRNL_S  B^100$		; SET USERS UIC AND QUOTAS
                                 05  0272   520 50$:	RSB				; RETURN TO CALLER
                                     0273   530 
                                     0273   540 ;
                                     0273   550 ;	WARNING: THE SETTING OF QUOTAS ASSUMES THAT NO ASYNCHRONOUS OPERATIONS
                                     0273   560 ;		HAVE BEEN INITIATED BY LOGIN.
                                     0273   570 ;
                                     0273   580 
                                     0273   590  
                                     0273   600  
                               01FC  0273   610 100$:	.WORD	^M<R2,R3,R4,R5,R6,R7,R8> ; ENTRY MASK-SAVE STANDARD REGISTERS
            56   00000000'EF     D0  0275   620 	MOVL	SCH$GL_CURPCB,R6	; GET PROCESS PCB
            57       0000'CF     9E  027C   630 	MOVAB	W^LGI$G_UAFREC,R7	; GET POINTER TO AUTHORIZATION RECORD
         20 A6         18 A7     D0  0281   640 	MOVL	UAF$L_UIC(R7),PCB$L_UIC(R6) ; SET THE UIC
LOGIND          - INITIALIZE COMMAND INTERPRETER AND STACK INDI  22-AUG-1978 00:34:30   VAX-11 MACRO X0.3-11               Page   8
01              INITIALIZE PROCESS                                                                                               (4)

   00000054'9F            06     E0  0286   650 	BBS	#PRC_V_MODE,@#CTL$AG_CLIDATA+PRC_W_FLAGS,110$ ; BR IF BATCH -
                          15         028D       
                                     028E   660 					; JOB, DON'T CHANGE PRIORITY
                                     028E   670 	DSBINT	#IPL$_SYNCH		; PREVENT RESCHEDULING
            1F       008A C7     83  0294   680 	SUBB3	UAF$B_PRI(R7),#31,PCB$B_PRIB(R6); SET PRIORITY
                       33 A6         0299       
         0B A6         33 A6     90  029B   690 	MOVB	PCB$B_PRIB(R6),PCB$B_PRI(R6)	; AS BOTH BASE AND CURRENT
                                     02A0   700 	ENBINT				; ALLOW INTERRUPTS
         40 A6         60 A7     B0  02A3   710 110$:	MOVW	UAF$W_BIOLM(R7),PCB$W_BIOLM(R6)	; SET BUFFERED I/O LIMIT
         3E A6         60 A7     B0  02A8   720 	MOVW	UAF$W_BIOLM(R7),PCB$W_BIOCNT(R6); AND COUNT
         46 A6         64 A7     B0  02AD   730 	MOVW	UAF$W_DIOLM(R7),PCB$W_DIOLM(R6); SET DIRECT I/O COUNT
         44 A6         64 A7     B0  02B2   740 	MOVW	UAF$W_DIOLM(R7),PCB$W_DIOCNT(R6); AND LIMIT
         68 A6         62 A7     B0  02B7   750 	MOVW	UAF$W_BYTLM(R7),PCB$W_BYTLM(R6)	; SET BUFFER BYTE LIMIT
         42 A6         62 A7     B0  02BC   760 	MOVW	UAF$W_BYTLM(R7),PCB$W_BYTCNT(R6); AND COUNT
            58   00000000'9F     D0  02C1   770 	MOVL	@#CTL$GL_PHD,R8		; GET PROCESS HEADER WINDOW ADDRESS
         42 A8         6A A7     B0  02C8   780 	MOVW	UAF$W_PRCCNT(R7),PHD$W_PRCLM(R8); SET SUB-PROCESS LIMIT
         48 A6         60 A8     A3  02CD   790 	SUBW3	PHD$W_FILLM(R8),PCB$W_FILCNT(R6),R0	; GET NEGATIVE COUNT OF FILES
                          50         02D2       
         60 A8         66 A7     B0  02D3   800 	MOVW	UAF$W_FILLM(R7),PHD$W_FILLM(R8)	; SET OPEN FILE LIMIT
         66 A7            50     A1  02D8   810 	ADDW3	R0,UAF$W_FILLM(R7),PCB$W_FILCNT(R6); AND REMAINING COUNT
                       48 A6         02DC       
            50         08 A8     3C  02DE   820 	MOVZWL	PHD$W_WSLIST(R8),R0		; GET OFFSET FOR WORKING SET LIST
            51         6C A7     3C  02E2   830 	MOVZWL	UAF$W_WSQUOTA(R7),R1		; GET QUOTA FROM AUTHORIZATION
   00000000'EF   00000000'EF     C3  02E6   840 	SUBL3	SCH$GL_FREELIM,PFN$GL_PHYPGCNT,R2 ; GET AVAILABLE PHYSICAL
                          52         02F1       
            52            51     D1  02F2   850 	CMPL	R1,R2				; CHECK FOR FIT
                          03     15  02F5   860 	BLEQ	120$				; YES, USE IT
            51            52     D0  02F7   870 	MOVL	R2,R1				; NO, MINIMIZE WITH PHYS PAGES
            52   00000000'EF     D0  02FA   880 120$:	MOVL	SGN$GL_MAXWSCNT,R2		; GET MAXIMUM WS COUNT
            52            51     D1  0301   890 	CMPL	R1,R2				; COMPARE WITH MAX LIST LENGTH
                          03     15  0304   900 	BLEQ	130$				; LESS, USE AS IS
            51            52     D0  0306   910 	MOVL	R2,R1				; NO, MINIMIZE TO FIT
            51            7041   9E  0309   920 130$:	MOVAB	-(R0)[R1],R1			; QUOTA+WSLIST-1
         18 A8            51     B0  030D   930 	MOVW	R1,PHD$W_WSQUOTA(R8)		; SET WSQUOTA
         0A A8            51     B0  0311   940 	MOVW	R1,PHD$W_WSAUTH(R8)		; SET WSAUTH
                 00000000'9F     D4  0315   950 	CLRL	@#CTL$GL_WSPEAK			; RECALCULATE WORKING SET PEAK
         6E A7            50     A1  031B   960 	ADDW3	R0,UAF$W_DFWSCNT(R7),PHD$W_DFWSCNT(R8)	; AND DEFAULT
                       1A A8         031F       
            50         72 A7     3C  0321   970 	MOVZWL	UAF$W_PGFLQUOTA(R7),R0		; GET PAGING FILE QUOTA
            50            08     78  0325   980 	ASHL	#8,R0,R0			; SCALE BY 256 TO GET PAGES
                          50         0328       
            50         5C A8     C2  0329   990 	SUBL	PHD$L_PGFLQUOTA(R8),R0		; COMPUTE DELTA
         5C A8            50     C0  032D  1000 	ADDL	R0,PHD$L_PGFLQUOTA(R8)		; ADD DELTA TO GET QUOTA
         34 A8            50     C0  0331  1010 	ADDL	R0,PHD$L_PGFLCNT(R8)		; AND COUNT AS AUTHORIZED
                 00000000'9F     D4  0335  1020 	CLRL	@#CTL$GL_VIRTPEAK		; RECALCULATE VIRTUAL PEAK
         44 A8         70 A7     B0  033B  1030 	MOVW	UAF$W_ASTLM(R7),PHD$W_ASTLM(R8)	; SET AST LIMIT
         3C A6         70 A7     B0  0340  1040 	MOVW	UAF$W_ASTLM(R7),PCB$W_ASTCNT(R6); AND WORKING COUNT
         4A A6         68 A7     B0  0345  1050 	MOVW	UAF$W_TQCNT(R7),PCB$W_TQCNT(R6)	; SET TIMER QUEUE COUNT
         62 A8         68 A7     B0  034A  1060 	MOVW	UAF$W_TQCNT(R7),PHD$W_TQLM(R8)	; AND REMEMBER LIMIT
         58 A8         54 A7     D0  034F  1070 	MOVL	UAF$L_CPUTIM(R7),PHD$L_CPULIM(R8); SET CPU TIME LIMIT
            68         58 A7     7D  0354  1080 	MOVQ	UAF$Q_PRIV(R7),PHD$Q_PRIVMSK(R8) ; MAKE PRIVILEGES CURRENT
            67            0C     28  0358  1090 	MOVC3	#12,UAF$T_USERNAME(R7),@#CTL$T_USERNAME
                 00000000'9F         035B       
         54 AB            06     E0  0360  1100 	BBS	#PRC_V_MODE,PRC_W_FLAGS(R11),140$ ; BR IF BATCH JOB
                          13         0364       
                          67     9F  0365  1110 	PUSHAB	UAF$T_USERNAME(R7)	; SET ADDRESS FOR DESCRIPTOR
            0C            20     3A  0367  1120 	LOCC	#^A/ /,#12,UAF$T_USERNAME(R7)	; FIND LAST SIGNIFICANT CHAR
LOGIND          - INITIALIZE COMMAND INTERPRETER AND STACK INDI  22-AUG-1978 00:34:30   VAX-11 MACRO X0.3-11               Page   9
01              INITIALIZE PROCESS                                                                                               (4)

                          67         036A       
            0C            50     C3  036B  1130 	SUBL3	R0,#12,-(SP)		; COMPUTE COUNT OF ACTIVE CHARS
                          7E         036E       
                                     036F  1140 	$SETPRN_S (SP)			; DECLARE PROCESS NAME
         10 A7            08     28  0378  1150 140$:	MOVC3	#8,UAF$T_ACCOUNT(R7),@#CTL$T_ACCOUNT
                 00000000'9F         037C       
   00000000'9F         58 A7     7D  0381  1160 	MOVQ	UAF$Q_PRIV(R7),@#CTL$GQ_PROCPRIV ; SET DEFAULT PRIVILEGE
            50            01     D0  0389  1170 	MOVL	#1,R0			; GOOD STATUS
                                 04  038C  1180 	RET				; BACK TO EXEC MODE
LOGIND          - INITIALIZE COMMAND INTERPRETER AND STACK INDI  22-AUG-1978 00:34:30   VAX-11 MACRO X0.3-11               Page  10
01              STACK INDIRECT FILE                                                                                              (5)

                                     038D   100 	.SBTTL	STACK INDIRECT FILE
                                     038D   110 ;+
                                     038D   120 ; LGI$STACKIND - STACK INDIRECT FILE
                                     038D   130 ;
                                     038D   140 ;	THIS ROUTINE IS CALLED TO STACK THE CURRENT INDIRECT FILE LEVEL 
                                     038D   150 ; 	AND TO  OPEN THE LOGIN INDIRECT FILE.
                                     038D   160 ;
                                     038D   170 ; INPUTS:
                                     038D   180 ;
                                     038D   190 ;	R11 IS PROCESS IMPURE AREA POINTER
                                     038D   200 ;
                                     038D   210 ; OUTPUTS:
                                     038D   220 ;
                                     038D   230 ;	THE CURRENT COMMAND FILE SPECIFICATION IS SAVED ON THE INDIRECT FILE
                                     038D   240 ;	STACK AND THE NEXT INDIRECT FILE IS PROCESSED.
                                     038D   250 ;	IF THE FILE CANNOT BE OPENED, THE INDIRECT STACK IS
                                     038D   260 ;	RETURNED TO THAT AT THE POINT OF ENTRY.
                                     038D   270 ;
                                     038D   280 ;			*** NOTE ***
                                     038D   290 ;
                                     038D   300 ;	THIS ROUTINE IS SIMLIFIED BY THE FACT THAT THE PREVIOUS
                                     038D   310 ;	INPUT MUST STAY OPEN AND THAT OUTPUT IS NOT CHANGED.
                                     038D   320 ;-
                                     038D   330  
                                     038D   340 STACKIND:				; STACK INDIRECT LEVEL
            53       0084 CB     D0  038D   350 	MOVL	PRC_L_STACKPT(R11),R3	; GET CURRENT INDIRECT STACK POINTER
            5A         A4 A3     9E  0392   360 	MOVAB	-IDF_K_LENGTH(R3),R10	; CALCULATE NEW INDIRECT STACK POINTER
       0084 CB            5A     D0  0396   370 	MOVL	R10,PRC_L_STACKPT(R11)	; SET NEW INDIRECT STACK POINTER
            58         1C AB     D0  039B   380 	MOVL	PRC_L_INDFAB(R11),R8	; GET ADDRESS OF INDIRECT FAB
            57         28 A8     D0  039F   390 	MOVL	FAB$L_NAM(R8),R7	; GET ADDRESS OF INDIRECT NAME BLOCK
         06 A3         56 AB     B0  03A3   400 	MOVW	PRC_W_ONLEVEL(R11),IDF_W_ONLEVEL(R3) ; SAVE ON ERROR LEVEL
         08 A3         58 AB     D0  03A8   410 	MOVL	PRC_L_ONERROR(R11),IDF_L_ONERROR(R3) ; AND ON ERROR COMMAND TEXT
            50         30 AB     9E  03AD   420 	MOVAB	PRC_Q_LABEL(R11),R0	; GET ADDRESS OF LABEL TABLE LISTHEAD
         1C A3            60     7D  03B1   430 	MOVQ	(R0),IDF_Q_LABEL(R3)	; SAVE PREVOUS LABEL TABLE ENTRY
            60            50     D0  03B5   440 	MOVL	R0,(R0)			; SET ADDRESS OF LISTHEAD AS FORWARD LINK
            80            80     D0  03B8   450 	MOVL	(R0)+,(R0)+		; SET ADDRESS OF LISTHEAD AS BACKWARD LINK
                                     03BB   460 	ASSUME	PRC_Q_LOCAL EQ PRC_Q_LABEL+8
         14 A3            60     7D  03BB   470 	MOVQ	(R0),IDF_Q_LOCAL(R3)	; SAVE LOCAL SYMBOL TABLE VALUES
            60            50     D0  03BF   480 	MOVL	R0,(R0)			; SET ADDRESS OF LISTHEAD AS FORWARD LINK
            80            80     D0  03C2   490 	MOVL	(R0)+,(R0)+		; SET ADDRESS OF LISTHEAD AS BACKWARD LINK
                       58 AB     D4  03C5   500 	CLRL	PRC_L_ONERROR(R11)	; CLEAR ADDRESS OF ON ERROR COMMAND TEXT
         56 AB            02     B0  03C8   510 	MOVW	#2,PRC_W_ONLEVEL(R11)	; RESET ON ERROR LEVEL TO ERROR
                                     03CC   520 	ASSUME	IDF_W_OUTISI EQ IDF_W_OUTIFI+2
                                 D0  03CC   530 	MOVL	IDF_W_OUTIFI(R3),-	; SAVE PREVIOUS INTERNAL FILE INDEX
         02 AA         02 A3         03CD   540 		IDF_W_OUTIFI(R10)	; AND INTERNAL SEQUENCE NUMBERS
         24 A3            10     28  03D1   550 	MOVC	#16,IDF_T_OUTDVI(R3),IDF_T_OUTDVI(R10) ; SAVE PREVIOUS DEVICE NAME
                       24 AA         03D5       
                          6A     B4  03D7   560 	CLRW	IDF_W_INPIFI(R10)	; CLEAR INPUT FILE INTERNAL INDEX
         56 AA            01     B0  03D9   570 	MOVW	#1@IDF_V_INPOPN,IDF_W_FLAG(R10) ;SET INPUT FILE OPEN FLAG
            51       0090'CF     9E  03DD   580 	MOVAB	W^LGI$G_UAFREC+UAF$T_LGICMD,R1 ; GET ADDRESS OF LOGIN CMD FILE
            50            81     90  03E2   590 	MOVB	(R1)+,R0		; NOW GET THE LENGTH
         2C A8            51     D0  03E5   600 	MOVL	R1,FAB$L_FNA(R8)	; SET ADDRESS OF SPECIFIC LOGIN CMD FILE
         34 A8            50     90  03E9   610 	MOVB	R0,FAB$B_FNS(R8)	; AND ITS LENGTH
                          0A     12  03ED   620 	BNEQ	10$			; BY IF SPECIAL FILE NAME IS PROVIDED
         34 A8            05     90  03EF   630 	MOVB	#DEFSIZ,FAB$B_FNS(R8)	; SET SIZE OF FILE NAME STRING
         2C A8       FC20 CF     9E  03F3   640 	MOVAB	DEFILE,FAB$L_FNA(R8)	; SET ADDRESS OF FILE NAME STRING
         30 A8       FC1F CF     9E  03F9   650 10$:	MOVAB	DCLDEF,FAB$L_DNA(R8)	; SET NORMAL DEFAULT FILE TYPE
LOGIND          - INITIALIZE COMMAND INTERPRETER AND STACK INDI  22-AUG-1978 00:34:30   VAX-11 MACRO X0.3-11               Page  11
01              STACK INDIRECT FILE                                                                                              (5)

         35 A8            04     90  03FF   660 	MOVB	#DCLDEFSIZ,FAB$B_DNS(R8); AND ITS LENGTH
       0004'DF       434D 8F     B1  0403   670 	CMPW	#^A/MC/,@W^LGI$Q_CLINAM+4 ; MCR COMMAND INTERPRETER?
                          06     12  040A   680 	BNEQ	20$			; BR IF NO
                                     040C   690 	ASSUME	MCRDEFSIZ EQ DCLDEFSIZ	;
         30 A8       FC10 CF     9E  040C   700 	MOVAB	MCRDEF,FAB$L_DNA(R8)	; SET MCR LOGIN FILE DEFAULT TYPE
         16 A8            02     90  0412   710 20$:	MOVB	#FAB$M_GET,FAB$B_FAC(R8) ; SET FILE ACCESS TYPE
         04 A8   000C0040 8F     D0  0416   720 	MOVL	#FAB$M_INP!FAB$M_PPF!-	; SET FILE OPEN OPTIONS
                                     041E   730 		FAB$M_SQO,FAB$L_FOP(R8)	; 
                       02 A8     B4  041E   740 	CLRW	FAB$W_IFI(R8)		; CLEAR INTERNAL FILE INDEX
                                     0421   750 	$OPEN	FAB=(R8)		; OPEN INDIRECT INPUT FILE
            67            50     E9  042A   760 	BLBC	R0,50$			; IF LBC OPEN FAILURE
            6A         02 A8     B0  042D   770 	MOVW	FAB$W_IFI(R8),IDF_W_INPIFI(R10) ; SAVE INPUT FILE INTERNAL INDEX
            59       00CC C8     9E  0431   780 	MOVAB	PRD_G_ALTINPRAB(R8),R9	; ADDRESS OF ALTERNATE INPUT RAB
         3C A9            58     D0  0436   790 	MOVL	R8,RAB$L_FAB(R9)	; LINK FAB TO RAB
         18 A9         40 A8     D0  043A   800 	MOVL	FAB$L_DEV(R8),RAB$L_CTX(R9) ; SAVE DEVICE CHARACTERISTICS
                                     043F   810 	$CONNECT RAB=(R9)		; CONNECT TO INPUT STREAM
            49            50     E9  0448   820 	BLBC	R0,50$			; IF LBC CONNECT FAILURE
         14 A7            1C     28  044B   830 	MOVC	#28,NAM$T_DVI(R7),IDF_T_INPDVI(R10) ; SAVE INPUT DEVICE ID
                       34 AA         044F       
         14 AB            59     D0  0451   840 	MOVL	R9,PRC_L_INDINPRAB(R11)	; SET INDIRECT INPUT RAB
         0C AA         18 A9     D0  0455   850 	MOVL	RAB$L_CTX(R9),IDF_L_INPRABCTX(R10) ; AND CONTEXT VALUE
            5E            10     C2  045A   860 	SUBL	#16,SP			; ALLOCATE SPACE TO STORE DEVICE NAME
            56         34 AA     9E  045D   870 	MOVAB	IDF_T_INPDVI(R10),R6	; POINT AT DEVICE ID FOR INPUT
            50            86     9A  0461   880 	MOVZBL	(R6)+,R0		; GET LENGTH OF DEVICE NAME
            66            50     28  0464   890 	MOVC	R0,(R6),1(SP)		; COPY DEVICE IDENTIFICATION
                       01 AE         0467       
            6E         5F 8F     90  0469   900 	MOVB	#^A/_/,(SP)		; INSERT PHYSICAL DEVICE DESIGNATOR
            7E            1B     9A  046D   910 	MOVZBL	#27,-(SP)		; INSERT ESCAPE AND TYPE ZERO
         02 AE            6A     B0  0470   920 	MOVW	IDF_W_INPIFI(R10),2(SP)	; INSERT INTERNAL FILE INDEX
                          6E     9F  0474   930 	PUSHAB	(SP)			; BUILD DESCRIPTOR FOR EQUIVALENCE NAME
            50            76     9A  0476   940 	MOVZBL	-(R6),R0		; GET LENGTH OF DEVICE IDENTIFICATION
                       05 A0     9F  0479   950 	PUSHAB	5(R0)			; SET LENGTH OF LOGICAL NAME
            50            5E     D0  047C   960 	MOVL	SP,R0			; SAVE ADDRESS OF EQUIVALENCE NAME DESCRIPTOR
                                     047F   970 	$CRELOG_S #LOG$C_PROCESS,W^LGI$Q_INPNAM,- ; CREATE LOGICAL NAME FOR
                                     047F   980 		(R0),#PSL$C_SUPER	; INPUT WITH IFI IN SUPER MODE
            5E            1C     C0  0490   990 	ADDL	#16+4+8,SP		; CLEAR BUFFER PLUS DESCRIPTOR
                                 05  0493  1000 	RSB				; 
                                     0494  1010  
                                     0494  1020 ;
                                     0494  1030 ; OPEN, CONNECT FAILURE -  UNSTACK THE INDIRECT LEVEL TO ORIGINAL
                                     0494  1040 ;
                                     0494  1050 ;
                                     0494  1060 ;	THIS ROUTINE IS ENTERED TO UNSTACK THE CONTEXT
                                     0494  1070 ;
                                     0494  1080  
         02 A8            6A     B0  0494  1090 50$:	MOVW	IDF_W_INPIFI(R10),FAB$W_IFI(R8) ; RESTORE INTERNAL FILE INDEX
                                     0498  1100 	$CLOSE	FAB=(R8)		; CLOSE INDIRECT INPUT FILE
            5A         5C AA     9E  04A1  1110 	MOVAB	IDF_K_LENGTH(R10),R10	; CALCULATE ADDRESS OF NEXT FRAME
       0084 CB            5A     D0  04A5  1120 	MOVL	R10,PRC_L_STACKPT(R11)	; SAVE UPDATED STACK POINTER
         38 AB         14 AA     7D  04AA  1130 	MOVQ	IDF_Q_LOCAL(R10),PRC_Q_LOCAL(R11) ; RESTORE LOCAL SYMBOL TABLE LISTHEAD
         30 AB         1C AA     7D  04AF  1140 	MOVQ	IDF_Q_LABEL(R10),PRC_Q_LABEL(R11) ; RESTORE LOCAL LABEL TABLE LISTHEAD
         56 AB         06 AA     B0  04B4  1150 	MOVW	IDF_W_ONLEVEL(R10),PRC_W_ONLEVEL(R11) ; RESTORE ON ERROR LEVEL NUMBER
         58 AB         08 AA     D0  04B9  1160 	MOVL	IDF_L_ONERROR(R10),PRC_L_ONERROR(R11) ; RESTORE ADDRESS OF COMMAND TEXT
                                 05  04BE  1170 	RSB				;
                                     04BF  1180  
                                     04BF  1190 	.END
LOGIND          - INITIALIZE COMMAND INTERPRETER AND STACK INDI  22-AUG-1978 00:34:30   VAX-11 MACRO X0.3-11               Page  12
SYMBOL TABLE                                                                                                                     (5)

$$.TMP1        = 00000001            FAB$L_FOP        00000004            FAB$M_UPI      = 00000040            
$$.TMP2        = 00000068            FAB$L_JNL        00000020            FAB$M_WCK      = 00000200            
BIT...         = 00000002            FAB$L_MRN        00000038            FAB$S_ORG      = 00000004            
CTL$AG_CLIDATA   ********   X   03   FAB$L_NAM        00000028            FAB$S_PPF_RAT  = 00000008            
CTL$GL_PHD       ********   X   03   FAB$L_SDC        00000044            FAB$V_BIO      = 00000005            
CTL$GL_VIRTPEAK  ********   X   03   FAB$L_STS        00000008            FAB$V_BLK      = 00000003            
CTL$GL_WSPEAK    ********   X   03   FAB$L_STV        0000000C            FAB$V_BRO      = 00000006            
CTL$GQ_PROCPRIV  ********   X   03   FAB$L_XAB        00000024            FAB$V_CBT      = 00000015            
CTL$T_ACCOUNT    ********   X   03   FAB$M_BIO      = 00000020            FAB$V_CIF      = 00000019            
CTL$T_USERNAME   ********   X   03   FAB$M_BLK      = 00000008            FAB$V_CR       = 00000001            
DCL$ALLOCSYM     ********   X   03   FAB$M_BRO      = 00000040            FAB$V_CTG      = 00000014            
DCLDEF           0000001C R     03   FAB$M_CBT      = 00200000            FAB$V_DEL      = 00000002            
DCLDEFSIZ      = 00000004            FAB$M_CIF      = 02000000            FAB$V_DFW      = 00000005            
DEFILE           00000017 R     03   FAB$M_CR       = 00000002            FAB$V_DLT      = 0000000F            
DEFSIZ         = 00000005            FAB$M_CTG      = 00100000            FAB$V_DMO      = 0000000C            
DJI$B_FLAGS      00000002            FAB$M_DEL      = 00000004            FAB$V_ESC      = 0000001B            
DJI$C_SIZE       00000080            FAB$M_DFW      = 00000020            FAB$V_EXE      = 00000007            
DJI$K_SIZE       00000080            FAB$M_DLT      = 00008000            FAB$V_FTN      = 00000000            
DJI$L_UIC        00000004            FAB$M_DMO      = 00001000            FAB$V_GET      = 00000001            
DJI$T_ACNTNAM    00000014            FAB$M_ESC      = 08000000            FAB$V_INP      = 00000013            
DJI$T_JOBNAME    00000038            FAB$M_EXE      = 00000080            FAB$V_JNL      = 00000016            
DJI$T_PARMS      00000040            FAB$M_FTN      = 00000001            FAB$V_KFO      = 0000001E            
DJI$T_USERNAM    00000008            FAB$M_GET      = 00000002            FAB$V_MSE      = 00000004            
DJI$T_VOLNAM     0000001C            FAB$M_INP      = 00080000            FAB$V_MXV      = 00000001            
DJI$W_DIRID      00000032            FAB$M_JNL      = 00400000            FAB$V_NAM      = 00000018            
DJI$W_FILEID     0000002C            FAB$M_KFO      = 40000000            FAB$V_NEF      = 0000000A            
DJI$W_MSGTYP     00000000            FAB$M_MSE      = 00000010            FAB$V_NFS      = 00000010            
FAB$B_BID        00000000            FAB$M_MXV      = 00000002            FAB$V_NIL      = 00000005            
FAB$B_BKS        0000003E            FAB$M_NAM      = 01000000            FAB$V_OFP      = 0000001D            
FAB$B_BLN        00000001            FAB$M_NEF      = 00000400            FAB$V_ORG      = 00000004            
FAB$B_DNS        00000035            FAB$M_NFS      = 00010000            FAB$V_POS      = 00000008            
FAB$B_FAC        00000016            FAB$M_NIL      = 00000020            FAB$V_PPF      = 00000012            
FAB$B_FNS        00000034            FAB$M_OFP      = 20000000            FAB$V_PPF_IND  = 0000000E            
FAB$B_FSZ        0000003F            FAB$M_POS      = 00000100            FAB$V_PPF_RAT  = 00000006            
FAB$B_ORG        0000001D            FAB$M_PPF      = 00040000            FAB$V_PRN      = 00000002            
FAB$B_RAT        0000001E            FAB$M_PPF_IND  = 00004000            FAB$V_PUT      = 00000000            
FAB$B_RFM        0000001F            FAB$M_PPF_RAT  = 00003FC0            FAB$V_RCK      = 00000017            
FAB$B_RTV        0000001C            FAB$M_PRN      = 00000004            FAB$V_RWC      = 0000000B            
FAB$B_SHR        00000017            FAB$M_PUT      = 00000001            FAB$V_RWO      = 00000007            
FAB$C_BID      = 00000003            FAB$M_RCK      = 00800000            FAB$V_SCF      = 0000000E            
FAB$C_BLN        00000050            FAB$M_RWC      = 00000800            FAB$V_SHRDEL   = 00000002            
FAB$C_FIX      = 00000001            FAB$M_RWO      = 00000080            FAB$V_SHRGET   = 00000001            
FAB$C_HSH      = 00000030            FAB$M_SCF      = 00004000            FAB$V_SHRPUT   = 00000000            
FAB$C_IDX      = 00000020            FAB$M_SHRDEL   = 00000004            FAB$V_SHRUPD   = 00000003            
FAB$C_MAXRFM   = 00000003            FAB$M_SHRGET   = 00000002            FAB$V_SPL      = 0000000D            
FAB$C_REL      = 00000010            FAB$M_SHRPUT   = 00000001            FAB$V_SQO      = 00000006            
FAB$C_RFM_DFLT = 00000002            FAB$M_SHRUPD   = 00000008            FAB$V_SUP      = 00000002            
FAB$C_SEQ      = 00000000            FAB$M_SPL      = 00002000            FAB$V_TEF      = 0000001C            
FAB$C_UDF      = 00000000            FAB$M_SQO      = 00000040            FAB$V_TMD      = 00000004            
FAB$C_VAR      = 00000002            FAB$M_SUP      = 00000004            FAB$V_TMP      = 00000003            
FAB$C_VFC      = 00000003            FAB$M_TEF      = 10000000            FAB$V_TRN      = 00000004            
FAB$K_BLN        00000050            FAB$M_TMD      = 00000010            FAB$V_UFM      = 0000001A            
FAB$L_ALQ        00000010            FAB$M_TMP      = 00000008            FAB$V_UFO      = 00000011            
FAB$L_CTX        00000018            FAB$M_TRN      = 00000010            FAB$V_UPD      = 00000003            
FAB$L_DEV        00000040            FAB$M_UFM      = 04000000            FAB$V_UPI      = 00000006            
FAB$L_DNA        00000030            FAB$M_UFO      = 00020000            FAB$V_WCK      = 00000009            
FAB$L_FNA        0000002C            FAB$M_UPD      = 00000008            FAB$W_BLS        0000003C            
LOGIND          - INITIALIZE COMMAND INTERPRETER AND STACK INDI  22-AUG-1978 00:34:30   VAX-11 MACRO X0.3-11               Page  13
SYMBOL TABLE                                                                                                                     (5)

FAB$W_DEQ        00000014            LGI_M_FULMSG   = 00000020            NAM$M_EXP_TYPE = 00000002            
FAB$W_IFI        00000002            LGI_M_NOACNT   = 00000002            NAM$M_EXP_VER  = 00000001            
FAB$W_MRS        00000036            LGI_M_SETDEF   = 00000004            NAM$M_GRP_MBR  = 00080000            
GBL...         = 00000000            LGI_M_SUBPRC   = 00000008            NAM$M_HIGHVER  = 00008000            
IDF_K_LENGTH     0000005C            LGI_V_CONTU    = 00000000            NAM$M_LOWVER   = 00004000            
IDF_L_INPRABCTX  0000000C            LGI_V_DELSEC   = 00000004            NAM$M_NODE     = 00020000            
IDF_L_ONCTLY     00000058            LGI_V_FULMSG   = 00000005            NAM$M_PPF      = 00010000            
IDF_L_ONERROR    00000008            LGI_V_NOACNT   = 00000001            NAM$M_QUOTED   = 00040000            
IDF_L_OUTRABCTX  00000010            LGI_V_SETDEF   = 00000002            NAM$M_WILDCARD = 00000100            
IDF_Q_LABEL      0000001C            LGI_V_SUBPRC   = 00000003            NAM$M_WILD_DIR = 00100000            
IDF_Q_LOCAL      00000014            LIB$_CREMAPSEC   ********   X   03   NAM$M_WILD_GRP = 01000000            
IDF_T_INPDVI     00000034            LOG$B_AMOD       0000000E            NAM$M_WILD_MBR = 02000000            
IDF_T_OUTDVI     00000024            LOG$B_TABLE      0000000B            NAM$M_WILD_NAME= 00000020            
IDF_V_INPOPN   = 00000000            LOG$B_TYPE       0000000A            NAM$M_WILD_SFD1= 02000000            
IDF_W_FLAG       00000056            LOG$C_GROUP    = 00000001            NAM$M_WILD_SFD2= 04000000            
IDF_W_INPDID     0000004A            LOG$C_LENGTH     00000014            NAM$M_WILD_SFD3= 08000000            
IDF_W_INPFID     00000044            LOG$C_NAMLENGTH= 00000040            NAM$M_WILD_SFD4= 10000000            
IDF_W_INPIFI     00000000            LOG$C_PROCESS  = 00000002            NAM$M_WILD_SFD5= 20000000            
IDF_W_INPRFA     00000050            LOG$C_SYSTEM   = 00000000            NAM$M_WILD_SFD6= 40000000            
IDF_W_ONLEVEL    00000006            LOG$K_LENGTH     00000014            NAM$M_WILD_SFD7= 80000000            
IDF_W_OUTIFI     00000002            LOG$L_LTBL       00000004            NAM$M_WILD_TYPE= 00000010            
IDF_W_OUTISI     00000004            LOG$L_LTFL       00000000            NAM$M_WILD_UFD = 01000000            
INISYM           00000142 R     03   LOG$L_MBXUCB     00000010            NAM$M_WILD_VER = 00000008            
IPL$_ASTDEL    = 00000002            LOG$T_NAME       00000014            NAM$S_DIR_LVLS = 00000003            
IPL$_HWCLK     = 00000018            LOG$W_GROUP      0000000C            NAM$T_DVI        00000014            
IPL$_IOPOST    = 00000004            LOG$W_SIZE       00000008            NAM$V_DIR_LVLS = 00000015            
IPL$_MAILBOX   = 0000000B            MCRDEF           00000020 R     03   NAM$V_EXP_DEV  = 00000007            
IPL$_POWER     = 0000001F            MCRDEFSIZ      = 00000004            NAM$V_EXP_DIR  = 00000006            
IPL$_QUEUEAST  = 00000006            NAM$B_BID        00000000            NAM$V_EXP_NAME = 00000002            
IPL$_SCHED     = 00000003            NAM$B_BLN        00000001            NAM$V_EXP_TYPE = 00000001            
IPL$_SYNCH     = 00000007            NAM$B_CURLVL     00000038            NAM$V_EXP_VER  = 00000000            
IPL$_TIMER     = 00000007            NAM$B_ESL        0000000B            NAM$V_GRP_MBR  = 00000013            
LGI$FATAL        ********   X   03   NAM$B_ESS        0000000A            NAM$V_HIGHVER  = 0000000F            
LGI$G_SECPAR     ********   X   03   NAM$B_RSL        00000003            NAM$V_LOWVER   = 0000000E            
LGI$G_UAFREC     ********   X   03   NAM$B_RSS        00000002            NAM$V_NODE     = 00000011            
LGI$INICLI       00000024 RG    03   NAM$C_BID      = 00000002            NAM$V_PPF      = 00000010            
LGI$K_BUFSIZ   = 00000100            NAM$C_BLN        00000038            NAM$V_QUOTED   = 00000012            
LGI$K_WORK       00000114            NAM$C_BLN_DIRWC  00000050            NAM$V_WILDCARD = 00000008            
LGI$L_PREVHAND   00000004            NAM$C_DVI      = 00000010            NAM$V_WILD_DIR = 00000014            
LGI$L_SAVSP      00000010            NAM$C_MAXRSS   = 00000080            NAM$V_WILD_GRP = 00000018            
LGI$L_SECFLGS    ********   X   03   NAM$C_MAXRSSLCL= 00000060            NAM$V_WILD_MBR = 00000019            
LGI$Q_CLINAM     ********   X   03   NAM$K_BLN        00000038            NAM$V_WILD_NAME= 00000005            
LGI$Q_DSKDES     ********   X   03   NAM$K_BLN_DIRWC  00000050            NAM$V_WILD_SFD1= 00000019            
LGI$Q_FILNAM     ********   X   03   NAM$L_DIRWCC1    00000040            NAM$V_WILD_SFD2= 0000001A            
LGI$Q_INADR      ********   X   03   NAM$L_DIRWCC2    00000044            NAM$V_WILD_SFD3= 0000001B            
LGI$Q_INPNAM     ********   X   03   NAM$L_DIRWCC3    00000048            NAM$V_WILD_SFD4= 0000001C            
LGI$Q_IOSB       00000008            NAM$L_DIRWCC4    0000004C            NAM$V_WILD_SFD5= 0000001D            
LGI$Q_RETADR     ********   X   03   NAM$L_DWC        00000038            NAM$V_WILD_SFD6= 0000001E            
LGI$SETUSRDEF    000001FD RG    03   NAM$L_ESA        0000000C            NAM$V_WILD_SFD7= 0000001F            
LGI$T_CLIFIL     ********   X   03   NAM$L_FNB        00000034            NAM$V_WILD_TYPE= 00000004            
LGI$T_CLINAM     ********   X   03   NAM$L_RLF        00000010            NAM$V_WILD_UFD = 00000018            
LGI$T_DSKNAM     ********   X   03   NAM$L_RSA        00000004            NAM$V_WILD_VER = 00000003            
LGI$T_WRKBUF     00000014            NAM$L_WCC        00000030            NAM$W_DID        0000002A            
LGI$W_FLAGS      00000000            NAM$M_DIR_LVLS = 00E00000            NAM$W_DID_NUM    0000002A            
LGI$W_MBCHAN     00000002            NAM$M_EXP_DEV  = 00000080            NAM$W_DID_RVN    0000002E            
LGI_M_CONTU    = 00000001            NAM$M_EXP_DIR  = 00000040            NAM$W_DID_SEQ    0000002C            
LGI_M_DELSEC   = 00000010            NAM$M_EXP_NAME = 00000004            NAM$W_FID        00000024            
LOGIND          - INITIALIZE COMMAND INTERPRETER AND STACK INDI  22-AUG-1978 00:34:30   VAX-11 MACRO X0.3-11               Page  14
SYMBOL TABLE                                                                                                                     (5)

NAM$W_FID_NUM    00000024            PCB$W_BIOCNT     0000003E            PHD$L_R5         0000009C            
NAM$W_FID_RVN    00000028            PCB$W_BIOLM      00000040            PHD$L_R6         000000A0            
NAM$W_FID_SEQ    00000026            PCB$W_BYTCNT     00000042            PHD$L_R7         000000A4            
NAM$W_PRV_DID    0000003A            PCB$W_BYTLM      00000068            PHD$L_R8         000000A8            
PCB$B_ASTACT     0000000C            PCB$W_DIOCNT     00000044            PHD$L_R9         000000AC            
PCB$B_ASTEN      0000000D            PCB$W_DIOLM      00000046            PHD$L_REFERFLT   00000014            
PCB$B_PRI        0000000B            PCB$W_FILCNT     00000048            PHD$L_SSP        00000080            
PCB$B_PRIB       00000033            PCB$W_GPGCNT     00000038            PHD$L_USP        00000084            
PCB$B_TYPE       0000000A            PCB$W_GRP        00000022            PHD$L_WSL        00000118            
PCB$B_WEFC       00000032            PCB$W_MEM        00000020            PHD$M_DALCSTX  = 00000002            
PCB$C_LENGTH     0000007C            PCB$W_MTXCNT     0000000E            PHD$M_PFMFLG   = 00000001            
PCB$K_LENGTH     0000007C            PCB$W_PPGCNT     0000003A            PHD$M_WSPEAKCHK= 00000004            
PCB$L_ASTQBL     00000014            PCB$W_PRCCNT     0000006A            PHD$Q_PRIVMSK    00000000            
PCB$L_ASTQFL     00000010            PCB$W_SIZE       00000008            PHD$S_ASTLVL   = 00000008            
PCB$L_EFC2P      00000058            PCB$W_STATE      00000030            PHD$S_P0LR     = 00000018            
PCB$L_EFC3P      0000005C            PCB$W_TMBU       00000036            PHD$V_ASTLVL   = 00000018            
PCB$L_EFCS       00000050            PCB$W_TQCNT      0000004A            PHD$V_DALCSTX  = 00000001            
PCB$L_EFCU       00000054            PFN$GL_PHYPGCNT  ********   X   03   PHD$V_P0LR     = 00000000            
PCB$L_EFWM       0000004C            PHD$B_ASTLVL     000000CF            PHD$V_PFMFLG   = 00000000            
PCB$L_OWNER      0000001C            PHD$B_DFPFC      00000038            PHD$V_WSPEAKCHK= 00000002            
PCB$L_PHD        00000064            PHD$B_PAGFIL     0000001F            PHD$W_ASTLM      00000044            
PCB$L_PHYPCB     00000018            PHD$B_PGTBPFC    00000039            PHD$W_BAK        00000048            
PCB$L_PID        00000060            PHD$C_LENGTH     00000118            PHD$W_DFWSCNT    0000001A            
PCB$L_PQB        0000004C            PHD$C_PHDPAGCTX= 00000008            PHD$W_EMPTPG     000000D8            
PCB$L_SQBL       00000004            PHD$K_LENGTH     00000118            PHD$W_EXTDYNWS   00000076            
PCB$L_SQFL       00000000            PHD$L_BIOCNT     00000054            PHD$W_FILLM      00000060            
PCB$L_STS        00000028            PHD$L_CPULIM     00000058            PHD$W_FLAGS      0000003A            
PCB$L_UIC        00000020            PHD$L_CPUTIM     0000003C            PHD$W_PHVINDEX   00000046            
PCB$L_WSSWP      00000024            PHD$L_DIOCNT     00000050            PHD$W_PRCLM      00000042            
PCB$L_WTIME      0000002C            PHD$L_ESP        0000007C            PHD$W_PST        00000020            
PCB$T_LNAME      0000006C            PHD$L_FREP0VA    00000028            PHD$W_PSTBASMAX  0000004A            
PCB$V_ASTPEN   = 00000011            PHD$L_FREP1VA    00000030            PHD$W_PSTFREE    00000026            
PCB$V_BATCH    = 0000000E            PHD$L_FREPTECNT  0000002C            PHD$W_PSTLAST    00000024            
PCB$V_DELPEN   = 00000001            PHD$L_KSP        00000078            PHD$W_PTCNTACT   00000070            
PCB$V_FORCPEN  = 00000002            PHD$L_P0BR       000000C8            PHD$W_PTCNTLCK   0000006C            
PCB$V_HIBER    = 00000013            PHD$L_P0LRASTL   000000CC            PHD$W_PTCNTMAX   00000072            
PCB$V_INQUAN   = 00000003            PHD$L_P1BR       000000D0            PHD$W_PTCNTVAL   0000006E            
PCB$V_LOGIN    = 00000014            PHD$L_P1LR       000000D4            PHD$W_QUANT      00000040            
PCB$V_NETWRK   = 00000015            PHD$L_PAGEFLTS   0000004C            PHD$W_TQLM       00000062            
PCB$V_NOACNT   = 0000000F            PHD$L_PAGFIL     0000001C            PHD$W_WSAUTH     0000000A            
PCB$V_NODELET  = 00000017            PHD$L_PC         000000C0            PHD$W_WSDYN      0000000E            
PCB$V_PHDRES   = 00000012            PHD$L_PCB        00000078            PHD$W_WSFLUID    00000074            
PCB$V_PSWAPM   = 00000004            PHD$L_PGFLCNT    00000034            PHD$W_WSLAST     00000012            
PCB$V_PWRAST   = 00000016            PHD$L_PGFLQUOTA  0000005C            PHD$W_WSLIST     00000008            
PCB$V_RES      = 00000000            PHD$L_PSL        000000C4            PHD$W_WSLOCK     0000000C            
PCB$V_RESPEN   = 00000005            PHD$L_PSTBASOFF  00000020            PHD$W_WSLX       0000004A            
PCB$V_SSFEXC   = 00000006            PHD$L_PTWSLELCK  00000064            PHD$W_WSNEXT     00000010            
PCB$V_SSFEXCE  = 00000007            PHD$L_PTWSLEVAL  00000068            PHD$W_WSQUOTA    00000018            
PCB$V_SSFEXCS  = 00000008            PHD$L_R0         00000088            PR$_ACCR       = 00000029            
PCB$V_SSFEXCU  = 00000009            PHD$L_R1         0000008C            PR$_ACCS       = 00000028            
PCB$V_SSRWAIT  = 0000000A            PHD$L_R10        000000B0            PR$_ASTLVL     = 00000013            
PCB$V_SUSPEN   = 0000000B            PHD$L_R11        000000B4            PR$_ESP        = 00000001            
PCB$V_SWPVBN   = 00000010            PHD$L_R12        000000B8            PR$_ICCS       = 00000018            
PCB$V_WAKEPEN  = 0000000C            PHD$L_R13        000000BC            PR$_ICR        = 0000001A            
PCB$V_WALL     = 0000000D            PHD$L_R2         00000090            PR$_IPL        = 00000012            
PCB$W_APTCNT     00000034            PHD$L_R3         00000094            PR$_ISP        = 00000004            
PCB$W_ASTCNT     0000003C            PHD$L_R4         00000098            PR$_KSP        = 00000000            
LOGIND          - INITIALIZE COMMAND INTERPRETER AND STACK INDI  22-AUG-1978 00:34:30   VAX-11 MACRO X0.3-11               Page  15
SYMBOL TABLE                                                                                                                     (5)

PR$_MAPEN      = 00000038            PRC_L_ONCTLY     0000009C            PRD_K_XLENGTH    000001B8            
PR$_NICR       = 00000019            PRC_L_ONERROR    00000058            PRD_T_OUTFNM     000001A4            
PR$_P0BR       = 00000008            PRC_L_OUTRAB     0000000C            PRD_W_OUTDID     0000019E            
PR$_P0LR       = 00000009            PRC_L_PROCUIC    00000098            PRD_W_OUTFID     00000198            
PR$_P1BR       = 0000000A            PRC_L_SAVAP      00000000            PRV$V_ALLSPOOL = 00000004            
PR$_P1LR       = 0000000B            PRC_L_SAVFP      00000004            PRV$V_BUGCHK   = 00000017            
PR$_PCBB       = 00000010            PRC_L_SEVERITY   00000040            PRV$V_CMEXEC   = 00000001            
PR$_PME        = 0000003D            PRC_L_STACKLM    00000088            PRV$V_CMKRNL   = 00000000            
PR$_RXCS       = 00000020            PRC_L_STACKPT    00000084            PRV$V_DETACH   = 00000005            
PR$_RXDB       = 00000021            PRC_L_STATUS     00000044            PRV$V_DIAGNOSE = 00000006            
PR$_SBIER      = 00000034            PRC_L_SYMBOL     0000004C            PRV$V_EXQUOTA  = 00000013            
PR$_SBIFS      = 00000030            PRC_M_CNTRLY   = 00000002            PRV$V_GROUP    = 00000008            
PR$_SBIMT      = 00000033            PRC_M_DBGQUAL  = 00000200            PRV$V_GRPNAM   = 00000003            
PR$_SBIQC      = 00000036            PRC_M_DBGTRUE  = 00000400            PRV$V_LOG_IO   = 00000007            
PR$_SBIS       = 00000031            PRC_M_DISABL   = 00000004            PRV$V_MOUNT    = 00000011            
PR$_SBISC      = 00000032            PRC_M_EXIT     = 00000008            PRV$V_NETMBX   = 00000014            
PR$_SBITA      = 00000035            PRC_M_GOEOF    = 00000001            PRV$V_NOACNT   = 00000009            
PR$_SBR        = 0000000C            PRC_M_GOTO     = 00000010            PRV$V_OPER     = 00000012            
PR$_SCBB       = 00000011            PRC_M_HANGUP   = 00001000            PRV$V_PHY_IO   = 00000016            
PR$_SID        = 0000003E            PRC_M_IND      = 00000020            PRV$V_PRMCEB   = 0000000A            
PR$_SIRR       = 00000014            PRC_M_MODE     = 00000040            PRV$V_PRMGBL   = 00000018            
PR$_SISR       = 00000015            PRC_M_NOCTLY   = 00004000            PRV$V_PRMMBX   = 0000000B            
PR$_SLR        = 0000000D            PRC_M_PAUSE    = 00002000            PRV$V_PSWAPM   = 0000000C            
PR$_SSP        = 00000002            PRC_M_USRDET   = 00000100            PRV$V_SETPRI   = 0000000D            
PR$_TBIA       = 00000039            PRC_M_VERIFY   = 00000080            PRV$V_SETPRV   = 0000000E            
PR$_TBIS       = 0000003A            PRC_M_YLEVEL   = 00000800            PRV$V_SYSGBL   = 00000019            
PR$_TODR       = 0000001B            PRC_Q_ALLOCREG   00000020            PRV$V_SYSNAM   = 00000002            
PR$_TXCS       = 00000022            PRC_Q_GLOBAL     00000028            PRV$V_TMPMBX   = 0000000F            
PR$_TXDB       = 00000023            PRC_Q_LABEL      00000030            PRV$V_VOLPRO   = 00000015            
PR$_USP        = 00000003            PRC_Q_LOCAL      00000038            PRV$V_WORLD    = 00000010            
PR$_WCSA       = 0000002C            PRC_V_CNTRLY   = 00000001            PSL$C_EXEC     = 00000001            
PR$_WCSD       = 0000002D            PRC_V_DBGQUAL  = 00000009            PSL$C_KERNEL   = 00000000            
PRC_B_DEFRADIX   00000092            PRC_V_DBGTRUE  = 0000000A            PSL$C_SUPER    = 00000002            
PRC_B_EXMDEPMOD  00000091            PRC_V_DISABL   = 00000002            PSL$C_USER     = 00000003            
PRC_B_EXMDEPWID  00000090            PRC_V_EXIT     = 00000003            PSL$M_CM       = 80000000            
PRC_K_DEC      = 00000001            PRC_V_GOEOF    = 00000000            PSL$M_CURMOD   = 03000000            
PRC_K_HEX      = 00000000            PRC_V_GOTO     = 00000004            PSL$M_DV       = 00000080            
PRC_K_LENGTH     000000A0            PRC_V_HANGUP   = 0000000C            PSL$M_FPD      = 08000000            
PRC_K_OCT      = 00000002            PRC_V_IND      = 00000005            PSL$M_FU       = 00000040            
PRC_L_CLIWRK0    0000005C            PRC_V_MODE     = 00000006            PSL$M_IPL      = 001F0000            
PRC_L_CLIWRK1    00000060            PRC_V_NOCTLY   = 0000000E            PSL$M_IS       = 04000000            
PRC_L_CLIWRK2    00000064            PRC_V_PAUSE    = 0000000D            PSL$M_IV       = 00000020            
PRC_L_CLIWRK3    00000068            PRC_V_USRDET   = 00000008            PSL$M_PRVMOD   = 00C00000            
PRC_L_CLIWRK4    0000006C            PRC_V_VERIFY   = 00000007            PSL$M_SAFBITS  = 000037FF            
PRC_L_ERRRAB     00000010            PRC_V_YLEVEL   = 0000000B            PSL$M_TBIT     = 00000010            
PRC_L_EXMDEPADR  0000008C            PRC_W_CLIFLAG    00000052            PSL$M_TP       = 40000000            
PRC_L_EXTARG     00000078            PRC_W_ERRIFI     00000052            PSL$S_CURMOD   = 00000002            
PRC_L_EXTBLK     00000070            PRC_W_FLAGS      00000054            PSL$S_IPL      = 00000005            
PRC_L_EXTCOD     00000080            PRC_W_INPCHAN    00000050            PSL$S_PRVMOD   = 00000002            
PRC_L_EXTHND     00000074            PRC_W_ONLEVEL    00000056            PSL$V_CM       = 0000001F            
PRC_L_EXTPRM     0000007C            PRD_G_ALTINPRAB  000000CC            PSL$V_CURMOD   = 00000018            
PRC_L_INDEPTH    00000048            PRD_G_ALTOUTRAB  00000110            PSL$V_DV       = 00000007            
PRC_L_INDFAB     0000001C            PRD_G_FAB        00000000            PSL$V_FPD      = 0000001B            
PRC_L_INDINPRAB  00000014            PRD_G_INPRAB     00000088            PSL$V_FU       = 00000006            
PRC_L_INDOUTRAB  00000018            PRD_G_NAM        00000050            PSL$V_IPL      = 00000010            
PRC_L_INPRAB     00000008            PRD_G_OUTRAB     00000154            PSL$V_IS       = 0000001A            
PRC_L_LSTSTATUS  00000094            PRD_K_LENGTH     00000198            PSL$V_IV       = 00000005            
LOGIND          - INITIALIZE COMMAND INTERPRETER AND STACK INDI  22-AUG-1978 00:34:30   VAX-11 MACRO X0.3-11               Page  16
SYMBOL TABLE                                                                                                                     (5)

PSL$V_PRVMOD   = 00000016            RAB$M_TMO      = 02000000            SYM_W_SIZE       00000008            
PSL$V_TBIT     = 00000004            RAB$M_TPT      = 00000002            SYS$CLOSE        ********  GX   03   
PSL$V_TP       = 0000001E            RAB$M_UIF      = 00000010            SYS$CMKRNL       ********   X   03   
RAB$B_BID        00000000            RAB$M_ULK      = 00040000            SYS$CONNECT      ********  GX   03   
RAB$B_BLN        00000001            RAB$M_WAT      = 00020000            SYS$CRELOG       ********   X   03   
RAB$B_KRF        00000035            RAB$M_WBH      = 00000400            SYS$CRETVA       ********   X   03   
RAB$B_KSZ        00000034            RAB$S_PPF_RAT  = 00000008            SYS$DGBLSC       ********   X   03   
RAB$B_MBC        00000037            RAB$V_ASY      = 00000000            SYS$OPEN         ********  GX   03   
RAB$B_MBF        00000036            RAB$V_BIO      = 0000000B            SYS$SETDDIR      ********   X   03   
RAB$B_PSZ        00000034            RAB$V_CCO      = 0000001F            SYS$SETPRN       ********   X   03   
RAB$B_RAC        0000001E            RAB$V_CVT      = 0000001A            UAF$B_FLAGS      0000008B            
RAB$B_ROP1       00000005            RAB$V_EOF      = 00000008            UAF$B_PRI        0000008A            
RAB$B_ROP2       00000006            RAB$V_FDL      = 00000006            UAF$C_LENGTH     000000B8            
RAB$B_ROP3       00000007            RAB$V_HSH      = 00000007            UAF$K_LENGTH     000000B8            
RAB$B_TMO        0000001F            RAB$V_KGE      = 00000015            UAF$L_CPUTIM     00000054            
RAB$C_BID      = 00000001            RAB$V_KGT      = 00000016            UAF$L_LEVEL      0000008C            
RAB$C_BLN        00000044            RAB$V_LIM      = 0000000E            UAF$L_PWD        0000000C            
RAB$C_KEY      = 00000001            RAB$V_LOA      = 0000000D            UAF$L_UIC        00000018            
RAB$C_RFA      = 00000002            RAB$V_LOC      = 00000010            UAF$Q_PRIV       00000058            
RAB$C_SEQ      = 00000000            RAB$V_MAS      = 00000005            UAF$T_ACCOUNT    00000010            
RAB$K_BLN        00000044            RAB$V_NLK      = 00000014            UAF$T_DEFCLI     0000004C            
RAB$L_BKT        00000038            RAB$V_NXR      = 00000017            UAF$T_DEFDEV     0000003C            
RAB$L_CTX        00000018            RAB$V_PMT      = 0000001E            UAF$T_DEFDIR     0000001C            
RAB$L_DCT        00000038            RAB$V_PPF_IND  = 0000000E            UAF$T_LGICMD     00000090            
RAB$L_FAB        0000003C            RAB$V_PPF_RAT  = 00000006            UAF$T_OWNER      00000074            
RAB$L_KBF        00000030            RAB$V_PTA      = 0000001D            UAF$T_USERNAME   00000000            
RAB$L_PBF        00000030            RAB$V_RAH      = 00000009            UAF$V_DEFCLI   = 00000001            
RAB$L_RBF        00000028            RAB$V_RLK      = 00000013            UAF$V_DISCTLY  = 00000000            
RAB$L_RFA0       00000010            RAB$V_RNE      = 00000018            UAF$W_ASTLM      00000070            
RAB$L_RHB        0000002C            RAB$V_RNF      = 0000001B            UAF$W_BIOLM      00000060            
RAB$L_ROP        00000004            RAB$V_TMO      = 00000019            UAF$W_BYTLM      00000062            
RAB$L_STS        00000008            RAB$V_TPT      = 00000001            UAF$W_DFWSCNT    0000006E            
RAB$L_STV        0000000C            RAB$V_UIF      = 00000004            UAF$W_DIOLM      00000064            
RAB$L_UBF        00000024            RAB$V_ULK      = 00000012            UAF$W_FILLM      00000066            
RAB$M_ASY      = 00000001            RAB$V_WAT      = 00000011            UAF$W_FILPRT     00000088            
RAB$M_BIO      = 00000800            RAB$V_WBH      = 0000000A            UAF$W_GRP        0000001A            
RAB$M_CCO      = 80000000            RAB$W_ISI        00000002            UAF$W_MEM        00000018            
RAB$M_CVT      = 04000000            RAB$W_RFA        00000010            UAF$W_PGFLQUOTA  00000072            
RAB$M_EOF      = 00000100            RAB$W_RFA4       00000014            UAF$W_PRCCNT     0000006A            
RAB$M_FDL      = 00000040            RAB$W_RSZ        00000022            UAF$W_TQCNT      00000068            
RAB$M_HSH      = 00000080            RAB$W_USZ        00000020            UAF$W_WSQUOTA    0000006C            
RAB$M_KGE      = 00200000            RESERVED         00000000 R     03   _$$_           = 000000EF            
RAB$M_KGT      = 00400000            SCH$GL_CURPCB    ********   X   03   
RAB$M_LIM      = 00004000            SCH$GL_FREELIM   ********   X   03   
RAB$M_LOA      = 00002000            SEC$V_SYSGBL     ********   X   03   
RAB$M_LOC      = 00010000            SGN$GL_MAXWSCNT  ********   X   03   
RAB$M_MAS      = 00000020            STACKIND         0000038D R     03   
RAB$M_NLK      = 00100000            SYM_B_TYPE       0000000A            
RAB$M_NXR      = 00800000            SYM_K_DECIMAL  = 00000004            
RAB$M_PMT      = 40000000            SYM_K_HEXDEC   = 00000005            
RAB$M_PPF_IND  = 00004000            SYM_K_LOGICAL  = 00000002            
RAB$M_PPF_RAT  = 00003FC0            SYM_K_OCTAL    = 00000003            
RAB$M_PTA      = 20000000            SYM_K_PERM     = 00000001            
RAB$M_RAH      = 00000200            SYM_K_STRING   = 00000000            
RAB$M_RLK      = 00080000            SYM_L_BL         00000004            
RAB$M_RNE      = 01000000            SYM_L_FL         00000000            
RAB$M_RNF      = 08000000            SYM_T_SYMBOL     0000000C            
LOGIND          - INITIALIZE COMMAND INTERPRETER AND STACK INDI  22-AUG-1978 00:34:30   VAX-11 MACRO X0.3-11               Page  17
PROGRAM SECTION SYNOPSIS                                                                                                         (5)



PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
$ABS$            000001B8      02     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
PURE             000004BF      03     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD  NOWRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
2498. BYTES LEFT IN FREE MEMORY POOL.
2558. BYTES OF RECLAIMED MEMORY.
OBJ$:LOGIND,LIS$:LOGIND/-SP=EXECML$/ML,LIB$:LOGIN/ML,SRC$:LOGIND
97 MLB DIR RDS - 1306 GETS TO DEFINE 41 MACROS. 98 INTER. FILE WRITES. 
