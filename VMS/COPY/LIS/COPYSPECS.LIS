
; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 1
; Digital Equipment Corporation
;
;	0001	MODULE copyspecs (  ! Manipulates input and output specifications for COPY utility
;	0002	                    LANGUAGE (BLISS32),
;	0003	                    IDENT = 'X00002'
;	0004	                    ) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1978
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	! FACILITY:	COPY Command
;	0028	!
;	0029	! ABSTRACT:
;	0030	!
;	0031	!	This module obtains input and output specifications from the CLI and opens
;	0032	!	the associated files.
;	0033	!
;	0034	! ENVIRONMENT:
;	0035	!
;	0036	!	VAX/VMS operating system, unprivileged user mode utility,
;	0037	!	operates at non-AST level.
;	0038	!
;	0039	!--
;	0040	!++
;	0041	!
;	0042	! AUTHOR:	Carol Peters,	CREATION DATE:	14 April 1978 14:17
;	0043	!
;	0044	! REVISION HISTORY:
;	0045	!
;	0046	!	X00002	C. Peters	17-May-1978	In FAB_INIT of output file, specify TRN bit.
;	0047	!						This makes a correspondence with RAB's TPT bit.
;	0048	
;	0049	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 2
; Digital Equipment Corporation
;
;	0050	!
;	0051	! Table of Contents
;	0052	!
;	0053	FORWARD ROUTINE
;	0054	    copy$get_infile,					! Obtains the input file specification
;	0055	    copy$opn_infile,					! Opens the current input file
;	0056	    copy$get_outfil,					! Obtains the output file specification
;	0057	    copy$opn_outfil,					! Opens the current output file
;	0058	    setup_extend,					! Sets up an output file to be extended.
;	0059	    setup_outxab	: NOVALUE,			! Sets up XAB fields for an output file.
;	0060	    apply_out_qual	: NOVALUE,			! Sets output fields depending on file qualifiers.
;	0061	    setup_conc_xab	: NOVALUE,			! Sets up XAB protection fields.
;	0062	    setup_prot_xab	: NOVALUE;			! Sets up XAB protection fields.
;	0063	
;	0064	!
;	0065	! Include files
;	0066	!
;	0067	
;	0068	LIBRARY 'SYS$LIBRARY:STARLET.L32';			! VAX/VMS system definitions
;	0069	
;	0070	LIBRARY 'SYS$LIBRARY:CLIMAC.L32';			! Definitiona for the Command Language Interface
;	0071	
;	0072	REQUIRE 'SRC$:COPY.REQ';				! Common COPY literal definitions and macros
;	0287	
;	0288	REQUIRE 'SRC$:COPYMSG.REQ';				! Definition of macros to SIGNAL a message
;	0336	
;	0337	!
;	0338	! Global variables
;	0339	!
;	0340	
;	0341	!
;	0342	! Own variables
;	0343	!
;	0344	
;	0345	!
;	0346	! Macros
;	0347	!
;	0348	
;	0349	!
;	0350	! Equated symbols
;	0351	!
;	0352	
;	0353	!
;	0354	! External variables
;	0355	!
;	0356	EXTERNAL
;	0357	    align_location,					! location alignment for output file
;	0358	    align_option,					! output alignment option
;	0359	    align_type,						! type of output file alignment
;	0360	    alloc_value,					! allocation quantity for output file
;	0361	    appe_cont_qual	: BLOCK [, BYTE],		! CONTIGUOUS qualifier CLI data area for APPEND
;	0362	    appe_oread_qual	: BLOCK [, BYTE],		! READ_CHECK qualifier CLI data area for APPEND
;	0363	    appe_writ_qual	: BLOCK [, BYTE],		! WRITE_CHECK qualifier CLI data area for APPEND
;	0364	    cli_work_area	: BLOCK [, BYTE],		! CLI dynamic work area
;	0365	    cleanup_desc	: BLOCK [, BYTE],		! Parameter "cleanup" request work area

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 2-1
; Digital Equipment Corporation
;
;	0366	!
;	0367	!   Note that COPY$CLI_RESULT, COPY$CLI_STATUS, and COPY$SEM_STATUS are declared external
;	0368	!   in the REQUIRE file COPY.REQ.
;	0369	!
;	0370	    copy_conc_qual	: BLOCK [, BYTE],		! CONCATENATE qualifier CLI data area for COPY
;	0371	    copy_cont_qual	: BLOCK [, BYTE],		! CONTIGUOUS qualifier CLI data area for COPY
;	0372	    copy_oread_qual	: BLOCK [, BYTE],		! READ_CHECK qualifier CLI data area for COPY
;	0373	    copy_writ_qual	: BLOCK [, BYTE],		! WRITE_CHECK qualifier CLI data area for COPY
;	0374	    dummy_nam_blk	: BLOCK [, BYTE],		! Holds input file specification, used for "stickiness" 
;	0375	    extension_value,					! output extension quantity
;	0376	    file_max_value,					! maximum number of records for output file
;	0377	    infile_desc		: BLOCK [, BYTE],		! CLI block for input file request work area
;	0378	    in_name_desc	: VECTOR,			! Descriptor of input file specification
;	0379	    outfile_desc	: BLOCK [, BYTE],		! CLI block for output file dynamic work area
;	0380	    out_name_desc	: VECTOR,			! descriptor for output file specification
;	0381	    protect_and		: WORD,				! Protection value AND mask
;	0382	    protect_or		: WORD;				! Protection value OR mask
;	0383	
;	0384	EXTERNAL ROUTINE
;	0385	    copy$calc_alq,					! Calculates a file extension quantity.
;	0386	    copy$close_outf,					! Closes an output file
;	0387	    copy$inopn_err,					! Handles an input $OPEN error
;	0388	    copy$log_msg,					! Logs a message about COPY's activities
;	0389	    copy$oclose_err,					! Handles an output file close error.
;	0390	    copy$outopn_err,					! Handles an output $OPEN error
;	0391	    copy$pars_infil,					! Parses an input file specification
;	0392	    copy$semantics;					! Determines semantics of a command

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 3
; Digital Equipment Corporation
;
;	0393	GLOBAL ROUTINE copy$get_infile (input_fab, input_nam, input_xaball) =
;	0394								! Obtain input file specification
;	0395	
;	0396	!++
;	0397	! Functional description:
;	0398	!
;	0399	!	This routine gets an input file specification and all
;	0400	!	related qualifiers from the Command Language Interpreter. Then
;	0401	!	the file specification is parsed.
;	0402	!
;	0403	!	If a wildcard specification is still being processed, or if
;	0404	!	no more input specifications are available, this routine just
;	0405	!	returns successfully.
;	0406	!
;	0407	!	A series of flags are set if certain conditions obtain. These
;	0408	!	conditions describe the current list of files that are candidates
;	0409	!	for concatenation. The flags are set if the file specification
;	0410	!	contains input wildcards, an explicit wildcard version number, or an explicit version number.
;	0411	!
;	0412	!	Another flag applies only to this specification and says whether it contains any wildcards.
;	0413	!
;	0414	! Calling sequence:
;	0415	!
;	0416	!	copy$get_infile (input_fab.ra.v, input_nam.ra.v, input_xaball.ra.v)
;	0417	!
;	0418	! Input parameters:
;	0419	!
;	0420	!	input_fab	- the FAB to use for this input specification
;	0421	!	input_nam	- the NAM to use for this input specification
;	0422	!	input_xaball	- the XABALL to use for this input specification
;	0423	!
;	0424	! Implicit inputs:
;	0425	!
;	0426	!	wildcard_active	- a bit in COPY$CLI_STATUS that says that we are
;	0427	!			  already processing an input wildcard.
;	0428	!	infile_desc	- CLI block for input file specifications
;	0429	!	cleanup_desc	- CLI block for end of input cleanup operations
;	0430	!
;	0431	! Output parameters:
;	0432	!
;	0433	!	none
;	0434	!
;	0435	! Implicit outputs:
;	0436	!
;	0437	!	The fields of the FAB and the NAM block are filled in according
;	0438	!	to the CLI call and the $PARSE function call.
;	0439	!
;	0440	!	The RSL field of the dummy_nam_blk is filled in by the routine COPY$PARS_INFIL. This is later
;	0441	!	used in parsing the name additional input files or output files.
;	0442	!
;	0443	!	A bit in COPY$CLI_STATUS may be set:
;	0444	!
;	0445	!		multiple_input	- more than one input file specification in the command
;	0446	!		wildcard_active	- if a wildcard is present
;	0447	!

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 3-1
; Digital Equipment Corporation
;
;	0448	!	Some bits in COPY$SEM_STATUS may be set:
;	0449	!
;	0450	!		wild_input	- wildcard fields exist
;	0451	!		wild_inp_ver	- a wildcard version number exists
;	0452	!		exp_inp_ver	- an explicit version number exists
;	0453	!
;	0454	! Routine value:
;	0455	!
;	0456	!	OK		- success
;	0457	!	NO_MORE_FILES	- success, no more input specifications
;	0458	!	NO_FILE		- failure
;	0459	!
;	0460	! Side effects:
;	0461	!
;	0462	!	none
;	0463	!
;	0464	!--
;	0465	
;	0466	    BEGIN
;	0467	
;	0468	    MAP
;	0469	        input_fab	: REF BLOCK [, BYTE],		! FAB to use with input file
;	0470	        input_nam	: REF BLOCK [, BYTE],		! NAM to use with input file
;	0471	        input_xaball	: REF BLOCK [, BYTE];		! XABALL to use with input file
;	0472	
;	0473	!
;	0474	! Return if a wildcard file specification is currently being processed.
;	0475	!
;	0476	
;	0477	    IF .wildcard_active					! If a wildcard specification is currently
;	0478	    THEN						! being processed, then just return to caller.
;	0479	        RETURN ok;
;	0480	
;	0481	!
;	0482	! Also return if there are no more input specifications coming.
;	0483	!
;	0484	
;	0485	    IF NOT .infile_desc [cli$v_concatinp]		! If no more input specs are coming,
;	0486	    THEN
;	0487	        RETURN no_more_files;				!    then return successfully, without a file.
;	0488	
;	0489	!
;	0490	! Get the first input file specification from the Command Language Interpreter.
;	0491	!
;	0492	
;	0493	    call_cli (						! Call the CLI with the following arguments:
;	0494	                infile_desc,				!    Input file descriptor address
;	0495	                cli_work_area,				!    CLI work area address
;	0496	                copy$cli_status);			!    COPY status indicator vector address
;	0497	
;	0498	    IF NOT .infile_desc [cli$v_concatinp]		! If no more file specifications follow,
;	0499	    THEN
;	0500	        call_cli (					! call the CLI with the following arguments:
;	0501	                    cleanup_desc,			!    Parameter cleanup descriptor address
;	0502	                    cli_work_area,			!    CLI work area address

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 3-2
; Digital Equipment Corporation
;
;	0503	                    copy$cli_status)			!    COPY status indicator vector address
;	0504	
;	0505	    ELSE
;	0506	        multiple_input = TRUE;				! Otherwise, note that multiple input specifications
;	0507								!    will be seen.
;	0508	
;	0509	!
;	0510	! Initialize the input file FAB.
;	0511	!
;	0512	
;	0513	    $FAB_INIT (						! Setup the input file FAB as follows:
;     P 0514	                FAB = .input_fab,			!    FAB address is the input parameter
;     P 0515	                FAC = <GET,BRO>,				!    Input file, mixed block and record access
;     P 0516	                SHR = GET,				!    Allow others to read the input file
;     P 0517	                DNA = 0,				!    No default file specification
;     P 0518	                RTV = 0,				!    Use default retrieval window size
;     P 0519	                RAT = CR,				!    Carriage control in case unit record input
;     P 0520	                FOP = <SQO,NAM>,			!    Sequential I/O only, open by name block
;     P 0521	                NAM = .input_nam,			!    NAM block address
;     P 0522	                XAB = .input_xaball);			!    XABALL block address.
;	0523	
;	0524	!
;	0525	! Call RMS $PARSE function to parse the input file specification. This resolves logical names and
;	0526	! determines if there are wildcards present, or explicit named fields present.
;	0527	!
;	0528	
;	0529	    IF NOT copy$pars_infil (				! Parse the input file specification.
;	0530	                            .input_fab,			!    Specify the input FAB block address
;	0531	                            .input_nam)			!    and the input NAM block address.
;	0532	    THEN
;	0533	        RETURN no_file;					! If the $PARSE fails, return an error code.
;	0534	
;	0535	!
;	0536	! Now test the type of expanded name string that we have. Does it contain wildcards? Were
;	0537	! certain fields explicitly named?
;	0538	!
;	0539	
;	0540	    IF .input_nam [nam$v_wildcard]			! If there were any wildcards,
;	0541	    THEN
;	0542	        BEGIN
;	0543	        wildcard_active = TRUE;				!    set WILDCARD_ACTIVE. This says current file
;	0544								!    specification contains wildcards.
;	0545	        wild_input = TRUE;				!    Also set WILD_INPUT. This says that the current
;	0546								!    input list contains wildcard specs somewhere.
;	0547	        END
;	0548	    ELSE						! If no input wildcards in this spec, turn off
;	0549	        wildcard_active = FALSE;			!    the WILDCARD_ACTIVE flag.
;	0550	
;	0551	    IF .input_nam [nam$v_wild_ver]			! If an explicit wildcard version number
;	0552	    THEN						!    was specified,
;	0553	        wild_inp_ver = TRUE				!    set the WILD_INP_VER flag.
;	0554	    ELSE						! Otherwise,
;	0555	        BEGIN
;	0556	        IF .input_nam [nam$v_exp_ver]			!    see if an explicit version number was specified.
;	0557	        THEN						!    If it is, set the EXP_INP_VER flag, meaning

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 3-3
; Digital Equipment Corporation
;
;	0558	            exp_inp_ver = TRUE;				!    that there is an explicit input version number.
;	0559	        END;
;	0560	
;	0561	!
;	0562	! Return with success.
;	0563	!
;	0564	
;	0565	    RETURN ok;
;	0566	    END;


							    .TITLE  COPYSPECS
							    .IDENT  \X00002\

							    .GLOBL  COPY$CLI_RESULT, COPY$CLI_STATUS, COPY$SEM_STATUS
							    .GLOBL  COPY$MSG_NUMBER, ALIGN_LOCATION, ALIGN_OPTION
							    .GLOBL  ALIGN_TYPE, ALLOC_VALUE, APPE_CONT_QUAL, APPE_OREAD_QUAL
							    .GLOBL  APPE_WRIT_QUAL, CLI_WORK_AREA, CLEANUP_DESC, COPY_CONC_QUAL
							    .GLOBL  COPY_CONT_QUAL, COPY_OREAD_QUAL, COPY_WRIT_QUAL
							    .GLOBL  DUMMY_NAM_BLK, EXTENSION_VALUE, FILE_MAX_VALUE
							    .GLOBL  INFILE_DESC, IN_NAME_DESC, OUTFILE_DESC, OUT_NAME_DESC
							    .GLOBL  PROTECT_AND, PROTECT_OR, COPY$CALC_ALQ, COPY$CLOSE_OUTF
							    .GLOBL  COPY$INOPN_ERR, COPY$LOG_MSG, COPY$OCLOSE_ERR
							    .GLOBL  COPY$OUTOPN_ERR, COPY$PARS_INFIL, COPY$SEMANTICS

							    .PSECT  $CODE$,NOWRT,2

					 0C7C 00000 	    .ENTRY  COPY$GET_INFILE, Save R2,R3,R4,R5,R6,R10,R11	      ; 0393
		         5A	0000G  CF  9E 00002 	    MOVAB   COPY$SEM_STATUS, R10				      ;
		         5B	0000G  CF  9E 00007 	    MOVAB   COPY$CLI_STATUS, R11				      ;
	   03	    02   AB	       06  E1 0000C 	    BBC     #6, COPY$CLI_STATUS+2, 1$				      ; 0477
				     0098  31 00011 	    BRW     8$							      ;
	   04	  0000G  CF	       01  E0 00014 1$:     BBS     #1, INFILE_DESC+3, 2$				      ; 0485
		         50	       03  D0 0001A 	    MOVL    #3, R0						      ; 0487
					   04 0001D 	    RET     							      ;
				       5B  DD 0001E 2$:     PUSHL   R11							      ; 0493
				0000G  CF  9F 00020 	    PUSHAB  CLI_WORK_AREA					      ;
				0000G  CF  9F 00024 	    PUSHAB  INFILE_DESC						      ;
		  0000G  DF	       03  FB 00028 	    CALLS   #3, @COPY$CLI_RESULT				      ;
	   11	  0000G  CF	       01  E0 0002D 	    BBS     #1, INFILE_DESC+3, 3$				      ; 0498
				       5B  DD 00033 	    PUSHL   R11							      ; 0500
				0000G  CF  9F 00035 	    PUSHAB  CLI_WORK_AREA					      ;
				0000G  CF  9F 00039 	    PUSHAB  CLEANUP_DESC					      ;
		  0000G  DF	       03  FB 0003D 	    CALLS   #3, @COPY$CLI_RESULT				      ;
				       04  11 00042 	    BRB     4$							      ; 0498
		    01   AA	       04  88 00044 3$:     BISB2   #4, COPY$SEM_STATUS+1				      ; 0506
		         56	  04   AC  D0 00048 4$:     MOVL    INPUT_FAB, $RMS_PTR					      ; 0522
	   00	         6E	       00  2C 0004C 	    MOVC5   #0, (SP), #0, #80, ($RMS_PTR)			      ;
		         66	0050   8F     00050									      ;
		         66	5003   8F  B0 00054 	    MOVW    #20483, ($RMS_PTR)					      ;
		    04   A6 01000040   8F  D0 00059 	    MOVL    #16777280, 4($RMS_PTR)				      ;
		    16   A6	0242   8F  B0 00061 	    MOVW    #578, 22($RMS_PTR)					      ;
		    1E   A6	0202   8F  B0 00067 	    MOVW    #514, 30($RMS_PTR)					      ;
		    24   A6	  0C   AC  D0 0006D 	    MOVL    INPUT_XABALL, 36($RMS_PTR)				      ;
		         52	  08   AC  D0 00072 	    MOVL    INPUT_NAM, R2					      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 3-4
; Digital Equipment Corporation
;
		    28   A6	       52  D0 00076 	    MOVL    R2, 40($RMS_PTR)					      ;
				       52  DD 0007A 	    PUSHL   R2							      ; 0529
				  04   AC  DD 0007C 	    PUSHL   INPUT_FAB						      ;
		  0000G  CF	       02  FB 0007F 	    CALLS   #2, COPY$PARS_INFIL					      ;
		         29	       50  E9 00084 	    BLBC    R0, 9$						      ;
		         0A	  35   A2  E9 00087 	    BLBC    53(R2), 5$						      ; 0540
		    02   AB	  40   8F  88 0008B 	    BISB2   #64, COPY$CLI_STATUS+2				      ; 0543
		         6A	       20  88 00090 	    BISB2   #32, COPY$SEM_STATUS				      ; 0545
				       05  11 00093 	    BRB     6$							      ; 0540
		    02   AB	  40   8F  8A 00095 5$:     BICB2   #64, COPY$CLI_STATUS+2				      ; 0549
	   06	    34   A2	       03  E1 0009A 6$:     BBC     #3, 52(R2), 7$					      ; 0551
		         6A	  40   8F  88 0009F 	    BISB2   #64, COPY$SEM_STATUS				      ; 0553
				       07  11 000A3 	    BRB     8$							      ; 0551
		         03	  34   A2  E9 000A5 7$:     BLBC    52(R2), 8$						      ; 0556
		         6A	       02  88 000A9 	    BISB2   #2, COPY$SEM_STATUS					      ; 0558
		         50	       01  D0 000AC 8$:     MOVL    #1, R0						      ; 0565
					   04 000AF 	    RET     							      ;
				       50  D4 000B0 9$:     CLRL    R0							      ; 0393
					   04 000B2 	    RET     							      ;

; Routine Size:  179 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 4
; Digital Equipment Corporation
;
;	0567	GLOBAL ROUTINE copy$opn_infile (input_fab) =		! Open the current input file
;	0568	
;	0569	!++
;	0570	! Functional description:
;	0571	!
;	0572	!	This routine opens the current input file. If the input file
;	0573	!	specification contains a wildcard field, an RMS $SEARCH for the
;	0574	!	next wildcard match occurs before the actual file open.
;	0575	!
;	0576	!	Any input parameter qualifiers are applied to the file's RMS blocks before
;	0577	!	the open is performed. For now, the only valid qualifier is /READ_CHECK.
;	0578	!
;	0579	!	If the OPEN fails, an error is reported to SYS$ERROR. When input wildcards are present,
;	0580	!	two types of failure are permitted:
;	0581	!
;	0582	!		RMS$_NMF	- no more files match given wildcard
;	0583	!		open failure	- allowed when a file matching a wildcard spec cannot be
;	0584	!				  opened, as long as that file would have been copied without concatenation.
;	0585	!
;	0586	! Calling sequence:
;	0587	!
;	0588	!	copy$opn_infile (input_fab.ra.v)
;	0589	!
;	0590	! Input parameters:
;	0591	!
;	0592	!	input_fab	- the FAB associated with the input file
;	0593	!
;	0594	! Implicit inputs:
;	0595	!
;	0596	!	COPY$CLI_STATUS bits are checked:
;	0597	!
;	0598	!		iread_check_bit	- This bit is set if the /READ_CHECK qualifier was specified for this file.
;	0599	!		wildcard_active	- This specification contains wildcards.
;	0600	!				  Find the next file with a $SEARCH function call.
;	0601	!
;	0602	!	input file NAM block is read to obtain the length of the resultant name string
;	0603	!
;	0604	!	COPY$SEM_STATUS bits are checked:
;	0605	!
;	0606	!		multiple_output	- Multiple files are being produced. This is checked to allow for
;	0607	!				  open failure on a wildcard specified file.
;	0608	!
;	0609	! Output parameters:
;	0610	!
;	0611	!	none
;	0612	!
;	0613	! Implicit outputs:
;	0614	!
;	0615	!	in_name_desc	- the length field of the input name descriptor is written from the RSL
;	0616	!			  field in the NAM block
;	0617	!
;	0618	!	The FAB$V_RCK bit in the input FAB is set if /READ_CHECK was specified.
;	0619	!
;	0620	!	COPY$CLI_STATUS bit settings may be altered:
;	0621	!

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 4-1
; Digital Equipment Corporation
;
;	0622	!		wildcard_active	- turned off if no more files that match wildcard are found.
;	0623	!		infile_open	- set if the file is opened successfully
;	0624	!
;	0625	! Routine value:
;	0626	!
;	0627	!	OK		- input file open
;	0628	!	NO_MORE_FILES	- no further wildcard match found
;	0629	!	NO_WILD_OPEN	- open failure on wildcard match file
;	0630	!	NO_FILE		- input file not found
;	0631	!
;	0632	! Side effects:
;	0633	!
;	0634	!	The input file is opened.
;	0635	!	If an RMS SEARCH function fails, then an error is reported on SYS$ERROR.
;	0636	!
;	0637	!--
;	0638	
;	0639	    BEGIN
;	0640	
;	0641	    MAP
;	0642	        input_fab	: REF BLOCK [, BYTE];		! input FAB block
;	0643	
;	0644	    BIND
;	0645	        input_nam	=				! input NAM block address
;	0646	                        .input_fab [fab$l_nam] : BLOCK [, BYTE];
;	0647	
;	0648	    LOCAL
;	0649	        status;						! RMS status code variable
;	0650	
;	0651	!
;	0652	! If a wildcard specification is active, call RMS to search for the next wildcard match.
;	0653	!
;	0654	
;	0655	    IF .wildcard_active					! If an input wildcard field is present,
;	0656	    THEN
;	0657	        BEGIN
;	0658	        status = $RMS_SEARCH (				!    then call RMS to search the directory for
;     P 0659	                                FAB = .input_fab);	!    the next match.
;	0660	
;	0661	        IF .status EQL rms$_nmf				! If no more wildcard matches exist,
;	0662	        THEN
;	0663	            BEGIN
;	0664	            wildcard_active = FALSE;			!    turn off the WILDCARD_ACTIVE flag,
;	0665	            RETURN no_more_files;			!    and return with success status of NO_MORE_FILES.
;	0666	            END;
;	0667	
;	0668	        IF NOT .status					! If RMS returned some other error code,
;	0669	        THEN
;	0670	            BEGIN
;	0671	            copy$inopn_err (				!    then call the RMS error action routine.
;	0672	                            .input_fab);
;	0673	            wildcard_active = FALSE;			!    Turn off the wildcard flag so that we don't look
;	0674	            RETURN no_file;				!    for the file again. Return to caller with NO_FILE
;	0675	            END;					!    error code.
;	0676	        END;						! End of special wildcard search processing.

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 4-2
; Digital Equipment Corporation
;
;	0677	
;	0678	!
;	0679	! If the user specified the input read checking qualifier, turn on the appropriate bit in the FAB.
;	0680	!
;	0681	
;	0682	    IF .copy$cli_status [iread_check_bit]		! If input read checking was requested,
;	0683	    THEN
;	0684	        input_fab [fab$v_rck] = TRUE			!    then turn on the FAB read check indicator.
;	0685	    ELSE
;	0686	        input_fab [fab$v_rck] = FALSE;			!    Otherwise, turn it off.
;	0687	
;	0688	!
;	0689	! Open the input file.
;	0690	!
;	0691	
;	0692	    IF $RMS_OPEN (					! Open the input file with RMS.
;     P 0693	                    FAB = .input_fab,			!    Specify the input parameter for the FAB,
;     P 0694	                    ERR = copy$inopn_err)		!    and an error action routine.
;	0695	    THEN						! If the OPEN is successful,
;	0696	        BEGIN
;	0697	        infile_open = TRUE;				!    indicate that the file is open
;	0698	        in_name_desc [0] = .input_nam [nam$b_rsl];	!    and set the length of the input file name descriptor.
;	0699	        RETURN ok;					! Return to caller with success code.
;	0700	        END						! End of successful OPEN processing
;	0701	
;	0702	    ELSE
;	0703	        BEGIN
;	0704	
;	0705	!
;	0706	! If multiple output files are being produced, and this is a file that matches a wildcard specification,
;	0707	! allow the open to fail. This means that one file that matches the wildcard specification is not copied
;	0708	! to a new output file.
;	0709	!
;	0710	
;	0711	        IF .wildcard_active AND				! If wildcard input,
;	0712	            (.multiple_output OR NOT .concat_qual)	!    and multiple output files are being produced
;	0713								!    or the /CONCATENATE qualifier was not given explicitly,
;	0714	        THEN
;	0715	            RETURN no_wild_open				!    then return a success status code
;	0716	        ELSE
;	0717	            RETURN no_file;				! Otherwise, return an error status code.
;	0718	        END;
;	0719	
;	0720	    END;



							    .GLOBL  SYS$SEARCH, SYS$OPEN

					 080C 000B3 	    .ENTRY  COPY$OPN_INFILE, Save R2,R3,R11			      ; 0567
		         5B	0000G  CF  9E 000B5 	    MOVAB   COPY$CLI_STATUS, R11				      ;
		         52	  04   AC  D0 000BA 	    MOVL    INPUT_FAB, R2					      ; 0646
		         53	  28   A2  D0 000BE 	    MOVL    40(R2), R3						      ; 0639
	   2C	    02   AB	       06  E1 000C2 	    BBC     #6, COPY$CLI_STATUS+2, 2$				      ; 0655
				       52  DD 000C7 	    PUSHL   R2							      ; 0659

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 4-3
; Digital Equipment Corporation
;
	      00000000G  9F	       01  FB 000C9 	    CALLS   #1, @#SYS$SEARCH					      ;
	      000182CA   8F	       50  D1 000D0 	    CMPL    STATUS, #99018					      ; 0661
				       09  12 000D7 	    BNEQ    1$							      ;
		    02   AB	  40   8F  8A 000D9 	    BICB2   #64, COPY$CLI_STATUS+2				      ; 0664
		         50	       03  D0 000DE 	    MOVL    #3, R0						      ; 0665
					   04 000E1 	    RET     							      ;
		         0E	       50  E8 000E2 1$:     BLBS    STATUS, 2$						      ; 0668
				       52  DD 000E5 	    PUSHL   R2							      ; 0671
		  0000G  CF	       01  FB 000E7 	    CALLS   #1, COPY$INOPN_ERR					      ;
		    02   AB	  40   8F  8A 000EC 	    BICB2   #64, COPY$CLI_STATUS+2				      ; 0673
				       43  11 000F1 	    BRB     7$							      ; 0674
	   07	    01   AB	       05  E1 000F3 2$:     BBC     #5, COPY$CLI_STATUS+1, 3$				      ; 0682
		    06   A2	  80   8F  88 000F8 	    BISB2   #128, 6(R2)						      ; 0684
				       05  11 000FD 	    BRB     4$							      ; 0682
		    06   A2	  80   8F  8A 000FF 3$:     BICB2   #128, 6(R2)						      ; 0686
				0000G  CF  9F 00104 4$:     PUSHAB  COPY$INOPN_ERR					      ; 0694
				       52  DD 00108 	    PUSHL   R2							      ;
	      00000000G  9F	       02  FB 0010A 	    CALLS   #2, @#SYS$OPEN					      ;
		         0E	       50  E9 00111 	    BLBC    R0, 5$						      ;
		    02   AB	       08  88 00114 	    BISB2   #8, COPY$CLI_STATUS+2				      ; 0697
		  0000G  CF	  03   A3  9A 00118 	    MOVZBL  3(R3), IN_NAME_DESC					      ; 0698
		         50	       01  D0 0011E 	    MOVL    #1, R0						      ; 0699
					   04 00121 	    RET     							      ;
	   0F	    02   AB	       06  E1 00122 5$:     BBC     #6, COPY$CLI_STATUS+2, 7$				      ; 0711
	   05	  0000G  CF	       01  E0 00127 	    BBS     #1, COPY$SEM_STATUS+1, 6$				      ; 0712
		         04	0000G  CF  E8 0012D 	    BLBS    COPY$SEM_STATUS, 7$					      ;
		         50	       05  D0 00132 6$:     MOVL    #5, R0						      ; 0715
					   04 00135 	    RET     							      ;
				       50  D4 00136 7$:     CLRL    R0							      ; 0567
					   04 00138 	    RET     							      ;

; Routine Size:  134 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 5
; Digital Equipment Corporation
;
;	0721	GLOBAL ROUTINE copy$get_outfil (output_fab, output_nam, output_xabfhc) =
;	0722								! Obtain the output file specification
;	0723	
;	0724	!++
;	0725	! Functional description:
;	0726	!
;	0727	!	This routine obtains the output file specification and all
;	0728	!	related qualifiers from the Command Language Interpreter. Then
;	0729	!	the file specification is parsed without any help from related input file name
;	0730	!	blocks. This initial parse determines whether the file specification had null file
;	0731	!	name, type, and version number fields.
;	0732	!
;	0733	!	If no output file name, type, or version number is given, a flag
;	0734	!	is set in COPY$SEM_STATUS.
;	0735	!
;	0736	! Calling sequence:
;	0737	!
;	0738	!	copy$get_outfil (output_fab.ra.v, output_nam.ra.v, output_xabfhc.ra.v)
;	0739	!
;	0740	! Input parameters:
;	0741	!
;	0742	!	output_fab	- the FAB to use for this output specification
;	0743	!	output_nam	- the NAM to use for this output specification
;	0744	!	output_xabfhc	- the XABFHC to use for this output specification
;	0745	!
;	0746	! Implicit inputs:
;	0747	!
;	0748	!	outfile_desc	- the CLI block for the output file specification
;	0749	!
;	0750	!	The RLF field of the output NAM block contains the address of the input file NAM block.
;	0751	!
;	0752	! Output parameters:
;	0753	!
;	0754	!	none
;	0755	!
;	0756	! Implicit outputs:
;	0757	!
;	0758	!	The fields of the FAB and the NAM block are filled in according
;	0759	!	to the CLI call, FAB initialization, and the $PARSE function call.
;	0760	!
;	0761	!	A bit may be set in COPY$SEM_STATUS:
;	0762	!
;	0763	!		no_output_spec	- no output name, type, or version number specified.
;	0764	!
;	0765	! Routine value:
;	0766	!
;	0767	!	OK		- success
;	0768	!	NO_FILE		- the $PARSE function call returned an error code
;	0769	!
;	0770	! Side effects:
;	0771	!
;	0772	!	An error is reported if the $PARSE function returns an error status code and
;	0773	!	COPY$OUTOPN_ERR is called.
;	0774	!
;	0775	!--

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 5-1
; Digital Equipment Corporation
;
;	0776	
;	0777	    BEGIN
;	0778	
;	0779	    MAP
;	0780	        output_fab	: REF BLOCK [, BYTE],		! FAB to use with output file
;	0781	        output_nam	: REF BLOCK [, BYTE],		! NAM to use with output file
;	0782	        output_xabfhc	: REF BLOCK [, BYTE];		! XABFHC to use with output file
;	0783	
;	0784	    LOCAL
;	0785	        temp_rlf;					! Holds the output RLF field
;	0786	
;	0787	!
;	0788	! Get the output file specification from the Command Language Interpreter.
;	0789	!
;	0790	
;	0791	    call_cli (						! Call the CLI with the following arguments:
;	0792	                outfile_desc,				!    Output file request descriptor address
;	0793	                cli_work_area,				!    CLI work area address
;	0794	                copy$cli_status);			!    COPY status bit vector address
;	0795	
;	0796	!
;	0797	! Initialize the output file FAB.
;	0798	!
;	0799	
;	0800	    $FAB_INIT (						! Setup the output file FAB as follows:
;     P 0801	                FAB = .output_fab,			!    FAB address is the output parameter
;     P 0802	                FAC = <PUT,TRN>,			!    Output file
;     P 0803	                SHR = NIL,				!    No file sharing
;     P 0804	                FNA = .outfile_desc [cli$a_rqaddr],	!    File name address from CLI
;     P 0805	                FNS = .outfile_desc [cli$w_rqsize],	!    File name size from CLI also
;     P 0806	                RTV = 0,				!    Use the system default retrieval window size
;     P 0807	                FOP = <SQO,OFP,NAM>,			!    Sequential operations only, output file parse,
;     P 0808	                NAM = .output_nam,			!    NAM block address
;     P 0809	                XAB = .output_xabfhc);			!    XABFHC block address
;	0810								!        name block open
;	0811	
;	0812	!
;	0813	! Zero the expanded string length so that the COPY error routine, copy$outopn_err, can
;	0814	! decide if an expanded name string was created by RMS.
;	0815	!
;	0816	
;	0817	    output_nam [nam$b_esl] = 0;				! Zero the output expanded string length.
;	0818	
;	0819	!
;	0820	! Temporarily remove the RLF field of the output NAM block so that the
;	0821	! output file specification can be tested for null name, type, and
;	0822	! version number fields.
;	0823	!
;	0824	
;	0825	    temp_rlf = .output_nam [nam$l_rlf];			! Save the RLF field because it may be needed later.
;	0826	    output_nam [nam$l_rlf] = 0;				! Set the RLF field to null.
;	0827	
;	0828	!
;	0829	! Parse the output file specification.
;	0830	!

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 5-2
; Digital Equipment Corporation
;
;	0831	
;	0832	    IF NOT $RMS_PARSE (					! Call the RMS function that parses file specifications,
;     P 0833	                        FAB = .output_fab,		!    specifying the output FAB parameter,
;     P 0834	                        ERR = copy$outopn_err)		!    and an error routine.
;	0835	    THEN						! If the PARSE is not successful,
;	0836	        RETURN no_file;					!    then return an error code to the caller.
;	0837	
;	0838	!
;	0839	! Test for an absence of the file name, type, and version number fields.
;	0840	!
;	0841	
;	0842	    IF (NOT .output_nam [nam$v_wildcard]) AND		! If no output wildcards are present,
;	0843	        (NOT .output_nam [nam$v_exp_name]) AND		!    and no output name,
;	0844	        (NOT .output_nam [nam$v_exp_type]) AND		!    and no output type,
;	0845	        (NOT .output_nam [nam$v_exp_ver]) AND		!    and no output version number,
;	0846	        ((.output_nam [nam$v_exp_dir]) OR		!    and an explicit directory
;	0847	        (.output_nam [nam$v_exp_dev]))			!    or device name is given,
;	0848	    THEN
;	0849	        no_output_spec = TRUE;				!    then set NO_OUTPUT_SPEC bit.
;	0850	
;	0851	!
;	0852	! Reload the RLF field. Another PARSE will be performed later in the routine
;	0853	! COPY$OPN_OUTFIL and may take fields from the input resultant file string.
;	0854	!
;	0855	
;	0856	    output_nam [nam$l_rlf] = .temp_rlf;
;	0857	
;	0858	!
;	0859	! Return with a success code.
;	0860	!
;	0861	
;	0862	    RETURN ok;						! Return successfully.
;	0863	
;	0864	    END;



							    .GLOBL  SYS$PARSE

					 007C 00139 	    .ENTRY  COPY$GET_OUTFIL, Save R2,R3,R4,R5,R6		      ; 0721
				0000G  CF  9F 0013B 	    PUSHAB  COPY$CLI_STATUS					      ; 0791
				0000G  CF  9F 0013F 	    PUSHAB  CLI_WORK_AREA					      ;
				0000G  CF  9F 00143 	    PUSHAB  OUTFILE_DESC					      ;
		  0000G  DF	       03  FB 00147 	    CALLS   #3, @COPY$CLI_RESULT				      ;
		         56	  04   AC  D0 0014C 	    MOVL    OUTPUT_FAB, $RMS_PTR				      ; 0809
	   00	         6E	       00  2C 00150 	    MOVC5   #0, (SP), #0, #80, ($RMS_PTR)			      ;
		         66	0050   8F     00154									      ;
		         66	5003   8F  B0 00158 	    MOVW    #20483, ($RMS_PTR)					      ;
		    04   A6 21000040   8F  D0 0015D 	    MOVL    #553648192, 4($RMS_PTR)				      ;
		    16   A6	2011   8F  B0 00165 	    MOVW    #8209, 22($RMS_PTR)					      ;
		    1F   A6	       02  90 0016B 	    MOVB    #2, 31($RMS_PTR)					      ;
		    24   A6	  0C   AC  D0 0016F 	    MOVL    OUTPUT_XABFHC, 36($RMS_PTR)				      ;
		         52	  08   AC  D0 00174 	    MOVL    OUTPUT_NAM, R2					      ;
		    28   A6	       52  D0 00178 	    MOVL    R2, 40($RMS_PTR)					      ;
		    2C   A6	0000G  CF  D0 0017C 	    MOVL    OUTFILE_DESC+12, 44($RMS_PTR)			      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 5-3
; Digital Equipment Corporation
;
		    34   A6	0000G  CF  90 00182 	    MOVB    OUTFILE_DESC+8, 52($RMS_PTR)			      ;
				  0B   A2  94 00188 	    CLRB    11(R2)						      ; 0817
		         53	  10   A2  D0 0018B 	    MOVL    16(R2), TEMP_RLF					      ; 0825
				  10   A2  D4 0018F 	    CLRL    16(R2)						      ; 0826
				0000G  CF  9F 00192 	    PUSHAB  COPY$OUTOPN_ERR					      ; 0834
				  04   AC  DD 00196 	    PUSHL   OUTPUT_FAB						      ;
	      00000000G  9F	       02  FB 00199 	    CALLS   #2, @#SYS$PARSE					      ;
		         28	       50  E9 001A0 	    BLBC    R0, 3$						      ;
		         50	  34   A2  9E 001A3 	    MOVAB   52(R2), R0						      ; 0842
		         18	  01   A0  E8 001A7 	    BLBS    1(R0), 2$						      ;
	   14	         60	       02  E0 001AB 	    BBS     #2, (R0), 2$					      ; 0843
	   10	         60	       01  E0 001AF 	    BBS     #1, (R0), 2$					      ; 0844
		         0D	       60  E8 001B3 	    BLBS    (R0), 2$						      ; 0845
	   04	         60	       06  E0 001B6 	    BBS     #6, (R0), 1$					      ; 0846
	   05	         60	       07  E1 001BA 	    BBC     #7, (R0), 2$					      ; 0847
		  0000G  CF	       10  88 001BE 1$:     BISB2   #16, COPY$SEM_STATUS				      ; 0849
		    10   A2	       53  D0 001C3 2$:     MOVL    TEMP_RLF, 16(R2)					      ; 0856
		         50	       01  D0 001C7 	    MOVL    #1, R0						      ; 0862
					   04 001CA 	    RET     							      ;
				       50  D4 001CB 3$:     CLRL    R0							      ; 0721
					   04 001CD 	    RET     							      ;

; Routine Size:  149 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 6
; Digital Equipment Corporation
;
;	0865	GLOBAL ROUTINE copy$opn_outfil (output_fab, output_rab, input_fab, out_file_count) =
;	0866								! Opens the current output file
;	0867	
;	0868	!++
;	0869	! Functional description:
;	0870	!
;	0871	!	This routine opens the current output file. If it is already open due
;	0872	!	to input file concatenation, the output file RAB is simply disconnected from
;	0873	!	the FAB to permit switching from block mode I/O to record mode I/O.
;	0874	!
;	0875	!	Many of the fields in the input FAB and XAB blocks are copied into the corresponding
;	0876	!	output FAB and XAB blocks. Also, bits and values are set in the output XAB and FAB blocks
;	0877	!	because of output file qualifiers specified on the command.
;	0878	!
;	0879	!	If the output file already exists, and is being overwritten, it is opened
;	0880	!	for output. If the output file does not exist, it is allocated and then opened.
;	0881	!
;	0882	! Calling sequence:
;	0883	!
;	0884	!	copy$opn_outfil (output_fab.ra.v, output_rab.ra.v, input_fab.ra.v, out_file_count.wl.r)
;	0885	!
;	0886	! Input parameters:
;	0887	!
;	0888	!	output_fab	- the address of the FAB associated with the output file
;	0889	!	output_rab	- the address of the RAB to be used with the output file
;	0890	!	input_fab	- the address of the FAB associated with the input file
;	0891	!
;	0892	! Implicit inputs:
;	0893	!
;	0894	!	copy$cli_status	- the OUTFILE_OPEN bit indicates whether an output file is already open.
;	0895	!			- bits indicate the settings of the output file qualifiers
;	0896	!
;	0897	!	Fields from the input NAM and XAB block are used in the output NAM and XAB blocks.
;	0898	!
;	0899	! Output parameters:
;	0900	!
;	0901	!	out_file_count	- a counter that is incremented if a new file is opened.
;	0902	!
;	0903	! Implicit outputs:
;	0904	!
;	0905	!	copy$cli_status	- OUTFILE_OPEN is set once the file is opened.
;	0906	!			- EXTEND_OUTFILE is set if the output file is being extended.
;	0907	!
;	0908	!	Fields are written in the output_fab and its associated NAM and XAB blocks.
;	0909	!
;	0910	!	out_name_desc	- a descriptor for the output file. Its length field is written.
;	0911	!
;	0912	!	When the output file name is parsed, various bits are set in
;	0913	!	COPY$SEM_STATUS. These include:
;	0914	!
;	0915	!		wild_output	- output spec includes explicit wildcards
;	0916	!		wild_out_ver	- explicit wildcard version number
;	0917	!
;	0918	! Routine value
;	0919	!

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 6-1
; Digital Equipment Corporation
;
;	0920	!	OK		- output file successfully created or readied for more output
;	0921	!	NO_FILE		- output file could not be opened, created, or readied for output
;	0922	!
;	0923	! Side effects:
;	0924	!
;	0925	!	The routine SETUP_EXTEND is called if the output file is open. The value of this call
;	0926	!		is returned to the caller.
;	0927	!	The routine SETUP_OUTXAB is called to write most of the output XAB block fields.
;	0928	!	Messages are output if a file was created during an APPEND command, if versions were
;	0929	!		slipped under higher existing versions, or if files were replaced or overlaid.
;	0930	!
;	0931	!--
;	0932	
;	0933	    BEGIN
;	0934	
;	0935	    MAP
;	0936	        output_fab	: REF BLOCK [, BYTE],		! FAB to use with output file
;	0937	        output_rab	: REF BLOCK [, BYTE],		! RAB to use with output file
;	0938	        input_fab	: REF BLOCK [, BYTE],		! FAB of the current input file
;	0939	        out_file_count	: REF VECTOR;			! pointer to number of output files written
;	0940	
;	0941	    BIND
;	0942	        output_nam	=				! output NAM block address
;	0943	                .output_fab [fab$l_nam] 	: BLOCK [, BYTE],
;	0944	        output_xabfhc	=				! output XAB file header characteristics block
;	0945	                .output_fab [fab$l_xab]		: BLOCK [, BYTE],
;	0946	        output_xaball	=				! output XAB date block
;	0947	                .output_xabfhc [xab$l_nxt]	: BLOCK [, BYTE];
;	0948	
;	0949	    LOCAL
;	0950	        output_xabpro	: REF BLOCK [, BYTE],		! Pointer to output XAB protection block
;	0951	        status;						! Status variable for calling semantic routine.
;	0952	
;	0953	!
;	0954	! If the output file is already open (due to input file concatenation), call a routine,
;	0955	! SETUP_EXTEND, to prepare the file to contain more data.
;	0956	!
;	0957	
;	0958	    IF .outfile_open					! If the output file is already open,
;	0959	    THEN
;	0960	        RETURN setup_extend (				!    call a routine to set the file up
;	0961	                             .output_rab);		!    to be extended.
;	0962	
;	0963	!
;	0964	! Copy a set of FAB attributes from the input to the output FAB.
;	0965	!
;	0966	
;	0967	    output_fab [fab$b_org] = .input_fab [fab$b_org];	! The fields copied are file organization,
;	0968	    output_fab [fab$b_rat] = .input_fab [fab$b_rat];	!    record attributes
;	0969	    output_fab [fab$w_mrs] = .input_fab [fab$w_mrs];	!    maximum record size
;	0970	    output_fab [fab$l_mrn] = .input_fab [fab$l_mrn];	!    maximum record number
;	0971	    output_fab [fab$b_rfm] = .input_fab [fab$b_rfm];	!    record format
;	0972	    output_fab [fab$b_fsz] = .input_fab [fab$b_fsz];	!    fixed control area size
;	0973	    output_fab [fab$b_bks] = .input_fab [fab$b_bks];	!    bucket size
;	0974	

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 6-2
; Digital Equipment Corporation
;
;	0975	!
;	0976	! If the input file has read or write checking options, copy them to the output file.
;	0977	!
;	0978	
;	0979	    output_fab [fab$l_fop] = .output_fab [fab$l_fop] OR	! OR together the current FOP output field
;	0980	        (.input_fab [fab$l_fop] AND (fab$m_rck OR fab$m_wck));
;	0981								!    and the read and write check bits of the
;	0982								!    FOP input field.
;	0983	
;	0984	!
;	0985	! Decide on block or record I/O.
;	0986	!
;	0987	
;	0988	    IF .input_fab [fab$b_org] EQL fab$c_seq		! If the input file is a sequential file,
;	0989	    THEN
;	0990	        output_fab [fab$v_bro] = TRUE			!    then indicate mixed block and record I/O.
;	0991	    ELSE
;	0992	        output_fab [fab$v_bio] = TRUE;			! Otherwise, indicate only block I/O.
;	0993	
;	0994	!
;	0995	! Copy input blocksize for tapes. Otherwise let RMS set the output blocksize.
;	0996	!
;	0997	
;	0998	    IF .input_fab [$FAB_DEV (sqd)]			! If input device is a tape,
;	0999	    THEN
;	1000	        output_fab [fab$w_bls] = .input_fab [fab$w_bls]	!    then copy the blocksize to the output FAB.
;	1001	    ELSE
;	1002	        output_fab [fab$w_bls] = 0;			! Otherwise, let RMS choose blocksize.
;	1003	
;	1004	!
;	1005	! If no output file name, type, or version number was given, then the NO_OUTPUT_SPEC bit
;	1006	! will be set by now. This probably means that no concatenation is occurring. Therefore,
;	1007	! if this is a COPY (as opposed to an APPEND) command,
;	1008	! and the command qualifier /CONCATENATE is not present, provide a default
;	1009	! name string (DNA field) that contains a wildcard version number.
;	1010	!
;	1011	! This is because RMS does not apply input version number specifications to a general output
;	1012	! file parse.
;	1013	!
;	1014	
;	1015	    IF (NOT .append_command) AND			! If not APPENDing files to an existing file
;	1016	        (.no_output_spec)				!    and no output name, type, or version number specified,
;	1017	    THEN
;	1018	        BEGIN
;	1019	        output_fab [fab$l_dna] = UPLIT (';*');		!    then setup a default name string consisting
;	1020	        output_fab [fab$b_dns] = 2;			!    of ";*", meaning wildcard version number.
;	1021	        END;
;	1022	
;	1023	!
;	1024	! Now $PARSE (this may be a reparse) the output file specification.
;	1025	!
;	1026	
;	1027	    IF NOT $RMS_PARSE (					! $PARSE the output file by calling an
;     P 1028	                        FAB = .output_fab,		!    RMS function.
;     P 1029	                        ERR = copy$outopn_err)		!    Specify an error routine.

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 6-3
; Digital Equipment Corporation
;
;	1030	    THEN
;	1031	        RETURN no_file;					! Return on error with error status code.
;	1032	
;	1033	!
;	1034	! Now a special check for input wildcard version number not accompanied by wildcard output
;	1035	! version number or explicit output version number. If this occurs, version scrambling will 
;	1036	! result. So special case check it, and reparse with default name string of wildcard output
;	1037	! version number if necessary.
;	1038	!
;	1039	! Also apply this default name string to an explicit input wildcard version number not
;	1040	! accompanied by any output version number. This causes an explicit input version number to
;	1041	! be carried over to the new file.
;	1042	!
;	1043	
;	1044	    IF (((.wild_inp_ver) OR				! If wildcard input version number,
;	1045	        (.exp_inp_ver)) AND				!    or explicit input version number,
;	1046	        (NOT .output_nam [nam$v_wild_ver]) AND		!    and no explicit output version
;	1047	        (NOT .output_nam [nam$v_exp_ver])) 		!    number, wildcard or otherwise,
;	1048	        OR
;	1049	        ((NOT .output_nam [nam$v_exp_ver]) AND		! OR if the output file name is only
;	1050	        (.output_nam [nam$v_wild_type] OR			!    a wildcard name field ("*"),
;	1051	        (NOT .output_nam [nam$v_exp_type])) AND
;	1052	        .output_nam [nam$v_wild_name])
;	1053	    THEN
;	1054	        BEGIN						! Then provide a default name string
;	1055	        output_fab [fab$l_dna] = UPLIT (';*');		!    of an explicit output wildcard
;	1056	        output_fab [fab$b_dns] = 2;			!    version number,
;	1057	
;	1058	        IF NOT $RMS_PARSE (				!    and redo the parse,
;     P 1059	                            FAB = .output_fab,		!    specifying  the output FAB address
;     P 1060	                            ERR = copy$outopn_err)	!    and an error action routine.
;	1061	        THEN
;	1062	            RETURN no_file;				! On failure, return with an error code.
;	1063	        END;
;	1064	
;	1065	!
;	1066	! Test the expanded name string for the output file. Does it contain wildcards? If so,
;	1067	! is there an explicit wildcard version number?
;	1068	!
;	1069	
;	1070	    IF .output_nam [nam$v_wildcard]			! If there were any wildcards,
;	1071	    THEN
;	1072	        wild_output = TRUE;				!    set flag saying that the file specification
;	1073								!    contained some wildcard fields.
;	1074	
;	1075	    IF .output_nam [nam$v_wild_ver]			! If the version number is a wildcard,
;	1076	    THEN
;	1077	        BEGIN
;	1078	        IF .output_fab [fab$b_dns] NEQ 0		!    see whether it was supplied by us.
;	1079	        THEN
;	1080	            BEGIN					! This version wildcard was supplied by COPY.
;	1081	            IF NOT .output_nam [nam$v_wild_name] AND	!    If the file name or type field
;	1082	                NOT .output_nam [nam$v_wild_type]	!    were not explicitly wild,
;	1083	            THEN wild_output = FALSE;			!    then turn off the wildcard output flag.
;	1084	            END

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 6-4
; Digital Equipment Corporation
;
;	1085	        ELSE						! Otherwise, if the user specified a wildcard
;	1086	            wild_out_ver = TRUE;			!    output version number, remember it.
;	1087	        END
;	1088	    ELSE
;	1089	        BEGIN
;	1090	        IF .output_nam [nam$v_exp_ver]			! Otherwise, see if an explicit version number was specified.
;	1091	        THEN
;	1092	            exp_out_ver = TRUE;				!    If so, set the EXP_OUT_VER flag.
;	1093	        END;
;	1094	
;	1095	!
;	1096	! Call the routine SETUP_OUTXAB to copy output XAB fields from the corresponding input XAB fields.
;	1097	!
;	1098	
;	1099	    setup_outxab (					! Write output XAB fields by calling
;	1100	                    .output_fab,			!    a routine that selects the necessary fields from
;	1101	                    .input_fab);			!    the input FAB and writes them into the output FAB.
;	1102	
;	1103	!
;	1104	! Call the routine APPLY_OUT_QUAL to write RMS fields according to output parameter qualifiers.
;	1105	!
;	1106	
;	1107	    apply_out_qual (					! Process output file qualifiers
;	1108	                    .output_fab);
;	1109	
;	1110	!
;	1111	! Call the routine COPY$SEMANTICS to determine the semantic effects of
;	1112	! this particular combination of input and output file specifications and qualifiers.
;	1113	!
;	1114	
;	1115	    IF NOT copy$semantics (				! Decide what semantic behavior is required.
;	1116	                                copy$sem_status,	!    Pass the status variable copy$sem_status,
;	1117	                                .input_fab,		!    the input FAB block address,
;	1118	                                .output_fab)		!    and the output FAB block address.
;	1119	    THEN						! If the input/output spec combination makes no sense,
;	1120	        RETURN no_file;					!    then return with error status code.
;	1121	
;	1122	!
;	1123	! Perform special XAB setup if a concatenated file is being created.
;	1124	!
;	1125	
;	1126	    setup_conc_xab (.output_fab, .input_fab, output_xabpro);
;	1127								! Call a routine to set up protection fields.
;	1128								!    Returns with address of XABPRO block.
;	1129	
;	1130	!
;	1131	! Create (or simply open) the output file.
;	1132	!
;	1133	
;	1134	    extend_outfile = FALSE;				! Assume that the output file is not being extended.
;	1135	
;	1136	!
;	1137	! If a file needn't be created, just open an existing file.
;	1138	!
;	1139	

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 6-5
; Digital Equipment Corporation
;
;	1140	    IF .append_command AND				! If this is an APPEND command and
;	1141	        NOT .copy$cli_status [new_bit]			!    and output file creation was not requested,
;	1142	    THEN
;	1143	        status = $RMS_OPEN (				!    then $OPEN an existing file,
;     P 1144	                            FAB = .output_fab,		!    specifying the output FAB block address,
;     P 1145	                            ERR = copy$outopn_err)	!    and an error action routine.
;	1146	
;	1147	    ELSE
;	1148	        BEGIN
;	1149	        status = $RMS_CREATE (				! Otherwise, create (or open if it exists) the
;     P 1150	                                FAB = .output_fab,	!    output file by naming the output FAB block
;     P 1151	                                ERR = copy$outopn_err);	!    address and an error action routine.
;	1152	
;	1153	!
;	1154	! If the file could not be created as a contiguous file because the disk was too full,
;	1155	! then try to create it contiguous best try.
;	1156	!
;	1157	
;	1158	        IF .status EQL rms$_ful				! If allocation space was not available,
;	1159	            AND .output_xaball [xab$v_ctg]		!    and the file was being created contiguous,
;	1160	            AND NOT .copy$cli_status [contiguous_bit]	!    and the used didn't say /CONTIGUOUS explicitly,
;	1161	        THEN
;	1162	            BEGIN
;	1163	            output_xaball [xab$v_ctg] = FALSE;		!    then turn off the contiguous indicator,
;	1164	            output_xaball [xab$v_cbt] = TRUE;		!    turn on the contiguous best try indicator,
;	1165	            status = $RMS_CREATE (			!    and retry the create.
;     P 1166	                                    FAB = .output_fab,	! Specify the address of the FAB block
;     P 1167	                                    ERR = copy$outopn_err);
;	1168	            END;					!    and an error action routine.
;	1169	
;	1170	!
;	1171	! Change the RMS return status to "created" if indeed the file was created.
;	1172	!
;	1173	
;	1174	        IF NOT .output_fab [fab$v_cif] AND		! Since RMS returns RMS$_NORMAL whether or not the
;	1175	            .status EQL rms$_normal			!    file was created, for internal reporting, change
;	1176	        THEN						!    the status code to RMS$_CREATED if appropriate.
;	1177	            status = rms$_created;			!    (I.e., if the file was created.)
;	1178	        END;
;	1179	
;	1180	    IF NOT .status					! If the open or create failed,
;	1181	    THEN
;	1182	        RETURN no_file;					!    then return an error status code.
;	1183	
;	1184	    outfile_open = TRUE;				! Otherwise, set a flag saying that an output file is open,
;	1185	    out_name_desc [0] = .output_nam [nam$b_rsl];	!    and store the length of the file specification.
;	1186	
;	1187	!
;	1188	! Set up output protection if user specified it explicitly.
;	1189	!
;	1190	
;	1191	    setup_prot_xab (.output_xabpro);			! Set up explicit file protection.
;	1192	
;	1193	!
;	1194	! Clean up the output open procedure by reporting to the user if necessary and

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 6-6
; Digital Equipment Corporation
;
;	1195	! updating more fields.
;	1196	!
;	1197	
;	1198	    SELECTONE .status OF				! Select additional processing based on the
;	1199	
;	1200	        SET						!    RMS completion code from the OPEN or CREATE.
;	1201	
;	1202	        [rms$_created]:					! Output file was created.
;	1203	            BEGIN
;	1204	            out_file_count [0] =			!    Update count of files created.
;	1205	                .out_file_count [0] + 1;
;	1206	
;	1207	            IF .append_command				!    If this is an APPEND command,
;	1208	            THEN
;	1209	                copy$log_msg (				!    send the following message to the user:
;	1210	                                msg$_created);		!        "<file-name> created" because creation is unusual.
;	1211	
;	1212	            IF .output_nam [nam$v_highver] AND		!    If a higher version of this file exists,
;	1213	                NOT .quiet_slip				!    and warnings about versions are not suppressed,
;	1214	            THEN
;	1215	                put_message (				!    send the following message to the user:
;     P 1216	                                msg$_highver, 1,	!        "higher version of <file-name> exists"
;     P 1217	                                out_name_desc);		!    because this may cause version confusion.
;	1218	
;	1219	            END;
;	1220	
;	1221	
;	1222	        [rms$_supersede]:				! Output file caused deletion of file of same name.
;	1223	            BEGIN
;	1224	            out_file_count [0] =			!    Update count of files created.
;	1225	                .out_file_count [0] + 1;
;	1226	
;	1227	            copy$log_msg (				!    Send the following message to the user:
;	1228	                            msg$_replaced);		!        "<file-name> replaced" because
;	1229								!        supersession is unusual.
;	1230	
;	1231	            END;
;	1232	
;	1233	
;	1234	        [rms$_normal]:					! Output file existed previously and was opened.
;	1235	            BEGIN
;	1236	            IF .append_command				!    If this is an APPEND command,
;	1237	            THEN
;	1238	                BEGIN
;	1239	                extend_outfile = TRUE;			!    set a flag saying that the file is being extended.
;	1240	
;	1241	                output_xaball [xab$l_alq] =		!    Calculate the necessary extension quantity
;	1242	                    copy$calc_alq ();			!    with a call to COPY$CALC_ALQ.
;	1243	
;	1244	                IF .output_xaball [xab$l_alq] NEQ 0	!    If the extension quantity is not null,
;	1245	                THEN
;	1246	                    IF NOT $RMS_EXTEND (		!    then try to extend the file.
;     P 1247	                                        FAB = .output_fab,
;     P 1248	                                        ERR = copy$outopn_err)
;	1249	                    THEN				!    If the extend fails,

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 6-7
; Digital Equipment Corporation
;
;	1250	                        RETURN no_file;			!    then return an error status code.
;	1251	
;	1252	                END
;	1253	
;	1254	            ELSE					!    If this is a COPY command,
;	1255	                BEGIN
;	1256	                copy$log_msg (				!    send the following message to the user:
;	1257	                                msg$_overlay);		!        "<file-name> being overwritten"
;	1258	
;	1259	! ******
;	1260	!	Omitted here is the revision of the output file's attributes. Ward had this
;	1261	!	commented out.
;	1262	! ******
;	1263	
;	1264	                END;
;	1265	
;	1266	            END;
;	1267	
;	1268	        TES;						! End of SELECT expression.
;	1269	
;	1270	!
;	1271	! Return to the caller with a success status code.
;	1272	!
;	1273	
;	1274	    RETURN ok;						! Return with a success code.
;	1275	    END;



							    .PSECT  $PLIT$,NOWRT,NOEXE,2

					      00000 P.AAA:  .ASCII  \;*\<0><0>						      ;
					      00004 P.AAB:  .ASCII  \;*\<0><0>						      ;

							    .GLOBL  SYS$CREATE, SYS$EXTEND

							    .PSECT  $CODE$,NOWRT,2

					 0F7C 001CE 	    .ENTRY  COPY$OPN_OUTFIL, Save R2,R3,R4,R5,R6,R8,R9,R10,R11	      ; 0865
		         58 00000000G  9F  9E 001D0 	    MOVAB   @#SYS$CREATE, R8					      ;
		         59 00000000G  9F  9E 001D7 	    MOVAB   @#SYS$PARSE, R9					      ;
		         5A	0000G  CF  9E 001DE 	    MOVAB   COPY$OUTOPN_ERR, R10				      ;
		         5B	0000G  CF  9E 001E3 	    MOVAB   COPY$SEM_STATUS, R11				      ;
		         5E	       04  C2 001E8 	    SUBL2   #4, SP						      ;
		         52	  04   AC  D0 001EB 	    MOVL    OUTPUT_FAB, R2					      ; 0943
		         54	  28   A2  D0 001EF 	    MOVL    40(R2), R4						      ; 0933
		         50	  24   A2  D0 001F3 	    MOVL    36(R2), R0						      ;
		         55	  04   A0  D0 001F7 	    MOVL    4(R0), R5						      ;
	   09	    01   AB	       03  E1 001FB 	    BBC     #3, COPY$SEM_STATUS+1, 1$				      ; 0958
				  08   AC  DD 00200 	    PUSHL   OUTPUT_RAB						      ; 0960
		  0000V  CF	       01  FB 00203 	    CALLS   #1, SETUP_EXTEND					      ;
					   04 00208 	    RET     							      ;
		         53	  0C   AC  D0 00209 1$:     MOVL    INPUT_FAB, R3					      ; 0967
		    1D   A2	  1D   A3  B0 0020D 	    MOVW    29(R3), 29(R2)					      ;
		    36   A2	  36   A3  B0 00212 	    MOVW    54(R3), 54(R2)					      ; 0969

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 6-8
; Digital Equipment Corporation
;
		    38   A2	  38   A3  D0 00217 	    MOVL    56(R3), 56(R2)					      ; 0970
		    1F   A2	  1F   A3  90 0021C 	    MOVB    31(R3), 31(R2)					      ; 0971
		    3E   A2	  3E   A3  B0 00221 	    MOVW    62(R3), 62(R2)					      ; 0973
	   50	    04   A3 FF7FFDFF   8F  CB 00226 	    BICL3   #-8389121, 4(R3), R0				      ; 0980
		    04   A2	       50  C8 0022F 	    BISL2   R0, 4(R2)						      ; 0979
				  1D   A3  95 00233 	    TSTB    29(R3)						      ; 0988
				       07  12 00236 	    BNEQ    2$							      ;
		    16   A2	  40   8F  88 00238 	    BISB2   #64, 22(R2)						      ; 0990
				       04  11 0023D 	    BRB     3$							      ; 0988
		    16   A2	       20  88 0023F 2$:     BISB2   #32, 22(R2)						      ; 0992
	   07	    40   A3	       05  E1 00243 3$:     BBC     #5, 64(R3), 4$					      ; 0998
		    3C   A2	  3C   A3  B0 00248 	    MOVW    60(R3), 60(R2)					      ; 1000
				       03  11 0024D 	    BRB     5$							      ; 0998
				  3C   A2  B4 0024F 4$:     CLRW    60(R2)						      ; 1002
	   0E	    01   AB	       04  E0 00252 5$:     BBS     #4, COPY$SEM_STATUS+1, 6$				      ; 1015
	   0A	         6B	       04  E1 00257 	    BBC     #4, COPY$SEM_STATUS, 6$				      ; 1016
		    30   A2	0000'  CF  9E 0025B 	    MOVAB   P.AAA, 48(R2)					      ; 1019
		    35   A2	       02  90 00261 	    MOVB    #2, 53(R2)						      ; 1020
				0404   8F  BB 00265 6$:     PUSHR   #^M<R2,R10>						      ; 1029
		         69	       02  FB 00269 	    CALLS   #2, SYS$PARSE					      ;
		         35	       50  E9 0026C 	    BLBC    R0, 11$						      ;
	   04	         6B	       06  E0 0026F 	    BBS     #6, COPY$SEM_STATUS, 7$				      ; 1044
	   09	         6B	       01  E1 00273 	    BBC     #1, COPY$SEM_STATUS, 8$				      ; 1045
	   04	    34   A4	       03  E0 00277 7$:     BBS     #3, 52(R4), 8$					      ; 1046
		         13	  34   A4  E9 0027C 	    BLBC    52(R4), 10$						      ; 1047
		         23	  34   A4  E8 00280 8$:     BLBS    52(R4), 12$						      ; 1049
	   05	    34   A4	       04  E0 00284 	    BBS     #4, 52(R4), 9$					      ; 1050
	   19	    34   A4	       01  E0 00289 	    BBS     #1, 52(R4), 12$					      ; 1051
	   14	    34   A4	       05  E1 0028E 9$:     BBC     #5, 52(R4), 12$					      ; 1052
		    30   A2	0000'  CF  9E 00293 10$:    MOVAB   P.AAB, 48(R2)					      ; 1055
		    35   A2	       02  90 00299 	    MOVB    #2, 53(R2)						      ; 1056
				0404   8F  BB 0029D 	    PUSHR   #^M<R2,R10>						      ; 1060
		         69	       02  FB 002A1 	    CALLS   #2, SYS$PARSE					      ;
		         48	       50  E9 002A4 11$:    BLBC    R0, 17$						      ;
		         56	  34   A4  9E 002A7 12$:    MOVAB   52(R4), R6						      ; 1070
		         04	  01   A6  E9 002AB 	    BLBC    1(R6), 13$						      ;
		         6B	  80   8F  88 002AF 	    BISB2   #128, COPY$SEM_STATUS				      ; 1072
	   19	         66	       03  E1 002B3 13$:    BBC     #3, (R6), 15$					      ; 1075
				  35   A2  95 002B7 	    TSTB    53(R2)						      ; 1078
				       0E  13 002BA 	    BEQL    14$							      ;
	   16	         66	       05  E0 002BC 	    BBS     #5, (R6), 16$					      ; 1081
	   12	         66	       04  E0 002C0 	    BBS     #4, (R6), 16$					      ; 1082
		         6B	  80   8F  8A 002C4 	    BICB2   #128, COPY$SEM_STATUS				      ; 1083
				       0C  11 002C8 	    BRB     16$							      ; 1078
		    01   AB	       01  88 002CA 14$:    BISB2   #1, COPY$SEM_STATUS+1				      ; 1086
				       06  11 002CE 	    BRB     16$							      ; 1075
		         03	       66  E9 002D0 15$:    BLBC    (R6), 16$						      ; 1090
		         6B	       04  88 002D3 	    BISB2   #4, COPY$SEM_STATUS					      ; 1092
				       0C  BB 002D6 16$:    PUSHR   #^M<R2,R3>						      ; 1099
		  0000V  CF	       02  FB 002D8 	    CALLS   #2, SETUP_OUTXAB					      ;
				       52  DD 002DD 	    PUSHL   R2							      ; 1107
		  0000V  CF	       01  FB 002DF 	    CALLS   #1, APPLY_OUT_QUAL					      ;
				       52  DD 002E4 	    PUSHL   R2							      ; 1115
				       53  DD 002E6 	    PUSHL   R3							      ;
				       5B  DD 002E8 	    PUSHL   R11							      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 6-9
; Digital Equipment Corporation
;
		  0000G  CF	       03  FB 002EA 	    CALLS   #3, COPY$SEMANTICS					      ;
		         72	       50  E9 002EF 17$:    BLBC    R0, 21$						      ;
				400C   8F  BB 002F2 	    PUSHR   #^M<R2,R3,SP>					      ; 1126
		  0000V  CF	       03  FB 002F6 	    CALLS   #3, SETUP_CONC_XAB					      ;
		  0000G  CF	       04  8A 002FB 	    BICB2   #4, COPY$CLI_STATUS+3				      ; 1134
	   16	    01   AB	       04  E1 00300 	    BBC     #4, COPY$SEM_STATUS+1, 18$				      ; 1140
	   10	  0000G  CF	       04  E0 00305 	    BBS     #4, COPY$CLI_STATUS+3, 18$				      ; 1141
				0404   8F  BB 0030B 	    PUSHR   #^M<R2,R10>						      ; 1145
	      00000000G  9F	       02  FB 0030F 	    CALLS   #2, @#SYS$OPEN					      ;
		         53	       50  D0 00316 	    MOVL    R0, STATUS						      ;
				       46  11 00319 	    BRB     20$							      ; 1140
				0404   8F  BB 0031B 18$:    PUSHR   #^M<R2,R10>						      ; 1151
		         68	       02  FB 0031F 	    CALLS   #2, SYS$CREATE					      ;
		         53	       50  D0 00322 	    MOVL    R0, STATUS						      ;
	      00018544   8F	       53  D1 00325 	    CMPL    STATUS, #99652					      ; 1158
				       1E  12 0032C 	    BNEQ    19$							      ;
	   19	    08   A5	       07  E1 0032E 	    BBC     #7, 8(R5), 19$					      ; 1159
	   13	  0000G  CF	       04  E0 00333 	    BBS     #4, COPY$CLI_STATUS, 19$				      ; 1160
		    08   A5	  80   8F  8A 00339 	    BICB2   #128, 8(R5)						      ; 1163
		    08   A5	       20  88 0033E 	    BISB2   #32, 8(R5)						      ; 1164
				0404   8F  BB 00342 	    PUSHR   #^M<R2,R10>						      ; 1167
		         68	       02  FB 00346 	    CALLS   #2, SYS$CREATE					      ;
		         53	       50  D0 00349 	    MOVL    R0, STATUS						      ;
	   10	    07   A2	       01  E0 0034C 19$:    BBS     #1, 7(R2), 20$					      ; 1174
	      00010001   8F	       53  D1 00351 	    CMPL    STATUS, #65537					      ; 1175
				       07  12 00358 	    BNEQ    20$							      ;
		         53 00010619   8F  D0 0035A 	    MOVL    #67097, STATUS					      ; 1177
		         03	       53  E8 00361 20$:    BLBS    STATUS, 22$						      ; 1180
				     009F  31 00364 21$:    BRW     29$							      ;
		    01   AB	       08  88 00367 22$:    BISB2   #8, COPY$SEM_STATUS+1				      ; 1184
		  0000G  CF	  03   A4  9A 0036B 	    MOVZBL  3(R4), OUT_NAME_DESC				      ; 1185
				       6E  DD 00371 	    PUSHL   OUTPUT_XABPRO					      ; 1191
		  0000V  CF	       01  FB 00373 	    CALLS   #1, SETUP_PROT_XAB					      ;
	      00010619   8F	       53  D1 00378 	    CMPL    STATUS, #67097					      ; 1198
				       36  12 0037F 	    BNEQ    24$							      ;
				  10   BC  D6 00381 	    INCL    @OUT_FILE_COUNT					      ; 1205
	   0A	    01   AB	       04  E1 00384 	    BBC     #4, COPY$SEM_STATUS+1, 23$				      ; 1207
		         7E	1073   8F  3C 00389 	    MOVZWL  #4211, -(SP)					      ; 1209
		  0000G  CF	       01  FB 0038E 	    CALLS   #1, COPY$LOG_MSG					      ;
	   6B	         66	       0F  E1 00393 23$:    BBC     #15, (R6), 28$					      ; 1212
	   66	    01   AB	       05  E0 00397 	    BBS     #5, COPY$SEM_STATUS+1, 28$				      ; 1213
				0000G  CF  9F 0039C 	    PUSHAB  OUT_NAME_DESC					      ; 1217
				       01  DD 003A0 	    PUSHL   #1							      ;
		         7E	1148   8F  3C 003A2 	    MOVZWL  #4424, -(SP)					      ;
		  0000G  CF	       01  FB 003A7 	    CALLS   #1, COPY$MSG_NUMBER					      ;
				       50  DD 003AC 	    PUSHL   R0							      ;
	      00000000G  00	       03  FB 003AE 	    CALLS   #3, LIB$SIGNAL					      ;
				       4B  11 003B5 	    BRB     28$							      ; 1198
	      00010631   8F	       53  D1 003B7 24$:    CMPL    STATUS, #67121					      ;
				       0A  12 003BE 	    BNEQ    25$							      ;
				  10   BC  D6 003C0 	    INCL    @OUT_FILE_COUNT					      ; 1225
		         7E	10BB   8F  3C 003C3 	    MOVZWL  #4283, -(SP)					      ; 1227
				       33  11 003C8 	    BRB     27$							      ;
	      00010001   8F	       53  D1 003CA 25$:    CMPL    STATUS, #65537					      ; 1198
				       2F  12 003D1 	    BNEQ    28$							      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 6-10
; Digital Equipment Corporation
;
	   20	    01   AB	       04  E1 003D3 	    BBC     #4, COPY$SEM_STATUS+1, 26$				      ; 1236
		  0000G  CF	       04  88 003D8 	    BISB2   #4, COPY$CLI_STATUS+3				      ; 1239
		  0000G  CF	       00  FB 003DD 	    CALLS   #0, COPY$CALC_ALQ					      ; 1242
		    10   A5	       50  D0 003E2 	    MOVL    R0, 16(R5)						      ;
				       1A  13 003E6 	    BEQL    28$							      ; 1244
				0404   8F  BB 003E8 	    PUSHR   #^M<R2,R10>						      ; 1248
	      00000000G  9F	       02  FB 003EC 	    CALLS   #2, @#SYS$EXTEND					      ;
		         0C	       50  E8 003F3 	    BLBS    R0, 28$						      ;
				       0E  11 003F6 	    BRB     29$							      ; 1250
		         7E	10AB   8F  3C 003F8 26$:    MOVZWL  #4267, -(SP)					      ; 1256
		  0000G  CF	       01  FB 003FD 27$:    CALLS   #1, COPY$LOG_MSG					      ;
		         50	       01  D0 00402 28$:    MOVL    #1, R0						      ; 1274
					   04 00405 	    RET     							      ;
				       50  D4 00406 29$:    CLRL    R0							      ; 0865
					   04 00408 	    RET     							      ;

; Routine Size:  571 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 7
; Digital Equipment Corporation
;
;	1276	ROUTINE setup_extend (output_rab) =			! Setup a file to be extended.
;	1277	
;	1278	!++
;	1279	! Functional description:
;	1280	!
;	1281	!	This routine takes an open file and prepares it to be extended.
;	1282	!
;	1283	!	First, a DISCONNECT is performed. This permits switching from block mode I/O
;	1284	!	to record mode I/O, if desired. Then update the output file allocation information,
;	1285	!	set a bit in COPY$CLI_STATUS saying that the file is being extended, calculate
;	1286	!	the file extension quantity, and extend the file.
;	1287	!
;	1288	! Calling sequence:
;	1289	!
;	1290	!	setup_extend (output_rab.ra.v)
;	1291	!
;	1292	! Input parameters
;	1293	!
;	1294	!	output_rab	- the RAB connected to the output FAB
;	1295	!
;	1296	! Implicit inputs
;	1297	!
;	1298	!	The FAB and XAB blocks associated with the specified output RAB block.
;	1299	!
;	1300	! Output parameters
;	1301	!
;	1302	!	none
;	1303	!
;	1304	! Implicit outputs
;	1305	!
;	1306	!	The allocation information in the FAB is updated.
;	1307	!	The EXTEND_OUTFILE bit in COPY$CLI_STATUS is set.
;	1308	!	The ALQ field in the output XAB block is set to an appropriate extension quantity.
;	1309	!
;	1310	! Routine value
;	1311	!
;	1312	!	OK		- success
;	1313	!	NO_FILE		- failure
;	1314	!
;	1315	! Side effects
;	1316	!
;	1317	!	If the file cannot be extended, the file is closed.
;	1318	!
;	1319	!--
;	1320	
;	1321	    BEGIN
;	1322	
;	1323	    MAP
;	1324	        output_rab	: REF BLOCK [, BYTE];		! output FAB of the open output file
;	1325	
;	1326	    BIND
;	1327	        output_fab	=				! associated output FAB block
;	1328	                .output_rab [rab$l_fab]		: BLOCK [, BYTE],
;	1329	        output_xabfhc	=				! associated output XAB block
;	1330	                .output_fab [fab$l_xab]		: BLOCK [, BYTE],

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 7-1
; Digital Equipment Corporation
;
;	1331	        output_xaball	=				!    second XAB in XAB chain
;	1332	                .output_xabfhc [xab$l_nxt]	: BLOCK [, BYTE];
;	1333	
;	1334	    LOCAL
;	1335	        status;						! Holds RMS status values
;	1336	
;	1337	!
;	1338	! Disconnect the RAB from the FAB. On error, close the file and return with error status code.
;	1339	!
;	1340	
;	1341	    IF NOT $RMS_DISCONNECT (				! Disconnect the output file RAB from its FAB.
;     P 1342	                            RAB = .output_rab,		!    Specify the RAB block address
;     P 1343	                            ERR = copy$oclose_err)	!    and an error routine.
;	1344	    THEN
;	1345	        BEGIN						! If the DISCONNECT fails,
;	1346	        copy$close_outf (				!    close the output file,
;	1347	                            output_fab);
;	1348	        RETURN no_file;					!    and return with an error code.
;	1349	        END;
;	1350	
;	1351	!
;	1352	! Shortening the XAB chain to include only the FHC (file header characteristics) XAB,
;	1353	! call the RMS function $DISPLAY to update the output file allocation information
;	1354	! as recorded in the XABFHC.
;	1355	!
;	1356	
;	1357	    output_xabfhc [xab$l_nxt] = 0;			! Leave only the FHC XAB on the XAB chain.
;	1358	
;	1359	    status = $RMS_DISPLAY (				! Call DISPLAY to update the XAB information
;     P 1360	                            FAB = output_fab,		!    about the file's allocation.
;     P 1361	                            ERR = copy$outopn_err);	!    Specify an error action routine.
;	1362	
;	1363	    output_xabfhc [xab$l_nxt] = output_xaball;		! Restore the XAB chain.
;	1364	
;	1365	!
;	1366	! See if the $DISPLAY function succeeded. If not, close the output file and return
;	1367	! an error status code.
;	1368	!
;	1369	
;	1370	    IF NOT .status					! If the $DISPLAY function failed,
;	1371	    THEN
;	1372	        BEGIN
;	1373	        copy$close_outf (				!    then close the output file,
;	1374	                            output_fab);
;	1375	        RETURN no_file;					!    and return an error status code.
;	1376	        END;
;	1377	
;	1378	!
;	1379	! Set the bit in COPY$CLI_STATUS that indicates that the file is to be extended.
;	1380	!
;	1381	
;	1382	    extend_outfile = TRUE;				! Set EXTEND_OUTFILE bit.
;	1383	
;	1384	!
;	1385	! Calculate the file extension quantity and extend the file with an RMS $EXTEND function call.

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 7-2
; Digital Equipment Corporation
;
;	1386	! The routine COPY$CALC_ALQ does the calculation. It returns a "zero" in the following cases:
;	1387	!
;	1388	!	The output file is on a magtape or a nonfile-structured device.
;	1389	!	The output file is already long enough to hold the size of the file to be appended.
;	1390	!
;	1391	
;	1392	    output_xaball [xab$l_alq] = copy$calc_alq ();	! Setup the output file extension quantity in the XAB.
;	1393	
;	1394	    IF .output_xaball [xab$l_alq] EQL 0			! If the input file is of zero length,
;	1395	    THEN
;	1396	        RETURN ok;					!    then return with success code.
;	1397	
;	1398	    IF $RMS_EXTEND (					! If the output file can be extended successfully,
;     P 1399	                    FAB = output_fab,
;     P 1400	                    ERR = copy$outopn_err)		!    (specify an error routine)
;	1401	    THEN
;	1402	        RETURN ok					!    then return with success code.
;	1403	    ELSE
;	1404	        RETURN no_file;					! Otherwise, return with error code.
;	1405	
;	1406	    END;



							    .GLOBL  SYS$DISCONNECT, SYS$DISPLAY

					 001C 00409 SETUP_EXTEND:
							    .WORD   Save R2,R3,R4					      ; 1276
		         50	  04   AC  D0 0040B 	    MOVL    OUTPUT_RAB, R0					      ; 1328
		         54	  3C   A0  D0 0040F 	    MOVL    60(R0), R4						      ; 1321
		         53	  24   A4  D0 00413 	    MOVL    36(R4), R3						      ;
		         52	  04   A3  D0 00417 	    MOVL    4(R3), R2						      ;
				0000G  CF  9F 0041B 	    PUSHAB  COPY$OCLOSE_ERR					      ; 1343
				       50  DD 0041F 	    PUSHL   R0							      ;
	      00000000G  9F	       02  FB 00421 	    CALLS   #2, @#SYS$DISCONNECT				      ;
		         17	       50  E9 00428 	    BLBC    R0, 1$						      ;
				  04   A3  D4 0042B 	    CLRL    4(R3)						      ; 1357
				0000G  CF  9F 0042E 	    PUSHAB  COPY$OUTOPN_ERR					      ; 1361
				       54  DD 00432 	    PUSHL   R4							      ;
	      00000000G  9F	       02  FB 00434 	    CALLS   #2, @#SYS$DISPLAY					      ;
		    04   A3	       52  D0 0043B 	    MOVL    R2, 4(R3)						      ; 1363
		         09	       50  E8 0043F 	    BLBS    STATUS, 2$						      ; 1370
				       54  DD 00442 1$:     PUSHL   R4							      ; 1373
		  0000G  CF	       01  FB 00444 	    CALLS   #1, COPY$CLOSE_OUTF					      ;
				       24  11 00449 	    BRB     4$							      ; 1375
		  0000G  CF	       04  88 0044B 2$:     BISB2   #4, COPY$CLI_STATUS+3				      ; 1382
		  0000G  CF	       00  FB 00450 	    CALLS   #0, COPY$CALC_ALQ					      ; 1392
		    10   A2	       50  D0 00455 	    MOVL    R0, 16(R2)						      ;
				       10  13 00459 	    BEQL    3$							      ; 1394
				0000G  CF  9F 0045B 	    PUSHAB  COPY$OUTOPN_ERR					      ; 1400
				       54  DD 0045F 	    PUSHL   R4							      ;
	      00000000G  9F	       02  FB 00461 	    CALLS   #2, @#SYS$EXTEND					      ;
		         04	       50  E9 00468 	    BLBC    R0, 4$						      ;
		         50	       01  D0 0046B 3$:     MOVL    #1, R0						      ; 1402
					   04 0046E 	    RET     							      ;

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 7-3
; Digital Equipment Corporation
;
				       50  D4 0046F 4$:     CLRL    R0							      ; 1276
					   04 00471 	    RET     							      ;

; Routine Size:  105 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 8
; Digital Equipment Corporation
;
;	1407	ROUTINE setup_outxab (output_fab, input_fab) : NOVALUE =
;	1408								! Setup output XAB fields from input XAB fields
;	1409	
;	1410	!++
;	1411	! Functional description:
;	1412	!
;	1413	!	This routine copies input XAB fields into corresponding output XAB fields.
;	1414	!
;	1415	! Calling sequence:
;	1416	!
;	1417	!	setup_outxab (output_fab.ra.v, input_fab.ra.v)
;	1418	!
;	1419	! Input parameters:
;	1420	!
;	1421	!	output_fab	- FAB block associated with the output file
;	1422	!	input_fab	- FAB block associated with the input file
;	1423	!
;	1424	! Implicit inputs:
;	1425	!
;	1426	!	output_xaball	- XABALL block for output file
;	1427	!	output_xabdat	- XABDAT block for output file
;	1428	!	output_xabfhc	- XABFHC block for output file
;	1429	!	output_xabpro	- XABPRO block for output file
;	1430	!	output_xabrdt	- XABRDT block for output file
;	1431	!
;	1432	!	input_xaball	- XABALL block for input file
;	1433	!	input_xabdat	- XABDAT block for input file
;	1434	!	input_xabfhc	- XABFHC block for input file
;	1435	!	input_xabpro	- XABPRO block for input file
;	1436	!
;	1437	! Output parameters
;	1438	!
;	1439	!	none
;	1440	!
;	1441	! Implicit outputs
;	1442	!
;	1443	!	The relevant fields in the output XABs are written.
;	1444	!
;	1445	! Routine value
;	1446	!
;	1447	!	none
;	1448	!
;	1449	! Side effects
;	1450	!
;	1451	!	none
;	1452	!
;	1453	!--
;	1454	
;	1455	    BEGIN
;	1456	
;	1457	    MAP
;	1458	        output_fab	: REF BLOCK [, BYTE],		! output file FAB block
;	1459	        input_fab	: REF BLOCK [, BYTE];		! input file FAB block
;	1460	
;	1461	    BIND

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 8-1
; Digital Equipment Corporation
;
;	1462	        output_xabfhc	=				! output file XABFHC block
;	1463	                .output_fab [fab$l_xab]		: BLOCK [, BYTE],
;	1464	        output_xaball	=				! output file XABALL block
;	1465	                .output_xabfhc [xab$l_nxt]	: BLOCK [, BYTE],
;	1466	        output_xabdat	=				! output file XABDAT block
;	1467	                .output_xaball [xab$l_nxt]	: BLOCK [, BYTE],
;	1468	        output_xabpro	=				! output file XABPRO block
;	1469	                .output_xabdat [xab$l_nxt]	: BLOCK [, BYTE],
;	1470	        output_xabrdt	=				! output file XABRDT block
;	1471	                .output_xabpro [xab$l_nxt]	: BLOCK [, BYTE],
;	1472	        input_xaball	=				! input file XABALL block
;	1473	                .input_fab [fab$l_xab]		: BLOCK [, BYTE],
;	1474	        input_xabdat	=				! input file XABDAT block
;	1475	                .input_xaball [xab$l_nxt]	: BLOCK [, BYTE],
;	1476	        input_xabfhc	=				! input file XABFHC block
;	1477	                .input_xabdat [xab$l_nxt]	: BLOCK [, BYTE],
;	1478	        input_xabpro	=				! input file XABPRO block
;	1479	                .input_xabfhc [xab$l_nxt]	: BLOCK [, BYTE];
;	1480	
;	1481	!
;	1482	! Write the output allocation XAB.
;	1483	!
;	1484	
;	1485	    output_xaball [xab$b_aop] =
;	1486	                        .input_xaball [xab$b_aop];	! Write the allocation options,
;	1487	    output_xaball [xab$b_aln] =
;	1488	                        .input_xaball [xab$b_aln];	!    and the alignment type.
;	1489	
;	1490	    output_xaball [xab$l_alq] = copy$calc_alq ();	! Calculate and write in the allocation quantity.
;	1491	
;	1492	    output_xaball [xab$w_deq] =
;	1493	                        .input_xabfhc [xab$w_dxq];	! Write the default extension quantity.
;	1494	    output_xaball [xab$b_bkz] =				! Write the default bucket size
;	1495	                        .input_xaball [xab$b_bkz];	!    from the input XAB bucket size.
;	1496	
;	1497	    output_xaball [xab$w_vol] = 0;			! Zero the related volume number,
;	1498	    output_xaball [xab$l_loc] = 0;			!    the allocation location,
;	1499	    output_xaball [xab$b_aid] = 0;			!    the area id number,
;	1500	    output_xaball [xab$w_rfi0] = 0;			!    the related file number
;	1501	    output_xaball [xab$w_rfi2] = 0;			!    the related file sequence number
;	1502	    output_xaball [xab$w_rfi4] = 0;			!    and the related file revision number.
;	1503	
;	1504	!
;	1505	! Write the output Date/Time XAB.
;	1506	!
;	1507	
;	1508	    output_xabdat [xab$w_rvn] =				! Copy from the input file XABDAT,
;	1509	                        .input_xabdat [xab$w_rvn];	!    the revision number,
;	1510	    output_xabdat [xab$l_rdt0] =			!    the revision date,
;	1511	                        .input_xabdat [xab$l_rdt0];
;	1512	    output_xabdat [xab$l_rdt4] =			!    the revision time,
;	1513	                        .input_xabdat [xab$l_rdt4];
;	1514	    output_xabdat [xab$l_cdt0] =			!    the creation date,
;	1515	                        .input_xabdat [xab$l_cdt0];
;	1516	    output_xabdat [xab$l_cdt4] =			!    the creation time,

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 8-2
; Digital Equipment Corporation
;
;	1517	                        .input_xabdat [xab$l_cdt4];
;	1518	    output_xabdat [xab$l_edt0] =			!    the expiration date,
;	1519	                        .input_xabdat [xab$l_edt0];
;	1520	    output_xabdat [xab$l_edt4] =			!    and the expiration time.
;	1521	                        .input_xabdat [xab$l_edt4];
;	1522	
;	1523	!
;	1524	! Write the output File Header Characteristics XAB block.
;	1525	!
;	1526	
;	1527	    output_xabfhc [xab$b_rfo] =				! The XABFHC includes the
;	1528	                        .input_xabfhc [xab$b_rfo];	!    record format and file organization,
;	1529	    output_xabfhc [xab$b_atr] =				!    the record attributes,
;	1530	                        .input_xabfhc [xab$b_atr];
;	1531	    output_xabfhc [xab$w_lrl] =				!    the length of the longest record,
;	1532	                        .input_xabfhc [xab$w_lrl];
;	1533	    output_xabfhc [xab$b_bkz] =				!    the bucket size,
;	1534	                        .input_xabfhc [xab$b_bkz];
;	1535	    output_xabfhc [xab$b_hsz] =				!    the VFC header size,
;	1536	                        .input_xabfhc [xab$b_hsz];
;	1537	    output_xabfhc [xab$w_mrz] =				!    the maximum record length,
;	1538	                        .input_xabfhc [xab$w_mrz];
;	1539	    output_xabfhc [xab$w_dxq] =				!    and the default extension quantity.
;	1540	                        .input_xabfhc [xab$w_dxq];
;	1541	
;	1542	    output_xabfhc [xab$l_sbn] = 0;			! Zero the starting virtual block number.
;	1543	
;	1544	!
;	1545	! Write the output Protection XAB block. Most of this XAB can only be setup
;	1546	! after the output file has been opened or created. Therefore, it is not done here.
;	1547	!
;	1548	
;	1549	    output_xabpro [xab$l_uic] = 0;			! Clear the file owner field.
;	1550	
;	1551	!
;	1552	! Write the output Revision Date/Time XAB block.
;	1553	!
;	1554	
;	1555	    output_xabrdt [xab$w_rvn] =				! Copy from the input XABDAT block
;	1556	                        .input_xabdat [xab$w_rvn];	!    the input revision number,
;	1557	    output_xabrdt [xab$l_rdt0] =			!    the input revision date,
;	1558	                        .input_xabdat [xab$l_rdt0];
;	1559	    output_xabrdt [xab$l_rdt4] =			!    and the input revision time.
;	1560	                        .input_xabdat [xab$l_rdt4];
;	1561	
;	1562	! ******
;	1563	!	Temporarily, I omit the special saving of XABDAT and XABFHC fields
;	1564	!	of a file that may be overwritten. This must go back in.
;	1565	! ******
;	1566	
;	1567	    END;





; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 8-3
; Digital Equipment Corporation
;

					 03FC 00472 SETUP_OUTXAB:
							    .WORD   Save R2,R3,R4,R5,R6,R7,R8,R9			      ; 1407
		         50	  04   AC  D0 00474 	    MOVL    OUTPUT_FAB, R0					      ; 1463
		         55	  24   A0  D0 00478 	    MOVL    36(R0), R5						      ; 1455
		         52	  04   A5  D0 0047C 	    MOVL    4(R5), R2						      ;
		         57	  04   A2  D0 00480 	    MOVL    4(R2), R7						      ;
		         59	  04   A7  D0 00484 	    MOVL    4(R7), R9						      ;
		         58	  04   A9  D0 00488 	    MOVL    4(R9), R8						      ;
		         50	  08   AC  D0 0048C 	    MOVL    INPUT_FAB, R0					      ; 1473
		         53	  24   A0  D0 00490 	    MOVL    36(R0), R3						      ; 1455
		         54	  04   A3  D0 00494 	    MOVL    4(R3), R4						      ;
		         56	  04   A4  D0 00498 	    MOVL    4(R4), R6						      ;
		         50	  04   A6  D0 0049C 	    MOVL    4(R6), R0						      ;
		    08   A2	  08   A3  B0 004A0 	    MOVW    8(R3), 8(R2)					      ; 1485
		  0000G  CF	       00  FB 004A5 	    CALLS   #0, COPY$CALC_ALQ					      ; 1490
		    10   A2	       50  D0 004AA 	    MOVL    R0, 16(R2)						      ;
		    14   A2	  1A   A6  B0 004AE 	    MOVW    26(R6), 20(R2)					      ; 1492
		    16   A2	  16   A3  90 004B3 	    MOVB    22(R3), 22(R2)					      ; 1494
				  0A   A2  B4 004B8 	    CLRW    10(R2)						      ; 1497
				  0C   A2  D4 004BB 	    CLRL    12(R2)						      ; 1498
				  17   A2  94 004BE 	    CLRB    23(R2)						      ; 1499
				  18   A2  D4 004C1 	    CLRL    24(R2)						      ; 1500
				  1C   A2  B4 004C4 	    CLRW    28(R2)						      ; 1502
		    08   A7	  08   A4  B0 004C7 	    MOVW    8(R4), 8(R7)					      ; 1508
		    0C   A7	  0C   A4  7D 004CC 	    MOVQ    12(R4), 12(R7)					      ; 1510
		    14   A7	  14   A4  7D 004D1 	    MOVQ    20(R4), 20(R7)					      ; 1514
		    1C   A7	  1C   A4  7D 004D6 	    MOVQ    28(R4), 28(R7)					      ; 1518
		    08   A5	  08   A6  D0 004DB 	    MOVL    8(R6), 8(R5)					      ; 1527
		    16   A5	  16   A6  D0 004E0 	    MOVL    22(R6), 22(R5)					      ; 1533
		    1A   A5	  1A   A6  B0 004E5 	    MOVW    26(R6), 26(R5)					      ; 1539
				  28   A5  D4 004EA 	    CLRL    40(R5)						      ; 1542
				  0C   A9  D4 004ED 	    CLRL    12(R9)						      ; 1549
		    08   A8	  08   A4  B0 004F0 	    MOVW    8(R4), 8(R8)					      ; 1555
		    0C   A8	  0C   A4  7D 004F5 	    MOVQ    12(R4), 12(R8)					      ; 1557
					   04 004FA 	    RET     							      ; 1407

; Routine Size:  137 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 9
; Digital Equipment Corporation
;
;	1568	ROUTINE apply_out_qual (output_fab) : NOVALUE =		! Applies output parameter qualifiers to FAB and XAB
;	1569	
;	1570	!++
;	1571	! Functional description
;	1572	!
;	1573	!	This routine looks for the presence of qualifiers on the output file specification,
;	1574	!	and sets RMS fields according to the semantics of each qualifier.
;	1575	!
;	1576	! Calling sequence:
;	1577	!
;	1578	!	apply_out_qual (output_fab.ra.v)
;	1579	!
;	1580	! Input parameters:
;	1581	!
;	1582	!	output_fab	- the FAB block related to the output file specification
;	1583	!
;	1584	! Implicit inputs:
;	1585	!
;	1586	!	output_xaball	- The XABALL block associated with the output FAB
;	1587	!
;	1588	! 	The following bits in COPY$SEM_STATUS:
;	1589	!
;	1590	!		append_command
;	1591	!
;	1592	!	The following bits in COPY$CLI_STATUS:
;	1593	!
;	1594	!		alignment_bit
;	1595	!		allocation_bit
;	1596	!		contiguous_bit
;	1597	!		extension_bit
;	1598	!		file_max_bit
;	1599	!		overlay_bit
;	1600	!		oread_check_bit
;	1601	!		replace_bit
;	1602	!		truncate_bit
;	1603	!		write_check_bit
;	1604	!
;	1605	!	Some values associated with qualifiers specified for the output file specification:
;	1606	!
;	1607	!		align_type
;	1608	!		align_option
;	1609	!		align_location
;	1610	!		alloc_value
;	1611	!		extension_value
;	1612	!		file_max_value
;	1613	!
;	1614	! Output parameters
;	1615	!
;	1616	!	none
;	1617	!
;	1618	! Implicit outputs
;	1619	!
;	1620	!	Some fields in the output XABALL block are written:
;	1621	!
;	1622	!		ALN	- alignment type

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 9-1
; Digital Equipment Corporation
;
;	1623	!		AOP	- alignment option
;	1624	!		LOC	- alignment location
;	1625	!		ALQ	- allocation quantity
;	1626	!		CTG	- contiguous file
;	1627	!		CBT	- contiguous best try file
;	1628	!		DEQ	- file extension quantity
;	1629	!
;	1630	!	Some fields in the output FAB are written:
;	1631	!
;	1632	!		MRN	- maximum record number
;	1633	!		CIF	- create if nonexistent file
;	1634	!		RCK	- read check
;	1635	!		TEF	- truncate files at EOF mark
;	1636	!		SUP	- supersede
;	1637	!		WCK	- write check
;	1638	!
;	1639	! Routine value
;	1640	!
;	1641	!	novalue
;	1642	!
;	1643	! Side effects
;	1644	!
;	1645	!	none
;	1646	!
;	1647	!--
;	1648	
;	1649	    BEGIN
;	1650	
;	1651	    MAP
;	1652	        output_fab	: REF BLOCK [, BYTE];		! Output file FAB block
;	1653	
;	1654	    BIND
;	1655	        output_xabfhc	=				! output file XABFHC block
;	1656	                .output_fab [fab$l_xab]		: BLOCK [, BYTE],
;	1657	        output_xaball	=				! output file XABALL block
;	1658	                .output_xabfhc [xab$l_nxt]	: BLOCK [, BYTE];
;	1659	
;	1660	!
;	1661	! Apply the effects of the output file qualifiers to the appropriate XAB blocks.
;	1662	!
;	1663	
;	1664	    IF .copy$cli_status [alignment_bit]			! If file alignment specified,
;	1665	    THEN
;	1666	        BEGIN
;	1667	        output_xaball [xab$b_aln] = .align_type;	!    write in the alignment type,
;	1668	        output_xaball [xab$b_aop] = .align_option;	!    the alignment option,
;	1669	        IF .copy$cli_status [align_val_bit]		! If a location was specified,
;	1670	        THEN
;	1671	            output_xaball [xab$l_loc] = .align_location;!    write in the location too.
;	1672	        END;
;	1673	
;	1674	    IF .copy$cli_status [allocation_bit]		! If file allocation quantity specified,
;	1675	    THEN
;	1676	        output_xaball [xab$l_alq] = .alloc_value;	!    write in the value.
;	1677	

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 9-2
; Digital Equipment Corporation
;
;	1678	    IF .copy$cli_status [contiguous_bit]		! If contiguous allocation required,
;	1679	    THEN
;	1680	        BEGIN
;	1681	        output_xaball [xab$v_ctg] = TRUE;		!    set the contiguous bit in the XAB,
;	1682	        output_xaball [xab$v_cbt] = FALSE;		!    and the contiguous-best-try bit to false.
;	1683	        END
;	1684	    ELSE						! Otherwise, if the qualifier was given explicitly,
;	1685	        BEGIN
;	1686	        IF explicit_qual [cont]				!    then it was in the negative form -- /NOCONTIGUOUS,
;	1687	        THEN						!    so turn off all contiguous indicators.
;	1688	            BEGIN
;	1689	            output_xaball [xab$v_ctg] = FALSE;		!    Contiguous bit set to FALSE.
;	1690	            output_xaball [xab$v_cbt] = FALSE;		!    Contiguous-best-try bit set to FALSE.
;	1691	            END;
;	1692	        END;
;	1693	
;	1694	    IF .copy$cli_status [extension_bit]			! If a file extension quantity was given,
;	1695	    THEN
;	1696	        output_xaball [xab$w_deq] = .extension_value;	!    then write in the value.
;	1697	
;	1698	    IF .copy$cli_status [file_max_bit]			! If a maximum record number was specified,
;	1699	    THEN
;	1700	        output_fab [fab$l_mrn] = .file_max_value;	!    then write it into the output FAB block.
;	1701	
;	1702	    IF .copy$cli_status  [overlay_bit] OR		! If COPY is to overlay the existing file, or
;	1703	        .copy$cli_status [new_bit]			!    APPEND is to create a new file if one does not exist,
;	1704	    THEN
;	1705	        output_fab [fab$v_cif] = TRUE;			!    then turn on the create-if-nonexistent bit.
;	1706	
;	1707	    IF .copy$cli_status [oread_check_bit]		! For read checking on output file,
;	1708	    THEN
;	1709	        output_fab [fab$v_rck] = TRUE			!    turn on the read check bit in the output FAB.
;	1710	    ELSE						! Otherwise, if the qualifier was given explicitly,
;	1711	        BEGIN						!    then it was given in the negative form --
;	1712	        IF explicit_qual [oread]			!    /NOREAD_CHECK,
;	1713	        THEN
;	1714	            output_fab [fab$v_rck] = FALSE;		!    so set the bit in the FAB to FALSE.
;	1715	        END;
;	1716	
;	1717	    IF .copy$cli_status [replace_bit]			! If an existing file is to be replaced,
;	1718	    THEN
;	1719	        output_fab [fab$v_sup] = TRUE;			!    set the supersede bit in the output FAB.
;	1720	
;	1721	    IF .copy$cli_status [truncate_bit]			! If a contiguous file is to be truncated at EOF,
;	1722	    THEN
;	1723	        output_fab [fab$v_tef] = TRUE;			!    then set the truncate bit in the FOP of the FAB.
;	1724	
;	1725	    IF .copy$cli_status [write_check_bit]		! For write checking on the output file,
;	1726	    THEN
;	1727	        output_fab [fab$v_wck] = TRUE			!    set the write check bit in the output FAB.
;	1728	    ELSE						! Otherwise, if the qualifier was explicitly given,
;	1729	        BEGIN						!    then it was in the negative form --
;	1730	        IF explicit_qual [writ]				!    /NOWRITE_CHECK,
;	1731	        THEN
;	1732	            output_fab [fab$v_wck] = FALSE;		!    so set bit to FALSE in the output FAB.

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 9-3
; Digital Equipment Corporation
;
;	1733	        END;
;	1734	
;	1735	!
;	1736	! Return to caller.
;	1737	!
;	1738	
;	1739	    END;						! Return without a value.





					 0800 004FB APPLY_OUT_QUAL:
							    .WORD   Save R11						      ; 1568
		         5B	0000G  CF  9E 004FD 	    MOVAB   COPY$CLI_STATUS, R11				      ;
		         51	  04   AC  D0 00502 	    MOVL    OUTPUT_FAB, R1					      ; 1656
		         50	  24   A1  D0 00506 	    MOVL    36(R1), R0						      ; 1649
		         50	  04   A0  D0 0050A 	    MOVL    4(R0), R0						      ;
	   17	         6B	       02  E1 0050E 	    BBC     #2, COPY$CLI_STATUS, 1$				      ; 1664
		    09   A0	0000G  CF  90 00512 	    MOVB    ALIGN_TYPE, 9(R0)					      ; 1667
		    08   A0	0000G  CF  90 00518 	    MOVB    ALIGN_OPTION, 8(R0)					      ; 1668
	   06	    01   AB	       06  E1 0051E 	    BBC     #6, COPY$CLI_STATUS+1, 1$				      ; 1669
		    0C   A0	0000G  CF  D0 00523 	    MOVL    ALIGN_LOCATION, 12(R0)				      ; 1671
	   06	         6B	       03  E1 00529 1$:     BBC     #3, COPY$CLI_STATUS, 2$				      ; 1674
		    10   A0	0000G  CF  D0 0052D 	    MOVL    ALLOC_VALUE, 16(R0)					      ; 1676
	   07	         6B	       04  E1 00533 2$:     BBC     #4, COPY$CLI_STATUS, 3$				      ; 1678
		    08   A0	  80   8F  88 00537 	    BISB2   #128, 8(R0)						      ; 1681
				       11  11 0053C 	    BRB     5$							      ; 1682
	   06	  0000G  CF	       01  E0 0053E 3$:     BBS     #1, COPY_CONT_QUAL+3, 4$				      ; 1686
	   09	  0000G  CF	       01  E1 00544 	    BBC     #1, APPE_CONT_QUAL+3, 6$				      ;
		    08   A0	  80   8F  8A 0054A 4$:     BICB2   #128, 8(R0)						      ; 1689
		    08   A0	       20  8A 0054F 5$:     BICB2   #32, 8(R0)						      ; 1690
	   06	         6B	       05  E1 00553 6$:     BBC     #5, COPY$CLI_STATUS, 7$				      ; 1694
		    14   A0	0000G  CF  B0 00557 	    MOVW    EXTENSION_VALUE, 20(R0)				      ; 1696
	   06	         6B	       06  E1 0055D 7$:     BBC     #6, COPY$CLI_STATUS, 8$				      ; 1698
		    38   A1	0000G  CF  D0 00561 	    MOVL    FILE_MAX_VALUE, 56(R1)				      ; 1700
	   05	         6B	       07  E0 00567 8$:     BBS     #7, COPY$CLI_STATUS, 9$				      ; 1702
	   04	    03   AB	       04  E1 0056B 	    BBC     #4, COPY$CLI_STATUS+3, 10$				      ; 1703
		    07   A1	       02  88 00570 9$:     BISB2   #2, 7(R1)						      ; 1705
	   07	    01   AB	       06  E1 00574 10$:    BBC     #6, COPY$CLI_STATUS+1, 11$				      ; 1707
		    06   A1	  80   8F  88 00579 	    BISB2   #128, 6(R1)						      ; 1709
				       11  11 0057E 	    BRB     13$							      ; 1707
	   06	  0000G  CF	       01  E0 00580 11$:    BBS     #1, COPY_OREAD_QUAL+3, 12$				      ; 1712
	   05	  0000G  CF	       01  E1 00586 	    BBC     #1, APPE_OREAD_QUAL+3, 13$				      ;
		    06   A1	  80   8F  8A 0058C 12$:    BICB2   #128, 6(R1)						      ; 1714
	   04	    01   AB	       01  E1 00591 13$:    BBC     #1, COPY$CLI_STATUS+1, 14$				      ; 1717
		    04   A1	       04  88 00596 	    BISB2   #4, 4(R1)						      ; 1719
	   04	    01   AB	       02  E1 0059A 14$:    BBC     #2, COPY$CLI_STATUS+1, 15$				      ; 1721
		    07   A1	       10  88 0059F 	    BISB2   #16, 7(R1)						      ; 1723
	   05	    01   AB	       03  E1 005A3 15$:    BBC     #3, COPY$CLI_STATUS+1, 16$				      ; 1725
		    05   A1	       02  88 005A8 	    BISB2   #2, 5(R1)						      ; 1727
					   04 005AC 	    RET     							      ; 1725
	   06	  0000G  CF	       01  E0 005AD 16$:    BBS     #1, COPY_WRIT_QUAL+3, 17$				      ; 1730
	   04	  0000G  CF	       01  E1 005B3 	    BBC     #1, APPE_WRIT_QUAL+3, 18$				      ;
		    05   A1	       02  8A 005B9 17$:    BICB2   #2, 5(R1)						      ; 1732

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 9-4
; Digital Equipment Corporation
;
					   04 005BD 18$:    RET     							      ; 1568

; Routine Size:  195 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 10
; Digital Equipment Corporation
;
;	1740	ROUTINE setup_conc_xab (output_fab, input_fab, output_xabptr) : NOVALUE =
;	1741								! Sets XAB fields for concatenated file
;	1742	
;	1743	!++
;	1744	! Functional description
;	1745	!
;	1746	!	This routine writes certain XAB fields for concatenated output files.
;	1747	!
;	1748	! Calling sequence
;	1749	!
;	1750	!	set_conc_xab (output_fab.ra.v, input_fab.ra.v, output_xabptr.wa.r)
;	1751	!
;	1752	! Input parameters
;	1753	!
;	1754	!	output_fab	- The FAB block for the output file
;	1755	!	input_fab	- The FAB block for the input file
;	1756	!
;	1757	! Implicit inputs
;	1758	!
;	1759	!	output_xaball	- The XABALL block for the output file
;	1760	!	output_xabpro	- The XABPRO block for the output file
;	1761	!	output_xabdat	- The XABDAT block for the output file
;	1762	!	output_xabrdt	- The XABRDT block for the output file
;	1763	!	input_xabpro	- The XABPRO block for the input file
;	1764	!	default_protect	- The default file protection
;	1765	!
;	1766	!	Bit in COPY$SEM_STATUS:
;	1767	!
;	1768	!		APPEND_COMMAND	- this is an APPEND command
;	1769	!
;	1770	!	Bit in COPY$CLI_STATUS:
;	1771	!
;	1772	!		CONCAT_FOLLOWS	- concatenated file being produced
;	1773	!
;	1774	!	FAB records whether this input device is file structured or not.
;	1775	!
;	1776	! Output parameters
;	1777	!
;	1778	!	output_xabptr	- The address of the output file XABPRO block.
;	1779	!
;	1780	! Implicit outputs
;	1781	!
;	1782	!	Fields are written in the output XABALL and XABPRO blocks:
;	1783	!
;	1784	!		NXT	- pointer to next XAB block
;	1785	!		PRO	- default protection of the output file
;	1786	!
;	1787	! Routine value
;	1788	!
;	1789	!	novalue
;	1790	!
;	1791	! Side effects
;	1792	!
;	1793	!	none
;	1794	!

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 10-1
; Digital Equipment Corporation
;
;	1795	!--
;	1796	
;	1797	    BEGIN
;	1798	
;	1799	    MAP
;	1800	        output_fab	: REF BLOCK [, BYTE],		! Output file FAB block
;	1801	        input_fab	: REF BLOCK [, BYTE],		! Input file FAB block
;	1802	        output_xabptr	: REF VECTOR;			! Output file XABPRO block
;	1803	
;	1804	    BIND
;	1805	        output_xabfhc	=				! Output file XABFHC block
;	1806	                .output_fab [fab$l_xab]		: BLOCK [, BYTE],
;	1807	        output_xaball	=				! Output file XABALL block
;	1808	                .output_xabfhc [xab$l_nxt]	: BLOCK [, BYTE],
;	1809	        output_xabdat	=				! Output file XABDAT block
;	1810	                .output_xaball [xab$l_nxt]	: BLOCK [, BYTE],
;	1811	        output_xabpro	=				! Output file XABPRO block
;	1812	                .output_xabdat [xab$l_nxt]	: BLOCK [, BYTE],
;	1813	        output_xabrdt	=				! Output file XABRDT block
;	1814	                .output_xabpro [xab$l_nxt]	: BLOCK [, BYTE],
;	1815	        input_xaball	=				! Input file XABALL block
;	1816	                .input_fab [fab$l_xab]		: BLOCK [, BYTE],
;	1817	        input_xabdat	=				! Input file XABDAT block
;	1818	                .input_xaball [xab$l_nxt]	: BLOCK [, BYTE],
;	1819	        input_xabfhc	=				! Input file XABFHC block
;	1820	                .input_xabdat [xab$l_nxt]	: BLOCK [, BYTE],
;	1821	        input_xabpro	=				! Input file XABPRO block
;	1822	                .input_xabfhc [xab$l_nxt]	: BLOCK [, BYTE];
;	1823	
;	1824	    IF .append_command OR .concat_follows OR		! If this is an APPEND command or concatenating,
;	1825	        NOT .input_fab [$fab_dev (fod)]			!    or the input device is not file structured,
;	1826	    THEN
;	1827	        BEGIN
;	1828	        output_xaball [xab$l_nxt] = output_xabpro;	! then remove the output date/time XAB block;
;	1829	        output_xabpro [xab$w_pro] = default_protect;	! request default protection for output file;
;	1830	        output_xabpro [xab$l_nxt] = 0;			! and remove the revision XAB block.
;	1831	        END
;	1832	
;	1833	    ELSE
;	1834	        BEGIN
;	1835	        output_xaball [xab$l_nxt] = output_xabdat;	! Otherwise, include the output date/time XAB block;
;	1836	        output_xabpro [xab$w_pro] =			! assume that output protection is identical
;	1837	            .input_xabpro [xab$w_pro];			!    to input protection;
;	1838	        output_xabpro [xab$l_nxt] = output_xabrdt;	! and retain input revision XAB data.
;	1839	        END;
;	1840	
;	1841	!
;	1842	! Return the address of the XAB protection block.
;	1843	!
;	1844	
;	1845	    output_xabptr [0] = output_xabpro;			! This is needed later to set more protection fields.
;	1846	
;	1847	    END;



; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 10-2
; Digital Equipment Corporation
;



					 003C 005BE SETUP_CONC_XAB:
							    .WORD   Save R2,R3,R4,R5					      ; 1740
		         50	  04   AC  D0 005C0 	    MOVL    OUTPUT_FAB, R0					      ; 1806
		         50	  24   A0  D0 005C4 	    MOVL    36(R0), R0						      ; 1797
		         53	  04   A0  D0 005C8 	    MOVL    4(R0), R3						      ;
		         54	  04   A3  D0 005CC 	    MOVL    4(R3), R4						      ;
		         51	  04   A4  D0 005D0 	    MOVL    4(R4), R1						      ;
		         55	  04   A1  D0 005D4 	    MOVL    4(R1), R5						      ;
		         52	  08   AC  D0 005D8 	    MOVL    INPUT_FAB, R2					      ; 1816
		         50	  24   A2  D0 005DC 	    MOVL    36(R2), R0						      ; 1797
		         50	  04   A0  D0 005E0 	    MOVL    4(R0), R0						      ;
		         50	  04   A0  D0 005E4 	    MOVL    4(R0), R0						      ;
		         50	  04   A0  D0 005E8 	    MOVL    4(R0), R0						      ;
	   0B	  0000G  CF	       04  E0 005EC 	    BBS     #4, COPY$SEM_STATUS+1, 1$				      ; 1824
	   05	  0000G  CF	       05  E0 005F2 	    BBS     #5, COPY$CLI_STATUS+2, 1$				      ;
	   0D	    41   A2	       06  E0 005F8 	    BBS     #6, 65(R2), 2$					      ; 1825
		    04   A3	       51  D0 005FD 1$:     MOVL    R1, 4(R3)						      ; 1828
		    08   A1	       01  AE 00601 	    MNEGW   #1, 8(R1)						      ; 1829
				  04   A1  D4 00605 	    CLRL    4(R1)						      ; 1830
				       0D  11 00608 	    BRB     3$							      ; 1824
		    04   A3	       54  D0 0060A 2$:     MOVL    R4, 4(R3)						      ; 1835
		    08   A1	  08   A0  B0 0060E 	    MOVW    8(R0), 8(R1)					      ; 1836
		    04   A1	       55  D0 00613 	    MOVL    R5, 4(R1)						      ; 1838
		    0C   BC	       51  D0 00617 3$:     MOVL    R1, @OUTPUT_XABPTR					      ; 1845
					   04 0061B 	    RET     							      ; 1740

; Routine Size:  94 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 11
; Digital Equipment Corporation
;
;	1848	ROUTINE setup_prot_xab (output_xabpro) : NOVALUE =	! Sets up protection XAB fields
;	1849	
;	1850	!++
;	1851	! Functional description
;	1852	!
;	1853	!	This routine is called for files for whom the /PROTECTION qualifier was specified.
;	1854	!	Output protection is set according to the protection value given. If no value
;	1855	!	was given, the default protection is applied.
;	1856	!
;	1857	! Calling sequence
;	1858	!
;	1859	!	setup_prot_xab (output_xabpro.ra.v)
;	1860	!
;	1861	! Input parameters
;	1862	!
;	1863	!	output_xabpro	- the XABPRO block associated with the output file
;	1864	!
;	1865	! Implicit inputs
;	1866	!
;	1867	!	protect_and	- a mask of protection bits
;	1868	!	protect_or	- a mask of protection bits
;	1869	!
;	1870	!	Bits in COPY$CLI_STATUS:
;	1871	!
;	1872	!		protection_bit	- the /PROTECTION qualifier was given
;	1873	!		protect_val_bit	- a protection value was specified
;	1874	!
;	1875	!	default_protect	- the default protection for output files
;	1876	!
;	1877	! Output parameters
;	1878	!
;	1879	!	none
;	1880	!
;	1881	! Implicit outputs
;	1882	!
;	1883	!	The XAB$W_PRO field in the output XABPRO block is written.
;	1884	!
;	1885	! Routine value
;	1886	!
;	1887	!	novalue
;	1888	!
;	1889	! Side effects
;	1890	!
;	1891	!	none
;	1892	!
;	1893	!--
;	1894	
;	1895	    BEGIN
;	1896	
;	1897	    MAP
;	1898	        output_xabpro	: REF BLOCK [, BYTE];		! Output XABPRO block
;	1899	
;	1900	!
;	1901	! If the /PROTECTION qualifier was specified, set up the special protection.
;	1902	!

; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 11-1
; Digital Equipment Corporation
;
;	1903	
;	1904	    IF .copy$cli_status [protection_bit]		! If output file protection is requested,
;	1905	    THEN
;	1906	        BEGIN						!    set up this protection now.
;	1907	        IF .copy$cli_status [protect_val_bit]		! If protection information was given,
;	1908	        THEN
;	1909	            BEGIN
;	1910	            output_xabpro [xab$w_pro] =			!    turn off some protection attribute bits,
;	1911	                .output_xabpro [xab$w_pro] AND .protect_and;
;	1912	
;	1913	            output_xabpro [xab$w_pro] =			!    and turn on others.
;	1914	                .output_xabpro [xab$w_pro] OR .protect_or;
;	1915	            END
;	1916	        ELSE						! If no protection information was given,
;	1917	            output_xabpro [xab$w_pro] = default_protect;!    request default output protection.
;	1918	        END;
;	1919	
;	1920	    END;





					 0000 0061C SETUP_PROT_XAB:
							    .WORD   Save nothing					      ; 1848
		         1C	0000G  CF  E9 0061E 	    BLBC    COPY$CLI_STATUS+1, 2$				      ; 1904
	   50	    04   AC	       08  C1 00623 	    ADDL3   #8, OUTPUT_XABPRO, R0				      ; 1910
	   0E	  0000G  CF	       05  E1 00628 	    BBC     #5, COPY$CLI_STATUS+3, 1$				      ; 1907
		         51	0000G  CF  B2 0062E 	    MCOMW   PROTECT_AND, R1					      ; 1911
		         60	       51  AA 00633 	    BICW2   R1, (R0)						      ;
		         60	0000G  CF  A8 00636 	    BISW2   PROTECT_OR, (R0)					      ; 1914
					   04 0063B 	    RET     							      ; 1907
		         60	       01  AE 0063C 1$:     MNEGW   #1, (R0)						      ; 1917
					   04 0063F 2$:     RET     							      ; 1848

; Routine Size:  36 bytes



; Bliss-32 7.352	Saturday 22-AUG-1978 03:48:26	DBB3:[COPY.SRC]COPYSPECS.B32;26					Page 12
; Digital Equipment Corporation
;
;	1921	END
;	1922	ELUDOM




							    .GLOBL  LIB$SIGNAL

;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $CODE$         	  1600  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $PLIT$         	     8  NOWRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]STARLET.L32;1		      2688       154         5       190
;  DBA4:[SYSLIB]CLIMAC.L32;1		        14         0         0         3
;  DBB3:[COPY.SRC]VMSMAC.L32;1		         6         5        83         4





; Size:		1600 code + 8 data bytes
; Run Time:	01:08.6
; Elapsed Time:	02:17.0
; Memory Used:	319 pages
; Compilation Complete
