!++
!
! UTLDEF.B32 - UTILITY DEFINITION MACROS FOR BLISS PROCESSING
! OF STARLET DEFINITION MACROS.
!
!--

!
! MACROS TO EXTRACT OFFSETS, FIELD WIDTHS, ETC., FROM FIELD EXTRACTION MACROS.
!

MACRO	$BYTEOFFSET (OFFSET, POSITION, WIDTH, SIGN) = OFFSET%;

MACRO	$BITPOSITION (OFFSET, POSITION, WIDTH, SIGN) = POSITION%;

MACRO	$FIELDWIDTH (OFFSET, POSITION, WIDTH, SIGN) = WIDTH%;

MACRO	$EXTENSION (OFFSET, POSITION, WIDTH, SIGN) = SIGN%;

MACRO	$FIELDMASK (OFFSET, POSITION, WIDTH, SIGN) =
	(1^(POSITION+WIDTH) - 1^POSITION)%;

!
! MACRO TO GENERATE EQULST CONSTRUCTS.
!
MACRO
	$EQULST(P,G,I,S)[A]=
	    %NAME(P,GET1ST_ A) =
		%IF NUL2ND_ A
		%THEN (I) + %COUNT*(S)	! ASSUMES I, S ALWAYS GENERATED BY CONVERSION PROGRAM
		%ELSE GET2ND_ A
		%FI %,

	GET1ST_(A,B)=
	     A %,
	GET2ND_(A,B)=
	     B %,	! KNOWN NON-NULL
	NUL2ND_(A,B)=
	     %NULL(B) %;

!		for the BLISS translator which generates BLISS keyword
!		macros from the $name_S macros in this file.
!
! SYSTEM SERVICE MACRO DEFINITIONS
!

!
! ADJUST WORKING SET LIMIT
!
!	PAGCNT	- NUMBER OF PAGES TO ADD TO WORKING SET IF POSITIVE
!		  NUMBER OF PAGES TO SUBTRACT FROM WORKING SET IF NEGATIVE
!	WSETLM	- ADDRESS OF A LONGWORD TO RETURN NEW WORKING SET LIMIT
!



KEYWORDMACRO $ADJWSL(PAGCNT=0,WSETLM=0)=
    (
    EXTERNAL ROUTINE SYS$ADJWSL: ADDRESSING_MODE(ABSOLUTE);
    SYS$ADJWSL(PAGCNT,WSETLM)
    ) %;
!
! ADJUST OUTER MODE STACK POINTER SERVICE
!
!	ACMODE	- ACCESS MODE TO ADJUST STACK POINTER FOR
!	ADJUST	- 16-BIT SIGNED ADJUSTMENT VALUE
!	NEWADR	- ADDRESS OF LONGWORD TO STORE UPDATED VALUE
!




KEYWORDMACRO $ADJSTK(ACMODE=0,ADJUST=0,NEWADR=0)=
    (
    EXTERNAL ROUTINE SYS$ADJSTK: ADDRESSING_MODE(ABSOLUTE);
    SYS$ADJSTK(ACMODE,ADJUST,NEWADR)
    ) %;

!
! ALLOCATE DEVICE
!
!	DEVNAM	- ADDRESS OF DEVICE NAME STRING DESCRIPTOR
!	PHYLEN	- ADDRESS OF WORD TO RECEIVE LENGTH OF PHYSICAL NAME
!	PHYBUF	- ADDRESS OF PHYSICAL NAME BUFFER DESCRIPTOR
!	ACMODE	- ACCESS MODE FOR UCB OF ALLOCATED DEVICE
!



KEYWORDMACRO $ALLOC(DEVNAM=0,PHYLEN=0,PHYBUF=0,ACMODE=0)=
    (
    EXTERNAL ROUTINE SYS$ALLOC: ADDRESSING_MODE(ABSOLUTE);
    SYS$ALLOC(DEVNAM,PHYLEN,PHYBUF,ACMODE)
    ) %;
!
! ASSOCIATE COMMON EVENT FLAG CLUSTER
!
!	EFN	- NUMBER OF AN EVENT FLAG IN THE CLUSTER WITH WHICH TO ASSOCIATE
!	NAME	- ADDRESS OF THE TEXT NAME STRING DESCRIPTOR
!	PROT	- PROTECTION INDICATOR FOR THE CLUSTER
!		0 -> DEFAULT, ANY PROCESS IN GROUP
!		1 -> ONLY OWNER'S UIC
!	PERM	- PERMANENT INDICATOR
!		0 -> TEMPORARY
!		1 -> PERMANENT
!




KEYWORDMACRO $ASCEFC(EFN=0,NAME=0,PROT=0,PERM=0)=
    (
    EXTERNAL ROUTINE SYS$ASCEFC: ADDRESSING_MODE(ABSOLUTE);
    SYS$ASCEFC(EFN,NAME,PROT,PERM)
    ) %;

!
! CONVERT BINARY TIME TO ASCII STRING
!
!	TIMLEN  - ADDRESS OF A WORD TO RECEIVE THE NUMBER OF CHARACTERS
!		  INSERTED INTO THE OUTPUT BUFFER
!	TIMBUF	- ADDRESS OF A QUADWORD DESCRIPTOR DESCRIBING THE BUFFER
!		  TO RECEIVE THE CONVERTED TIME
!	TIMADR	- ADDRESS OF THE QUADWORD CONTAINING THE 64-BIT TIME TO BE
!		  CONVERTED TO ASCII
!	CVTFLG	- 0 -> RETURN FULL DATE AND TIME
!		  1 -> RETURN CONVERTED TIME ONLY
!




KEYWORDMACRO $ASCTIM(TIMLEN=0,TIMBUF=0,TIMADR=0,CVTFLG=0)=
    (
    EXTERNAL ROUTINE SYS$ASCTIM: ADDRESSING_MODE(ABSOLUTE);
    SYS$ASCTIM(TIMLEN,TIMBUF,TIMADR,CVTFLG)
    ) %;

!
! ASSIGN I/O CHANNEL
!
!	DEVNAM	- ADDRESS OF DEVICE NAME STRING DESCRIPTOR
!	CHAN	- ADDRESS OF WORD TO RECEIVE CHANNEL NUMBER ASSIGNED
!	ACMODE	- ACCESS MODE FOR CHANNEL'S CCB
!	MBXNAM	- ADDRESS OF OPTIONAL MAILBOX NAME STRING DESCRIPTOR
!



KEYWORDMACRO $ASSIGN(DEVNAM=0,CHAN=0,ACMODE=0,MBXNAM=0)=
    (
    EXTERNAL ROUTINE SYS$ASSIGN: ADDRESSING_MODE(ABSOLUTE);
    SYS$ASSIGN(DEVNAM,CHAN,ACMODE,MBXNAM)
    ) %;

!
! BINTIM - CONVERT ASCII STRING TO BINARY TIME
!
!	TIMBUF	- ADDRESS OF ASCII STRING DESCRIPTOR FOR ASCII TIME STRING
!	TIMADR 	- ADDRESS OF QUADWORD TO RECEIVE 64 BIT BINARY TIME
!




KEYWORDMACRO $BINTIM(TIMBUF=0,TIMADR=0)=
    (
    EXTERNAL ROUTINE SYS$BINTIM: ADDRESSING_MODE(ABSOLUTE);
    SYS$BINTIM(TIMBUF,TIMADR)
    ) %;

!
! BROADCAST MESSAGE
!
! 	MSGBUF	- ADDRESS OF MESSAGE BUFFER DESCRIPTOR
!	DEVNAM	- ADDRESS OF TARGET TERMINAL STRING DESCRIPTOR. ZERO
!		  IMPLIES SEND TO ALL TERMINALS. IF DESCRIPTOR HAS ZERO
!		  LENGTH, THEN SEND TO ALL ALLOCATED TERMINALS.
!




KEYWORDMACRO $BRDCST(MSGBUF=0,DEVNAM=0)=
    (
    EXTERNAL ROUTINE SYS$BRDCST: ADDRESSING_MODE(ABSOLUTE);
    SYS$BRDCST(MSGBUF,DEVNAM)
    ) %;
!++
! MACRO TO GENERATE SYSTEM BUGCHECK
!--

!
! CANCEL I/O ON CHANNEL
!
!	CHAN - CHANNEL ON WHICH ALL I/O WILL BE CANCELED
!




KEYWORDMACRO $CANCEL(CHAN=0)=
    (
    EXTERNAL ROUTINE SYS$CANCEL: ADDRESSING_MODE(ABSOLUTE);
    SYS$CANCEL(CHAN)
    ) %;

!
! CANCEL EXIT HANDLER
!
!	DESBLK - ADDRESS OF PREVIOUSLY DECLARED EXIT HANDLER CONTROL BLOCK
!
!




KEYWORDMACRO $CANEXH(DESBLK=0)=
    (
    EXTERNAL ROUTINE SYS$CANEXH: ADDRESSING_MODE(ABSOLUTE);
    SYS$CANEXH(DESBLK)
    ) %;

!
! CANCEL TIMER REQUEST
!
!	REQIDT	- REQUEST IDENTIFICATION FOR REQUEST TO BE CANCELED
!	ACMODE	- ACCESS MODE OF REQUESTS TO BE CANCELED
!




KEYWORDMACRO $CANTIM(REQIDT=0,ACMODE=0)=
    (
    EXTERNAL ROUTINE SYS$CANTIM: ADDRESSING_MODE(ABSOLUTE);
    SYS$CANTIM(REQIDT,ACMODE)
    ) %;

!
! CANCEL WAKEUP
!
!	PIDADR	- ADDRESS OF PROCESS ID OF PROCESS TO AWAKE
!	PRCNAM	- ADDRESS OF PROCESS NAME STRING DESCRIPTOR
!




KEYWORDMACRO $CANWAK(PIDADR=0,PRCNAM=0)=
    (
    EXTERNAL ROUTINE SYS$CANWAK: ADDRESSING_MODE(ABSOLUTE);
    SYS$CANWAK(PIDADR,PRCNAM)
    ) %;
!
! CLEAR EVENT FLAG
!
!	EFN	- EVENT FLAG NUMBER TO BE CLEARED
!




KEYWORDMACRO $CLREF(EFN=0)=
    (
    EXTERNAL ROUTINE SYS$CLREF: ADDRESSING_MODE(ABSOLUTE);
    SYS$CLREF(EFN)
    ) %;

!
! CHANGE TO EXECUTIVE MODE
!
!	ROUTIN	- ADDRESS OF ROUTINE TO BE EXECUTED IN EXECUTIVE MODE
!	ARGLST	- ADDRESS OF ARGUMENT LIST TO BE SUPPLIED TO THE ROUTINE
!




KEYWORDMACRO $CMEXEC(ROUTIN=0,ARGLST=0)=
    (
    EXTERNAL ROUTINE SYS$CMEXEC: ADDRESSING_MODE(ABSOLUTE);
    SYS$CMEXEC(ROUTIN,ARGLST)
    ) %;

!
! CHANGE TO KERNEL MODE
!
!	ROUTIN	- ADDRESS OF ROUTINE TO EXECUTE IN KERNEL MODE
!	ARGLST	- ADDRESS OF ARGUMENT LIST TO BE SUPPLIED TO ROUTINE
!




KEYWORDMACRO $CMKRNL(ROUTIN=0,ARGLST=0)=
    (
    EXTERNAL ROUTINE SYS$CMKRNL: ADDRESSING_MODE(ABSOLUTE);
    SYS$CMKRNL(ROUTIN,ARGLST)
    ) %;

!
! CONTRACT PROGRAM/CONTROL REGION
!
!	PAGCNT	- NUMBER OF PAGES TO BE DELETED FROM END OF REGION
!	RETADR	- ADDRESS OF TWO LONGWORD ARRAY TO RECEIVE VIRTUAL ADDRESSES
!		  OF STARTING AND ENDING PAGE OF DELETED AREA
!	ACMODE	- ACCESS MODE FOR WHICH SERVICE IS PERFORMED
!	REGION	- REGION INDICATOR
!		  0 -> PROGRAM (P0) REGION
!		  1 -> CONTROL (P1) REGION
!




KEYWORDMACRO $CNTREG(PAGCNT=0,RETADR=0,ACMODE=0,REGION=0)=
    (
    EXTERNAL ROUTINE SYS$CNTREG: ADDRESSING_MODE(ABSOLUTE);
    SYS$CNTREG(PAGCNT,RETADR,ACMODE,REGION)
    ) %;

!
! CREATE LOGICAL NAME
!
!	TBLFLG	- LOGICAL NAME TABLE NUMBER
!		 0 -> SYSTEM TABLE
!		 1 -> GROUP TABLE
!		 2 -> PROCESS TABLE
!	LOGNAM	- ADDRESS OF LOGICAL NAME STRING DESCRIPTOR
!	EQLNAM	- ADDRESS OF EQUIVALENCE NAME STRING DESCRIPTOR
!	ACMODE	- ACCESS MODE FOR LOGICAL NAME
!




KEYWORDMACRO $CRELOG(TBLFLG=0,LOGNAM=0,EQLNAM=0,ACMODE=0)=
    (
    EXTERNAL ROUTINE SYS$CRELOG: ADDRESSING_MODE(ABSOLUTE);
    SYS$CRELOG(TBLFLG,LOGNAM,EQLNAM,ACMODE)
    ) %;

!
! CREATE MAILBOX AND ASSIGN CHANNEL
!
!	PRMFLG	- PERMANENT FLAG
!		  1 -> CREATE PERMANENT MAILBOX
!		  0 -> CREATE TEMPORARY MAILBOX (DEFAULT)
!	CHAN	- ADDRESS OF WORD TO RECEIVE CHANNEL ASSIGNED
!	MAXMSG	- MAXIMUM MESSAGE SIZE THAT MAY BE RECEIVED BY MAILBOX
!	BUFQUO	- BYTES OF DYNAMIC MEMORY THAT MAY BE USED TO BUFFER
!		  MAILBOX MESSAGES
!	PROMSK	- PROTECTION MASK FOR MAILBOX
!	ACMODE	- ACCESS MODE OF CREATED MAILBOX
!	LOGNAM	- ADDRESS OF LOGICAL NAME STRING DESCRIPTOR FOR MAILBOX
!




KEYWORDMACRO $CREMBX(PRMFLG=0,CHAN=0,MAXMSG=0,BUFQUO=0,PROMSK=0,ACMODE=0,LOGNAM=0)=
    (
    EXTERNAL ROUTINE SYS$CREMBX: ADDRESSING_MODE(ABSOLUTE);
    SYS$CREMBX(PRMFLG,CHAN,MAXMSG,BUFQUO,PROMSK,ACMODE,LOGNAM)
    ) %;

!
! CREATE PROCESS
!
!	PIDADR	- ADDRESS OF LONGWORD IN WHICH TO RETURN PID OF CREATED
!		  PROCESS.
!	IMAGE	- ADDRESS OF STRING DESCRIPTOR FOR IMAGE NAME.
!	INPUT	- ADDRESS OF STRING DESCRIPTOR FOR INPUT LOGICAL NAME.
!	OUTPUT	- ADDRESS OF STRING DESCRIPTOR FOR OUTPUT LOGICAL NAME.
!	ERROR	- ADDRESS OF STRING DESCRIPTOR FOR ERROR LOGICAL NAME.
!	PRVADR	- ADDRESS OF PRIVILEGE MASK (QUAD WORD).
!	QUOTA	- ADDRESS OF QUOTA LIST.
!	PRCNAM	- ADDRESS OF STRING DESCRIPTOR FOR PROCESS NAME.
!	BASPRI	- BASE PRIORITY (0,31) TO SET FOR NEW PROCESS.
!	UIC	- USER IDENTIFICATION CODE, 0=>SUBPROCESS.
!	MBXUNT	- MAILBOX UNIT FOR TERMINATION MESSAGE.
!	STSFLG	- STATUS AND MODE FLAG BITS.
!		  BIT       MEANING
!		  ---       -------
!		   0	    RESOURCE WAIT DISABLE
!		   1	    SYSTEM SERVICE FAILURE EXCEPTION ENABLE
!		   2        SWAP MODE (1=>DONT SWAP)
!		   3	    ACCOUNTING MESSAGE DISABLE
!		   4	    BATCH PROCESS
!		   5	    MAKE PROCESS HIBERNATE
!		   6	    ALLOW LOGIN WITH AUTHORIZATION FILE CHECK
!		   7        PROCESS IS NETWORK CONNECT OBJECT
!




KEYWORDMACRO $CREPRC(PIDADR=0,IMAGE=0,INPUT=0,OUTPUT=0,ERROR=0,PRVADR=0,QUOTA=0,PRCNAM=0,BASPRI=2,UIC=0,MBXUNT=0,STSFLG=0)=
    (
    EXTERNAL ROUTINE SYS$CREPRC: ADDRESSING_MODE(ABSOLUTE);
    SYS$CREPRC(PIDADR,IMAGE,INPUT,OUTPUT,ERROR,PRVADR,QUOTA,PRCNAM,BASPRI,UIC,MBXUNT,STSFLG)
    ) %;

!
! CREATE VIRTUAL ADDRESS SPACE
!
!	INADR	- ADDRESS OF 2-LONGWORD ARRAY CONTAINING STARTING AND
!		  ENDING VIRTUAL ADDRESS OF PAGES TO BE CREATED
!	RETADR	- ADDRESS OF A 2-LONGWORD ARRAY TO RECEIVE STARTING
!		  AND ENDING VIRTUAL ADDRESS OF PAGES ACTUALLY CREATED
!	ACMODE	- ACCESS MODE FOR THE NEW PAGES. (PROT IS R/W FOR ACMODE
!		  AND MORE PRIVILEGED MODES).
!




KEYWORDMACRO $CRETVA(INADR=0,RETADR=0,ACMODE=0)=
    (
    EXTERNAL ROUTINE SYS$CRETVA: ADDRESSING_MODE(ABSOLUTE);
    SYS$CRETVA(INADR,RETADR,ACMODE)
    ) %;

!
! CREATE AND MAP PROCESS OR GLOBAL SECTION
!
!	INADR	- ADDRESS OF 2-LONGWORD ARRAY CONTAINING STARTING AND
!		  ENDING ADDRESS INTO WHICH THE SECTION WILL BE MAPPED
!	RETADR	- ADDRESS OF 2-LONGWORD ARRAY INTO WHICH THE ADDRESSES
!		  ACTUALLY MAPPED ARE RETURNED
!	ACMODE	- ACCESS MODE OWNING THE PAGES CREATED
!	FLAGS	- MASK DEFINING SECTION TYPE AND CHARACTERISTICS
!	GSDNAM	- ADDRESS OF DESCRIPTOR FOR THE SECTION NAME
!	IDENT	- ADDRESS OF QUADWORD VERSION IDENTIFICATION
!	RELPAG	- RELATIVE PAGE NUMBER WITHIN THE SECTION OF THE
!		  FIRST PAGE TO BE MAPPED
!	CHAN	- CHANNEL NUMBER ON WHICH FILE HAS BEEN ACCESSED
!	PAGCNT	- NUMBER OF PAGES IN SECTION
!	VBN	- VIRTUAL BLOCK NUMBER OF THE BEGINNING OF THE SECTION
!	PROT	- PROTECTION MASK TO BE APPLIED TO THE SECTION
!	PFC	- PAGE FAULT CLUSTER SIZE
!




KEYWORDMACRO $CRMPSC(INADR=0,RETADR=0,ACMODE=0,FLAGS=0,GSDNAM=0,IDENT=0,RELPAG=0,CHAN=0,PAGCNT=0,VBN=0,PROT=0,PFC=0)=
    (
    EXTERNAL ROUTINE SYS$CRMPSC: ADDRESSING_MODE(ABSOLUTE);
    SYS$CRMPSC(INADR,RETADR,ACMODE,FLAGS,GSDNAM,IDENT,RELPAG,CHAN,PAGCNT,VBN,PROT,PFC)
    ) %;
! DISASSOCIATE COMMON EVENT FLAG CLUSTER
!
!	EFN	- NUMBER OF AN EVENT FLAG IN THE CLUSTER TO BE DISASSOCIATED
!




KEYWORDMACRO $DACEFC(EFN=0)=
    (
    EXTERNAL ROUTINE SYS$DACEFC: ADDRESSING_MODE(ABSOLUTE);
    SYS$DACEFC(EFN)
    ) %;

!
! DEALLOCATE DEVICE
!
!	DEVNAM	- ADDRESS OF DEVICE NAME STRING DESCRIPTOR. ZERO IMPLIES
!		ALL.
!	ACMODE	- ACCESS MODE.
!



KEYWORDMACRO $DALLOC(DEVNAM=0,ACMODE=0)=
    (
    EXTERNAL ROUTINE SYS$DALLOC: ADDRESSING_MODE(ABSOLUTE);
    SYS$DALLOC(DEVNAM,ACMODE)
    ) %;
!
! DEASSIGN I/O CHANNEL
!
!	CHAN	- NUMBER OF CHANNEL TO BE DEASSIGNED
!



KEYWORDMACRO $DASSGN(CHAN=0)=
    (
    EXTERNAL ROUTINE SYS$DASSGN: ADDRESSING_MODE(ABSOLUTE);
    SYS$DASSGN(CHAN)
    ) %;
!
! DECLARE AST
!
!	ASTADR	- ENTRY ADDRESS OF AST ROUTINE
!	ASTPRM	- VALUE TO BE PASSED TO AST ROUTINE AS AN ARGUMENT
!	ACMODE	- ACCESS MODE FOR WHICH THE AST IS TO BE DECLARED
!




KEYWORDMACRO $DCLAST(ASTADR=0,ASTPRM=0,ACMODE=0)=
    (
    EXTERNAL ROUTINE SYS$DCLAST: ADDRESSING_MODE(ABSOLUTE);
    SYS$DCLAST(ASTADR,ASTPRM,ACMODE)
    ) %;

!
! DECLARE CHANGE MODE OR COMPATIBILITY MODE HANDLER
!
! 	ADDRES	- ADDRESS OF THE HANDLER TO BE DECLARED
!	PRVHND	- ADDRESS OF A LONGWORD TO RECEIVE THE PREVIOUS HANDLER ADDRESS
!	TYPE    - HANDLER TYPE INDICATOR
!		0 = DECLARE CHANGE MODE HANDLER FOR CURRENT MODE
!		1 = DECLARE COMPATIBILITY MODE HANDLER
!




KEYWORDMACRO $DCLCMH(ADDRES=0,PRVHND=0,TYPE=0)=
    (
    EXTERNAL ROUTINE SYS$DCLCMH: ADDRESSING_MODE(ABSOLUTE);
    SYS$DCLCMH(ADDRES,PRVHND,TYPE)
    ) %;

!
! DECLARE EXIT HANDLER
!
!	DESBLK	- ADDRESS OF EXIT CONTROL BLOCK CONTAINING
!		
!		+-------------------------------------------+
!		!              FORWARD LINK                 !
!		+-------------------------------------------+
!		!                  EXIT HANDL. ADDRESS      !
!		+-------------------------------------------+
!		!		0                   !  N    !
!		+-------------------------------------------+
!		!   ADDRESS TO STORE REASON FOR EXIT        !
!		+-------------------------------------------+
!		!  ADDITIONAL			            !
!		!      ARGUMENTS		            !
!		!	   IF			            !
!		!	      ANY			    !
!		+-------------------------------------------+
!




KEYWORDMACRO $DCLEXH(DESBLK=0)=
    (
    EXTERNAL ROUTINE SYS$DCLEXH: ADDRESSING_MODE(ABSOLUTE);
    SYS$DCLEXH(DESBLK)
    ) %;

!
! DELETE LOGICAL NAME
!
!	TBLFLG	- LOGICAL NAME TABLE NUMBER
!		  0 -> SYSTEM, 1 -> GROUP, 2 -> LOCAL
!	LOGNAM	- ADDRESS OF LOGICAL NAME STRING DESCRIPTOR.
!		ZERO IMPLIES ALL.
!	ACMODE	- ACCESS MODE OF LOGICAL NAME
!




KEYWORDMACRO $DELLOG(TBLFLG=0,LOGNAM=0,ACMODE=0)=
    (
    EXTERNAL ROUTINE SYS$DELLOG: ADDRESSING_MODE(ABSOLUTE);
    SYS$DELLOG(TBLFLG,LOGNAM,ACMODE)
    ) %;

!
! DELETE MAILBOX
!
!	CHAN - CHANNEL ON WHICH MAILBOX IS ASSIGNED
!




KEYWORDMACRO $DELMBX(CHAN=0)=
    (
    EXTERNAL ROUTINE SYS$DELMBX: ADDRESSING_MODE(ABSOLUTE);
    SYS$DELMBX(CHAN)
    ) %;

!
! DELETE PROCESS
!
!	PIDADR   - ADDRESS OF LONGWORD CONTAINING PID OF PROCESS TO
!		 - BE DELETED.
!	PRCNAM   - ADDRESS OF STRING DESCRIPTOR FOR PROCESS NAME OF
!		   PROCESS TO BE DELETED.
!




KEYWORDMACRO $DELPRC(PIDADR=0,PRCNAM=0)=
    (
    EXTERNAL ROUTINE SYS$DELPRC: ADDRESSING_MODE(ABSOLUTE);
    SYS$DELPRC(PIDADR,PRCNAM)
    ) %;

!
! DELETE VIRTUAL ADDRESS SPACE
!
!	INADR	- ADDRESS OF 2 LONGWORD ARRAY CONTAINING STARTING AND
!		  ENDING VIRTUAL ADDRESSES OF PAGES TO DELETE
!	RETADR	- ADDRESS OF 2 LONGWORD ARRAY TO RECEIVE STARTING AND
!		  ENDING ADDRESSES OF PAGES ACTUALLY DELETED
!	ACMODE	- ACCESS MODE FOR WHICH SERVICE IS PERFORMED
!




KEYWORDMACRO $DELTVA(INADR=0,RETADR=0,ACMODE=0)=
    (
    EXTERNAL ROUTINE SYS$DELTVA: ADDRESSING_MODE(ABSOLUTE);
    SYS$DELTVA(INADR,RETADR,ACMODE)
    ) %;

!
! DELETE GLOBAL SECTION
!
!	FLAGS	- MASK INDICATING GLOBAL SECTION CHARACTERISTICS
!	GSDNAM	- ADDRESS OF STRING DESCRIPTOR FOR SECTION NAME STRING
!	IDENT - ADDRESS OF QUADWORD IDENTIFICATION
!




KEYWORDMACRO $DGBLSC(FLAGS=0,GSDNAM=0,IDENT=0)=
    (
    EXTERNAL ROUTINE SYS$DGBLSC: ADDRESSING_MODE(ABSOLUTE);
    SYS$DGBLSC(FLAGS,GSDNAM,IDENT)
    ) %;

!
! DELETE COMMON EVENT FLAG CLUSTER
!
!	NAME	- ADDRESS OF TEXT NAME STRING DESCRIPTOR OF PERMANENT CLUSTER
!




KEYWORDMACRO $DLCEFC(NAME=0)=
    (
    EXTERNAL ROUTINE SYS$DLCEFC: ADDRESSING_MODE(ABSOLUTE);
    SYS$DLCEFC(NAME)
    ) %;

!
! EXIT SYSTEM SERVICE - EXIT CURRENT IMAGE
!
!	CODE	- LONGWORD TO BE SAVED IN PROCESS HEADER AS COMPLETION STATUS
!		  OF CURRENT IMAGE ( DEFAULT IS SS$_NORMAL )
!




KEYWORDMACRO $EXIT(CODE=1)=
    (
    EXTERNAL ROUTINE SYS$EXIT: ADDRESSING_MODE(ABSOLUTE);
    SYS$EXIT(CODE)
    ) %;

!
! EXPAND PROGRAM/CONTROL REGION
!
!	PAGCNT	- NUMBER OF PAGES TO ADD TO END OF SPECIFIED REGION
!	RETADR	- ADDRESS OF 2-LONGWORD ARRAY TO RECEIVE VIRTUAL ADDRESSES
!		  OF STARTING AND ENDING PAGES OF EXPANDED REGION
!	ACMODE	- ACCESS MODE OF THE NEW PAGES
!	REGION	- REGION INDICATOR
!		  0 -> EXPAND PROGRAM (P0) REGION
!		  1 -> EXPAND CONTROL (P1) REGION
!




KEYWORDMACRO $EXPREG(PAGCNT=0,RETADR=0,ACMODE=0,REGION=0)=
    (
    EXTERNAL ROUTINE SYS$EXPREG: ADDRESSING_MODE(ABSOLUTE);
    SYS$EXPREG(PAGCNT,RETADR,ACMODE,REGION)
    ) %;
! FORMATTED ASCII OUTPUT (FAO)
!
!	CTRSTR	- ADDRESS OF STRING DESCRIPTOR FOR ASCII CONTROL STRING
!	OUTLEN	- ADDRESS OF WORD IN WHICH TO STORE OUTPUT STRING LENGTH
!	OUTBUF	- ADDRESS OF OUTPUT BUFFER STRING DESCRIPTOR
!	P1 ... 	- VARIABLE NUMBER OF ARGUMENTS TO FAO
!
!	NOTE ***** THE LAST ARGUMENT IN THE $FAO_S ARGUMENT LIST
!	(END_VARNUM_ARGS) IS THERE ONLY FOR THE "MARBLI" PROGRAM WHICH CONVERTS
!	THIS FILE INTO BLISS MACROS.  IT INDICATES THE END OF A SERVICE
!	WITH A VARIABLE LENGTH ARGUMENT LIST.
!




MACRO $FAO[]=
    (
    EXTERNAL ROUTINE SYS$FAO: ADDRESSING_MODE(ABSOLUTE);
    SYS$FAO(%REMAINING)
    ) %;

!
! FORMATTED ASCII OUTPUT WITH LIST PARAMETER (FAOL)
!
!	CTRSTR	- ADDRESS OF STRING DESCRIPTOR FOR CONTROL STRING
!	OUTLEN	- ADDRESS OF WORD TO RECEIVE OUTPUT STRING LENGTH
!	OUTBUF	- ADDRESS OF OUTPUT BUFFER STRING DESCRIPTOR
!	PRMLST	- ADDRESS OF A LIST OF LONGWORD PARAMETERS 
!




KEYWORDMACRO $FAOL(CTRSTR=0,OUTLEN=0,OUTBUF=0,PRMLST=0)=
    (
    EXTERNAL ROUTINE SYS$FAOL: ADDRESSING_MODE(ABSOLUTE);
    SYS$FAOL(CTRSTR,OUTLEN,OUTBUF,PRMLST)
    ) %;

!
! FORCE EXIT
!
!	PIDADR	- ADDRESS OF THE PID OF PROCESS TO BE FORCED
!	PRCNAM	- ADDRESS OF PROCESS NAME STRING DESCRIPTOR FOR FORCED PROCESS
!	CODE	- LONGWORD COMPLETION STATUS FOR EXIT SERVICE
!




KEYWORDMACRO $FORCEX(PIDADR=0,PRCNAM=0,CODE=0)=
    (
    EXTERNAL ROUTINE SYS$FORCEX: ADDRESSING_MODE(ABSOLUTE);
    SYS$FORCEX(PIDADR,PRCNAM,CODE)
    ) %;

!
! GET CHANNEL INFORMATION
!
!	CHAN - CHANNEL NUMBER 
!	PRILEN - ADDRESS TO STORE LENGTH OF PRIMARY DEVICE INFORMATION RETURNED
!	PRIBUF - ADDRESS OF BUFFER DESCRIPTOR FOR PRIMARY DEVICE BUFFER
!	SCDLEN - ADDRESS TO STORE LENGTH OF SECONDARY DEVICE INFORMATION
!	SCDBUF - ADDRESS OF SECONDARY BUFFER DESCRIPTOR
!




KEYWORDMACRO $GETCHN(CHAN=0,PRILEN=0,PRIBUF=0,SCDLEN=0,SCDBUF=0)=
    (
    EXTERNAL ROUTINE SYS$GETCHN: ADDRESSING_MODE(ABSOLUTE);
    SYS$GETCHN(CHAN,PRILEN,PRIBUF,SCDLEN,SCDBUF)
    ) %;

!
! GET DEVICE INFORMATION
!
!	DEVNAM - ADDRESS OF DEVICE NAME DESCRIPTOR
!	PRILEN - ADDRESS OF WORD TO RECEIVE LENGTH OF RETURNED INFORMATION
!	PRIBUF - ADDRESS OF DESCRIPTOR FOR PRIMARY DEVICE INFORMATION BUFFER
!	SCDLEN - ADDRESS OF WORD TO RECEIVE LENGTH OF SECONDARY INFORMATION
!	SCDBUF - ADDRESS OF DESCRIPTOR FOR SECONDARY DEVICE INFORMATION BUFFER
!




KEYWORDMACRO $GETDEV(DEVNAM=0,PRILEN=0,PRIBUF=0,SCDLEN=0,SCDBUF=0)=
    (
    EXTERNAL ROUTINE SYS$GETDEV: ADDRESSING_MODE(ABSOLUTE);
    SYS$GETDEV(DEVNAM,PRILEN,PRIBUF,SCDLEN,SCDBUF)
    ) %;

!
! GET JOB PROCESS INFORMATION
!
!	EFN - EVENT FLAG TO BE SET WHEN INFORMATION IS RETURNED (NOT USED NOW)
!	PIDADR - ADDRESS OF A LONGWORD CONTAINING THE PROCESS ID OF THE PROCESS
!		FOR WHICH INFORMATION IS REQUESTED
!	PRCNAM - ADDRESS OF A STRING DESCRIPTOR FOR THE PROCESS NAME OF THE
!		PROCESS FOR WHICH INFORMATION IS REQUESTED
!	ITMLST - ADDRESS OF A LIST OF ITEM DESCRIPTORS FOR THE INFORMATION
!		REQUESTED
!	IOSB - ADDRESS OF A QUADWORD I/O STATUS BLOCK TO RECEIVE
!		THE FINAL STATUS (NOT USED NOW)
!	ASTADR - ADDRESS OF AN AST ROUTINE TO BE CALLED WHEN INFORMATION IS
!		RETURNED (NOT USED NOW)
!	ASTPRM - ADDRESS OF A 32 BIT AST PARAMETER (NOT USED NOW)
!




KEYWORDMACRO $GETJPI(EFN=0,PIDADR=0,PRCNAM=0,ITMLST=0,IOSB=0,ASTADR=0,ASTPRM=0)=
    (
    EXTERNAL ROUTINE SYS$GETJPI: ADDRESSING_MODE(ABSOLUTE);
    SYS$GETJPI(EFN,PIDADR,PRCNAM,ITMLST,IOSB,ASTADR,ASTPRM)
    ) %;

!
! GET MESSAGE
!
!	MSGID	- IDENTIFICATION OF MESSAGE TO BE RETRIEVED
!	MSGLEN	- ADDRESS OF A WORD TO RECEIVE NUMBER OF BYTES TRANSFERRED
!	BUFADR	- ADDRESS OF BUFFER DESCRIPTOR
!	FLAGS	- FLAG INDICATORS FOR SELECTING TEXT, ID, SEVERITY
!	OUTADR	- ADDRESS OF 4 BYTE OUTPUT ARRAY FOR RETURN INFORMATION
!




KEYWORDMACRO $GETMSG(MSGID=0,MSGLEN=0,BUFADR=0,FLAGS=15,OUTADR=0)=
    (
    EXTERNAL ROUTINE SYS$GETMSG: ADDRESSING_MODE(ABSOLUTE);
    SYS$GETMSG(MSGID,MSGLEN,BUFADR,FLAGS,OUTADR)
    ) %;

!
! GET PAGE TABLE INFORMATION
!
!	INADR - ADDRESS 2 LONGWORDS CONTAINING STARTING AND ENDING VIRTUAL
!		ADDRESS TO OPERATE ON
!	RETADR - ADDRESS OF 2 LONGWORDS INTO WHICH STARTING AND ENDING ADDRESS
!		OF PAGES OPERATED ON IS RETURNED
!	ACMODE - ACCESS MODE AGAINST WHICH OWNERSHIP IS CHECKED
!	MASK - MASK OF PAGE TABLE INFORMATION CONTROL BITS
!	PAGCNT - MINIMUM PAGE COUNT
!




KEYWORDMACRO $GETPTI(INADR=0,RETADR=0,ACMODE=0,MASK=0,PAGCNT=0)=
    (
    EXTERNAL ROUTINE SYS$GETPTI: ADDRESSING_MODE(ABSOLUTE);
    SYS$GETPTI(INADR,RETADR,ACMODE,MASK,PAGCNT)
    ) %;

!
! GET TIME
!
!	TIMADR	- ADDRESS OF A QUADWORD TO RECEIVE 64 BIT TIME
!




KEYWORDMACRO $GETTIM(TIMADR=0)=
    (
    EXTERNAL ROUTINE SYS$GETTIM: ADDRESSING_MODE(ABSOLUTE);
    SYS$GETTIM(TIMADR)
    ) %;

!
! HIBERNATE
!
!	NOTE **** ONLY THE _S FORM IS SUPPLIED
!

KEYWORDMACRO $HIBER()=
    (
    EXTERNAL ROUTINE SYS$HIBER: ADDRESSING_MODE(ABSOLUTE);
    SYS$HIBER()
    ) %;

!
! $INPUT - SHORT FORM FOR QIO AND WAIT WITH READ LOGICAL BLOCK FUNCTION
!
!	CHAN	- CHANNEL ON WHICH I/O IS TO BE PERFORMED
!	LENGTH	- LENGTH OF THE INPUT BUFFER
!	BUFFER	- ADDRESS OF THE INPUT BUFFER
!	IOSB	- ADDRESS OF QUADWORD I/O STATUS BLOCK
!	EFN	- (OPTIONAL) EVENT FLAG TO WAIT ON (DEFAULT IS ZERO)
!


!
! IMGACT SYSTEM SERVICE - IMAGE ACTIVATOR
!
!	NAME - ADDRESS OF DESCRIPTOR FOR FILE NAME STRING
!	DFLNAM  - DESCRIPTOR FOR DEFAULT FILE NAME STRING
!	HDRBUF - ADDRESS OF 512 BYTE BUFFER TO WRITE IN
!




KEYWORDMACRO $IMGACT(NAME=0,DFLNAM=0,HDRBUF=0)=
    (
    EXTERNAL ROUTINE SYS$IMGACT: ADDRESSING_MODE(ABSOLUTE);
    SYS$IMGACT(NAME,DFLNAM,HDRBUF)
    ) %;
!
! LOCK PAGES IN MEMORY
!
!	INADR - ADDRESS OF 2-LONGWORD ARRAY CONTAINING STARTING AND
!		ENDING VIRTUAL ADDRESSES OF PAGES TO BE LOCKED
!	RETADR - ADDRESS OF A 2-LONGWORD ARRAY TO RECEIVE STARTING AND
!		ENDING VIRTUAL ADDRESSES OF PAGES ACTUALLY LOCKED
!	ACMODE - ACCESS MODE TO BE CHECKED AGAINST THE PAGE OWNER
!




KEYWORDMACRO $LCKPAG(INADR=0,RETADR=0,ACMODE=0)=
    (
    EXTERNAL ROUTINE SYS$LCKPAG: ADDRESSING_MODE(ABSOLUTE);
    SYS$LCKPAG(INADR,RETADR,ACMODE)
    ) %;

!
! LOCK PAGES IN WORKING SET
!
!	INADR	- ADDRESS OF 2-LONGWORD ARRAY CONTAINING STARTING AND
!		  ENDING VIRTUAL ADDRESSES OF PAGES TO BE LOCKED
!	RETADR	- ADDRESS OF A 2-LONGWORD ARRAY TO RECEIVE STARTING
!		  AND ENDING VIRTUAL ADDRESSES OF PAGES ACTUALLY LOCKED
!	ACMODE  - ACCESS MODE TO BE CHECKED AGAINST THE PAGE OWNER
!



KEYWORDMACRO $LKWSET(INADR=0,RETADR=0,ACMODE=0)=
    (
    EXTERNAL ROUTINE SYS$LKWSET: ADDRESSING_MODE(ABSOLUTE);
    SYS$LKWSET(INADR,RETADR,ACMODE)
    ) %;

!
! MAP GLOBAL SECTION
!
!	INADR - ADDRESS OF 2-LONGWORD ARRAY CONTAINING STARTING AND 
!		ENDING VIRTUAL ADDRESSES INTO WHICH THE SECTION WILL BE
!		MAPPED
!	RETADR - ADDRESS OF OPTIONAL 2-LONGWORD ARRAY TO RECEIVE THE
!		 STARTING AND ENDING VAs ACTUALLY MAPPED
!	ACMODE - ACCESS MODE TO BE THE OWNER OF THE CREATED PAGES
!	FLAGS  - MASK DEFINING THE SECTION TYPE AND CHARACTERISTICS
!	GSDNAM - ADDRESS OF THE SECTION NAME DESCRIPTOR
!	IDENT  - ADDRESS OF QUADWORD VERSION IDENTIFICATION
!	RELPAG - RELATIVE PAGE WITHIN SECTION
!




KEYWORDMACRO $MGBLSC(INADR=0,RETADR=0,ACMODE=0,FLAGS=0,GSDNAM=0,IDENT=0,RELPAG=0)=
    (
    EXTERNAL ROUTINE SYS$MGBLSC: ADDRESSING_MODE(ABSOLUTE);
    SYS$MGBLSC(INADR,RETADR,ACMODE,FLAGS,GSDNAM,IDENT,RELPAG)
    ) %;

!
! CONVERT TIME TO NUMERIC
!
! 	TIMBUF	- ADDRESS OF A 7-WORD BUFFER TO RECEIVE NUMERIC TIME
!		  INFORMATION.
!	TIMADR	- ADDRESS OF A QUADWORD CONTAINING THE 64-BIT TIME
!		  (DEFAULT IS CURRENT TIME)
!




KEYWORDMACRO $NUMTIM(TIMBUF=0,TIMADR=0)=
    (
    EXTERNAL ROUTINE SYS$NUMTIM: ADDRESSING_MODE(ABSOLUTE);
    SYS$NUMTIM(TIMBUF,TIMADR)
    ) %;

!
! $OUTPUT - SHORT FORM FOR QIO AND WAIT WITH WRITE VIRTUAL BLOCK
!
!	CHAN	- CHANNEL ON WHICH I/O IS DIRECTED
!	LENGTH	- LENGTH OF THE OUTPUT BUFFER
!	BUFFER	- ADDRESS OF THE OUTPUT BUFFER
!	IOSB	- (OPTIONAL) I/O STATUS BLOCK ADDRESS
!	EFN	- (OPTIONAL) EVENT FLAG NUMBER TO WAIT (DEFAULT IS 0)

!


!
! PURGE WORKING SET
!
!	INADR - ADDRESS OF TWO LONGWORD ARRAY OF STARTING AND ENDING ADDRESS
!




KEYWORDMACRO $PURGWS(INADR=0)=
    (
    EXTERNAL ROUTINE SYS$PURGWS: ADDRESSING_MODE(ABSOLUTE);
    SYS$PURGWS(INADR)
    ) %;

!
! PUT MESSAGE SYSTEM SERVICE
!
!	MSGVEC - ADDRESS OF MESSAGE ARGUMENT VECTOR
!	ACTRTN - ADDRESS OF USER-SUPPLIED ACTION ROUTINE
!	FACNAM - ADDRESS OF FACILITY NAME STRING DESCRIPTOR
!




KEYWORDMACRO $PUTMSG(MSGVEC=0,ACTRTN=0,FACNAM=0)=
    (
    EXTERNAL ROUTINE SYS$PUTMSG: ADDRESSING_MODE(ABSOLUTE);
    SYS$PUTMSG(MSGVEC,ACTRTN,FACNAM)
    ) %;

!
! QIO SYSTEM SERVICE
!
!	EFN	- NUMBER OF EVENT FLAG TO SET ON COMPLETION
!	CHAN	- NUMBER OF CHANNEL ON WHICH I/O IS DIRECTED
!	FUNC	- FUNCTION CODE SPECIFYING ACTION TO BE PERFORMED
!	IOSB	- ADDRESS OF QUADWORD I/O STATUS BLOCK TO RECEIVE FINAL
!		  COMPLETION STATUS INFORMATION
!	ASTADR	- ENTRY POINT ADDRESS OF AST ROUTINE
!	ASTPRM	- AST PARAMETER TO BE PASSED TO AST ROUTINE
!	P1 TO P6 - OPTIONAL DEVICE AND FUNCTION SPECIFIC PARAMETERS
!




KEYWORDMACRO $QIO(EFN=0,CHAN=0,FUNC=0,IOSB=0,ASTADR=0,ASTPRM=0,P1=0,P2=0,P3=0,P4=0,P5=0,P6=0)=
    (
    EXTERNAL ROUTINE SYS$QIO: ADDRESSING_MODE(ABSOLUTE);
    SYS$QIO(EFN,CHAN,FUNC,IOSB,ASTADR,ASTPRM,P1,P2,P3,P4,P5,P6)
    ) %;

!
! QIOW SYSTEM SERVICE
!
!	SEE QIO FOR PARAMETER DESCRIPTION
!




KEYWORDMACRO $QIOW(EFN=0,CHAN=0,FUNC=0,IOSB=0,ASTADR=0,ASTPRM=0,P1=0,P2=0,P3=0,P4=0,P5=0,P6=0)=
    (
    EXTERNAL ROUTINE SYS$QIOW: ADDRESSING_MODE(ABSOLUTE);
    SYS$QIOW(EFN,CHAN,FUNC,IOSB,ASTADR,ASTPRM,P1,P2,P3,P4,P5,P6)
    ) %;

!
! READ EVENT FLAGS
!
!	EFN	- EVENT FLAG NUMBER OF A FLAG IN THE CLUSTER TO BE READ
!	STATE	- ADDRESS OF A LONGWORD IN WHICH CURRENT STATE OF ALL FLAGS
!		  IN THE CLUSTER WILL BE RETURNED
!




KEYWORDMACRO $READEF(EFN=0,STATE=0)=
    (
    EXTERNAL ROUTINE SYS$READEF: ADDRESSING_MODE(ABSOLUTE);
    SYS$READEF(EFN,STATE)
    ) %;

!
! RESUME PROCESS
!
!	PIDADR	- ADDRESS OF PROCESS ID OF PROCESS TO BE RESUMED
!	PRCNAM	- ADDRESS OF PROCESS NAME STRING DESCRIPTOR 
!




KEYWORDMACRO $RESUME(PIDADR=0,PRCNAM=0)=
    (
    EXTERNAL ROUTINE SYS$RESUME: ADDRESSING_MODE(ABSOLUTE);
    SYS$RESUME(PIDADR,PRCNAM)
    ) %;
!
! RUNDOWN PROCESS
!
!	ACMODE - ACCESS MODE TO RUNDOWN.  THIS AND ALL LESS PRIVILEGED
!		 ACCESS MODES ARE RUNDOWN.
!




KEYWORDMACRO $RUNDWN(ACMODE=0)=
    (
    EXTERNAL ROUTINE SYS$RUNDWN: ADDRESSING_MODE(ABSOLUTE);
    SYS$RUNDWN(ACMODE)
    ) %;

!
! SCHEDULE WAKEUP
!
!	PIDADR	- ADDRESS OF PROCESS ID OF PROCESS TO BE AWAKENED
!	PRCNAM	- ADDRESS OF PROCESS NAME STRING DESCRIPTOR
!	DAYTIM	- ADDRESS OF QUADWORD CONTAINING TIME TO WAKE
!	REPTIM	- ADDRESS OF QUADWORD CONTAINING RESCHEDULE INTERVAL
!




KEYWORDMACRO $SCHDWK(PIDADR=0,PRCNAM=0,DAYTIM=0,REPTIM=0)=
    (
    EXTERNAL ROUTINE SYS$SCHDWK: ADDRESSING_MODE(ABSOLUTE);
    SYS$SCHDWK(PIDADR,PRCNAM,DAYTIM,REPTIM)
    ) %;

!
! SET AST ENABLE
!
!	ENBFLG	- AST ENABLE INDICATOR
!		  1 -> ENABLE AST'S FOR CALLER AT CURRENT ACCESS MODE
!		  0 -> DISABLE AST'S FOR CALLER AT CURRENT ACCESS MODE
!




KEYWORDMACRO $SETAST(ENBFLG=0)=
    (
    EXTERNAL ROUTINE SYS$SETAST: ADDRESSING_MODE(ABSOLUTE);
    SYS$SETAST(ENBFLG)
    ) %;

!
! SET TIMER
!
!	EFN	- EVENT FLAG TO SET WHEN TIMER EXPIRES
!	DAYTIM	- TIME AT WHICH TIMER WILL EXPIRE
!	ASTADR	- ENTRY POINT OF AST TO CALL WHEN TIMER EXPIRES
!	REQIDT	- REQUEST IDENTIFICATION AND AST ID PARAM
!




KEYWORDMACRO $SETIMR(EFN=0,DAYTIM=0,ASTADR=0,REQIDT=0)=
    (
    EXTERNAL ROUTINE SYS$SETIMR: ADDRESSING_MODE(ABSOLUTE);
    SYS$SETIMR(EFN,DAYTIM,ASTADR,REQIDT)
    ) %;

!
! SET EVENT FLAG
!
!	EFN	- EVENT FLAG NUMBER OF FLAG TO SET
!




KEYWORDMACRO $SETEF(EFN=0)=
    (
    EXTERNAL ROUTINE SYS$SETEF: ADDRESSING_MODE(ABSOLUTE);
    SYS$SETEF(EFN)
    ) %;
!
! SET EXCEPTION VECTOR
!
!	VECTOR	- VECTOR NUMBER
!		  0 -> MODIFY PRIMARY VECTOR
!		  1 -> MODIFY SECONDARY VECTOR
!		  2 -> MODIFY LAST CHANCE HANDLER
!	ADDRES	- EXCEPTION HANDLER ADDRESS ( 0 INDICATES DEASSIGN VECTOR)
!	ACMODE	- ACCESS MODE FOR WHICH VECTOR IS SET
!	PRVHND	- ADDRESS OF LONGWORD TO RECEIVE PREVIOUS HANDLER ADDRESS




KEYWORDMACRO $SETEXV(VECTOR=0,ADDRES=0,ACMODE=0,PRVHND=0)=
    (
    EXTERNAL ROUTINE SYS$SETEXV: ADDRESSING_MODE(ABSOLUTE);
    SYS$SETEXV(VECTOR,ADDRES,ACMODE,PRVHND)
    ) %;
!
! SET PAGE FAULT MONITORING
!
!	PFMFLG - 1 -> turn on monitoring
!		 0 -> turn off monitoring
!




KEYWORDMACRO $SETPFM(PFMFLG=1)=
    (
    EXTERNAL ROUTINE SYS$SETPFM: ADDRESSING_MODE(ABSOLUTE);
    SYS$SETPFM(PFMFLG)
    ) %;

!
! SET POWER RECOVERY AST
!
!	ASTADR = ADDRESS OF AST SERVICE ROUTINE
!	ACMODE = ACCESS MODE OF AST
!




KEYWORDMACRO $SETPRA(ASTADR=0,ACMODE=0)=
    (
    EXTERNAL ROUTINE SYS$SETPRA: ADDRESSING_MODE(ABSOLUTE);
    SYS$SETPRA(ASTADR,ACMODE)
    ) %;

!
! SET PROCESS NAME
!
!	PRCNAM	- ADDRESS OF THE PROCESS NAME STRING DESCRIPTOR
!




KEYWORDMACRO $SETPRN(PRCNAM=0)=
    (
    EXTERNAL ROUTINE SYS$SETPRN: ADDRESSING_MODE(ABSOLUTE);
    SYS$SETPRN(PRCNAM)
    ) %;

!
! SET PRIORITY
!
!	PIDADR	- ADDRESS OF THE PROCESS ID
!	PRCNAM	- ADDRESS OF PROCESS NAME STRING DESCRIPTOR
!	PRI	- NEW BASE PRIORITY FOR THE PROCESS
!		  0 - 15 ARE BACKGROUND, 16 - 31 ARE REAL-TIME
!	PRVPRI	- ADDRESS OF LONGWORD TO RECEIVE PREVIOUS BASE PRIORITY
!




KEYWORDMACRO $SETPRI(PIDADR=0,PRCNAM=0,PRI=0,PRVPRI=0)=
    (
    EXTERNAL ROUTINE SYS$SETPRI: ADDRESSING_MODE(ABSOLUTE);
    SYS$SETPRI(PIDADR,PRCNAM,PRI,PRVPRI)
    ) %;

!
! SET PROTECTION ON PAGES
!
!	INADR	- ADDRESS OF 2-LONGWORD ARRAY CONTAINING STARTING AND
!		  ENDING VIRTUAL ADDRESSES OF PAGES
!	RETADR	- ADDRESS OF 2-LONGWORD ARRAY IN WHICH STARTING AND ENDING
!		  ADDRESSES OF PAGES WHICH HAD THEIR PROTECTION CHANGED
!		  IS RETURNED
!	ACMODE	- ACCESS MODE OF REQUEST
!	PROT	- NEW PROTECTION
!
!	PRVPRT	- ADDRESS OF A BYTE TO RETURN THE PREVIOUS PROTECTION
!		OF THE LAST PAGE CHANGED.




KEYWORDMACRO $SETPRT(INADR=0,RETADR=0,ACMODE=0,PROT=0,PRVPRT=0)=
    (
    EXTERNAL ROUTINE SYS$SETPRT: ADDRESSING_MODE(ABSOLUTE);
    SYS$SETPRT(INADR,RETADR,ACMODE,PROT,PRVPRT)
    ) %;

!
! SET RESOURCE WAIT MODE
!
!	WATFLG	- WAIT INDICATOR
!		  0 -> WAIT FOR RESOURCES TO BECOME AVAILABLE
!		  1 -> RETURN FAILURE STATUS IMMEDIATELY
!




KEYWORDMACRO $SETRWM(WATFLG=0)=
    (
    EXTERNAL ROUTINE SYS$SETRWM: ADDRESSING_MODE(ABSOLUTE);
    SYS$SETRWM(WATFLG)
    ) %;

!
! SET SYSTEM SERVICE FAILURE MODE
!
!	ENBFLG	- ENABLE INDICATOR
!		  1 -> GENERATE EXCEPTIONS ON SYSTEM SERVICE FAILURES
!		  0 -> DISABLE EXCEPTIONS ON SYSTEM SERVICE FAILURES
!




KEYWORDMACRO $SETSFM(ENBFLG=0)=
    (
    EXTERNAL ROUTINE SYS$SETSFM: ADDRESSING_MODE(ABSOLUTE);
    SYS$SETSFM(ENBFLG)
    ) %;

!
! SET SWAP MODE
!
!	SWPFLG	- SWAP INDICATOR
!		0 -> ALLOW SWAPPING
!		1 -> DO NOT SWAP PROCESS
!




KEYWORDMACRO $SETSWM(SWPFLG=0)=
    (
    EXTERNAL ROUTINE SYS$SETSWM: ADDRESSING_MODE(ABSOLUTE);
    SYS$SETSWM(SWPFLG)
    ) %;
!
! SEND MESSAGE TO ACCOUNTING MANAGER
!
!	MSGBUF - ADDRESS OF MESSAGE BUFFER STRING DESCRIPTOR
!	CHAN - CHANNEL NUMBER FOR MAILBOX TO RECEIVE REPLY
!




KEYWORDMACRO $SNDACC(MSGBUF=0,CHAN=0)=
    (
    EXTERNAL ROUTINE SYS$SNDACC: ADDRESSING_MODE(ABSOLUTE);
    SYS$SNDACC(MSGBUF,CHAN)
    ) %;

!
! SEND MESSAGE TO ERROR LOGGER
!
!	MSGBUG - ADDRESS OF MESSAGE BUFFER STRING DESCRIPTOR
!




KEYWORDMACRO $SNDERR(MSGBUF=0)=
    (
    EXTERNAL ROUTINE SYS$SNDERR: ADDRESSING_MODE(ABSOLUTE);
    SYS$SNDERR(MSGBUF)
    ) %;

!
! SEND MESSAGE TO OPERATOR
!
!	MSGBUF - ADDRESS OF MESSAGE BUFFER STRING DESCRIPTOR
!	CHAN - CHANNEL NUMBER FOR MAILBOX TO RECEIVE REPLY
!




KEYWORDMACRO $SNDOPR(MSGBUF=0,CHAN=0)=
    (
    EXTERNAL ROUTINE SYS$SNDOPR: ADDRESSING_MODE(ABSOLUTE);
    SYS$SNDOPR(MSGBUF,CHAN)
    ) %;

!
! SEND MESSAGE TO SYMBIONT MANAGER
!
!	MSGBUF - ADDRESS OF MESSAGE BUFFER STRING DESCRIPTOR
!	CHAN - CHANNEL NUMBER OF MAILBOX TO RECEIVE THE REPLY
!




KEYWORDMACRO $SNDSMB(MSGBUF=0,CHAN=0)=
    (
    EXTERNAL ROUTINE SYS$SNDSMB: ADDRESSING_MODE(ABSOLUTE);
    SYS$SNDSMB(MSGBUF,CHAN)
    ) %;

!
! SUSPEND PROCESS
!
!	PIDADR	- ADDRESS OF THE PROCESS ID OF PROCESS TO SUSPEND
!	PRCNAM	- ADDRESS OF NAME STRING DESCRIPTOR OF PROCESS TO SUSPEND
!




KEYWORDMACRO $SUSPND(PIDADR=0,PRCNAM=0)=
    (
    EXTERNAL ROUTINE SYS$SUSPND: ADDRESSING_MODE(ABSOLUTE);
    SYS$SUSPND(PIDADR,PRCNAM)
    ) %;
!
! TRANSLATE LOGICAL NAME
!
!	LOGNAM	- ADDRESS OF LOGICAL NAME STRING DESCRIPTOR
!	RSLLEN	- ADDRESS OF WORD TO RECEIVE LENGTH OF RESULTANT
!		  NAME STRING
!	RSLBUF	- ADDRESS OF RESULT STRING BUFFER DESCRIPTOR
!	TABLE	- ADDRESS OF BYTE TO STORE TRANSLATION TABLE NUMBER
!	ACMODE	- ADDRESS OF BYTE TO STORE ASSIGNMENT ACCESS MODE
!	DSBMSK  - TABLE SEARCH DISABLE MASK
!




KEYWORDMACRO $TRNLOG(LOGNAM=0,RSLLEN=0,RSLBUF=0,TABLE=0,ACMODE=0,DSBMSK=0)=
    (
    EXTERNAL ROUTINE SYS$TRNLOG: ADDRESSING_MODE(ABSOLUTE);
    SYS$TRNLOG(LOGNAM,RSLLEN,RSLBUF,TABLE,ACMODE,DSBMSK)
    ) %;

!
! UNLOCK PAGES FROM MEMORY
!
!	INADR - ADDRESS OF 2-LONGWORD ARRAY CONTAINING STARTING AND
!		ENDING VIRTUAL ADDRESSES OF PAGES TO BE LOCKED
!	RETADR - ADDRESS OF A 2-LONGWORD ARRAY TO RECEIVE STARTING AND
!		ENDING VIRTUAL ADDRESSES OF PAGES ACTUALLY LOCKED
!	ACMODE - ACCESS MODE TO BE CHECKED AGAINST THE PAGE OWNER
!




KEYWORDMACRO $ULKPAG(INADR=0,RETADR=0,ACMODE=0)=
    (
    EXTERNAL ROUTINE SYS$ULKPAG: ADDRESSING_MODE(ABSOLUTE);
    SYS$ULKPAG(INADR,RETADR,ACMODE)
    ) %;

!
! UNLOCK PAGES FROM WORKING SET
!
!	INADR	- ADDRESS OF 2-LONGWORD ARRAY CONTAINING STARTING AND
!		  ENDING VIRTUAL ADDRESS OF PAGES TO BE UNLOCKED
!	RETADR	- ADDRESSES OF A 2-LONGWORD ARRAY TO RECEIVE STARTING
!		  AND ENDING VIRTUAL ADDRESS OF PAGES ACTUALLY UNLOCKED
!	ACMODE	- ACCESS MODE TO CHECK AGAINST THE PAGE OWNER
!



KEYWORDMACRO $ULWSET(INADR=0,RETADR=0,ACMODE=0)=
    (
    EXTERNAL ROUTINE SYS$ULWSET: ADDRESSING_MODE(ABSOLUTE);
    SYS$ULWSET(INADR,RETADR,ACMODE)
    ) %;
!
! UNWIND CALL STACK
!
!	DEPADR	- ADDRESS OF NUMBER OF LOGICAL FRAMES TO UNWIND CALL STACK
!	NEWPC	- CHANGE OF FLOW PC
!




KEYWORDMACRO $UNWIND(DEPADR=0,NEWPC=0)=
    (
    EXTERNAL ROUTINE SYS$UNWIND: ADDRESSING_MODE(ABSOLUTE);
    SYS$UNWIND(DEPADR,NEWPC)
    ) %;
!
! UPDATE SECTION FILE ON DISK
!
!	INADR - ADDRESS OF 2 LONGWORD ARRAY CONTAINING STARTING AND ENDING
!		VIRTUAL ADDRESS OF PAGES TO BE WRITTEN BACK TO SECTION FILE.
!	RETADR - ADDRESS OF 2 LONGWORD ARRAY TO RECEIVE STARTING AND ENDING
!		VIRTUAL ADDRESS OF PAGES ACTUALLY WRITTEN
!	ACMODE - ACCESS MODE ON BEHALF OF WHICH SERVICE IS PERFORMED.
!	UPDFLG - MASK QUALIFYING THE UPDATE REQUEST
!	EFN - NUMBER OF AN EVENT FLAG TO SET WHEN THE SECTION FILE IS UPDATED
!	IOSB - ADDRESS OF A QUADWORD I/O STATUS BLOCK THAT IS TO RECEIVE
!		THE COMPLETION STATUS WHEN THE FILE HAS BEEN UPDATED
!	ASTADR - ADDRESS OF AN AST SERVICE ROUTINE 
!	ASTPRM - AST PARAMETER
!




KEYWORDMACRO $UPDSEC(INADR=0,RETADR=0,ACMODE=0,UPDFLG=0,EFN=0,IOSB=0,ASTADR=0,ASTPRM=0)=
    (
    EXTERNAL ROUTINE SYS$UPDSEC: ADDRESSING_MODE(ABSOLUTE);
    SYS$UPDSEC(INADR,RETADR,ACMODE,UPDFLG,EFN,IOSB,ASTADR,ASTPRM)
    ) %;

!
! WAIT FOR SINGLE EVENT
!
!	EFN	- EVENT FLAG NUMBER OF EVENT TO WAIT FOR
!




KEYWORDMACRO $WAITFR(EFN=0)=
    (
    EXTERNAL ROUTINE SYS$WAITFR: ADDRESSING_MODE(ABSOLUTE);
    SYS$WAITFR(EFN)
    ) %;

!
! WAKE 
!
!	PIDADR	- ADDRESS OF PROCESS ID OF PROCESS TO BE AWAKENED
!	PRCNAM	- ADDRESS OF PROCESS NAME DESCRIPTOR 
!




KEYWORDMACRO $WAKE(PIDADR=0,PRCNAM=0)=
    (
    EXTERNAL ROUTINE SYS$WAKE: ADDRESSING_MODE(ABSOLUTE);
    SYS$WAKE(PIDADR,PRCNAM)
    ) %;

!
! WAIT FOR LOGICAL AND OF EVENT FLAGS
!
!	EFN	- EVENT FLAG NUMBER OF ANY FLAG WITHIN THE CLUSTER
!	MASK	- 32-BIT MASK IN WHICH BITS SET TO 1 SELECT THE EVENTS
!		  OF INTEREST
!




KEYWORDMACRO $WFLAND(EFN=0,MASK=0)=
    (
    EXTERNAL ROUTINE SYS$WFLAND: ADDRESSING_MODE(ABSOLUTE);
    SYS$WFLAND(EFN,MASK)
    ) %;

!
! WAIT FOR LOGICAL OR OF EVENT FLAGS
!
!	EFN	- EVENT FLAG NUMBER OF ANY FLAG WITHIN THE CLUSTER
!	MASK	- 32-BIT MASK IN WHICH BITS SET TO ONE SELECT EVENTS
!		  OF INTEREST
!




KEYWORDMACRO $WFLOR(EFN=0,MASK=0)=
    (
    EXTERNAL ROUTINE SYS$WFLOR: ADDRESSING_MODE(ABSOLUTE);
    SYS$WFLOR(EFN,MASK)
    ) %;

! RMS32.B32  -  REQUIRE FILE FOR BLISS-32 INTERFACE TO RMS-32
!
!			  COPYRIGHT (c) 1977 BY
!	      DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
!
! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
! ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
! INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
! COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
! OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
! TRANSFERRED.
!
! THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
! AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
! CORPORATION.
!
! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
!
!
!

!++
!
! FACILITY:	RMS-32 Interface from BLISS
!
! FUNCTIONAL DESCRIPTION:
!
!	This file is to be used as a REQUIRE FILE in any
!	BLISS-32 program using RMS-32.  Its MACROs permit
!	the BLISS-32 program to allocate and statically initialize
!	the control blocks of interest to RMS-32,
!	to dynamically initialize these control blocks,
!	to access the fields of these control blocks, and to invoke
!	the functions supported by RMS-32.
!
! ENVIRONMENT:  Link (automatically) with STARLET.OLB 
!
! AUTHOR:	Peter A. Belmont,	CREATION DATE:  27-May-77
!
! MODIFIED BY:
!		Peter A. Belmont,	22-Jun-77
!		- added $CLOSE, etc., to $RMS_CLOSE, etc.
!		- revised RMS_OKSTATUS macro
!		- changed "$K_" back to "$C_"
!		- fixed ASYN in $RAB to recognize YES (ASYN=YES)
!
!		Peter A. Belmont,	6-July-77
!		- added the XXX_INIT and XXX_INI macros
!		- which implement dynamic initialization of
!		- control blocks.
!
! DOCUMENTATION:
!
!	RMSMPP.RNO	Mini Project Plan, BLISS RMS Support Project
!	RMSSPC.RNO	Functional Specifications, BLISS RMS Support
!			User Documentation, BLISS RMS-32 Support
!			Maintenance Documentation, BLISS RMS-32 Support
!
!--


!++
!
! $RMS_OFFSET
!
!	User macro.  Takes name of an RMS-32 field as
!	parameter and evaluates to the BYTE offset
!	of that field from the base of the control block.
!
!	Use:
!		OFFSET = $RMS_OFFSET(FAB$L_ABC);
!
!--


MACRO

	$RMS_OFFSET(NAME) = $RMS_OFFSET_1(%REMOVE(NAME)) %,
	$RMS_OFFSET_1 (X) = X %;


!++
!
! STATIC INITIALIZATION MACRO UTILITIES
!
!	Internal macros.  Used by the initialization
!	macros below to assign initial values to
!	the fields of the RMS-32 control blocks.
!
!--

MACRO

!++
!
! $RMS_BITFLD (and its support macros ...)
!
!	Internal macro.  Allows the initialization
!	of a field with the OR of one or more (named) bits.
!
!	$RMS_BITFLD(ALLOC,PREFIX,VALUE) builds an
!	initial value of size ALLOC ( BYTE, WORD,
!	or LONG ), setting the bits whose names
!	are of the form PREFIX//VAL where
!	VAL is either VALUE or one of the elements
!	of VALUE when VALUE is a tuple (i.e., <A,B,C>).
!
!--

	$RMS_BITS(A,B)[]=
	    %NAME(A,B)   $RMS_OR(%REMAINING)   $RMS_BITS(A,%REMAINING) %,

	$RMS_OR[]=
	    OR %,

	$RMS_BITFLD(ALLOC,PREFIX,VALUE)=
	    %IF %NULL(VALUE)
	    %THEN ALLOC(0)
	    %ELSE ALLOC($RMS_BITS(PREFIX,%REMOVE(VALUE)))
	    %FI %,

!++
!
! $RMS_BITFLD_INI
!
!	Internal macro.  Permits the dynamic initialization
!	of a field with the OR of one or more named bits.
!
!	$RMS_BITFLD_INI(BLK,NAME,PREFIX,VALUE) stores
!	into BLK[NAME] the value obtained by OR'ing
!	together the bits whose names are PREFIX//VAL
!	where VAL is either VALUE or is one of the
!	elements of VALUE when VALUE is a tuple.
!
!--

    $RMS_BITFLD_INI(BLK,NAME,PREFIX,VALUE)=
	%IF %NULL(VALUE) %THEN %EXITMACRO %FI
	BLOCK[BLK,%REMOVE(NAME);0,BYTE] =
	$RMS_BITS(PREFIX,%REMOVE(VALUE)) %,



!++
!
! $RMS_CODFLD
!
!	Internal macro.  Allows the initialization
!	of a field with a named value.
!
!	$RMS_CODFLD(ALLOC,PREFIX,VALUE)
!	allocates a value of size ALLOC (BYTE, WORD, or LONG)
!	and initializes it with the value whose name
!	is PREFIX//VALUE.
!
!--

	$RMS_CODFLD(ALLOC,PREFIX,VALUE)=
	    ALLOC(%NAME(PREFIX,%REMOVE(VALUE))) %,




!++
!
! $RMS_CODFLD_INI
!
!	Internal macro.  Allows the dynamic initialization
!	of a field with a named value.
!
!	$RMS_CODFLD_INI(BLK,NAME,PREFIX,VALUE)
!	assigns to BLK[NAME] the value whose name is
!	PREFIX//VALUE
!
!--

	$RMS_CODFLD_INI(BLK,NAME,PREFIX,VALUE)=
	%IF %NULL(VALUE) %THEN %EXITMACRO %FI
	    BLOCK[BLK,%REMOVE(NAME);0,BYTE] =
		(%NAME(PREFIX,%REMOVE(VALUE))) %,



!++
!
! $RMS_VALFLD
!
!	Internal macro.  Permits the initialization
!	of a field with a general value.
!
!	$RMS_VALFLD(ALLOC,VALUE) allocates
!	a field of size ALLOC (BYTE, WORD, or LONG)
!	and initializes it with the (general) value, VALUE.
!
!--

	$RMS_VALFLD(ALLOC,VALUE)=
	    ALLOC(VALUE) %,



!++
!
! $RMS_VALFLD_INI
!
!	Internal macro.  Permits the dynamic initialization
!	of a field with a general value.
!
!	$RMS_VALFLD_INI(BLK,NAME,VALUE) stores the value VALUE
!	the field BLK[NAME].
!
!--

	$RMS_VALFLD_INI(BLK,NAME,VALUE)=
	%IF %NULL(VALUE) %THEN %EXITMACRO %FI
	%IF %IDENTICAL(VALUE,0) %THEN %EXITMACRO %FI
	    BLOCK[BLK,%REMOVE(NAME);0,BYTE] = VALUE %,



!++
!
! $RMS_VALPRO (and support macros ...)
!
!	Internal macro.  Permits the initialization
!	of a protection-word following the RSX-11M
!	and STARLET conventions.
!
!--
	$RMS_VALPR2(RWEDCHAR)[]=
	    AND NOT
	    %IF       %IDENTICAL(RWEDCHAR,'R') %THEN XAB$M_NOREAD
	    %ELSE %IF %IDENTICAL(RWEDCHAR,'W') %THEN XAB$M_NOWRITE
	    %ELSE %IF %IDENTICAL(RWEDCHAR,'E') %THEN XAB$M_NOEXE
	    %ELSE %IF %IDENTICAL(RWEDCHAR,'D') %THEN XAB$M_NODEL
	    %ELSE 0 %ERROR('Illegal value "', RWEDCHAR, '" of parameter PRO')
	    %FI %FI %FI %FI
	    $RMS_VALPR2(%REMAINING) %,

	$RMS_VALPR1(RWEDGROUP)=
	    %B'1111'  $RMS_VALPR2(%EXPLODE(RWEDGROUP)) %,

	$RMS_VALPRO(SYSTEM,OWNER,GROUP,WORLD)=
	    %IF %LENGTH GTR 4
	    %THEN
		WORD(0)
		%ERROR('Illegal value of parameter PRO')
	    %ELSE
		WORD(
		($RMS_VALPR1(SYSTEM)) OR ($RMS_VALPR1(OWNER))^4 OR
		($RMS_VALPR1(GROUP))^8 OR ($RMS_VALPR1(WORLD))^12)
	    %FI %,


!++
!
! $RMS_VALPRO_INI
!
!	Internal macro.  Permits the dynamic initialization
!	of a protection word following the RSX-11M and STARLET
!	convention.
!
!--

	$RMS_VALPRO_INI(BLK,SYSTEM,OWNER,GROUP,WORLD)=
	    %IF %LENGTH GTR 5 %THEN
		%ERROR('Illegal value of parameter PRO')
		%EXITMACRO %FI
	    %IF %LENGTH EQL 1 %THEN %EXITMACRO %FI
	    BLOCK[BLK,XAB$W_PRO;0,BYTE] =
		($RMS_VALPR1(SYSTEM) OR ($RMS_VALPR1(OWNER))^4 OR
		($RMS_VALPR1(GROUP))^8 OR ($RMS_VALPR1(WORLD))^12)
		%,


!++
!
! $RMS_VALUIC
!
!	Internal macro.  Permits the initialization
!	of the two-word item, MEMBER/GROUP
!
!--

	$RMS_VALUIC(GROUP,MEMBER)=
	    %IF %LENGTH NEQ 2
	    %THEN
		REP 2 OF WORD(0)
		%ERROR('Illegal value of parameter UIC')
	    %ELSE
		WORD(MEMBER,GROUP)
	    %FI %,


!++
!
! $RMS_VALUIC_INI
!
!	Internal macro.  Permits the dynamic initialization
!	of the two-word item, MEMBER/GROUP
!
!--

	$RMS_VALUIC_INI(BLK,GROUP,MEMBER)=
	    %IF %LENGTH NEQ 3
	    %THEN %ERROR('Illegal value of parameter UIC')
		%EXITMACRO %FI
	    %IF %IDENTICAL(GROUP,0) AND %IDENTICAL(MEMBER,0)
	    %THEN %EXITMACRO %FI
	    BLOCK[BLK,XAB$L_UIC;0,BYTE]
		= ((MEMBER) OR (GROUP)^16) %,


!++
!
! $RMS_VALRFI
!
!	Internal macro.  Permits the initialization
!	of the three-word RFI field with
!	FILENO, SEQNO, RVN
!
!--

	$RMS_VALRFI(FILENO,SEQNO,RVN)=
	    %IF %LENGTH NEQ 3
	    %THEN
		REP 3 OF WORD(0)
		%ERROR('Illegal value of parameter RFI')
	    %ELSE
		WORD(FILENO,SEQNO,RVN)
	    %FI %,


!++
!
! $RMS_VALRFI_INI
!
!	Internal macro.  Permits the dynamic initialization
!	of the three-word RFI field with FILENO, SEQNO, and RVN.
!
!--

	$RMS_VALRFI_INI(BLK,FILENO,SEQNO,RVN)=
	    %IF %LENGTH NEQ 4
	     %THEN %ERROR('Illegal value of parameter RFI')
		%EXITMACRO %FI
	    %IF %IDENTICAL(FILENO,0) AND
		%IDENTICAL(SEQNO ,0) AND
		%IDENTICAL(RVN   ,0) %THEN %EXITMACRO %FI
	    BLOCK[BLK,XAB$W_RFI0;0,BYTE]= FILENO;
	    BLOCK[BLK,XAB$W_RFI2;0,BYTE]= SEQNO;
	    BLOCK[BLK,XAB$W_RFI4;0,BYTE]= RVN 
	%;

!++
!
! $FAB_DECL
!
!	Used to declare a FAB control block where
!	initialization is not required.
!--

MACRO
	$FAB_DECL = 
	BLOCK[FAB$C_BLN,BYTE]	%;

!++
!
! $FAB
!
!	Used to allocate and statically initialize
!	a FAB control block.
!
!--

KEYWORDMACRO

	$FAB(
		FAC=GET,	SHR,		FNA=0,		FNS=0,
		DNA=0,		DNS=0,		RTV=0,		ORG=SEQ,
		RAT,		FOP,		XAB=0,		MRS=0,
		JNL=0,		MRN=0,		ALQ=0,		DEQ=0,
		BLS=0,		NAM=0,		RFM=VAR,	FSZ=0,
		BKS=0,		CTX=0,		BSZ=8)=

	$FAB_DECL
	INITIAL(

		$RMS_VALFLD(BYTE,			FAB$C_BID),	! BID
		$RMS_VALFLD(BYTE,			FAB$C_BLN),	! BLN
		$RMS_VALFLD(WORD,			0),		! IFI
		$RMS_BITFLD(LONG,	FAB$M_,		FOP),		! FOP
		$RMS_VALFLD(LONG,			0),		! STS
		$RMS_VALFLD(LONG,			0),		! STV
		$RMS_VALFLD(LONG,			ALQ),		! ALQ
		$RMS_VALFLD(WORD,			DEQ),		! DEQ
		$RMS_BITFLD(BYTE,	FAB$M_,		FAC),		! FAC
		$RMS_BITFLD(BYTE,	FAB$M_,		SHR),		! SHR
		$RMS_VALFLD(LONG,			CTX),		! CTX
		$RMS_VALFLD(BYTE,			RTV),		! RTV
		$RMS_CODFLD(BYTE,	FAB$C_,		ORG),		! ORG
		$RMS_BITFLD(BYTE,	FAB$M_,		RAT),		! RAT
		$RMS_CODFLD(BYTE,	FAB$C_,		RFM),		! RFM
		$RMS_VALFLD(LONG,			JNL),		! JNL
		$RMS_VALFLD(LONG,			XAB),		! XAB
		$RMS_VALFLD(LONG,			NAM),		! NAM
		$RMS_VALFLD(LONG,			FNA),		! FNA
		$RMS_VALFLD(LONG,			DNA),		! DNA
		$RMS_VALFLD(BYTE,			FNS),		! FNS
		$RMS_VALFLD(BYTE,			DNS),		! DNS
		$RMS_VALFLD(WORD,			MRS),		! MRS
		$RMS_VALFLD(LONG,			MRN),		! MRN
		$RMS_VALFLD(WORD,			BLS),		! BLS
		$RMS_VALFLD(BYTE,			BKS),		! BKS
		$RMS_VALFLD(BYTE,			FSZ),		! FSZ
		$RMS_VALFLD(LONG,			0),		! DEV
		$RMS_VALFLD(LONG,			0),		! SDC
		REP 2 OF $RMS_VALFLD(LONG,		0)		! SPARE
	) %;


!++
!
! $FAB_INIT
!
!	Used to dynamically initialize
!	a FAB control block.
!
!--

KEYWORDMACRO

	$FAB_INIT(

		FAB,

		FAC=GET,	SHR,		FNA,		FNS,
		DNA,		DNS,		RTV,		ORG,
		RAT,		FOP,		XAB,		MRS,
		JNL,		MRN,		ALQ,		DEQ,
		BLS,		NAM,		RFM=VAR,	FSZ,
		BKS,		CTX,		BSZ=8)=

	( LOCAL $RMS_PTR; $RMS_PTR = FAB;
	  CH$FILL(0,FAB$C_BLN,CH$PTR(.$RMS_PTR));

		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$B_BID),			FAB$C_BID);	! BID
		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$B_BLN),			FAB$C_BLN);	! BLN
!		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$W_IFI),			0);		! IFI
		$RMS_BITFLD_INI(.$RMS_PTR,(FAB$L_FOP),	FAB$M_,		FOP);		! FOP
!		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$L_STS),			0);		! STS
!		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$L_STV),			0);		! STV
		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$L_ALQ),			ALQ);		! ALQ
		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$W_DEQ),			DEQ);		! DEQ
		$RMS_BITFLD_INI(.$RMS_PTR,(FAB$B_FAC),	FAB$M_,		FAC);		! FAC
		$RMS_BITFLD_INI(.$RMS_PTR,(FAB$B_SHR),	FAB$M_,		SHR);		! SHR
		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$L_CTX),			CTX);		! CTX
		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$B_RTV),			RTV);		! RTV
		$RMS_CODFLD_INI(.$RMS_PTR,(FAB$B_ORG),	FAB$C_,		ORG);		! ORG
		$RMS_BITFLD_INI(.$RMS_PTR,(FAB$B_RAT),	FAB$M_,		RAT);		! RAT
		$RMS_CODFLD_INI(.$RMS_PTR,(FAB$B_RFM),	FAB$C_,		RFM);		! RFM
		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$L_JNL),			JNL);		! JNL
		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$L_XAB),			XAB);		! XAB
		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$L_NAM),			NAM);		! NAM
		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$L_FNA),			FNA);		! FNA
		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$L_DNA),			DNA);		! DNA
		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$B_FNS),			FNS);		! FNS
		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$B_DNS),			DNS);		! DNS
		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$W_MRS),			MRS);		! MRS
		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$L_MRN),			MRN);		! MRN
		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$W_BLS),			BLS);		! BLS
		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$B_BKS),			BKS);		! BKS
		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$B_FSZ),			FSZ);		! FSZ
!		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$L_DEV),			0);		! DEV
!		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$L_SDC),			0);		! SDC
!		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$L_SPARE),		0);		! SPARE
!		$RMS_VALFLD_INI(.$RMS_PTR,(FAB$L_SPARE),		0);		! SPARE
	  0 ) %;
!++
!
! $NAM_DECL
!
!	Permits the declaration of the NAM control block
!	where initialization is not required.
!
!--
MACRO
	$NAM_DECL = BLOCK[NAM$C_BLN,BYTE] %;


!++
!
! $NAM
!
!	Macro to allocate and initialize the NAM control block.
!
!--

KEYWORDMACRO

	$NAM(
		RSA=0,		RSS=0,		ESA=0,		ESS=0,
		RLF=0)=

	$NAM_DECL
	INITIAL(

		$RMS_VALFLD(BYTE,			NAM$C_BID),	! BID
		$RMS_VALFLD(BYTE,			NAM$C_BLN),	! BLN
		$RMS_VALFLD(BYTE,			RSS),		! RSS
		$RMS_VALFLD(BYTE,			0),		! RSL
		$RMS_VALFLD(LONG,			RSA),		! RSA
		$RMS_VALFLD(WORD,			0),		! SPARE
		$RMS_VALFLD(BYTE,			ESS),		! ESS
		$RMS_VALFLD(BYTE,			0),		! ESL
		$RMS_VALFLD(LONG,			ESA),		! ESA
		$RMS_VALFLD(LONG,			RLF),		! RLF
		REP 8 OF $RMS_VALFLD(WORD,		0),		! DVI
		REP 3 OF $RMS_VALFLD(WORD,		0),		! FID
		REP 3 OF $RMS_VALFLD(WORD,		0),		! DID
		$RMS_VALFLD(LONG,			0),		! WCC
		$RMS_VALFLD(LONG,			0)		! FNB
	) %;



!++
!
! $NAM_INIT
!
!	Used to dynamically initialize
!	a NAM control block.
!
!--

KEYWORDMACRO

	$NAM_INIT( 

		NAM,

		RSA,		RSS,		ESA,		ESS,
		RLF)=

	( LOCAL $RMS_PTR; $RMS_PTR = NAM;
	  CH$FILL(0,NAM$C_BLN,CH$PTR(.$RMS_PTR));

		$RMS_VALFLD_INI(.$RMS_PTR,(NAM$B_BID),			NAM$C_BID);	! BID
		$RMS_VALFLD_INI(.$RMS_PTR,(NAM$B_BLN),			NAM$C_BLN);	! BLN
		$RMS_VALFLD_INI(.$RMS_PTR,(NAM$B_RSS),			RSS);		! RSS
!		$RMS_VALFLD_INI(.$RMS_PTR,(NAM$B_RSL),			0);		! RSL
		$RMS_VALFLD_INI(.$RMS_PTR,(NAM$L_RSA),			RSA);		! RSA
		$RMS_VALFLD_INI(.$RMS_PTR,(NAM$B_ESS),			ESS);		! ESS
!		$RMS_VALFLD_INI(.$RMS_PTR,(NAM$B_ESL),			0);		! ESL
		$RMS_VALFLD_INI(.$RMS_PTR,(NAM$L_ESA),			ESA);		! ESA
		$RMS_VALFLD_INI(.$RMS_PTR,(NAM$L_RLF),			RLF);		! RLF
!		REP 8 OF $RMS_VALFLD_INI(.$RMS_PTR,(NAM$W_DVI),		0);		! DVI
!		REP 3 OF $RMS_VALFLD_INI(.$RMS_PTR,(NAM$W_FID),		0);		! FID
!		REP 3 OF $RMS_VALFLD_INI(.$RMS_PTR,(NAM$W_DID),		0);		! DID
!		$RMS_VALFLD_INI(.$RMS_PTR,(NAM$L_WCC),			0);		! WCC
!		$RMS_VALFLD_INI(.$RMS_PTR,(NAM$L_FNB),			0);		! FNB
	   0 ) %;


!++
!
! $XABDAT_DECL
!
!	Permits the declaration of the XABDAT control block
!	where initialization is not required.
!
!--

MACRO
	$XABDAT_DECL = BLOCK[XAB$C_DATLEN,BYTE] %;


!++
!
! $XABDAT
!
!	Macro to allocate and initialize the XABDAT control block.
!
!--

KEYWORDMACRO

	$XABDAT(
		NXT=0,	RVN=0,	EDT0=0,	EDT4=0)=

	$XABDAT_DECL
	INITIAL(

		$RMS_VALFLD(BYTE,			XAB$C_DAT),	! COD
		$RMS_VALFLD(BYTE,			XAB$C_DATLEN),	! BLN
		$RMS_VALFLD(WORD,			0),		! SPARE
		$RMS_VALFLD(LONG,			NXT),		! NXT
		$RMS_VALFLD(WORD,			RVN),		! RVN
		$RMS_VALFLD(WORD,			0),		! SPARE
		REP 2 OF $RMS_VALFLD(LONG,		0),		! RDT
		REP 2 OF $RMS_VALFLD(LONG,		0),		! CDT
		$RMS_VALFLD(LONG,			EDT0),		! EDT0
		$RMS_VALFLD(LONG,			EDT4)		! EDT4
	) %;


!++
!
! $XABDAT_INIT
!
!	Macro to dynamically initialize the XABDAT control block.
!
!--

KEYWORDMACRO

	$XABDAT_INIT(

		XAB,

		NXT=0,	RVN=0,	EDT0=0,	EDT4=0)=

	( LOCAL $RMS_PTR; $RMS_PTR = XAB;
	  CH$FILL(0,XAB$C_DATLEN,CH$PTR(.$RMS_PTR));

		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$B_COD),			XAB$C_DAT);	! COD
		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$B_BLN),			XAB$C_DATLEN);	! BLN
!		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$W_SPARE),		0);		! SPARE
		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$L_NXT),			NXT);		! NXT
		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$W_RVN),			RVN);		! RVN
!		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$W_SPARE),		0);		! SPARE
!		REP 2 OF $RMS_VALFLD_INI(.$RMS_PTR,(XAB$L_RDT),		0);		! RDT
!		REP 2 OF $RMS_VALFLD_INI(.$RMS_PTR,(XAB$L_CDT),		0);		! CDT
		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$L_EDT0),			EDT0);		! EDT0
		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$L_EDT4),			EDT4);		! EDT4
	  0 ) %;


!++
!
! $XABRDT_DECL
!
!	Permits the declaration of the XABRDT control block
!	where initialization is not required.
!
!--

MACRO
	$XABRDT_DECL = BLOCK[XAB$C_RDTLEN,BYTE] %;


!++
!
! $XABRDT
!
!	Macro to allocate and initialize the XABRDT control block.
!
!--

KEYWORDMACRO

	$XABRDT(
		NXT=0,	RVN=0 )=

	$XABRDT_DECL
	INITIAL(

		$RMS_VALFLD(BYTE,			XAB$C_RDT),	! COD
		$RMS_VALFLD(BYTE,			XAB$C_RDTLEN),	! BLN
		$RMS_VALFLD(WORD,			0),		! SPARE
		$RMS_VALFLD(LONG,			NXT),		! NXT
		$RMS_VALFLD(WORD,			RVN),		! RVN
		$RMS_VALFLD(WORD,			0),		! SPARE
		REP 2 OF $RMS_VALFLD(LONG,		0)		! RDT
	) %;


!++
!
! $XABRDT_INIT
!
!	Macro to dynamically initialize the XABRDT control block.
!
!--

KEYWORDMACRO

	$XABRDT_INIT(

		XAB,

		NXT=0,	RVN=0 )=

	( LOCAL $RMS_PTR; $RMS_PTR = XAB;
	  CH$FILL(0,XAB$C_RDTLEN,CH$PTR(.$RMS_PTR));

		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$B_COD),			XAB$C_RDT);	! COD
		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$B_BLN),			XAB$C_RDTLEN);	! BLN
!		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$W_SPARE),			0);		! SPARE
		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$L_NXT),			NXT);		! NXT
		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$W_RVN),			RVN);		! RVN
!		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$W_SPARE),		0);		! SPARE
!		REP 2 OF $RMS_VALFLD_INI(.$RMS_PTR,(XAB$L_RDT),		0);		! RDT
	  0 ) %;


!++
!
! $XABPRO_DECL
!
!	Permits the declaration of the XABPRO control block
!	where initialization is not required.
!
!--

MACRO
	$XABPRO_DECL = BLOCK[XAB$C_PROLEN,BYTE] %;


!++
!
! $XABPRO
!
!	Macro to allocate and initialize the XABPRO control block.
!
!--

KEYWORDMACRO

	$XABPRO(
		NXT=0,		UIC=<0,0>,	PRO)=

	$XABPRO_DECL
	INITIAL(

		$RMS_VALFLD(BYTE,			XAB$C_PRO),	! COD
		$RMS_VALFLD(BYTE,			XAB$C_PROLEN),	! BLN
		$RMS_VALFLD(WORD,			0),		! SPARE
		$RMS_VALFLD(LONG,			NXT),		! NXT
		$RMS_VALPRO(%REMOVE(PRO)),				! PRO
		$RMS_VALFLD(WORD,			0),		! SPARE
		$RMS_VALUIC(%REMOVE(UIC))				! UIC
	) %;


!++
!
! $XABPRO_INIT
!
!	Macro to dynamically initialize the XABPRO control block.
!
!--

KEYWORDMACRO

	$XABPRO_INIT(

		XAB,

		NXT=0,		UIC=<0,0>,	PRO)=

	( LOCAL $RMS_PTR; $RMS_PTR = XAB;
	  CH$FILL(0,XAB$C_PROLEN,CH$PTR(.$RMS_PTR));

		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$B_COD),			XAB$C_PRO);	! COD
		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$B_BLN),			XAB$C_PROLEN);	! BLN
!		$RMS_VALFLD_INI(SPARE);
		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$L_NXT),			NXT);		! NXT
		$RMS_VALPRO_INI(.$RMS_PTR,%REMOVE(PRO));				! PRO
!		$RMS_VALFLD_INI(SPARE);
		$RMS_VALUIC_INI(.$RMS_PTR,%REMOVE(UIC));				! UIC
	  0 ) %;
!++
!
! $XABALL_DECL
!
!	Permits the declaration of the XABALL control block
!	where initialization is not required.
!
!--

MACRO
	$XABALL_DECL = BLOCK[XAB$C_ALLLEN,BYTE] %;


!++
!
! $XABALL
!
!	Macro to allocate and initialize the XABALL control block.
!
!--

KEYWORDMACRO

	$XABALL(
		NXT=0,		VOL=0,		ALN=ANY,	AOP,
		LOC=0,		RFI=<0,0,0>,	ALQ=0)=

	$XABALL_DECL
	INITIAL(

		$RMS_VALFLD(BYTE,			XAB$C_ALL),	! COD
		$RMS_VALFLD(BYTE,			XAB$C_ALLLEN),	! BLN
		$RMS_VALFLD(WORD,			0),		! SPARE
		$RMS_VALFLD(LONG,			NXT),		! NXT
		$RMS_BITFLD(BYTE,	XAB$M_,		AOP),		! AOP
		$RMS_CODFLD(BYTE,	XAB$C_,		ALN),		! ALN
		$RMS_VALFLD(WORD,			VOL),		! VOL
		$RMS_VALFLD(LONG,			LOC),		! LOC
		$RMS_VALFLD(LONG,			ALQ),		! ALQ
		$RMS_VALFLD(WORD,			0),		! DEQ
		$RMS_VALFLD(BYTE,			0),		! BKZ
		$RMS_VALFLD(BYTE,			0),		! AID
		$RMS_VALRFI(%REMOVE(RFI)),				! RFI
		$RMS_VALFLD(WORD,			0)		! SPARE
	) %;


!++
!
! $XABALL_INIT
!
!	Macro to dynamically initialize the XABALL control block.
!
!--

KEYWORDMACRO

	$XABALL_INIT(

		XAB,

		NXT=0,		VOL=0,		ALN,	AOP,
		LOC=0,		RFI=<0,0,0>,	ALQ=0)=

	( LOCAL $RMS_PTR; $RMS_PTR = XAB;
	  CH$FILL(0,XAB$C_ALLLEN,CH$PTR(.$RMS_PTR));

		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$B_COD),			XAB$C_ALL);	! COD
		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$B_BLN),			XAB$C_ALLLEN);	! BLN
!		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$W_SPARE),		0);		! SPARE
		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$L_NXT),			NXT);		! NXT
		$RMS_BITFLD_INI(.$RMS_PTR,(XAB$B_AOP),	XAB$M_,		AOP);		! AOP
		$RMS_CODFLD_INI(.$RMS_PTR,(XAB$B_ALN),	XAB$C_,		ALN);		! ALN
		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$W_VOL),			VOL);		! VOL
		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$L_LOC),			LOC);		! LOC
		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$L_ALQ),			ALQ);		! ALQ
!		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$W_DEQ),			0);		! DEQ
!		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$B_BKZ),			0);		! BKZ
!		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$B_AID),			0);		! AID
		$RMS_VALRFI_INI(.$RMS_PTR,%REMOVE(RFI));				! RFI
!		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$W_SPARE),		0);		! SPARE
	  0 ) %;


!++
!
! $XABFHC_DECL
!
!	Permits the declaration of the XABFHC control block
!	where initialization is not required.
!
!--

MACRO
	$XABFHC_DECL = BLOCK[XAB$C_FHCLEN,BYTE] %;


!++
!
! $XABFHC
!
!	Macro to allocate and initialize the XABFHC control block.
!
!--

KEYWORDMACRO

	$XABFHC(
		NXT=0)=

	$XABFHC_DECL
	INITIAL(

		$RMS_VALFLD(BYTE,			XAB$C_FHC),	! COD
		$RMS_VALFLD(BYTE,			XAB$C_FHCLEN),	! BLN
		$RMS_VALFLD(WORD,			0),		! SPARE
		$RMS_VALFLD(LONG,			NXT),		! NXT
		REP 9 OF $RMS_VALFLD(LONG,		0)		! REMAINING FIELDS
	) %;


!++
!
! $XABFHC_INIT
!
!	Macro to dynamically initialize the XABFHC control block.
!
!--

KEYWORDMACRO

	$XABFHC_INIT(

		XAB,

		NXT=0)=

	( LOCAL $RMS_PTR; $RMS_PTR = XAB;
	  CH$FILL(0,XAB$C_FHCLEN,CH$PTR(.$RMS_PTR));

		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$B_COD),			XAB$C_FHC);	! COD
		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$B_BLN),			XAB$C_FHCLEN);	! BLN
!		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$W_SPARE),		0);		! SPARE
		$RMS_VALFLD_INI(.$RMS_PTR,(XAB$L_NXT),			NXT);		! NXT
!		REP 9 OF $RMS_VALFLD_INI(.$RMS_PTR,(XAB$L_SPARE),	0);		! REMAINING FIELDS
	  0 ) %;


!++
!
! $RAB_DECL and $RAB_DECL_ASYN
!
!	Permit the declaration of the RAB control block
!	where initialization is not required.
!
!	Note that a RAB intended for ASYNCHRONOUS I/O
!	differs from one intended for SYNCHRONOUS I/O
!	in some RMS implementations.
!	USE:
!		LOCAL RAB_01 : $RAB_DECL_ASYN;	! for ASYNCHRONOUS I/O
!		LOCAL RAB_02 : $RAB_DECL;	! for SYNCHRONOUS I/O
!		MAP RAB_03 : $RAB_DECL;
!		EXTERNAL RAB_04 : $RAB_DECL_ASYN;
!
!--

MACRO
	$RAB_DECL =
		BLOCK[RAB$C_BLN,BYTE]  %,
	$RAB_DECL_ASYN =
		BLOCK[RAB$C_BLN,BYTE]  %;
!++
!
! $RAB
!
!	Macro to allocate and initialize the RAB control block.
!	To indicate that the RAB may be used for ASYNCHRONOUS I/O,
!	indicate a value for the ASYN keywordparameter as in
!	the example:
!
!	OWN RAB_01 : $RAB ( ASYN=YES , ....);	! ASYNCHRONOUS
!
!--


KEYWORDMACRO

	$RAB(
		RAC=SEQ,	ROP,		UBF=0,		USZ=0,
		RBF=0,		RSZ=0,		BKT=0,		KBF=0,
		PBF=0,		KSZ=0,		PSZ=0,		RHB=0,
		FAB=0,		MBF=0,		MBC=0,		TMO=0,
		CTX=0,		KRF=0,		ASYN=NO)=

	%IF %IDENTICAL(%STRING(ASYN),'YES')
	%THEN $RAB_DECL_ASYN
	%ELSE $RAB_DECL
	%FI
	INITIAL(

		$RMS_VALFLD(BYTE,			RAB$C_BID),	! BID
		$RMS_VALFLD(BYTE,			RAB$C_BLN),	! BLN
		$RMS_VALFLD(WORD,			0),		! ISI
		$RMS_BITFLD(LONG,	RAB$M_,		ROP),		! ROP
		$RMS_VALFLD(LONG,			0),		! STS
		$RMS_VALFLD(LONG,			0),		! STV
		REP 3 OF $RMS_VALFLD(WORD,		0),		! RFA
		$RMS_VALFLD(WORD,			0),		! SPARE
		$RMS_VALFLD(LONG,			CTX),		! CTX
		$RMS_VALFLD(WORD,			0),		! SPARE
		$RMS_CODFLD(BYTE,	RAB$C_,		RAC),		! RAC
		$RMS_VALFLD(BYTE,			TMO),		! TMO
		$RMS_VALFLD(WORD,			USZ),		! USZ
		$RMS_VALFLD(WORD,			RSZ),		! RSZ
		$RMS_VALFLD(LONG,			UBF),		! UBF
		$RMS_VALFLD(LONG,			RBF),		! RBF
		$RMS_VALFLD(LONG,			RHB),		! RHB
		$RMS_VALFLD(LONG,			(KBF)+(PBF)),	! KBF AND PBF
		$RMS_VALFLD(BYTE,			(KSZ)+(PSZ)),	! KSZ AND PSZ
		$RMS_VALFLD(BYTE,			KRF),		! KRF
		$RMS_VALFLD(BYTE,			MBF),		! MBF
		$RMS_VALFLD(BYTE,			MBC),		! MBC
		$RMS_VALFLD(LONG,			BKT),		! BKT
		$RMS_VALFLD(LONG,			FAB),		! FAB
		REP 1 OF $RMS_VALFLD(LONG,		0)		! SPARE
	) %;



!++
!
! $RAB_INIT
!
!	Macro to dynamically initialize the RAB control block.
!

!--


KEYWORDMACRO

	$RAB_INIT(

		RAB,

		RAC,		ROP,		UBF=0,		USZ=0,
		RBF=0,		RSZ=0,		BKT=0,		KBF=0,
		PBF=0,		KSZ=0,		PSZ=0,		RHB=0,
		FAB=0,		MBF=0,		MBC=0,		TMO=0,
		CTX=0,		KRF=0,		ASYN=NO)=

	( LOCAL $RMS_PTR; $RMS_PTR = RAB;
	  CH$FILL(0,RAB$C_BLN,CH$PTR(.$RMS_PTR));

		$RMS_VALFLD_INI(.$RMS_PTR,(RAB$B_BID),			RAB$C_BID);	! BID
		$RMS_VALFLD_INI(.$RMS_PTR,(RAB$B_BLN),			RAB$C_BLN);	! BLN
!		$RMS_VALFLD_INI(.$RMS_PTR,(RAB$W_ISI),			0);		! ISI
		$RMS_BITFLD_INI(.$RMS_PTR,(RAB$L_ROP),	RAB$M_,		ROP);		! ROP
!		$RMS_VALFLD_INI(.$RMS_PTR,(RAB$L_STS),			0);		! STS
!		$RMS_VALFLD_INI(.$RMS_PTR,(RAB$L_STV),			0);		! STV
!		REP 3 OF $RMS_VALFLD_INI(.$RMS_PTR,(RAB$W_RFA),		0);		! RFA
!		REP 1 OF $RMS_VALFLD_INI(.$RMS_PTR,(RAB$L_SPARE),	0);		! SPARE
		$RMS_VALFLD_INI(.$RMS_PTR,(RAB$L_CTX),			CTX);		! CTX
!		REP 1 OF $RMS_VALFLD_INI(.$RMS_PTR,(RAB$L_SPARE),	0);		! SPARE
		$RMS_CODFLD_INI(.$RMS_PTR,(RAB$B_RAC),	RAB$C_,		RAC);		! RAC
		$RMS_VALFLD_INI(.$RMS_PTR,(RAB$B_TMO),			TMO);		! TMO
		$RMS_VALFLD_INI(.$RMS_PTR,(RAB$W_USZ),			USZ);		! USZ
		$RMS_VALFLD_INI(.$RMS_PTR,(RAB$W_RSZ),			RSZ);		! RSZ
		$RMS_VALFLD_INI(.$RMS_PTR,(RAB$L_UBF),			UBF);		! UBF
		$RMS_VALFLD_INI(.$RMS_PTR,(RAB$L_RBF),			RBF);		! RBF
		$RMS_VALFLD_INI(.$RMS_PTR,(RAB$L_RHB),			RHB);		! RHB
		%IF NOT %IDENTICAL(KBF,0)
		OR  NOT %IDENTICAL(PBF,0) %THEN
		$RMS_VALFLD_INI(.$RMS_PTR,(RAB$L_KBF),			(KBF)+(PBF));	! KBF AND PBF
					%FI
		%IF NOT %IDENTICAL(KSZ,0)
		OR  NOT %IDENTICAL(PSZ,0) %THEN
		$RMS_VALFLD_INI(.$RMS_PTR,(RAB$B_KSZ),			(KSZ)+(PSZ));	! KSZ AND PSZ
					%FI
		$RMS_VALFLD_INI(.$RMS_PTR,(RAB$B_KRF),			KRF);		! KRF
		$RMS_VALFLD_INI(.$RMS_PTR,(RAB$B_MBF),			MBF);		! MBF
		$RMS_VALFLD_INI(.$RMS_PTR,(RAB$B_MBC),			MBC);		! MBC
		$RMS_VALFLD_INI(.$RMS_PTR,(RAB$L_BKT),			BKT);		! BKT
		$RMS_VALFLD_INI(.$RMS_PTR,(RAB$L_FAB),			FAB);		! FAB
!		REP 1 OF $RMS_VALFLD_INI(.$RMS_PTR,(RAB$L_SPARE),	0);		! SPARE
	  0 ) %;


!++
!
! RMS-11 Compatibility Macros
!
!	$RMS_INIT
!	$RMS_INITIF
!	$RMS_POOL
!	$RMS_ORG
!
!	All these macros, necessary only in RMS-11, are
!	coded as no-ops here, being executable
!	expressions with value 0.

!
!--

MACRO
	$RMS_INIT(XX) =
		BEGIN
		0
		END %,

	$RMS_INITIF(XX) =
		BEGIN
		0
		END %,

	$RMS_POOL(XX) =
		BEGIN
		0
		END %,

	$RMS_ORG(XX) =
		BEGIN
		0
		END %,

!++
!
! $RMS_OKSTATUS
! $RMS_OK
! $RMS_SUC
!
!	Macros to examine status (STS) values.
!
!	$RMS_OK(sts_val) examines the value sts_val and
!	yields 1 if this is a good status value, 0 otherwise.
!
!	$RMS_SUC(sts_val) examines the value sts_val and
!	yields 1 if this equals RMS$_SUC.
!
!	$RMS_OKSTATUS(addr) extracts the STS field from
!	the RAB or FAB at addr and yields
!	1 if this is a good status value, 0 otherwise.
!
!--

	$RMS_OKSTATUS(XX) =
		(.BLOCK[XX,FAB$L_STS;0,BYTE] AND 1) %,

	$RMS_OK(VAL)=
		(VAL AND 1) %,

	$RMS_SUC(VAL)=
		(EXTERNAL LITERAL RMS$_SUC;VAL EQL RMS$_SUC) %;

!++
!
! FUNCTIONAL CALLS TO RMS-32
!
!	EXAMPLES OF USE:
!
!	status = $RMS_OPEN(FAB=FAB_01);
!	status = $RMS_GET(SUC=SUC_01,RAB=RAB_03);
!
!
!--

KEYWORDMACRO
	$RMS_CLOSE(FAB,ERR)=
	    $RMS_CALL(SYS$CLOSE,FAB,ERR) %,

	$RMS_CONNECT(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$CONNECT,RAB,ERR,SUC) %,

	$RMS_CREATE(FAB,ERR)=
	    $RMS_CALL(SYS$CREATE,FAB,ERR) %,

	$RMS_DELETE(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$DELETE,RAB,ERR,SUC) %,

	$RMS_DISCONNECT(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$DISCONNECT,RAB,ERR,SUC) %,

	$RMS_DISPLAY(FAB,ERR)=
	    $RMS_CALL(SYS$DISPLAY,FAB,ERR) %,

	$RMS_ERASE(FAB,ERR)=
	    $RMS_CALL(SYS$ERASE,FAB,ERR) %,

	$RMS_EXTEND(FAB,ERR)=
	    $RMS_CALL(SYS$EXTEND,FAB,ERR) %,

	$RMS_FIND(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$FIND,RAB,ERR,SUC) %,

	$RMS_FLUSH(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$FLUSH,RAB,ERR,SUC) %,

	$RMS_FREE(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$FREE,RAB,ERR,SUC) %,

	$RMS_GET(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$GET,RAB,ERR,SUC) %,

	$RMS_MODIFY(FAB,ERR)=
	    $RMS_CALL(SYS$MODIFY,FAB,ERR) %,

	$RMS_NXTVOL(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$NXTVOL,RAB,ERR,SUC) %,

	$RMS_OPEN(FAB,ERR)=
	    $RMS_CALL(SYS$OPEN,FAB,ERR) %,

	$RMS_PUT(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$PUT,RAB,ERR,SUC) %,

	$RMS_PARSE(FAB,ERR,SUC)=
	    $RMS_CALL(SYS$PARSE,FAB,ERR,SUC) %,

	$RMS_READ(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$READ,RAB,ERR,SUC) %,

	$RMS_RELEASE(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$RELEASE,RAB,ERR,SUC) %,

	$RMS_REWIND(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$REWIND,RAB,ERR,SUC) %,

	$RMS_SEARCH(FAB,ERR,SUC)=
	    $RMS_CALL(SYS$SEARCH,FAB,ERR,SUC) %,

	$RMS_ENTER(FAB,ERR,SUC)=
	    $RMS_CALL(SYS$ENTER,FAB,ERR,SUC) %,

	$RMS_REMOVE(FAB,ERR,SUC)=
	    $RMS_CALL(SYS$REMOVE,FAB,ERR,SUC) %,

	$RMS_RENAME(OLDFAB,ERR,SUC,NEWFAB)=
	    $RMS_CALL(SYS$RENAME,OLDFAB,ERR,SUC,NEWFAB) %,

	$RMS_SPACE(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$SPACE,RAB,ERR,SUC) %,

	$RMS_TRUNCATE(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$TRUNCATE,RAB,ERR,SUC) %,

	$RMS_UPDATE(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$UPDATE,RAB,ERR,SUC) %,

	$RMS_WAIT(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$WAIT,RAB,ERR,SUC) %,

	$RMS_WRITE(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$WRITE,RAB,ERR,SUC) %,

	$CLOSE(FAB,ERR)=
	    $RMS_CALL(SYS$CLOSE,FAB,ERR) %,

	$CONNECT(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$CONNECT,RAB,ERR,SUC) %,

	$CREATE(FAB,ERR)=
	    $RMS_CALL(SYS$CREATE,FAB,ERR) %,

	$DELETE(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$DELETE,RAB,ERR,SUC) %,

	$DISCONNECT(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$DISCONNECT,RAB,ERR,SUC) %,

	$DISPLAY(FAB,ERR)=
	    $RMS_CALL(SYS$DISPLAY,FAB,ERR) %,

	$ERASE(FAB,ERR)=
	    $RMS_CALL(SYS$ERASE,FAB,ERR) %,

	$EXTEND(FAB,ERR)=
	    $RMS_CALL(SYS$EXTEND,FAB,ERR) %,

	$FIND(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$FIND,RAB,ERR,SUC) %,

	$FLUSH(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$FLUSH,RAB,ERR,SUC) %,

	$FREE(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$FREE,RAB,ERR,SUC) %,

	$GET(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$GET,RAB,ERR,SUC) %,

	$MODIFY(FAB,ERR)=
	    $RMS_CALL(SYS$MODIFY,FAB,ERR) %,

	$NXTVOL(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$NXTVOL,RAB,ERR,SUC) %,

	$OPEN(FAB,ERR)=
	    $RMS_CALL(SYS$OPEN,FAB,ERR) %,

	$PUT(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$PUT,RAB,ERR,SUC) %,

	$PARSE(FAB,ERR,SUC)=
	    $RMS_CALL(SYS$PARSE,FAB,ERR,SUC) %,

	$READ(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$READ,RAB,ERR,SUC) %,

	$RELEASE(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$RELEASE,RAB,ERR,SUC) %,

	$REWIND(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$REWIND,RAB,ERR,SUC) %,

	$SEARCH(FAB,ERR,SUC)=
	    $RMS_CALL(SYS$SEARCH,FAB,ERR,SUC) %,

	$ENTER(FAB,ERR,SUC)=
	    $RMS_CALL(SYS$ENTER,FAB,ERR,SUC) %,

	$REMOVE(FAB,ERR,SUC)=
	    $RMS_CALL(SYS$REMOVE,FAB,ERR,SUC) %,

	$RENAME(OLDFAB,ERR,SUC,NEWFAB)=
	    $RMS_CALL(SYS$RENAME,OLDFAB,ERR,SUC,NEWFAB) %,

	$SPACE(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$SPACE,RAB,ERR,SUC) %,

	$TRUNCATE(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$TRUNCATE,RAB,ERR,SUC) %,

	$UPDATE(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$UPDATE,RAB,ERR,SUC) %,

	$WAIT(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$WAIT,RAB,ERR,SUC) %,

	$WRITE(RAB,ERR,SUC)=
	    $RMS_CALL(SYS$WRITE,RAB,ERR,SUC) %;


!++
!
! $RMS_CALL
!
!	Internal macro.  Processes the functional calls
!	by counting the parameters, putting them in
!	the right order, and calling RMS-32 as required.
!
!--

MACRO
	$RMS_CALL(ROUT,BLK,ERR,SUC)=
	    BEGIN
	    EXTERNAL ROUTINE ROUT: ADDRESSING_MODE(ABSOLUTE);
	    ROUT(
		BLK
		%IF %NULL(SUC)
		%THEN
		    %IF %NULL(ERR)
		    %THEN
		    %ELSE
			, ERR
		    %FI
		%ELSE
		    %IF %NULL(ERR)
		    %THEN
			, 0 , SUC
		    %ELSE
			, ERR , SUC
		    %FI
		%FI
		)
	    END %;

!++
!
! FIELD DEFINITIONS, NAMED BIT MASKS, AND NAMED VALUES
!
!	Produced automatically by the MDL processor
!	acting on the input file RMSUSR.MDL
!
!--


  
  
  
 ! 
 ! ACCOUNTING AND TERMINATION MESSAGE FORMAT 
 ! THIS IS THE STRUCTURE OF THE MESSAGE SENT TO THE TERMINATION MAILBOX 
 ! AND TO THE JOB CONTROLLER. 
 ! 
 !...$ACCDEF	
  
 MACRO		ACC$W_MSGTYP	= 0,0,16,0%; 		! MESSAGE TYPE CODE 
 MACRO		ACC$W_MSGSIZ	= 2,0,16,0%; 		! LENGTH OF DATA MESSAGE (VALID ONLY IN ACCLOG) 
 MACRO		ACC$L_FINALSTS	= 4,0,32,0%; 		! FINAL EXIT STATUS 
 MACRO		ACC$L_PID	= 8,0,32,0%; 			! PROCESS ID 
 MACRO		ACC$L_JOBID	= 12,0,32,0%; 		! JOB IDENTIFICATION (VALID ONLY IN ACCLOG) 
 MACRO		ACC$Q_TERMTIME	= 16,0,0,0%; 		! TERMINATION TIME (100NS UNITS) 
 LITERAL	ACC$S_TERMTIME	= 8; 
 MACRO		ACC$T_ACCOUNT	= 24,0,0,0%; 		! ACCOUNT NAME STRING (BLANK FILLED) 
 LITERAL	ACC$S_ACCOUNT	= 8; 
 MACRO		ACC$T_USERNAME	= 32,0,0,0%; 		! USER NAME STRING (BLANK FILLED) 
 LITERAL	ACC$S_USERNAME	= 12; 
 					! END OF FIXED AREA 
 MACRO		ACC$L_CPUTIM	= 44,0,32,0%; 		! CPUTIM IN 10MS UNITS 
 					! MARK START PRINT JOB VARIATION 
 MACRO		ACC$L_PAGEFLTS	= 48,0,32,0%; 		! TOTAL PAGE FAULTS 
 MACRO		ACC$L_PGFLPEAK	= 52,0,32,0%; 		! PEAK PAGING FILE USAGE 
 MACRO		ACC$L_WSPEAK	= 56,0,32,0%; 		! PEAK WORKING SET SIZE 
 MACRO		ACC$L_BIOCNT	= 60,0,32,0%; 		! COUNT OF BUFFERED I/O OPERATIONS 
 MACRO		ACC$L_DIOCNT	= 64,0,32,0%; 		! COUNT OF DIRECT I/O OPERATIONS 
 MACRO		ACC$L_VOLUMES	= 68,0,32,0%; 		! COUNT OF VOLUMES MOUNTED 
 MACRO		ACC$Q_LOGIN	= 72,0,0,0%; 		! LOGIN TIME (100NS UNITS) 
 LITERAL	ACC$S_LOGIN	= 8; 
 MACRO		ACC$L_OWNER	= 80,0,32,0%; 		! PID OF SUBPROCESS OWNER 
 LITERAL	ACC$C_TERMLEN	= 84; 
 LITERAL	ACC$K_TERMLEN	= 84; 			! TERMINATION MESSAGE LENGTH 
 				! AND ACCOUNTING RECORD FOR NON BATCH JOBS 
 				! END OF TERMINATION MESSAGE 
 MACRO		ACC$T_JOB_NAME	= 84,0,0,0%; 		! JOB NAME (BLANK FILLED) 
 LITERAL	ACC$S_JOB_NAME	= 8; 
 MACRO		ACC$T_JOB_QUE	= 92,0,0,0%; 		! QUEUE NAME (.ASCIC) 
 LITERAL	ACC$S_JOB_QUE	= 16; 
 LITERAL	ACC$C_JOB_LEN	= 108; 
 LITERAL	ACC$K_JOB_LEN	= 108; 			! LENGTH OF BATCH JOB ACCOUNTING RECORD 
  
 					! POINT AT PRINT JOB VARIABLE AREA 
 MACRO		ACC$L_PAGCNT	= 48,0,32,0%; 		! SYMBIONT PAGE COUNT 
 MACRO		ACC$L_QIOCNT	= 52,0,32,0%; 		! SYMBIONT QIO COUNT 
 MACRO		ACC$L_GETCNT	= 56,0,32,0%; 		! SYMBIONT GET COUNT 
 MACRO		ACC$Q_QUETIME	= 60,0,0,0%; 		! TIME JOB WAS QUEUED 
 LITERAL	ACC$S_QUETIME	= 8; 
 MACRO		ACC$T_PRT_NAME	= 68,0,0,0%; 		! NAME OF PRINT JOB 
 LITERAL	ACC$S_PRT_NAME	= 8; 
 MACRO		ACC$T_PRT_QUE	= 76,0,0,0%; 		! NAME OF PRINT QUEUE 
 LITERAL	ACC$S_PRT_QUE	= 12; 
 LITERAL	ACC$C_PRT_LEN	= 88; 
 LITERAL	ACC$K_PRT_LEN	= 88; 			! LENGTH OF PRINT ACCOUNTING RECORD 
  
 ! 
 ! DEFINE USER ACCOUNTING MESSAGE DATA AREA 
 ! 
 					! POINT AT START OF MESSAGE DEPENDENT AREA 
 MACRO		ACC$T_USER_DATA	= 44,0,0,0%; 	! ALLOW UP TO 132 BYTES OF USER DATA 
 LITERAL	ACC$S_USER_DATA	= 132; 
 LITERAL	ACC$C_INS_LEN	= 176; 
 LITERAL	ACC$K_INS_LEN	= 176; 			! LENGTH OF INSERT MESSAGE 
 ! 
 ! ASSIGN RECORD TYPE CODES FOR RECORDS IN THE ACCOUNT LOG FILE 
 ! 
  
 LITERAL	
 $EQULST (ACC$K_,GBL,1,1 		! PROCESS ACCOUNTING RECORDS 
 	,(PRCTRM,) 				! JOB TERMINATION 
 	,(BATTRM,) 				! BATCH JOB TERMINATION 
 	,(INTTRM,) 				! INTERACTIVE JOB TERMINATION 
 	,(LOGTRM,) 				! LOGIN FAILURE PROCESS TERMINATION 
 	); 
  
 LITERAL	
 $EQULST (ACC$K_,GBL,16,1 		! MISC ACCOUNTING RECORDS 
 	,(PRTJOB,) 				! PRINT JOB ACCOUNTING 
 	,(INSMSG,) 				! INSERTED MESSAGE 
 	); 
  
 ! 
 ! DEFINE ACCOUNTING MANAGER MESSAGE CODES 
 ! 
  
  
 LITERAL	
 $EQULST (ACC$K_,GBL,1,1 		! 
 	,(INSMESG,) 				! INSERT MESSAGE INTO ACCOUNTING FILE 
 	,(NEWFILE,) 				! CREATE A NEW ACCOUNT FILE 
 	,(ENABACC,) 				! ENABLE ACCOUNTING 
 	,(DISAACC,) 				! DISABLE ACCOUNTING 
 	,(ENABSEL,) 				! ENABLE SELECTIVE ACCOUNTING 
 	,(DISASEL,) 				! DISABLE SELECTIVE ACCOUNTING 
 	); 
  

  
 ! ATTRIBUTE LIST DESCRIPTION. THE ATTRIBUTE CONTROL LIST IS USED TO READ AND 
 ! WRITE FILE ATTRIBUTES. IT CONSISTS OF CONCATENATED ATTRIBUTE CONTROL BLOCKS 
 ! TERMINATED BY A SINGLE ZERO LONGWORD. 
 ! 
  
 !...$ATRDEF	
  
 MACRO		ATR$W_SIZE	= 0,0,16,0%; 			! SIZE OF ATTRIBUTE IN BYTES 
 MACRO		ATR$W_TYPE	= 2,0,16,0%; 			! ATTRIBUTE TYPE CODE 
 MACRO		ATR$L_ADDR	= 4,0,32,0%; 				! ADDRESS OF ATTRIBUTE TEXT 
  
 LITERAL	
 $EQULST (ATR$C_,GBL,3,1 				! ATTRIBUTE CODES 
 	,(UCHAR,) 					! 2 BYTE USER FILE CHARACTERISTICS 
 	,(RECATTR,) 					! 32 BYTES RECORD ATTRIBUTES 
 	,(FILNAM,) 					! 6 BYTE RAD-50 FILE NAME 
 	,(FILTYP,) 					! 2 BYTE RAD-50 FILE TYPE 
 	,(FILVER,) 					! 2 BYTE BINARY FILE VERSION 
 	,(EXPDAT,) 					! 7 BYTE ASCII EXPIRATION DATE 
 	,(STATBLK,) 					! 10 BYTE STATISTICS BLOCK 
 	,(HEADER,) 					! 512 BYTE FILE HEADER 
 	,(BLOCKSIZE,) 				! MAGTAPE BLOCK SIZE 
 	,(USERLABEL,) 				! USER FILE LABEL 
 	,(ASCDATES,) 				! REVISION COUNT THRU EXP DATE IN ASCII 
 	,(ALCONTROL,) 				! COMPATIBILITY MODE ALLOCATION DATA 
 	,(ENDLBLAST,) 				! END OF MAGTAPE LABEL PROCESSING AND SUPPLY AST CONTROL BLOCK 
 	,(ASCNAME,) 					! FILE NAME, TYPE & VERSION IN ASCII 
 	,(CREDATE,) 					! 64 BIT CREATION DATE 
 	,(REVDATE,) 					! 64 BIT REVISION DATE 
 	,(EXPDATE,) 					! 64 BIT EXPIRATION DATE 
 	,(BAKDATE,) 					! 64 BIT BACKUP DATE 
 	,(UIC,) 					! 4 BYTE FILE OWNER UIC 
 	,(FPRO,) 					! 2 BYTE FILE PROTECTION 
 	,(RPRO,) 					! 2 BYTE RECORD PROTECTION 
 	,(ACLEVEL,) 					! 2 BYTE FILE ACCESS LEVEL 
 	,(SEMASK,) 					! FILE SECURITY MASK AND LIMIT 
 	,(UIC_RO,) 					! READ ONLY UIC 
 	,(DIRSEQ,) 					! DIRECTORY UPDATE SEQUENCE COUNT 
 	); 
  
 LITERAL	
 $EQULST (ATR$S_,GBL,0,1 				! ATTRIBUTE MAXIMUM LENGTHS 
 	,(UCHAR,1) 					! 1 BYTE USER FILE CHARACTERISTICS 
 	,(RECATTR,32) 				! 32 BYTES RECORD ATTRIBUTES 
 	,(FILNAM,6) 				! 6 BYTE RAD-50 FILE NAME 
 	,(FILTYP,2) 				! 2 BYTE RAD-50 FILE TYPE 
 	,(FILVER,2) 				! 2 BYTE BINARY FILE VERSION 
 	,(EXPDAT,7) 				! 7 BYTE ASCII EXPIRATION DATE 
 	,(STATBLK,10) 				! 10 BYTE STATISTICS BLOCK 
 	,(HEADER,512) 				! 512 BYTE FILE HEADER 
 	,(BLOCKSIZE,2) 				! MAGTAPE BLOCK SIZE 
 	,(USERLABEL,80) 				! USER FILE LABEL 
 	,(ASCDATES,35) 				! REVISION COUNT THRU EXP DATE IN ASCII 
 	,(ALCONTROL,14) 				! COMPATIBILITY MODE ALLOCATION DATA 
 	,(ENDLBLAST,4) 				! END OF MAGTAPE LABEL PROCESSING AND SUPPLY AST CONTROL BLOCK 
 	,(ASCNAME,20) 				! FILE NAME, TYPE & VERSION IN ASCII 
 	,(CREDATE,8) 				! 64 BIT CREATION DATE 
 	,(REVDATE,8) 				! 64 BIT REVISION DATE 
 	,(EXPDATE,8) 				! 64 BIT EXPIRATION DATE 
 	,(BAKDATE,8) 				! 64 BIT BACKUP DATE 
 	,(UIC,4) 					! 4 BYTE FILE OWNER UIC 
 	,(FPRO,2) 					! 2 BYTE FILE PROTECTION 
 	,(RPRO,2) 					! 2 BYTE RECORD PROTECTION 
 	,(ACLEVEL,2) 				! 2 BYTE FILE ACCESS LEVEL 
 	,(SEMASK,8) 				! FILE SECURITY MASK AND LIMIT 
 	,(UIC_RO,4) 				! READ ONLY UIC 
 	,(DIRSEQ,2) 				! DIRECTORY UPDATE SEQUENCE COUNT 
 	); 
  

  
 ! 
 ! CONDITION HANDLING ARGUMENT LIST OFFSETS 
 ! THERE ARE THREE CONDITIONAL HANDLING STRUCTURES: THE PRIMARY ARGUMENT 
 ! LIST, AND THE SIGNAL AND MECHANISM ARRAYS. ALL ARE IDENTIFIED BY THE SAME 
 ! BLOCK PREFIX. 
 ! 
  
 !...$CHFDEF	
  
 							!PRIMARY ARGUMENT LIST 
 MACRO		CHF$L_SIGARGLST	= 4,0,32,0%; 			!ADDRESS OF SIGNAL ARGUMENTS 
 MACRO		CHF$L_MCHARGLST	= 8,0,32,0%; 			!ADDRESS OF MECHANISM ARGUMENTS 
  
 							!SIGNAL ARRAY 
 MACRO		CHF$L_SIG_ARGS	= 0,0,32,0%; 			!NUMBER OF SIGNAL ARGUMENTS 
 MACRO		CHF$L_SIG_NAME	= 4,0,32,0%; 			!SIGNAL NAME 
 MACRO		CHF$L_SIG_ARG1	= 8,0,32,0%; 			!FIRST SIGNAL SPECIFIC ARGUMENT 
  
 							!MECHANISM ARRAY 
 MACRO		CHF$L_MCH_ARGS	= 0,0,32,0%; 			!NUMBER OF MECHANISM ARGUMENTS 
 MACRO		CHF$L_MCH_FRAME	= 4,0,32,0%; 			!ESTABLISHER FRAME ADDRESS 
 MACRO		CHF$L_MCH_DEPTH	= 8,0,32,0%; 			!FRAME DEPTH OF ESTABLISHER 
 MACRO		CHF$L_MCH_SAVR0	= 12,0,32,0%; 			!SAVED REGISTER R0 
 MACRO		CHF$L_MCH_SAVR1	= 16,0,32,0%; 			!SAVED REGISTER R1 
  

  
 !++ 
 ! 
 ! $CLIDEF --- COMMAND LAGUAGE INTERFACE DEFINITIONS 
 ! 
 ! THIS MODULE DEFINES THE OFFSET VALUES FOR THE DATA STRUCTURES 
 ! USED TO COMMUNICATED COMMAND INFORMATION BETWEEN THE CLI AND 
 ! THE UTILITY THAT WAS REQUESTED TO PERFORM THE OPERATION. 
 ! 
 !-- 
 !...$CLIDEF	
  
 			 
 MACRO		CLI$L_INIARGCNT	= 0,0,32,0%; 		! INITIAL ARG COUNT 
 MACRO		CLI$A_PROGXFER	= 4,0,32,0%; 		! PROGRAM TRANSFER VECTOR ADDRESS 
 MACRO		CLI$A_UTILSERV	= 8,0,32,0%; 		! ADDRESS OF CLI UTILITY SERVICE 
 MACRO		CLI$A_IMGHDADR	= 12,0,32,0%; 		! ADDRESS OF IMAGE HEADER 
 MACRO		CLI$A_IMGFILED	= 16,0,32,0%; 		! ADDRESS OF IMAGE FILE DATA 
 MACRO		CLI$L_LINKFLAG	= 20,0,32,0%; 		! LINK FLAG LONGWORD 
 MACRO		CLI$L_CLIFLAG	= 24,0,32,0%; 			! CLI FLAG LONGWORD 
 							! DEFINE CLI FLAGS 
 MACRO		CLI$V_DEBUG	= 24,0,1,0%; 			! DEBUG QUALIFIER SEEN 
 LITERAL	CLI$M_DEBUG	= 1^1 - 1^0; 
 MACRO		CLI$V_DBGTRU	= 24,1,1,0%; 			! DEBUG WAS TRUE 
 LITERAL	CLI$M_DBGTRU	= 1^2 - 1^1; 
 MACRO		CLI$V_VERIFY	= 24,2,1,0%; 			! VERIFY IS ON 
 LITERAL	CLI$M_VERIFY	= 1^3 - 1^2; 
 MACRO		CLI$V_BATCH	= 24,3,1,0%; 			! THIS PROCESS IS A BATCH JOB 
 LITERAL	CLI$M_BATCH	= 1^4 - 1^3; 
 MACRO		CLI$V_INDIRECT	= 24,4,1,0%; 		! INDIRECT LEVEL NOT EQUAL TO ZERO 
 LITERAL	CLI$M_INDIRECT	= 1^5 - 1^4; 
 MACRO		CLI$V_VFYINP	= 24,5,1,0%; 			! UTILITY SHOULD VERFIY INPUT 
 LITERAL	CLI$M_VFYINP	= 1^6 - 1^5; 
 							! ROUND UP TO NEXT BYTE 
 MACRO		CLI$V_TRMVRBLV	= 24,8,2,0%; 		! TERMINAL VERBOSITY LEVEL 
 LITERAL	CLI$M_TRMVRBLV	= 1^10 - 1^8; 
 							! ROUND UP TO NEXT BYTE 
 MACRO		CLI$V_DBGEXCP	= 24,16,1,0%; 			! DEBUGGER CALLED VIA "DEBUG" EXCEPTION 
 LITERAL	CLI$M_DBGEXCP	= 1^17 - 1^16; 
 			
  
 			 
  
 MACRO		CLI$B_RQTYPE	= 0,0,8,0%; 		! TYPE OF REQUEST BEING MADE 
 							! VIELD DEFINITIONS 
 MACRO		CLI$V_SUBTYP	= 0,0,4,0%; 		! SUB TYPE VIELD 
 MACRO		CLI$V_PRITYP	= 0,4,4,0%; 		! PRIMARY TYPYE 
 			
 MACRO		CLI$W_SERVCOD	= 1,0,16,0%; 		! CLI SERVICE CODE 
 MACRO		CLI$B_RQINDX	= 1,0,8,0%; 		! OFFSET FOR VALUE KEYWORD INDEX 
 MACRO		CLI$B_BITNUM	= 1,0,8,0%; 		! BIT TO SET IF REQUEST IS SUCESSFUL 
 MACRO		CLI$B_RQFLGS	= 2,0,8,0%; 		! INPUT FLAGS CONCERNING REQUEST 
 							! FLAGS FOR PARAMETER PARSING 
 MACRO		CLI$V_PARMREQ	= 2,0,1,0%; 			! PARAMATER IS REQUIRED 
 LITERAL	CLI$M_PARMREQ	= 1^1 - 1^0; 
 MACRO		CLI$V_ABSADR	= 2,1,1,0%; 			! ALL ADDRESS ARE ABSOLUTE 
 LITERAL	CLI$M_ABSADR	= 1^2 - 1^1; 
 MACRO		CLI$V_EXPNAM	= 2,2,1,0%; 			! RETURN EXPLICIT NAMES ONLY 
 LITERAL	CLI$M_EXPNAM	= 1^3 - 1^2; 
 			
  
 							! FLAGS FOR VALUE PARSING 
 MACRO		CLI$V_LASTVAL	= 2,0,1,0%; 			! LAST VALUE ALLOWED 
 LITERAL	CLI$M_LASTVAL	= 1^1 - 1^0; 
 MACRO		CLI$V_DUMMY	= 2,1,1,0%; 			! *** SAVE PLACE FOR ABS ADR *** 
 LITERAL	CLI$M_DUMMY	= 1^2 - 1^1; 
 			
  
 MACRO		CLI$B_RQSTAT	= 3,0,8,0%; 		! OUTPUT STATUS FLAGS 
  
 							! STATUS FLAGS FOR PARAMETER PARSING 
 MACRO		CLI$V_PARMPRS	= 3,0,1,0%; 			! PARAMETER IS PRESENT 
 LITERAL	CLI$M_PARMPRS	= 1^1 - 1^0; 
 MACRO		CLI$V_CONCATINP	= 3,1,1,0%; 		! INPUT CONCATONATION EXISTS 
 LITERAL	CLI$M_CONCATINP	= 1^2 - 1^1; 
 MACRO		CLI$V_MOREINP	= 3,2,1,0%; 			! ANOTHER SET OF INPUT PARAMETERS 
 LITERAL	CLI$M_MOREINP	= 1^3 - 1^2; 
 MACRO		CLI$V_PARMDEF	= 3,3,1,0%; 			! PARAMETER WAS DEFAULTED PRESENT 
 LITERAL	CLI$M_PARMDEF	= 1^4 - 1^3; 
 			
 							! FLAGS FROM VALUE PARSING 
 MACRO		CLI$V_MOREVALS	= 3,0,1,0%; 		! UNPROCESSED VALUES REMAIN 
 LITERAL	CLI$M_MOREVALS	= 1^1 - 1^0; 
 MACRO		CLI$V_KEYVALU	= 3,1,1,0%; 			! SUBSEQUENT TOKEN IS VALUE FOR KEY 
 LITERAL	CLI$M_KEYVALU	= 1^2 - 1^1; 
 			
  
 MACRO		CLI$A_ERRACT	= 4,0,32,0%; 		! ADDRESS OF ERROR ACTION ROUTINE 
 MACRO		CLI$Q_RQDESC	= 8,0,0,0%; 		! QUADWORD REQUEST DESCRIPTOR 
 LITERAL	CLI$S_RQDESC	= 8; 
 MACRO		CLI$W_RQSIZE	= 8,0,16,0%; 		! RESULTANT SIZE OF PARAMETER 
 MACRO		CLI$L_RQVALU	= 12,0,32,0%; 		! ACTUAL VALUE IN VALUE CONVERSTION 
 MACRO		CLI$A_RQADDR	= 12,0,32,0%; 		! ADDRESS OF RESULTANT PARAMETER 
 MACRO		CLI$A_PRSACT	= 16,0,32,0%; 		! PARAMETER PRESENT ACTION ROUTINE 
 MACRO		CLI$A_ABSACT	= 20,0,32,0%; 		! PARAMETER ABSENT ACTION ROUTINE 
 MACRO		CLI$A_QUALST	= 24,0,32,0%; 		! ADDRESS OF QUALIFIERS 
  
 LITERAL	CLI$C_REQDESC	= 28; 
 LITERAL	CLI$K_REQDESC	= 28; 				! SIZE OF THE STRUCTURE 
  
 ! 
 ! DEFINE THE PARAMETER QUALIFIER DESCRIPTOR 
 ! 
  
 			 
  
 MACRO		CLI$B_QDBLKSIZ	= 0,0,8,0%; 		! SIZE OF THE FINAL BLOCK 
 MACRO		CLI$B_QDCODE	= 1,0,8,0%; 		! ID CODE FOR THE QUALIFIER 
 MACRO		CLI$B_QDFLGS	= 2,0,8,0%; 		! FLAGS BYTE 
 							! 
 MACRO		CLI$V_ALLOCCUR	= 2,0,1,0%; 		! TAKE ACTION ON ALL OCCURANCES 
 LITERAL	CLI$M_ALLOCCUR	= 1^1 - 1^0; 
 MACRO		CLI$V_QDUSRV	= 2,1,1,0%; 			! USER CONTEX VALUE IS PRESENT 
 LITERAL	CLI$M_QDUSRV	= 1^2 - 1^1; 
 MACRO		CLI$V_QDEXPA	= 2,2,1,0%; 			! TAKE ACTION ON EXPLICIT OCCURANCES 
 LITERAL	CLI$M_QDEXPA	= 1^3 - 1^2; 
 			
 MACRO		CLI$B_QDSTAT	= 3,0,8,0%; 		! QUALIFIER STATUS 
 							! DEFINE QUALIFIER STATUS BITS 
 MACRO		CLI$V_QUALTRU	= 3,0,1,0%; 			! QUALIFIER IS TRUE 
 LITERAL	CLI$M_QUALTRU	= 1^1 - 1^0; 
 MACRO		CLI$V_QUALEXP	= 3,1,1,0%; 			! QUALIFIER EXPLICITLY STATED 
 LITERAL	CLI$M_QUALEXP	= 1^2 - 1^1; 
 			
  
 MACRO		CLI$Q_QDVALDESC	= 4,0,0,0%; 		! QUALIFIER VALUE DESCRIPTOR 
 LITERAL	CLI$S_QDVALDESC	= 8; 
 MACRO		CLI$W_QDVALSIZ	= 4,0,16,0%; 		! SIZE OF VALUE 
 MACRO		CLI$A_QDVALADR	= 8,0,32,0%; 		! ADDRESS OF VALUE STRING 
 MACRO		CLI$A_TRUACT	= 12,0,32,0%; 		! QUALIFIER TRUE ACTION ROUTINE 
 MACRO		CLI$A_FLSACT	= 16,0,32,0%; 		! QUALIFIER FALSE ACTION ROUTINE 
 LITERAL	CLI$C_QUALDEF	= 20; 
 LITERAL	CLI$K_QUALDEF	= 20; 				! SIZE OF FIXED PART OF STRUCTURE 
 LITERAL	CLI$C_QDBITS	= 20; 
 LITERAL	CLI$K_QDBITS	= 20; 				! START OF BIT LISTS(VARIALBLE LENGTH) 
 MACRO		CLI$L_USRVAL	= 20,0,32,0%; 			! OPTION USER VALUE IF PRESENT 
  
 ! 
 ! DEFINE SPACE FOR THE RESULT PARSE WORK AREA 
 ! 
  
 			 
  
 MACRO		CLI$L_WORKAREA	= 0,0,0,0%; 		! ALLOCATE 32 LONG WORDS 
 LITERAL	CLI$S_WORKAREA	= 128; 
 LITERAL	CLI$C_WORKAREA	= 128; 
 LITERAL	CLI$K_WORKAREA	= 128; 			! SIZE OF HEADER 
  
  
 ! 
 ! DEFINE CLI UTILITY REQUEST CODES 
 ! 
 !	CODES ARE 8 BITS, CONSISTING OF 2 4 BIT FIELDS 
 !	THE LEAST 4 BITS ARE SUBFUCTION DEFINITONS 
 !	AND THE MOST SIGNIFICANT 4 BITS ARE REQUEST TYPE 
 ! 
 LITERAL	
 $EQULST (CLI$K_,GBL,0,1 		! DEFINE REQUEST TYPE CODES 
 	,(UTILOPR,) 				! UTILITY OPERATIONS 
 	,(INPSPEC,) 				! REQUEST FOR AN INPUT SPECIFICATION 
 	,(OUTSPEC,) 				! AN OUTPUT FILE SPECIFICATION 
 	,(PARDONE,) 				! PARAMETER DONE REQUEST 
 	,(VALCONV,) 				! REQUEST A VALUE CONVERSION 
 	,(CLISERV,) 				! REQUSET A SERVICE FORM THE CLI 
 	); 
 ! 
 ! DEFINE COMPLETE CODES FOR UTILITY OPERATIONS 
 ! 
 LITERAL	
 $EQULST (CLI$K_,GBL,(CLI$K_UTILOPR^4),1  
 	,(INITPRS,) 				! REQUEST INITIALIZATION OF PARSE 
 	,(GETCMD,) 				! GET COMMAND BUFFER LIMITS 
 	,(GETQUAL,) 				! OPTAIN STATE OF QUALIFIERS 
 	,(GETOPT,) 				! DECODE COMMAND OPTION 
 	); 
  
 ! 
 ! DEFINE COMPLETE CODES FOR INPUT SPECIFICATIONS 
 ! 
 LITERAL	
 $EQULST (CLI$K_,GBL,(CLI$K_INPSPEC^4),1  
 	,(INPUT1,) 				! PRIMARY INPUT 
 	,(INPUT2,) 				! SECONDARY INPUT 
 	,(INPUT3,) 				! THIRD, 
 	,(INPUT4,) 				! ETC,ETC,ETC 
 	); 
 ! 
 ! DEFINE COMPLETE CODES FOR OUTPUT SPECIFICATIONS 
 ! 
 LITERAL	
 $EQULST (CLI$K_,GBL,(CLI$K_OUTSPEC^4),1  
 	,(OUTPUT1,) 				! FIRST OUTPUT 
 	,(OUTPUT2,) 				! SECOND OUTPUT 
 	,(OUTPUT3,) 				! THIRD,- 
 	,(OUTPUT4,) 				! ETC,ETC,ETC 
 	); 
 ! 
 ! DEFINE CODES FOR RESULT PARSE PARAMETER COMPLETION 
 ! 
 LITERAL	
 $EQULST (CLI$K_,GBL,(CLI$K_PARDONE^4),1  
 	,(ENDPRM1,) 				! COMPLETED PARAMETER SET 1 
 	,(ENDPRM2,) 				! COMPLETED PARAMETER SET 2 
 	,(ENDPRM3,) 				! COMPLETED PARAMETER SET 3 
 	,(ENDPRM4,) 				! COMPLETED PARAMETER SET 4 
 	); 
 ! 
 ! DEFINE CODES FOR VALUE CONVERSION REQUESTS 
 ! 
 LITERAL	
 $EQULST (CLI$K_,GBL,(CLI$K_VALCONV^4),1  
 	,(NUMERVAL,) 			! NUMBERIC VALUE 
 	,(ASCIIVAL,) 			! ASCII VALUE 
 	,(KEYWORD,) 				! KEYWORD VALUE 
 	,(KEYVAL,) 				! KEYWORD WITH VALUE 
 	,(FILSPEC,) 				! VALUE IS A FILESPEC 
 	); 

  
 ! 
 ! DEFINE CLI SERVICE REQUEST CODES 
 ! 
  
 !...$CLISERVDEF	
 LITERAL	
 $EQULST (CLI$K_,GBL,1,1 		! DEFINE CLI SERVICE CODES 
 	,(PAUSE,) 				! PAUSE THE IMAGE 
 	,(DEFLOCAL,) 			! DEFINE A SYMBOL IN THE LOCAL TABLE 
 	,(DEFGLOBAL,) 			! DEFINE A SYMBOL IN THE GLOBAL TABLE 
 	); 

 ! 
 ! DEFINE GENERIC CODES FOR VERBS 
 ! 
  
 !...$CLIVERBDEF	
 LITERAL	
 $EQULST (CLI$K_VERB_,GBL,1,1 	! DEFINE VERB QENERIC CODES 
 	,(ALLO,) 				! ALLOCATE 
 	,(ANAL,) 				! ANALIZE 
 	,(ASSI,) 				! ASSIGN 
 	,(BASI,) 				! BASIC 
 	,(BLIS,) 				! BLISS 
 	,(COBO,) 				! COBOL 
 	,(CONT,) 				! CONTINUE 
 	,(COPY,) 				! COPY 
 	,(CREA,) 				! CREATE 
 	,(DATA,) 				! DATA 
 	,(DEAL,) 				! DEALLOCATE 
 	,(DEAS,) 				! DEASSIGN 
 	,(DEBU,) 				! DEBUG 
 	,(DEFI,) 				! DEFINE 
 	,(DELE,) 				! DELETE 
 	,(DEPO,) 				! DEPOSIT 
 	,(DIFF,) 				! DIFFERENCE COMMAND 
 	,(DIRE,) 				! DIRECTORY 
 	,(DISM,) 				! DISMOUNT 
 	,(EDIT,) 				! EDIT 
 	,(EOD,) 				! EOD 
 	,(EXAM,) 				! EXAMINE 
 	,(EXIT,) 				! EXIT 
 	,(FORT,) 				! FORTRAN 
 	,(GOTO,) 				! GOTO 
 	,(HELP,) 				! HELP 
 	,(IF,) 				! IF 
 	,(INIT,) 				! INITIALIZE 
 	,(INQU,) 				! INQUIRE 
 	,(LINK,) 				! LINK 
 	,(LOGO,) 				! LOGOUT 
 	,(MACR,) 				! MACRO 
 	,(MCR,) 				! MCR 
 	,(ON,) 				! ON 
 	,(PRIN,) 				! PRINT 
 	,(RUN,) 				! RUN 
 	,(SET,) 				! SET 
 	,(SHOW,) 				! SHOW 
 	,(STAR,) 				! START 
 	,(STOP,) 				! STOP 
 	,(SUBM,) 				! SUBMIT 
 	,(TYPE,) 				! TYPE 
 	,(MOUN,) 				! MOUNT 
 	,(PATC,) 				! PATCH 
 	,(REPL,) 				! REPLAY 
 	,(UNLO,) 				! UNLOCK 
 	,(APPE,) 				! APPEND COMMAND 
 	,(DUMP,) 				! DUMP 
 	,(PURG,) 				! PURGE 
 	,(RENA,) 				! RENAME 
 	,(CANC,) 				! CANCEL 
 	,(LIBR,) 				! LIBRARY 
 	,(SORT,) 				! SORT 
 	,(REQU,) 				! REQUEST 
 	,(SYNC,) 				! SYNCRONIZE 
 	); 
 LITERAL	
 $EQULST (CLI$K_VERB_,GBL,255,-1 	! DEFINE VERB QENERIC CODES 
 	,(FORE,) 				! FOREIGN COMMAND 
 	); 

  
 !+ 
 ! CARD READER STATUS BITS 
 !- 
  
 !...$CRDEF	
  
 							!CARD READ CHARACTERISTICS DEFINITIONS 
 MACRO		CR$V_TMODE	= 0,0,4,0%; 		! TRANSLATION MODE 
 LITERAL	CR$M_TMODE	= 1^4 - 1^0; 
 						! 
  
 ! 
 ! TRANSLATION MODE DEFINITIONS 
 ! 
  
 LITERAL	
 $EQULST (CR$K_,GBL,0,1 				! 
 	,(T026,0) 				!026 PUNCH CODE TRANSLATION 
 	,(T029,1) 				!029 PUNCH CODE TRANSLATION 
 	); 			! 
  

  
 ! 
 ! DEVICE ADAPTER, CLASS, AND TYPE DEFINITIONS 
 ! 
 !...$DCDEF	
  
 ! 
 ! DEFINE ADAPTER TYPES 
 ! 
 LITERAL	
 $EQULST (AT$_,GBL,0,1 				!DEFINE ADAPTER TYPES 
 	,(MBA,0) 				! MASSBUS ADAPTER 
 	,(UBA,1) 				! UNIBUS ADAPTER 
 	); 
 ! 
 ! DEFINE DEVICE CLASSES 
 ! 
 LITERAL	
 $EQULST (DC$_,GBL,0,1 				!DEFINE DEVICE CLASSES 
 	,(DISK,1) 				! DISK 
 	,(TAPE,2) 				! TAPES 
 	,(SCOM,32) 				! SYNCHRONOUS COMMUNICATIONS DEVICES 
 	,(CARD,65) 				! CARD READER 
 	,(TERM,66) 				! TERMINAL 
 	,(LP,67) 				! LINE PRINTER 
 	,(MAILBOX,160) 			! MAILBOX 
 	); 
  
 ! 
 ! DEFINE DEVICE TYPES 
 ! 
  
 LITERAL	
 $EQULST (DT$_,GBL,0,1 				! 
  
 ! 
 ! DISK DEVICES 
 ! 
  
 	,(RK06,1) 				!RK06 DISK 
 	,(RK07,2) 				!RK07 DISK 
 	,(RP04,3) 				!RP04 DISK 
 	,(RP05,4) 				!RP05 DISK 
 	,(RP06,5) 				!RP06 DISK 
 	,(RM03,6) 				!RM03 DISK 
 	,(RP07,7) 				!RP07 DISK 
 	,(RP07HT,8) 			!RP07 DISK WITH HEAD/TRACK 
  
 ! 
 ! TAPE DEVICES 
 ! 
  
 	,(TE16,1) 				!TE16 MAGTAPE 
 	,(TU45,2) 				!TU45 MAGTAPE 
 	,(TU77,3) 				!TU77 MAGTAPE 
 	); 			! 
 LITERAL	
 $EQULST (DT$_,GBL,0,1 			! **** MATCHES $TTDEF ***** 
 	,(TTYUNKN,0) 				! UNKNOWN TERMINAL 
 	,(VT05,1) 					! VT05 
 	,(LAX,32) 					! LA TYPE TERMINAL 
 	,(LA36,32) 					! LA36 
 	,(VT5X,64) 					! VT5X TYPE 
 	,(VT52,64) 					! VT52 
 	,(VT55,65) 					! VT55 
 	); 			! ****** 
 LITERAL	
 $EQULST (DT$_,GBL,0,1 			 
 	,(XM_ARDA,1) 				! DMC11 AR WITH DA 
 	,(XM_ARFA,2) 				! DMC11 AR WITH FA 
 	,(XM_ALMA,9) 				! DMC11 AL WITH MA 
 	,(XM_ALMD,10) 				! DMC11 AL WITH MA 
 	); 
 LITERAL	
 $EQULST (DT$_,GBL,0,1 			 
 	,(LP11,1) 					! LP11 
 	,(LA11,2) 					! LA11 
 	,(LA180,3) 					! LA180 
 	); 
 LITERAL	
 $EQULST (DT$_,GBL,0,1 			 
 	,(CR11,1) 					! CR11 CARD READER 
 	); 
 LITERAL	
 $EQULST (DT$_,GBL,0,1 			 
 	,(MBX,1) 					! GENERIC MAILBOX 
 	); 
  

  
 ! 
 !  THE FOLLOWING BITS DEFINE THE DEVICE CHARACTERISTICS FOR 
 !  BOTH THE UCBS AND RMS. 
 ! 
 !...$DEVDEF	
 			 
 MACRO		DEV$V_REC	= 0,0,1,0%; 		! DEVICE RECORD ORIENTED 
 LITERAL	DEV$M_REC	= 1^1 - 1^0; 
 MACRO		DEV$V_CCL	= 0,1,1,0%; 		! CARRIAGE CONTROL DEVICE 
 LITERAL	DEV$M_CCL	= 1^2 - 1^1; 
 MACRO		DEV$V_TRM	= 0,2,1,0%; 		! DEVICE IS A TERMINAL 
 LITERAL	DEV$M_TRM	= 1^3 - 1^2; 
 MACRO		DEV$V_DIR	= 0,3,1,0%; 		! DEVICE IS DIRECTORY STRUCTURED 
 LITERAL	DEV$M_DIR	= 1^4 - 1^3; 
 MACRO		DEV$V_SDI	= 0,4,1,0%; 		! DEVICE IS SINGLE DIRECTORY STRUCTURED 
 LITERAL	DEV$M_SDI	= 1^5 - 1^4; 
 MACRO		DEV$V_SQD	= 0,5,1,0%; 		! SEQUENTIAL BLOCK-ORIENTED DEVICE (I.E., MAGTAPE) 
 LITERAL	DEV$M_SQD	= 1^6 - 1^5; 
 MACRO		DEV$V_SPL	= 0,6,1,0%; 		! DEVICE BEING SPOOLED 
 LITERAL	DEV$M_SPL	= 1^7 - 1^6; 
 						! SPARES TO CORRESPOND WITH RSX11M 
 MACRO		DEV$V_NET	= 0,13,1,0%; 		! NETWORK DEVICE 
 LITERAL	DEV$M_NET	= 1^14 - 1^13; 
 MACRO		DEV$V_FOD	= 0,14,1,0%; 		! FILES-ORIENTED DEVICE (I.E., DISK AND MT) 
 LITERAL	DEV$M_FOD	= 1^15 - 1^14; 
 						! SPARE TO CORRESPOND WITH RSX11M 
 MACRO		DEV$V_SHR	= 0,16,1,0%; 		! DEVICE SHAREABLE 
 LITERAL	DEV$M_SHR	= 1^17 - 1^16; 
 MACRO		DEV$V_GEN	= 0,17,1,0%; 		! DEVICE IS A GENERIC DEVICE 
 LITERAL	DEV$M_GEN	= 1^18 - 1^17; 
 MACRO		DEV$V_AVL	= 0,18,1,0%; 		! DEVICE AVAILABLE FOR USE 
 LITERAL	DEV$M_AVL	= 1^19 - 1^18; 
 MACRO		DEV$V_MNT	= 0,19,1,0%; 		! DEVICE IS MOUNTED 
 LITERAL	DEV$M_MNT	= 1^20 - 1^19; 
 MACRO		DEV$V_MBX	= 0,20,1,0%; 		! DEVICE IS A MAILBOX 
 LITERAL	DEV$M_MBX	= 1^21 - 1^20; 
 MACRO		DEV$V_DMT	= 0,21,1,0%; 		! DEVICE MARKED FOR DISMOUNT 
 LITERAL	DEV$M_DMT	= 1^22 - 1^21; 
 MACRO		DEV$V_ELG	= 0,22,1,0%; 		! DEVICE HAS ERROR LOGGING ENABLED 
 LITERAL	DEV$M_ELG	= 1^23 - 1^22; 
 MACRO		DEV$V_ALL	= 0,23,1,0%; 		! DEVICE IS ALLOCATED 
 LITERAL	DEV$M_ALL	= 1^24 - 1^23; 
 MACRO		DEV$V_FOR	= 0,24,1,0%; 		! DEVICE IS MOUNTED FOREIGN (I.E., NON-FILE STRUCTURED) 
 LITERAL	DEV$M_FOR	= 1^25 - 1^24; 
 MACRO		DEV$V_SWL	= 0,25,1,0%; 		! DEVICE IS SOFTWARE WRITE LOCKED 
 LITERAL	DEV$M_SWL	= 1^26 - 1^25; 
 MACRO		DEV$V_IDV	= 0,26,1,0%; 		! DEVICE CAPABLE OF PROVIDING INPUT 
 LITERAL	DEV$M_IDV	= 1^27 - 1^26; 
 MACRO		DEV$V_ODV	= 0,27,1,0%; 		! DEVICE CAPABLE OF PROVIDING OUTPUT 
 LITERAL	DEV$M_ODV	= 1^28 - 1^27; 
 MACRO		DEV$V_RND	= 0,28,1,0%; 		! DEVICE ALLOWS RANDOM ACCESS 
 LITERAL	DEV$M_RND	= 1^29 - 1^28; 
 MACRO		DEV$V_RTM	= 0,29,1,0%; 		! DEVICE IS REALTIME IN NATURE 
 LITERAL	DEV$M_RTM	= 1^30 - 1^29; 
 MACRO		DEV$V_RCK	= 0,30,1,0%; 		! DEVICE HAS READ CHECKING ENABLED 
 LITERAL	DEV$M_RCK	= 1^31 - 1^30; 
 MACRO		DEV$V_WCK	= 0,31,1,0%; 		! DEVICE HAS WRITE CHECKING ENABLED 
 LITERAL	DEV$M_WCK	= 1^32 - 1^31; 
 			

  
 !+ 
 ! DEVICE INFORMATION BLOCK DEFINITIONS 
 !- 
  
 !...$DIBDEF	
  
 MACRO		DIB$L_DEVCHAR	= 0,0,32,0%; 		!DEVICE CHARACTERISTICS 
 MACRO		DIB$B_DEVCLASS	= 4,0,8,0%; 		!DEVICE CLASS 
 MACRO		DIB$B_DEVTYPE	= 5,0,8,0%; 		!DEVICE TYPE 
 MACRO		DIB$W_DEVBUFSIZ	= 6,0,16,0%; 		!DEVICE BUFFER SIZE 
 MACRO		DIB$L_DEVDEPEND	= 8,0,32,0%; 		!DEVICE DEPENDENT INFORMATION 
 MACRO		DIB$W_UNIT	= 12,0,16,0%; 			!DEVICE UNIT NUMBER 
 MACRO		DIB$W_DEVNAMOFF	= 14,0,16,0%; 		!OFFSET TO DEVICE NAME COUNTED STRING 
 MACRO		DIB$L_PID	= 16,0,32,0%; 			!DEVICE OWNER PROCESS IDENTIFICATION 
 MACRO		DIB$L_OWNUIC	= 20,0,32,0%; 		!DEVICE OWNER USER IDENTIFICATION CODE 
 MACRO		DIB$W_VPROT	= 24,0,16,0%; 			!DEVICE PROTECTION MASK 
 MACRO		DIB$W_ERRCNT	= 26,0,16,0%; 		!DEVICE ERROR COUNT 
 MACRO		DIB$L_OPCNT	= 28,0,32,0%; 			!DEVICE OPERATIONS COUNT 
 MACRO		DIB$W_VOLNAMOFF	= 32,0,16,0%; 		!OFFSET TO VOLUME LABEL COUNTED STRING 
 MACRO		DIB$W_RECSIZ	= 34,0,16,0%; 		!BLOCKED RECORD SIZE 
 LITERAL	DIB$C_LENGTH	= 36; 
 LITERAL	DIB$K_LENGTH	= 36; 				!LENGTH OF FIXED PART 
  

  
 ! 
 ! LAYOUT OF THE FILE IDENTIFICATION BLOCK (FIB) 
 ! 
 !...$FIBDEF	
 MACRO		FIB$L_ACCTL	= 0,0,32,0%; 			! ACCESS CONTROL BITS 
 			 
 MACRO		FIB$V_NOWRITE	= 0,0,1,0%; 		! NO OTHER WRITERS 
 LITERAL	FIB$M_NOWRITE	= 1^1 - 1^0; 
 MACRO		FIB$V_DLOCK	= 0,1,1,0%; 		! ENABLE DEACCESS LOCK 
 LITERAL	FIB$M_DLOCK	= 1^2 - 1^1; 
 						! UNUSED 
 MACRO		FIB$V_SPOOL	= 0,4,1,0%; 		! SPOOL FILE ON CLOSE 
 LITERAL	FIB$M_SPOOL	= 1^5 - 1^4; 
 MACRO		FIB$V_WRITECK	= 0,5,1,0%; 		! ENABLE WRITE CHECK 
 LITERAL	FIB$M_WRITECK	= 1^6 - 1^5; 
 MACRO		FIB$V_SEQONLY	= 0,6,1,0%; 		! SEQUENTIAL ONLY ACCESS 
 LITERAL	FIB$M_SEQONLY	= 1^7 - 1^6; 
 						! SPARE 
 MACRO		FIB$V_WRITE	= 0,8,1,0%; 		! WRITE ACCESS 
 LITERAL	FIB$M_WRITE	= 1^9 - 1^8; 
 MACRO		FIB$V_READCK	= 0,9,1,0%; 		! ENABLE READ CHECK 
 LITERAL	FIB$M_READCK	= 1^10 - 1^9; 
 MACRO		FIB$V_NOREAD	= 0,10,1,0%; 		! NO OTHER READERS 
 LITERAL	FIB$M_NOREAD	= 1^11 - 1^10; 
 MACRO		FIB$V_NOTRUNC	= 0,11,1,0%; 		! FILE MAY NOT BE TRUNCATED 
 LITERAL	FIB$M_NOTRUNC	= 1^12 - 1^11; 
 						! SPARE 
 				! THE HIGH 8 BITS CANNOT BE COPIED 
 				! INTO THE ACCESS MODE WORD IN THE WINDOW 
 MACRO		FIB$V_EXECUTE	= 0,16,1,0%; 		! ACCESS FOR EXECUTE (USE EXECUTE PROTECTION) 
 LITERAL	FIB$M_EXECUTE	= 1^17 - 1^16; 
 MACRO		FIB$V_PRSRV_ATR	= 0,17,1,0%; 	! PRESERVE ORIGINAL ATTRIBUTES OF FILE 
 LITERAL	FIB$M_PRSRV_ATR	= 1^18 - 1^17; 
 						! SPARE 
 			
 						! OVERLAPPING BITS USED FOR MAGTAPE 
 				 
 MACRO		FIB$V_REWIND	= 0,3,1,0%; 		! REWIND TAPE 
 LITERAL	FIB$M_REWIND	= 1^4 - 1^3; 
 MACRO		FIB$V_CURPOS	= 0,4,1,0%; 		! CREATE AT CURRENT TAPE POSITION 
 LITERAL	FIB$M_CURPOS	= 1^5 - 1^4; 
 				 
 MACRO		FIB$V_UPDATE	= 0,6,1,0%; 		! UPDATE MODE (POSITION TO START OF FILE) 
 LITERAL	FIB$M_UPDATE	= 1^7 - 1^6; 
 			
 MACRO		FIB$B_WSIZE	= 3,0,8,1%; 	! WINDOW SIZE 
 MACRO		FIB$W_FID	= 4,0,0,0%; 		! FILE ID 
 LITERAL	FIB$S_FID	= 6; 
 MACRO		FIB$W_FID_NUM	= 4,0,16,0%; 	! FILE NUMBER 
 MACRO		FIB$W_FID_SEQ	= 6,0,16,0%; 	! FILE SEQUENCE NUMBER 
 MACRO		FIB$W_FID_RVN	= 8,0,16,0%; 	! RELATIVE VOLUME NUMBER 
 MACRO		FIB$B_FID_RVN	= 8,0,8,0%; 	! SHORT FORM RVN 
 MACRO		FIB$B_FID_NMX	= 9,0,8,0%; 	! EXTENDED FILE NUMBER 
 LITERAL	FIB$C_ACCDATA	= 10; 
 LITERAL	FIB$K_ACCDATA	= 10; 			! ABOVE DATA NECESSARY FOR ACCESS 
 MACRO		FIB$W_DID	= 10,0,0,0%; 		! DIRECTORY ID 
 LITERAL	FIB$S_DID	= 6; 
 MACRO		FIB$W_DID_NUM	= 10,0,16,0%; 	! FILE NUMBER 
 MACRO		FIB$W_DID_SEQ	= 12,0,16,0%; 	! FILE SEQUENCE NUMBER 
 MACRO		FIB$W_DID_RVN	= 14,0,16,0%; 	! RELATIVE VOLUME NUMBER 
 MACRO		FIB$B_DID_RVN	= 14,0,8,0%; 	! SHORT FORM RVN 
 MACRO		FIB$B_DID_NMX	= 15,0,8,0%; 	! EXTENDED FILE NUMBER 
 MACRO		FIB$L_WCC	= 16,0,32,0%; 			! WILD CARD CONTEXT 
 MACRO		FIB$W_NMCTL	= 20,0,16,0%; 		! NAME CONTROL BITS 
 			 
 				 
 MACRO		FIB$V_ALLVER	= 20,3,1,0%; 		! MATCH ALL VERSIONS 
 LITERAL	FIB$M_ALLVER	= 1^4 - 1^3; 
 MACRO		FIB$V_ALLTYP	= 20,4,1,0%; 		! MATCH ALL TYPES 
 LITERAL	FIB$M_ALLTYP	= 1^5 - 1^4; 
 MACRO		FIB$V_ALLNAM	= 20,5,1,0%; 		! MATCH ALL NAMES 
 LITERAL	FIB$M_ALLNAM	= 1^6 - 1^5; 
 				 
 MACRO		FIB$V_WILD	= 20,8,1,0%; 		! WILD CARDS IN FILE NAME 
 LITERAL	FIB$M_WILD	= 1^9 - 1^8; 
 MACRO		FIB$V_NEWVER	= 20,9,1,0%; 		! MAXIMIZE VERSION NUMBER 
 LITERAL	FIB$M_NEWVER	= 1^10 - 1^9; 
 MACRO		FIB$V_SUPERSEDE	= 20,10,1,0%; 	! SUPERSEDE EXISTING FILE 
 LITERAL	FIB$M_SUPERSEDE	= 1^11 - 1^10; 
 MACRO		FIB$V_FINDFID	= 20,11,1,0%; 		! SEARCH FOR FILE ID 
 LITERAL	FIB$M_FINDFID	= 1^12 - 1^11; 
 				 
 MACRO		FIB$V_LOWVER	= 20,14,1,0%; 		! LOWER VERSION OF FILE EXISTS 
 LITERAL	FIB$M_LOWVER	= 1^15 - 1^14; 
 MACRO		FIB$V_HIGHVER	= 20,15,1,0%; 		! HIGHER VERSION OF FILE EXISTS 
 LITERAL	FIB$M_HIGHVER	= 1^16 - 1^15; 
 			
 LITERAL	FIB$C_DIRDATA	= 22; 
 LITERAL	FIB$K_DIRDATA	= 22; 			! ABOVE DATA NECESSARY FOR DIRECTORY OPS 
 						! MARK PARAMETER VARIATION 
 MACRO		FIB$W_EXCTL	= 22,0,16,0%; 		! EXTEND CONTROL 
 			 
 MACRO		FIB$V_ALCON	= 22,0,1,0%; 		! ALLOCATE CONTIGUOUS 
 LITERAL	FIB$M_ALCON	= 1^1 - 1^0; 
 MACRO		FIB$V_ALCONB	= 22,1,1,0%; 		! CONTIGUOUS BEST EFFORT 
 LITERAL	FIB$M_ALCONB	= 1^2 - 1^1; 
 MACRO		FIB$V_FILCON	= 22,2,1,0%; 		! MARK FILE CONTIGUOUS 
 LITERAL	FIB$M_FILCON	= 1^3 - 1^2; 
 MACRO		FIB$V_ALDEF	= 22,3,1,0%; 		! ALLOCATE DEFAULT AMOUNT 
 LITERAL	FIB$M_ALDEF	= 1^4 - 1^3; 
 				 
 MACRO		FIB$V_EXTEND	= 22,7,1,0%; 		! ENABLE EXTENSION 
 LITERAL	FIB$M_EXTEND	= 1^8 - 1^7; 
 MACRO		FIB$V_TRUNC	= 22,8,1,0%; 		! ENABLE TRUNCATION 
 LITERAL	FIB$M_TRUNC	= 1^9 - 1^8; 
 MACRO		FIB$V_NOHDREXT	= 22,9,1,0%; 	! INHIBIT EXTENSION HEADERS 
 LITERAL	FIB$M_NOHDREXT	= 1^10 - 1^9; 
 MACRO		FIB$V_MARKBAD	= 22,10,1,0%; 		! MARK BLOCKS BAD 
 LITERAL	FIB$M_MARKBAD	= 1^11 - 1^10; 
 			
 						! MARK PARAMETER VARIATION 
 MACRO		FIB$L_EXSZ	= 24,0,32,0%; 			! EXTEND SIZE 
 MACRO		FIB$L_EXVBN	= 28,0,32,0%; 			! EXTENSION VBN 
 LITERAL	FIB$C_EXTDATA	= 32; 
 LITERAL	FIB$K_EXTDATA	= 32; 			! ABOVE NECESSARY FOR BASIC FILE EXTENSION 
 MACRO		FIB$B_ALOPTS	= 32,0,8,0%; 		! ALLOCATION OPTIONS 
 			 
 MACRO		FIB$V_EXACT	= 32,0,1,0%; 		! EXACT PLACEMENT REQUIRED 
 LITERAL	FIB$M_EXACT	= 1^1 - 1^0; 
 MACRO		FIB$V_ONCYL	= 32,1,1,0%; 		! PUT ALLOCATION ON ONE CYLINDER 
 LITERAL	FIB$M_ONCYL	= 1^2 - 1^1; 
 			
 MACRO		FIB$B_ALALIGN	= 33,0,8,0%; 		! ALLOCATION ALIGNMENT 
 LITERAL	FIB$C_CYL	= 1; 			! CYLINDER ADDRESS SPECIFIED 
 LITERAL	FIB$C_LBN	= 2; 			! LBN SPECIFIED 
 LITERAL	FIB$C_VBN	= 3; 			! PROXIMATE VBN SPECIFIED 
 LITERAL	FIB$C_RFI	= 4; 			! RELATED FILE ID SPECIFIED 
 MACRO		FIB$W_ALLOC	= 34,0,0,0%; 		! ALLOCATION LOCATION 
 LITERAL	FIB$S_ALLOC	= 10; 
 MACRO		FIB$W_LOC_FID	= 34,0,0,0%; 	! RELATED FILE ID 
 LITERAL	FIB$S_LOC_FID	= 6; 
 MACRO		FIB$W_LOC_NUM	= 34,0,16,0%; 	! RELATED FILE NUMBER 
 MACRO		FIB$W_LOC_SEQ	= 36,0,16,0%; 	! FILE SEQUENCE NUMBER 
 MACRO		FIB$W_LOC_RVN	= 38,0,16,0%; 	! RELATED RVN 
 MACRO		FIB$B_LOC_RVN	= 38,0,8,0%; 	! SHORT FORM RVN 
 MACRO		FIB$B_LOC_NMX	= 39,0,8,0%; 	! EXTENDED FILE NUMBER 
 MACRO		FIB$L_LOC_ADDR	= 40,0,32,0%; 		! LOCATION ADDRESS (VBN, LBN, CYL) 
 LITERAL	FIB$C_ALCDATA	= 44; 
 LITERAL	FIB$K_ALCDATA	= 44; 			! ABOVE DATA NECESSARY FOR PLACEMENT 
 LITERAL	FIB$C_LENGTH	= 44; 
 LITERAL	FIB$K_LENGTH	= 44; 	 
  
 						! START OF ACP CONTROL PARAMETERS 
 MACRO		FIB$W_CNTRLFUNC	= 22,0,16,0%; 		! ACP CONTROL FUNCTION 
 ! DEFINE ACP CONTROL FUNCTION CODES 
 ! 
 LITERAL	
 $EQULST (FIB$C_,GBL,1,1  
 	,(REWINDVOL,) 		! REWIND VOLUME SET 
 	,(POSEND,) 			! POSITION TO END OF VOLUME SET 
 	,(NEXTVOL,) 			! FORCE NEXT VOLUME 
 	,(SPACE,) 			! SPACE MAGNETIC TAPE 
 	,(ILLEGAL,) 			! 
 	,(REWINDFIL,) 		! REWIND FILE 
 	); 
 MACRO		FIB$L_CNTRLVAL	= 24,0,32,0%; 		! ACP CONTROL FUNCTION VALUE PARAMETER 
  
  
 LITERAL	FIB$C_MTALEN	= 28; 
 LITERAL	FIB$K_MTALEN	= 28; 			! LENGTH OF MTAACP DATA 
  

  
 ! 
 ! STRUCTURE OF A FILE ID (FID) 
 ! 
  
 !...$FIDDEF	
  
 MACRO		FID$W_NUM	= 0,0,16,0%; 			! FILE NUMBER 
 MACRO		FID$W_SEQ	= 2,0,16,0%; 			! FILE SEQUENCE NUMBER 
 MACRO		FID$W_RVN	= 4,0,16,0%; 			! RELATIVE VOLUME NUMBER 
 MACRO		FID$B_RVN	= 4,0,8,0%; 		! BYTE FORM OF RVN 
 MACRO		FID$B_NMX	= 5,0,8,0%; 		! FILE NUMBER EXTENSION 
 LITERAL	FID$C_LENGTH	= 6; 
 LITERAL	FID$K_LENGTH	= 6; 	 
  

  
 !+ 
 ! I/O FUNCTION CODE DEFINITIONS 
 !- 
  
 !...$IODEF	
  
 ! 
 ! *** START PHYSICAL I/O FUNCTION CODES *** 
 ! 
  
 LITERAL	
 $EQULST (IO$_,GBL,0,1  
 	,(NOP,0) 				!NO OPERATION 
 	,(UNLOAD,1) 			!UNLOAD DRIVE 
 	,(SEEK,2) 				!SEEK CYLINDER 
 	,(SPACEFILE,2) 			!SPACE FILES 
 	,(RECAL,3) 				!RECALIBRATE DRIVE 
 	,(DRVCLR,4) 			!DRIVE CLEAR 
 	,(RELEASE,5) 			!RELEASE PORT 
 	,(OFFSET,6) 			!OFFSET READ HEADS 
 	,(ERASETAPE,6) 			!ERASE TAPE 
 	,(RETCENTER,7) 			!RETURN TO CENTERLINE 
 	,(PACKACK,8) 			!PACK ACKNOWLEDGE 
 	,(SEARCH,9) 			!SEARCH FOR SECTOR 
 	,(SPACERECORD,9) 			!SPACE RECORDS 
 	,(WRITECHECK,10) 			!WRITE CHECK DATA 
 	,(WRITEPBLK,11) 			!WRITE PHYSICAL BLOCK 
 	,(READPBLK,12) 			!READ PHYSICAL BLOCK 
 	,(WRITEHEAD,13) 			!WRITE HEADER AND DATA 
 	,(READHEAD,14) 			!READ HEADER AND DATA 
 	,(WRITETRACKD,15) 			!WRITE TRACK DATA 
 	,(READTRACKD,16) 			!READ TRACK DATA 
 	,(WRITECHECKH,24) 			!WRITE CHECK HEADER AND DATA 
 	,(READPRESET,25) 			!READIN PRESET 
 	,(STARTSPNDL,25) 			!START SPINDLE 
 	,(SETCHAR,26) 			!SET CHARACTERISTICS 
 	,(SENSECHAR,27) 			!SENSE TAPE CHARACTERISTICS 
 	,(WRITEMARK,28) 			!WRITE TAPE MARK 
 	,(DIAGNOSE,29) 			!DIAGNOSE 
 	,(PHYSICAL,31) 			!HIGHEST PHYSICAL I/O FUNCTION CODE 
 	); 
  
 ! 
 ! *** START LOGICAL I/O FUNCTION CODES *** 
 ! 
  
 LITERAL	
 $EQULST (IO$_,GBL,0,1  
 	,(WRITELBLK,32) 			!WRITE LOGICAL BLOCK 
 	,(READLBLK,33) 			!READ LOGICAL BLOCK 
 	,(REWINDOFF,34) 			!REWIND AND SET OFFLINE 
 	,(SETMODE,35) 			!SET MODE 
 	,(REWIND,36) 			!REWIND TAPE 
 	,(SKIPFILE,37) 			!SKIP FILES 
 	,(SKIPRECORD,38) 			!SKIP RECORDS 
 	,(SENSEMODE,39) 			!SENSE TAPE MODE 
 	,(WRITEOF,40) 			!WRITE END OF FILE 
 	,(LOGICAL,47) 			!HIGHEST LOGICAL I/O FUNCTION CODE 
 	); 
  
 ! 
 ! *** START VIRTUAL I/O FUNCTION CODES 
 ! 
  
 LITERAL	
 $EQULST (IO$_,GBL,0,1  
 	,(WRITEVBLK,48) 			!WRITE VIRTUAL BLOCK 
 	,(READVBLK,49) 			!READ VIRTUAL BLOCK 
 	,(ACCESS,50) 			!ACCESS FILE 
 	,(CREATE,51) 			!CREATE FILE 
 	,(DEACCESS,52) 			!DEACCESS FILE 
 	,(DELETE,53) 			!DELETE FILE 
 	,(MODIFY,54) 			!MODIFY FILE 
 	,(READPROMPT,55) 			!READ TERMINAL WITH PROMPT 
 	,(ACPCONTROL,56) 			!MISCELLANEOUS ACP CONTROL 
 	,(MOUNT,57) 			!MOUNT VOLUME 
 	,(VIRTUAL,63) 			!HIGHEST VIRTUAL I/O FUNCTION 
 	); 
  
 ! 
 ! FUNCTION MODIFIER BIT DEFINITIONS 
 ! 
  
 							! MODIFIER BIT DEFINITIONS 
 MACRO		IO$V_FCODE	= 0,0,6,0%; 		! FUNCTION CODE FIELD 
 LITERAL	IO$M_FCODE	= 1^6 - 1^0; 
 							! RESERVED BITS 
 MACRO		IO$V_INHERLOG	= 0,11,1,0%; 		! INHIBIT ERROR LOGGING 
 LITERAL	IO$M_INHERLOG	= 1^12 - 1^11; 
 MACRO		IO$V_INHSEEK	= 0,12,1,0%; 		! INHIBIT IMPLIED SEEK ON PHYSICAL FUNCTIONS 
 LITERAL	IO$M_INHSEEK	= 1^13 - 1^12; 
 							! RESERVED BIT 
 MACRO		IO$V_DATACHECK	= 0,14,1,0%; 		! WRITE CHECK DATA AFTER TRANSFER 
 LITERAL	IO$M_DATACHECK	= 1^15 - 1^14; 
 MACRO		IO$V_INHRETRY	= 0,15,1,0%; 		! INHIBIT ERROR RETRY 
 LITERAL	IO$M_INHRETRY	= 1^16 - 1^15; 
 			
  
 							!DR DRIVER FUNCTION MODIFIER BITS 
 							! FUNCTION CODE 
 MACRO		IO$V_COMMOD	= 0,6,1,0%; 		! DIAGNOSTIC COMMAND MODIFIER 
 LITERAL	IO$M_COMMOD	= 1^7 - 1^6; 
 			
  
 							!MAGTAPE FUNCTION MODIFIER BITS 
 							! FUNCTION CODE 
 MACRO		IO$V_REVERSE	= 0,6,1,0%; 		! REVERSE OPERATION 
 LITERAL	IO$M_REVERSE	= 1^7 - 1^6; 
 MACRO		IO$V_NOWAIT	= 0,7,1,0%; 		! NO WAIT FOR REWIND TO COMPLETE 
 LITERAL	IO$M_NOWAIT	= 1^8 - 1^7; 
 MACRO		IO$V_INTSKIP	= 0,8,1,0%; 		! INTERNAL SKIP RECORD FUNCTION 
 LITERAL	IO$M_INTSKIP	= 1^9 - 1^8; 
 							! RESERVED BITS 
 MACRO		IO$V_INHEXTGAP	= 0,12,1,0%; 		! INHIBIT EXTENDED INTERRRECORD GAP 
 LITERAL	IO$M_INHEXTGAP	= 1^13 - 1^12; 
 			
 							!ACP FUNCTION MODIFIER BITS 
 							!FUNCTION CODE 
 MACRO		IO$V_ACCESS	= 0,6,1,0%; 		! ACCESS FILE 
 LITERAL	IO$M_ACCESS	= 1^7 - 1^6; 
 MACRO		IO$V_CREATE	= 0,7,1,0%; 		! CREATE FILE 
 LITERAL	IO$M_CREATE	= 1^8 - 1^7; 
 MACRO		IO$V_DELETE	= 0,8,1,0%; 		! DELETE FILE 
 LITERAL	IO$M_DELETE	= 1^9 - 1^8; 
 MACRO		IO$V_MOUNT	= 0,9,1,0%; 		! MOUNT VOLUME 
 LITERAL	IO$M_MOUNT	= 1^10 - 1^9; 
 MACRO		IO$V_DMOUNT	= 0,10,1,0%; 		! DISMOUNT VOLUME 
 LITERAL	IO$M_DMOUNT	= 1^11 - 1^10; 
 			
  
 							!CARD READER MODIFIER BITS 
 							! FUNCTION CODE 
 MACRO		IO$V_BINARY	= 0,6,1,0%; 		! BINARY READ 
 LITERAL	IO$M_BINARY	= 1^7 - 1^6; 
 MACRO		IO$V_PACKED	= 0,7,1,0%; 		! PACKED READ 
 LITERAL	IO$M_PACKED	= 1^8 - 1^7; 
 						! 
  
 							!MAILBOX MODIFIER BITS 
 							!FUNCTION CODE 
 MACRO		IO$V_NOW	= 0,6,1,0%; 			!DO NOT WAIT FOR OPERATION COMPLETE 
 LITERAL	IO$M_NOW	= 1^7 - 1^6; 
 MACRO		IO$V_READATTN	= 0,7,1,0%; 		!REQUEST AST ON WAITING READER 
 LITERAL	IO$M_READATTN	= 1^8 - 1^7; 
 MACRO		IO$V_WRTATTN	= 0,8,1,0%; 		!REQUEST AST ON WAITING WRITER 
 LITERAL	IO$M_WRTATTN	= 1^9 - 1^8; 
 			
  
 							!TERMINAL READ FUNCTION MODIFIERS 
 							!FUNCTION CODE 
 MACRO		IO$V_NOECHO	= 0,6,1,0%; 		!NOECHO 
 LITERAL	IO$M_NOECHO	= 1^7 - 1^6; 
 MACRO		IO$V_TIMED	= 0,7,1,0%; 		!TIMED 
 LITERAL	IO$M_TIMED	= 1^8 - 1^7; 
 MACRO		IO$V_CVTLOW	= 0,8,1,0%; 		!CONVERT LOWER CASE 
 LITERAL	IO$M_CVTLOW	= 1^9 - 1^8; 
 MACRO		IO$V_NOFILTR	= 0,9,1,0%; 		!NO FILTER 
 LITERAL	IO$M_NOFILTR	= 1^10 - 1^9; 
 MACRO		IO$V_DSABLMBX	= 0,10,1,0%; 		!DISABLE MAILBOX 
 LITERAL	IO$M_DSABLMBX	= 1^11 - 1^10; 
 MACRO		IO$V_PURGE	= 0,11,1,0%; 		!PURGE TYPEAHEAD 
 LITERAL	IO$M_PURGE	= 1^12 - 1^11; 
 MACRO		IO$V_TRMNOECHO	= 0,12,1,0%; 		!TERMINATORS ARE NOT ECHOED 
 LITERAL	IO$M_TRMNOECHO	= 1^13 - 1^12; 
 			
  
 							!TERMINAL WRITE FUNCTION MODIFIERS 
 							! FUNCTION CODE 
 MACRO		IO$V_CANCTRLO	= 0,6,1,0%; 		!CANCEL CONTROL O 
 LITERAL	IO$M_CANCTRLO	= 1^7 - 1^6; 
 MACRO		IO$V_ENABLMBX	= 0,7,1,0%; 		!ENABLE MAILBOX 
 LITERAL	IO$M_ENABLMBX	= 1^8 - 1^7; 
 MACRO		IO$V_NOFORMAT	= 0,8,1,0%; 		!DO NOT FORMAT OUTPUT 
 LITERAL	IO$M_NOFORMAT	= 1^9 - 1^8; 
 			
  
 							!TERMINAL SETMODE SUBFUNCTIONS 
 							! RESERVE FUNCTION CODES 
 MACRO		IO$V_CTRLYAST	= 0,7,1,0%; 		!SET CONTROL Y AST 
 LITERAL	IO$M_CTRLYAST	= 1^8 - 1^7; 
 MACRO		IO$V_CTRLCAST	= 0,8,1,0%; 		!SET CONTROL C 
 LITERAL	IO$M_CTRLCAST	= 1^9 - 1^8; 
 MACRO		IO$V_HANGUP	= 0,9,1,0%; 		!SET MODE AND HANG UP LINE 
 LITERAL	IO$M_HANGUP	= 1^10 - 1^9; 
 			
 							! DMC/COMM DRIVER SETMODE SUBFUNCTIONS 
 							! 
 MACRO		IO$V_STARTUP	= 0,6,1,0%; 		! START PROTOCOL 
 LITERAL	IO$M_STARTUP	= 1^7 - 1^6; 
 MACRO		IO$V_SHUTDOWN	= 0,7,1,0%; 		! STOP PROTOCOL 
 LITERAL	IO$M_SHUTDOWN	= 1^8 - 1^7; 
 MACRO		IO$V_ATTNAST	= 0,8,1,0%; 		! ATTENTION AST 
 LITERAL	IO$M_ATTNAST	= 1^9 - 1^8; 
 			
 							! NETWORK WRITE VIRTUAL MODIFIER BITS 
 							! FUNCTION CODE 
 MACRO		IO$V_INTERRUPT	= 0,6,1,0%; 		! INTERRUPT MSG 
 LITERAL	IO$M_INTERRUPT	= 1^7 - 1^6; 
 			
 							! NETWORK ACCESS/DEACCESS MODIFIER BITS 
 							! FUNCTION CODE 
 MACRO		IO$V_ABORT	= 0,8,1,0%; 		! DISCONNECT ABORT/CONNECT REJECT 
 LITERAL	IO$M_ABORT	= 1^9 - 1^8; 
 MACRO		IO$V_SYNCH	= 0,9,1,0%; 		! SYNCHRONOUS DISCONNECT 
 LITERAL	IO$M_SYNCH	= 1^10 - 1^9; 
 			

  
 !+ 
 ! 
 ! Get Job Process Information Data Identifier Definitions 
 ! 
 ! **** NOTE **** 
 ! 
 !	New items must always be added to the END of each item list 
 !	(preceeding the ENDlistname item) so that users will not have 
 !	to relink. 
 !- 
  
  
 !...$JPIDEF	
  
  
 LITERAL	
 $EQULST (JPI$C_,GBL,0,1 				! DEFINE TABLE NUMBERS 
  
 					! STRUCTURE CODES MUST START AT 1 
 	,(ADRTYPE,1) 			! ITEM IS ADDRESS OF DATA 
 	,(CTLTYPE,2) 			! ITEM IS IN CONTROL REGION 
 	,(PCBTYPE,3) 			! ITEM IN PCB 
 	,(PHDTYPE,4) 			! ITEM IN PHD 
 	,(LISTEND,0) 			! DEFINE ITMLST TERMINATOR 
 	); 
  
 LITERAL	
 $EQULST (JPI$_,GBL,JPI$C_PCBTYPE^8,1 		! ITEM IDENTIFIERS FOR PCB 
  
  
 	,(ASTACT,) 	 			! ACCESS MODES WITH ACTIVE ASTS 
 	,(ASTEN,) 	 			! ACCESS MODES WITH ASTS ENABLED 
 	,(PRI,) 	 			! CURRENT PROCESS PRIORITY 
 	,(OWNER,) 	 			! PID OF CREATOR PROCESS 
 	,(UIC,) 	 			! UIC OF PROCESS 
 	,(STS,) 				! PROCESS STATUS 
 	,(STATE,) 				! PROCESS STATE 
 	,(MEM,) 	 			! MEMBER FIELD OF UIC 
 	,(GRP,) 	 			! GROUP FIELD OF UIC 
 	,(PRIB,) 	 			! PROCESS BASE PRIORITY 
 	,(APTCNT,) 	 			! ACTIVE PAGE TABLE COUNT 
 	,(TMBU,) 				! TERMINATION MAILBOX UNIT 
 	,(GPGCNT,) 	 			! GLOBAL PAGE COUNT IN WORKING SET 
 	,(PPGCNT,) 	 			! PROCESS PAGE COUNT IN WORKING SET 
 	,(ASTCNT,) 	 			! AST COUNT REMAINING 
 	,(BIOCNT,) 	 			! BUFFERED I/O COUNT REMAINING 
 	,(BIOLM,) 	 			! BUFFERED I/O LIMIT 
 	,(BYTCNT,) 	 			! BYTE COUNT REMAINING FOR BUFFERED I/O 
 	,(DIOCNT,) 	 			! DIRECT I/O COUNT REMAINING 
 	,(DIOLM,) 	 			! DIRECT I/O COUNT LIMIT 
 	,(FILCNT,) 	 			! COUNT REMAINING OF OPEN FILES 
 	,(TQCNT,) 	 			! COUNT REMAINING OF TIMER QUEUE ENTRIES 
 	,(EFWM,) 				! EVENT FLAG WAIT MASK 
 	,(EFCS,) 				! LOCAL EVENT FLAGS 0-31 
 	,(EFCU,) 				! LOCAL EVENT FLAGS 32-63 
 	,(PID,) 	 			! PROCESS IDENTIFICATION 
 	,(BYTLM,) 	 			! BUFFERED I/0 BYTE COUNT LIMIT 
 	,(PRCCNT,) 	 			! SUBPROCESS COUNT 
 	,(PRCNAM,) 	 			! PROCESS NAME 
 	,(LASTPCB,) 				! MAX INDEX IN PCB TABLE 
 	); 
  
 LITERAL	
 $EQULST (JPI$_,GBL,JPI$C_PHDTYPE^8,1 		! ITEM IDENTIFIERS FOR PHD 
  
 	,(CURPRIV,) 				! CURRENT PROCESS PRIVILEGE MASK 
 	,(WSAUTH,) 	 			! AUTHORIZED WORKING SET SIZE 
 	,(WSQUOTA,) 	 		! QUOTA ON WORKING SET SIZE 
 	,(DFWSCNT,) 	 		! DEFAULT WORKING SET SIZE 
 	,(FREP0VA,) 	 		! FIRST FREE VIRTUAL ADDR. AT END OF P0 SPACE 
 	,(FREP1VA,) 	 		! FIRST FREE ADDR. AT END OF P1 SPACE 
 	,(DFPFC,) 	 			! DEFAULT PAGE FAULT CLUSTER 
 	,(CPUTIM,) 	 			! ACCUMULATED CPU TIME 
 	,(PRCLM,) 	 			! SUBPROCESS QUOTA 
 	,(ASTLM,) 				! AST LIMIT 
 	,(PAGEFLTS,) 			! COUNT OF PAGE FAULTS 
 	,(DIRIO,) 				! PROCESS DIRECT I/O OPERATIONS 
 	,(BUFIO,) 				! PROCESS BUFFERED I/O OPERATIONS 
 	,(CPULIM,) 				! LIMIT ON CPUTIM FOR PROCESS 
 	,(PGFLQUOTA,) 	 		! MAX. VIRTUAL PAGE COUNT 
 	,(FILLM,) 	 			! OPEN FILE LIMIT 
 	,(TQLM,) 	 			! TIMER QUEUE LIMIT 
 	,(WSSIZE,) 				! CURRENT WORKING SET SIZE 
 	,(LASTPHD,) 				! MAX INDEX IN PROCESS HEADER 
 	); 
  
 	 
 LITERAL	
 $EQULST (JPI$_,GBL,JPI$C_CTLTYPE^8,1 		! ITEM IDENTIFIERS FOR CONTROL REGION 
  
 	,(VIRTPEAK,) 			! PEAK VIRTUAL SIZE 
 	,(WSPEAK,) 				! PEAK WORKING SET SIZE 
 	,(USERNAME,) 			! USERNAME STRING 
 	,(ACCOUNT,) 				! ACCOUNT NAME STRING 
 	,(PROCPRIV,) 			! PROCESS PRIVILEGE MASK 
 	,(VOLUMES,) 				! VOLUMES MOUNTED 
 	,(LOGINTIM,) 			! TIME OF LOGIN OR PROCESS CREATION 
 	,(LASTCTL,) 				! MAX INDEX IN CONTROL REGION 
 	); 
  
  
 LITERAL	
 $EQULST (JPI$_,GBL,JPI$C_ADRTYPE^8,1 		! ITEM IDENTIFIERS FOR ADDRESS DATA 
  
 	,(EXCVEC,) 				! ADDRESS OF "EXCEPTION VECTOR" VECTOR 
 	,(FINALEXC,) 			! ADDRESS OF LAST CHANCE EXCEPTION VECTORS 
 	,(LASTADR,) 				! MAX INDEX IN ADDRESS TABLE 
 	); 
  

 !+ 
 ! LINE PRINTER CHARACTERISTICS DEFINITIONS 
 !- 
 !...$LPDEF	
  
 							!LINE PRINTER CHARACTERISTICS 
 MACRO		LP$V_CR	= 0,0,1,0%; 			! CARRIAGE RETURN NEEDED 
 LITERAL	LP$M_CR	= 1^1 - 1^0; 
 MACRO		LP$V_MECHFORM	= 0,1,1,0%; 		! MECHANICAL FORM FEED 
 LITERAL	LP$M_MECHFORM	= 1^2 - 1^1; 
 							! SPARE UNUSED BITS 
 MACRO		LP$V_LOWER	= 0,7,1,0%; 		! PRINTER HAS LOWER CASE 
 LITERAL	LP$M_LOWER	= 1^8 - 1^7; 
 							! SPARE UNUSED BITS 
 MACRO		LP$V_PAGE_L	= 0,24,8,0%; 		! PAGE LENGTH 
 LITERAL	LP$M_PAGE_L	= 1^32 - 1^24; 
 						! 
  
 LITERAL	
 $EQULST (LP$_,GBL,0,1  
 	,(LP11,1) 	 
 	,(LA11,2) 	 
 	,(LA180,3) 	 
 	); 
  

  
 !+ 
 ! 
 ! SYSTEM WIDE MAILBOX MESSAGE TYPES 
 ! 
 !- 
 !...$MSGDEF			! DEFINE SYSTEM MAILBOX MESSAGES 
 LITERAL	
 $EQULST (MSG$_,GBL,1,1 			! DEFINE CODES AS CONSTANTS 
 	,(TRMUNSOLIC,) 			! UNSOLICITED TERMINAL DATA 
 	,(CRUNSOLIC,) 			! UNSOLICTED CARD READER DATA 
 	,(DELPROC,) 				! DELETE PROCESS 
 	,(SNDSMB,) 				! SEND TO SYMBIONT MANAGER 
 	,(DEVOFFLIN,) 			! DEVICE OFFLINE 
 	,(TRMHANGUP,) 			! TERMINAL HANG UP 
 	,(DEVONLIN,) 			! DEVICE ONLINE 
 	,(OPRQST,) 				! OPERATOR REQUEST *** OVERLAPPED CODE *** 
 	,(OPREPLY,) 				! OPERATOR REPLY *** OVERLAPPED CODE *** 
 	); 
 LITERAL	
 $EQULST (MSG$_,GBL,8,1 			! DEFINE SYMBIONT RESPONSE MESSAGES 
 	,(SMBINI,) 				! SYMBIONT HAS INITED 
 	,(SMBDON,) 				! SYMBIONT FINISHED 
 	,(SNDACC,) 				! SEND MESSAGE TO ACCOUNTING MANAGER 
 	,(XM_DATAVL,) 			! DMC UNSOLICITED DATA 
 	,(XM_SHUTDN,) 			! DMC LINE DOWN 
 	,(XM_ATTN,) 				! DMC ATTENTION MESSAGE 
 	); 
 LITERAL	
 $EQULST (MSG$_,GBL,16,1 			! SYMBIONT COMMAND MESSAGES 
 	,(INIOPR,) 				! INITIATE PRINTING A FILE 
 	,(ABOOPR,) 				! ABORT PRINTING A FILE 
 	,(SUSOPR,) 				! PAUSE PRINTING THE FILE 
 	,(RESOPR,) 				! RESUME PRINTING THE FILE 
 	,(DELSMB,) 				! SYMBIONT SHOULD DELETE ITSELF 
 	); 
 LITERAL	
 $EQULST (MSG$_,GBL,32,1 			! 
 	,(SMBRSP,) 				! SYMBIONT MANAGER RESPONSE 
 	,(ACCRSP,) 				! ACCOUNTING MANAGER RESPONSE 
 	); 
 LITERAL	
 $EQULST (MSG$_,GBL,40,1 			! FILE ACP MESSAGES 
 	,(SCANBAD,) 				! SCAN FILE FOR BAD BLOCKS 
 	,(SCANRSP,) 				! RESPONSE FROM FILE SCANNER 
 	); 
 LITERAL	
 $EQULST (MSG$_,GBL,48,1 			! NETWORK ATTENTION CODES 
 	,(ABORT,) 				! PARTNER ABORTED LINK 
 	,(CONFIRM,) 				! CONNECT CONFIRM 
 	,(CONNECT,) 				! INBOUND CONNECT INITIATE 
 	,(DISCON,) 				! PARTNER DISCONNECTED - HANGUP 
 	,(EXIT,) 				! PARTNER EXITED PREMATURELY 
 	,(INTMSG,) 				! INTERRUPT MESSAGE - UNSOLICITED DATA 
 	,(PATHLOST,) 			! NFW - PATH LOST TO PARTNER 
 	,(PROTOCOL,) 			! PROTOCOL ERROR 
 	,(REJECT,) 				! CONNECT REJECT 
 	,(THIRDPARTY,) 			! THIRD PARTY DISCONNECT 
 	,(TIMEOUT,) 				! CONNECT TIMEOUT 
 	); 

  
 !+ 
 ! MAGTAPE STATUS BITS 
 !- 
  
 !...$MTDEF	
  
 							! MAGTAPE DEVICE DEPENDENT DEFINITIONS 
 							! SPARE UNUSED BITS 
 MACRO		MT$V_PARITY	= 0,3,1,0%; 		! PARITY SELECT (0=ODD, 1=EVEN) 
 LITERAL	MT$M_PARITY	= 1^4 - 1^3; 
 MACRO		MT$V_FORMAT	= 0,4,4,0%; 		! RECORDING FORMAT 
 LITERAL	MT$M_FORMAT	= 1^8 - 1^4; 
 MACRO		MT$V_DENSITY	= 0,8,5,0%; 		! RECORDING DENSITY AND METHOD 
 LITERAL	MT$M_DENSITY	= 1^13 - 1^8; 
 							! SPARE UNUSED BITS 
 MACRO		MT$V_BOT	= 0,16,1,0%; 			! AT BEGINNING OF TAPE 
 LITERAL	MT$M_BOT	= 1^17 - 1^16; 
 MACRO		MT$V_EOF	= 0,17,1,0%; 			! AT END OF FILE 
 LITERAL	MT$M_EOF	= 1^18 - 1^17; 
 MACRO		MT$V_EOT	= 0,18,1,0%; 			! AT END OF TAPE 
 LITERAL	MT$M_EOT	= 1^19 - 1^18; 
 MACRO		MT$V_HWL	= 0,19,1,0%; 			! TAPE IS HARDWARE WRITELOCKED 
 LITERAL	MT$M_HWL	= 1^20 - 1^19; 
 MACRO		MT$V_LOST	= 0,20,1,0%; 		! TAPE POSITION LOST 
 LITERAL	MT$M_LOST	= 1^21 - 1^20; 
 			
  
 ! 
 ! RECORDING FORMAT DEFINTIONS 
 ! 
  
 LITERAL	
 $EQULST (MT$K_,GBL,0,1 				! 
 	,(DEFAULT,0) 			! DEFAULT FORMAT 
 	,(NORMAL11,12) 			! PDP-11 NORMAL 
 	,(CORDMP11,13) 			! PDP-11 CORE DUMP 
 	,(NORMAL15,14) 			! PDP-15 NORMAL 
 	); 
  
 ! 
 ! RECORDING DENTITY AND METHOD DEFINITIONS 
 ! 
  
 LITERAL	
 $EQULST (MT$K_,GBL,0,1 				! 
 !		DEFAULT,0		! DEFAULT DENSITY (SAME AS ABOVE) 
 	,(NRZI_800,3) 			! NRZI 800 BPI 
 	,(PE_1600,4) 			! PE 1600 BPI 
 	); 
  

  
  
 !+ 
 ! OPERATOR COMMUNICATIONS MESSAGE TYPES AND VALUES 
 !- 
 !...$OPRDEF	
 LITERAL	
 $EQULST (OPR$_,GBL,1,1 		! OPERATOR MESSAGE TYPES 
 	,(TERMENABL,) 		! ENABLE TERMINAL 
 	,(LOGINIT,) 			! INITIALIZE THE LOG 
 	,(OPRQST,) 			! OPERATOR REQUEST 
 	,(OPREPLY,) 			! OPERATOR REPLY 
 	); 
 						! OPERATOR NAMES 
 MACRO		OPR$V_CENTRAL	= 0,0,1,0%; 	! 
 LITERAL	OPR$M_CENTRAL	= 1^1 - 1^0; 
 MACRO		OPR$V_PRINTER	= 0,1,1,0%;  
 LITERAL	OPR$M_PRINTER	= 1^2 - 1^1; 
 MACRO		OPR$V_TAPES	= 0,2,1,0%;  
 LITERAL	OPR$M_TAPES	= 1^3 - 1^2; 
 MACRO		OPR$V_DISKS	= 0,3,1,0%;  
 LITERAL	OPR$M_DISKS	= 1^4 - 1^3; 
 MACRO		OPR$V_DEVICES	= 0,4,1,0%;  
 LITERAL	OPR$M_DEVICES	= 1^5 - 1^4; 
 MACRO		OPR$V_USER1	= 0,5,12,0%;  
 LITERAL	OPR$M_USER1	= 1^17 - 1^5; 
 MACRO		OPR$V_USER2	= 0,17,1,0%;  
 LITERAL	OPR$M_USER2	= 1^18 - 1^17; 
 MACRO		OPR$V_USER3	= 0,18,1,0%;  
 LITERAL	OPR$M_USER3	= 1^19 - 1^18; 
 MACRO		OPR$V_USER4	= 0,19,1,0%;  
 LITERAL	OPR$M_USER4	= 1^20 - 1^19; 
 MACRO		OPR$V_USER5	= 0,20,1,0%;  
 LITERAL	OPR$M_USER5	= 1^21 - 1^20; 
 MACRO		OPR$V_USER6	= 0,21,1,0%;  
 LITERAL	OPR$M_USER6	= 1^22 - 1^21; 
 MACRO		OPR$V_USER7	= 0,22,1,0%;  
 LITERAL	OPR$M_USER7	= 1^23 - 1^22; 
 MACRO		OPR$V_USER8	= 0,23,1,0%;  
 LITERAL	OPR$M_USER8	= 1^24 - 1^23; 
 MACRO		OPR$V_USER9	= 0,24,1,0%;  
 LITERAL	OPR$M_USER9	= 1^25 - 1^24; 
 MACRO		OPR$V_USER10	= 0,25,1,0%;  
 LITERAL	OPR$M_USER10	= 1^26 - 1^25; 
 MACRO		OPR$V_USER11	= 0,26,1,0%;  
 LITERAL	OPR$M_USER11	= 1^27 - 1^26; 
 MACRO		OPR$V_USER12	= 0,27,1,0%;  
 LITERAL	OPR$M_USER12	= 1^28 - 1^27; 
 			

  
 !+ 
 ! PRINTER/TERMINAL CARRIAGE CONTROL SPECIFIERS 
 !-- 
 !...$PCCDEF	
 MACRO		PCC$W_FORTRAN	= 0,0,16,0%; 		! FORTRAN FIELD 
 MACRO		PCC$B_PREFIX	= 2,0,8,0%; 		! PREFIX FIELD 
 MACRO		PCC$B_POSTFIX	= 3,0,8,0%; 		! POSTFIX FIELD 
 			 
 MACRO		PCC$V_CHAR	= 3,0,5,0%; 		! CHARACTER FIELD 
 LITERAL	PCC$M_CHAR	= 1^5 - 1^0; 
 				 
 MACRO		PCC$V_EIGHTBIT	= 3,6,1,0%; 		! EIGHTBIT CHARACTER SET 
 LITERAL	PCC$M_EIGHTBIT	= 1^7 - 1^6; 
 MACRO		PCC$V_SINGLE	= 3,7,1,0%; 		! SINGLE CHARACTER 
 LITERAL	PCC$M_SINGLE	= 1^8 - 1^7; 
 			
 			 
 MACRO		PCC$V_LINECNT	= 3,0,7,0%; 		! LINE COUNT FOR NEWLINES 
 LITERAL	PCC$M_LINECNT	= 1^7 - 1^0; 
 			
 LITERAL	
 $EQULST (PCC$_,GBL,0,1 				! FORTRAN CONSTANTS 
 	,(FTN_SINGLE,32) 			! SINGLE SPACE 
 	,(FTN_DOUBLE,48) 			! DOUBLE SPACE 
 	,(FTN_PAGE,49) 			! PAGE SPACE 
 	,(FTN_OVRPRT,43) 			! OVER PRINT 
 	,(FTN_PROMPT,36) 			! PROMPT 
 	); 

  
 !+ 
 ! PROCESS QUOTA LIST CODES 
 !- 
 !...$PQLDEF			! PROCESS QUOTA LIST CODE DEFINITIONS 
 LITERAL	
 $EQULST (PQL$_,GBL,0,1  
 	,(LISTEND,) 					!LIST END CODE (MUST BE FIRST) 
 	,(ASTLM,) 					!AST LIMIT 
 	,(BIOLM,) 					!BUFFERED I/O LIMIT 
 	,(BYTLM,) 					!BYTE LIMIT FOR BUFFERED I/O 
 	,(CPULM,) 					!CPU TIME LIMIT 
 	,(DIOLM,) 					!DIRECT I/O LIMIT	 
 	,(FILLM,) 					!OPEN FILE LIMIT 
 	,(PGFLQUOTA,) 				!PAGING FILE QUOTA 
 	,(PRCLM,) 					!SUB-PROCESS LIMIT 
 	,(TQELM,) 					!TIMER QUEUE ENTRY LIMIT 
 	,(WSQUOTA,) 					!WORKING SET QUOTA 
 	,(WSDEFAULT,) 				!WORKING SET DEFAULT 
 	,(LENGTH,) 					!NUMBER OF QUOTAS (MUST BE LAST) 
 	); 

  
 !+ 
 ! PRIVILEGE BIT DEFINITIONS 
 !- 
  
 !...$PRVDEF	
  
 			 
  ! ***** THE FOLLOWING TWO BITS MUST BE ADJACENT 
 MACRO		PRV$V_CMKRNL	= 0,0,1,0%; 		! MAY CHANGE MODE TO KERNEL 
 MACRO		PRV$V_CMEXEC	= 0,1,1,0%;  		! MAY CHANGE MODE TO EXEC 
 ! ***** THE PRECEEDING TWO BITS MUST BE ADJACENT 
 ! ***** THE FOLLOWING TWO BITS MUST BE ADJACENT 
 MACRO		PRV$V_SYSNAM	= 0,2,1,0%;  		! MAY INSERT IN SYSTEM LOGICAL NAME TABLE 
 MACRO		PRV$V_GRPNAM	= 0,3,1,0%;  		! MAY INSERT IN GROUP LOGICAL NAME TABLE 
 ! ***** THE PRECEEDING TWO BITS MUST BE ADJACENT 
 MACRO		PRV$V_ALLSPOOL	= 0,4,1,0%; 	!MAY ALLOCATE SPOOLED DEVICE 
 MACRO		PRV$V_DETACH	= 0,5,1,0%;  		! MAY CREATE DETACHED PROCESSES 
 MACRO		PRV$V_DIAGNOSE	= 0,6,1,0%; 	! MAY DIAGNOSE DEVICES 
 MACRO		PRV$V_LOG_IO	= 0,7,1,0%; 		! MAY DO LOGICAL I/O 
 MACRO		PRV$V_GROUP	= 0,8,1,0%; 		! MAY AFFECT OTHER PROCESSES IN SAME GROUP 
 MACRO		PRV$V_NOACNT	= 0,9,1,0%;  		! MAY SUPPRESS ACCOUNTING MESSAGE 
 MACRO		PRV$V_PRMCEB	= 0,10,1,0%;  		! MAY CREATE PERMANENT COMMON EVENT CLUSTERS 
 MACRO		PRV$V_PRMMBX	= 0,11,1,0%;  		! MAY CREATE PERMANENT MAILBOX 
 MACRO		PRV$V_PSWAPM	= 0,12,1,0%;  		! MAY CHANGE PROCESS SWAP MODE 
 MACRO		PRV$V_SETPRI	= 0,13,1,0%;  		! MAY SET ANY PRIORITY VALUE 
 MACRO		PRV$V_SETPRV	= 0,14,1,0%;  		! MAY SET ANY PRIVILEGE BITS 
 MACRO		PRV$V_TMPMBX	= 0,15,1,0%;  		! MAY CREATE TEMPORARY MAILBOX 
 MACRO		PRV$V_WORLD	= 0,16,1,0%; 		! MAY AFFECT OTHER PROCESSES IN THE WORLD 
 MACRO		PRV$V_MOUNT	= 0,17,1,0%; 		! MAY EXECUTE MOUNT ACP FUNCTIONS 
 MACRO		PRV$V_OPER	= 0,18,1,0%; 		! OPERATOR PRIVILEGE 
 MACRO		PRV$V_EXQUOTA	= 0,19,1,0%; 		! MAY EXCEED QUOTAS 
 MACRO		PRV$V_NETMBX	= 0,20,1,0%; 		! MAY CREATE NETWORK DEVICE 
 MACRO		PRV$V_VOLPRO	= 0,21,1,0%; 		! MAY OVERRIDE VOLUME PROTECTION 
 MACRO		PRV$V_PHY_IO	= 0,22,1,0%; 		! MAY DO PHYSICAL I/O 
 MACRO		PRV$V_BUGCHK	= 0,23,1,0%; 		! MAY MAKE BUG CHECK ERROR LOG ENTRIES 
 MACRO		PRV$V_PRMGBL	= 0,24,1,0%; 		! MAY CREATE PERMANENT GLOBAL SECTIONS 
 MACRO		PRV$V_SYSGBL	= 0,25,1,0%; 		! MAY CREATE SYSTEM WIDE GLOBAL SECTIONS 
 			

  
 ! 
 ! MACROS TO DEFINE SYSTEM SERVICE FAILURE AND STATUS CODES. 
 ! 
 ! 
 !	$STRUCT	SS 
 ! 
 ! THIS STRUCTURE IS NOW CONTAINED IN 'SSMSG.MDL' 
  
  
 !+ 
 ! Define 32-bit VAX-11 error code longword fields 
 ! Changed to agree with Handbook - TNH 26-OCT-77 - CHANGE M 1 to P 1 
 ! Changed to agree with new status value  W. H. Brown 18-NOV-1977 
 !- 
  
 !...$STSDEF	
  
 							! Mark position for defining sub-fields below 
 							! Define top level fields 
  
 MACRO		STS$V_SEVERITY	= 0,0,3,0%; 			! severity code 
 LITERAL	STS$M_SEVERITY	= 1^3 - 1^0; 
 MACRO		STS$V_COND_ID	= 0,3,25,0%; 			! condition id 
 LITERAL	STS$M_COND_ID	= 1^28 - 1^3; 
 MACRO		STS$V_CONTROL	= 0,28,4,0%; 			! control bits 
 LITERAL	STS$M_CONTROL	= 1^32 - 1^28; 
 						! End of top level fields 
  
 							! Position back to beg of structure 
 						! Define sub-fields of condition id 
 MACRO		STS$V_SUCCESS	= 0,0,1,0%; 			! Success 
 LITERAL	STS$M_SUCCESS	= 1^1 - 1^0; 
 								! skip severity field 
 MACRO		STS$V_MSG_NO	= 0,3,13,0%; 			! Message number 
 LITERAL	STS$M_MSG_NO	= 1^16 - 1^3; 
 						! End of message number field 
  
 						! Postion back to beginning of structure 
 						! Define sub-fields of message number and fac. no. 
 							! Skip severity field 
 MACRO		STS$V_CODE	= 0,3,12,0%; 			! code 
 LITERAL	STS$M_CODE	= 1^15 - 1^3; 
 MACRO		STS$V_FAC_SP	= 0,15,1,0%; 		! 1 if facility specific 
 LITERAL	STS$M_FAC_SP	= 1^16 - 1^15; 
 				 
 MACRO		STS$V_CUST_DEF	= 0,27,1,0%; 		! 1 if sub-system is customer (or CSS) defined 
 LITERAL	STS$M_CUST_DEF	= 1^28 - 1^27; 
 MACRO		STS$V_INHIB_MSG	= 0,28,1,0%; 		! 1 if message should not be printed 
 LITERAL	STS$M_INHIB_MSG	= 1^29 - 1^28; 
 							! reserved control bits 
 					! End message number sub-fields 
  
 						! Postion back to beg of structure 
 						! 
 							! Skip message nubmer field 
 MACRO		STS$V_FAC_NO	= 0,16,12,0%; 		! Facility is 12 bits 
 LITERAL	STS$M_FAC_NO	= 1^28 - 1^16; 
 							! Control bits 
 			
  
 !+ 
 ! Define severity codes 
 !- 
  
 LITERAL	STS$K_WARNING	= 0; 			! WARNING 
 LITERAL	STS$K_SUCCESS	= 1; 			! SUCCESSFUL COMPLETION 
 LITERAL	STS$K_ERROR	= 2; 				! ERROR 
 LITERAL	STS$K_INFO	= 3; 				! INFORMATION 
 LITERAL	STS$K_SEVERE	= 4; 			! SEVERE ERROR 
  

  
 ! 
 ! DEFINE TERMINAL SPECIAL SYMBOLS 
 ! 
 !...$TTDEF	
 LITERAL	
 $EQULST (TT$C_,GBL,1,1  
 	,(BAUD_50,) 	
 	,(BAUD_75,) 	
 	,(BAUD_110,) 	
 	,(BAUD_134,) 	
 	,(BAUD_150,) 	
 	,(BAUD_300,) 	
 	,(BAUD_600,) 	
 	,(BAUD_1200,) 	
 	,(BAUD_1800,) 	
 	,(BAUD_2000,) 	
 	,(BAUD_2400,) 	
 	,(BAUD_3600,) 	
 	,(BAUD_4800,) 	
 	,(BAUD_7200,) 	
 	,(BAUD_9600,) 	
 	); 
 LITERAL	
 $EQULST (TT$_,GBL,0,1  
 	,(UNKNOWN,0) 	 
 	,(VT05,1) 	 
 	,(LAX,32) 	 
 	,(LA36,32) 	 
 	,(VT5X,64) 	 
 	,(VT52,64) 	 
 	,(VT55,65) 	 
 	); 
 			 
 MACRO		TT$V_PASSALL	= 0,0,1,0%;  
 LITERAL	TT$M_PASSALL	= 1^1 - 1^0; 
 MACRO		TT$V_NOECHO	= 0,1,1,0%;  
 LITERAL	TT$M_NOECHO	= 1^2 - 1^1; 
 MACRO		TT$V_NOTYPEAHD	= 0,2,1,0%;  
 LITERAL	TT$M_NOTYPEAHD	= 1^3 - 1^2; 
 MACRO		TT$V_ESCAPE	= 0,3,1,0%;  
 LITERAL	TT$M_ESCAPE	= 1^4 - 1^3; 
 MACRO		TT$V_HOSTSYNC	= 0,4,1,0%;  
 LITERAL	TT$M_HOSTSYNC	= 1^5 - 1^4; 
 MACRO		TT$V_TTSYNC	= 0,5,1,0%;  
 LITERAL	TT$M_TTSYNC	= 1^6 - 1^5; 
 MACRO		TT$V_SCRIPT	= 0,6,1,0%;  
 LITERAL	TT$M_SCRIPT	= 1^7 - 1^6; 
 MACRO		TT$V_LOWER	= 0,7,1,0%;  
 LITERAL	TT$M_LOWER	= 1^8 - 1^7; 
 MACRO		TT$V_MECHTAB	= 0,8,1,0%;  
 LITERAL	TT$M_MECHTAB	= 1^9 - 1^8; 
 MACRO		TT$V_WRAP	= 0,9,1,0%;  
 LITERAL	TT$M_WRAP	= 1^10 - 1^9; 
 MACRO		TT$V_CRFILL	= 0,10,1,0%;  
 LITERAL	TT$M_CRFILL	= 1^11 - 1^10; 
 MACRO		TT$V_LFFILL	= 0,11,1,0%;  
 LITERAL	TT$M_LFFILL	= 1^12 - 1^11; 
 MACRO		TT$V_SCOPE	= 0,12,1,0%;  
 LITERAL	TT$M_SCOPE	= 1^13 - 1^12; 
 MACRO		TT$V_REMOTE	= 0,13,1,0%;  
 LITERAL	TT$M_REMOTE	= 1^14 - 1^13; 
 MACRO		TT$V_HOLDSCREEN	= 0,14,1,0%;  
 LITERAL	TT$M_HOLDSCREEN	= 1^15 - 1^14; 
 MACRO		TT$V_EIGHTBIT	= 0,15,1,0%;  
 LITERAL	TT$M_EIGHTBIT	= 1^16 - 1^15; 
 MACRO		TT$V_MBXDSABL	= 0,16,1,0%;  
 LITERAL	TT$M_MBXDSABL	= 1^17 - 1^16; 
 MACRO		TT$V_NOBRDCST	= 0,17,1,0%;  
 LITERAL	TT$M_NOBRDCST	= 1^18 - 1^17; 
 MACRO		TT$V_READSYNC	= 0,18,1,0%;  
 LITERAL	TT$M_READSYNC	= 1^19 - 1^18; 
 				 
 MACRO		TT$V_PAGE	= 0,25,8,0%;  
 LITERAL	TT$M_PAGE	= 1^33 - 1^25; 
 			
 			 
 				 
 MACRO		TT$V_ALTRPAR	= 0,5,1,0%;  
 LITERAL	TT$M_ALTRPAR	= 1^6 - 1^5; 
 MACRO		TT$V_PARITY	= 0,6,1,0%;  
 LITERAL	TT$M_PARITY	= 1^7 - 1^6; 
 MACRO		TT$V_ODD	= 0,7,1,0%;  
 LITERAL	TT$M_ODD	= 1^8 - 1^7; 
 			

  
 !+ 
 ! PROTECTION FIELD DEFINITIONS 
 !- 
  
 !...$PRTDEF	
  
 LITERAL	
 $EQULST (PRT$C_,GBL,0,1  
 	,(NA,  (%B'0000')) 		! NO ACCESS 
 	,(KR,  (%B'0011')) 		! KERNEL READ ONLY 
 	,(KW,  (%B'0010')) 		! KERNEL WRITE 
 	,(ER,  (%B'0111')) 		! EXEC READ ONLY 
 	,(EW,  (%B'0101')) 		! EXEC WRITE 
 	,(SR,  (%B'1011')) 		! SUPER READ ONLY 
 	,(SW,  (%B'1000')) 		! SUPER WRITE 
 	,(UR,  (%B'1111')) 		! USER READ ONLY 
 	,(UW,  (%B'0100')) 		! USER WRITE 
  
 	,(ERKW,(%B'0110')) 		! EXEC READ KERNEL WRITE 
 	,(SRKW,(%B'1010')) 		! SUPER READ KERNEL WRITE 
 	,(SREW,(%B'1001')) 		! SUPER READ EXEC WRITE 
 	,(URKW,(%B'1110')) 		! USER READ KERNEL WRITE 
 	,(UREW,(%B'1101')) 		! USER READ EXEC WRITE 
 	,(URSW,(%B'1100')) 		! USER READ SUPER WRITE 
 	,(RESERVED,1) 		! RESERVED 
 	); 
  

  
  
 !+ 
 !  PROCESSOR REGISTER DEFINITIONS 
 !- 
  
 !...$PRDEF	
  
 LITERAL	
 $EQULST (PR$_,GBL,0,1  
 	,(KSP,0) 					!KERNEL STACK POINTER 
 	,(ESP,1) 					!EXECUTIVE STACK POINTER 
 	,(SSP,2) 					!SUPERVISOR STACK POINTER 
 	,(USP,3) 					!USER STACK POINTER 
 	,(ISP,4) 					!INTERRUPT STACK POINTER 
 	,(P0BR,8) 					!P0 BASE REGISTER 
 	,(P0LR,9) 					!P0 LIMIT REGISTER 
 	,(P1BR,10) 					!P1 BASE REGISTER 
 	,(P1LR,11) 					!P1 LIMIT REGISTER 
 	,(SBR,12) 					!SYSTEM BASE REGISTER 
 	,(SLR,13) 					!SYSTEM LIMIT REGISTER 
 	,(PCBB,16) 					!PROCESS CONTROL BLOCK BASE 
 	,(SCBB,17) 					!SYSTEM CONTROL BLOCK BASE 
 	,(IPL,18) 					!INTERRUPT PRIORITY LEVEL REGISTER 
 	,(ASTLVL,19) 				!AST LEVEL REGISTER 
 	,(SIRR,20) 					!SOFTWARE INTERRUPT REQUEST REGISTER 
 	,(SISR,21) 					!SOFTWARE INTERRUPT SUMMARY REGISTER 
 	,(MAPEN,56) 				!MAPPING ENABLE REGISTER 
 	,(TBIA,57) 					!TRANSLATION BUFFER INVALIDATE ALL 
 	,(TBIS,58) 					!TRANSLATION BUFFER INVALIDATE SINGLE 
 	,(ICCS,+%X'18') 				!INTERVAL CLOCK CONTROL STATUS REGISTER 
 	,(NICR,+%X'19') 				!INTERVAL CLOCK NEXT INTERVAL REGISTER 
 	,(ICR,+%X'1A') 				!INTERVAL CLOCK INTERVAL COUNT REGISTER 
 	,(TODR,+%X'1B') 				!TIME OF DAY REGISTER 
 	,(RXCS,+%X'20') 				!CONSOLE RECEIVER CONTROL STATUS REGISTER 
 	,(RXDB,+%X'21') 				!CONSOLE RECEIVER DATA BUFFER REGISTER 
 	,(TXCS,+%X'22') 				!CONSOLE TRANSMIT CONTROL STATUS REGISTER 
 	,(TXDB,+%X'23') 				!CONSOLE TRANSMIT DATA BUFFER REGISTER 
 	,(ACCS,+%X'28') 				!ACCELERATOR CONTROL STATUS REGISTER 
 	,(ACCR,+%X'29') 				!ACCELERATOR RESERVED 
 	,(WCSA,+%X'2C') 				!WCS ADDRESS REGISTER 
 	,(WCSD,+%X'2D') 				!WCS DATA REGISTER 
 	,(SBIFS,+%X'30') 				!SBI FAULT STATUS REGISTER 
 	,(SBIS,+%X'31') 				!SBI SILO REGISTER 
 	,(SBISC,+%X'32') 				!SBI COMPARATOR REGISTER 
 	,(SBIMT,+%X'33') 				!SBI MAINTENANCE REGISTER 
 	,(SBIER,+%X'34') 				!SBI ERROR REGISTER 
 	,(SBITA,+%X'35') 				!SBI TIMEOUT ADDRESS REGISTER 
 	,(SBIQC,+%X'36') 				!SBI QUADWORD CLEAR REGISTER 
 	,(PME,+%X'3D') 				!PERFORMANCE MONITOR ENABLE 
 	,(SID,+%X'3E') 				!SYSTEM IDENTIFICATION REGISTER 
 	); 

  
  
 !+ 
 ! PROCESSOR STATUS LONGWORD MASK AND FIELD DEFINITIONS 
 !- 
  
 !...$PSLDEF	
  
 						! PSL VIELD DEFINITIONS 
 				 
 MACRO		PSL$V_TBIT	= 0,4,1,0%; 		! TBIT ENABLE 
 LITERAL	PSL$M_TBIT	= 1^5 - 1^4; 
 MACRO		PSL$V_IV	= 0,5,1,0%; 			! INTEGER OVERFLOW 
 LITERAL	PSL$M_IV	= 1^6 - 1^5; 
 MACRO		PSL$V_FU	= 0,6,1,0%; 			! FLOATING UNDEFINED 
 LITERAL	PSL$M_FU	= 1^7 - 1^6; 
 MACRO		PSL$V_DV	= 0,7,1,0%; 			! DIVIDE BY ZERO 
 LITERAL	PSL$M_DV	= 1^8 - 1^7; 
 							! 
 MACRO		PSL$V_IPL	= 0,16,5,0%; 		! INTERRUPT PRIORITY LEVEL 
 LITERAL	PSL$M_IPL	= 1^21 - 1^16; 
 							! 
 MACRO		PSL$V_PRVMOD	= 0,22,2,0%; 		! PREVIOUS PROCESSOR MODE 
 LITERAL	PSL$M_PRVMOD	= 1^24 - 1^22; 
 MACRO		PSL$V_CURMOD	= 0,24,2,0%; 		! CURRENT PROCESSOR MODE 
 LITERAL	PSL$M_CURMOD	= 1^26 - 1^24; 
 MACRO		PSL$V_IS	= 0,26,1,0%; 			! INTERRUPT STACK BIT 
 LITERAL	PSL$M_IS	= 1^27 - 1^26; 
 MACRO		PSL$V_FPD	= 0,27,1,0%; 			! FIRST PART DONE 
 LITERAL	PSL$M_FPD	= 1^28 - 1^27; 
 							! MUST BE ZERO 
 MACRO		PSL$V_TP	= 0,30,1,0%; 			! TRACE TRAP PENDING 
 LITERAL	PSL$M_TP	= 1^31 - 1^30; 
 MACRO		PSL$V_CM	= 0,31,1,0%; 			! COMPATIBILITY MODE BIT AND MASK 
 LITERAL	PSL$M_CM	= 1^32 - 1^31; 
 						! END OF PSL VIELD DEFINITIONS 
 ! 
 ! MODE SYMBOL DEFINITIONS 
 ! 
 LITERAL	
 $EQULST (PSL$C_,GBL,0,1  
 	,(KERNEL,) 					! KERNEL MODE 
 	,(EXEC,) 					! EXEC MODE 
 	,(SUPER,) 					! SUPERVISOR MODE 
 	,(USER,) 					! USER MODE 
 	); 
  
 LITERAL	
 $EQULST (PSL$M_,GBL,0,1  
 	,(SAFBITS,( NOT (PSL$M_TP OR PSL$M_CM OR PSL$M_FPD)^(-16))) 	 
 	); 
  

  
  
 !+ 
 ! PROCESS OR GLOBAL SECTION DEFINITIONS 
 !- 
 !...$SECDEF	
  
 ! 
 ! ***** L_VBN, L_WINDOW, AND B_PFC MUST BE THE SAME OFFSET VALUES AS THE 
 ! ***** EQUIVALENTLY NAMED OFFSETS IN $PFLDEF 
 ! 
 MACRO		SEC$L_GSD	= 0,0,32,0%; 			!GLOBAL SECTION DESCRIPTOR ADDRESS 
 MACRO		SEC$L_CCB	= 0,0,32,0%; 			!CHANNEL CONTROL BLOCK ADDRESS IF PROCESS SECTION 
 MACRO		SEC$W_SECXFL	= 4,0,16,0%; 		!SECTION INDEX FORWARD LINK 
 MACRO		SEC$W_SECXBL	= 6,0,16,0%; 		!SECTION INDEX BACKWARD LINK 
 MACRO		SEC$L_VPXPFC	= 8,0,32,0%; 		!START VIRT PAGE INDEX & PFC 
 						! 
 MACRO		SEC$V_VPX	= 8,0,22,0%; 			! STARTING VIRTUAL PAGE INDEX 
 							! UNUSED 
 MACRO		SEC$V_PFC	= 8,24,8,0%; 			! PAGE FAULT CLUSTER 
 			
 MACRO		SEC$B_PFC	= 11,0,8,0%; 			!PAGE FAULT CLUSTER 
 MACRO		SEC$L_WINDOW	= 12,0,32,0%; 		!WINDOW CONTROL BLOCK 
 MACRO		SEC$L_VBN	= 16,0,32,0%; 			!BASE VIRTUAL BLOCK NUMBER 
 MACRO		SEC$W_FLAGS	= 20,0,16,0%; 			!VARIOUS CONTROL FLAGS 
 			 
 MACRO		SEC$V_GBL	= 20,0,1,0%; 			! GLOBAL SECTION 
 LITERAL	SEC$M_GBL	= 1^1 - 1^0; 
 MACRO		SEC$V_CRF	= 20,1,1,0%; 			! COPY ON REFERENCE 
 LITERAL	SEC$M_CRF	= 1^2 - 1^1; 
 MACRO		SEC$V_DZRO	= 20,2,1,0%; 			! DEMAND ZERO 
 LITERAL	SEC$M_DZRO	= 1^3 - 1^2; 
 MACRO		SEC$V_WRT	= 20,3,1,0%; 			! WRITABLE 
 LITERAL	SEC$M_WRT	= 1^4 - 1^3; 
 							! SPARE 
 MACRO		SEC$V_AMOD	= 20,8,2,0%; 			! ACCESS MODE OF SECTION 
 LITERAL	SEC$M_AMOD	= 1^10 - 1^8; 
 							! SPARE 
 MACRO		SEC$V_PERM	= 20,14,1,0%; 			! PERMANENT SECTION 
 LITERAL	SEC$M_PERM	= 1^15 - 1^14; 
 MACRO		SEC$V_SYSGBL	= 20,15,1,0%; 		! 1 = SYSTEM GLOBAL, 0 = GROUP GLOBAL 
 LITERAL	SEC$M_SYSGBL	= 1^16 - 1^15; 
 			
 MACRO		SEC$B_AMOD	= 21,0,8,0%; 		!ACCESS MODE OF SECTION 
 MACRO		SEC$L_REFCNT	= 24,0,32,0%; 		!COUNT OF PTE'S REFERENCING THIS SECTION 
 MACRO		SEC$L_PAGCNT	= 28,0,32,0%; 		!NO. OF PAGES IN THE SECTION 
 ! 
 ! ***** NOTE THAT NUMBER OF LONG WORDS MUST BE EVEN 
 ! 
 LITERAL	SEC$C_LENGTH	= 32; 
 LITERAL	SEC$K_LENGTH	= 32; 				!SIZE OF PSTE/GSTE 
  
 !+ 
 ! MATCH CONTROL VIELD VALUES 
 !- 
  
 LITERAL	
 $EQULST (SEC$K_,GBL,0,1 			! BASE OF ZERO , INCR 1 
 	,(MATALL,) 					! MATCH ALWAYS, USE GLOBAL SECTION 
 	,(MATEQU,) 					! MATCH IF ISD$L_IDENT EQU GBL ID 
 	,(MATLEQ,) 					! MATCH IF ISD$L_IDENT LEQ GBL ID 
 	); 
  
  

  
 ! 
 ! DEFINE SYMBIONT MANAGER REQUEST CODES 
 ! 
  
 !...$SMRDEF	
  
 LITERAL	
 $EQULST (SMR$K_,GBL,0,1 		! SYMBIONT MANAGER REQUEST CODES 
 	,(INITIAL,) 				! INITIALIZE A QUEUE 
 	,(DELETE,) 				! DELETE THE QUEUE 
 	,(START,) 				! ACTIVATE OR RESUME PRINTING 
 	,(PAUSE,) 				! SUSPEND PRINTING FOR A WHILE 
 	,(MERGE,) 				! MOVE FILES FORM ONE QUEUE INTO ANOTHER 
 	,(REDIRECT,) 			! ASSIGNMENT OF ONE QUEUE TO ANOTHER 
 	,(JUSTIFY,) 				! JUSTIFY PRINT FORMS(IE: ISSUE FF) 
 	,(STOP,) 				! DISABLE FURTHER DE-QUEING 
 	,(ENTER,) 				! ADD A FILE TO A QUEUE 
 	,(CREJOB,) 				! CREATE A PRINT JOB 
 	,(ADDFIL,) 				! ADD A FILE TO EXISTING JOB 
 	,(CLSJOB,) 				! CLOSE OPEN JOB 
 	,(RMVJOB,) 				! REMOVE JOB FROM QUEUE 
 	,(ALTER,) 				! CHANGE A FILES CHARACTERISTICS 
 	,(ABORT,) 				! ABORT CURRENT JOB, START NEXT 
 	,(RELEASE,) 				! RELEASE JOB FROM HOLD LIST 
 	,(DETINIT,) 				! DETACHED JOB HAS INITIATED 
 	,(SYNCJOB,) 				! SYNCRONIZE WITH A BATCH JOB 
 	); 
 ! 
 ! ASSIGN SYMBIONT MANAGER PRINT JOB/RECORD OPTION CODES 
 ! 
 ! 
 LITERAL	
 $EQULST (SMO$K_,GBL,1,1 		! JOB FILE OPTIONS 
 	,(DELETE,) 				! DELETE THE FILE AFTER PRINTING 
 	,(BRSTPAG,) 				! CREATE A BURST PAGE 
 	,(NOBRSTPAG,) 			! INHIBIT BURST PAGE 
 	,(FLAGPAG,) 				! PRINT A FLAG PAGE 
 	,(NOFLAGPAG,) 			! INHIBIT A FLAG PAGE 
 	,(PAGHDR,) 				! PRINT FILENAME AS PAGE HEADER 
 	,(DOUBLE,) 				! DOUBLE SPACE THE LISTING 
 	,(NOFEED,) 				! INHIBIT FORM FEED GENERATION 
 	,(PAGCNT,) 				! SPECIFY PAGE COUNT TO PRINT 
 	,(COPIES,) 				! NUMBER OF COPIES TO PRINT 
 	); 
  
 LITERAL	
 $EQULST (SMO$K_,GBL,32,1 		! OPTIONS FOR CREATE JOB 
 	,(RLSTIM,) 				! TIME TO HOLD UNTIL QUEUEING 
 	,(HOLD,) 				! HOLD THE JOB 
 	,(JOBPRI,) 				! SPECIFY PRINT JOB/DETACHED JOB PRIOITY 
 	,(JOBCOPY,) 				! NUMBER OF COPIES OF ENTIRE JOB 
 	,(FORMTYPE,) 			! FORM TYPE TO USED WHEN PRINTED 
 	,(LOWER,) 				! UPPER/LOWER CASE PRINTER ONLY 
 	,(PARAMS,) 				! SUPPLY JOB PARAMETERS 
 	,(JOBNAME,) 				! SUPPLY A NAME TO THE JOB 
 	,(NOLOWER,) 				! CLEAR LOWER CASE REQUIRED 
 	); 
  
 LITERAL	
 $EQULST (SMO$K_,GBL,64,1 		! OPTIONS FOR INIT OR START A QUEUE 
 	,(CURFORM,) 				! CURRENT FORMS MOUNTED ON DEVICE 
 	,(GENPRT,) 				! ALLOW GENERIC PRINTING 
 	,(NOGENPRT,) 			! DISALLOW GENERIC PRINTING 
 	,(DETJOB,) 				! QUEUE IS FOR DETACHED JOB QUEUING 
 	,(GENDEV,) 				! QUEUE IS GENERIC DEVICE QUEUE 
 	,(NOGENDEV,) 			! NOT A GENERIC DEVICE 
 	,(DEFBRST,) 				! QUEUE HAS BURST PAGE BY DEFAULT 
 	,(NODEFBRST,) 			! NO DEFAULT BURST PAGE 
 	,(DEFFLAG,) 				! QUEUE HAS FLAG PAGE BY DEFAULT 
 	,(NODEFFLAG,) 			! NO DEFAULT FLAG 
 	,(TRMDEV,) 				! DEVICE IS A TERMINAL 
 	,(NOTRMDEV,) 			! DEVICE IS NOT A TERMINAL 
 	,(JOBLIM,) 				! JOB LIMIT FOR BATCH JOBS 
 	,(INIPRI,) 				! JOB INITIAL PRIORITY 
 	,(DISWAP,) 				! DISABLE SWAPING 
 	); 
  
 LITERAL	
 $EQULST (SMO$K_,GBL,96,1 		! OPTIONS FOR RESTART 
 	,(NEXTJOB,) 				! RESTART AT END BEGINNING OF NEXT JOB 
 	,(TOPOFILE,) 			! RESTART JOB AT TOP-OF-FILE 
 	,(SPCCNT,) 				! SPECIFY PAGES TO SPACE OVER 
 	); 
  
 LITERAL	
 $EQULST (SMO$K_,GBL,112,1 		! OPTIONS FOR ABORT 
 	,(REQUEUE,) 				! REQUEUE THE FILE 
 	); 

 ! 
 ! DEFINE SYMBIONT MANAGER QUEUE DATA STRUCTURES 
 ! 
 ! 
 ! 
 ! DEFINE FORMAT FOR RECORDS IN THE QUEUE 
 ! 
 !	EACH RECORD IN THE QUEUE IS 64 BYTES LONG 
 !	THERE ARE 3 TYPES OF RECORDS 
 ! 
 !		1. JOB HEADER FOR BATCH OR PRINT JOBS 
 !		2. PRINT FILE RECORD 
 !		3. BATCH JOB RECORD 
 !	THE LAST 2 HAVE THE SAME LAYOUT 
 ! 
 !...$SYMDEF			! THE RECORD ENVELOP STRUCTURE 
  
 LITERAL	SYM$C_RECSIZE	= 64; 
 LITERAL	SYM$K_RECSIZE	= 64; 				! SIZE OF THE STRUCTURE 
  

  
 ! 
 ! DEFINE FORMAT FOR SYMBIONT MANAGER JOB HEADER RECORD 
 ! 
 !...$SJHDEF	
  
 MACRO		SJH$L_RECLINK	= 0,0,32,0%; 			! LINK TO NEXT RECORD 
 MACRO		SJH$W_JOBSEQ	= 4,0,16,0%; 		! JOB SEQUENCE NUMBER 
 MACRO		SJH$W_QINDEX	= 6,0,16,0%; 		! INDEX TO DEVICE QUEUE FOR THIS JOB 
 MACRO		SJH$L_NEXTJOB	= 8,0,32,0%; 			! LINK TO NEXT PRINT JOB 
 MACRO		SJH$B_FLAGS	= 12,0,8,0%; 			! FLAGS 
 							! RECORD FLAGS 
 MACRO		SJH$V_HOLD	= 12,0,1,0%; 			! JOB IS ON HOLD 
 LITERAL	SJH$M_HOLD	= 1^1 - 1^0; 
 MACRO		SJH$V_LOWER	= 12,1,1,0%; 			! JOB REQUIRES LOWER CASE PRINTER 
 LITERAL	SJH$M_LOWER	= 1^2 - 1^1; 
 MACRO		SJH$V_JOBABORT	= 12,2,1,0%; 		! JOB WAS ABORTED 
 LITERAL	SJH$M_JOBABORT	= 1^3 - 1^2; 
 			
 						! MARK POINT OF OVERLAPPED DEFINITION 
 MACRO		SJH$B_FORMS	= 13,0,8,0%; 			! FORMS TYPE FOR JOB 
 MACRO		SJH$B_COPYCNT	= 14,0,8,0%; 		! NUMBER OF COPIES OF ENTIRE JOB 
 						! POINT BACK FOR BATCH QUEUE SLOT 
 MACRO		SJH$W_MBCHAN	= 13,0,16,0%; 		! RESPONCE MAILBOX CHANNEL 
 MACRO		SJH$B_PRTPRI	= 15,0,8,0%; 		! PRINT PRIORITY FOR JOB 
 MACRO		SJH$L_PROCID	= 16,0,32,0%; 			! PROCESS ID OF OWNER 
 ! ** ADJACENCY OF THE NEXT 2 ITEMS ASSUMED 
 MACRO		SJH$L_UIC	= 20,0,32,0%; 			! UIC OF OWNER OF JOB 
 MACRO		SJH$T_USERNAM	= 24,0,0,0%; 		! NAME OF OWNER 
 LITERAL	SJH$S_USERNAM	= 12; 
 ! ** ADJACENCY OF THE LAST 2 ITEMS ASSUMED 
 MACRO		SJH$Q_ACNTNAM	= 36,0,0,0%; 		! ACCOUNT TO GET CHARGED 
 LITERAL	SJH$S_ACNTNAM	= 8; 
 MACRO		SJH$Q_TIME	= 44,0,0,0%; 			! TIME JOB WAS CREATED 
 LITERAL	SJH$S_TIME	= 8; 
 MACRO		SJH$Q_JOBNAME	= 52,0,0,0%; 		! JOB NAME 
 LITERAL	SJH$S_JOBNAME	= 8; 
 MACRO		SJH$L_PARMBLK	= 60,0,32,0%; 			! PARAMETER BLOCK 
  

  
 ! 
 ! DEFINE FORMAT OF SYMBIONT MANAGER QUEUE RECORD 
 ! 
 !...$SQRDEF	
  
 MACRO		SQR$L_RECLINK	= 0,0,32,0%; 			! LINK TO NEXT RECORD 
 MACRO		SQR$W_JOBSEQ	= 4,0,16,0%; 		! JOB SEQUENCE NUMBER 
 MACRO		SQR$W_RECID	= 6,0,16,0%; 			! ID THIS A RECORD 
 ! 
 ! NOTE:	THE ORDER OF THIS RECORD CAN NOT BE CHANGED WITH OUT EFFECTING 
 !	THE SYMBIONT, AND THE SYMBIONT MANAGER MESSAGE FORMAT 
 ! 
 MACRO		SQR$T_VOLNAM	= 8,0,0,0%; 		! VOLUME NAME UPON WHICH FILE RESIDES 
 LITERAL	SQR$S_VOLNAM	= 16; 
 MACRO		SQR$W_FILNUM	= 24,0,16,0%; 		! FILE NUMBER TO PRINT/EXECUTE 
 MACRO		SQR$W_FILSEQ	= 26,0,16,0%; 		! FILE SEQUENCE NUMBER 
 MACRO		SQR$W_RELVOL	= 28,0,16,0%; 		! FILE RELATIVE VOLUME NUMBER 
 MACRO		SQR$W_DIRNUM	= 30,0,16,0%; 		! DIRECTORY FILE NUMBER 
 MACRO		SQR$W_DIRSEQ	= 32,0,16,0%; 		! DIRECTORY SEQUENCE NUMBER 
 MACRO		SQR$W_DIRVOL	= 34,0,16,0%; 		! DIRECTORY VOLUME INDEX 
 MACRO		SQR$T_FILNAM	= 36,0,0,0%; 		! 19 BYTE FILE NAME AND A COUNT BYTE 
 LITERAL	SQR$S_FILNAM	= 20; 
 MACRO		SQR$B_FLAGS	= 56,0,8,0%; 			! VARIOUS FLAGS 
 							! QUEUE RECORD FLAGS 
 MACRO		SQR$V_DELETE	= 56,0,1,0%; 			! DELETE THE FILE 
 LITERAL	SQR$M_DELETE	= 1^1 - 1^0; 
 MACRO		SQR$V_FLAGPAG	= 56,1,1,0%; 			! PRINT A FLAG PAGE 
 LITERAL	SQR$M_FLAGPAG	= 1^2 - 1^1; 
 MACRO		SQR$V_BRSTPAG	= 56,2,1,0%; 			! PRINT A BURST PAGE 
 LITERAL	SQR$M_BRSTPAG	= 1^3 - 1^2; 
 MACRO		SQR$V_DOUBLE	= 56,3,1,0%; 			! DOUBLE SPACE THE LISTING 
 LITERAL	SQR$M_DOUBLE	= 1^4 - 1^3; 
 MACRO		SQR$V_NOFEED	= 56,4,1,0%; 			! NO IMPLIED FORM FEEDS 
 LITERAL	SQR$M_NOFEED	= 1^5 - 1^4; 
 MACRO		SQR$V_PAGHDR	= 56,5,1,0%; 			! PRINT FILE NAME AS HEADER 
 LITERAL	SQR$M_PAGHDR	= 1^6 - 1^5; 
 			
 MACRO		SQR$B_COPYCNT	= 57,0,8,0%; 		! NUMBER OF COPIES TO PRINTED 
 MACRO		SQR$W_PAGCNT	= 58,0,16,0%; 		! MAXIMUM PAGES TO PRINT 
  

 ! 
 ! DEFINE SYMBIONT QUEUE HEADER RECORD FORMAT 
 ! 
 !...$SQHDEF	
  
 MACRO		SQH$L_FREEREC	= 0,0,32,0%; 			! OFFSET TO FIRST FREE RECORD 
 MACRO		SQH$B_FLAGS	= 4,0,8,0%; 			! STATUS FLAGS 
 MACRO		SQH$B_NUMQUE	= 5,0,8,0%; 		! NUMBER OF ACTIVE QUEUES 
 MACRO		SQH$B_MAXQUE	= 6,0,8,0%; 		! MAXIMUM NUMBER OF QUEUES 
 MACRO		SQH$B_SPARE	= 7,0,8,0%; 			! SPARE BYTE 
 MACRO		SQH$L_FIRSTREC	= 8,0,32,0%; 		! FIRST RECORD 
 MACRO		SQH$L_NEXTREC	= 12,0,32,0%; 			! OFFSET TO NEXT FREE RECORD 
 MACRO		SQH$L_LASTREC	= 16,0,32,0%; 			! OFFSET TO LAST RECORD IN FILE 
 MACRO		SQH$L_OPENJOB	= 20,0,32,0%; 			! LIST OF OPEN PRINT JOBS 
 MACRO		SQH$L_TIMQUE	= 24,0,32,0%; 			! LIST OF JOBS WAITING ON TIME BASES 
 MACRO		SQH$W_QUESEQ	= 28,0,16,0%; 		! QUEUE SEQUENCE NUMBER 
 MACRO		SQH$Q_QUEUE	= 32,0,0,0%; 		! 32 PRIORIT ORDER PRINT QUEUES 
 LITERAL	SQH$S_QUEUE	= 256; 
 LITERAL	SQH$C_SIZE	= 288; 
 LITERAL	SQH$K_SIZE	= 288; 				! SIZE OF THE QUEUE HEADER 
  

  
 ! 
 ! DEFINE FORMAT FOR SYMBIONT MANAGER QUEUE HEADER 
 ! 
 !...$SMQDEF	
  
 MACRO		SMQ$L_CURRENT	= 0,0,32,0%; 			! CURRENTLY PRINTING JOB 
 MACRO		SMQ$L_HOLDLST	= 4,0,32,0%; 			! QUEUE HOLDING LIST 
 MACRO		SMQ$B_FLAGS	= 8,0,8,0%; 		! QUEUE FLAG BYTE 
 							! QUEUE STATUS FLAGS 
 MACRO		SMQ$V_INUSE	= 8,0,1,0%; 			! QUEUE IS IN USE 
 LITERAL	SMQ$M_INUSE	= 1^1 - 1^0; 
 MACRO		SMQ$V_DETJOB	= 8,1,1,0%; 			! QUEUE IS FOR DETACHED JOBS,NOT PRINTER 
 LITERAL	SMQ$M_DETJOB	= 1^2 - 1^1; 
 MACRO		SMQ$V_PAUSED	= 8,2,1,0%; 			! PRINTED IS SUSPENDED 
 LITERAL	SMQ$M_PAUSED	= 1^3 - 1^2; 
 MACRO		SMQ$V_STOPPED	= 8,3,1,0%; 			! QUEUE IS STOPPED 
 LITERAL	SMQ$M_STOPPED	= 1^4 - 1^3; 
 MACRO		SMQ$V_GENDEV	= 8,4,1,0%; 			! QUEUE IS GENERIC 
 LITERAL	SMQ$M_GENDEV	= 1^5 - 1^4; 
 MACRO		SMQ$V_NOGENERIC	= 8,5,1,0%; 		! GENERIC QUEUE PRINTING NOT ALLOWED 
 LITERAL	SMQ$M_NOGENERIC	= 1^6 - 1^5; 
 			
 MACRO		SMQ$B_FORMS	= 9,0,8,0%; 		! FORMS TYPE ON PRINTER AT LAST START 
 MACRO		SMQ$B_JOBCNT	= 9,0,8,0%; 		! JOB COUNT FOR BATCH QUEUES 
 MACRO		SMQ$B_CHAR	= 10,0,8,0%; 			! CHARACTERISTICS 
 							! CHARACTERISTICS FOR DEVICE QUEUES 
 MACRO		SMQ$V_DEFFLAG	= 10,0,1,0%; 			! DEFAULT A FLAG PAGE 
 LITERAL	SMQ$M_DEFFLAG	= 1^1 - 1^0; 
 MACRO		SMQ$V_DEFBRST	= 10,1,1,0%; 			! DEFAULT A BURST PAGE 
 LITERAL	SMQ$M_DEFBRST	= 1^2 - 1^1; 
 MACRO		SMQ$V_TRMDEV	= 10,2,1,0%; 			! QUEUE IS FOR A TERMINAL 
 LITERAL	SMQ$M_TRMDEV	= 1^3 - 1^2; 
 MACRO		SMQ$V_LOWER	= 10,3,1,0%; 			! DEVICE SUPPORTS LOWER CASE PRINTING 
 LITERAL	SMQ$M_LOWER	= 1^4 - 1^3; 
 MACRO		SMQ$V_REDIRECT	= 10,4,1,0%; 		! DEVICE IS CURRENTLY REDIRECTED 
 LITERAL	SMQ$M_REDIRECT	= 1^5 - 1^4; 
 			
 							! CHARACTERISTICS FOR BATCH QUEUES 
 MACRO		SMQ$V_INIPRI	= 10,0,4,0%; 		! INITIAL PRIORITY 
 LITERAL	SMQ$M_INIPRI	= 1^4 - 1^0; 
 MACRO		SMQ$V_NOSWAP	= 10,4,1,0%; 			! DISABLE SWAPING 
 LITERAL	SMQ$M_NOSWAP	= 1^5 - 1^4; 
 			
 MACRO		SMQ$B_JOBLIM	= 11,0,8,0%; 		! JOB LIMIT FOR BATCH QUEUES 
 MACRO		SMQ$L_ASNSCT	= 12,0,32,0%; 			! ADDRESS OF ASSIGNED SYMB CONTROL TBL 
 MACRO		SMQ$T_NAME	= 16,0,0,0%; 		! NAME OF QUEUE 
 LITERAL	SMQ$S_NAME	= 16; 
 LITERAL	SMQ$C_SIZE	= 32; 
 LITERAL	SMQ$K_SIZE	= 32; 				! SIZE OF THIS STRUCTURE 
  

  
 !...$DJIDEF			! DETACHED JOB INITIATE MESSAGE 
  
 MACRO		DJI$W_MSGTYP	= 0,0,16,0%; 		! THE MESSAGE FROM SYMBIONT MANAGER 
 MACRO		DJI$B_FLAGS	= 2,0,8,0%; 			! CONTROL FLAGS 
 MACRO		DJI$L_UIC	= 4,0,32,0%; 			! USERS USER IDENTIFICATION CODE 
 MACRO		DJI$T_USERNAM	= 8,0,0,0%; 		! USERS NAME 
 LITERAL	DJI$S_USERNAM	= 12; 
 MACRO		DJI$T_ACNTNAM	= 20,0,0,0%; 		! ACCOUNT TO RUN JOB 
 LITERAL	DJI$S_ACNTNAM	= 8; 
 MACRO		DJI$T_VOLNAM	= 28,0,0,0%; 		! DISK UPON WHICH RESIDES THE FILE 
 LITERAL	DJI$S_VOLNAM	= 16; 
 MACRO		DJI$W_FILEID	= 44,0,0,0%; 		! THE FILE ID OF THE FILE 
 LITERAL	DJI$S_FILEID	= 6; 
 MACRO		DJI$W_DIRID	= 50,0,0,0%; 		! DIRECTORY ID FOR FILE 
 LITERAL	DJI$S_DIRID	= 6; 
 MACRO		DJI$T_JOBNAME	= 56,0,0,0%; 		! JOB NAME FOR LOG 
 LITERAL	DJI$S_JOBNAME	= 8; 
 MACRO		DJI$T_PARMS	= 64,0,0,0%; 		! COMMAND PARAMETERS 
 LITERAL	DJI$S_PARMS	= 64; 
 LITERAL	DJI$C_SIZE	= 128; 
 LITERAL	DJI$K_SIZE	= 128; 				! SIZE OF THE STRUCTURE 
  

  
 ! 
 ! TPARSE CONTROL BLOCK. THIS BLOCK IS ONE OF THE ARGUMENTS USED TO CALL TPARSE, 
 ! AND BECOMES THE ARGUMENT LIST TO ACTION ROUTINES. 
 ! 
 !...$TPADEF	
 MACRO		TPA$L_COUNT	= 0,0,32,0%; 				! ARGUMENT COUNT (NUMBER OF LONGWORDS) 
 LITERAL	TPA$K_COUNT0	= 8; 				! ZERO LEVEL VALUE IS 8 
 MACRO		TPA$L_OPTIONS	= 4,0,32,0%; 			! OPTIONS LONGWORD 
 			 
 MACRO		TPA$V_BLANKS	= 4,0,1,0%; 			! PROCESS BLANKS AND TABS EXPLICITLY 
 LITERAL	TPA$M_BLANKS	= 1^1 - 1^0; 
 MACRO		TPA$V_ABBREV	= 4,1,1,0%; 			! ALLOW MINIMAL ABBREVIATION 
 LITERAL	TPA$M_ABBREV	= 1^2 - 1^1; 
 MACRO		TPA$V_ABBRFM	= 4,2,1,0%; 			! ALLOW FIRST MATCH ABBREVIATION 
 LITERAL	TPA$M_ABBRFM	= 1^3 - 1^2; 
 				 
 MACRO		TPA$V_AMBIG	= 4,16,1,0%; 			! AMBIGUOUS KEYWORD AT THIS STATE 
 LITERAL	TPA$M_AMBIG	= 1^17 - 1^16; 
 			
 MACRO		TPA$B_MCOUNT	= 7,0,8,0%; 		! MINIMUM ABBREVIATION ON KEYWORDS 
 MACRO		TPA$L_STRINGCNT	= 8,0,32,0%; 			! BYTE COUNT OF STRING BEING PARSED 
 MACRO		TPA$L_STRINGPTR	= 12,0,32,0%; 			! ADDRESS OF STRING BEING PARSED 
 MACRO		TPA$L_TOKENCNT	= 16,0,32,0%; 			! BYTE COUNT OF CURRENT MATCHING TOKEN 
 MACRO		TPA$L_TOKENPTR	= 20,0,32,0%; 			! ADDRESS OF MATCHING TOKEN 
 MACRO		TPA$L_CHAR	= 24,0,32,0%; 				! ASCII CODE OF SINGLE CHARACTER TOKEN 
 MACRO		TPA$L_NUMBER	= 28,0,32,0%; 			! NUMERIC VALUE OF NUMERIC TOKEN 
 MACRO		TPA$L_PARAM	= 32,0,32,0%; 				! PARAMETER LONGWORD FROM STATE TABLE 
 LITERAL	TPA$C_LENGTH0	= 36; 
 LITERAL	TPA$K_LENGTH0	= 36; 				! LENGTH OF ZERO LEVEL PARAMETER BLOCK 

  
 ! 
 ! DEFINITIONS FOR STATUS, CHARACTERISTICS AND ERRORS FOR DMC-11 
 ! 
 !...$XMDEF	
 							! DEVICE DEPENDENT LONGWORD 
 MACRO		XM$V_CHR_MOP	= 0,0,1,0%; 			! MOP MODE 
 LITERAL	XM$M_CHR_MOP	= 1^1 - 1^0; 
 MACRO		XM$V_CHR_LOOPB	= 0,1,1,0%; 			! LOOP BACK 
 LITERAL	XM$M_CHR_LOOPB	= 1^2 - 1^1; 
 MACRO		XM$V_CHR_HDPLX	= 0,2,1,0%; 			! HALF DUPLEX 
 LITERAL	XM$M_CHR_HDPLX	= 1^3 - 1^2; 
 MACRO		XM$V_CHR_SLAVE	= 0,3,1,0%; 			! HALF DUPLEX SLAVE STATION 
 LITERAL	XM$M_CHR_SLAVE	= 1^4 - 1^3; 
 MACRO		XM$V_CHR_MBX	= 0,4,1,0%; 				! MAILBOX IS ENABLED 
 LITERAL	XM$M_CHR_MBX	= 1^5 - 1^4; 
 								! SPARE 
 MACRO		XM$V_STS_DCHK	= 0,8,1,0%; 			! DATA CHECK OCCURED 
 LITERAL	XM$M_STS_DCHK	= 1^9 - 1^8; 
 MACRO		XM$V_STS_TIMO	= 0,9,1,0%; 			! TIMEOUT OCCURED 
 LITERAL	XM$M_STS_TIMO	= 1^10 - 1^9; 
 MACRO		XM$V_STS_ORUN	= 0,10,1,0%; 			! DATA OVER RUN OCCURED 
 LITERAL	XM$M_STS_ORUN	= 1^11 - 1^10; 
 MACRO		XM$V_STS_ACTIVE	= 0,11,1,0%; 			! ACTIVE UNIT 
 LITERAL	XM$M_STS_ACTIVE	= 1^12 - 1^11; 
 								! SPARE 
 MACRO		XM$V_STS_DISC	= 0,14,1,0%; 			! LINE DISCONNECT OCCURED 
 LITERAL	XM$M_STS_DISC	= 1^15 - 1^14; 
 								! SPARE 
 MACRO		XM$V_ERR_FATAL	= 0,16,1,0%; 			! HARDWARE ERROR 
 LITERAL	XM$M_ERR_FATAL	= 1^17 - 1^16; 
 				 
 MACRO		XM$V_ERR_MAINT	= 0,19,1,0%; 			! DDCMP MAINT MESSAGE RECEIVED 
 LITERAL	XM$M_ERR_MAINT	= 1^20 - 1^19; 
 MACRO		XM$V_ERR_LOST	= 0,20,1,0%; 			! DATA LOST BECAUSE OF BUFFER SIZE MISMATCH 
 LITERAL	XM$M_ERR_LOST	= 1^21 - 1^20; 
 								! SPARE 
 MACRO		XM$V_ERR_START	= 0,23,1,0%; 			! DDCMP START MESSAGE RECEIVED 
 LITERAL	XM$M_ERR_START	= 1^24 - 1^23; 
 			

 !	$BEGIN	RMSDEF,025 
 ! 
 !	MODIFIED BY: 
 ! 
 !	L F LAVERDURE,   11-JUL-78  14:52 
 !	E H MARISON,	 19-OCT-77  15:59 
 !	W W CLARK,	 24-OCT-77  ??:?? 
 !	J A KRYCKA,	 11-AUG-78  16:24 
 ! 
 !++ 
 ! 
 ! $RMSDEF MACRO--DEFINE ALL VALID STATUS CODES 
 ! 
 ! 
 ! SUCCESS CODES 
 ! 
 !...$RMSDEF	
  
 			 
 						! MOVE TO BIT 14 OF THE STATUS CODE 
 MACRO		RMS$V_STVSTATUS	= 0,14,1,0%; 	! IF SET IN STATUS CODE INDICATES THAT STV 
 			! CONTAINS A FURTHER STATUS CODE 
 			
  
 LITERAL	
 $EQULST (RMS$_,GBL,0,1  
 	,(SUC,65537) 		! <OPERATION SUCCESSFUL> 
 	,(NORMAL,65537) 		! <OPERATION SUCCESSFUL> 
 	); 
  
 LITERAL	
 $EQULST (RMS$_,GBL,98305,8 	!RMS SPECIFIC MESSAGES 
 			!	(BIT 16 = BIT 15 = 1) 
  
 	,(STALL,) 		!MSG <synchronize with operation completion> 
 		! (NOTE: USER NEVER RECEIVES THIS CODE) 
 	,(PENDING,) 		!MSG <asynchronous operation pending completion> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(OK_DUP,) 		!MSG <record inserted had duplicate key> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(OK_IDX,) 		!MSG <index update error occurred (STV)> 
 		! RECORD HAS BEEN INSERTED, BUT INDEX STRUCTURE 
 		! IS NO LONGER OPTIMAL 
 	,(OK_RLK,) 		!MSG <record locked but read anyway> 
 		! (NOTE: BECAUSE LOCKER SET RLK IN ROP FIELD WHEN RECORD WAS LOCKED) 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(OK_RRV,) 		!MSG <record was inserted successfully in primary> 
 		! BUT IT MAY NOT BE ACCESSIBLE VIA ONE- 
 		! OR-MORE SECONDARY KEYS, AND NOT BY RFA ADDRESSING 
 		! FILE REORGANIZATION RECOMMENDED! 
 	,(KFF,) 		!MSG <known file found> 
 	,(OK_ALK,) 		!MSG <record is already locked> 
 	,(OK_DEL,) 		!MSG <deleted record successfully accessed> 
 	,(OK_RNF,) 		!MSG <nonexistent record successfuly accessed> 
 	,(OK_LIM,) 		!MSG <retrieved record exceeds specified key value> 
 	); 
 LITERAL	
 $EQULST (RMS$_,GBL,0,1 		! SUCCESS CODES PASSED THRU FROM DRIVERS AND ACP 
 			!	(BIT 15 = 0) 
  
 	,(CONTROLC,67153) 		!<terminal input aborted due to CTRL/C> 
 	,(CONTROLO,67081) 		!<terminal output ignored due to CTRL/O> 
 	,(CONTROLY,67089) 		!<terminal input aborted due to CTRL/Y> 
 	,(CREATED,67097) 		!<file was created, not opened> 
 	,(SUPERSEDE,67121) 		!<created file superseded existing version> 
 	); 
 ! 
 !  FAILURE CODES 
 ! 
 !   NOTE: THE "@" SYMBOL MEANS "ADDRESS OF" 
 ! 
 ! 
 !  WARNING CODES 
 ! 
 LITERAL	
 $EQULST (RMS$_,GBL,98712,8 	! WARNING CODES 
 			!	(BIT 16 = BIT 15 = 1, BIT 14 = 0) 
  
 	,(BOF,) 		!MSG <beginning of file detected> 
 	,(RNL,) 		!MSG <record not locked> 
 	,(RTB,) 		!MSG FAOCNT=1,<!UL byte record too big for user's buffer> 
 	,(TMO,) 		!MSG <timeout period expired> 
 	); 
 ! 
 !  ERROR CODES 
 ! 
 LITERAL	
 $EQULST (RMS$_,GBL,98906,8 	! ERROR CODES 
 			!	(BIT 16 = BIT 15 = 1, BIT 14 = 0) 
  
 	,(ACT,) 		!MSG <file activity precludes operation> 
 	,(DEL,) 		!MSG <RFA-accessed record was deleted> 
 	,(TEMP1,) 		!MSG <old message code available for reassignment - was DNF> 
 	,(DNR,) 		!MSG <device not ready or not mounted> 
 	,(EOF,) 		!MSG <end of file> 
 	,(FEX,) 		!MSG <file already exists, not superseded> 
 	,(FLK,) 		!MSG <file is locked by another user> 
 	,(FNF,) 		!MSG <file not found> 
 	,(PRV,) 		!MSG <privilege violation (operating system denies access)> 
 	,(REX,) 		!MSG <record already exists> 
 	,(RLK,) 		!MSG <target record locked by another stream> 
 	,(RNF,) 		!MSG <record not found> 
 !			RECORD NEVER WAS IN FILE, OR HAS BEEN DELETED 
 	,(WLK,) 		!MSG <device is write locked> 
 	,(EXP,) 		!MSG <file expiration date not yet reached> 
 	,(NMF,) 		!MSG <no more files> 
 	,(SUP,) 		!MSG FAOCNT=1,<operation not supported over network, DAP code = !XL> 
 	,(RSA,) 		!MSG <record stream currently active> 
 	); 
 ! 
 !  ERROR CODES (AND STV HAS A SYSTEM ERROR CODE) 
 ! 
 LITERAL	
 $EQULST (RMS$_,GBL,114690,8 	!	(BIT 16 = BIT 15 = BIT 14 = 1) 
 	 
 	,(ACC,) 		!MSG <ACP could not access file> 
 	,(CRE,) 		!MSG <ACP could not create file> 
 	,(DAC,) 		!MSG <ACP file deaccess error during CLOSE> 
 	,(ENT,) 		!MSG <ACP enter function failed> 
 	,(EXT,) 		!MSG <file extend failure> 
 	,(FND,) 		!MSG <ACP FIND function failed> 
 	,(MKD,) 		!MSG <ACP could not mark file for deletion> 
 	,(DPE,) 		!MSG <device positioning error> 
 	,(SPL,) 		!MSG <spool or submit command file failure> 
 	,(DNF,) 		!MSG <directory not found> 
 	); 
 ! 
 !  SEVERE ERROR CODES 
 ! 
 LITERAL	
 $EQULST (RMS$_,GBL,99308,8 	! SEVERE ERRORS 
 			!	(BIT 16 = BIT 15 = 1, BIT 14 = 0) 
  
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(ABO,) 		!MSG <operation aborted> 
 	,(AID,) 		!MSG FAOCNT=1,<bad area ID in XAB at !XL> 
 	,(ALN,) 		!MSG FAOCNT=1,<alignment options error in XAB at !XL> 
 	,(ALQ,) 		!MSG <invalid allocation quantity (negative, or 0 on $EXTEND)> 
 	,(ANI,) 		!MSG <not ANSI "D" format> 
 	,(AOP,) 		!MSG FAOCNT=1,<allocation options error in XAB at !XL> 
 	,(BKS,) 		!MSG <bucket size too large (FAB)> 
 	,(BKZ,) 		!MSG FAOCNT=1,<bucket size too large in XAB at !XL> 
 	,(BLN,) 		!MSG <invalid length for control block (RAB/FAB)> 
 	,(BUG,) 		!MSG <internal RMS error condition detected> 
 	,(BUG_DDI,) 		!MSG <default directory invalid> 
 	,(BUG_DAP,) 		!MSG FAOCNT=1,<internal network error condition detected, DAP code = !X 
 	,(BUG_XX2,) 		!MSG <reserved bug code> 
 	,(BUG_XX3,) 		!MSG <reserved bug code> 
 	,(BUG_XX4,) 		!MSG <reserved bug code> 
 	,(BUG_XX5,) 		!MSG <reserved bug code> 
 	,(BUG_XX6,) 		!MSG <reserved bug code> 
 	,(BUG_XX7,) 		!MSG <reserved bug code> 
 	,(BUG_XX8,) 		!MSG <reserved bug code> 
 	,(BUG_XX9,) 		!MSG <reserved bug code> 
 	,(CAA,) 		!MSG <cannot access argument list> 
 	,(CCR,) 		!MSG <cannot connect RAB> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(CHG,) 		!MSG <$UPDATE attempted to change a key with XAB$M__CHG attribute not set> 
 	,(CHK,) 		!MSG <bucket format check failed> 
 	,(COD,) 		!MSG FAOCNT=1,<invalid or unsupported type field in XAB at !XL> 
 	,(CUR,) 		!MSG <no current record (operation not preceded by $GET/$FIND)> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(DAN,) 		!MSG FAOCNT=1,<data area number invalid in XAB at !XL> 
 	,(DEV,) 		!MSG <bad device, or inappropriate device type> 
 	,(DIR,) 		!MSG <error in directory name> 
 	,(DME,) 		!MSG <dynamic memory exhausted> 
 	,(DNA,) 		!MSG <invalid default file specification string> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(DTP,) 		!MSG FAOCNT=1,<DTP field is invalid in XAB at !XL> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(DUP,) 		!MSG <duplicate key detected, XAB$M_DUP attribute not set> 
 	,(DVI,) 		!MSG <invalid device ID field in NAM block> 
 	,(ESA,) 		!MSG <invalid expanded string address> 
 	,(ESS,) 		!MSG <expanded string area too short> 
 	,(FAB,) 		!MSG <invalid FAB (block identifier not=FAB$C_BID or FAB not writeable)> 
 	,(FAC,) 		!MSG <record operation not permitted by specified file access (FAC)> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(FLG,) 		!MSG FAOCNT=1,<invalid flag-bits combination in XAB at !XL> 
 	,(FNA,) 		!MSG <invalid file name string> 
 	,(FNM,) 		!MSG <error in file name> 
 	,(FSZ,) 		!MSG <fixed control header size field invalid (= 1 for print file)> 
 	,(FOP,) 		!MSG <invalid file options> 
 	,(FUL,) 		!MSG <device/file lacks sufficient space for requested allocation> 
 	,(IAL,) 		!MSG <invalid argument list> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(IAN,) 		!MSG FAOCNT=1,<index area number invalid in XAB at !XL> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(IDX,) 		!MSG <index not initialized> 
 	,(IFI,) 		!MSG <invalid internal file identifier (IFI) value> 
 	,(IMX,) 		!MSG FAOCNT=1,<invalid duplicate XAB at !XL> 
 	,(IOP,) 		!MSG <operation illegal or invalid for file organization or device> 
 	,(IRC,) 		!MSG FAOCNT=1,<illegal record encountered  -  STV = !UL (10)> 
 	,(ISI,) 		!MSG <invalid internal stream identifier (ISI) value> 
 	,(KBF,) 		!MSG <invalid key buffer> 
 	,(KEY,) 		!MSG <invalid key field(key=0/neg)> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(KRF,) 		!MSG <invalid key-of-reference($GET/$FIND)> 
 	,(KSZ,) 		!MSG <key size too large(idx)/not=4(rel)> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(LAN,) 		!MSG FAOCNT=1,<lowest-level-index area number invalid in XAB at !XL> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(LBL,) 		!MSG <tape is not ANSI labeled> 
 	,(LNE,) 		!MSG <logical name error> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(LOC,) 		!MSG FAOCNT=1,<allocation location field invalid in XAB at !XL> 
 	,(MRN,) 		!MSG <invalid max. record number (negative) or rel. key greater than MRN> 
 	,(MRS,) 		!MSG <maximumum record size invalid> 
 	,(NAM,) 		!MSG <NAM block invalid or not writeable> 
 	,(NEF,) 		!MSG <not positioned to EOF on $PUT (sequential files only)> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(NID,) 		!MSG <cannot allocate internal index descriptor> 
 	,(NOD,) 		!MSG <node name error> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(NPK,) 		!MSG <indexed file-no primary key defined> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(ORD,) 		!MSG FAOCNT=1,<XABs not in correct order at !XL> 
 	,(ORG,) 		!MSG <invalid file organization value> 
 	,(PBF,) 		!MSG <invalid prompt buffer> 
 	,(PLG,) 		!MSG <error in file's prologue (reconstruct file)> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(POS,) 		!MSG FAOCNT=1,<invalid key position (greater than MRS) in XAB at !XL> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(PRM,) 		!MSG FAOCNT=1,<bad file date field retrieved from XAB at !XL> 
 	,(QUO,) 		!MSG <quoted string error> 
 	,(RAB,) 		!MSG <invalid RAB (block identifier not=RAB$C_BID or RAB not writeable)> 
 	,(RAC,) 		!MSG <illegal record access mode> 
 	,(RAT,) 		!MSG <illegal record attributes> 
 	,(RBF,) 		!MSG <invalid record buffer> 
 	,(RFA,) 		!MSG <invalid record's file address (RFA=0)> 
 	,(RFM,) 		!MSG <invalid record format> 
 	,(RHB,) 		!MSG <invalid record header buffer > 
 	,(RLF,) 		!MSG <invalid related NAM block> 
 	,(ROP,) 		!MSG <invalid record options> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(RRV,) 		!MSG <invalid RRV record encountered> 
 	,(TEMP2,) 		!MSG <old message code available for reassignment - was RSA> 
 	,(RSS,) 		!MSG <invalid resultant string size> 
 	,(RST,) 		!MSG <invalid resultant string address> 
 	,(RSZ,) 		!MSG <bad record size (RSZ greater than MRS, or not=MRS if fixed length rec 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(SEQ,) 		!MSG <primary key out of sequence (RAB$M_SEQ attribute set)> 
 	,(SHR,) 		!MSG <file sharing (SHR) field invalid for file> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(SIZ,) 		!MSG FAOCNT=1,<key size field invalid in XAB at !XL> 
 	,(SQO,) 		!MSG <operation not sequential> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(STK,) 		!MSG <stack too big for save area> 
 	,(SYN,) 		!MSG <file specification syntax error> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(TRE,) 		!MSG <index tree error> 
 	,(TYP,) 		!MSG <error in file type> 
 	,(UBF,) 		!MSG <invalid user buffer> 
 	,(USZ,) 		!MSG <invalid user buffer size> 
 	,(VER,) 		!MSG <error in version number> 
 		! (NEXT CODE CURRENTLY UNUSED) 
 	,(VOL,) 		!MSG FAOCNT=1,<invalid volume number in XAB at !XL> 
 	,(XAB,) 		!MSG FAOCNT=1,<not a valid XAB at !XL (bad length or not writeable)> 
 	,(ESL,) 		!MSG <invalid expanded string length (= 0)> 
 	,(WSF,) 		!MSG <working set full (cannot lock buffers in working set)> 
 	,(ENV,) 		!MSG <support for organization or feature not included in build of this RMS 
 	,(PLV,) 		!MSG <unsupported prologue version> 
 	,(MBC,) 		!MSG <multi-buffer count invalid (negative value)> 
 	,(RSL,) 		!MSG <invalid resultant string length> 
 	,(WLD,) 		!MSG <invalid wildcard operation> 
 	,(NET,) 		!MSG FAOCNT=1,<network operation failed at target node, DAP code = !XL> 
 	,(IBF,) 		!MSG FAOCNT=1,<illegal bucket format  -  STV = !UL (10)> 
 	); 
 ! 
 !  SEVERE ERRORS (AND STV ALSO CONTAINS AN ERROR CODE) 
 ! 
 LITERAL	
 $EQULST (RMS$_,GBL,114892,8 	!	(BIT 16 = BIT 15 = BIT 14 = 1) 
  
 	,(ATR,) 		!MSG <attribute read error> 
 	,(ATW,) 		!MSG <attribute write error> 
 	,(CCF,) 		!MSG <cannot close file> 
 	,(CDA,) 		!MSG <cannot deliver AST> 
 	,(CHN,) 		!MSG <channel assignment failed> 
 	,(RER,) 		!MSG <file read error> 
 	,(RMV,) 		!MSG <ACP remove function failed> 
 	,(RPL,) 		!MSG <error while reading prologue> 
 	,(SYS,) 		!MSG <system (QIO) directive error> 
 	,(WER,) 		!MSG <file write error> 
 	,(WPL,) 		!MSG <error while writing prologue> 
 	,(IFA,) 		!MSG <illegal file attributes (corrupt file header)> 
 	,(WBE,) 		!MSG <error on write behind> 
 	); 
 ! 
 ! 
 !  THE FOLLOWING STATUS CODES ARE USED BY OTHER RMS'S BUT NOT CURRENTLY 
 !  BY RMS32 
 ! 
 !	AST	<INVALID(I.E. SYNCH) OPERATION AT AST LEVEL> 
 !	BPA	<PRIVATE POOL ADDRESS NOT MULTIPLE OF "4"> 
 !	BPS	<PRIVATE POOL SIZE NOT MULTIPLE OF "4"> 
 !	BSZ	<BAD BYTE SIZE> 
 !	CEF	<CAN'T "ERASE" FILE(STV=SYS ERR CODE)> 
 !	CGJ	<CAN'T GET JFN FOR FILE> 
 !	CLS	<RSTS/E CLOSE FUNCTION FAILED(STV=SYS ERR CODE)> 
 !	COF	<CAN'T OPEN FILE> 
 !	DLK	<DEADLOCK CONDITION DETECTED> 
 !	FID	<INVALID FILE ID> 
 !	INI	<$INIT MACRO NEVER ISSUED> 
 !	JFN	<BAD JFN VALUE> 
 !	LBY	<LOGICAL CHANNEL BUSY> 
 !	LCH	<LOGICAL CHANNEL NUMBER TOO LARGE> 
 !	LEX	<LOGICAL EXTEND ERROR - PRIOR EXTEND STILL VALID> 
 !	MAP	<BUFFER MAPPING ERROR> 
 !	OPN	<RSTS/E OPEN FUNCTION FAILED(STV=SYS ERR CODE)> 
 !	PEF	<POSITION TO EOF ERROR> 
 !	XCL	<FILE MUST BE OPEN'D FOR EXCL.ACCESS> 
 ! 
 ! END RMS STATUS CODE DEFINITIONS 
 ! 
 ! MACROS TO DEFINE SYSTEM SERVICE FAILURE AND STATUS CODES. 
 ! 
 ! 
  
 !+ 
 ! SYSTEM STATUS FAILURE CODES 
 !- 
 !...$SSDEF	
  
 ! 
 !	SEVERE ERRORS 
 ! 
  
 LITERAL	
 $EQULST (SS$_,GBL,12,8  
 	,(ACCVIO,) 				!MSG FAOCNT=4,<access violation, reason mask=!XB, virtual address=!XL, 
 	,(BADPARAM,) 			!MSG <bad parameter value> 
 	,(EXQUOTA,) 				!MSG <exceeded quota> 
 	,(NOPRIV,) 				!MSG <no privilege for attempted operation> 
 ! MAKE THE ABOVE ERRORS FALL INTO SHORT LITERALS 
 	,(ABORT,) 				!MSG <abort> 
 	,(BADATTRIB,) 			!MSG <bad attribute control list> 
 	,(BADESCAPE,) 			!MSG <syntax error in escape sequence> 
 	,(BADIMGHDR,) 			!MSG <bad image header> 
 	,(CHANINTLK,) 			!MSG <channel usage interlocked> 
 	,(CTRLERR,) 				!MSG <fatal controller error> 
 	,(DATACHECK,) 			!MSG <write check error> 
 	,(DEVFOREIGN,) 			!MSG <device is mounted foreign> 
 	,(DEVMOUNT,) 			!MSG <device is already mounted> 
 	,(DEVNOTMBX,) 			!MSG <device is not a mailbox> 
 	,(DEVNOTMOUNT,) 			!MSG <device is not mounted> 
 	,(DEVOFFLINE,) 			!MSG <device is not in configuration> 
 	,(DRVERR,) 				!MSG <fatal drive error> 
 	,(DUPLNAM,) 				!MSG <duplicate process name> 
 	,(FILACCERR,) 			!MSG <magnetic tape file access is nonblank> 
 	,(FILALRACC,) 			!MSG <file already accessed on channel> 
 	,(FILNOTACC,) 			!MSG <file not accessed on channel> 
 	,(FILNOTEXP,) 			!MSG <file is not expired> 
 	,(FORMAT,) 				!MSG <invalid media format> 
 	,(GPTFULL,) 				!MSG <global page table is full> 
 	,(GSDFULL,) 				!MSG <global section descriptor table is full> 
 	,(LCKPAGFUL,) 			!MSG <no more pages may be locked in memory> 
 	,(ILLBLKNUM,) 			!MSG <illegal logical block number> 
 	,(ILLCNTRFUNC,) 			!MSG <illegal ACP control function> 
 	,(ILLEFC,) 				!MSG <illegal event flag cluster> 
 	,(ILLIOFUNC,) 			!MSG <illegal I/O function code> 
 	,(ILLPAGCNT,) 			!MSG <illegal page count parameter> 
 	,(ILLSER,) 				!MSG <illegal service call number> 
 	,(INCVOLLABEL,) 			!MSG <incorrect volume label> 
 	,(INSFARG,) 				!MSG <insufficient call arguments> 
 	,(INSFWSL,) 				!MSG <insufficient working set limit> 
 	,(INSFMEM,) 				!MSG <insufficient dynamic memory> 
 	,(INSFRAME,) 			!MSG <insufficient call frames to unwind> 
 	,(IVADDR,) 				!MSG <invalid media address> 
 	,(IVCHAN,) 				!MSG <invalid I/O channel> 
 	,(IVDEVNAM,) 			!MSG <invalid device name> 
 	,(IVGSDNAM,) 			!MSG <invalid global section name> 
 	,(IVLOGNAM,) 			!MSG <invalid logical name> 
 	,(IVLOGTAB,) 			!MSG <invalid logical name table number> 
 	,(IVQUOTAL,) 			!MSG <invalid quota list> 
 	,(IVSECFLG,) 			!MSG <invalid process/global section flags> 
 	,(IVSSRQ,) 				!MSG <invalid system service request> 
 	,(IVSTSFLG,) 			!MSG <invalid status flag> 
 	,(IVTIME,) 				!MSG <invalid time> 
 	,(LENVIO,) 				!MSG <address space length violation> 
 	,(LKWSETFUL,) 			!MSG <locked portion of working set is full> 
 	,(MBTOOSML,) 			!MSG <mailbox is too small for request> 
 	,(MEDOFL,) 				!MSG <medium is offline> 
 	,(NODATA,) 				!MSG <mailbox is empty> 
 	,(NOIOCHAN,) 			!MSG <no I/O channel available> 
 	,(NOLOGNAM,) 			!MSG <no logical name match> 
 	,(NONEXDRV,) 			!MSG <nonexistent drive> 
 	,(NOTFILEDEV,) 			!MSG <device is not file structured> 
 	,(NOTINTBLSZ,) 			!MSG <block size is greater than 2048> 
 	,(NOTLABELMT,) 			!MSG <tape is not labeled> 
 	,(NOTSQDEV,) 			!MSG <not a sequential device> 
 	,(PAGOWNVIO,) 			!MSG <page owner violation> 
 	,(PARITY,) 				!MSG <parity error> 
 	,(PARTESCAPE,) 			!MSG <partial escape> 
 	,(PFMBSY,) 				!MSG <page fault monitor is in use> 
 	,(PSTFULL,) 				!MSG <process section table is full> 
 	,(RESULTOVF,) 			!MSG <resultant string overflow> 
 	,(SECTBLFUL,) 			!MSG <section table (process/global) is full> 
 	,(TAPEPOSLOST,) 			!MSG <magnetic tape position lost> 
 	,(TIMEOUT,) 				!MSG <device timeout> 
 	,(UNASEFC,) 				!MSG <unassociated event flag cluster> 
 	,(UNSAFE,) 				!MSG <drive unsafe> 
 	,(VASFULL,) 				!MSG <virtual address space is full> 
 	,(VECINUSE,) 			!MSG <AST vector already enabled> 
 	,(VOLINV,) 				!MSG <volume is invalid> 
 	,(WRITLCK,) 				!MSG <write lock error> 
 ! ***** MOVE THE FOLLOWING INTO ALPHABETIC ORDER WHEN CONVENIENT 
 	,(NOTAPEOP,) 			!MSG <no tape operator> 
 	,(IVCHNLSEC,) 			!MSG <invalid channel for create and map section> 
 	,(NOMBX,) 				!MSG <no associated mailbox for inbound connects> 
 	,(NOLINKS,) 				!MSG <no slots in logical link vector> 
 	,(NOSOLICIT,) 			!MSG <interrupt message not solicited> 
 	,(NOSUCHNODE,) 			!MSG <specified node does not exist> 
 	,(REJECT,) 				!MSG <network connect rejected> 
 	,(TOOMUCHDATA,) 			!MSG <too much optional or interrupt message data> 
 	,(BUGCHECK,) 			!MSG <internal consistency failure> 
 	,(FILNOTCNTG,) 			!MSG <file is not contiguous as required> 
 	,(BADSTACK,) 			!MSG <bad stack encountered during exception dispatch> 
 	,(MCHECK,) 				!MSG FAOCNT=2,<detected hardware error, PC=!XL, PSL=!XL> 
 	,(DEVACTIVE,) 			!MSG <device is active> 
 	,(HANGUP,) 				!MSG <data set hang-up> 
 	,(OPINCOMPL,) 			!MSG <operation is incomplete> 
 	,(ILLSEQOP,) 			!MSG <illegal sequential operation> 
 	,(IVSECIDCTL,) 			!MSG <invalid section identification match control> 
 	,(NOTNETDEV,) 			!MSG <not a network communication device> 
 	,(IVPROTECT,) 			!MSG <invalid page protection code> 
 	,(ACPVAFUL,) 			!MSG <MTAACP's virtual address space is full> 
 	,(MTLBLLONG,) 			!MSG <magnetic tape volume label can be no more than six characters> 
 	,(BUFBYTALI,) 			!MSG <device does not support byte-aligned transfers> 
 	,(NOAQB,) 				!MSG <ACP queue header not found> 
 	,(WRONGACP,) 			!MSG <wrong ACP for device> 
 	); 
  
 ! 
 ! NOTE THE FOLLOWING NAMES ARE HARDWARE EXCEPTION CODES THAT START AT 1028 
 ! 
  
 LITERAL	
 $EQULST (SS$_,GBL,1028,8  
 	,(PLHLDR,) 				!MSG <reserved for future use> 
 	,(ASTFLT,) 				!MSG FAOCNT=6,<AST fault, SP=!XL, param=!XL, PC=!XL, PSL=!XL, target P 
 	,(BREAK,) 				!MSG FAOCNT=2,<breakpoint fault at PC=!XL, PSL=!XL> 
 	,(CMODSUPR,) 			!MSG FAOCNT=3,<change mode to supervisor trap, code=!XL, PC=!XL, PSL= 
 	,(CMODUSER,) 			!MSG FAOCNT=3,<change mode to user trap, code=!XL, PC=!XL, PSL=!XL> 
 	,(COMPAT,) 				!MSG FAOCNT=3,<compatibility mode fault (code !UB) at PC=!XL, PSL=!XL> 
 	,(OPCCUS,) 				!MSG FAOCNT=2,<opcode reserved to customer fault at PC=!XL, PSL=!XL> 
 	,(OPCDEC,) 				!MSG FAOCNT=2,<opcode reserved to DIGITAL fault at PC=!XL, PSL=!XL> 
 	,(PAGRDERR,) 			!MSG FAOCNT=4,<page read error, reason mask=!XB, virtual address=!XL, 
 	,(RADRMOD,) 				!MSG FAOCNT=2,<reserved addressing fault at PC=!XL, PSL=!XL> 
 	,(ROPRAND,) 				!MSG FAOCNT=2,<reserved operand fault at PC=!XL, PSL=!XL> 
 	,(SSFAIL,) 				!MSG FAOCNT=3,<system service failure exception, status=!XL, PC=!XL, P 
 	,(TBIT,) 				!MSG FAOCNT=2,<T-bit pending trap at PC=!XL, PSL=!XL> 
 	,(DEBUG,) 				!MSG FAOCNT=2,<command interpreter debugger signal at PC=!XL, PSL=!XL> 
 ! 
 ! THE FOLLOWING CODES MUST BE IN ORDER SINCE THEY ARE CALCULATED 
 ! 
 	,(ARTRES,) 				!MSG FAOCNT=2,<reserved arithmetic trap at PC=!XL, PSL=!XL> 
 	,(INTOVF,) 				!MSG FAOCNT=2,<arithmetic trap, integer overflow at PC=!XL, PSL=!XL> 
 	,(INTDIV,) 				!MSG FAOCNT=2,<arithmetic trap, integer divide by zero at PC=!XL, PSL= 
 	,(FLTOVF,) 				!MSG FAOCNT=2,<arithmetic trap, floating overflow at PC=!XL, PSL=!XL> 
 	,(FLTDIV,) 				!MSG FAOCNT=2,<arithmetic trap, floating/decimal divide by zero at PC= 
 	,(FLTUND,) 				!MSG FAOCNT=2,<arithmetic trap, floating underflow at PC=!XL, PSL=!XL> 
 	,(DECOVF,) 				!MSG FAOCNT=2,<arithmetic trap, decimal overflow at PC=!XL, PSL=!XL> 
 	,(SUBRNG,) 				!MSG FAOCNT=2,<arithmetic trap, subscript out of range at PC=!XL, PSL= 
 ! 
 ! THE ABOVE CODES MUST BE IN ORDER SINCE THEY ARE CALCULATED 
 ! 
 ! 
 ! START NEXT SET OF HARDWARE EXCEPTION CODES AT 1412 
 ! 
 	); 
  
 ! 
 !	WARNING CODES 
 ! 
  
 LITERAL	
 $EQULST (SS$_,GBL,2048,8  
 	,(ACCONFLICT,) 			!MSG <file access conflict> 
 	,(BADCHKSUM,) 			!MSG <bad file header checksum> 
 	,(BADFILEHDR,) 			!MSG <bad file header> 
 	,(BADFILENAME,) 			!MSG <bad file name syntax> 
 	,(BADFILEVER,) 			!MSG <bad file version number> 
 	,(BADIRECTORY,) 			!MSG <bad directory file format> 
 	,(CANCEL,) 				!MSG <I/O operation canceled> 
 	,(DATAOVERUN,) 			!MSG <data overrun> 
 	,(DEVALLOC,) 			!MSG <device already allocated to another user> 
 	,(DEVASSIGN,) 			!MSG <device has channels assigned> 
 	,(DEVICEFULL,) 			!MSG <device full - allocation failure> 
 	,(DEVNOTALLOC,) 			!MSG <device not allocated> 
 	,(DIRFULL,) 				!MSG <directory is full> 
 	,(DUPFILENAME,) 			!MSG <duplicate file name> 
 	,(ENDOFFILE,) 			!MSG <end of file> 
 	,(ENDOFTAPE,) 			!MSG <end of tape> 
 	,(EXTIDXFILE,) 			!MSG <***** obsolete - delete when convenient> 
 	,(FCPREADERR,) 			!MSG <file processor read error> 
 	,(FCPREWNDERR,) 			!MSG <file processor rewind error> 
 	,(FCPSPACERR,) 			!MSG <file processor space error> 
 	,(FCPWRITERR,) 			!MSG <file processor write error> 
 	,(FILELOCKED,) 			!MSG <file is deaccess locked> 
 	,(FILENUMCHK,) 			!MSG <file identification number check> 
 	,(FILESEQCHK,) 			!MSG <file identification sequence number check> 
 	,(FILESTRUCT,) 			!MSG <unsupported file structure level> 
 	,(HEADERFULL,) 			!MSG <file header is full> 
 	,(IDXFILEFULL,) 			!MSG <index file is full> 
 	,(MBFULL,) 				!MSG <mailbox is full> 
 	,(NOHOMEBLK,) 			!MSG <Files-11 home block not found on volume> 
 	,(NONEXPR,) 				!MSG <nonexistent process> 
 	,(NONLOCAL,) 			!MSG <device is not a local device> 
 	,(NOHANDLER,) 			!MSG <no condition handler found> 
 	,(NOSIGNAL,) 			!MSG <no signal currently active> 
 	,(NOSUCHDEV,) 			!MSG <no such device available> 
 	,(NOSUCHFILE,) 			!MSG <no such file> 
 	,(RESIGNAL,) 			!MSG <resignal condition to next handler> 
 	,(UNWIND,) 				!MSG <unwind currently in progress> 
 	,(UNWINDING,) 			!MSG <unwind already in progress> 
 ! ***** MOVE THE FOLLOWING INTO ALPHABETIC ORDER WHEN CONVENIENT 
 	,(NOMOREFILES,) 			!MSG <no more files> 
 	,(BEGOFFILE,) 			!MSG <beginning of file> 
 	,(BLOCKCNTERR,) 			!MSG <block count error> 
 	,(MUSTCLOSEFL,) 			!MSG <must close file> 
 	,(WAITUSRLBL,) 			!MSG <waiting for user labels> 
 	,(ILLUSRLBLRD,) 			!MSG <illegal read of user labels> 
 	,(ILLUSRLBLWT,) 			!MSG <illegal write of user labels> 
 	,(ILLLBLAST,) 			!MSG <illegal user label AST control block address> 
 	,(ENDOFUSRLBL,) 			!MSG <end of user labels> 
 	,(NOSUCHSEC,) 			!MSG <no such (global) section> 
 	,(CLIFRCEXT,) 			!MSG <CLI forced exit> 
 	,(FCPREPSTN,) 			!MSG <file processor reposition error> 
 	,(TOOMANYVER,) 			!MSG <too many higher file versions> 
 	); 
  
 ! 
 ! SUCCESS CODES 
 ! ***** DO NOT MIX EXPLICITLY DEFINED CODES WITH INCREMENTAL ASSIGNMENTS 
 ! 
  
 LITERAL	
 $EQULST (SS$_,GBL,1537,8  
 	,(BUFFEROVF,) 			!MSG <output buffer overflow> 
 	,(CONTROLO,) 			!MSG <output completed under CTRL/O> 
 	,(CONTROLY,) 			!MSG <operation completed under CTRL/Y> 
 	,(CREATED,) 				!MSG <file did not exist - was created> 
 	,(MSGNOTFND,) 			!MSG <message not in system message file> 
 	,(NOTRAN,) 				!MSG <no string translation performed> 
 	,(SUPERSEDE,) 			!MSG <logical name superseded> 
 	,(WASECC,) 				!MSG <successful transfer! no data check> 
 ! ***** MOVE THE FOLLOWING INTO ALPHABETIC ORDER WHEN CONVENIENT 
 	,(DEVALRALLOC,) 			!MSG <device already allocated to this job> 
 	,(REMOTE,) 				!MSG <assignment completed on remote node> 
 	,(CONTROLC,) 			!MSG <operation completed under CTRL/C> 
 	,(NOTMODIFIED,) 			!MSG <no pages in the section were modified> 
 	); 
  
 LITERAL	
 $EQULST (SS$_,GBL,0,1  
 	,(CONTINUE,1) 			!<continue execution at point of condition> 
 	,(NORMAL,1) 			!MSG <normal successful completion> 
 	,(WASCLR,1) 			!<previous state was clear> 
 	,(WASSET,9) 			!<previous state was set> 
 	); 

 ! 
 ! Macros to define shared VAX/VMS message codes. 
 ! 
  
 ! These message codes should not be used directly by a facility since 
 ! they do not contain a subsystem (i.e., facility) identifier or a 
 ! severity code.  Use the following formula to calculate actual facility 
 ! message codes. 
  
 !	facility message code = common message code + 
 !				facility id * 65536 + 
 !				severity code 
  
 !...$SHRDEF	
  
 LITERAL	
 $EQULST (SHR$_,GBL,4096,8  
 	,(APPENDEDB,) 		!MSG IDENT=APPENDED,FAOCNT=3,<!AS appended to !AS (!UL block!%S)> 
 	,(APPENDEDR,) 		!MSG IDENT=APPENDED,FAOCNT=3,<!AS appended to !AS (!UL record!%S)> 
 	,(BADBYTE,) 			!MSG IDENT=BADDATA,FAOCNT=2,<invalid data (!XB) at !XL> 
 	,(BADFIELD,) 		!MSG FAOCNT=2,<!AS field invalid at !XL> 
 	,(BADLONG,) 			!MSG IDENT=BADDATA,FAOCNT=2,<invalid data (!XL) at !XL> 
 	,(BADWORD,) 			!MSG IDENT=BADDATA,FAOCNT=2,<invalid data (!XW) at !XL> 
 	,(BEGIN,) 			!MSG FAOCNT=1,<!AS beginning> 
 	,(BEGIND,) 			!MSG IDENT=BEGIN,FAOCNT=2,<!AS beginning at !%D> 
 	,(BEGINT,) 			!MSG IDENT=BEGIN,FAOCNT=2,<!AS beginning at !%T> 
 	,(CLICB,) 			!MSG FAOCNT=1,<CLI control block at !XL> 
 	,(CLOSEIN,) 			!MSG FAOCNT=1,<error closing !AS as input> 
 	,(CLOSEOUT,) 		!MSG FAOCNT=1,<error closing !AS as output> 
 	,(COPIEDB,) 			!MSG IDENT=COPIED,FAOCNT=3,<!AS copied to !AS (!UL block!%S)> 
 	,(COPIEDR,) 			!MSG IDENT=COPIED,FAOCNT=3,<!AS copied to !AS (!UL record!%S)> 
 	,(CREATED,) 			!MSG FAOCNT=1,<!AS created> 
 	,(ENDED,) 			!MSG FAOCNT=1,<!AS ended> 
 	,(ENDEDD,) 			!MSG IDENT=ENDED,FAOCNT=2,<!AS ended at !%D> 
 	,(ENDEDT,) 			!MSG IDENT=ENDED,FAOCNT=2,<!AS ended at !%T> 
 	,(NEWFILES,) 		!MSG FAOCNT=1,<!UL file!%S created> 
 	,(OPENIN,) 			!MSG FAOCNT=1,<error opening !AS as input> 
 	,(OPENOUT,) 			!MSG FAOCNT=1,<error opening !AS as output> 
 	,(OVERLAY,) 			!MSG FAOCNT=1,<!AS being overwritten> 
 	,(READERR,) 			!MSG FAOCNT=1,<error reading !AS> 
 	,(REPLACED,) 		!MSG FAOCNT=1,<!AS being replaced> 
 	,(WILDCONCAT,) 		!MSG IDENT=CONCAT,FAOCNT=0,<wildcard specification cannot be concate 
 	,(WILDOUTVER,) 		!MSG FAOCNT=0,<wildcard version required for output file> 
 	,(WRITEERR,) 		!MSG FAOCNT=1,<error writing !AS> 
 	,(ABEND,) 			!MSG IDENT=ABORT,FAOCNT=1,<!AS aborted> 
 	,(ABENDD,) 			!MSG IDENT=ABORT,FAOCNT=2,<!AS aborted at !%D> 
 	,(ABENDT,) 			!MSG IDENT=ABORT,FAOCNT=2,<!AS aborted at !%T> 
 	,(SYSERRORPC,) 		!MSG IDENT=SYSERROR,FAOCNT=2,<!AS system service error at PC !XL> 
 	,(SYNTAX,) 			!MSG FAOCNT=1,<error parsing '!AS'> 
 	,(NOVALUE,) 			!MSG FAOCNT=1,<'!AS' keyword requires a value> 
 	,(BADKEY,) 			!MSG FAOCNT=1,<'!AS' is an invalid keyword> 
 	,(BADVALUE,) 		!MSG FAOCNT=1,<'!AS' is an invalid keyword value> 
 	,(BADDELIM,) 		!MSG FAOCNT=1,<invalid delimiter following '!AS'> 
 	,(BADLOGIC,) 		!MSG FAOCNT=0,<internal logic error detected> 
 	,(NOWILD,) 			!MSG FAOCNT=0,<no wildcard permitted> 
 	,(TEXT,) 			!MSG FAOCNT=1,<!AS> 
 	,(IDXCONCAT,) 		!MSG IDENT=CONCAT,FAOCNT=0,<indexed file cannot be concatenated> 
 	,(RELCONCAT,) 		!MSG IDENT=CONCAT,FAOCNT=0,<relative file cannot be concatenated> 
 	,(HIGHVER,) 			!MSG FAOCNT=1,<higher version of !AS already exists> 
 	,(BADLOGICPC,) 		!MSG IDENT=BADLOGIC,FAOCNT=1,<internal logic error detected at PC !X 
 	,(ATPC,) 			!MSG FAOCNT=1,<at PC !XL> 
 	,(BADCOPIES,) 		!MSG IDENT=BADVALUE,FAOCNT=1,<'!AS' is an invalid number of copies> 
 	,(BADFORM,) 			!MSG IDENT=BADVALUE,FAOCNT=1,<'!AS' is an invalid form type> 
 	,(BADJOBID,) 		!MSG IDENT=BADVALUE,FAOCNT=1,<'!AS' is an invalid job identifier> 
 	,(BADJOBNAME,) 		!MSG IDENT=BADVALUE,FAOCNT=1,<'!AS' is an invalid job name> 
 	,(BADPRTY,) 			!MSG IDENT=BADVALUE,FAOCNT=1,<'!AS' is an invalid priority> 
 	,(BADQNAME,) 		!MSG IDENT=BADVALUE,FAOCNT=1,<'!AS' is an invalid queue name> 
 	,(BADTIME,) 			!MSG IDENT=BADVALUE,FAOCNT=1,<'!AS' is an invalid time specification> 
 	,(NOQUEUE,) 			!MSG FAOCNT=1,<!AS queue does not exist> 
 	,(NOJOBID,) 			!MSG IDENT=NOJOB,FAOCNT=1,<job !UW not found in !AS queue> 
 	,(NOJOBNAME,) 		!MSG IDENT=NOJOB,FAOCNT=1,<job !AS not found in !AS queue> 
 	,(SYSERROR,) 		!MSG FAOCNT=0,<system service error> 
 	,(NOTCOPIED,) 		!MSG FAOCNT=1,<!AS not copied> 
 	,(NOTCMPLT,) 		!MSG FAOCNT=1,<!AS not completely copied> 
 	,(RMSERROR,) 		!MSG FAOCNT=0,<RMS service error> 
 	,(UNXPCTSTS,) 		!MSG FAOCNT=1,<unexpected status detected. Expected '!AS'. Found:> 
 	,(HASHCONCAT,) 		!MSG IDENT=CONCAT,FAOCNT=0,<hashed file cannot be concatenated> 
 	,(INCOMPAT,) 		!MSG FAOCNT=2,<!AS (input) and !AS (output) have incompatible attribut 
 	,(VALERR,) 			!MSG <specified value is out of legal range> 
 	,(FILNOTDEL,) 		!MSG FAOCNT=1,<error deleting !AS> 
 	,(CONFDEL,) 			!MSG FAOCNT=1,<!/!AS, delete? (Y or N):> 
 	,(DELETED,) 			!MSG FAOCNT=1,<!AS deleted> 
 	,(DELVER,) 			!MSG <explicit version number or wild card required> 
 	,(PURGEVER,) 		!MSG <version numbers not permitted> 
 	,(CLOSEDEL,) 		!MSG FAOCNT=1,<error closing !AS> 
 	,(DIRTOOBUS,) 		!MSG <directory is presently too active to be purged> 
 	,(NOFILPURG,) 		!MSG FAOCNT=1,<no files purged for !AS> 
 	,(FILNOTPUR,) 		!MSG FAOCNT=2,<error deleting !AS!SW> 
 	,(SEARCHFAIL,) 		!MSG FAOCNT=1,<error searching for !AS> 
 	,(DELINTERR,) 		!MSG <internal error in DELETE/PURGE utility> 
 	,(PARSEFAIL,) 		!MSG FAOCNT=1,<error parsing !AS> 
 	,(FILPURGED,) 		!MSG FAOCNT=2,<!AS!SW deleted> 
 	); 

 !	$BEGIN	RMSUSR,013 
 ! 
 !	RMS USER STRUCTURE DEFINITIONS 
 ! 
 !	MODIFIED BY: 
 ! 
 !	L F LAVERDURE,   14-JUL-78  9:24 
 !	E H MARISON,	 19-APR-78  16:20 
 !	E H MARISON,	 26-APR-78  13:08 
 !	W KOENIG,	 16-JUN-78, ADDED DCT BIT IN KEY XAB 
 ! 
 !	FILE ACCESS BLOCK (FAB) DEFINITIONS 
 ! 
 ! 
 !...$FABDEF	
  
 !+++++***** 
 !   THE FIELDS THRU CTX MUST NOT BE MODIFIED DUE TO 
 !   COMMONALITY BETWEEN FAB/RAB/XAB 
 MACRO		FAB$B_BID	= 0,0,8,0%; 		! BLOCK ID 
 LITERAL	FAB$C_BID	= 3; 		! CODE FOR FAB 
 MACRO		FAB$B_BLN	= 1,0,8,0%; 		! BLOCK LEN 
 MACRO		FAB$W_IFI	= 2,0,16,0%; 		! INTERNAL FILE INDEX 
 			 
 						! MOVE TO BIT 6 
 MACRO		FAB$V_PPF_RAT	= 2,6,8,0%; 	! RAT VALUE FOR PROCESS-PERMANENT FILES 
 LITERAL	FAB$M_PPF_RAT	= 1^14 - 1^6; 
 MACRO		FAB$V_PPF_IND	= 2,14,1,0%; 		! INDRECT ACCESS TO PROCESS-PERMANENT FILE 
 LITERAL	FAB$M_PPF_IND	= 1^15 - 1^14; 
 			! (I.E., RESTRICTED OPERATIONS) 
 			
 MACRO		FAB$L_FOP	= 4,0,32,0%; 		! FILE OPTIONS 
 			 
 						! RESERVED FOR ASY (NOT IMPLEMENTED) 
 MACRO		FAB$V_MXV	= 4,1,1,0%; 		! MAXIMIZE VERSION NUMBER 
 LITERAL	FAB$M_MXV	= 1^2 - 1^1; 
 MACRO		FAB$V_SUP	= 4,2,1,0%; 		! SUPERSEDE EXISTING FILE 
 LITERAL	FAB$M_SUP	= 1^3 - 1^2; 
 MACRO		FAB$V_TMP	= 4,3,1,0%; 		! CREATE TEMPORARY FILE 
 LITERAL	FAB$M_TMP	= 1^4 - 1^3; 
 MACRO		FAB$V_TMD	= 4,4,1,0%; 		! CREATE TEMP FILE MARKED FOR DELETE 
 LITERAL	FAB$M_TMD	= 1^5 - 1^4; 
 MACRO		FAB$V_DFW	= 4,5,1,0%; 		! DEFERRED WRITE (REL AND IDX) 
 LITERAL	FAB$M_DFW	= 1^6 - 1^5; 
 MACRO		FAB$V_SQO	= 4,6,1,0%; 		! SEQUENTIAL ACCESS ONLY 
 LITERAL	FAB$M_SQO	= 1^7 - 1^6; 
 MACRO		FAB$V_RWO	= 4,7,1,0%; 		! REWIND MT ON OPEN 
 LITERAL	FAB$M_RWO	= 1^8 - 1^7; 
 MACRO		FAB$V_POS	= 4,8,1,0%; 		! USE NEXT MAGTAPE POSITION 
 LITERAL	FAB$M_POS	= 1^9 - 1^8; 
 MACRO		FAB$V_WCK	= 4,9,1,0%; 		! WRITE CHECKING 
 LITERAL	FAB$M_WCK	= 1^10 - 1^9; 
 MACRO		FAB$V_NEF	= 4,10,1,0%; 		! INHIBIT END OF FILE POSITIONING 
 LITERAL	FAB$M_NEF	= 1^11 - 1^10; 
 MACRO		FAB$V_RWC	= 4,11,1,0%; 		! REWIND MT ON CLOSE 
 LITERAL	FAB$M_RWC	= 1^12 - 1^11; 
 MACRO		FAB$V_DMO	= 4,12,1,0%; 		! DISMOUNT MT ON CLOSE (NOT IMPLEMENTED) 
 LITERAL	FAB$M_DMO	= 1^13 - 1^12; 
 MACRO		FAB$V_SPL	= 4,13,1,0%; 		! SPOOL FILE ON CLOSE 
 LITERAL	FAB$M_SPL	= 1^14 - 1^13; 
 MACRO		FAB$V_SCF	= 4,14,1,0%; 		! SUBMIT COMMAND FILE ON CLOSE 
 LITERAL	FAB$M_SCF	= 1^15 - 1^14; 
 MACRO		FAB$V_DLT	= 4,15,1,0%; 		! DELETE SUB-OPTION 
 LITERAL	FAB$M_DLT	= 1^16 - 1^15; 
 MACRO		FAB$V_NFS	= 4,16,1,0%; 		! NON-FILE STRUCTURED OPERATION 
 LITERAL	FAB$M_NFS	= 1^17 - 1^16; 
 MACRO		FAB$V_UFO	= 4,17,1,0%; 		! USER FILE OPEN - NO RMS OPERATIONS 
 LITERAL	FAB$M_UFO	= 1^18 - 1^17; 
 MACRO		FAB$V_PPF	= 4,18,1,0%; 		! PROCESS PERMANENT FILE (PIO SEGMENT) 
 LITERAL	FAB$M_PPF	= 1^19 - 1^18; 
 MACRO		FAB$V_INP	= 4,19,1,0%; 		! PROCESS-PERMANENT FILE IS 'INPUT' 
 LITERAL	FAB$M_INP	= 1^20 - 1^19; 
 MACRO		FAB$V_CTG	= 4,20,1,0%; 		! CONTIGUOUS EXTENSION 
 LITERAL	FAB$M_CTG	= 1^21 - 1^20; 
 MACRO		FAB$V_CBT	= 4,21,1,0%; 		! CONTIGUOUS BEST TRY 
 LITERAL	FAB$M_CBT	= 1^22 - 1^21; 
 MACRO		FAB$V_JNL	= 4,22,1,0%; 		! EXPLICIT LOGGING (NOT IMPLEMENTED) 
 LITERAL	FAB$M_JNL	= 1^23 - 1^22; 
 MACRO		FAB$V_RCK	= 4,23,1,0%; 		! READ CHECKING 
 LITERAL	FAB$M_RCK	= 1^24 - 1^23; 
 MACRO		FAB$V_NAM	= 4,24,1,0%; 		! USE NAME BLOCK DVI, DID, AND/OR FID FIELDS FOR OPEN 
 LITERAL	FAB$M_NAM	= 1^25 - 1^24; 
 MACRO		FAB$V_CIF	= 4,25,1,0%; 		! CREATE IF NON-EXISTENT 
 LITERAL	FAB$M_CIF	= 1^26 - 1^25; 
 MACRO		FAB$V_UFM	= 4,26,1,0%; 		! USER FILE OPEN MODE (USER IF 1, SUPER IF 0) 
 LITERAL	FAB$M_UFM	= 1^27 - 1^26; 
 			!  ENABLE ONLY IF ESC AND (UFO OR NFS) ARE ALSO ON 
 			!  (NOTE: THIS BIT MUST IMMEDIATELY PRECEDE ESC) 
 MACRO		FAB$V_ESC	= 4,27,1,0%; 		! 'ESCAPE' TO NON-STANDARD FUNCTION ($MODIFY) 
 LITERAL	FAB$M_ESC	= 1^28 - 1^27; 
 MACRO		FAB$V_TEF	= 4,28,1,0%; 		! TRUNCATE AT EOF ON CLOSE (WRITE-ACCESSED SEQ. DISK FILE ONLY) 
 LITERAL	FAB$M_TEF	= 1^29 - 1^28; 
 MACRO		FAB$V_OFP	= 4,29,1,0%; 		! OUTPUT FILE PARSE (ONLY NAME TYPE STICKY) 
 LITERAL	FAB$M_OFP	= 1^30 - 1^29; 
 MACRO		FAB$V_KFO	= 4,30,1,0%; 		! KNOWN FILE OPEN (IMAGE ACTIVATOR ONLY RELEASE 1) 
 LITERAL	FAB$M_KFO	= 1^31 - 1^30; 
 			
 MACRO		FAB$L_STS	= 8,0,32,0%; 		! STATUS 
 MACRO		FAB$L_STV	= 12,0,32,0%; 		! STATUS VALUE 
 MACRO		FAB$L_ALQ	= 16,0,32,0%; 		! ALLOCATION QUANTITY 
 MACRO		FAB$W_DEQ	= 20,0,16,0%; 		! DEFAULT ALLOCATION QUANTITY 
 MACRO		FAB$B_FAC	= 22,0,8,0%; 		! FILE ACCESS 
 			 
 MACRO		FAB$V_PUT	= 22,0,1,0%; 		! PUT ACCESS 
 LITERAL	FAB$M_PUT	= 1^1 - 1^0; 
 MACRO		FAB$V_GET	= 22,1,1,0%; 		! GET ACCESS 
 LITERAL	FAB$M_GET	= 1^2 - 1^1; 
 MACRO		FAB$V_DEL	= 22,2,1,0%; 		! DELETE ACCESS 
 LITERAL	FAB$M_DEL	= 1^3 - 1^2; 
 MACRO		FAB$V_UPD	= 22,3,1,0%; 		! UPDATE ACCESS 
 LITERAL	FAB$M_UPD	= 1^4 - 1^3; 
 MACRO		FAB$V_TRN	= 22,4,1,0%; 		! TRUNCATE ACCESS 
 LITERAL	FAB$M_TRN	= 1^5 - 1^4; 
 MACRO		FAB$V_BIO	= 22,5,1,0%; 		! BLOCK I/O ACCESS 
 LITERAL	FAB$M_BIO	= 1^6 - 1^5; 
 MACRO		FAB$V_BRO	= 22,6,1,0%; 		! BLOCK AND RECORD I/O ACCESS 
 LITERAL	FAB$M_BRO	= 1^7 - 1^6; 
 MACRO		FAB$V_EXE	= 22,7,1,0%; 		! EXECUTE ACCESS (CALLER MUST BE EXEC OR KERNEL MODE, 
 LITERAL	FAB$M_EXE	= 1^8 - 1^7; 
 			!  UFO MUST ALSO BE SET) 
 			
 MACRO		FAB$B_SHR	= 23,0,8,0%; 		! FILE SHARING 
 			 
 MACRO		FAB$V_SHRPUT	= 23,0,1,0%; 	! PUT ACCESS 
 LITERAL	FAB$M_SHRPUT	= 1^1 - 1^0; 
 MACRO		FAB$V_SHRGET	= 23,1,1,0%; 	! GET ACCESS 
 LITERAL	FAB$M_SHRGET	= 1^2 - 1^1; 
 MACRO		FAB$V_SHRDEL	= 23,2,1,0%; 	! DELETE ACCESS 
 LITERAL	FAB$M_SHRDEL	= 1^3 - 1^2; 
 MACRO		FAB$V_SHRUPD	= 23,3,1,0%; 	! UPDATE ACCESS 
 LITERAL	FAB$M_SHRUPD	= 1^4 - 1^3; 
 MACRO		FAB$V_MSE	= 23,4,1,0%; 		! MULTI-STREAM CONNECTS ENABLED 
 LITERAL	FAB$M_MSE	= 1^5 - 1^4; 
 MACRO		FAB$V_NIL	= 23,5,1,0%; 		! NO SHARING 
 LITERAL	FAB$M_NIL	= 1^6 - 1^5; 
 MACRO		FAB$V_UPI	= 23,6,1,0%; 		! USER PROVIDED INTERLOCKING (ALLOWS MULTIPLE 
 LITERAL	FAB$M_UPI	= 1^7 - 1^6; 
 			!  WRITERS TO SEQ. FILES) 
 			
 MACRO		FAB$L_CTX	= 24,0,32,0%; 		! USER CONTEXT 
 !-----***** 
 MACRO		FAB$B_RTV	= 28,0,8,1%; 	! RETRIEVAL WINDOW SIZE 
 MACRO		FAB$B_ORG	= 29,0,8,0%; 		! FILE ORGANIZATION 
 			 
 				 
 MACRO		FAB$V_ORG	= 29,4,4,0%;  
 			
 LITERAL	FAB$C_SEQ	= 0; 		! SEQUENTIAL 
 LITERAL	FAB$C_REL	= 16; 		! RELATIVE 
 LITERAL	FAB$C_IDX	= 32; 		! INDEXED 
 LITERAL	FAB$C_HSH	= 48; 		! HASHED 
 MACRO		FAB$B_RAT	= 30,0,8,0%; 		! RECORD FORMAT 
 			 
 MACRO		FAB$V_FTN	= 30,0,1,0%; 		! FORTRAN CARRIAGE-CTL 
 LITERAL	FAB$M_FTN	= 1^1 - 1^0; 
 MACRO		FAB$V_CR	= 30,1,1,0%; 		! LF-RECORD-CR CARRIAGE CTL 
 LITERAL	FAB$M_CR	= 1^2 - 1^1; 
 MACRO		FAB$V_PRN	= 30,2,1,0%; 		! PRINT-FILE CARRIAGE CTL 
 LITERAL	FAB$M_PRN	= 1^3 - 1^2; 
 MACRO		FAB$V_BLK	= 30,3,1,0%; 		! RECORDS DON'T CROSS BLOCK BOUNDARIES 
 LITERAL	FAB$M_BLK	= 1^4 - 1^3; 
 			
 MACRO		FAB$B_RFM	= 31,0,8,0%; 		! RECORD FORMAT 
 LITERAL	FAB$C_RFM_DFLT	= 2; 		! VAR LEN IS DEFAULT 
 LITERAL	FAB$C_UDF	= 0; 		! UNDEFINED 
 LITERAL	FAB$C_FIX	= 1; 		! FIXED LENGTH RECORDS 
 LITERAL	FAB$C_VAR	= 2; 		! VARIABLE LENGTH RECORDS 
 LITERAL	FAB$C_VFC	= 3; 		! VARIABLE FIXED CONTROL 
 LITERAL	FAB$C_MAXRFM	= 3; 		! MAXIMUM RFM SUPPORTED 
 MACRO		FAB$L_JNL	= 32,0,32,0%; 		! LCB ADDRESS 
 MACRO		FAB$L_XAB	= 36,0,32,0%; 		! XAB ADDRESS 
 MACRO		FAB$L_NAM	= 40,0,32,0%; 		! NAM BLOCK ADDRESS 
 MACRO		FAB$L_FNA	= 44,0,32,0%; 		! FILE NAME STRING ADDRESS 
 MACRO		FAB$L_DNA	= 48,0,32,0%; 		! DEFAULT FILE NAME STRING ADDR 
 MACRO		FAB$B_FNS	= 52,0,8,0%; 		! FILE NAME STRING SIZE 
 MACRO		FAB$B_DNS	= 53,0,8,0%; 		! DEFAULT NAME STRING SIZE 
 MACRO		FAB$W_MRS	= 54,0,16,0%; 		! MAXIMUM RECORD SIZE 
 MACRO		FAB$L_MRN	= 56,0,32,0%; 		! MAXIMUM RECORD NUMBER 
 MACRO		FAB$W_BLS	= 60,0,16,0%; 		! BLOCKSIZE FOR TAPE 
 MACRO		FAB$B_BKS	= 62,0,8,0%; 		! BUCKET SIZE 
 MACRO		FAB$B_FSZ	= 63,0,8,0%; 		! FIXED HEADER SIZE 
 MACRO		FAB$L_DEV	= 64,0,32,0%; 		! DEVICE CHARACTERISTICS 
 MACRO		FAB$L_SDC	= 68,0,32,0%; 		! SPOOLING DEVICE CHARACTERISTICS 
 LITERAL	FAB$C_BLN	= 80; 
 LITERAL	FAB$K_BLN	= 80; 			! LENGTH OF FAB 

  
 ! 
 !	 RECORD ACCESS BLOCK (RAB) DEFINITIONS 
 ! 
 !  THERE IS ONE RAB PER CONNECTED STREAM 
 !  IT IS USED FOR ALL COMMUNICATIONS BETWEEN THE USER 
 !  AND RMS CONCERNING OPERATIONS ON THE STREAM 
 ! 
 !...$RABDEF	
  
 !+++++***** 
 !  THE FIELDS THRU CTX CANNOT BE CHANGED DUE TO COMMONALITY 
 !  WITH THE FAB 
 ! 
 MACRO		RAB$B_BID	= 0,0,8,0%; 		! BLOCK ID 
 LITERAL	RAB$C_BID	= 1; 		! CODE FOR RAB 
 MACRO		RAB$B_BLN	= 1,0,8,0%; 		! BLOCK LENGTH 
 MACRO		RAB$W_ISI	= 2,0,16,0%; 		! INTERNAL STREAM INDEX 
 			! (IFI IN FAB) 
 			 
 						! MOVE TO BIT 6 
 MACRO		RAB$V_PPF_RAT	= 2,6,8,0%; 	! RAT VALUE FOR PROCESS-PERMANENT FILES 
 LITERAL	RAB$M_PPF_RAT	= 1^14 - 1^6; 
 MACRO		RAB$V_PPF_IND	= 2,14,1,0%; 	! INDIRECT ACCESS TO PROCESS-PERMANENT FILE 
 LITERAL	RAB$M_PPF_IND	= 1^15 - 1^14; 
 			! (I.E., RESTRICTED OPERATIONS) 
 			
 MACRO		RAB$L_ROP	= 4,0,32,0%; 		! RECORD OPTIONS 
 			 
 			! THE FOLLOWING BITS MAY BE 
 			! INPUT TO VARIOUS RAB-RELATED 
 			! OPERATIONS 
 			! 
 MACRO		RAB$V_ASY	= 4,0,1,0%; 		! ASYNCHRONOUS OPERATIONS 
 LITERAL	RAB$M_ASY	= 1^1 - 1^0; 
 MACRO		RAB$V_TPT	= 4,1,1,0%; 		! TRUNCATE PUT  -  ALLOW SEQUENTIAL PUT NOT AT 
 LITERAL	RAB$M_TPT	= 1^2 - 1^1; 
 			!   EOF, THUS TRUNCATING FILE (SEQ. ORG ONLY) 
 						! (SPARE) 
 MACRO		RAB$V_UIF	= 4,4,1,0%; 		! UPDATE IF EXISTENT 
 LITERAL	RAB$M_UIF	= 1^5 - 1^4; 
 MACRO		RAB$V_MAS	= 4,5,1,0%; 		! MASS-INSERT MODE 
 LITERAL	RAB$M_MAS	= 1^6 - 1^5; 
 MACRO		RAB$V_FDL	= 4,6,1,0%; 		! FAST RECORD DELETION 
 LITERAL	RAB$M_FDL	= 1^7 - 1^6; 
 MACRO		RAB$V_HSH	= 4,7,1,0%; 		! USE HASH CODE IN BKT 
 LITERAL	RAB$M_HSH	= 1^8 - 1^7; 
 			! 
 MACRO		RAB$V_EOF	= 4,8,1,0%; 		! CONNECT TO EOF 
 LITERAL	RAB$M_EOF	= 1^9 - 1^8; 
 MACRO		RAB$V_RAH	= 4,9,1,0%; 		! READ AHEAD 
 LITERAL	RAB$M_RAH	= 1^10 - 1^9; 
 MACRO		RAB$V_WBH	= 4,10,1,0%; 		! WRITE BEHIND 
 LITERAL	RAB$M_WBH	= 1^11 - 1^10; 
 MACRO		RAB$V_BIO	= 4,11,1,0%; 		! CONNECT FOR BIO ONLY 
 LITERAL	RAB$M_BIO	= 1^12 - 1^11; 
 						! (1 SPARE) 
 MACRO		RAB$V_LOA	= 4,13,1,0%; 		! USE BUCKET FILL PERCENTAGE 
 LITERAL	RAB$M_LOA	= 1^14 - 1^13; 
 MACRO		RAB$V_LIM	= 4,14,1,0%; 		! COMPARE FOR KEY LIMIT REACHED ON $GET/$FIND SEQ. (IDX ONLY) 
 LITERAL	RAB$M_LIM	= 1^15 - 1^14; 
 						! (1 SPARE) 
 			! 
 			! THE FOLLOWING BITS ARE INPUT TO 
 			! $FIND OR $GET 
 			! (SEPARATE BYTE) 
 			! 
 MACRO		RAB$V_LOC	= 4,16,1,0%; 		! USE LOCATE MODE 
 LITERAL	RAB$M_LOC	= 1^17 - 1^16; 
 MACRO		RAB$V_WAT	= 4,17,1,0%; 		! WAIT IF RECORD NOT AVAILABLE 
 LITERAL	RAB$M_WAT	= 1^18 - 1^17; 
 			! (NOT IN RELEASE 1) 
 MACRO		RAB$V_ULK	= 4,18,1,0%; 		! MANUAL UNLOCKING 
 LITERAL	RAB$M_ULK	= 1^19 - 1^18; 
 MACRO		RAB$V_RLK	= 4,19,1,0%; 		! ALLOW READERS FOR THIS LOCKED RECORD 
 LITERAL	RAB$M_RLK	= 1^20 - 1^19; 
 MACRO		RAB$V_NLK	= 4,20,1,0%; 		! DO NOT LOCK RECORD 
 LITERAL	RAB$M_NLK	= 1^21 - 1^20; 
 MACRO		RAB$V_KGE	= 4,21,1,0%; 		! KEY > OR = 
 LITERAL	RAB$M_KGE	= 1^22 - 1^21; 
 MACRO		RAB$V_KGT	= 4,22,1,0%; 		! KEY GREATER THAN 
 LITERAL	RAB$M_KGT	= 1^23 - 1^22; 
 MACRO		RAB$V_NXR	= 4,23,1,0%; 		! GET NON-EXISTENT RECORD 
 LITERAL	RAB$M_NXR	= 1^24 - 1^23; 
 			! 
 			!  THE FOLLOWING BITS ARE TERMINAL QUALIFIERS ONLY 
 			!  (SEPARATE BYTE) 
 			! 
 MACRO		RAB$V_RNE	= 4,24,1,0%; 		! READ NO ECHO 
 LITERAL	RAB$M_RNE	= 1^25 - 1^24; 
 MACRO		RAB$V_TMO	= 4,25,1,0%; 		! USE TIME-OUT PERIOD 
 LITERAL	RAB$M_TMO	= 1^26 - 1^25; 
 MACRO		RAB$V_CVT	= 4,26,1,0%; 		! CONVERT TO UPPER CASE 
 LITERAL	RAB$M_CVT	= 1^27 - 1^26; 
 MACRO		RAB$V_RNF	= 4,27,1,0%; 		! READ NO FILTER 
 LITERAL	RAB$M_RNF	= 1^28 - 1^27; 
 						! SPARE (FOR DSABLMBX IF EVER SUPPORTED) 
 MACRO		RAB$V_PTA	= 4,29,1,0%; 		! PURGE TYPE AHEAD 
 LITERAL	RAB$M_PTA	= 1^30 - 1^29; 
 MACRO		RAB$V_PMT	= 4,30,1,0%; 		! USE PROMPT BUFFER 
 LITERAL	RAB$M_PMT	= 1^31 - 1^30; 
 MACRO		RAB$V_CCO	= 4,31,1,0%; 		! CANCEL CONTROL O ON OUTPUT 
 LITERAL	RAB$M_CCO	= 1^32 - 1^31; 
 			
 MACRO		RAB$B_ROP1	= 5,0,8,0%; 	! VARIOUS OPTIONS 
 MACRO		RAB$B_ROP2	= 6,0,8,0%; 	! GET/FIND OPTIONS 
 MACRO		RAB$B_ROP3	= 7,0,8,0%; 	! TERMINAL READ OPTIONS 
 ! 
 MACRO		RAB$L_STS	= 8,0,32,0%; 		! STATUS 
 MACRO		RAB$L_STV	= 12,0,32,0%; 		! STATUS VALUE 
 MACRO		RAB$W_RFA	= 16,0,0,0%; 	! RECORD'S FILE ADDRESS 
 LITERAL	RAB$S_RFA	= 6; 
 MACRO		RAB$L_RFA0	= 16,0,32,0%;  
 MACRO		RAB$W_RFA4	= 20,0,16,0%;  
 			!  TO THE RFA FIELD TO BE A MOVE QUAD, OVERWRITING 
 			!  THIS RESERVED WORD) 
 MACRO		RAB$L_CTX	= 24,0,32,0%; 		! USER CONTEXT 
 !-----***** 
 MACRO		RAB$B_RAC	= 30,0,8,0%; 		! RECORD ACCESS 
 LITERAL	RAB$C_SEQ	= 0; 		! SEQUENTIAL ACCESS 
 LITERAL	RAB$C_KEY	= 1; 		! KEYED ACCESS 
 LITERAL	RAB$C_RFA	= 2; 		! RFA ACCESS 
 MACRO		RAB$B_TMO	= 31,0,8,0%; 		! TIME-OUT PERIOD 
 MACRO		RAB$W_USZ	= 32,0,16,0%; 		! USER BUFFER SIZE 
 MACRO		RAB$W_RSZ	= 34,0,16,0%; 		! RECORD BUFFER SIZE 
 MACRO		RAB$L_UBF	= 36,0,32,0%; 		! USER BUFFER ADDRESS 
 MACRO		RAB$L_RBF	= 40,0,32,0%; 		! RECORD BUFFER ADDRESS 
 MACRO		RAB$L_RHB	= 44,0,32,0%; 		! RECORD HEADER BUFFER ADDR 
 MACRO		RAB$L_KBF	= 48,0,32,0%; 		! KEY BUFFER ADDRESS 
 MACRO		RAB$L_PBF	= 48,0,32,0%; 	! PROMPT BUFFER ADDR 
 MACRO		RAB$B_KSZ	= 52,0,8,0%; 		! KEY BUFFER SIZE 
 MACRO		RAB$B_PSZ	= 52,0,8,0%; 	! PROMPT BUFFER SIZE 
 MACRO		RAB$B_KRF	= 53,0,8,0%; 		! KEY OF REFERENCE 
 MACRO		RAB$B_MBF	= 54,0,8,1%; 	! MULTI-BUFFER COUNT 
 MACRO		RAB$B_MBC	= 55,0,8,0%; 		! MULTI-BLOCK  COUNT 
 MACRO		RAB$L_BKT	= 56,0,32,0%; 		! BUCKET HASH CODE, VBN, OR RRN 
 MACRO		RAB$L_DCT	= 56,0,32,0%; 	! DUPLICATES COUNT ON KEY ACCESSED ON ALTERNATE KEY 
 MACRO		RAB$L_FAB	= 60,0,32,0%; 		! RELATED FAB FOR CONNECT 
 LITERAL	RAB$C_BLN	= 68; 
 LITERAL	RAB$K_BLN	= 68; 			! LENGTH OF RAB 

  
 ! 
 !	 NAME BLOCK FIELD DEFINITIONS 
 ! 
 !  THE NAM BLOCK IS USED TO COMMUNICATE OPTIONAL 
 !  FILENAME-RELATED INFORMATION 
 ! 
 !...$NAMDEF	
  
 MACRO		NAM$B_BID	= 0,0,8,0%; 		! BLOCK ID 
 LITERAL	NAM$C_BID	= 2; 		! CODE FOR NAM BLOCK 
 MACRO		NAM$B_BLN	= 1,0,8,0%; 		! BLOCK LENGTH 
 !+++++++++++++++++++++++ 
 !  THE FOLLOWING 3 FIELDS MUST NOT BE REARRANGED RELATIVE TO EACH OTHER 
 ! 
 MACRO		NAM$B_RSS	= 2,0,8,0%; 		! RESULTANT STRING AREA SIZE 
 LITERAL	NAM$C_MAXRSS	= 128; 		! MAXIMUM RESULTANT NAME STRING SIZE (NETWORK) 
 LITERAL	NAM$C_MAXRSSLCL	= 96; 		!MAXIMUM RESULTANT NAME STRING SIZE (LOCAL) 
 			!	DEV (15+1) 
 			!	DIR (60) 
 			!	NAME,TYPE,VERSION (9+3+6+2) 
 MACRO		NAM$B_RSL	= 3,0,8,0%; 		! RESULTANT STRING LENGTH 
 MACRO		NAM$L_RSA	= 4,0,32,0%; 		! RESULTANT STRING AREA ADDRESS 
 !----------------------- 
 !+++++++++++++++++++++++ 
 !  THE FOLLOWING 3 FIELDS MUST NOT BE REARRANGED RELATIVE TO EACH OTHER 
 ! 
 MACRO		NAM$B_ESS	= 10,0,8,0%; 		! ESPANDED STRING AREA SIZE 
 MACRO		NAM$B_ESL	= 11,0,8,0%; 		! EXPANDED STRING LENGTH 
 MACRO		NAM$L_ESA	= 12,0,32,0%; 		! EXPANDED STRING AREA ADDRESS 
 !----------------------- 
 MACRO		NAM$L_RLF	= 16,0,32,0%; 		! RELATED FILE NAM BLOCK ADDR 
 MACRO		NAM$T_DVI	= 20,0,0,0%; 	! DEVICE ID 
 LITERAL	NAM$S_DVI	= 16; 
 LITERAL	NAM$C_DVI	= 16; 		! LENGTH OF DVI FIELD 
 !+++++***** 
 !  THE LOCATION OF THE FOLLOWING FIELDS MUST NOT 
 !  BE CHANGED DUE TO THEIR COMMONALITY WITH THE FIB 
 MACRO		NAM$W_FID	= 36,0,0,0%; 	! FILE ID 
 LITERAL	NAM$S_FID	= 6; 
 MACRO		NAM$W_FID_NUM	= 36,0,16,0%; 	! FILE NUMBER 
 MACRO		NAM$W_FID_SEQ	= 38,0,16,0%; 	! SEQUENCE NUMBER 
 MACRO		NAM$W_FID_RVN	= 40,0,16,0%; 	! RELATIVE VOLUME NUMBER 
 MACRO		NAM$W_DID	= 42,0,0,0%; 	! DIRECTORY ID 
 LITERAL	NAM$S_DID	= 6; 
 MACRO		NAM$W_DID_NUM	= 42,0,16,0%; 	! FILE NUMBER 
 MACRO		NAM$W_DID_SEQ	= 44,0,16,0%; 	! SEQUENCE NUMBER 
 MACRO		NAM$W_DID_RVN	= 46,0,16,0%; 	! RELATIVE VOLUME NUMBER 
 MACRO		NAM$L_WCC	= 48,0,32,0%; 		! WILD CARD CONTEXT 
 MACRO		NAM$L_FNB	= 52,0,32,0%; 		! FILE NAME STATUS BITS 
 			 
 MACRO		NAM$V_EXP_VER	= 52,0,1,0%; 	! VERSION WAS EXPLICIT 
 LITERAL	NAM$M_EXP_VER	= 1^1 - 1^0; 
 MACRO		NAM$V_EXP_TYPE	= 52,1,1,0%; 	! TYPE WAS EXPLICIT 
 LITERAL	NAM$M_EXP_TYPE	= 1^2 - 1^1; 
 MACRO		NAM$V_EXP_NAME	= 52,2,1,0%; 	! NAME WAS EXPLICIT 
 LITERAL	NAM$M_EXP_NAME	= 1^3 - 1^2; 
 MACRO		NAM$V_WILD_VER	= 52,3,1,0%; 	! VERSION CONTAINED A WILD CARD 
 LITERAL	NAM$M_WILD_VER	= 1^4 - 1^3; 
 MACRO		NAM$V_WILD_TYPE	= 52,4,1,0%; 	! TYPE CONTAINED A WILD CARD 
 LITERAL	NAM$M_WILD_TYPE	= 1^5 - 1^4; 
 MACRO		NAM$V_WILD_NAME	= 52,5,1,0%; 	! NAME CONTAINED A WILD CARD 
 LITERAL	NAM$M_WILD_NAME	= 1^6 - 1^5; 
 MACRO		NAM$V_EXP_DIR	= 52,6,1,0%; 	! DIRECTORY WAS EXPLICIT 
 LITERAL	NAM$M_EXP_DIR	= 1^7 - 1^6; 
 MACRO		NAM$V_EXP_DEV	= 52,7,1,0%; 	! DEVICE WAS EXPLICIT 
 LITERAL	NAM$M_EXP_DEV	= 1^8 - 1^7; 
 MACRO		NAM$V_WILDCARD	= 52,8,1,0%; 	! FILENAME STRING INCLUDED A WILD CARD 
 LITERAL	NAM$M_WILDCARD	= 1^9 - 1^8; 
 			! (INCLUSIVE OR OF OTHER WILD CARD BITS) 
 						! (SPARES) 
 MACRO		NAM$V_LOWVER	= 52,14,1,0%; 	! LOWER NUMBERED VERSION(S) OF FILE EXIST(S) 
 LITERAL	NAM$M_LOWVER	= 1^15 - 1^14; 
 MACRO		NAM$V_HIGHVER	= 52,15,1,0%; 	! HIGHER 		" 
 LITERAL	NAM$M_HIGHVER	= 1^16 - 1^15; 
 			! 
 MACRO		NAM$V_PPF	= 52,16,1,0%; 		! PROCESS-PERMANENT FILE REFERENCED INDIRECTLY 
 LITERAL	NAM$M_PPF	= 1^17 - 1^16; 
 MACRO		NAM$V_NODE	= 52,17,1,0%; 		! FILENAME SPECIFICATION INCLUDED A NODENAME 
 LITERAL	NAM$M_NODE	= 1^18 - 1^17; 
 MACRO		NAM$V_QUOTED	= 52,18,1,0%; 	! FILENAME SPEC INCLUDED A QUOTED STRING 
 LITERAL	NAM$M_QUOTED	= 1^19 - 1^18; 
 MACRO		NAM$V_GRP_MBR	= 52,19,1,0%; 	! DIRECTORY SPEC WAS OF GROUP-MEMBER FORMAT 
 LITERAL	NAM$M_GRP_MBR	= 1^20 - 1^19; 
 MACRO		NAM$V_WILD_DIR	= 52,20,1,0%; 	! DIRECTORY SPEC INCLUDED A WILD CARD 
 LITERAL	NAM$M_WILD_DIR	= 1^21 - 1^20; 
 MACRO		NAM$V_DIR_LVLS	= 52,21,3,0%; 	! NUMBER OF DIRECTORY LEVELS (0=UFD ONLY) 
 LITERAL	NAM$M_DIR_LVLS	= 1^24 - 1^21; 
 			
 			 
 						! SEPARATE BYTE FOR WILD CARD DIRECTORY FLAGS 
 MACRO		NAM$V_WILD_UFD	= 52,24,1,0%; 	! UFD INCLUDED A WILD CARD 
 LITERAL	NAM$M_WILD_UFD	= 1^25 - 1^24; 
 MACRO		NAM$V_WILD_SFD1	= 52,25,1,0%; 	! SFD1 INCLUDED A WILD CARD 
 LITERAL	NAM$M_WILD_SFD1	= 1^26 - 1^25; 
 MACRO		NAM$V_WILD_SFD2	= 52,26,1,0%; 	! SFD2 INCLUDED A WILD CARD 
 LITERAL	NAM$M_WILD_SFD2	= 1^27 - 1^26; 
 MACRO		NAM$V_WILD_SFD3	= 52,27,1,0%; 	! SFD3 INCLUDED A WILD CARD 
 LITERAL	NAM$M_WILD_SFD3	= 1^28 - 1^27; 
 MACRO		NAM$V_WILD_SFD4	= 52,28,1,0%; 	! SFD4 INCLUDED A WILD CARD 
 LITERAL	NAM$M_WILD_SFD4	= 1^29 - 1^28; 
 MACRO		NAM$V_WILD_SFD5	= 52,29,1,0%; 	! SFD5 INCLUDED A WILD CARD 
 LITERAL	NAM$M_WILD_SFD5	= 1^30 - 1^29; 
 MACRO		NAM$V_WILD_SFD6	= 52,30,1,0%; 	! SFD6 INCLUDED A WILD CARD 
 LITERAL	NAM$M_WILD_SFD6	= 1^31 - 1^30; 
 MACRO		NAM$V_WILD_SFD7	= 52,31,1,0%; 	! SFD7 INCLUDED A WILD CARD 
 LITERAL	NAM$M_WILD_SFD7	= 1^32 - 1^31; 
 			
 			 
 						! ALTERNATE DEFINITIONS FOR WILD_UFD AND WILD_SFD1 
 MACRO		NAM$V_WILD_GRP	= 52,24,1,0%; 	! GROUP CONTAINED A WILD CARD 
 LITERAL	NAM$M_WILD_GRP	= 1^25 - 1^24; 
 MACRO		NAM$V_WILD_MBR	= 52,25,1,0%; 	! MEMBER CONTAINED A WILD CARD 
 LITERAL	NAM$M_WILD_MBR	= 1^26 - 1^25; 
 			
 !-----***** 
 LITERAL	NAM$C_BLN	= 56; 
 LITERAL	NAM$K_BLN	= 56; 			! NAME BLOCK LENGTH 
 ! 
 !  THE FOLLOWING FIELDS CONSTITUTE A LONGER NAME BLOCK THAT IS 
 !  SUITABLE FOR USE WITH WILD CARD DIRECTORY OPERATIONS 
 ! 
 MACRO		NAM$L_DWC	= 56,0,0,0%; 		! DIRECTORY WILD CARD CONTEXT 
 LITERAL	NAM$S_DWC	= 24; 
 MACRO		NAM$B_CURLVL	= 56,0,8,0%; 		! CURRENT LEVEL 
 MACRO		NAM$W_PRV_DID	= 58,0,0,0%; 	! PREVIOUS LEVEL DID 
 LITERAL	NAM$S_PRV_DID	= 6; 
 MACRO		NAM$L_DIRWCC1	= 64,0,32,0%; 		! MFD DIRECTORY CONTEXT 
 MACRO		NAM$L_DIRWCC2	= 68,0,32,0%; 	! UFD DIRECTORY CONTEXT 
 MACRO		NAM$L_DIRWCC3	= 72,0,32,0%; 	! SFD1 DIRECTORY CONTEXT 
 MACRO		NAM$L_DIRWCC4	= 76,0,32,0%; 	! SFD2 DIRECTORY CONTEXT 
 LITERAL	NAM$C_BLN_DIRWC	= 80; 
 LITERAL	NAM$K_BLN_DIRWC	= 80; 	 

  
 ! 
 !	 DEFINITIONS FOR ALL XABS 
 !		$XABDEF 
 ! 
 ! 
 !...$XABDEF	
 ! 
 !  THE FIRST FOUR FIELDS ARE SHARED IN COMMON BETWEEN ALL XABS 
 !  AND HENCE ARE DEFINED ONLY ONCE 
 !  (THE ONLY EXCEPTION IS THAT THE SPARE WORD MAY BE USED BY SOME XABS) 
 ! 
 MACRO		XAB$B_COD	= 0,0,8,0%; 		! XAB ID CODE 
 MACRO		XAB$B_BLN	= 1,0,8,0%; 		! BLOCK LENGTH 
 MACRO		XAB$L_NXT	= 4,0,32,0%; 		! XAB CHAIN LINK 
 					!UP TILL NOW COMMON AMONG ALL XABS 
 			!WITH POSSIBLE EXCEPTION OF SPARE FIELD 
 MACRO		XAB$W_RVN	= 8,0,16,0%;  
 MACRO		XAB$Q_RDT	= 12,0,0,1%;  
 LITERAL	XAB$S_RDT	= 8; 
 MACRO		XAB$L_RDT0	= 12,0,32,0%;  
 MACRO		XAB$L_RDT4	= 16,0,32,1%;  
 			!COMMON AMONG DAT AND RDT XABS 
 					!BACK TO END OF TOTAL COMMONALITY 
 MACRO		XAB$B_BKZ	= 22,0,8,0%; 		!COMMON TO FHC AND ALQ XABS 

 !++ 
 !	FILE HEADER CHARACTERISTICS XAB DEFINITIONS 
 !		$XABFHCDEF 
 ! 
 !+++++***** 
 !...$XABFHCDEF	 
 !  THE FIELDS OF THIS XAB CANNOT BE REARRANGED SINCE 
 !  THEY CORRESPOND TO AN ON-DISK STRUCTURE 
 ! 
 LITERAL	XAB$C_FHC	= 29; 		! XABFHC ID CODE 
 			!THESE 4 FIELDS ARE COMMON TO ALL XABS AND 
 			!HAVE BEEN DEFINED BY $XABDEF 
 MACRO		XAB$B_RFO	= 8,0,8,0%; 		! RECORD FORMAT AND FILE ORG 
 MACRO		XAB$B_ATR	= 9,0,8,0%; 		! RECORD ATTRIBUTES 
 MACRO		XAB$W_LRL	= 10,0,16,0%; 		! LONGEST RECORD'S LENGTH 
 MACRO		XAB$L_HBK	= 12,0,32,0%; 		! HI VBN ALLOCATED 
 			! (N.B. REVERSED ON DISK!) 
 MACRO		XAB$W_HBK0	= 12,0,16,0%;  
 MACRO		XAB$W_HBK2	= 14,0,16,0%;  
 MACRO		XAB$L_EBK	= 16,0,32,0%; 		! EOF VBN 
 			! (N.B. REVERSED ON DISK) 
 MACRO		XAB$W_EBK0	= 16,0,16,0%;  
 MACRO		XAB$W_EBK2	= 18,0,16,0%;  
 MACRO		XAB$W_FFB	= 20,0,16,0%; 		! FIRST FREE BYTE IN EOF BLOCK 
 			! DEFINED ABOVE IN $XABDEF, SINCE IT IS SHARED 
 			! BY THE ALL XAB) 
 MACRO		XAB$B_HSZ	= 23,0,8,0%; 		! HEADER SIZE FOR VFC 
 MACRO		XAB$W_MRZ	= 24,0,16,0%; 		! MAX RECORD SIZE 
 MACRO		XAB$W_DXQ	= 26,0,16,0%; 		! DEFAULT EXTEND QUANTITY 
 !-----***** 
 MACRO		XAB$L_SBN	= 40,0,32,0%; 		! STARTING LBN IF CONTIGUOUS 
 LITERAL	XAB$C_FHCLEN	= 44; 
 LITERAL	XAB$K_FHCLEN	= 44; 		! LENGTH OF XABFHC 

 !-- 
 !++ 
 ! 
 !	ALLOCATION XAB DEFINITIONS 
 !		$XABALLDEF 
 !...$XABALLDEF	 
 ! 
 ! 
 !+++++***** 
 !  THE FIELDS THRU BKZ CANNOT BE REARRANGED DUE TO 
 !  THEIR COMMONALITY WITH FAB 
 LITERAL	XAB$C_ALL	= 20; 		! XABALL ID CODE 
 			!THESE 4 FIELDS ARE COMMON TO ALL XABS AND 
 			!HAVE BEEN DEFINED BY $XABDEF 
 MACRO		XAB$B_AOP	= 8,0,8,0%; 		! ALLOCATION OPTIONS 
 			 
 MACRO		XAB$V_HRD	= 8,0,1,0%; 		! FAIL IF REQUESTED ALIGNMENT IMPOSSIBLE 
 LITERAL	XAB$M_HRD	= 1^1 - 1^0; 
 MACRO		XAB$V_ONC	= 8,1,1,0%; 		! LOCATE ALLOCATED SPACE WITHIN A CYLINDER 
 LITERAL	XAB$M_ONC	= 1^2 - 1^1; 
 						! (SPARES) 
 MACRO		XAB$V_CBT	= 8,5,1,0%; 		! CONTIGUOUS ALLLOCATION, BEST TRY 
 LITERAL	XAB$M_CBT	= 1^6 - 1^5; 
 						! SPARE 
 MACRO		XAB$V_CTG	= 8,7,1,0%; 		! CONTIGUOUS ALLOCATION 
 LITERAL	XAB$M_CTG	= 1^8 - 1^7; 
 			
 MACRO		XAB$B_ALN	= 9,0,8,0%; 		! ALIGNMENT TYPE 
 LITERAL	XAB$C_ANY	= 0; 		! ANY ALLOCATION O.K. 
 LITERAL	XAB$C_CYL	= 1; 		! CYLINDER BOUNDARY 
 LITERAL	XAB$C_LBN	= 2; 		! ALLOCATE AT SPECIFIED LBN 
 LITERAL	XAB$C_VBN	= 3; 		! ALLOCATE NEAR SPECIFIED VBN 
 LITERAL	XAB$C_RFI	= 4; 		! ALLOCATE NEAR RELATED FILE 
 MACRO		XAB$W_VOL	= 10,0,16,0%; 		! RELATIVE VOLUME NO. FOR ALLOCATION 
 			! (NOT APPLICABLE IF ALN = VBN OR RFI) 
 MACRO		XAB$L_LOC	= 12,0,32,0%; 		! ALLOCATION LOCATION 
 MACRO		XAB$L_ALQ	= 16,0,32,0%; 		! ALLOCATION QUANTITY 
 MACRO		XAB$W_DEQ	= 20,0,16,0%; 		! DEFAULT ALLOCATION QUANTITY 
 			! DEFINED ABOVE IN $XABDEF,SINCE IT IS SHARED BY THE FHC 
 			! XAB AND HAS THE SAME OFFSET, OF COURSE) 
 !-----***** 
 MACRO		XAB$B_AID	= 23,0,8,0%; 		! AREA ID NUMBER 
 MACRO		XAB$W_RFI	= 24,0,0,0%; 	! RELATED FILE ID 
 LITERAL	XAB$S_RFI	= 6; 
 MACRO		XAB$W_RFI0	= 24,0,16,0%; 	! FILE NUMBER 
 MACRO		XAB$W_RFI2	= 26,0,16,0%; 	! SEQ NUMBER 
 MACRO		XAB$W_RFI4	= 28,0,16,0%; 	! REV NUMBER 
 LITERAL	XAB$C_ALLLEN	= 32; 
 LITERAL	XAB$K_ALLLEN	= 32; 		! LENGTH OF XABALL 

 !-- 
 !++ 
 ! 
 !	DATE/TIME XAB DEFINITIONS 
 !		$XABDATDEF 
 !...$XABDATDEF	 
 ! 
 LITERAL	XAB$C_DAT	= 18; 		! XABDAT ID CODE 
 			!THESE 4 FIELDS ARE COMMON TO ALL XABS AND 
 			!HAVE BEEN DEFINED BY $XABDEF 
 MACRO		XAB$Q_CDT	= 20,0,0,1%; 	! CREATION DATE & TIME 
 LITERAL	XAB$S_CDT	= 8; 
 MACRO		XAB$L_CDT0	= 20,0,32,0%;  
 MACRO		XAB$L_CDT4	= 24,0,32,1%;  
 MACRO		XAB$Q_EDT	= 28,0,0,1%; 	! EXPIRATION DATE & TIME 
 LITERAL	XAB$S_EDT	= 8; 
 MACRO		XAB$L_EDT0	= 28,0,32,0%;  
 MACRO		XAB$L_EDT4	= 32,0,32,1%;  
 LITERAL	XAB$C_DATLEN	= 36; 
 LITERAL	XAB$K_DATLEN	= 36; 		! LENGTH OF XABDAT 

 !-- 
 !++ 
 ! 
 !	REVISION DATE/TIME XAB DEFINITIONS 
 !		$XABRDTDEF 
 !...$XABRDTDEF	 
 LITERAL	XAB$C_RDT	= 30; 		! XABRDT ID CODE 
 			!THESE 4 FIELDS ARE COMMON TO ALL XABS AND 
 			!HAVE BEEN DEFINED BY $XABDEF 
 LITERAL	XAB$C_RDTLEN	= 20; 
 LITERAL	XAB$K_RDTLEN	= 20; 		! LENGTH OF RDT XAB 

 !-- 
 !++ 
 ! 
 !	PROTECTION XAB FIELD DEFINITIONS 
 !		$XABPRODEF 
 ! 
 !...$XABPRODEF	 
 ! 
 LITERAL	XAB$C_PRO	= 19; 		! XABPRO ID CODE 
 			!THESE 4 FIELDS ARE COMMON TO ALL XABS AND 
 			!HAVE BEEN DEFINED BY $XABDEF 
 MACRO		XAB$W_PRO	= 8,0,16,0%; 		! PROTECTION MASK 
 			 
 MACRO		XAB$V_SYS	= 8,0,4,0%; 		! SYSTEM 
 MACRO		XAB$V_OWN	= 8,4,4,0%; 		! OWNER 
 MACRO		XAB$V_GRP	= 8,8,4,0%; 		! GROUP 
 MACRO		XAB$V_WLD	= 8,12,4,0%; 		! WORLD 
 			
 			 
 MACRO		XAB$V_NOREAD	= 8,0,1,0%; 	! DENY READ ACCESS 
 LITERAL	XAB$M_NOREAD	= 1^1 - 1^0; 
 MACRO		XAB$V_NOWRITE	= 8,1,1,0%; 	! DENY WRITE ACCESS 
 LITERAL	XAB$M_NOWRITE	= 1^2 - 1^1; 
 MACRO		XAB$V_NOEXE	= 8,2,1,0%; 		! DENY EXECUTION ACCESS 
 LITERAL	XAB$M_NOEXE	= 1^3 - 1^2; 
 MACRO		XAB$V_NODEL	= 8,3,1,0%; 		! DENY DELETE ACCESS 
 LITERAL	XAB$M_NODEL	= 1^4 - 1^3; 
 			
 MACRO		XAB$L_UIC	= 12,0,32,0%; 		! UIC CODE 
 MACRO		XAB$W_MBM	= 12,0,16,0%; 	! MEMBER CODE 
 MACRO		XAB$W_GRP	= 14,0,16,0%; 	! GROUP CODE 
 LITERAL	XAB$C_PROLEN	= 16; 
 LITERAL	XAB$K_PROLEN	= 16; 		! XABPRO LENGTH 

 !-- 
 !++ 
 ! 
 !	TERMINAL CONTROL XAB FIELD DEFINITIONS 
 !		$XABTRMDEF 
 ! 
 ! 
 !...$XABTRMDEF	 
 ! 
 LITERAL	XAB$C_TRM	= 31; 		!XABTRM ID CODE 
 			!THESE 4 FIELDS ARE COMMON TO ALL XABS AND 
 			!HAVE BEEN DEFINED BY $XABDEF 
 MACRO		XAB$L_AST_ADDR	= 8,0,32,0%; 	!AST ADDRESS 
 MACRO		XAB$L_AST_PARM	= 12,0,32,0%; 	!AST PARAMETER 
 MACRO		XAB$W_MBX_CHAN	= 16,0,16,0%; 	!ASSOCIATED MAILBOX CHANNEL NUMBER 
 MACRO		XAB$B_FLAGS	= 18,0,8,0%;  
 			 
 MACRO		XAB$V_DSABL_AST	= 18,0,1,0%; 	!DISABLE AST 
 LITERAL	XAB$M_DSABL_AST	= 1^1 - 1^0; 
 			
 LITERAL	XAB$C_TRMLEN	= 24; 
 LITERAL	XAB$K_TRMLEN	= 24; 		!LENGTH OF XAB OF TYPE TERMINAL CONTROL 

 !-- 
 !++ 
 ! 
 !	SUMMARY XAB FIELD DEFINITIONS 
 !		$XABSUMDEF 
 ! 
 !...$XABSUMDEF	 
 ! 
 LITERAL	XAB$C_SUM	= 20; 		! XABSUM ID CODE 
 			!THESE 4 FIELDS ARE COMMON TO ALL XABS AND 
 			!HAVE BEEN DEFINED BY $XABDEF 
 MACRO		XAB$B_NOA	= 8,0,8,0%; 		! NUMBER OF DEFINED AREAS FOR INDEX FILE 
 MACRO		XAB$B_NOK	= 9,0,8,0%; 		! NUMBER OF DEFINED KEYS FOR INDEX FILE 
 MACRO		XAB$W_PVN	= 10,0,16,0%; 		! PROLOGUE VERSION NUMBER (RELATIVE AND INDEX FILES) 
 LITERAL	XAB$C_SUMLEN	= 12; 
 LITERAL	XAB$K_SUMLEN	= 12; 		! XABSUM LENGTH 

 !-- 
 !++ 
 ! 
 !	KEY DEFINITION XAB FIELD DEFINITIONS 
 !		$XABKEYDEF 
 ! 
 !...$XABKEYDEF	 
 ! 
 LITERAL	XAB$C_KEY	= 21; 		! XABKEY ID CODE 
 			!THESE 4 FIELDS ARE COMMON TO ALL XABS AND 
 			!HAVE BEEN DEFINED BY $XABDEF 
 ! 
 ! THE FIELD LAYOUT OF THE KEY XAB IS SUCH THAT IT MATCHS AS 
 ! CLOSELY AS POSSIBLE THE LAYOUT OF A KEY DECRIPTOR IN THE 
 ! INDEX FILE PROLOGUE. THIS IS SO THE CONTENTS MAY BE MOVED 
 ! BETWEEN THE TWO STRUCTURES AS EFFICIENTLY AS POSSIBLE. 
 ! 
 MACRO		XAB$B_IAN	= 8,0,8,0%; 		! INDEX LEVEL AREA NUMBER 
 MACRO		XAB$B_LAN	= 9,0,8,0%; 		! LOWEST INDEX LEVEL AREA NUMBER 
 MACRO		XAB$B_DAN	= 10,0,8,0%; 		! DATA LEVEL AREA NUMBER 
 MACRO		XAB$B_LVL	= 11,0,8,0%; 		! LEVEL OF ROOT BUCKET 
 MACRO		XAB$B_IBS	= 12,0,8,0%; 		! SIZE OF INDEX BUCKETS IN VIRTUAL BLOCKS 
 MACRO		XAB$B_DBS	= 13,0,8,0%; 		! SIZE OF DATA BUCKETS IN VIRTUAL BLOCKS 
 MACRO		XAB$L_RVB	= 14,0,32,0%; 		! ROOT BUCKET START VBN 
 MACRO		XAB$B_FLG	= 18,0,8,0%; 		! KEY OPTION FLAGS 
 			 
 MACRO		XAB$V_DUP	= 18,0,1,0%; 		! DUPLICATE KEY VALUES ALLOWED 
 LITERAL	XAB$M_DUP	= 1^1 - 1^0; 
 MACRO		XAB$V_CHG	= 18,1,1,0%; 		! ALT KEY ONLY --KEY FIELD MAY CHANGE ON UPDATE 
 LITERAL	XAB$M_CHG	= 1^2 - 1^1; 
 MACRO		XAB$V_NUL	= 18,2,1,0%; 		! ALT KEY ONLY --NULL KEY VALUE ENABLE 
 LITERAL	XAB$M_NUL	= 1^3 - 1^2; 
 				 
 MACRO		XAB$V_INI	= 18,4,1,0%; 		! INTERNAL FLAG INDICATING THAT INDEX 
 LITERAL	XAB$M_INI	= 1^5 - 1^4; 
 			! HAS NOT BEEN INITIALIZED 
 MACRO		XAB$V_DCT	= 18,5,1,0%; 		! SET TO INDICATE THAT THE USER WANTS TO MAINTAIN 
 LITERAL	XAB$M_DCT	= 1^6 - 1^5; 
 			! A DUPLICATES COUNT 
 			
  
 					! PRIMARY KEY ONLY FLAGS 
 						! SPACE OVER DUP 
 MACRO		XAB$V_NRF	= 18,1,1,0%; 		! NO RFA/RRV IN RECORDS (SINGLE KEY ONLY) 
 LITERAL	XAB$M_NRF	= 1^2 - 1^1; 
 MACRO		XAB$V_PRG	= 18,2,1,0%; 		! DELETED RECORDS AND RRV'S MAY BE PURGED 
 LITERAL	XAB$M_PRG	= 1^3 - 1^2; 
 			
  
 MACRO		XAB$B_DTP	= 19,0,8,0%; 		! KEY FIELD DATA TYPE 
 LITERAL	XAB$C_STG	= 0; 		! STRING 
 LITERAL	XAB$C_IN2	= 1; 		! SIGNED 15 BIT INTEGER (2 BYTES) 
 LITERAL	XAB$C_BN2	= 2; 		! 2 BYTE BINARY 
 LITERAL	XAB$C_IN4	= 3; 		! SIGNED 31 BIT INTEGER (4 BYTES) 
 LITERAL	XAB$C_BN4	= 4; 		! 4 BYTE BINARY 
 LITERAL	XAB$C_PAC	= 5; 		! PACKED DECIMAL (1-16 BYTES) 
 MACRO		XAB$B_NSG	= 20,0,8,0%; 		! NUMBER OF KEY SEGMENTS 
 MACRO		XAB$B_NUL	= 21,0,8,0%; 		! NUL KEY CHARACTER 
 MACRO		XAB$B_TKS	= 22,0,8,0%; 		! TOTAL KEY FIELD SIZE (BYTES) 
 MACRO		XAB$B_REF	= 23,0,8,0%; 		! KEY OF REFERENCE (0=PRIM KEY, 
 			! 1-254 = ALTERNATE KEYS) 
 MACRO		XAB$W_MRL	= 24,0,16,0%; 		! MINIMUN RECORD LENGTH TO CONTAIN KEY FIELD 
 MACRO		XAB$W_IFL	= 26,0,16,0%; 		! INDEX BUCKET FILL SIZE (BYTES) 
 MACRO		XAB$W_DFL	= 28,0,16,0%; 		! DATA BUCKET FIL SIZE (BYTES) 
 MACRO		XAB$W_POS	= 30,0,0,0%; 	! KEY FIELD RECORD OFFSET POSITIONS 
 LITERAL	XAB$S_POS	= 16; 
 MACRO		XAB$W_POS0	= 30,0,16,0%; 	! SEGMENT 0 
 MACRO		XAB$W_POS1	= 32,0,16,0%; 	! SEGMENT 1 
 MACRO		XAB$W_POS2	= 34,0,16,0%; 	! SEGMENT 2 
 MACRO		XAB$W_POS3	= 36,0,16,0%; 	! SEGMENT 3 
 MACRO		XAB$W_POS4	= 38,0,16,0%; 	! SEGMENT 4 
 MACRO		XAB$W_POS5	= 40,0,16,0%; 	! SEGMENT 5 
 MACRO		XAB$W_POS6	= 42,0,16,0%; 	! SEGMENT 6 
 MACRO		XAB$W_POS7	= 44,0,16,0%; 	! SEGMENT 7 
 MACRO		XAB$B_SIZ	= 46,0,0,0%; 	! KEY FIELD SEGMENT SIZES 
 LITERAL	XAB$S_SIZ	= 8; 
 MACRO		XAB$B_SIZ0	= 46,0,8,0%; 	! SEGMENT 0 
 MACRO		XAB$B_SIZ1	= 47,0,8,0%; 	! SEGMENT 1 
 MACRO		XAB$B_SIZ2	= 48,0,8,0%; 	! SEGMENT 2 
 MACRO		XAB$B_SIZ3	= 49,0,8,0%; 	! SEGMENT 3 
 MACRO		XAB$B_SIZ4	= 50,0,8,0%; 	! SEGMENT 4 
 MACRO		XAB$B_SIZ5	= 51,0,8,0%; 	! SEGMENT 5 
 MACRO		XAB$B_SIZ6	= 52,0,8,0%; 	! SEGMENT 6 
 MACRO		XAB$B_SIZ7	= 53,0,8,0%; 	! SEGMENT 7 
 ! 
 ! THE POSITIONS OF THE ABOVE FIELDS ARE DICTATED BY THE KEY DESCRIPTOR 
 ! RECORD LAYOUT IN THE INDEX FILE PROLOGUE. 
 ! 
 MACRO		XAB$L_KNM	= 56,0,32,0%; 		! POINTER TO 32 CHARACTER KEY NAME BUFFER 
 MACRO		XAB$L_DVB	= 60,0,32,0%; 		! FIRST DATA BUCKET START VBN 
 LITERAL	XAB$C_KEYLEN	= 64; 
 LITERAL	XAB$K_KEYLEN	= 64; 		! XABKEY LENGTH 
 !-- 
 !++ 

  
 ! 
 !		RMS ESCAPE DEFINITIONS 
 ! 
 !  THE FOLLOWING VALUES IDENTIFY VARIOUS REQUESTS FOR NON-STANDARD RMS 
 !  FUNCTIONS.  THEY ARE CURRENTLY INPUT TO THE $MODIFY FUNCTION IN THE 
 !  CTX FIELD OF THE FAB ONLY IF THE ESC BIT IS SET IN FOP.  INCORRECT 
 !  USE OF THESE CAPABILTIES COULD CAUSE RMS TO FAIL, HENCE GREAT CAUTION 
 !  SHOULD BE EXERCISED IN THEIR USE. 
 ! 
 !...$RMEDEF	
  
 LITERAL	RME$C_SETRFM	= 1; 		! CHANGE RFM, MRS, AND FSZ (IF VFC) IN IFAB ONLY 

 ! REQUIRE file defining all VAX SRM symbols. 
 ! File: SRMDEF.MDL! Version 0, edit 11, TNH, 7-Dec-77 
 ! Edit History: 
 ! 0-8	- Added PSW structure and more stack frame fields.  TNH 8-Oct-77 
 ! 0-9	- Added SF$ (stack frame) structure.  TNH 9-Oct-77 
 ! 0-10	- Remove DSC$W_MAXLEN, add DSC$A_FRAME, remove SRM$ stack defns. TNH 6-De 
 !	  Also add mask fields for PSW, saved PSW. 
 !	  Change SF$L_SAVE_REGN to SF$L_SAVE_REGS. 
 ! 0-11	- Add lengths for all descriptors.  TNH 7-Dec-77 
 ! 0-12	- Restored DSC$W_MAXLEN, added debugger data types.  ACG 10-Mar-78 
  
 ! VAX Procedure Calling symbols. 
 ! These symbols are taken from Appendix C of the VAX-11 
 ! System Reference Manual which is under ECO control. No 
 ! additions to this file cannot be made without first getting 
 ! formal ECO approval to Appendix C of the SRM. 
 ! No symbols should be removed or changed without careful 
 ! evaluation of the effects of such changes on existing software. 
 ! In case of disagreement, SRM Appendix C takes precedence 
 ! over this file. 
 ! These symbols are taken from Appendix C rev 4, 30 Mar-77 
  
  
 !...$DSCDEF		! prefix DSC$_ 
  
 ! a formal ECO approved to Appendix C of the SRM. 
  
 ! Define Procedure argument data types 
  
 !   C.9  ARGUMENT DATA TYPES 
  
 !   The following encoding is used for atomic data elements: 
  
 !         Mnemonic    Code    Description 
  
 LITERAL	DSC$K_DTYPE_Z	= 0; 		! Unspecified.   The  calling   program   has 
 			! specified   no   data   type!   the  called 
 			! procedure should assume the argument is  of 
 			! the correct type. 
  
 LITERAL	DSC$K_DTYPE_V	= 1; 		    ! Bit.   Ordinarily  a   bit   string!    see 
 			! discussion of descriptors. 
  
 LITERAL	DSC$K_DTYPE_BU	= 2; 		! Byte Logical.  8-bit unsigned quantity. 
  
 LITERAL	DSC$K_DTYPE_WU	= 3; 		! Word Logical.  16-bit unsigned quantity. 
  
 LITERAL	DSC$K_DTYPE_LU	= 4; 		! Longword    Logical.     32-bit    unsigned 
 			! quantity. 
  
 LITERAL	DSC$K_DTYPE_QU	= 5; 		! Quadword    Logical.     64-bit    unsigned 
 			! quantity. 
  
 LITERAL	DSC$K_DTYPE_B	= 6; 		! Byte Integer.  8-bit signed  2's-complement 
 			! integer. 
  
 LITERAL	DSC$K_DTYPE_W	= 7; 			! Word Integer.  16-bit signed 2's-complement 
 			! integer. 
  
 LITERAL	DSC$K_DTYPE_L	= 8; 		! Longword    Integer.       32-bit signed 
 			! 2's-complement integer. 
  
 LITERAL	DSC$K_DTYPE_Q	= 9; 		! Quadword    Integer.      64-bit     signed 
 			! 2's-complement integer. 
  
 LITERAL	DSC$K_DTYPE_F	= 10; 		! Single-precision Floating.   32-bit  VAX-11 
 			! floating point. 
  
 LITERAL	DSC$K_DTYPE_D	= 11; 		! Double-precision Floating.   64-bit  VAX-11 
 			! floating point. 
  
 LITERAL	DSC$K_DTYPE_FC	= 12; 		! Complex.  Ordered pair of  single-precision 
 			! floating quantities, representing a complex 
 			! number.   The  lower   addressed   quantity 
 			! represents   the   real  part,  the  higher 
 			! addressed represents the imaginary part. 
  
 LITERAL	DSC$K_DTYPE_DC	= 13; 		! Double-precision Complex.  Ordered pair  of 
 			! double-precision floating point quantities, 
 			! representing a complex number.   The  lower 
 			! addressed   quantity  represents  the  real 
 			! part, the higher addressed  represents  the 
 			! imaginary part. 
  
 !  The following string  types  are  ordinarily  described  by  a  string 
 !  descriptor.  The data type codes below occur in those descriptors: 
  
 LITERAL	DSC$K_DTYPE_T	= 14; 		! ASCII text string.   A  sequence  of  8-bit 
                         !     ASCII characters. 
  
 LITERAL	DSC$K_DTYPE_NU	= 15; 		! Numeric string, unsigned. 
  
 LITERAL	DSC$K_DTYPE_NL	= 16; 		! Numeric string, left separate sign. 
  
 LITERAL	DSC$K_DTYPE_NLO	= 17; 		! Numeric string, left overpunched sign. 
  
 LITERAL	DSC$K_DTYPE_NR	= 18; 		  ! Numeric string, right separate sign. 
  
 LITERAL	DSC$K_DTYPE_NRO	= 19; 		! Numeric string, right overpunched sign. 
  
 LITERAL	DSC$K_DTYPE_NZ	= 20; 		! Numeric string, zoned sign. 
  
 LITERAL	DSC$K_DTYPE_P	= 21; 		   ! Packed decimal string. 
  
 LITERAL	DSC$K_DTYPE_ZI	= 22; 		! Sequence of instructions. 
  
 LITERAL	DSC$K_DTYPE_ZEM	= 23; 		! Procedure entry mask. 
  
 ! The following descriptor types are used to identify data types in 
 ! object module and debugger symbol tables. 
  
 LITERAL	DSC$K_DTYPE_FLD	= 183; 		! BLISS FIELD name. 
  
 LITERAL	DSC$K_DTYPE_PCT	= 184; 		! PSECT information. 
  
 LITERAL	DSC$K_DTYPE_DPC	= 185; 		! PC correlation table for FORTRAN IV+ 
  
 LITERAL	DSC$K_DTYPE_LBL	= 186; 		! LITERAL or LABEL 
  
 LITERAL	DSC$K_DTYPE_SLB	= 187; 		! Label in non-assembly language modules 
  
 LITERAL	DSC$K_DTYPE_MOD	= 188; 		! Beginning of new module 
  
 LITERAL	DSC$K_DTYPE_EOM	= 189; 		! End of module 
  
 LITERAL	DSC$K_DTYPE_RTN	= 190; 		! Beginning of new routine 
  
 LITERAL	DSC$K_DTYPE_EOR	= 191; 		! End of routine 
  
 !   The following type codes are RESERVED for future use: 
  
  
 !                     24-182  RESERVED to DEC 
 !                     192-255  RESERVED to CSS and customers 
 	! C.10  ARGUMENT DESCRIPTORS 
  
 	! A uniform descriptor mechanism is defined for use  by  all  procedures 
 	! which  conform  to this standard.  Descriptors are uniformly typed and 
 	! the mechanism is extensible.  As new varieties  of  descriptor  become 
 	! necessary, they will be added to this catalogue. 
  
  
  
 	! C.10.1  Descriptor Prototype 
  
 	! Each class of descriptor consists of  at  least  2  longwords  in  the 
 	! following format: 
  
 	!      +-------+-------+---------------+ 
 	!      | CLASS | DTYPE |    LENGTH     |  :Descriptor 
 	!      +-------+-------+---------------+ 
 	!      |            POINTER            | 
 	!      +-------------------------------+ 
  
 	!      DSC$W_LENGTH   A one-word field specific to the descriptor 
 	!      <0,15:0>       class!  typically a 16-bit (unsigned) length. 
 	! 
 	!      DSC$B_DTYPE    A one-byte atomic data type code (see C.9) 
 	!      <0,23:16> 
 	! 
 	!      DSC$B_CLASS    A one-byte descriptor class code (see below) 
 	!      <0,31:24> 
 	! 
 	!      DSC$A_POINTER  A longword pointing to the first byte of the 
 	!      <1,31:0>       data element described. 
  
 	! Note that the descriptor can be placed in a pair of registers  with  a 
 	! MOVQ  instruction and then the length and address used directly.  This 
 	! gives a word length, so the class and type are placed as bytes in  the 
 	! rest  of that longword.  Class 0 is unspecified and hence no more than 
 	! the above information can be assumed. 
  
 	! Define the descriptor class codes! 
  
 LITERAL	DSC$K_CLASS_Z	= 0; 		! Unspecified 
 LITERAL	DSC$K_CLASS_S	= 1; 		! Scalar, String Descriptor 
 LITERAL	DSC$K_CLASS_D	= 2; 		! Dynamic String Descriptor 
 LITERAL	DSC$K_CLASS_V	= 3; 		! Varying String Descriptor 
 LITERAL	DSC$K_CLASS_A	= 4; 		! Array Descriptor (see C.10.5) 
 LITERAL	DSC$K_CLASS_P	= 5; 		! Procedure Descriptor 
 LITERAL	DSC$K_CLASS_PI	= 6; 		! Procedure Incarnation Descriptor 
 LITERAL	DSC$K_CLASS_J	= 7; 		! Label Descriptor 
 LITERAL	DSC$K_CLASS_JI	= 8; 		! Label Incarnation Descriptor 
  
 	! Descriptor classes 9-191 are RESERVED to DEC.  Classes 192 
 	! through 255 are RESERVED to CSS and customers. 
  
 !    C.10.5  Array Descriptor (DSC$K_CLASS_A) 
  
 !  An array descriptor consists of 3 contiguous blocks. The first block 
 !  contains  the  descriptor  prototype  information and is part of every 
 !  array descriptor.  The second and third blocks are optional.   If  the 
 !  third block is present then so is the second. 
  
 !   A complete array descriptor has the form: 
  
 !       +-------+-------+---------------+ 
 !       |   4   | DTYPE |    LENGTH     |  :Descriptor 
 !       +-------+-------+---------------+ 
 !       |            POINTER            | 
 !       +-------+-------+---------------+ 
 !       | DIMCT | AFLAGS|   Reserved    |          Block 1 - Prototype 
 !       +-------+-------+---------------+ 
 !       |            ARSIZE             | 
 !       +-------------------------------+ 
 ! 
 !       +-------------------------------+ 
 !       |              A0               | 
 !       +-------------------------------+ 
 !       |              M1               | 
 !       +-------------------------------+ 
 !       |              ...              |          Block 2 - Multipliers 
 !       +-------------------------------+ 
 !       |            M(n-1)             | 
 !       +-------------------------------+ 
 !       |              Mn               | 
 !       +-------------------------------+ 
 ! 
 !       +-------------------------------+ 
 !       |              L1               | 
 !       +-------------------------------+ 
 !       |              U1               | 
 !       +-------------------------------+ 
 !       |              ...              |          Block 3 - Bounds 
 !       +-------------------------------+ 
 !       |              Ln               | 
 !       +-------------------------------+ 
 !       |              Un               | 
 !       +-------------------------------+ 
 ! 
 ! 
 	!Define descriptor fields: 
  
 MACRO		DSC$W_LENGTH	= 0,0,16,0%; 	! A one-word field specifiec to the descriptor class! 
 			! typically a 16-bit (unsigned) length. 
  
 MACRO		DSC$B_DTYPE	= 2,0,8,0%; 	! A one-byte atomic data type code (see C.9) 
 			! Symbols used in this filed have form: DSC$K_DTYPE_t 
 			! where t is the data type mnemonic from above 
 			! and agrees with methodology manual. 
  
 MACRO		DSC$B_CLASS	= 3,0,8,0%; 	! A one-byte descriptor class code (see above). 
 			! Symbols used in this field have form: DSC$K_CLASS_f 
 			! where f is the argument form mnemonic from above 
 			! and agrees with the methodology manual. 
  
 MACRO		DSC$A_POINTER	= 4,0,32,0%; 	! A longword pointing to the first byte of the data 
 			! element described. 
  
 LITERAL	DSC$C_Z_BLN	= 8; 
 LITERAL	DSC$K_Z_BLN	= 8; 			! Block length in bytes for Z class desc. 
 LITERAL	DSC$C_S_BLN	= 8; 
 LITERAL	DSC$K_S_BLN	= 8; 			! Block length in bytes for S class descr. 
 LITERAL	DSC$C_D_BLN	= 8; 
 LITERAL	DSC$K_D_BLN	= 8; 			! Block length in bytes for D class descr. 
 LITERAL	DSC$C_P_BLN	= 8; 
 LITERAL	DSC$K_P_BLN	= 8; 			! Block length in bytes for P class descr. 
 LITERAL	DSC$C_J_BLN	= 8; 
 LITERAL	DSC$K_J_BLN	= 8; 			! Block length in bytes for J class descr. 
  
 !+ 
 ! End of common definitions for all descriptors. 
 !- 
  
 					! Mark end of common part 
  
 !+ 
 ! Varying type descriptor definitions 
 !- 
  
 MACRO		DSC$W_MAXLEN	= 8,0,16,0%; 	! An unsigned word specifying the 
 			! maximum length of the data item 
 			! (i.e., the space allocated) 
  
  
 !+ 
 ! Array Descriptor definitions 
 !- 
  
 					! go back to end of common descriptor definitions 
 MACRO		DSC$B_AFLAGS	= 10,0,8,0%; 	! Array flag bits. 
  
 			 
 						! reserved to Digital 
 MACRO		DSC$V_FL_COLUMN	= 10,5,1,0%; 	! If set, the elements of the array are 
 				! stored by columns (FORTRAN)>  Otherwise 
 				! the elements are stored by rows. 
  
 MACRO		DSC$V_FL_COEFF	= 10,6,1,0%; 	! If set, the multiplicative coefficients in 
 				! Block 2 are present. 
  
 MACRO		DSC$V_FL_BOUNDS	= 10,7,1,0%; 	! If set, the bounds information in Block 3 
 				! is present. 
 			
  
 MACRO		DSC$B_DIMCT	= 11,0,8,0%; 	! Number of dimensions 
  
 MACRO		DSC$L_ARSIZE	= 12,0,32,0%; 	! Total size of array (in bytes unless DTYPE is 
 			! EQUL DSC$K_DTYPE_V or DSC$K_DTYPE_P). 
  
 MACRO		DSC$A_A0	= 16,0,32,0%; 		! Address of element A(0,0,...,0). This 
 			! need not be within the actual array! it 
 			! is the same as DSC$A_POINTER for 0-origin 
 				! arrays. 
  
 MACRO		DSC$L_M1	= 20,0,32,0%; 		! Addressing coefficient M1 = U1-L1+1 
 MACRO		DSC$L_M2	= 24,0,32,0%; 		! Addressing coefficient M2 = U2-L2+1 
  
 !+ 
 ! Procedure Incarnation descriptor (DSC$K_CLASS_PI) and 
 ! Label Incarnation descriptor (DSC$K_CLASS_JI). 
 !- 
  
 					! go back to end of common descriptor definitions. 
 MACRO		DSC$A_FRAME	= 8,0,32,0%; 	! Address of frame 
  
 LITERAL	DSC$C_PI_BLN	= 12; 
 LITERAL	DSC$K_PI_BLN	= 12; 		! Block length in bytes for PI class descr. 
 LITERAL	DSC$C_JI_BLN	= 12; 
 LITERAL	DSC$K_JI_BLN	= 12; 			! block length in bytes for JI class descr. 
  
  
  
 	! end Descriptor definitions 
  
  
  
  
 !+ 
 ! Define SRM Hardware symbols 
 !- 
  
 !...$SRMDEF	
  
 LITERAL	SRM$K_INT_OVF_T	= 1; 			! Integer overflow trap code 
 LITERAL	SRM$K_INT_DIV_T	= 2; 			! Integer divide by zero trap code 
 LITERAL	SRM$K_FLT_OVF_T	= 3; 			! Floating overflow trap code 
 LITERAL	SRM$K_FLT_DIV_T	= 4; 			! Floating/decimal Divide by zero trap code 
 LITERAL	SRM$K_FLT_UND_T	= 5; 			! Floating Underflow trap code 
 LITERAL	SRM$K_DEC_OVF_T	= 6; 			! Decimal string overflow trap code 
 LITERAL	SRM$K_SUB_RNG_T	= 7; 			! Subscript range trap 
  
  
 		! End of SRM$ symbols 
  
  
  
  
 !+ 
 ! Define PSW bits (STARDEF.MDL has PSL bits) 
 !- 
  
 !...$PSWDEF	
  
 			 
 MACRO		PSW$V_C	= 0,0,1,0%; 	! carry 
 LITERAL	PSW$M_C	= 1^1 - 1^0; 
 MACRO		PSW$V_V	= 0,1,1,0%; 	! overflow 
 LITERAL	PSW$M_V	= 1^2 - 1^1; 
 MACRO		PSW$V_Z	= 0,2,1,0%; 	! zero 
 LITERAL	PSW$M_Z	= 1^3 - 1^2; 
 MACRO		PSW$V_N	= 0,3,1,0%; 	! negative 
 LITERAL	PSW$M_N	= 1^4 - 1^3; 
 MACRO		PSW$V_TBIT	= 0,4,1,0%; 	! trace trap enable 
 LITERAL	PSW$M_TBIT	= 1^5 - 1^4; 
 MACRO		PSW$V_IV	= 0,5,1,0%; 	! integer overflow enable 
 LITERAL	PSW$M_IV	= 1^6 - 1^5; 
 MACRO		PSW$V_FU	= 0,6,1,0%; 	! floating underflow enable 
 LITERAL	PSW$M_FU	= 1^7 - 1^6; 
 MACRO		PSW$V_DV	= 0,7,1,0%; 	! decimal overflow enable 
 LITERAL	PSW$M_DV	= 1^8 - 1^7; 
 			
 		! End of PSW$ symbols 
  
  
  
  
  
 !+ 
 ! Define stack frame offsets as a separate structure SF$ 
 !- 
  
 !...$SFDEF	
  
 MACRO		SF$A_HANDLER	= 0,0,32,0%; 		! Adr. of handler or 0 if no handler 
 MACRO		SF$W_SAVE_PSW	= 4,0,16,0%; 		! saved PSW 
 			 
 MACRO		SF$V_C	= 4,0,1,0%; 	! carry 
 LITERAL	SF$M_C	= 1^1 - 1^0; 
 MACRO		SF$V_V	= 4,1,1,0%; 	! overflow 
 LITERAL	SF$M_V	= 1^2 - 1^1; 
 MACRO		SF$V_Z	= 4,2,1,0%; 	! zero 
 LITERAL	SF$M_Z	= 1^3 - 1^2; 
 MACRO		SF$V_N	= 4,3,1,0%; 	! negative 
 LITERAL	SF$M_N	= 1^4 - 1^3; 
 MACRO		SF$V_TBIT	= 4,4,1,0%; 	! trace trap enable 
 LITERAL	SF$M_TBIT	= 1^5 - 1^4; 
 MACRO		SF$V_IV	= 4,5,1,0%; 	! integer overflow enable 
 LITERAL	SF$M_IV	= 1^6 - 1^5; 
 MACRO		SF$V_FU	= 4,6,1,0%; 	! floating underflow enable 
 LITERAL	SF$M_FU	= 1^7 - 1^6; 
 MACRO		SF$V_DV	= 4,7,1,0%; 	! decimal overflow enable 
 LITERAL	SF$M_DV	= 1^8 - 1^7; 
 			
 MACRO		SF$W_SAVE_MASK	= 6,0,16,0%; 		! saved register mask plus flags 
 						! define each field 
 MACRO		SF$V_SAVE_MASK	= 6,0,12,0%; 	! register save mask 
 						! MBZ 
 MACRO		SF$V_CALLS	= 6,13,1,0%; 		! 1 if CALLS 
 MACRO		SF$V_STACKOFFS	= 6,14,2,0%; 	! SP offset 
 			
 MACRO		SF$L_SAVE_AP	= 8,0,32,0%; 		! saved AP 
 MACRO		SF$L_SAVE_FP	= 12,0,32,0%; 		! saved FP 
 MACRO		SF$L_SAVE_PC	= 16,0,32,0%; 		! saved PC 
 MACRO		SF$L_SAVE_REGS	= 20,0,32,0%; 		! first register saved is saved here 
  
 		! End of SF$ symbols 
 !+ 
 ! OPERATOR COMMUNICATIONS MESSAGE TYPES AND VALUES 
 !- 
 !...$OPCDEF	
  
 MACRO		OPC$B_MS_TYPE	= 0,0,8,0%; 		! MESSAGE TYPE 
 MACRO		OPC$B_MS_TARGET	= 1,0,8,0%; 		! MESSAGE TARGET 
 MACRO		OPC$B_MS_ENAB	= 1,0,8,0%; 		! MESSAGE ENABLES 
 MACRO		OPC$W_MS_STATUS	= 2,0,16,0%; 		! MESSAGE STATUS 
 MACRO		OPC$L_MS_RPLYID	= 4,0,32,0%; 		! REPLY ID 
 MACRO		OPC$L_MS_MASK	= 4,0,32,0%; 		! MESSAGE MASK 
 MACRO		OPC$L_MS_RQSTID	= 4,0,32,0%; 		! REQUEST ID 
 MACRO		OPC$L_MS_TEXT	= 8,0,32,0%; 		! MESSAGE TEXT 
 MACRO		OPC$W_MS_OUNIT	= 8,0,16,0%; 		! OPERATOR UNIT NUMBER 
 MACRO		OPC$T_MS_ONAME	= 10,0,8,0%; 		! OPERATOR NAME 
 MACRO		OPC$L_MS_OTEXT	= 26,0,0,0%; 		! OPERATOR TEXT 
 LITERAL	OPC$S_MS_OTEXT	= 128; 
 MACRO		OPC$L_MS_MAXSZ	= 154,0,32,0%; 		! MESSAGE MAX SIZE 
  
 LITERAL	
 $EQULST (OPC$_,GBL,1,1 			! OPERATOR MESSAGE TYPES 
 	,(RQ_TERME,) 			! ENABLE TERMINAL 
 	,(RQ_LOGI,) 				! INITIALIZE THE LOG 
 	,(RQ_RQST,) 				! OPERATOR REQUEST 
 	,(RQ_REPLY,) 			! OPERATOR REPLY 
 	,(RQ_CANCEL,) 			! CANCEL REQUEST 
 	,(RQ_STATUS,) 			! REQUEST OPERATOR STATUS 
 	); 
 							! OPERATOR NAMES 
 MACRO		OPC$V_NM_CENTRL	= 154,0,1,0%; 		! 
 LITERAL	OPC$M_NM_CENTRL	= 1^1 - 1^0; 
 MACRO		OPC$V_NM_PRINT	= 154,1,1,0%;  
 LITERAL	OPC$M_NM_PRINT	= 1^2 - 1^1; 
 MACRO		OPC$V_NM_TAPES	= 154,2,1,0%;  
 LITERAL	OPC$M_NM_TAPES	= 1^3 - 1^2; 
 MACRO		OPC$V_NM_DISKS	= 154,3,1,0%;  
 LITERAL	OPC$M_NM_DISKS	= 1^4 - 1^3; 
 MACRO		OPC$V_NM_DEVICE	= 154,4,1,0%;  
 LITERAL	OPC$M_NM_DEVICE	= 1^5 - 1^4; 
 MACRO		OPC$V_NM_CARDS	= 154,5,1,0%;  
 LITERAL	OPC$M_NM_CARDS	= 1^6 - 1^5; 
 MACRO		OPC$V_NM_NTWORK	= 154,6,1,0%;  
 LITERAL	OPC$M_NM_NTWORK	= 1^7 - 1^6; 
 				 
 MACRO		OPC$V_NM_OPER1	= 154,12,1,0%;  
 LITERAL	OPC$M_NM_OPER1	= 1^13 - 1^12; 
 MACRO		OPC$V_NM_OPER2	= 154,13,1,0%;  
 LITERAL	OPC$M_NM_OPER2	= 1^14 - 1^13; 
 MACRO		OPC$V_NM_OPER3	= 154,14,1,0%;  
 LITERAL	OPC$M_NM_OPER3	= 1^15 - 1^14; 
 MACRO		OPC$V_NM_OPER4	= 154,15,1,0%;  
 LITERAL	OPC$M_NM_OPER4	= 1^16 - 1^15; 
 MACRO		OPC$V_NM_OPER5	= 154,16,1,0%;  
 LITERAL	OPC$M_NM_OPER5	= 1^17 - 1^16; 
 MACRO		OPC$V_NM_OPER6	= 154,17,1,0%;  
 LITERAL	OPC$M_NM_OPER6	= 1^18 - 1^17; 
 MACRO		OPC$V_NM_OPER7	= 154,18,1,0%;  
 LITERAL	OPC$M_NM_OPER7	= 1^19 - 1^18; 
 MACRO		OPC$V_NM_OPER8	= 154,19,1,0%;  
 LITERAL	OPC$M_NM_OPER8	= 1^20 - 1^19; 
 MACRO		OPC$V_NM_OPER9	= 154,20,1,0%;  
 LITERAL	OPC$M_NM_OPER9	= 1^21 - 1^20; 
 MACRO		OPC$V_NM_OPER10	= 154,21,1,0%;  
 LITERAL	OPC$M_NM_OPER10	= 1^22 - 1^21; 
 MACRO		OPC$V_NM_OPER11	= 154,22,1,0%;  
 LITERAL	OPC$M_NM_OPER11	= 1^23 - 1^22; 
 MACRO		OPC$V_NM_OPER12	= 154,23,1,0%;  
 LITERAL	OPC$M_NM_OPER12	= 1^24 - 1^23; 
 			
 LITERAL	
 $EQULST (OPC$_,GBL,0,1 			! 
 	,(TERMENAB,360449) 			! MSG <terminal enabled> 
 	,(LOGINIT,360457) 			! MSG <logfile initialized> 
 	,(TERMDSBL,360465) 			! MSG <terminal disabled> 
 	,(RQSTABORT,360476) 		! MSG <request aborted> 
 	,(RQSTPEND,360481) 			! MSG <request pending> 
 	,(RQSTCMPLTE,360489) 		! MSG <request complete> 
 	,(LOGFAIL,360500) 			! MSG <failed to initialize logfile> 
 	,(TERMFAIL,360508) 			! MSG <failed to enable terminal> 
 	,(NOSUCHRQST,360516) 		! MSG <no such request> 
 	,(DEVOFFLINE,360524) 		! MSG <device is offline> 
 	,(DEVONLINE,360532) 	 	! MSG <device online> 
 	,(NOCLI,360540) 			! MSG <no command interpreter> 
 	,(NOPERATOR,360545) 		! MSG <no operator coverage> 
 	,(UNKNOPR,360556) 			! MSG <unknown operator> 
 	,(DEVNOTERM,360564) 	 	! MSG <illegal source operator device> 
 	,(ILLRQST,360572) 			! MSG <illegal operator request> 
 	,(RQSTCAN,360580) 			! MSG <request was canceled> 
 	,(OPRNOTIF,360585) 			! MSG FAOCNT=1,<operator notified, waiting.. !%T> 
 	,(OPREPLY,360593) 			! MSG FAOCNT=2,<!AD> 
 	,(LOGTIME,360601) 			! MSG <logfile time stamp> 
 	,(LOGCLOS,360612) 			! MSG <logfile closed> 
 	); 

  
 ! 
 ! THIS FILE DEFINES THE ERROR MESSAGES FOR THE RSX AME 
 ! 
 !...$RSXMSGDEF			! SUBSYSTEM = 6 
 LITERAL	
 $EQULST (RSX$_,GBL,427584,8 		! EXIT WITH STATUS 
 	,(EXITSTATUS,) 		! MSG <RSX-11M exit with status> 
 	,(VERIFYCMD,) 		! MSG FAOCNT=2, <  MCR!AD> 
 	); 
 LITERAL	
 $EQULST (RSX$_,GBL,426786,8 		! WARNING CODES 
 	,(NOSUCHDEV,) 		! MSG FAOCNT=4, <TKB-assigned device not found, !AD!UW:, lun=!UB> 
 	,(PMD,) 			! MSG FAOCNT=2, <post-mortem dump, !AD> 
 	,(NOPMD,) 			! MSG FAOCNT=2, <post-mortem dump failure, !AD> 
 	); 
 LITERAL	
 $EQULST (RSX$_,GBL,425988,8 		! ERROR STATUS CODES 
 	,(RESERVED,) 		! MSG <compatibility mode reserved instruction> 
 	,(BREAK,) 			! MSG <compatibility mode breakpoint trap> 
 	,(IOT,) 			! MSG <compatibility mode IOT> 
 	,(NONRSXEMT,) 		! MSG <non-RSX-11M  EMT execution> 
 	,(TRAP,) 			! MSG <compatibility mode TRAP execution> 
 	,(ILLINST,) 			! MSG <compatibility mode illegal instruction> 
 	,(ODDADDR,) 			! MSG <compatibility mode odd address> 
 	,(TBIT,) 			! MSG <compatibility mode T-bit> 
 	,(ACCVIO,) 			! MSG <compatibility mode access violation> 
 	,(BADSTACK,) 		! MSG <invalid compatibility mode stack pointer> 
 	,(INSFDYNMEM,) 		! MSG <insufficient virtual address space> 
 	,(EXTERNABRT,) 		! MSG <external abort> 
 	,(NOTSKIMG,) 		! MSG FAOCNT=2, <file is not RSX-11M task image, !AD> 
 	,(BADLIBREF,) 		! MSG FAOCNT=2, <invalid library/common reference, !AD> 
 	,(LIBNOTFND,) 		! MSG FAOCNT=2, <open failure on library/common file, !AD> 
 	,(LOADERROR,) 		! MSG FAOCNT=2, <image load error, !AD> 
 	,(IMAGETERM,) 		! MSG FAOCNT=2, <'!AC' terminated, !%D> 
 	,(REGMSG,) 			! MSG FAOCNT=3, <	!AC = !OW !XW> 
 	,(NOCOMM,) 			! MSG <unable to initialize process mailbox or common efn's> 
 	); 

 !+ 
 ! AST CONTROL BLOCK DEFINITIONS 
 ! 
 ! AST CONTROL BLOCKS EXIST AS SEPARATE STRUCTURES AND AS SUBSTRUCTURES 
 ! WITHIN LARGER CONTROL BLOCKS SUCH AS I/O REQUEST PACKETS AND TIMER 
 ! QUEUE ENTRIES. 
 ! 
 !- 
  
 !...$ACBDEF	
  
 MACRO		ACB$L_ASTQFL	= 0,0,32,0%; 		!AST QUEUE FORWARD LINK 
 MACRO		ACB$L_ASTQBL	= 4,0,32,0%; 		!AST QUEUE BACKWARD LINK 
 MACRO		ACB$W_SIZE	= 8,0,16,0%; 			!STRUCTURE SIZE IN BYTES 
 MACRO		ACB$B_TYPE	= 10,0,8,0%; 			!STRUCTURE TYPE CODE 
 MACRO		ACB$B_RMOD	= 11,0,8,0%; 			!REQUEST ACCESS MODE 
 						!RMOD FLAG DEFINITIONS 
 MACRO		ACB$V_MODE	= 11,0,2,0%; 			!MODE FOR FINAL DELIVERY 
 							!SPARE 
 MACRO		ACB$V_QUOTA	= 11,6,1,0%; 		!ACCOUNT FOR QUOTA 
 LITERAL	ACB$M_QUOTA	= 1^7 - 1^6; 
 MACRO		ACB$V_KAST	= 11,7,1,0%; 			!SPECIAL KERNEL AST 
 			
 MACRO		ACB$L_PID	= 12,0,32,0%; 			!PROCESS ID OF REQUEST 
 MACRO		ACB$L_AST	= 16,0,32,0%; 			!AST ROUTINE ADDRESS 
 MACRO		ACB$L_ASTPRM	= 20,0,32,0%; 		!AST PARAMETER 
 MACRO		ACB$L_KAST	= 24,0,32,0%; 			!INTERNAL KERNEL MODE XFER ADDRESS 
  

  
 ! 
 ! CONFIGURATION CONTROL BLOCK OFFSET DEFINITIONS 
 ! 
  
 !...$ACFDEF	
  
 MACRO		ACF$L_ADAPTER	= 0,0,32,0%; 		!ADDRESS OF ADAPTER CONTROL BLOCK 
 MACRO		ACF$L_CONFIGREG	= 4,0,32,0%; 		!ADDRESS OF CONFIGURATION STATUS REGISTER 
 MACRO		ACF$W_AVECTOR	= 8,0,16,0%; 		!OFFSET TO ADAPTER INTERRUPT VECTOR (SCB) 
 MACRO		ACF$B_AUNIT	= 10,0,8,0%; 			!ADAPTER UNIT NUMBER 
 MACRO		ACF$B_AFLAG	= 11,0,8,0%; 			!ADAPTER GENERATION CONTROL FLAGS 
 							!FLAG VALUES 
 MACRO		ACF$V_RELOAD	= 11,0,1,0%; 			! RELOAD DRIVER 
 LITERAL	ACF$M_RELOAD	= 1^1 - 1^0; 
 			
 MACRO		ACF$L_CONTRLREG	= 12,0,32,0%; 		!ADDRESS OF CONTROL REGISTER 
 MACRO		ACF$W_CVECTOR	= 16,0,16,0%; 		!OFFSET TO CONTROLLER INTERRUPT VECTOR (TABLE) 
 MACRO		ACF$B_CUNIT	= 18,0,8,0%; 			!CONTROLLER UNIT NUMBER 
 MACRO		ACF$B_CNUMVEC	= 19,0,8,0%; 		!NUMBER OF CONTROLLER VECTORS 
 MACRO		ACF$L_DEVNAME	= 20,0,32,0%; 		!ADDRESS OF DEVICE NAME COUNTED STRING 
 MACRO		ACF$L_DRVNAME	= 24,0,32,0%; 		!ADDRESS OF DRIVER NAME COUNTED STRING 
 LITERAL	ACF$C_LENGTH	= 28; 
 LITERAL	ACF$K_LENGTH	= 28; 				!LENGTH OF DEVICE DESCRIPTOR ARGUMENT LIST 
  

  
 !+ 
 ! ADP - UNIBUS OR MASSBUS ADAPTER CONTROL BLOCK 
 !- 
  
 !...$ADPDEF	
  
 MACRO		ADP$L_CSR	= 0,0,32,0%; 		 	!ADAPTER CONFIGURATION STATUS REGISTER ADDRESS 
 MACRO		ADP$L_LINK	= 4,0,32,0%; 			!ADDRESS OF NEXT ADAPTER CONTROL BLOCK 
 MACRO		ADP$W_SIZE	= 8,0,16,0%; 			!STRUCTURE SIZE IN BYTES 
 MACRO		ADP$B_TYPE	= 10,0,8,0%; 			!STRUCTURE TYPE CODE 
 MACRO		ADP$B_NUMBER	= 11,0,8,0%; 		!ORDINAL ADAPTER NUMBER 
 MACRO		ADP$W_TR	= 12,0,16,0%; 			!CONFIGURATION TR NUMBER 
 MACRO		ADP$W_ADPTYPE	= 14,0,16,0%; 		!SOFTWARE ADAPTER TYPE 
 MACRO		ADP$L_VECTOR	= 16,0,32,0%; 		!UBA - ADDRESS OF VECTOR JUMP TABLE 
 MACRO		ADP$L_CRB	= 16,0,32,0%; 			!MBA - ADDRESS OF ADAPTER'S CRB 
 LITERAL	ADP$C_MBAADPLEN	= 20; 
 LITERAL	ADP$K_MBAADPLEN	= 20; 			!LENGTH OF ADP FOR MASSBUS ADAPTER 
 MACRO		ADP$L_DPQFL	= 20,0,32,0%; 			!UBA - DATAPATH WAIT QUEUE FORWARD LINK 
 MACRO		ADP$L_DPQBL	= 24,0,32,0%; 			!UBA - DATAPATH WAIT QUEUE BACKWARD LINK 
 MACRO		ADP$L_MRQFL	= 28,0,32,0%; 			!UBA - MAP REGISTER WAIT QUEUE FORWARD LINK 
 MACRO		ADP$L_MRQBL	= 32,0,32,0%; 			!UBA - MAP REGISTER WAIT QUEUE BACKWARD LINK 
 MACRO		ADP$W_DPBITMAP	= 36,0,16,0%; 		!UBA - DATAPATH ALLOCATION BITMAP 
 MACRO		ADP$W_MRBITMAP	= 38,0,0,0%; 		!UBA - MAP REGISTER ALLOCATION BITMAP 
 LITERAL	ADP$S_MRBITMAP	= 62; 
 MACRO		ADP$L_INTD	= 100,0,0,0%; 		!UBA - INTERRUPT TRANSFER VECTOR 
 LITERAL	ADP$S_INTD	= 12; 
 LITERAL	ADP$C_NUMDATAP	= 16; 			!UBA - NUMBER OF DATAPATHS 
 LITERAL	ADP$C_UBAADPLEN	= 112; 
 LITERAL	ADP$K_UBAADPLEN	= 112; 			!LENGTH OF ADP FOR UNIBUS ADAPTER 
  

 !+ 
 ! FORMAT OF ACP I/O BUFFER PACKET. THIS PACKET CONTAINS ALL THE DATA 
 ! TRANSMITTED FROM THE USER TO THE ACP AND BACK FOR AN ACP FUNCTION. 
 ! NOTE THAT THE DESCRIPTORS IN THE PACKET ARE TREATED BY BLISS CODE 
 ! AS A BLOCKVECTOR. 
 !- 
  
 !...$AIBDEF		! MAIN PACKET BODY 
  
 MACRO		AIB$L_DESCRIPT	= 0,0,32,0%; 		! ADDRESS OF START OF DESCRIPTORS 
 MACRO		AIB$W_SIZE	= 8,0,16,0%; 		! SIZE OF PACKET 
 MACRO		AIB$B_TYPE	= 10,0,8,0%; 		! PACKET TYPE CODE 
 LITERAL	AIB$C_LENGTH	= 12; 
 LITERAL	AIB$K_LENGTH	= 12; 			! LENGTH OF PACKET HEADER 
  

  
  
 !...$ABDDEF		! DESCRIPTOR FORMAT 
  
 MACRO		ABD$W_TEXT	= 0,0,16,0%; 		! WORD OFFSET TO DATA TEXT 
 MACRO		ABD$W_COUNT	= 2,0,16,0%; 		! BYTE COUNT OF TEXT 
 MACRO		ABD$L_USERVA	= 4,0,32,0%; 		! USER VIRTUAL ADDRESS OF TEXT 
 LITERAL	ABD$C_LENGTH	= 8; 
 LITERAL	ABD$K_LENGTH	= 8; 			! SIZE OF DESCRIPTOR 
 LITERAL	ABD$C_WINDOW	= 0; 			! DESCRIPTOR FOR WINDOW ADDRESS 
 LITERAL	ABD$C_FIB	= 1; 				! DESCRIPTOR FOR FIB 
 LITERAL	ABD$C_NAME	= 2; 			! DESCRIPTOR FOR NAME STRING 
 LITERAL	ABD$C_RESL	= 3; 			! DESCRIPTOR FOR RESULT LENGTH 
 LITERAL	ABD$C_RES	= 4; 				! DESCRIPTOR FOR RESULT STRING 
 LITERAL	ABD$C_ATTRIB	= 5; 			! FIRST ATTRIBUTE DESCRIPTOR 
  

  
 !+ 
 ! DEFINITION OF ACP QUEUE HEADER 
 !- 
  
 !...$AQBDEF		! ACP QUEUE HEADER BLOCK 
  
 MACRO		AQB$L_ACPQFL	= 0,0,32,0%; 		! QUEUE FORWARD LINK 
 MACRO		AQB$L_ACPQBL	= 4,0,32,0%; 		! QUEUE BACK LINK 
 MACRO		AQB$W_SIZE	= 8,0,16,0%; 		! CONTROL BLOCK SIZE IN BYTES 
 MACRO		AQB$B_TYPE	= 10,0,8,0%; 		! BLOCK TYPE CODE 
 MACRO		AQB$B_MNTCNT	= 11,0,8,0%; 		! ACP MOUNT COUNT 
 MACRO		AQB$L_ACPPID	= 12,0,32,0%; 		! ACP PROCESS PID 
 MACRO		AQB$L_LINK	= 16,0,32,0%; 			! AQB LIST LINKAGE 
 MACRO		AQB$B_STATUS	= 20,0,8,0%; 		! STATUS BYTE 
 			 
 MACRO		AQB$V_UNIQUE	= 20,0,1,0%; 		! ACP IS UNIQUE TO THIS DEVICE 
 LITERAL	AQB$M_UNIQUE	= 1^1 - 1^0; 
 MACRO		AQB$V_DEFCLASS	= 20,1,1,0%; 		! ACP IS DEFAULT FOR THIS CLASS 
 LITERAL	AQB$M_DEFCLASS	= 1^2 - 1^1; 
 MACRO		AQB$V_DEFSYS	= 20,2,1,0%; 		! ACP IS DEFAULT FOR THE SYSTEM 
 LITERAL	AQB$M_DEFSYS	= 1^3 - 1^2; 
 MACRO		AQB$V_CREATING	= 20,3,1,0%; 		! ACP IS CURRENTLY BEING CREATED 
 LITERAL	AQB$M_CREATING	= 1^4 - 1^3; 
 			
 MACRO		AQB$B_ACPTYPE	= 21,0,8,0%; 		! ACP TYPE CODE 
 LITERAL	
 $EQULST (AQB$K_,GBL,0,1  
 	,(UNDEFINED,) 			! UNDEFINED ACP 
 	,(F11V1,) 			! FILES-11 STRUCTURE LEVEL 1 
 	,(F11V2,) 			! FILES-11 STRUCTURE LEVEL 2 
 	,(MTA,) 				! MAGTAPE 
 	,(NET,) 				! NETWORKS 
 	); 
 MACRO		AQB$B_CLASS	= 22,0,8,0%; 		! ACP CLASS CODE 
 LITERAL	AQB$C_LENGTH	= 24; 
 LITERAL	AQB$K_LENGTH	= 24; 			! SIZE OF AQB 
  

  
 !+ 
 ! 
 ! Structure of message from disk ACP to bad block scan utility. 
 ! 
 !- 
  
 !...$BBSDEF	
  
 MACRO		BBS$B_MSGTYPE	= 0,0,8,0%; 			! message type code (MSG$C_SCANBAD) 
 MACRO		BBS$W_SEQUENCE	= 4,0,16,0%; 			! message sequence number 
 MACRO		BBS$L_UCB	= 8,0,32,0%; 				! UCB address of device 
 MACRO		BBS$W_FID	= 12,0,0,0%; 			! file ID of file 
 LITERAL	BBS$S_FID	= 6; 
 LITERAL	BBS$C_LENGTH	= 18; 
 LITERAL	BBS$K_LENGTH	= 18; 	 
  

  
 !+ 
 ! CONDITIONAL ASSEMBLY PARAMETER DEFINITIONS 
 ! 
 !	A NONZERO PARAMETER VALUE INDICATES PRESENCE OF THE FEATURE. 
 !	A ZERO PARAMETER VALUE INDICATES ABSENCE OF THE FEATURE 
 ! 
 !	ALL PARAMETERS MUST BE DEFINED 
 !- 
  
 !...$CADEF	
  
 LITERAL	
 $EQULST (CA$_,GBL,0,1  
 	,(SIMULATOR,1) 			!INCLUDE SIMULATOR SUPPORT CODE 
 	,(MEASURE,2) 			!INCLUDE PERFORMANCE MEASUREMENT HOOKS 
 	,(MEASURE_IOT,4) 			!INCLUDE I/O TRANSACTION DATA COLLECTION 
 	); 
  

  
 !+ 
 ! CCB - CHANNEL CONTROL BLOCK 
 ! 
 ! THERE IS ONE CHANNEL CONTROL BLOCK FOR EACH SOFTWARE CHANNEL THAT A 
 ! PROCESS MAY INITIATE I/O REQUESTS ON. THE NUMBER OF SUCH I/O CHANNELS 
 ! IS DETERMINED BY THE FIXED NUMBER ASSIGNED TO A PROCESS PLUS ANY 
 ! ADDITIONAL CHANNELS REQUIRED BY THE IMAGE CURRENTLY BEING EXECUTED 
 ! BY THE PROCESS. 
 ! 
 ! **** WARNING **** 
 !	THE CHANNEL CONTROL BLOCK IS ASSUMED TO BE FOUR LONG WORDS 
 ! THROUGHOUT THE EXEC.  ITS SIZE MAY BE CHANGED BUT ONLY BY POWERS OF 2. 
 !- 
  
 !...$CCBDEF	
  
 MACRO		CCB$L_UCB	= 0,0,32,0%; 		!ADDRESS OF ASSIGNED DEVICE UCB 
 MACRO		CCB$L_WIND	= 4,0,32,0%; 		!ADDRESS OF WINDOW BLOCK 
 MACRO		CCB$B_STS	= 8,0,8,0%; 		!CHANNEL STATUS 
 MACRO		CCB$B_AMOD	= 9,0,8,0%; 		!ACCESS MODE THAT ASSIGNED CHANNEL 
 MACRO		CCB$W_IOC	= 10,0,16,0%; 		!NUMBER OF OUTSTANDING I/O REQUESTS ON CHANNEL 
 MACRO		CCB$L_DIRP	= 12,0,32,0%; 		!DEACCESS I/O REQUEST PACKET ADDRESS 
 LITERAL	CCB$C_LENGTH	= 16; 
 LITERAL	CCB$K_LENGTH	= 16; 			!LENGTH OF CCB 

  
 !+ 
 ! COMMON EVENT BLOCK 
 !- 
 !...$CEBDEF	
  
 MACRO		CEB$L_CEBFL	= 0,0,32,0%; 			!POINTER TO NEXT COMMON EVENT BLOCK 
 MACRO		CEB$L_CEBBL	= 4,0,32,0%; 			!POINTER TO PREVIOUS COMMON EVENT BLOCK 
 MACRO		CEB$W_SIZE	= 8,0,16,0%; 			!SIZE OF COMMON EVENT BLOCK IN BYTES 
 MACRO		CEB$B_TYPE	= 10,0,8,0%; 			!STRUCTURE TYPE CODE FOR CEB 
 MACRO		CEB$B_STS	= 11,0,8,0%; 			!STATUS FLAGS FOR CEB 
 						!FLAG DEFINITIONS 
 MACRO		CEB$V_NOQUOTA	= 11,0,1,0%; 			!NO QUOTA UPDATE 
 MACRO		CEB$V_PERM	= 11,1,1,0%; 			!PERMANENT CLUSTER 
 							! 
 MACRO		CEB$L_PID	= 12,0,32,0%; 			!PID OF CREATOR 
 MACRO		CEB$L_EFC	= 16,0,32,0%; 			!EVENT FLAGS (32 BIT VECTOR) 
 MACRO		CEB$L_WQFL	= 20,0,32,0%; 			!HEAD OF WAIT QUEUE 
 MACRO		CEB$L_WQBL	= 24,0,32,0%; 			!TAIL OF WAIT QUEUE 
 MACRO		CEB$W_WQCNT	= 28,0,16,0%; 			!WAIT QUEUE COUNT(LENGTH) 
 MACRO		CEB$W_STATE	= 30,0,16,0%; 			!CEF WAIT STATE NUMBER 
 MACRO		CEB$L_UIC	= 32,0,32,0%; 			!USER IDENT OF CEB CREATOR 
 MACRO		CEB$W_GRP	= 34,0,16,0%; 			!GROUP NUMBER OF OWNER 
 MACRO		CEB$W_PROT	= 36,0,16,0%; 			!PROTECTION MASK 
 MACRO		CEB$W_REFC	= 38,0,16,0%; 			!REFERENCE COUNT FOR CEB 
 MACRO		CEB$T_EFCNAM	= 40,0,0,0%; 		!EVENT CLUSTER TEXT NAME 
 LITERAL	CEB$S_EFCNAM	= 16; 
  

  
 !+ 
 ! CRB - CHANNEL REQUEST BLOCK 
 ! 
 ! THERE IS ONE CHANNEL REQUEST BLOCK FOR EACH SET OF DEVICES WHOSE 
 ! ACCESS TO A SET OF CONTROLLERS MUST BE SYNCHRONIZED. EACH CHANNEL 
 ! CONTROL BLOCK ALLOWS UP TO FOUR CONTROLLERS TO WHICH THE INDIVIDUAL 
 ! DEVICES CAN BE ATTACHED. 
 !- 
  
 !...$CRBDEF	
  
 MACRO		CRB$L_WQFL	= 0,0,32,0%; 			!WAIT QUEUE FORWARD LINK 
 MACRO		CRB$L_TT_DIAL	= 0,0,32,0%; 		!TERMINAL DRIVER DIALUP ACTION LIST 
 MACRO		CRB$L_WQBL	= 4,0,32,0%; 			!WAIT QUEUE BACKWARD LINK 
 MACRO		CRB$B_TT_ATTN	= 4,0,8,0%; 		!TERMINAL DRIVER DIALUP ATTENTION MASK 
 MACRO		CRB$B_TT_EXPEC	= 5,0,8,0%; 		!TERMINNAL CARRIER EXPECTED MASK 
 MACRO		CRB$W_SIZE	= 8,0,16,0%; 			!SIZE OF CRB IN BYTES 
 MACRO		CRB$B_TYPE	= 10,0,8,0%; 			!STRUCTURE TYPE FOR CRB 
 MACRO		CRB$W_REFC	= 12,0,16,0%; 			!REFERENCE COUNT OF UCB'S 
 MACRO		CRB$B_MASK	= 14,0,8,0%; 			!CHANNEL ALLOCATION MASK 
 						! MASK BIT DEFINITIONS 
 MACRO		CRB$V_BSY	= 14,0,1,0%; 			! CHANNEL IS BUSY (1=YES) 
 LITERAL	CRB$M_BSY	= 1^1 - 1^0; 
 						! END OF BIT DEFINITIONS 
 MACRO		CRB$L_LINK	= 16,0,32,0%; 			!ADDRESS OF SECONDARY CRB 
 MACRO		CRB$L_INTD	= 20,0,0,0%; 		!INTERRUPT TRANSFER VECTOR 
 LITERAL	CRB$S_INTD	= 36; 
 LITERAL	CRB$C_LENGTH	= 56; 
 LITERAL	CRB$K_LENGTH	= 56; 				!LENGTH OF STANDARD CRB 
 MACRO		CRB$L_INTD2	= 56,0,0,0%; 		!SECOND INTERRUPT VECTOR 
 LITERAL	CRB$S_INTD2	= 36; 

  
  
 !+ 
 ! CRB INTERRUPT TRANSFER VECTOR STRUCTURE DEFINITIONS 
 !- 
  
 !...$VECDEF	
  
 MACRO		VEC$Q_DISPATCH	= 0,0,0,0%; 		!REGISTER SAVE AND DISPATCH INSTRUCTIONS 
 LITERAL	VEC$S_DISPATCH	= 8; 
 MACRO		VEC$L_IDB	= 8,0,32,0%; 			!ADDRESS OF ASSOCIATED IDB 
 MACRO		VEC$L_INITIAL	= 12,0,32,0%; 		!CONTROLLER INITIALIZATION ENTRY ADDRESS 
 MACRO		VEC$W_MAPREG	= 16,0,16,0%; 		!STARTING MAP REGISTER ALLOCATED 
 						! MAP REGISTER FIELD BIT DEFINITIONS 
 MACRO		VEC$V_MAPREG	= 16,0,15,0%; 		! MAP REGISTER NUMBER 
 MACRO		VEC$V_MAPLOCK	= 16,15,1,0%; 		! MAP REGISTER ALLOCATION PERMANENT 
 LITERAL	VEC$M_MAPLOCK	= 1^16 - 1^15; 
 					! 
 MACRO		VEC$B_NUMREG	= 18,0,8,0%; 		!NUMBER OF MAP REGISTERS ALLOCATED 
 MACRO		VEC$B_DATAPATH	= 19,0,8,0%; 		!BUFFERED DATAPATH ALLOCATED 
 						! DATAPATH FIELD BIT DEFINITIONS 
 MACRO		VEC$V_DATAPATH	= 19,0,7,0%; 		! DATAPATH NUMBER 
 MACRO		VEC$V_PATHLOCK	= 19,7,1,0%; 		! DATAPATH PERMENENT 
 LITERAL	VEC$M_PATHLOCK	= 1^8 - 1^7; 
 					! 
 MACRO		VEC$L_ADP	= 20,0,32,0%; 			!ADDRESS OF ADP 
 MACRO		VEC$L_UNITINIT	= 24,0,32,0%; 		!ADDRESS OF UNIT INITIALIZE 
 MACRO		VEC$L_START	= 28,0,32,0%; 			!ADDRESS OF UNIT START 
 MACRO		VEC$L_UNITDISC	= 32,0,32,0%; 		!ADDRESS OF UNIT DISCONNECT 
 LITERAL	VEC$C_LENGTH	= 36; 
 LITERAL	VEC$K_LENGTH	= 36; 				!LENGTH OF STANDARD DISPATCHER 

  
 !+ 
 ! CXB - COMPLEX CHAINED BUFFER 
 ! 
 ! THESE OFFSETS ARE USED IN THE HEADER OF DISJOINT SEGMENTS 
 ! WHICH ARE TO BE PRESENTED TO THE USER AS A UNIT. 
 ! 
 !- 
  
 !...$CXBDEF	
  
 MACRO		CXB$L_FL	= 0,0,32,0%; 			!FORWARD QUEUE LINK 
 MACRO		CXB$L_BL	= 4,0,32,0%; 			!BACKWARD QUEUE LINK 
 MACRO		CXB$W_SIZE	= 8,0,16,0%; 			!BLOCK SIZE 
 MACRO		CXB$B_TYPE	= 10,0,8,0%; 			!BLOCK TYPE 
 MACRO		CXB$B_CODE	= 11,0,8,0%; 			!BUFFER CODE 
 MACRO		CXB$W_LENGTH	= 12,0,16,0%; 		!LENGTH OF DATA 
 MACRO		CXB$W_OFFSET	= 14,0,16,0%; 		! OFFSET TO START OF NSP MESSAGE 
 MACRO		CXB$L_IRP	= 16,0,32,1%; 		!IRP ADDRESS FOR TRANSMITS (0=> DO NOT TERMINATE) 
 MACRO		CXB$L_LINK	= 16,0,32,0%; 			!LINK WORD FOR CHAINED DATA MESSAGE 
 MACRO		CXB$W_CHANNEL	= 16,0,16,0%; 		! STORE CHANNEL NUMBER FOR AST 
 MACRO		CXB$L_SSB	= 20,0,32,0%; 			!ADDR OF SSB FOR DECREMENTING TIPC 
 LITERAL	
 $EQULST (CXB$C_,GBL,1,1  
 	,(DDCCON,) 			!CONTROL MSG XMITTED - ALSO USED AS DEALLOCATION COUNT 
 	,(DDCDAT,) 			! DATA MSG XMITTED - ALSO USED AS DEALLOCATION COUNT 
 	,(DDCRCV,) 			! MSG RCVD 
 	,(DDCERR,) 			! ERROR NOTIFICATION 
 	); 
 LITERAL	CXB$C_LENGTH	= 24; 
 LITERAL	CXB$K_LENGTH	= 24; 				! LENGTH OF A CXB 
 LITERAL	CXB$C_NSPSTART	= 26; 
 LITERAL	CXB$K_NSPSTART	= 26; 			! NORMAL START OF NSP (NO ACKNUM) 

  
 !+ 
 ! DDB - DEVICE DATA BLOCK 
 ! 
 ! THERE IS ONE DEVICE DATA BLOCK FOR EACH CONTROLLER IN A SYSTEM. 
 !+ 
  
 !...$DDBDEF	
  
 MACRO		DDB$L_LINK	= 0,0,32,0%; 			!ADDRESS OF NEXT DDB IN LIST (0=LAST) 
 MACRO		DDB$L_UCB	= 4,0,32,0%; 			!ADDRESS OF FIRST UCB FOR THIS DDB 
 MACRO		DDB$W_SIZE	= 8,0,16,0%; 			!SIZE OF DDB IN BYTES 
 MACRO		DDB$B_TYPE	= 10,0,8,0%; 			!TYPE OF DATA STRUCTURE FOR DDB 
 MACRO		DDB$L_DDT	= 12,0,32,0%; 			!ADDRESS OF THE DRIVER DISPATCH TABLE 
 MACRO		DDB$L_ACPD	= 16,0,32,0%; 			!NAME OF DEFAULT ACP FOR DEVICE UNITS 
 MACRO		DDB$B_ACPCLASS	= 19,0,8,0%; 		!CLASS CODE OF DEFAULT ACP 
 MACRO		DDB$T_NAME	= 20,0,8,0%; 		!GENERIC PATHNAME OF DEVICE 
 MACRO		DDB$T_DRVNAME	= 36,0,8,0%; 		!DRIVERNAME 
 LITERAL	DDB$C_LENGTH	= 52; 
 LITERAL	DDB$K_LENGTH	= 52; 				!LENGTH OF STANDARD DDB 

  
 !+ 
 ! DDT - DRIVER DISPATCH TABLE 
 ! 
 ! EACH DEVICE DRIVER HAS A DRIVER DISPATCH TABLE. 
 !- 
  
 !...$DDTDEF	
  
 MACRO		DDT$L_START	= 0,0,32,0%; 			!ADDRESS OF DRIVER START I/O ROUTINE 
 MACRO		DDT$L_UNSOLINT	= 4,0,32,0%; 		!ADDRESS OF UNSOLICITED INTERRUPT ROUTINE 
 MACRO		DDT$L_FDT	= 8,0,32,0%; 			!ADDRESS OF FUNCTION DECISION TABLE 
 MACRO		DDT$L_CANCEL	= 12,0,32,0%; 		!ADDRESS OF CANCEL I/O ENTRY POINT 
 MACRO		DDT$L_REGDUMP	= 16,0,32,0%; 		!ADDRESS OF DEVICE REGISTER DUMP ROUTINE 
 MACRO		DDT$W_DIAGBUF	= 20,0,16,0%; 		!SIZE OF DIAGNOSTIC BUFFER IN BYTES 
 MACRO		DDT$W_ERRORBUF	= 22,0,16,0%; 		!SIZE OF ERROR LOG BUFFER IN BYTES 
 MACRO		DDT$L_INIT	= 24,0,32,0%; 			!UNIT INITIALIZATION ENTRY POINT 
  

  
 !+ 
 ! DPT - DRIVER PROLOGUE TABLE 
 ! 
 ! EACH DEVICE DRIVER HAS A DRIVER PROLOGUE TABLE. 
 !- 
  
 !...$DPTDEF	
  
 MACRO		DPT$L_FLINK	= 0,0,32,0%; 			!FORWARD LINK TO NEXT DPT 
 MACRO		DPT$L_BLINK	= 4,0,32,0%; 			!BACKWARD LINK TO PREVIOUS DPT 
 MACRO		DPT$W_SIZE	= 8,0,16,0%; 			!SIZE OF DRIVER 
 MACRO		DPT$B_TYPE	= 10,0,8,0%; 			!STRUCTURE TYPE 
 MACRO		DPT$B_REFC	= 11,0,8,0%; 			!COUNT OF DDB'S THAT REFERENCE DRIVER 
 MACRO		DPT$B_ADPTYPE	= 12,0,8,0%; 		!ADAPTER TYPE CODE 
 MACRO		DPT$B_FLAGS	= 13,0,8,0%; 			!DRIVER LOADER FLAGS 
 							! 
 MACRO		DPT$V_SUBCNTRL	= 13,0,1,0%; 		!DEVICE IS A SUB-CONTROLLER 
 LITERAL	DPT$M_SUBCNTRL	= 1^1 - 1^0; 
 MACRO		DPT$V_SVP	= 13,1,1,0%; 			!DEVICE REQUIRES A SYSTEM PAGE 
 LITERAL	DPT$M_SVP	= 1^2 - 1^1; 
 MACRO		DPT$V_NOUNLOAD	= 13,2,1,0%; 		!DRIVER IS NOT TO BE UNLOADED 
 LITERAL	DPT$M_NOUNLOAD	= 1^3 - 1^2; 
 			
 MACRO		DPT$W_UCBSIZE	= 14,0,16,0%; 		!SIZE OF UCB 
 MACRO		DPT$W_INITTAB	= 16,0,16,0%; 		!OFFSET TO INIT TABLE 
 MACRO		DPT$W_REINITTAB	= 18,0,16,0%; 		!OFFSET TO RE-INIT TABLE 
 MACRO		DPT$W_UNLOAD	= 20,0,16,0%; 		!OFFSET TO UNLOAD ACTION ROUTINE 
 MACRO		DPT$T_NAME	= 22,0,0,0%; 		!DRIVER NAME (COUNTED STRING) 
 LITERAL	DPT$S_NAME	= 12; 
 LITERAL	DPT$C_LENGTH	= 34; 
 LITERAL	DPT$K_LENGTH	= 34; 				!LENGTH OF PROLOGUE TABLE 
  

  
  
 !+ 
 ! TEMPORARY DATA STRUCTURE TYPE DEFINITIONS ********TEMP******** 
 !- 
  
 !...$DYNDEF	
  
 LITERAL	
 $EQULST (DYN$C_,GBL,1,1 			!BASE AND OFFSET OF 1 
  
 	,(ADP,) 					!UNIBUS ADAPTER CONTROL BLOCK 
 	,(ACB,) 	  				!AST CONTROL BLOCK 
 	,(AQB,) 	  				!ACP QUEUE BLOCK 
 	,(CEB,) 	  				!COMMON EVENT BLOCK 
 	,(CRB,) 	  				!CHANNEL REQUEST BLOCK 
 	,(DDB,) 	  				!DEVICE DESCRIPTOR BLOCK 
 	,(FCB,) 	  				!FILE CONTROL BLOCK 
 	,(FRK,) 	  				!FORK BLOCK 
 	,(IDB,) 	  				!INTERRUPT DISPATCH BLOCK 
 	,(IRP,) 	  				!I/O REQUEST PACKET 
 	,(LOG,) 	  				!LOGICAL NAME BLOCK 
 	,(PCB,) 	  				!PROCESS CONTROL BLOCK 
 	,(PQB,) 	  				!PROCESS QUOTA BLOCK 
 	,(RVT,) 	  				!RELATIVE VOLUME TABLE 
 	,(TQE,) 	  				!TIMER QUEUE ENTRY 
 	,(UCB,) 	  				!UNIT CONTROL BLOCK 
 	,(VCB,) 	  				!VOLUME CONTROL BLOCK 
 	,(WCB,) 					!WINDOW CONTROL BLOCK 
 	,(BUFIO,) 					!BUFFERED I/O BLOCK 
 	,(TYPAHD,) 					!TERMINAL TYPEAHEAD BUFFER 
 	,(GSD,) 					!GLOBAL SECTION DESCRIPTOR BLOCK 
 	,(MVL,) 					!MAGNETIC TAPE VOLUME LIST 
 	,(NET,) 					!NETWORK MESSAGE BLOCK 
 	,(KFI,) 					!KNOWN FILE ENTRY 
 	,(MTL,) 					!MOUNTED VOLUME LIST ENTRY 
 	,(BRDCST,) 					!BROADCAST MESSAGE BLOCK 
 	,(CXB,) 					!COMPLEX CHAINED BUFFER 
 	,(NDB,) 					! NETWORK NODE DESCRIPTOR BLOCK 
 	,(SSB,) 					! LOGICAL LINK SUBCHANNEL STATUS BLOCK 
 	,(DPT,) 					! DRIVER PROLOGUE TABLE 
 	,(JPB,) 					! JOB PARAMETER BLOCK 
 	,(PBH,) 					! PERFORMANCE BUFFER HEADER 
 	,(PDB,) 					! PERFORMANCE DATA BLOCK 
 	,(PIB,) 					! PERFORMANCE INFORMATION BLOCK 
 	,(PFL,) 					! PAGE FILE CONTROL BLOCK 
 	,(SFT,) 					! SWAP FILE TABLE 
 	,(PTR,) 					! POINTER CONTROL BLOCK 
 	,(KFH,) 					! KNOWN FILE IMAGE HEADER 
 	); 

  
  
 ! 
 ! ERROR MESSAGE BUFFER HEADER 
 ! 
 !		******	CAUTION  ****** 
 ! 
 !	ALL OF THE EMBxxDEF STRUCTURES ASSUME THAT THE HEADER IS 
 !	EXACTLY ONE LONGWORD IN LENGTH.  IF THIS FIELD CHANGES, 
 !	IF EFFECTS ALL OF THE OTHER STRUCTURES. 
 !	ALL MESSAGES HAVE TYPE,TIME, AND ERROR SEQUENCE IN THE 
 !	SAME RELATIVE LOCATIONS. 
 ! 
  
 !...$EMBHDDEF	 
  
 MACRO		EMB$W_SIZE	= 0,0,16,0%; 			!SIZE OF ERROR MESSAGE IN BYTES 
 MACRO		EMB$B_BUFIND	= 2,0,8,0%; 		!ALLOCATION BUFFER INDICATOR (0 OR 1) 
 MACRO		EMB$B_VALID	= 3,0,8,0%; 			!ERROR MESSAGE VALID INDICATOR 
 LITERAL	EMB$C_LENGTH	= 4; 
 LITERAL	EMB$K_LENGTH	= 4; 				!LENGTH OF FIXED PARTOF MESSAGE HEADER 
 MACRO		EMB$W_HD_ENTRY	= 4,0,16,0%; 		!ERROR MESSAGE ENTRY TYPE 
 MACRO		EMB$B_DEVTYP	= 4,0,8,0%; 		!DEVICE TYPE 
 MACRO		EMB$B_DEVCLS	= 5,0,8,0%; 		!DEVICE CLASS 
 MACRO		EMB$Q_HD_TIME	= 6,0,0,0%; 		!TIME OF MESSAGE ENTRY 
 LITERAL	EMB$S_HD_TIME	= 8; 
 MACRO		EMB$W_HD_ERRSEQ	= 14,0,16,0%; 		!ERROR SEQUENCE FOR MESSAGE 

  
 ! 
 ! BUGCHECK ERROR MESSAGE BUFFER FORMAT (SYSTEM AND USER) 
 ! 
  
 !...$EMBBCDEF			!BUG CHECK ENTRY FORMAT 
  
 MACRO		EMB$W_BC_ENTRY	= 4,0,16,0%; 		!ENTRY TYPE 
 MACRO		EMB$Q_BC_TIME	= 6,0,0,0%; 		!TIME IN 64 BITS 
 LITERAL	EMB$S_BC_TIME	= 8; 
 MACRO		EMB$W_BC_ERRSEQ	= 14,0,16,0%; 		!ERROR SEQUENCE NUMBER 
 MACRO		EMB$L_BC_KSP	= 16,0,32,0%; 		!KERNEL STACK POINTER 
 MACRO		EMB$L_BC_ESP	= 20,0,32,0%; 		!EXECUTIVE STACK POINTER 
 MACRO		EMB$L_BC_SSP	= 24,0,32,0%; 		!SUPERVISOR STACK POINTER 
 MACRO		EMB$L_BC_USP	= 28,0,32,0%; 		!USER STACK POINTER 
 MACRO		EMB$L_BC_ISP	= 32,0,32,0%; 		!INTERRUPT STACK POINTER 
 MACRO		EMB$L_BC_R0	= 36,0,32,0%; 			!REGISTER R0 
 MACRO		EMB$L_BC_R1	= 40,0,32,0%; 			!REGISTER R1 
 MACRO		EMB$L_BC_R2	= 44,0,32,0%; 			!REGISTER R2 
 MACRO		EMB$L_BC_R3	= 48,0,32,0%; 			!REGISTER R3 
 MACRO		EMB$L_BC_R4	= 52,0,32,0%; 			!REGISTER R4 
 MACRO		EMB$L_BC_R5	= 56,0,32,0%; 			!REGISTER R5 
 MACRO		EMB$L_BC_R6	= 60,0,32,0%; 			!REGISTER R6 
 MACRO		EMB$L_BC_R7	= 64,0,32,0%; 			!REGISTER R7 
 MACRO		EMB$L_BC_R8	= 68,0,32,0%; 			!REGISTER R8 
 MACRO		EMB$L_BC_R9	= 72,0,32,0%; 			!REGISTER R9 
 MACRO		EMB$L_BC_R10	= 76,0,32,0%; 		!REGISTER R10 
 MACRO		EMB$L_BC_R11	= 80,0,32,0%; 		!REGISTER R11 
 MACRO		EMB$L_BC_AP	= 84,0,32,0%; 			!ARGUMENT POINTER 
 MACRO		EMB$L_BC_FP	= 88,0,32,0%; 			!FRAME POINTER 
 MACRO		EMB$L_BC_SP	= 92,0,32,0%; 			!CURRENT STACK POINTER 
 MACRO		EMB$L_BC_PC	= 96,0,32,0%; 			!PROGRAM COUNTER 
 MACRO		EMB$L_BC_PSL	= 100,0,32,0%; 		!PROCESSOR STATUS 
 MACRO		EMB$L_BC_CODE	= 104,0,32,0%; 		!BUGCHECK CODE 
 MACRO		EMB$W_BC_PCBSZ	= 108,0,16,0%; 		!SIZE OF PCB IN BYTES 
 LITERAL	EMB$C_BC_LENGTH	= 110; 
 LITERAL	EMB$K_BC_LENGTH	= 110; 			!SIZE OF FIXED PART OF BUGCHECK MESSAGE 
 MACRO		EMB$B_BC_PCB	= 110,0,8,0%; 		!START OF SOFTWARE PCB 
 			! 
  
 ! 
 ! CRASH-RESTART ERROR MESSAGE BUFFER FORMAT 
 ! 
  
 !...$EMBCRDEF			!CRASH RESTART RECORD FORMAT 
  
 MACRO		EMB$W_CR_ENTRY	= 4,0,16,0%; 		!ENTRY TYPE 
 MACRO		EMB$Q_CR_TIME	= 6,0,0,0%; 		!TIME IN 64 BITS 
 LITERAL	EMB$S_CR_TIME	= 8; 
 MACRO		EMB$W_CR_ERRSEQ	= 14,0,16,0%; 		!ERROR SEQUENCE NUMBER 
 MACRO		EMB$L_CR_KSP	= 16,0,32,0%; 		!KERNEL STACK POINTER 
 MACRO		EMB$L_CR_ESP	= 20,0,32,0%; 		!EXECUTIVE STACK POINTER 
 MACRO		EMB$L_CR_SSP	= 24,0,32,0%; 		!SUPERVISOR STACK POINTER 
 MACRO		EMB$L_CR_USP	= 28,0,32,0%; 		!USER STACK POINTER 
 MACRO		EMB$L_CR_ISP	= 32,0,32,0%; 		!INTERRUPT STACK POINTER 
 MACRO		EMB$L_CR_R0	= 36,0,32,0%; 			!REGISTER R0 
 MACRO		EMB$L_CR_R1	= 40,0,32,0%; 			!REGISTER R1 
 MACRO		EMB$L_CR_R2	= 44,0,32,0%; 			!REGISTER R2 
 MACRO		EMB$L_CR_R3	= 48,0,32,0%; 			!REGISTER R3 
 MACRO		EMB$L_CR_R4	= 52,0,32,0%; 			!REGISTER R4 
 MACRO		EMB$L_CR_R5	= 56,0,32,0%; 			!REGISTER R5 
 MACRO		EMB$L_CR_R6	= 60,0,32,0%; 			!REGISTER R6 
 MACRO		EMB$L_CR_R7	= 64,0,32,0%; 			!REGISTER R7 
 MACRO		EMB$L_CR_R8	= 68,0,32,0%; 			!REGISTER R8 
 MACRO		EMB$L_CR_R9	= 72,0,32,0%; 			!REGISTER R9 
 MACRO		EMB$L_CR_R10	= 76,0,32,0%; 		!REGISTER R10 
 MACRO		EMB$L_CR_R11	= 80,0,32,0%; 		!REGISTER R11 
 MACRO		EMB$L_CR_AP	= 84,0,32,0%; 			!ARGUMENT POINTER 
 MACRO		EMB$L_CR_FP	= 88,0,32,0%; 			!FRAME POINTER 
 MACRO		EMB$L_CR_SP	= 92,0,32,0%; 			!CURRENT STACK POINTER 
 MACRO		EMB$L_CR_PC	= 96,0,32,0%; 			!PROGRAM COUNTER 
 MACRO		EMB$L_CR_PSL	= 100,0,32,0%; 		!PROCESSOR STATUS 
 MACRO		EMB$L_CR_P0BR	= 104,0,32,0%; 		!PROGRAM REGION BASE REGISTER 
 MACRO		EMB$L_CR_P0LR	= 108,0,32,0%; 		!PROGRAM REGION LIMIT REGISTER 
 MACRO		EMB$L_CR_P1BR	= 112,0,32,0%; 		!CONTROL REGION BASE REGISTER 
 MACRO		EMB$L_CR_P1LR	= 116,0,32,0%; 		!CONTROL REGION LIMIT REGISTER 
 MACRO		EMB$L_CR_SBR	= 120,0,32,0%; 		!SYSTEM BASE REGISTER 
 MACRO		EMB$L_CR_SLR	= 124,0,32,0%; 		!SYSTEM LIMIT REGISTER 
 MACRO		EMB$L_CR_PCBB	= 128,0,32,0%; 		!PROCESS CONTROL BLOCK BASE REGISTER 
 MACRO		EMB$L_CR_SCBB	= 132,0,32,0%; 		!SYSTEM CONTROL BLOCK BASE REGISTER 
 MACRO		EMB$L_CR_ASTLVL	= 136,0,32,0%; 		!AST DELIVERY LEVEL REGISTER 
 MACRO		EMB$L_CR_SISR	= 140,0,32,0%; 		!SOFTWARE INTERRUPT SUMMARY REGISTER 
 MACRO		EMB$L_CR_ICCS	= 144,0,32,0%; 		!INTERVAL TIMER CONTROL STATUS REGISTER 
 MACRO		EMB$L_CR_ICR	= 148,0,32,0%; 		!INTERVAL COUNT REGISTER 
 MACRO		EMB$L_CR_TODR	= 152,0,32,0%; 		!TIME OF DAY REGISTER 
 MACRO		EMB$L_CR_ACCS	= 156,0,32,0%; 		!ACCELERATOR CONTROL REGISTER 
 MACRO		EMB$L_CR_SBIFS	= 160,0,32,0%; 		!SBI FAULT STATUS REGISTER 
 MACRO		EMB$L_CR_SBISC	= 164,0,32,0%; 		!SBI COMPARATOR REGISTER 
 MACRO		EMB$L_CR_SBIMT	= 168,0,32,0%; 		!SBI MAINTENANCE REGISTER 
 MACRO		EMB$L_CR_SBIER	= 172,0,32,0%; 		!SBI ERROR REGISTER 
 MACRO		EMB$L_CR_SBITA	= 176,0,32,0%; 		!SBI TIMEOUT ADDRESS REGISTER 
 MACRO		EMB$L_CR_SBIS	= 180,0,0,0%; 		!SBI SILO REGISTER 
 LITERAL	EMB$S_CR_SBIS	= 64; 
 MACRO		EMB$L_CR_CODE	= 244,0,32,0%; 		!BUGCHECK/CRASH CODE 
 MACRO		EMB$W_CR_PCBSZ	= 248,0,16,0%; 		!SIZE OF PCB IN BYTES 
 LITERAL	EMB$C_CR_LENGTH	= 250; 
 LITERAL	EMB$K_CR_LENGTH	= 250; 			!SIZE OF FIXED PART OF BUGCHECK MESSAGE 

  
 ! 
 ! DEVICE ERROR MESSAGE BUFFER FORMAT (ERROR AND TIMEOUT) 
 ! 
  
 !...$EMBDVDEF			!DEVICE ERROR RECORD FORMAT 
  
 MACRO		EMB$W_DV_ENTRY	= 4,0,16,0%; 		!ENTRY TYPE (1=ERROR, 96=TIMEOUT) 
 MACRO		EMB$Q_DV_TIME	= 6,0,0,0%; 		!TIME OF ERROR 
 LITERAL	EMB$S_DV_TIME	= 8; 
 MACRO		EMB$W_DV_ERRSEQ	= 14,0,16,0%; 		!ERROR SEQUENCE NUMBER 
 MACRO		EMB$B_DV_ERTCNT	= 16,0,8,0%; 		!REMAINING NUMBER OF ERROR RETRIES 
 MACRO		EMB$B_DV_ERTMAX	= 17,0,8,0%; 		!MAXIMUM NUMBER OF ERROR RETRIES 
 MACRO		EMB$Q_DV_IOSB	= 18,0,0,0%; 		!FINAL I/O STATUS 
 LITERAL	EMB$S_DV_IOSB	= 8; 
 MACRO		EMB$W_DV_DEVSTS	= 26,0,16,0%; 		!FINAL DEVICE STATUS 
 MACRO		EMB$B_DV_CLASS	= 28,0,8,0%; 		!DEVICE CLASS 
 MACRO		EMB$B_DV_TYPE	= 29,0,8,0%; 		!DEVICE TYPE 
 MACRO		EMB$L_DV_RQPID	= 30,0,32,0%; 		!REQUESTER PROCESS ID 
 MACRO		EMB$W_DV_BOFF	= 34,0,16,0%; 		!BYTE OFFSET IN PAGE 
 MACRO		EMB$W_DV_BCNT	= 36,0,16,0%; 		!TRANSFER BYTE COUNT 
 MACRO		EMB$L_DV_MEDIA	= 38,0,32,0%; 		!STARTING MEDIA ADDRESS 
 MACRO		EMB$W_DV_UNIT	= 42,0,16,0%; 		!PHYSICAL UNIT NUMBER 
 MACRO		EMB$W_DV_ERRCNT	= 44,0,16,0%; 		!UNIT ERROR COUNT 
 MACRO		EMB$L_DV_OPCNT	= 46,0,32,0%; 		!UNIT OPERATION COUNT 
 MACRO		EMB$L_DV_OWNUIC	= 50,0,32,0%; 		!VOLUME OWNER UIC 
 MACRO		EMB$L_DV_CHAR	= 54,0,32,0%; 		!DEVICE CHARACTERISTICS 
 MACRO		EMB$B_DV_SLAVE	= 58,0,8,0%; 		!SLAVE CONTROLLER NUMBER 
 MACRO		EMB$W_DV_FUNC	= 60,0,16,0%; 		!I/O FUNCTION VALUE 
 MACRO		EMB$T_DV_NAME	= 62,0,0,0%; 		!DEVICE NAME 
 LITERAL	EMB$S_DV_NAME	= 16; 
 MACRO		EMB$L_DV_REGSAV	= 78,0,32,0%; 		!START OF REGISTER SAVE AREA 

  
 ! 
 ! TIME STAMP MSG FORMAT 
 ! 
  
 !...$EMBTSDEF			!TIME STAMP RECORD FORMAT 
  
 MACRO		EMB$W_TS_ENTRY	= 4,0,16,0%;  		!ENTRY TYPE 
 MACRO		EMB$Q_TS_TIME	= 6,0,0,0%;  		!TIME IN 64 BITS 
 LITERAL	EMB$S_TS_TIME	= 8; 
 MACRO		EMB$W_TS_ERRSEQ	= 14,0,16,0%; 		!ERROR SEQ # 
 LITERAL	EMB$C_TS_LENGTH	= 16; 
 LITERAL	EMB$K_TS_LENGTH	= 16; 			!LENGTH OF TIME STAMP MSG 

  
 ! 
 ! SYSTEM SERVICE MESSAGE 
 ! 
 !	NOTE:	SYSTEM SERVICE MESSAGE COVERS: 
 ! 
 !		1) THE MESSAGES FROM THE SERVICE 
 !		2) OPERATOR MESSAGES 
 !		3) NETWORK MESSAGES 
 ! 
 !	ONLY THE TYPE FIELD IS DIFERENT 
 ! 
  
 !...$EMBSSDEF			!SYSTEM SERVICE RECORD FORMAT 
  
 MACRO		EMB$W_SS_ENTRY	= 4,0,16,0%; 		!ENTRY TYPE 
 MACRO		EMB$Q_SS_TIME	= 6,0,0,0%; 		!TIME IN 64 BITS 
 LITERAL	EMB$S_SS_TIME	= 8; 
 MACRO		EMB$W_SS_ERRSEQ	= 14,0,16,0%; 		!ERROR SEQUENCE NUMBER 
 MACRO		EMB$W_SS_MSGSZ	= 16,0,16,0%; 		!MESSAGE TEXT SIZE IN BYTES 
 LITERAL	EMB$C_SS_LENGTH	= 18; 
 LITERAL	EMB$K_SS_LENGTH	= 18; 			!LENGTH OF CONSTANT PART 
 MACRO		EMB$B_SS_MSGTXT	= 18,0,8,0%; 		!FIRST BYTE OF MESSAGE TEXT 

  
 ! 
 ! VOLUME MOUNT/DISMOUNT MESSAGE TYPE 
 ! 
  
 !...$EMBVMDEF			!VOLUME MOUNT RECORD FORMAT 
  
 MACRO		EMB$W_VM_ENTRY	= 4,0,16,0%; 		!ENTRY TYPE = EMB$K_VM OR EMB$K_VD 
 MACRO		EMB$Q_VM_TIME	= 6,0,0,0%; 		!TIME IN 64 BIT FORMAT 
 LITERAL	EMB$S_VM_TIME	= 8; 
 MACRO		EMB$W_VM_ERRSEQ	= 14,0,16,0%; 		!ERROR SEQUENCE NUMBER 
 MACRO		EMB$L_VM_OWNUIC	= 16,0,32,0%; 		!OWNER UIC OF THE VOLUME 
 MACRO		EMB$L_VM_ERRCNT	= 20,0,32,0%; 		!UNIT ERROR COUNT FROM UCB 
 MACRO		EMB$L_VM_OPRCNT	= 24,0,32,0%; 		!UNIT OPERATION COUNT FROM UCB 
 MACRO		EMB$W_VM_UNIT	= 28,0,16,0%; 		!DEVICE UNIT NUMBER 
 MACRO		EMB$B_VM_NAMLNG	= 30,0,8,0%; 		!LENGTH OF DEVICE GENERIC NAME 
 MACRO		EMB$T_VM_NAMTXT	= 31,0,0,0%; 		!DEVICE GENERIC NAME 
 LITERAL	EMB$S_VM_NAMTXT	= 15; 
 MACRO		EMB$W_VM_VOLNUM	= 46,0,16,0%; 		!VOLUME NUMBER WITHIN SET 
 MACRO		EMB$W_VM_NUMSET	= 48,0,16,0%; 		!NUMBER OF VOLUMES WITHIN SET 
 MACRO		EMB$T_VM_LABEL	= 50,0,0,0%; 		!VOLUME LABEL 
 LITERAL	EMB$S_VM_LABEL	= 12; 
 LITERAL	EMB$C_VM_LENGTH	= 62; 
 LITERAL	EMB$K_VM_LENGTH	= 62; 			!LENGTH OF BUFFER 

 ! 
 ! SYSTEM STARTUP MESSAGE 
 ! 
 !...$EMBSUDEF			!SYSTEM UP MESSAGE BUFFER 
  
 MACRO		EMB$W_SU_ENTRY	= 4,0,16,0%; 		!ENTRY TYPE (IE: BOOT OR POWER RECOVERY) 
 MACRO		EMB$Q_SU_TIME	= 6,0,0,0%; 		!CONTENTS OF SYSTEM TIME QUADWORD 
 LITERAL	EMB$S_SU_TIME	= 8; 
 MACRO		EMB$W_SU_ERRSEQ	= 14,0,16,0%; 		!ERROR SEQUENCE NUMBER 
 MACRO		EMB$L_SU_DAYTIM	= 16,0,32,0%; 		!CONTENTS OF TIME OF DAY CLOCK 
 LITERAL	EMB$C_SU_LENGTH	= 20; 
 LITERAL	EMB$K_SU_LENGTH	= 20; 			!LENGTH OF MESSAGE 

  
  
 ! 
 ! MACHINE CHECK LOG BUFFER FORMAT 
 ! 
  
 !...$EMBMCDEF	 
  
 MACRO		EMB$W_MC_ENTRY	= 4,0,16,0%; 		!ENTRY TYPE 
 MACRO		EMB$Q_MC_TIME	= 6,0,0,0%; 		!TIME IN 64 BITS 
 LITERAL	EMB$S_MC_TIME	= 8; 
 MACRO		EMB$W_MC_ERRSEQ	= 14,0,16,0%; 		!ERROR SEQUENCE NUMBER 
 MACRO		EMB$B_MC_SUMCOD	= 16,0,8,0%; 		!SUMMARY CODE 
 MACRO		EMB$B_MC_TOPF	= 17,0,8,0%; 		!TIME OUT PENDING FLAG 
 MACRO		EMB$B_MC_OPCODE	= 18,0,8,0%; 		!OPCODE OF INSTRUCTION CAUSING CHECK 
 MACRO		EMB$B_MC_CACHEF	= 19,0,8,0%; 		!CACHE DISABLE FLAG, 1=GROUP 0, 2=G 1 
 MACRO		EMB$L_MC_CES	= 20,0,32,0%; 		!CPU ERROR STATUS 
 MACRO		EMB$L_MC_UPC	= 24,0,32,0%; 		!MICRO-PC AT FAULT TIME 
 MACRO		EMB$L_MC_VA	= 28,0,32,0%; 			!VIRTUAL ADDRESS AT FAULT TIME 
 MACRO		EMB$L_MC_D	= 32,0,32,0%; 			!CPU D REGISTER AT FAULT TIME 
 MACRO		EMB$L_MC_TBER0	= 36,0,32,0%; 		!TRANSLATION BUFFER STATUS REG 0 
 MACRO		EMB$L_MC_TBER1	= 40,0,32,0%; 		!TRANSLATION BUFFER STATUS REG 1 
 MACRO		EMB$L_MC_TIMOAD	= 44,0,32,0%; 		!PHYSICAL ADDRESS CAUSING SBI TIMEOUT 
 MACRO		EMB$L_MC_PARITY	= 48,0,32,0%; 		!CACHE STATUS REGISTER 
 MACRO		EMB$L_MC_SBIERR	= 52,0,32,0%; 		!SBI ERROR REGISTER 
 MACRO		EMB$L_MC_PC	= 56,0,32,0%; 			!PC OF INSTRUCTION CAUSING CHECK 
 MACRO		EMB$L_MC_PSL	= 60,0,32,0%; 		!PSL OF MACHINE AT FAULT TIME 
 LITERAL	EMB$C_MC_LENGTH	= 64; 
 LITERAL	EMB$K_MC_LENGTH	= 64; 			!LENGTH OF MACHINE CHECK FRAME 

  
 ! 
 ! SOFT ECC DETECTED ERRORS AND SBI ALERT BUFFER FORMAT 
 ! 
  
 !...$EMBSEDEF			! 
  
 MACRO		EMB$W_SE_ENTRY	= 4,0,16,0%; 		!ENTRY TYPE 
 MACRO		EMB$Q_SE_TIME	= 6,0,0,0%; 		!TIME IN 64 BITS 
 LITERAL	EMB$S_SE_TIME	= 8; 
 MACRO		EMB$W_SE_ERRSEQ	= 14,0,16,0%; 		!ERROR SEQUENCE NUMBER 
 MACRO		EMB$L_SE_NUMCON	= 16,0,32,0%; 		!NUMBER OF MEMORY CONTROLLERS 
 LITERAL	EMB$C_SE_LENGTH	= 20; 
 LITERAL	EMB$K_SE_LENGTH	= 20; 			!LENGTH OF FIXED PART OF MSG 
 MACRO		EMB$L_SE_TR	= 20,0,32,0%; 			!ADAPTOR TR NUMBER 
 MACRO		EMB$L_SE_A	= 24,0,32,0%; 			!MEMORY REGISTER A 
 MACRO		EMB$L_SE_B	= 28,0,32,0%; 			!MEMORY REGISTER B 
 MACRO		EMB$L_SE_C	= 32,0,32,0%; 			!MEMORY REGISTER C 
 MACRO		EMB$L_SE_PC	= 36,0,32,0%; 			!PC OF INSTRUCTION AT FAULT TIME 
 MACRO		EMB$L_SE_PSL	= 40,0,32,0%; 		!PSL OF MACHINE AT FAULT TIME 

  
 ! 
 ! SBI FAULT BUFFER FORMAT AND ASYNCHRONOUS WRITE ERROR FORMAT 
 ! 
  
 !...$EMBSBDEF			!SBI FAULT RECORD FORMAT 
  
 MACRO		EMB$W_SB_ENTRY	= 4,0,16,0%; 		!ENTRY TYPE 
 MACRO		EMB$Q_SB_TIME	= 6,0,0,0%; 		!TIME IN 64 BITS 
 LITERAL	EMB$S_SB_TIME	= 8; 
 MACRO		EMB$W_SB_ERRSEQ	= 14,0,16,0%; 		!ERROR SEQUENCE NUMBER 
 MACRO		EMB$L_SB_FAULT	= 16,0,32,0%; 		!SBI FAULT/STATUS REGISTER 
 MACRO		EMB$L_SB_SILCMP	= 20,0,32,0%; 		!SBI SILO COMPARATOR 
 MACRO		EMB$L_SB_MAINT	= 24,0,32,0%; 		!SBI MAINTENANCE 
 MACRO		EMB$L_SB_ERROR	= 28,0,32,0%; 		!SBI ERROR REG 
 MACRO		EMB$L_SB_TIMOUT	= 32,0,32,0%; 		!SBI TIMEOUT REG 
 MACRO		EMB$L_SB_SILO	= 36,0,0,0%; 		!SBI SILO REG 
 LITERAL	EMB$S_SB_SILO	= 64; 
 MACRO		EMB$L_SB_SBIRGS	= 100,0,0,0%; 		!REGISTER A'S ON BUS (OR 0) 
 LITERAL	EMB$S_SB_SBIRGS	= 64; 
 MACRO		EMB$L_SB_PC	= 164,0,32,0%; 			!PC OF INSTRUCTION AT FAULT TIME 
 MACRO		EMB$L_SB_PSL	= 168,0,32,0%; 		!PSL OF MACHINE AT FAULT TIME 
 LITERAL	EMB$C_SB_LENGTH	= 172; 
 LITERAL	EMB$K_SB_LENGTH	= 172; 			!LENGTH OF SBI ERROR BUFFER 
 			! 
  
  
 ! 
 ! ERROR MESSAGE ENTRY TYPE DEFINITIONS 
 ! 
 !...$EMBETDEF			!ENTRY TYPE DEFINITIONS 
  
 LITERAL	EMB$C_DE	= 01; 				!DEVICE ERROR 
 LITERAL	EMB$K_DE	= 01; 				!DEVICE ERROR 
 LITERAL	EMB$C_MC	= 02; 				!MACHINE CHECK 
 LITERAL	EMB$K_MC	= 02; 				!MACHINE CHECK 
 LITERAL	EMB$C_BE	= 04; 				!BUS ERROR 
 LITERAL	EMB$K_BE	= 04; 				!BUS ERROR 
 LITERAL	EMB$C_SA	= 05; 				!SBI ALERT 
 LITERAL	EMB$K_SA	= 05; 				!SBI ALERT 
 LITERAL	EMB$C_SE	= 06; 				!SOFT ECC ERROR 
 LITERAL	EMB$K_SE	= 06; 				!SOFT ECC ERROR 
 LITERAL	EMB$C_AW	= 07; 				!ASYNCHRONOUS WRITE ERROR 
 LITERAL	EMB$K_AW	= 07; 				!ASYNCHRONOUS WRITE ERROR 
 LITERAL	EMB$C_HE	= 08; 				!HARD ECC ERROR 
 LITERAL	EMB$K_HE	= 08; 				!HARD ECC ERROR 
 LITERAL	EMB$C_CS	= 32; 				!COLD START (IE: SYSTEM BOOT) 
 LITERAL	EMB$K_CS	= 32; 				!COLD START (IE: SYSTEM BOOT) 
 LITERAL	EMB$K_NF	= 35; 				!NEW FILE CREATED 
 LITERAL	EMB$C_NF	= 35; 				!NEW FILE CREATED 
 LITERAL	EMB$C_WS	= 36; 				!WARM START (IE: SYSTEM POWER RECOVERY) 
 LITERAL	EMB$K_WS	= 36; 				!WARM START (IE: SYSTEM POWER RECOVERY) 
 LITERAL	EMB$C_CR	= 37; 				!CRASH RE-START 
 LITERAL	EMB$K_CR	= 37; 				!CRASH RE-START 
 LITERAL	EMB$C_TS	= 38; 				!TIME STAMP ENTRY 
 LITERAL	EMB$K_TS	= 38; 				!TIME STAMP ENTRY 
 LITERAL	EMB$C_SS	= 39; 				!SYSTEM SERVICE MESSAGE 
 LITERAL	EMB$K_SS	= 39; 				!SYSTEM SERVICE MESSAGE 
 LITERAL	EMB$C_SBC	= 40; 				!SYSTEM BUGCHECK 
 LITERAL	EMB$K_SBC	= 40; 				!SYSTEM BUGCHECK 
 LITERAL	EMB$C_OM	= 41; 				!OPERATOR MESSAGE 
 LITERAL	EMB$K_OM	= 41; 				!OPERATOR MESSAGE 
 LITERAL	EMB$C_NM	= 42; 				!NETWORK MESSAGE 
 LITERAL	EMB$K_NM	= 42; 				!NETWORK MESSAGE 
 LITERAL	EMB$C_VM	= 64; 				!VOLUME MOUNT 
 LITERAL	EMB$K_VM	= 64; 				!VOLUME MOUNT 
 LITERAL	EMB$C_VD	= 65; 				!VOLUME DISMOUNT 
 LITERAL	EMB$K_VD	= 65; 				!VOLUME DISMOUNT 
 LITERAL	EMB$C_UI	= 97; 				!UNDEFINED INTERRUPT 
 LITERAL	EMB$K_UI	= 97; 				!UNDEFINED INTERRUPT 
 LITERAL	EMB$C_DT	= 96; 				!DEVICE TIMEOUT 
 LITERAL	EMB$K_DT	= 96; 				!DEVICE TIMEOUT 
 LITERAL	EMB$C_UBC	= 112; 				!USER BUGCHECK 
 LITERAL	EMB$K_UBC	= 112; 				!USER BUGCHECK 
  

  
 !+ 
 ! EOF1 ANSI MAGNETIC TAPE LABEL 
 ! THIS IS THE FIRST LABEL IN FILE TRAILER LABEL SET.  IT IS EQUIVALENT TO 
 ! HDR1 EXCEPT FOR THE FOLLOWING FIELDS. 
 !- 
 !...$EO1DEF		!EOF1 LABEL FORMAT 
  
 MACRO		EO1$L_EO1LID	= 0,0,32,0%; 	!LABEL IDENTIFIER AND NUMBER 'EOF1' 
 MACRO		EO1$T_BLOCKCNT	= 54,0,0,0%; 	!BLOCK COUNT 
 LITERAL	EO1$S_BLOCKCNT	= 6; 

  
  
 !+ 
 ! EOF2 ANDSI MAGNETIC TAPE LABEL 
 ! THIS IS THE SECOND LABEL IN THE FILE TRAILER LABEL SET.  IT IS EQUIVALENT 
 ! TO HDR2 EXCEPT FOR THE FOLLOWING FIELDS. 
 !- 
 !...$EO2DEF		!EOF2 LABEL FORMAT 
 	 
 MACRO		EO2$L_EO2LID	= 0,0,32,0%; 	!LABEL IDENTIFIER AND NUMBER 'EOF2' 

  
 ! 
 ! ERROR LOG ALLOCATION BUFFER HEADER 
 ! 
  
 !...$ERLDEF	
  
 MACRO		ERL$B_BUSY	= 0,0,8,0%; 			!NUMBER OF BUSY MESSAGES IN BUFFER 
 MACRO		ERL$B_MSGCNT	= 1,0,8,0%; 		!NUMBER OF COMPLETED MESSAGES IN BUFFER 
 MACRO		ERL$B_BUFIND	= 2,0,8,0%; 		!BUFFER INDICATOR OF RESPECTIVE BUFFER 
 MACRO		ERL$L_NEXT	= 4,0,32,0%; 			!ADDRESS OF NEXT AVAILABLE SPACE IN BUFFER 
 MACRO		ERL$L_END	= 8,0,32,0%; 			!ADDRESS OF END OF BUFFER + 1 
 LITERAL	ERL$C_LENGTH	= 12; 
 LITERAL	ERL$K_LENGTH	= 12; 				!LENGTH OF ALLOCATION BUFFER HEADER 
  
 						!BUFFER FLAGS 
 MACRO		ERL$V_LOCK	= 12,0,1,0%; 		!BUFFER ALLOCATION INTERLOCK 
 LITERAL	ERL$M_LOCK	= 1^1 - 1^0; 
 MACRO		ERL$V_TIMER	= 12,1,1,0%; 		!TIMER ACTIVE 
 LITERAL	ERL$M_TIMER	= 1^2 - 1^1; 
 					! 
  

  
 !+ 
 ! FCB - FILE CONTROL BLOCK 
 ! 
 ! THERE IS ONE FILE CONTROL BLOCK FOR EACH UNIQUELY ACCESSED FILE ON A 
 ! VOLUME. THE FILE CONTROL BLOCK PROVIDES THE VEHICLE WHEREBY SHARED 
 ! ACCESS TO A FILE MAY BE CONTROLLED. 
 !- 
  
 !...$FCBDEF	
 MACRO		FCB$L_FCBFL	= 0,0,32,0%; 			! FCB LIST FORWARD LINK 
 MACRO		FCB$L_FCBBL	= 4,0,32,0%; 			! FCB LIST BACKWARD LINK 
 MACRO		FCB$W_SIZE	= 8,0,16,0%; 		! SIZE OF FCB IN BYTES 
 MACRO		FCB$B_TYPE	= 10,0,8,0%; 		! STRUCTURE TYPE OF FCB 
 MACRO		FCB$L_EXFCB	= 12,0,32,0%; 			! ADDRESS OF EXTENSION FCB 
 MACRO		FCB$L_WLFL	= 16,0,32,0%; 			! WINDOW LISTHEAD FORWARD LINK 
 MACRO		FCB$L_WLBL	= 20,0,32,0%; 			! WINDOW LISTHEAD BACKWARD LINK 
 MACRO		FCB$W_ACNT	= 24,0,16,0%; 		! FILE ACCESS COUNT 
 MACRO		FCB$W_LCNT	= 26,0,16,0%; 		! FILE LOCK COUNT 
 MACRO		FCB$W_WCNT	= 28,0,16,0%; 		! FILE WRITER COUNT 
 MACRO		FCB$W_STATUS	= 30,0,16,0%; 		! FILE STATUS 
 			 
 MACRO		FCB$V_DIR	= 30,0,1,0%; 		! FCB IS A DIRECTORY LRU ENTRY 
 MACRO		FCB$V_MARKDEL	= 30,1,1,0%; 		! FILE IS MARKED FOR DELETE 
 MACRO		FCB$V_BADBLK	= 30,2,1,0%; 		! BAD BLOCK ENCOUNTERED IN FILE 
 MACRO		FCB$V_EXCL	= 30,3,1,0%; 		! FILE IS EXCLUSIVELY ACCESSED 
 MACRO		FCB$V_SPOOL	= 30,4,1,0%; 		! FILE IS AN INTERMEDIATE SPOOL FILE 
 			
 MACRO		FCB$W_FID	= 32,0,0,0%; 		! FILE IDENTIFICATION 
 LITERAL	FCB$S_FID	= 6; 
 MACRO		FCB$W_FID_NUM	= 32,0,16,0%; 	! FILE NUMBER 
 MACRO		FCB$W_FID_SEQ	= 34,0,16,0%; 	! FILE SEQUENCE NUMBER 
 MACRO		FCB$W_FID_RVN	= 36,0,16,0%; 	! RELATIVE VOLUME NUMBER 
 MACRO		FCB$B_FID_RVN	= 36,0,8,0%; 	! SHORT FORM RVN 
 MACRO		FCB$B_FID_NMX	= 37,0,8,0%; 	! EXTENDED FILE NUMBER 
 MACRO		FCB$W_SEGN	= 38,0,16,0%; 		! FILE SEGMENT NUMBER 
 MACRO		FCB$L_STVBN	= 40,0,32,0%; 			! STARTING VIRTUAL BLOCK NUMBER 
 MACRO		FCB$L_STLBN	= 44,0,32,0%; 			! STARTING LOGICAL BLOCK NUMBER 
 MACRO		FCB$L_HDLBN	= 48,0,32,0%; 			! LBN OF FILE HEADER 
 MACRO		FCB$L_FILESIZE	= 52,0,32,0%; 		! FILE SIZE IN BLOCKS 
 MACRO		FCB$L_FILEOWNER	= 56,0,32,0%; 		! FILE OWNER UIC 
 MACRO		FCB$W_UICMEMBER	= 56,0,16,0%; 	! MEMBER NUMBER 
 MACRO		FCB$W_UICGROUP	= 58,0,16,0%; 	! GROUP NUMBER 
 MACRO		FCB$W_FILEPROT	= 60,0,16,0%; 		! FILE PROTECTION MASK 
 MACRO		FCB$W_AMOD	= 62,0,16,0%; 		! LEAST PRIVILEGED ACCESS MODE 
 MACRO		FCB$L_EFBLK	= 64,0,32,0%; 		! END OF FILE VBN 
 MACRO		FCB$W_DIRSEQ	= 68,0,16,0%; 		! DIRECTORY USE SEQUENCE NUMBER 
 MACRO		FCB$W_TCNT	= 70,0,16,0%; 		! COUNT OF TRUNCATE LOCKS 
 LITERAL	FCB$C_LENGTH	= 72; 
 LITERAL	FCB$K_LENGTH	= 72; 			! LENGTH OF STANDARD FCB 
 MACRO		FCB$B_DIRIDX	= 72,0,0,0%; 		! DIRECTORY BLOCK INDEX AREA 
 LITERAL	FCB$S_DIRIDX	= 16; 

  
 !+ 
 ! FKB - FORK BLOCK 
 ! 
 ! A FORK BLOCK DESCRIBES THE CONTEXT OF A FORK PROCESS. EACH UNIT CONTROL 
 ! BLOCK CONTAINS A FORK BLOCK AS ITS FIRST SIX LONGWORDS. 
 !- 
  
 !...$FKBDEF	
  
 MACRO		FKB$L_FQFL	= 0,0,32,0%; 			!FORK QUEUE FORWARD LINK 
 MACRO		FKB$L_FQBL	= 4,0,32,0%; 			!FORK QUEUE BACKWARD LINK 
 MACRO		FKB$W_SIZE	= 8,0,16,0%; 			!SIZE OF FKB IN BYTES 
 MACRO		FKB$B_TYPE	= 10,0,8,0%; 			!STRUCTURE TYPE OF FKB 
 MACRO		FKB$B_FIPL	= 11,0,8,0%; 			!FORK INTERRUPT PRIORITY LEVEL 
 MACRO		FKB$L_FPC	= 12,0,32,0%; 			!FORK PC 
 MACRO		FKB$L_FR3	= 16,0,32,0%; 			!FORK R3 
 MACRO		FKB$L_FR4	= 20,0,32,0%; 			!FORK R4 
 LITERAL	FKB$C_LENGTH	= 24; 
 LITERAL	FKB$K_LENGTH	= 24; 				!STANDARD LENGTH OF FKB 
  

  
  
 !+ 
 ! GLOBAL SECTION DESCRIPTOR BLOCK 
 !- 
 !...$GSDDEF	
  
 MACRO		GSD$L_GSDFL	= 0,0,32,0%; 			!POINTER TO NEXT GSD 
 MACRO		GSD$L_GSDBL	= 4,0,32,0%; 			!POINTER TO PREVIOUS GSD 
 MACRO		GSD$W_SIZE	= 8,0,16,0%; 			!SIZE OF GSD IN BYTES 
 MACRO		GSD$B_TYPE	= 10,0,8,0%; 			!STRUCTURE TYPE CODE FOR GSD 
 MACRO		GSD$L_UIC	= 12,0,32,0%; 			!USER IDENT OF GSD CREATOR 
 MACRO		GSD$W_GRP	= 14,0,16,0%; 			!GROUP NUMBER OF GSD CREATOR 
 MACRO		GSD$W_PROT	= 16,0,16,0%; 			!PROTECTION MASK 
 MACRO		GSD$W_GSTX	= 18,0,16,0%; 			!GLOBAL SECTION TABLE INDEX 
 MACRO		GSD$L_IDENT	= 20,0,32,0%; 			!IDENTIFICATION OF GLOBAL SECTION 
 MACRO		GSD$T_GSDNAM	= 24,0,0,0%; 		!GLOBAL SECTION TEXT NAME 
 LITERAL	GSD$S_GSDNAM	= 16; 
 LITERAL	GSD$C_LENGTH	= 40; 
 LITERAL	GSD$K_LENGTH	= 40; 				!LENGTH OF GSD 
  

  
 !+ 
 ! HDR1 ANDSI MAGNETIC TAPE LABEL 
 ! THIS IS THE FIRST LABEL IN THE FILE LABEL HEADER SET.  IF IDENTIFIES THE FILE. 
 !- 
 !...$HD1DEF		!HDR1 LABEL FORMAT 
  
 MACRO		HD1$L_HD1LID	= 0,0,32,0%; 	!LABEL IDENTIFIER AND NUMBER 'HDR1' 
 MACRO		HD1$T_FILEID	= 4,0,0,0%; 	!FILE IDENTIFIER 
 LITERAL	HD1$S_FILEID	= 17; 
 MACRO		HD1$T_FILESETID	= 21,0,0,0%; 	!FILE SET IDENTIFIER 
 LITERAL	HD1$S_FILESETID	= 6; 
 MACRO		HD1$T_FILESECNO	= 27,0,32,0%; 	!FILE SECTION NUMBER 
 MACRO		HD1$T_FILESEQNO	= 31,0,32,0%; 	!FILE SEQUENCE NUMBER 
 MACRO		HD1$T_GENNO	= 35,0,32,0%; 	!FILE GENERATION NUMBER 
 MACRO		HD1$T_GENVER	= 39,0,16,0%; 	!FILE GENERATION VERSION NUMBER 
 MACRO		HD1$T_CREATEDT	= 41,0,0,0%; 	!CREATION DATE ( YYDDD) 
 LITERAL	HD1$S_CREATEDT	= 6; 
 MACRO		HD1$T_EXPIREDT	= 47,0,0,0%; 	!EXPIRATION DATE 
 LITERAL	HD1$S_EXPIREDT	= 6; 
 MACRO		HD1$B_FILACCESS	= 53,0,8,0%; 	!FILE ACCESS 
 MACRO		HD1$T_BLOCKCNT	= 54,0,0,0%; 	!BLOCK COUNT 
 LITERAL	HD1$S_BLOCKCNT	= 6; 
 MACRO		HD1$T_SYSCODE	= 60,0,0,0%; 	!SYSTEM CODE 
 LITERAL	HD1$S_SYSCODE	= 13; 

  
  
  
 !+ 
 ! HDR2 ANSI MAGNETIC TAPE LABEL 
 ! THIS IS THE SECOND LABEL IN FILE LABEL HEADER SET.  IT IDENTIFIES 
 ! THE FILE ATTRIBUTES. 
 !- 
 !...$HD2DEF		!HDR2 LABEL FORMAT 
  
 MACRO		HD2$L_HD2LID	= 0,0,32,0%; 	!LABEL IDENTIFIER AND NUMBER 'HDR2' 
 MACRO		HD2$B_RECFORMAT	= 4,0,8,0%; 	!RECORD FORMAT 
 MACRO		HD2$T_BLOCKLEN	= 5,0,0,0%; 	!BLOCK LENGTH 
 LITERAL	HD2$S_BLOCKLEN	= 5; 
 MACRO		HD2$T_RECLEN	= 10,0,0,0%; 	!RECORD LENGTH 
 LITERAL	HD2$S_RECLEN	= 5; 
 MACRO		HD2$T_RECATR1	= 15,0,0,0%; 	!FIRST 20 BYTES OF FILES-11 RECORD ATTRIBUTES 
 LITERAL	HD2$S_RECATR1	= 20; 
 MACRO		HD2$B_FORMCNTRL	= 36,0,8,0%; 	!FORMS CONTROL 
 MACRO		HD2$T_RECATR2	= 37,0,0,0%; 	!LAST 12 BYTES OF FILES-11 RECORD ATTRIBUTES 
 LITERAL	HD2$S_RECATR2	= 12; 
 MACRO		HD2$T_BUFOFF	= 50,0,16,0%; 	!BUFFER OFFSET 

  
 !+ 
 ! IDB - INTERRUPT DISPATCH BLOCK 
 ! 
 ! AN INTERRUPT DISPATCH BLOCK PROVIDES THE INFORMATION NECESSARY FOR A 
 ! UNIT INDEPENDENT, BUT CONTROLLER SPECIFIC, INTERRUPT DISPATCHER TO 
 ! DISPATCH INTERRUPTS TO THE PROPER DRIVER TO HANDLE AN INTERRUPT ON 
 ! A DEVICE UNIT. 
 !- 
  
 !...$IDBDEF	
  
 MACRO		IDB$L_CSR	= 0,0,32,0%; 			!CONTROLLER CSR ADDRESS 
 MACRO		IDB$L_OWNER	= 4,0,32,0%; 			!OWNER UCB ADDRESS 
 MACRO		IDB$W_SIZE	= 8,0,16,0%; 			!SIZE OF IDB IN BYTES 
 MACRO		IDB$B_TYPE	= 10,0,8,0%; 			!STRUCTURE TYPE OF IDB 
 MACRO		IDB$B_UNITS	= 11,0,8,0%; 			!NUMBER OF UNITS 
 MACRO		IDB$L_ADP	= 12,0,32,0%; 			!ADDRESS OF UBA ADAPTER CONTROL BLOCK 
 MACRO		IDB$L_UCBLST	= 16,0,0,0%; 		!UP TO 8 UCB OR SECONDARY IDB ADDRESSES 
 LITERAL	IDB$S_UCBLST	= 32; 
 LITERAL	IDB$C_LENGTH	= 48; 
 LITERAL	IDB$K_LENGTH	= 48; 				!LENGTH OF STANDARD IDB 
  

  
  
 !+ 
 ! IMAGE FILE DESCRIPTOR BLOCK - RETURNED BY IMAGE ACTIVATOR 
 !- 
  
 !...$IFDDEF	
  
 MACRO		IFD$W_SIZE	= 0,0,16,0%; 			!SIZE IN BYTES OF IMAGE FILE DESCRIPTOR 
 MACRO		IFD$W_FILNAMOFF	= 2,0,16,0%; 		!OFFSET TO RESULTANT FILE NAME STRING 
 MACRO		IFD$W_CHAN	= 8,0,16,0%; 			!CHANNEL ON WHICH IMAGE FILE IS OPEN 
 MACRO		IFD$W_CMCHAN	= 10,0,16,0%; 		!COMPATIBILITY MODE CHANNEL 
 MACRO		IFD$L_CMKFIADR	= 12,0,32,0%; 		!COMPATIBILITY MODE IMAGE 
 					!KNOWN FILE ENTRY ADDRESS OR 0 
 MACRO		IFD$W_FLAGS	= 16,0,16,0%; 			!IMAGE FILE DESCRIPTOR FLAGS 
 			 
 MACRO		IFD$V_EXEONLY	= 16,0,1,0%; 		!EXECUTE ONLY FILE 
 LITERAL	IFD$M_EXEONLY	= 1^1 - 1^0; 
 			
 LITERAL	IFD$C_LENGTH	= 20; 
 LITERAL	IFD$K_LENGTH	= 20; 				!LENGTH OF FIXED AREA OF IFD 
  

  
 !+ 
 ! IMAGE HEADER RECORD DEFINITIONS - FIRST RECORD OF IMAGE HEADER 
 !- 
 !...$IHDDEF	
  
 MACRO		IHD$W_SIZE	= 0,0,16,0%; 			!SIZE IN BYTES OF IMAGE HEADER RECORD 
 MACRO		IHD$W_ACTIVOFF	= 2,0,16,0%; 		!BYTE OFFSET TO ACTIVATION DATA 
 MACRO		IHD$W_SYMDBGOFF	= 4,0,16,0%; 		!BYTE OFFSET TO SYMBOL TABLE AND DEBUG DATA 
 MACRO		IHD$W_IMGIDOFF	= 6,0,16,0%; 		!BYTE OFFSET TO IMAGE IDENT DATA 
 MACRO		IHD$W_PATCHOFF	= 8,0,16,0%; 		!BYTE OFFSET TO PATCH DATA 
 MACRO		IHD$W_MAJORID	= 12,0,16,0%; 		!MAJOR ID 
 LITERAL	IHD$K_MAJORID	= ('02'); 		!MAJOR ID VALUE 
 MACRO		IHD$W_MINORID	= 14,0,16,0%; 		!MINOR ID 
 LITERAL	IHD$K_MINORID	= ('01'); 		!MINOR ID VALUE 
 MACRO		IHD$B_HDRBLKCNT	= 16,0,8,0%; 		!COUNT OF HEADER BLOCKS 
 MACRO		IHD$B_IMGTYPE	= 17,0,8,0%; 		!IMAGE TYPE 
 ! 
 ! IMAGE TYPE CODES 
 ! 
 LITERAL	IHD$K_EXE	= 1; 				!EXECUTABLE IMAGE 
 LITERAL	IHD$K_LIM	= 2; 				!LINKABLE IMAGE 
  
 MACRO		IHD$Q_PRIVREQS	= 20,0,0,0%; 		!REQUESTED PRIVILEGE MASK 
 LITERAL	IHD$S_PRIVREQS	= 8; 
 MACRO		IHD$W_IOCHANCNT	= 28,0,16,0%; 		!# OF CHANNELS REQUESTED 
 					!0 IF DEFAULT 
 MACRO		IHD$W_IMGIOCNT	= 30,0,16,0%; 		!# OF PAGES OF IMAGE I/O SECTION REQUESTED 
 					!0 IF DEFAULT 
 MACRO		IHD$L_LNKFLAGS	= 32,0,32,0%; 		!LINKER PRODUCED IMAGE FLAGS 
 							!AS FOLLOWS: 
 MACRO		IHD$V_LNKDEBUG	= 32,0,1,0%; 		!FULL DEBUGGING REQUESTED 
 LITERAL	IHD$M_LNKDEBUG	= 1^1 - 1^0; 
 MACRO		IHD$V_LNKNOTFR	= 32,1,1,0%; 		!FIRST TRANSFER ADDRESS MISSING 
 LITERAL	IHD$M_LNKNOTFR	= 1^2 - 1^1; 
 MACRO		IHD$V_NOP0BUFS	= 32,2,1,0%; 		!RMS USE OF P0 FOR IMAGE I/O DISABLED 
 LITERAL	IHD$M_NOP0BUFS	= 1^3 - 1^2; 
 MACRO		IHD$V_PICIMG	= 32,3,1,0%; 			!IMAGE IS POSITION INDEPENDENT 
 LITERAL	IHD$M_PICIMG	= 1^4 - 1^3; 
 							!FILL OUT TO HIGH BYTE OF LONG WORD 
 MACRO		IHD$V_MATCHCTL	= 32,24,3,0%; 		!MATCH CONTROL FOR LINKABLE IMAGE 
 LITERAL	IHD$M_MATCHCTL	= 1^27 - 1^24; 
 			
 MACRO		IHD$L_IDENT	= 36,0,32,0%; 			!GBL SEC IDENT VALUE FOR LINKABLE IMAGE 
 LITERAL	IHD$C_LENGTH	= 40; 
 LITERAL	IHD$K_LENGTH	= 40; 				!LENGTH OF FIXED AREA 
  

  
  
 !+ 
 ! IMAGE HEADER ACTIVATION SECTION OFFSETS 
 !- 
  
 !...$IHADEF	
  
 MACRO		IHA$L_TFRADR1	= 0,0,32,0%; 		!FIRST TRANSFER ADDRESS 
 MACRO		IHA$L_TFRADR2	= 4,0,32,0%; 		!SECOND TRANSFER ADDRESS 
 MACRO		IHA$L_TFRADR3	= 8,0,32,0%; 		!THIRD TRANSFER ADDRESS 
 LITERAL	IHA$C_LENGTH	= 16; 
 LITERAL	IHA$K_LENGTH	= 16; 				!SIZE OF ACTIVATION SECTION 
  

  
  
 !+ 
 ! IMAGE HEADER PATCH SECTION OFFSETS 
 !- 
  
 !...$IHPDEF	
  
 MACRO		IHP$L_ECO1	= 0,0,32,0%; 			!DEC ECO LEVELS 1-32 
 MACRO		IHP$L_ECO2	= 4,0,32,0%; 			!DEC ECO LEVELS 33-64 
 MACRO		IHP$L_ECO3	= 8,0,32,0%; 			!DEC ECO LEVELS 65-98 
 MACRO		IHP$L_ECO4	= 12,0,32,0%; 			!USER ECO LEVELS 99-132 
 MACRO		IHP$L_RW_PATSIZ	= 16,0,32,0%; 		!SIZE OF FREE RW PATCH AREA 
 MACRO		IHP$L_RW_PATADR	= 20,0,32,0%; 		!VIR ADDR OF NEXT FREE RW PATCH AREA 
 MACRO		IHP$L_RO_PATSIZ	= 24,0,32,0%; 		!SIZE OF FREE RO PATCH AREA 
 MACRO		IHP$L_RO_PATADR	= 28,0,32,0%; 		!VIR ADDR OF NEXT FREE RO PATCH AREA 
 MACRO		IHP$L_PATCOMTXT	= 32,0,32,0%; 		!PATCH COMMAND TEXT VIRTUAL BLOCK NUMBER 
 MACRO		IHP$Q_PATDATE	= 36,0,0,0%; 		!DATE OF MOST RECENT PATCH 
 LITERAL	IHP$S_PATDATE	= 8; 
 LITERAL	IHP$C_LENGTH	= 44; 
 LITERAL	IHP$K_LENGTH	= 44; 				!LENGTH OF PATCH HEADER SECTION 
  

  
  
 !+ 
 ! IMAGE HEADER SYMBOL TABLE AND DEBUG SECTION OFFSETS 
 !- 
  
 !...$IHSDEF	
  
 MACRO		IHS$L_DSTVBN	= 0,0,32,0%; 		!DEBUG SYMBOL TABLE VIRTUAL BLOCK NUMBER 
 MACRO		IHS$L_GSTVBN	= 4,0,32,0%; 		!GLOBAL SYMBOL TABLE VIRTUAL BLOCK NUMBER 
 MACRO		IHS$W_DSTBLKS	= 8,0,16,0%; 		!DEBUG SYMBOL TABLE BLOCK COUNT 
 MACRO		IHS$W_GSTRECS	= 10,0,16,0%; 		!GLOBAL SYMBOL TABLE RECORD COUNT 
 LITERAL	IHS$C_LENGTH	= 12; 
 LITERAL	IHS$K_LENGTH	= 12; 				!LENGTH OF SYMBOL TABLE SECTION 
  

  
  
  
 !+ 
 ! IMAGE HEADER IDENTIFICATION SECTION OFFSETS 
 !- 
  
 !...$IHIDEF	
  
 MACRO		IHI$T_IMGNAM	= 0,0,0,0%; 		!IMAGE NAME STRING 
 LITERAL	IHI$S_IMGNAM	= 16; 
 MACRO		IHI$T_IMGID	= 16,0,0,0%; 		!IMAGE IDENT STRING 
 LITERAL	IHI$S_IMGID	= 16; 
 MACRO		IHI$Q_LINKTIME	= 32,0,0,0%; 		!DATE AND TIME THIS IMAGE WAS LINKED 
 LITERAL	IHI$S_LINKTIME	= 8; 
 					!STANDARD SYSTEM QUADWORD FORMAT 
 MACRO		IHI$T_LINKID	= 40,0,0,0%; 		!LINKER IDENT STRING 
 LITERAL	IHI$S_LINKID	= 16; 
 LITERAL	IHI$C_LENGTH	= 56; 
 LITERAL	IHI$K_LENGTH	= 56; 				!LENGTH OF IMAGE HEADER IDENT SECTION 
  

  
 !+ 
 ! IMAGE HEADER RECORD DEFINITIONS - CROSS LINKER - MAJORID = "01" 
 !	 1ST RECORD OF IMAGE HEADER BLOCK 
 !- 
  
 !...$IHXDEF	
  
 MACRO		IHX$W_SIZE	= 0,0,16,0%; 			!SIZE IN BYTE OF IMAGE HEADER RECORD 
 MACRO		IHX$B_HDRBLKCNT	= 2,0,8,0%; 		!COUNT OF BLOCKS IN IMAGE HEADER 
 MACRO		IHX$Q_STARTADR	= 4,0,0,0%; 		!START ADDRESS 
 LITERAL	IHX$S_STARTADR	= 8; 
 MACRO		IHX$W_MAJORID	= 12,0,16,0%; 		!MAJOR ID OF IMAGE HEADER 
 LITERAL	IHX$K_MAJORID	= (%X'3130'); 		!^A/01/ MAJOR ID VALUE FOR CROSS LINKER 
 MACRO		IHX$W_MINORID	= 14,0,16,0%; 		!MINOR ID OF IMAGE HEADER 
 LITERAL	IHX$K_MINORID	= (%X'3130'); 		!^A/01/ MINOR ID VALUE FOR CROSS LINKER 
 LITERAL	IHX$K_MINORID1	= (%X'3130'); 		!^A/01/ MINOR ID VALUE FOR CROSS LINKER WITH 
 					!SYMBOL TABLE AND 3RD TRANSFER ADR 
 MACRO		IHX$T_IMGNAM	= 16,0,0,0%; 		!IMAGE NAME 
 LITERAL	IHX$S_IMGNAM	= 24; 
 ! 
 ! THE FOLLOWING FIELDS ARE PRESENT FOR MINOR ID'S GREATER OR EQUAL TO "03" 
 ! 
 MACRO		IHX$L_DSTVBN	= 40,0,32,0%; 		!DEBUG SYMBOL TABLE VBN 
 MACRO		IHX$L_GSTVBN	= 44,0,32,0%; 		!GLOBAL SYMBOL TABLE VBN 
 MACRO		IHX$W_DSTBLKS	= 48,0,16,0%; 		!DEBUG SYMBOL TABLE BLOCKS 
 MACRO		IHX$W_GSTRECS	= 50,0,16,0%; 		!GLOBAL SYMBOL TABLE RECORD COUNT 
 MACRO		IHX$L_TFRADR3	= 52,0,32,0%; 		!THIRD TRANSFER ADDRESS 
 LITERAL	IHX$C_LENGTH	= 56; 
 LITERAL	IHX$K_LENGTH	= 56; 				!LENGTH OF CROSS LINKER HEADER 
  

  
 !+ 
 !	RMS32 IMPURE AREA OFFSET DEFINITIONS 
 ! 
 !- 
 !...$IMPDEF	
  
 MACRO		IMP$W_RMSSTATUS	= 0,0,16,0%; 	! RMS OVERALL STATUS 
 			 
 MACRO		IMP$V_IIOS	= 0,0,1,0%; 		! SET IF THIS IS THE IMAGE 
 			! I.O SEGMENT 
 MACRO		IMP$V_AST	= 0,1,1,0%; 		! SET IF RUNNING AT EXEC AST LEVEL 
 MACRO		IMP$V_TEMP1	= 0,2,1,0%; 		! TEMPORARY FLAG 
 MACRO		IMP$V_TEMP2	= 0,3,1,0%; 		!   " 
 MACRO		IMP$V_IORUNDOWN	= 0,4,1,0%; 	! SET IF IO RUNDOWN IN PROGRESS 
 MACRO		IMP$V_NOP0BUFS	= 0,5,1,0%; 	! SET IF RMS USE OF P0 FOR IMAGE I/O DISABLED 
 			
 ! 
 LITERAL	IMP$C_ASYEFN	= 30; 		! EFN FOR ASYNC WAITS 
 LITERAL	IMP$C_IOREFN	= 30; 		! EFN FOR IO RUNDOWN SYNCHRONIZATION 
 LITERAL	IMP$C_ASYQIOEFN	= 31; 		! EFN FOR ASYNC QIOS 
 LITERAL	IMP$C_SYNCEFN	= 27; 		! BASE EFN FOR SYNCHRONOUS QIO'S 
 			! (28, 29 ALSO USED) 
 LITERAL	IMP$C_MBXEFN	= 26; 		! EFN FOR QIOS TO NETWORK MAILBOXES 
 ! 
 MACRO		IMP$B_PROT	= 2,0,8,0%; 	! PROTECTION FOR I/O BUFFER PAGES 
 MACRO		IMP$L_IOSEGADDR	= 4,0,32,0%; 	! ADDRESS OF FIRST FREE PAGE 
 			! IN THIS (IMAGE OR PROCESS) 
 			! I/O SEGMENT 
 MACRO		IMP$L_IOSEGLEN	= 8,0,32,0%; 	! # OF FREE BYTES AT ABOVE ADDR 
 MACRO		IMP$L_FREEPGLH	= 12,0,0,0%; 	! FREE PAGE LIST HEAD 
 LITERAL	IMP$S_FREEPGLH	= 8; 
 MACRO		IMP$L_SAVED_SP	= 20,0,32,0%; 	! SAVED VALUE OF SP AT ENTRY 
 MACRO		IMP$L_IFABTBL	= 24,0,32,0%; 	! IFAB TABLE ADDR 
 MACRO		IMP$L_IRABTBL	= 28,0,32,0%; 	! IRAB TABLE ADDR 
 MACRO		IMP$W_ENTPERSEG	= 32,0,16,0%; 	! # OF SLOTS PER TABLE SEGMENT 
 LITERAL	IMP$C_NPIOFILES	= 12; 		! # OF PIO SEGMENT FILES 
 LITERAL	IMP$C_ENTPERSEG	= 15; 		! # OF IIO SEGMENT SLOTS 
 				! PER INDEX TABLE SEGMENT 
 MACRO		IMP$W_NUM_IFABS	= 34,0,16,0%; 	! NUMBER OF IFABS & IRABS CURRENTLY ALLOCATED 
 MACRO		IMP$L_IFBTBLINK	= 36,0,32,0%; 	! START OF IFAB TABLE (LINK TO NEXT SEGMENT) 
 MACRO		IMP$L_IRBTBLINK	= 100,0,32,0%; 	! START OF IRAB TABLE (LINK TO NEXT SEGMENT) 

  
  
 !+ 
 ! TEMPORARY PROCESSOR PRIORITY LEVEL DEFINITIONS 
 !- 
 !...$IPLDEF	
  
 LITERAL	
 $EQULST (IPL$_,GBL,0,1 				! 
 	,(HWCLK,24) 	   			!HARDWARE CLOCK LEVEL 
 	,(IOPOST,4) 	   			!I/O POST PROCESSING LEVEL 
 	,(MAILBOX,11) 	   			!WRITE MAILBOX INTERLOCK LEVEL 
 	,(POWER,31) 	   			!POWERFAIL INTERLOCK LEVEL 
 	,(QUEUEAST,6) 	   			!QUEUE AST LEVEL 
 	,(SCHED,3) 	   			!SCHEDULER LEVEL 
 	,(SYNCH,7) 	   			!SYSTEM DATA BASE SYNCHRONIZATION LEVEL 
 	,(TIMER,7) 	   			!TIME QUEUE PROCESSING LEVEL 
 	,(ASTDEL,2) 				!AST DELIVERY INTERRUPT 
 	); 

  
 !+ 
 ! IRP - I/O REQUEST PACKET 
 ! 
 ! I/O REQUEST PACKETS ARE CONSTRUCTED BY THE QUEUE I/O REQUEST SYSTEM 
 ! SERVICE. THE CONTENT OF AN I/O REQUEST PACKET DESCRIBES A FUNCTION TO 
 ! BE PERFORMED ON A DEVICE UNIT. 
 !- 
  
 !...$IRPDEF	
  
 MACRO		IRP$L_IOQFL	= 0,0,32,0%; 			!I/O QUEUE FORWARD LINK 
 MACRO		IRP$L_IOQBL	= 4,0,32,0%; 			!I/O QUEUE BACKWARD LINK 
 MACRO		IRP$W_SIZE	= 8,0,16,0%; 			!SIZE OF IRP IN BYTES 
 MACRO		IRP$B_TYPE	= 10,0,8,0%; 			!STRUCTURE TYPE FOR IRP 
 MACRO		IRP$B_RMOD	= 11,0,8,0%; 			!ACCESS MODE OF REQUEST 
 			 
 MACRO		IRP$V_MODE	= 11,0,2,0%; 			! MODE SUBFIELD 
 			
 MACRO		IRP$L_PID	= 12,0,32,0%; 			!PROCESS ID OF REQUESTING PROCESS 
 MACRO		IRP$L_AST	= 16,0,32,0%; 			!ADDRESS OF AST ROUTINE 
 MACRO		IRP$L_ASTPRM	= 20,0,32,0%; 		!AST PARAMETER 
 MACRO		IRP$L_WIND	= 24,0,32,0%; 			!ADDRESS OF WINDOW BLOCK 
 MACRO		IRP$L_UCB	= 28,0,32,0%; 			!ADDRESS OF DEVICE UCB 
 MACRO		IRP$W_FUNC	= 32,0,16,0%; 			!I/O FUNCTION CODE AND MODIFIERS 
 						! I/O FUNCTION CODE FIELD DEFINITIONS 
 MACRO		IRP$V_FCODE	= 32,0,6,0%; 			! FUNCTION CODE FIELD 
 MACRO		IRP$V_FMOD	= 32,6,10,0%; 			! FUNCTION MODIFIER FIELD 
 			
 MACRO		IRP$B_EFN	= 34,0,8,0%; 			!EVENT FLAG NUMBER AND EVENT GROUP 
 MACRO		IRP$B_PRI	= 35,0,8,0%; 			!BASE PRIORITY OF REQUESTING PROCESS 
 MACRO		IRP$L_IOSB	= 36,0,32,0%; 			!ADDRESS OF I/O STATUS DOUBLE LONGWORD 
 MACRO		IRP$W_CHAN	= 40,0,16,0%; 			!PROCESS I/O CHANNEL NUMBER 
 MACRO		IRP$W_STS	= 42,0,16,0%; 			!REQUEST STATUS 
 						! BIT DEFINITIONS 
 MACRO		IRP$V_BUFIO	= 42,0,1,0%;  		! BUFFERED I/O FLAG   !THESE BITS 
 LITERAL	IRP$M_BUFIO	= 1^1 - 1^0; 
 MACRO		IRP$V_FUNC	= 42,1,1,0%; 		! 1=>READ FUNCTION    !MUST BE ADJACENT 
 LITERAL	IRP$M_FUNC	= 1^2 - 1^1; 
 MACRO		IRP$V_PAGIO	= 42,2,1,0%; 		! PAGING I/O FLAG     !AND IN ORDER 
 LITERAL	IRP$M_PAGIO	= 1^3 - 1^2; 
 MACRO		IRP$V_COMPLX	= 42,3,1,0%; 		! COMPLEX BUFFERED I/O 
 LITERAL	IRP$M_COMPLX	= 1^4 - 1^3; 
 MACRO		IRP$V_VIRTUAL	= 42,4,1,0%; 		! VIRTUAL I/O FUNCTION 
 LITERAL	IRP$M_VIRTUAL	= 1^5 - 1^4; 
 MACRO		IRP$V_CHAINED	= 42,5,1,0%; 		! CHAINED BUFFERED I/O OPERATION 
 LITERAL	IRP$M_CHAINED	= 1^6 - 1^5; 
 MACRO		IRP$V_SWAPIO	= 42,6,1,0%; 		! SWAP I/O OPERATION 
 LITERAL	IRP$M_SWAPIO	= 1^7 - 1^6; 
 MACRO		IRP$V_DIAGBUF	= 42,7,1,0%; 		! DIAGNOSTIC BUFFER ALLOCATED 
 LITERAL	IRP$M_DIAGBUF	= 1^8 - 1^7; 
 MACRO		IRP$V_PHYSIO	= 42,8,1,0%; 		! PHYSICAL I/O 
 LITERAL	IRP$M_PHYSIO	= 1^9 - 1^8; 
 MACRO		IRP$V_PRIVIO	= 42,9,1,0%; 		! REQUESTER HAS LOGICAL OR PHYSICAL PRIVILEGE 
 LITERAL	IRP$M_PRIVIO	= 1^10 - 1^9; 
 MACRO		IRP$V_MBXIO	= 42,10,1,0%; 		! MAILBOX BUFFERED READ 
 LITERAL	IRP$M_MBXIO	= 1^11 - 1^10; 
 					! END OF BIT DEFINITIONS 
 MACRO		IRP$L_SVAPTE	= 44,0,32,0%; 		!SYSTEM VIRTUAL ADDRESS OF FIRST PTE 
 MACRO		IRP$W_BOFF	= 48,0,16,0%; 			!BYTE OFFSET IN FIRST PAGE 
 MACRO		IRP$W_BCNT	= 50,0,16,0%; 			!BYTE COUNT OF TRANSFER 
 MACRO		IRP$L_IOST1	= 52,0,32,0%; 			!FIRST I/O STATUS LONGWORD (FOR I/O POST) 
 MACRO		IRP$L_MEDIA	= 52,0,32,0%; 		!MEDIA ADDRESS 
 MACRO		IRP$L_IOST2	= 56,0,32,0%; 			!SECOND I/O STATUS LONGWORD 
 MACRO		IRP$L_TT_TERM	= 56,0,32,0%; 		!ADDRESS OF READ TERMINATORS MASK 
 MACRO		IRP$B_CARCON	= 56,0,8,0%; 		!CARRIAGE CONTROL 
 MACRO		IRP$Q_NT_PRVMSK	= 60,0,0,0%; 		! PRIVILEGE MASK FOR DECNET 
 LITERAL	IRP$S_NT_PRVMSK	= 8; 
 MACRO		IRP$W_ABCNT	= 60,0,16,0%; 		! ACCUMULATED BYTES TRANSFERED 
 MACRO		IRP$W_TT_PRMPT	= 60,0,16,0%; 		! PROMPT SIZE 
 MACRO		IRP$W_OBCNT	= 62,0,16,0%; 		! ORIGINAL TRANSFER BYTE COUNT 
 MACRO		IRP$L_SEGVBN	= 64,0,32,0%; 		! VIRTUAL BLOCK NUMBER OF CURRENT SEGMENT 
 MACRO		IRP$L_DIAGBUF	= 68,0,32,0%; 		! DIAGNOSTIC BUFFER ADDRESS 
 MACRO		IRP$L_SEQNUM	= 72,0,32,0%; 		! SEQUENCE NUMBER 
 LITERAL	IRP$C_LENGTH	= 76; 
 LITERAL	IRP$K_LENGTH	= 76; 				! LENGTH OF STANDARD IRP 

  
 !+ 
 ! IMAGE SECTION DESCRIPTOR DEFINITIONS 
 !- 
  
 !...$ISDDEF	
  
 MACRO		ISD$W_SIZE	= 0,0,16,0%; 			!SIZE IN BYTES OF THIS ISD 
 MACRO		ISD$W_PAGCNT	= 2,0,16,0%; 		!# OF PAGES DESCRIBED BY THIS ISD 
 MACRO		ISD$L_VPNPFC	= 4,0,32,0%; 		!VPN & PFC VIELDS 
 						! VIELDS IN VPNPFC 
 MACRO		ISD$V_VPN	= 4,0,21,0%; 			! STARTING VIRTUAL PAGE NUMBER 
 MACRO		ISD$V_P1	= 4,21,1,0%;   			! P1 SPACE 
 MACRO		ISD$V_SYSTEM	= 4,22,1,0%; 			! SYSTEM SPACE 
 							! SPARE 
 MACRO		ISD$V_PFC	= 4,24,8,0%; 			! PAGE FAULT CLUSTER 
 			
 			 
 MACRO		ISD$V_VPG	= 4,0,23,0%; 			! VIRTUAL PAGE INCLUDING P1 & S 
 			
 MACRO		ISD$B_PFC	= 7,0,8,0%; 			!PAGE FAULT CLUSTER 
 MACRO		ISD$L_FLAGS	= 8,0,32,0%; 			!FLAGS AND ISD TYPE 
 						! FLAG BIT DEFINITIONS 
 MACRO		ISD$V_GBL	= 8,0,1,0%; 			! GLOBAL 
 LITERAL	ISD$M_GBL	= 1^1 - 1^0; 
 MACRO		ISD$V_CRF	= 8,1,1,0%; 			! COPY ON REFERENCE 
 LITERAL	ISD$M_CRF	= 1^2 - 1^1; 
 MACRO		ISD$V_DZRO	= 8,2,1,0%; 			! DEMAND ZERO PAGE 
 LITERAL	ISD$M_DZRO	= 1^3 - 1^2; 
 MACRO		ISD$V_WRT	= 8,3,1,0%; 			! WRITABLE 
 LITERAL	ISD$M_WRT	= 1^4 - 1^3; 
 MACRO		ISD$V_MATCHCTL	= 8,4,3,0%; 		! IDENT MATCH CONTROL FIELD 
 LITERAL	ISD$M_MATCHCTL	= 1^7 - 1^4; 
 MACRO		ISD$V_LASTCLU	= 8,7,1,0%; 			! ISD IS PART OF LAST P0 SPACE CLUSTER 
 LITERAL	ISD$M_LASTCLU	= 1^8 - 1^7; 
 			
 MACRO		ISD$B_TYPE	= 11,0,8,0%; 			!ISD TYPE CODE 
 LITERAL	ISD$C_LENDZRO	= 12; 
 LITERAL	ISD$K_LENDZRO	= 12; 				!LENGTH OF DEMAND ZERO ISD 
 MACRO		ISD$L_VBN	= 12,0,32,0%; 			!BASE VIRTUAL BLOCK NUMBER 
 LITERAL	ISD$C_LENPRIV	= 16; 
 LITERAL	ISD$K_LENPRIV	= 16; 				!LENGTH OF PRIVATE ISD 
 MACRO		ISD$L_IDENT	= 16,0,32,0%; 			!IDENT FOR GLOBAL SECTION 
 MACRO		ISD$T_GBLNAM	= 20,0,0,0%; 		!GLOBAL NAME COUNTED STRING 
 LITERAL	ISD$S_GBLNAM	= 16; 
 LITERAL	ISD$C_LENGLBL	= 36; 
 LITERAL	ISD$K_LENGLBL	= 36; 				!LENGTH OF GLOBAL ISD 
  
  
 !+ 
 ! MATCH CONTROL VIELD VALUES 
 !- 
 LITERAL	
 $EQULST (ISD$K_,GBL,0,1 			!BASE OF ZERO , INCR 1 
 	,(MATALL,) 	  			!MATCH ALWAYS, USE GLOBAL SECTION 
 	,(MATEQU,) 	  			!MATCH IF ISD$L_IDENT EQU GBL ID 
 	,(MATLEQ,) 					!MATCH IF ISD$L_IDENT LEQ GBL ID 
 	,(MATNEV,) 					!MATCH NEVER, USE PRIVATE COPY 
 	); 
  
 !+ 
 ! ISD TYPE FIELD DEFINITIONS 
 !- 
  
 LITERAL	ISD$K_NORMAL	= 0; 			!NORMAL PROGRAM IMAGE SECTION 
 					!NO SPECIAL ACTION REQUIRED 
 LITERAL	ISD$K_USRSTACK	= (256-3); 		!USER STACK SECTION 
  

  
 ! 
 ! KNOWN FILE IMAGE HEADER DEFINITIONS 
 ! 
  
 !...$KFHDEF	
  
 MACRO		KFH$L_BUFEND	= 0,0,32,0%; 		!ADDRESS OF END OF KNOWN FILE HEADER 
 MACRO		KFH$L_KFIADR	= 4,0,32,0%; 		!ADDRESS OF ASSOCIATED KNOWN FILE ENTRY 
 MACRO		KFH$W_SIZE	= 8,0,16,0%; 			!SIZE OF DYNAMIC STRUCTURE 
 MACRO		KFH$B_TYPE	= 10,0,8,0%; 			!DYNAMIC STRUCTURE TYPE 
 LITERAL	KFH$C_LENGTH	= 12; 
 LITERAL	KFH$K_LENGTH	= 12; 				!LENGTH OF OVERHEAD AREA 
  
 ! 
 ! THE REMAINDER OF THIS STRUCTURE CONTAINS THE IMAGE HEADER OF THE 
 ! SPECIFIED KNOWN FILE.  THE LOCATION KFI$L_IMGHDR IN THE KNOWN FILE 
 ! ENTRY POINTS KFH$C_LENGTH INTO THIS STRUCTURE, I.E AT THE IMAGE HEADER 
 ! ITSELF. 
 ! 

  
 ! 
 ! KNOWN FILE ENTRY DEFINITIONS 
 ! 
 !...$KFIDEF	
  
 MACRO		KFI$L_KFIQFL	= 0,0,32,0%; 		!KNOWN FILE QUEUE FORWARD LINK 
 MACRO		KFI$L_KFIQBL	= 4,0,32,0%; 		!KNOWN FILE QUEUE BACK LINK 
 MACRO		KFI$W_SIZE	= 8,0,16,0%; 			!SIZE OF BLOCK 
 MACRO		KFI$B_TYPE	= 10,0,8,0%; 			!STRUCTURE TYPE 
 MACRO		KFI$B_KFICTL	= 11,0,8,0%; 		!CONTROL BITS 
 						!CONTROL BIT DEFINITIONS 
 MACRO		KFI$V_KFIHD	= 11,0,1,0%; 			!KNOWN FILE HEADER BLOCK 
 LITERAL	KFI$M_KFIHD	= 1^1 - 1^0; 
 MACRO		KFI$V_FILIDOPEN	= 11,1,1,0%; 		!OPEN BY FILE ID IF SET 
 LITERAL	KFI$M_FILIDOPEN	= 1^2 - 1^1; 
 MACRO		KFI$V_DONOTOPEN	= 11,2,1,0%; 		!DO NOT OPEN THE FILE IF SET 
 LITERAL	KFI$M_DONOTOPEN	= 1^3 - 1^2; 
 							!SPARE 
 MACRO		KFI$V_NOREPLACE	= 11,6,1,0%; 		!DELETE AND DO NOT REPLACE ENTRY 
 LITERAL	KFI$M_NOREPLACE	= 1^7 - 1^6; 
 MACRO		KFI$V_MARKDEL	= 11,7,1,0%; 			!ENTRY IS TO BE DELETED 
 LITERAL	KFI$M_MARKDEL	= 1^8 - 1^7; 
 			
 MACRO		KFI$B_DEVUCB	= 12,0,8,0%; 		!DEVICE UCB OFFSET 
 MACRO		KFI$B_DEVNAM	= 12,0,8,0%; 		!NAME THE ABOVE CONSISTENTLY 
 MACRO		KFI$B_DIRNAM	= 13,0,8,0%; 		!DIRECTORY NAME STRING OFFSET 
 MACRO		KFI$B_FILNAM	= 14,0,8,0%; 		!FILE NAME STRING OFFSET 
 MACRO		KFI$B_TYPNAM	= 15,0,8,0%; 		!FILE TYPE STRING OFFSET 
 MACRO		KFI$W_REFCNT	= 16,0,16,0%; 		!REFERENCE COUNT 
 MACRO		KFI$B_KFIQNUM	= 18,0,8,0%; 		!KFIQ NUMBER (INDEX INTO VECTOR OF KFIQ'S) 
 MACRO		KFI$B_KFISEQ	= 19,0,8,0%; 		!KNOWN FILE ENTRY SEQUENCE NUMBER 
 			 
 MACRO		KFI$V_KFISEQ	= 19,0,2,0%; 		!SEQUENCE NUMBER FIELD 
 LITERAL	KFI$M_KFISEQ	= 1^2 - 1^0; 
 			
 LITERAL	KFI$C_KFIHDLEN	= 20; 
 LITERAL	KFI$K_KFIHDLEN	= 20; 			!LENGTH OF KFI HEADER FIXED PORTION 
 MACRO		KFI$W_FLAGS	= 20,0,16,0%; 			!FLAGS WORD 
 						!FLAG BIT DEFINITIONS 
 MACRO		KFI$V_KP_OPEN	= 20,0,1,0%; 			!KEEP THE IMAGE FILE OPEN 
 LITERAL	KFI$M_KP_OPEN	= 1^1 - 1^0; 
 MACRO		KFI$V_KP_RESHDR	= 20,1,1,0%; 		!MAKE IMAGE HEADER RESIDENT 
 LITERAL	KFI$M_KP_RESHDR	= 1^2 - 1^1; 
 MACRO		KFI$V_KP_SHARED	= 20,2,1,0%; 		!MAKE IMAGE SHARED 
 LITERAL	KFI$M_KP_SHARED	= 1^3 - 1^2; 
 							!SPARE BITS 
 MACRO		KFI$V_LIM	= 20,6,1,0%; 			!LINKABLE IMAGE 
 LITERAL	KFI$M_LIM	= 1^7 - 1^6; 
 MACRO		KFI$V_PROCPRIV	= 20,7,1,0%; 		!USE PROCESS PRIVILEGE MASK 
 LITERAL	KFI$M_PROCPRIV	= 1^8 - 1^7; 
 MACRO		KFI$V_IS_RESHDR	= 20,8,1,0%; 		!IMAGE HEADER BLOCK IS RESIDENT 
 LITERAL	KFI$M_IS_RESHDR	= 1^9 - 1^8; 
 MACRO		KFI$V_IS_SHARED	= 20,9,1,0%; 		!IMAGE IS SHARED 
 LITERAL	KFI$M_IS_SHARED	= 1^10 - 1^9; 
 							!SPARE BITS 
 MACRO		KFI$V_COMPATMOD	= 20,15,1,0%; 		!IMAGE IS COMPATABILITY MODE 
 LITERAL	KFI$M_COMPATMOD	= 1^16 - 1^15; 
 			
 MACRO		KFI$W_GBLSECCNT	= 22,0,16,0%; 		!GLOBAL SECTION COUNT IF SHARED 
 MACRO		KFI$L_USECNT	= 24,0,32,0%; 		!USAGE COUNTER 
 MACRO		KFI$L_WINDOW	= 28,0,32,0%; 		!WCB ADDRESS IF OPEN 
 MACRO		KFI$W_FID	= 28,0,16,0%; 			!FILE ID 
 MACRO		KFI$W_FID_NUM	= 28,0,16,0%; 		!FILE NUMBER FIELD OF FILE ID 
 MACRO		KFI$W_FID_SEQ	= 30,0,16,0%; 		!FILE SEQUENCE NUMBER FIELD OF FILE ID 
 MACRO		KFI$L_IMGHDR	= 32,0,32,0%; 		!IMAGE HEADER ADDRESS IF RESIDENT 
 MACRO		KFI$W_FID_RVN	= 32,0,16,0%; 		!RELATIVE VOLUME NUMBER FIELD OF FILE ID 
 MACRO		KFI$Q_PROCPRIV	= 36,0,0,0%; 		!PROCESS PRIVILEGE MASK 
 LITERAL	KFI$S_PROCPRIV	= 8; 
 MACRO		KFI$B_MATCHCTL	= 44,0,8,0%; 		!GLOBAL SECTION MATCH CONTROL 
 MACRO		KFI$L_IDENT	= 48,0,32,0%; 			!GLOBAL SECTION IDENT VALUE 
 LITERAL	KFI$C_LENGTH	= 52; 
 LITERAL	KFI$K_LENGTH	= 52; 				!LENGTH OF FIXED AREA OF KFI ENTRY 
  

  
 ! 
 ! KNOWN FILE POINTER BLOCK DEFINITIONS 
 ! 
 !...$KFPDEF	
  
 MACRO		KFP$B_QUECOUNT	= 0,0,8,0%; 		!INDEX OF LAST KNOWN FILE LIST IN USE 
 MACRO		KFP$W_SIZE	= 8,0,16,0%; 			!SIZE OF POINTER BLOCK IN BYTES 
 MACRO		KFP$B_TYPE	= 10,0,8,0%; 			!POINTER BLOCK TYPE 
 MACRO		KFP$B_TYPE1	= 11,0,8,0%; 			!TYPE OF STRUCTURE POINTED TO 
 MACRO		KFP$L_QUE0	= 12,0,32,0%; 			!POINTER TO KNOWN FILE QUEUE 0 
  

  
 !+ 
 ! LOG - LOGICAL NAME BLOCK 
 ! 
 ! THERE IS ONE LOGICAL NAME BLOCK FOR EACH LOGICAL NAME ASSIGNMENT IN A 
 ! SYSTEM. LOGICAL NAME BLOCKS CAN BE LINKED INTO ONE OF THREE TABLES: 
 !	1. A PER PROCESS TABLE. 
 !	2. A GROUP WIDE TABLE. 
 !	3. THE SYSTEM WIDE TABLE. 
 !- 
  
 !...$LOGDEF	
  
 MACRO		LOG$L_LTFL	= 0,0,32,0%; 			!LOGICAL TABLE FORWARD LINK 
 MACRO		LOG$L_LTBL	= 4,0,32,0%; 			!LOGICAL TABLE BACKWARD LINK 
 MACRO		LOG$W_SIZE	= 8,0,16,0%; 			!SIZE OF LOG IN BYTES 
 MACRO		LOG$B_TYPE	= 10,0,8,0%; 			!STRUCTURE TYPE FOR LOG 
 MACRO		LOG$B_TABLE	= 11,0,8,0%; 			!LOGICAL NAME TABLE TYPE 
 MACRO		LOG$W_GROUP	= 12,0,16,0%; 			!CREATOR GROUP NUMBER 
 MACRO		LOG$B_AMOD	= 14,0,8,0%; 			!ACCESS MODE OF CREATOR 
 MACRO		LOG$L_MBXUCB	= 16,0,32,0%; 		!MAILBOX UCB ADDRESS 
 LITERAL	LOG$C_LENGTH	= 20; 
 LITERAL	LOG$K_LENGTH	= 20; 				!LENGTH OF FIXED PART OF LOG 
 MACRO		LOG$T_NAME	= 20,0,0,0%; 		!START OF LOGICAL NAME 
  
 ! 
 ! LOGICAL NAME TABLE NUMBERS 
 ! 
  
 LITERAL	LOG$C_SYSTEM	= 0; 			!SYSTEM NAME TABLE 
 LITERAL	LOG$C_GROUP	= 1; 				!GROUP NAME TABLE 
 LITERAL	LOG$C_PROCESS	= 2; 			!PROCESS NAME TABLE 
  
 ! 
 ! MAXIMUM LENGTH OF LOGICAL NAME STRING 
 ! 
  
 LITERAL	LOG$C_NAMLENGTH	= 64; 			!MAXIMUM LENGTH OF LOGICAL NAME STRING 
  

  
  
 !+ 
 ! MASSBUS ADAPTER REGISTER OFFSET DEFINITIONS 
 !- 
  
 !...$MBADEF	
  
 MACRO		MBA$L_CSR	= 0,0,32,0%; 			!CONFIGURATION STATUS REGISTER 
 						! CONFIGURATION STATUS REGISTER FIELD DEFINITIONS 
 MACRO		MBA$V_CSR_ADCOD	= 0,0,8,0%;    		! ADAPTER CODE FIELD 
 				   			! RESERVED BITS 
 MACRO		MBA$V_CSR_OT	= 0,21,1,0%;    		! OVER TEMPERATURE 
 LITERAL	MBA$M_CSR_OT	= 1^22 - 1^21; 
 MACRO		MBA$V_CSR_PU	= 0,22,1,0%;    		! ADAPTER POWER UP 
 LITERAL	MBA$M_CSR_PU	= 1^23 - 1^22; 
 MACRO		MBA$V_CSR_PD	= 0,23,1,0%;    		! ADAPTER POWER DOWN 
 LITERAL	MBA$M_CSR_PD	= 1^24 - 1^23; 
 				   			! RESERVED BITS 
 MACRO		MBA$V_CSR_XMFLT	= 0,26,1,0%;    	! TRANSMITTER FAULT 
 LITERAL	MBA$M_CSR_XMFLT	= 1^27 - 1^26; 
 MACRO		MBA$V_CSR_MT	= 0,27,1,0%;    		! MULTIPLE TRANSMITTERS 
 LITERAL	MBA$M_CSR_MT	= 1^28 - 1^27; 
 				   			! RESERVED BIT 
 MACRO		MBA$V_CSR_URD	= 0,29,1,0%;    		! UNEXPECTED READ DATA 
 LITERAL	MBA$M_CSR_URD	= 1^30 - 1^29; 
 MACRO		MBA$V_CSR_WS	= 0,30,1,0%;    		! WRITE SEQUENCE DATA 
 LITERAL	MBA$M_CSR_WS	= 1^31 - 1^30; 
 MACRO		MBA$V_CSR_PE	= 0,31,1,0%;  		! SBI PARITY ERROR 
 LITERAL	MBA$M_CSR_PE	= 1^32 - 1^31; 
 					! 
 MACRO		MBA$L_CR	= 4,0,32,0%; 			!CONTROL REGISTER 
 						! CONTROL REGISTER BIT DEFINITIONS 
 MACRO		MBA$V_CR_INIT	= 4,0,1,0%;    		! ADAPTER INITIALIZATION 
 LITERAL	MBA$M_CR_INIT	= 1^1 - 1^0; 
 MACRO		MBA$V_CR_ABORT	= 4,1,1,0%;    		! ABORT OPERATION 
 LITERAL	MBA$M_CR_ABORT	= 1^2 - 1^1; 
 MACRO		MBA$V_CR_IE	= 4,2,1,0%; 		! INTERRUPT ENABLE 
 LITERAL	MBA$M_CR_IE	= 1^3 - 1^2; 
 					! 
 MACRO		MBA$L_SR	= 8,0,32,0%; 			!STATUS REGISTER 
 						! STATUS REGISTER BIT DEFINITIONS 
 MACRO		MBA$V_SR_RDTO	= 8,0,1,0%;  		! READ DATA TIMEOUT 
 LITERAL	MBA$M_SR_RDTO	= 1^1 - 1^0; 
 MACRO		MBA$V_SR_ISTO	= 8,1,1,0%;    		! INTERFACE SEQUENCE TIMEOUT 
 LITERAL	MBA$M_SR_ISTO	= 1^2 - 1^1; 
 MACRO		MBA$V_SR_RDS	= 8,2,1,0%;    		! READ DATA SUBSTITUTE 
 LITERAL	MBA$M_SR_RDS	= 1^3 - 1^2; 
 MACRO		MBA$V_SR_ERCONF	= 8,3,1,0%;    	! ERROR CONFIRMATION 
 LITERAL	MBA$M_SR_ERCONF	= 1^4 - 1^3; 
 MACRO		MBA$V_SR_INVMAP	= 8,4,1,0%;    	! INVALID MAP REGISTER 
 LITERAL	MBA$M_SR_INVMAP	= 1^5 - 1^4; 
 MACRO		MBA$V_SR_MAPPE	= 8,5,1,0%;    		! MAP PARITY ERROR 
 LITERAL	MBA$M_SR_MAPPE	= 1^6 - 1^5; 
 MACRO		MBA$V_SR_MDPE	= 8,6,1,0%;    		! MASSBUS DATA PARITY ERROR 
 LITERAL	MBA$M_SR_MDPE	= 1^7 - 1^6; 
 MACRO		MBA$V_SR_MBEXC	= 8,7,1,0%;    		! MASSBUS EXCEPTION 
 LITERAL	MBA$M_SR_MBEXC	= 1^8 - 1^7; 
 MACRO		MBA$V_SR_MXF	= 8,8,1,0%;    		! MISSED TRANSFER ERROR 
 LITERAL	MBA$M_SR_MXF	= 1^9 - 1^8; 
 MACRO		MBA$V_SR_WCKLWR	= 8,9,1,0%;    	! WRITE CHECK ERROR LOWER BYTE 
 LITERAL	MBA$M_SR_WCKLWR	= 1^10 - 1^9; 
 MACRO		MBA$V_SR_WCKUPR	= 8,10,1,0%;    	! WRITE CHECK ERROR UPPER BYTE 
 LITERAL	MBA$M_SR_WCKUPR	= 1^11 - 1^10; 
 MACRO		MBA$V_SR_DLT	= 8,11,1,0%;    		! DATA LATE ERROR 
 LITERAL	MBA$M_SR_DLT	= 1^12 - 1^11; 
 MACRO		MBA$V_SR_DTABT	= 8,12,1,0%;    		! DATA TRANSFER ABORTED 
 LITERAL	MBA$M_SR_DTABT	= 1^13 - 1^12; 
 MACRO		MBA$V_SR_DTCOMP	= 8,13,1,0%;    	! DATA TRANSFER COMPLETE 
 LITERAL	MBA$M_SR_DTCOMP	= 1^14 - 1^13; 
 				   			! RESERVED BITS 
 MACRO		MBA$V_SR_ATTN	= 8,16,1,0%;    		! MASSBUS ATTENTION 
 LITERAL	MBA$M_SR_ATTN	= 1^17 - 1^16; 
 MACRO		MBA$V_SR_MCPE	= 8,17,1,0%;    		! MASSBUS COMTROL PARITY ERROR 
 LITERAL	MBA$M_SR_MCPE	= 1^18 - 1^17; 
 MACRO		MBA$V_SR_NED	= 8,18,1,0%;    		! NONEXISTENT DRIVE 
 LITERAL	MBA$M_SR_NED	= 1^19 - 1^18; 
 MACRO		MBA$V_SR_PGE	= 8,19,1,0%;    		! PROGRAM ERROR 
 LITERAL	MBA$M_SR_PGE	= 1^20 - 1^19; 
 				   			! RESERVED BITS 
 MACRO		MBA$V_SR_CRD	= 8,29,1,0%;    		! CORRECTED READ DATA 
 LITERAL	MBA$M_SR_CRD	= 1^30 - 1^29; 
 MACRO		MBA$V_SR_NRCONF	= 8,30,1,0%;    	! NO RESPONSE CONFIRMATION 
 LITERAL	MBA$M_SR_NRCONF	= 1^31 - 1^30; 
 MACRO		MBA$V_SR_DTBUSY	= 8,31,1,0%;  		! DATA TRANSFER BUSY 
 LITERAL	MBA$M_SR_DTBUSY	= 1^32 - 1^31; 
 					! 
 LITERAL	
 $EQULST (MBA$M_,GBL,0,1 				! ERROR BITS 
 	,(ERROR,MBA$M_SR_RDTO OR  			! READ DATA TIMEOUT 
 		MBA$M_SR_ISTO OR  			! INTERFACE SEQUENCE TIMEOUT 
 		MBA$M_SR_RDS OR  			! READ DATA SUBSTITUTE 
 		MBA$M_SR_ERCONF OR  	   	! ERROR CONFIRMATION 
 		MBA$M_SR_INVMAP OR  	   	! INVALID MAP REGISTER 
 		MBA$M_SR_MAPPE OR  	   	! MAP PARITY ERROR 
 		MBA$M_SR_MDPE OR  			! MASSBUS DATA PARITY ERROR 
 		MBA$M_SR_MBEXC OR  	   	! MASSBUS EXCEPTION 
 		MBA$M_SR_MXF OR  	 		! MISSED TRANSFER ERROR 
 		MBA$M_SR_WCKLWR OR  	   	! WRITE CHECK ERROR LOWER BYTE 
 		MBA$M_SR_WCKUPR OR  	   	! WRITE CHECK ERROR UPPER BYTE 
 		MBA$M_SR_DLT OR  	 		! DATA LATE ERROR 
 		MBA$M_SR_DTABT OR  	   	! DATA TRANSFER ABORTED 
 		MBA$M_SR_MCPE OR  			! MASSBUS COMTROL PARITY ERROR 
 		MBA$M_SR_NED OR  	 		! NONEXISTENT DRIVE 
 		MBA$M_SR_PGE) 	  		! PROGRAM ERROR 
 	); 
 MACRO		MBA$L_VAR	= 12,0,32,0%; 			!VIRTUAL ADDRESS REGISTER 
 MACRO		MBA$L_BCR	= 16,0,32,0%; 			!BYTE COUNT REGISTER 
 MACRO		MBA$L_ERB	= 1024,0,32,0%; 			!BASE ADDRESS OF EXTERNAL REGISTERS 
 						! BASE ADDRESS FIELD DEFINITIONS 
 							! REGISTER OFFSET ADDRESS BITS 
 MACRO		MBA$V_ERB_UNIT	= 1024,7,3,0%; 		! DRIVE UNIT NUMBER 
 					! 
 MACRO		MBA$L_AS	= 1040,0,32,0%; 			!ATTENTION SUMMARY REGISTER 
 					! TO POSITION TO 2048 
 MACRO		MBA$L_MAP	= 2048,0,0,0%; 		!MAP REGISTERS 
 LITERAL	MBA$S_MAP	= 1024; 
  

  
 !+ 
 ! MOUNTED VOLUME LIST ENTRY. ONE SUCH ENTRY APPEARS IN THE PROCESS MOUNTED 
 ! VOLUME LIST FOR EACH VOLUME MOUNTED BY THE PROCESS AS /SHARE OR /NOSHARE. 
 ! IN ADDITION, EACH VOLUME MOUNTED /SYSTEM OR /GROUP HAS AN ENTRY IN THE 
 ! SYSTEM WIDE MOUNTED VOLUME LIST. 
 !- 
  
 !...$MTLDEF	
 MACRO		MTL$L_MTLFL	= 0,0,32,0%; 				! FORWARD LIST POINTER 
 MACRO		MTL$L_MTLBL	= 4,0,32,0%; 				! BACK LIST POINTER 
 MACRO		MTL$W_SIZE	= 8,0,16,0%; 			! STRUCTURE SIZE IN BYTES 
 MACRO		MTL$B_TYPE	= 10,0,8,0%; 			! STRUCTURE TYPE CODE 
 MACRO		MTL$B_STATUS	= 11,0,8,0%; 			! STATUS BYTE 
 MACRO		MTL$L_UCB	= 12,0,32,0%; 				! POINTER TO DEVICE UCB 
 MACRO		MTL$L_LOGNAME	= 16,0,32,0%; 			! POINTER TO ASSOCIATED LOGICAL NAME 
 LITERAL	MTL$C_LENGTH	= 24; 
 LITERAL	MTL$K_LENGTH	= 24; 				! LENGTH OF STRUCTURE 

  
 !+ 
 ! MUTEX DEFINITIONS 
 !- 
 !...$MTXDEF	
  
 						! BIT DEFINITIONS 
 				 
 MACRO		MTX$V_WRT	= 0,16,1,0%; 			! WRITE PENDING OR IN PROGRESS 
 					! 
 MACRO		MTX$W_OWNCNT	= 0,0,16,0%; 		!OWNERSHIP COUNT 
 MACRO		MTX$W_STS	= 2,0,16,0%; 			!STATUS BITS 
  

  
  
 !+ 
 ! MAGNETIC TAPE VOLUME LIST 
 ! THIS STRUCTURE DESCRIBES THE VOLUMES IN A VOLUME SET 
 !- 
 !...$MVLDEF	
 					 
 MACRO		MVL$L_VCB	= 0,0,32,0%; 		!ADDRESS OF VCB 
 MACRO		MVL$W_SIZE	= 8,0,16,0%; 		!SIZE OF STRUCTURE 
 MACRO		MVL$B_TYPE	= 10,0,8,0%; 		!TYPE OF STRUCTURE 
 MACRO		MVL$B_NVOLS	= 11,0,8,0%; 		!NUMBER OF VOLUMES IN VOLUME SET 
 LITERAL	MVL$C_FIXLEN	= 12; 
 LITERAL	MVL$K_FIXLEN	= 12; 			!LENGTH OF FIXED AREA OF STRUCTURE 
  
 ! THE FOLLOWING STRUCTURE IN REPEATED IN MVL FOR EACH VOLUME IN VOLUME SET 
 			 
 MACRO		MVL$T_VOLLBL	= 0,0,0,0%; 	!VOLUME LABEL 
 LITERAL	MVL$S_VOLLBL	= 6; 
 MACRO		MVL$B_RVN	= 6,0,8,0%; 		!RELATIVE UNIT NUMBER 
 MACRO		MVL$B_STATUS	= 7,0,8,0%; 	!STATUS OF VOLUME 
 			 
 MACRO		MVL$V_MOUNTED	= 7,0,1,0%; 		!VOLUME IS MOUNTED 
 			
 LITERAL	MVL$C_LENGTH	= 8; 
 LITERAL	MVL$K_LENGTH	= 8; 			!LENGTH OF STRUCTURE 

  
 !+ 
 ! 
 ! FORMAT OF THE FILE NAME BLOCK. THE FILE NAME BLOCK IS USED AS AN INTERNAL 
 ! INTERFACE TO THE DIRECTORY SCAN ROUTINE, AND IS ALSO THE FORMAT OF A 
 ! DIRECTORY RECORD. 
 ! 
 !- 
  
  
 !...$NMBDEF	
 MACRO		NMB$W_FID	= 0,0,0,0%; 	! FILE ID 
 LITERAL	NMB$S_FID	= 6; 
 MACRO		NMB$W_FID_NUM	= 0,0,16,0%; 	! FID - FILE NUMBER 
 MACRO		NMB$W_FID_SEQ	= 2,0,16,0%; 	! FID - FILE SEQUENCE NUMBER 
 MACRO		NMB$W_FID_RVN	= 4,0,16,0%; 	! FID - RELATIVE VOLUME NUMBER 
 MACRO		NMB$W_NAME	= 6,0,0,0%; 	! FILE NAME (RAD-50) 
 LITERAL	NMB$S_NAME	= 6; 
 MACRO		NMB$W_TYPE	= 12,0,16,0%; 	! FILE TYPE (RAD-50) 
 MACRO		NMB$W_VERSION	= 14,0,16,1%; 	! VERSION NUMBER 
 LITERAL	NMB$C_DIRENTRY	= 16; 
 LITERAL	NMB$K_DIRENTRY	= 16; 		! LENGTH OF DIRECTORY ENTRY 
  
 MACRO		NMB$W_FLAGS	= 16,0,16,0%; 	! NAME STATUS FLAGS 
 			 
 				 
 MACRO		NMB$V_ALLVER	= 16,3,1,0%; 		! MATCH ALL VERSIONS 
 LITERAL	NMB$M_ALLVER	= 1^4 - 1^3; 
 MACRO		NMB$V_ALLTYP	= 16,4,1,0%; 		! MATCH ALL TYPES 
 LITERAL	NMB$M_ALLTYP	= 1^5 - 1^4; 
 MACRO		NMB$V_ALLNAM	= 16,5,1,0%; 		! MATCH ALL NAMES 
 LITERAL	NMB$M_ALLNAM	= 1^6 - 1^5; 
 				 
 MACRO		NMB$V_WILD	= 16,8,1,0%; 		! WILD CARDS IN FILE NAME 
 LITERAL	NMB$M_WILD	= 1^9 - 1^8; 
 MACRO		NMB$V_NEWVER	= 16,9,1,0%; 		! MAXIMIZE VERSION NUMBER 
 LITERAL	NMB$M_NEWVER	= 1^10 - 1^9; 
 MACRO		NMB$V_SUPERSEDE	= 16,10,1,0%; 	! SUPERSEDE EXISTING FILE 
 LITERAL	NMB$M_SUPERSEDE	= 1^11 - 1^10; 
 MACRO		NMB$V_FINDFID	= 16,11,1,0%; 		! SEARCH FOR FILE ID 
 LITERAL	NMB$M_FINDFID	= 1^12 - 1^11; 
 				 
 MACRO		NMB$V_LOWVER	= 16,14,1,0%; 		! LOWER VERSION OF FILE EXISTS 
 LITERAL	NMB$M_LOWVER	= 1^15 - 1^14; 
 MACRO		NMB$V_HIGHVER	= 16,15,1,0%; 		! HIGHER VERSION OF FILE EXISTS 
 LITERAL	NMB$M_HIGHVER	= 1^16 - 1^15; 
 			
 MACRO		NMB$W_CONTEXT	= 18,0,16,0%; 	! START POINT FOR NEXT FIND 
 LITERAL	NMB$C_LENGTH	= 20; 
 LITERAL	NMB$K_LENGTH	= 20; 		! LENGTH OF NAME BLOCK 

  
 !+ 
 ! DEFINE PERFORMANCE BUFFER HEADER 
 !- 
  
 !...$PBHDEF	
  
 MACRO		PBH$L_BUFRFL	= 0,0,32,0%; 		!BUFFER FORWARD LINK 
 MACRO		PBH$L_BUFRBL	= 4,0,32,0%; 		!BUFFER BACKWARD LINK 
 MACRO		PBH$W_SIZE	= 8,0,16,0%; 			!SIZE OF PERFORMANCE DATA BUFFER 
 MACRO		PBH$B_TYPE	= 10,0,8,0%; 			!DATA STRUCTURE TYPE 
 MACRO		PBH$W_MSGCNT	= 11,0,16,0%; 		!COUNT OF MESSAGES IN BUFFER 
 LITERAL	PBH$C_START	= 13; 
 LITERAL	PBH$K_START	= 13; 				!START OF DATA AREA 
 LITERAL	PBH$C_LENGTH	= 512; 
 LITERAL	PBH$K_LENGTH	= 512; 				!LENGTH OF PERFORMANCE DATA BUFFER 
  

  
 !+ 
 ! PCB DEFINITIONS 
 !- 
  
 !...$PCBDEF	
  
 MACRO		PCB$L_SQFL	= 0,0,32,0%; 			!STATE QUEUE FORWARD LINK 
 MACRO		PCB$L_SQBL	= 4,0,32,0%; 			!STATE QUEUE BACKWARD LINK 
 MACRO		PCB$W_SIZE	= 8,0,16,0%; 			!SIZE IN BYTES 
 MACRO		PCB$B_TYPE	= 10,0,8,0%; 			!STRUCTURE TYPE CODE FOR PCB 
 MACRO		PCB$B_PRI	= 11,0,8,0%; 			!PROCESS CURRENT PRIORITY 
 MACRO		PCB$B_ASTACT	= 12,0,8,0%; 		!ACCESS MODES WITH ACTIVE ASTS 
 MACRO		PCB$B_ASTEN	= 13,0,8,0%; 			!ACCESS MODES WITH ASTS ENABLED 
 MACRO		PCB$W_MTXCNT	= 14,0,16,0%; 		!COUNT OF MUTEX SEMAPHORES OWNED 
 MACRO		PCB$L_ASTQFL	= 16,0,32,0%; 		!AST QUEUE FORWARD LINK(HEAD) 
 MACRO		PCB$L_ASTQBL	= 20,0,32,0%; 		!AST QUEUE BACK LINK(TAIL) 
 MACRO		PCB$L_PHYPCB	= 24,0,32,0%; 		!PHYSICAL ADDRESS OF HW PCB 
 MACRO		PCB$L_OWNER	= 28,0,32,0%; 			!PID OF CREATOR 
 MACRO		PCB$L_UIC	= 32,0,32,0%; 			!LOGON UIC OF PROCESS 
 MACRO		PCB$W_MEM	= 32,0,16,0%; 			!MEMBER NUMBER IN UIC 
 MACRO		PCB$W_GRP	= 34,0,16,0%; 			!GROUP NUMBER IN UIC 
 MACRO		PCB$L_WSSWP	= 36,0,32,0%; 			!SWAP FILE DISK ADDRESS 
 MACRO		PCB$L_STS	= 40,0,32,0%; 			!PROCESS STATUS FLAGS 
 						! BIT DEFINITIONS 
 MACRO		PCB$V_RES	= 40,0,1,0%;    			! RESIDENT, IN BALANCE SET 
 MACRO		PCB$V_DELPEN	= 40,1,1,0%;    		! DELETE PENDING 
 MACRO		PCB$V_FORCPEN	= 40,2,1,0%;    		! FORCE EXIT PENDING 
 MACRO		PCB$V_INQUAN	= 40,3,1,0%;    		! INITIAL QUANTUM IN PROGRESS 
 MACRO		PCB$V_PSWAPM	= 40,4,1,0%; 			! PROCESS SWAP MODE (1=NOSWAP) 
 MACRO		PCB$V_RESPEN	= 40,5,1,0%;    		! RESUME PENDING, SKIP SUSPEND 
 MACRO		PCB$V_SSFEXC	= 40,6,1,0%;    		! SYSTEM SERVICE EXCEPTION ENABLE (K) 
 MACRO		PCB$V_SSFEXCE	= 40,7,1,0%; 		! SYSTEM SERVICE EXCEPTION ENABLE (E) 
 MACRO		PCB$V_SSFEXCS	= 40,8,1,0%; 		! SYSTEM SERVICE EXCEPTION ENABLE (S) 
 MACRO		PCB$V_SSFEXCU	= 40,9,1,0%; 		! SYSTEM SERVICE EXCEPTION ENABLE (U) 
 MACRO		PCB$V_SSRWAIT	= 40,10,1,0%;    		! SYSTEM SERVICE RESOURCE WAIT DISABLE 
 MACRO		PCB$V_SUSPEN	= 40,11,1,0%;    		! SUSPEND PENDING 
 MACRO		PCB$V_WAKEPEN	= 40,12,1,0%;    		! WAKE PENDING, SKIP HIBERNATE 
 MACRO		PCB$V_WALL	= 40,13,1,0%;    		! WAIT FOR ALL EVENTS IN MASK 
 MACRO		PCB$V_BATCH	= 40,14,1,0%;    		! PROCESS IS A BATCH JOB 
 MACRO		PCB$V_NOACNT	= 40,15,1,0%;    		! NO ACCOUNTING FOR PROCESS 
 MACRO		PCB$V_SWPVBN	= 40,16,1,0%; 			! WRITE FOR SWP VBN IN PROGRESS 
 MACRO		PCB$V_ASTPEN	= 40,17,1,0%; 			! AST PENDING 
 MACRO		PCB$V_PHDRES	= 40,18,1,0%; 			! PROCESS HEADER RESIDENT 
 MACRO		PCB$V_HIBER	= 40,19,1,0%; 			! HIBERNATE AFTER INITIAL IMAGE ACTIVATE 
 MACRO		PCB$V_LOGIN	= 40,20,1,0%; 			! LOGIN WITHOUT READING AUTH FILE 
 MACRO		PCB$V_NETWRK	= 40,21,1,0%; 			! NETWORK CONNECTED JOB 
 MACRO		PCB$V_PWRAST	= 40,22,1,0%; 			! POWER FAIL AST 
 MACRO		PCB$V_NODELET	= 40,23,1,0%; 			! NO DELETE 
 					! END OF BIT DEFINITIONS 
 MACRO		PCB$L_WTIME	= 44,0,32,0%; 			!TIME AT START OF WAIT 
 MACRO		PCB$W_STATE	= 48,0,16,0%; 			!PROCESS STATE 
 MACRO		PCB$B_WEFC	= 50,0,8,0%; 			!WAITING EF CLUSTER NUMBER 
 MACRO		PCB$B_PRIB	= 51,0,8,0%; 			!BASE PRIORITY 
 MACRO		PCB$W_APTCNT	= 52,0,16,0%; 		!ACTIVE PAGE TABLE COUNT 
 MACRO		PCB$W_TMBU	= 54,0,16,0%; 			!TERMINATION MAILBOX UNIT NO. 
 MACRO		PCB$W_GPGCNT	= 56,0,16,0%; 		!GLOBAL PAGE COUNT IN WS 
 MACRO		PCB$W_PPGCNT	= 58,0,16,0%; 		!PROCESS PAGE COUNT IN WS 
 MACRO		PCB$W_ASTCNT	= 60,0,16,0%; 		!AST COUNT REMAINING 
 MACRO		PCB$W_BIOCNT	= 62,0,16,0%; 		!BUFFERED I/O COUNT REMAINING 
 MACRO		PCB$W_BIOLM	= 64,0,16,0%; 			!BUFFERED I/O LIMIT 
 MACRO		PCB$W_BYTCNT	= 66,0,16,0%; 		!BYTE COUNT REMAINING FOR BUFFERED I/O 
 MACRO		PCB$W_DIOCNT	= 68,0,16,0%; 		!DIRECT I/O COUNT REMAINING 
 MACRO		PCB$W_DIOLM	= 70,0,16,0%; 			!DIRECT I/O COUNT LIMIT 
 MACRO		PCB$W_FILCNT	= 72,0,16,0%; 		!COUNT REMAINING OF OPEN FILES 
 MACRO		PCB$W_TQCNT	= 74,0,16,0%; 			!COUNT REMAINING OF TIMER QUEUE ENTRIES 
 MACRO		PCB$L_PQB	= 76,0,32,0%; 			!POINTER TO PROCESS QUOTA BLOCK 
 					!(PROCESS CREATION ONLY) 
 MACRO		PCB$L_EFWM	= 76,0,32,0%; 			!EVENT FLAG WAIT MASK 
 MACRO		PCB$L_EFCS	= 80,0,32,0%; 			!LOCAL EVENT FLAG CLUSTER,SYSTEM 
 MACRO		PCB$L_EFCU	= 84,0,32,0%; 			!LOCAL EVENT FLAG CLUSTER, USER 
 MACRO		PCB$L_EFC2P	= 88,0,32,0%; 			!POINTER TO GLOBAL CLUSTER #2 
 MACRO		PCB$L_EFC3P	= 92,0,32,0%; 			!POINTER TO GLOBAL CLUSTER #3 
 MACRO		PCB$L_PID	= 96,0,32,0%; 			!PROCESS IDENTIFICATION 
 MACRO		PCB$L_PHD	= 100,0,32,0%; 			!PROCESS HEADER ADDRESS 
 MACRO		PCB$W_BYTLM	= 104,0,16,0%; 			!BYTE COUNT LIMIT 
 MACRO		PCB$W_PRCCNT	= 106,0,16,0%; 		!SUBPROCESS COUNT 
 MACRO		PCB$T_LNAME	= 108,0,0,0%; 		!LOGICAL NAME OF PROCESS 
 LITERAL	PCB$S_LNAME	= 16; 
 LITERAL	PCB$C_LENGTH	= 124; 
 LITERAL	PCB$K_LENGTH	= 124; 				!LENGTH OF PCB 
  

  
 !+ 
 ! DEFINE DEVICE PERFORMANCE DATA BLOCK 
 !- 
  
 !...$PDBDEF	
  
 MACRO		PDB$L_FREEFL	= 0,0,32,0%; 		!FREE BUFFER LISTHEAD FORWARD LINK 
 MACRO		PDB$L_FREEBL	= 4,0,32,0%; 		!FREE BUFFER LISTHEAD BACKLINK 
 MACRO		PDB$W_SIZE	= 8,0,16,0%; 			!SIZE OF DATA STRUCTURE 
 MACRO		PDB$B_TYPE	= 10,0,8,0%; 			!TYPE OF DATA STRUCTURE 
 MACRO		PDB$B_OVERRUN	= 11,0,8,0%; 		!OVERRUN INDICATOR 
 MACRO		PDB$L_FILLFL	= 12,0,32,0%; 		!FILLED BUFFER LISTHEAD FORWARD LINK 
 MACRO		PDB$L_FILLBL	= 16,0,32,0%; 		!FILLED BUFFER LISTHEAD BACKWARD LINK 
 MACRO		PDB$L_CURBUF	= 20,0,32,0%; 		!ADDRESS OF CURRENT BUFFER 
 MACRO		PDB$L_NXTBUF	= 24,0,32,0%; 		!ADDRESS OF NEXT LOCATION IN BUFFER 
 MACRO		PDB$L_ENDBUF	= 28,0,32,0%; 		!ADDRESS OF END OF BUFFER 
 MACRO		PDB$L_PID	= 32,0,32,0%; 			!PROCESS ID OF DATA COLLECTION PROCESS 
 MACRO		PDB$B_DEVCLASS	= 36,0,8,0%; 		!DEVICE CLASS SELECTION 
 MACRO		PDB$B_DEVTYPE	= 37,0,8,0%; 		!DEVICE TYPE SELECTION 
 MACRO		PDB$W_ANDM	= 38,0,16,0%; 			!STATUS SELECTION 'AND' MASK 
 MACRO		PDB$W_XORM	= 40,0,16,0%; 			!STATUS SELECTION 'XOR' MASK 
 MACRO		PDB$W_BUFCNT	= 42,0,16,0%; 		!COUNT OF FILLED BUFFERS 
 MACRO		PDB$Q_FUNC	= 44,0,0,0%; 			!SELECTION FUNCTION MASK 
 LITERAL	PDB$S_FUNC	= 8; 
 LITERAL	PDB$C_LENGTH	= 52; 
 LITERAL	PDB$K_LENGTH	= 52; 				!LENGTH OF DATA CONTROL BLOCK 
  

  
  
 !+ 
 ! PAGE FILE CONTROL BLOCK 
 !- 
  
 !...$PFLDEF	
  
 ! 
 ! ***** L_VBN, L_WINDOW, AND B_PFC MUST BE THE SAME OFFSET VALUES AS THE 
 ! ***** EQUIVALENTLY NAMED OFFSETS IN $SECDEF 
 ! 
 MACRO		PFL$L_BITMAP	= 0,0,32,0%; 		!ADDRESS OF START OF BIT MAP 
 					!BIT = 1 MEANS AVAILABLE 
 MACRO		PFL$L_STARTBYTE	= 4,0,32,0%; 		!STARTING BYTE OFFSET TO SCAN 
 MACRO		PFL$W_SIZE	= 8,0,16,0%; 			!SIZE OF PAGE FILE CONTROL BLOCK 
 MACRO		PFL$B_TYPE	= 10,0,8,0%; 			!PAGE FILE CONTROL BLOCK TYPE CODE 
 MACRO		PFL$B_PFC	= 11,0,8,0%; 			!PAGE FAULT CLUSTER FOR PAGE READS 
 MACRO		PFL$L_WINDOW	= 12,0,32,0%; 		!WINDOW ADDRESS 
 MACRO		PFL$L_VBN	= 16,0,32,0%; 			!BASE VBN 
 MACRO		PFL$L_BITMAPSIZ	= 20,0,32,0%; 		!SIZE IN BYTES OF PAGE FILE 
 MACRO		PFL$L_FREPAGCNT	= 24,0,32,0%; 		!COUNT - 1 OF PAGES WHICH MAY BE ALLOCATED 
 MACRO		PFL$L_RESERVCNT	= 28,0,32,0%; 		!COUNT - 1 OF PAGES WHICH MAY BE RESERVED 
 LITERAL	PFL$C_LENGTH	= 32; 
 LITERAL	PFL$K_LENGTH	= 32; 				!SIZE OF PAGE FILE CONTROL BLOCK 
  

  
  
 !+ 
 ! PFN DATA BASE DEFINITIONS 
 !- 
  
 !...$PFNDEF	
 ! 
 ! VIELD DEFINITIONS IN PFN$AB_STATE 
 ! 
 			 
 MACRO		PFN$V_LOC	= 0,0,3,0%; 		!LOCATION OF PAGE 
 LITERAL	PFN$M_LOC	= 1^3 - 1^0; 
 ! 
 ! ***** THE FOLLOWING SPARE BIT MUST BE USED FOR EXTENSION OF THE LOC FIELD 
 ! ***** OR ALTERNATIVELY THE DELCON BIT MUST BE MOVED ADJACENT TO LOC 
 ! 
 							!NOT IN USE 
 MACRO		PFN$V_DELCON	= 0,4,1,0%; 		!DELETE PFN CONTENTS WHEN REF=0 
 LITERAL	PFN$M_DELCON	= 1^5 - 1^4; 
 							!NOT IN USE 
 MACRO		PFN$V_MODIFY	= 0,7,1,0%; 		!MODIFY BIT 
 LITERAL	PFN$M_MODIFY	= 1^8 - 1^7; 
 			
 ! 
 ! VIELD DEFINITIONS IN PFN$AB_TYPE 
 ! 
 			 
 MACRO		PFN$V_PAGTYP	= 0,0,3,0%; 		!PAGE TYPE 
 LITERAL	PFN$M_PAGTYP	= 1^3 - 1^0; 
 							!NOT IN USE 
 MACRO		PFN$V_COLLISION	= 0,4,1,0%; 		!EMPTY COLLISION QUEUE WHEN PAGE READ COMPLETE 
 LITERAL	PFN$M_COLLISION	= 1^5 - 1^4; 
 MACRO		PFN$V_BADPAG	= 0,5,1,0%; 		!BAD PAGE BIT 
 LITERAL	PFN$M_BADPAG	= 1^6 - 1^5; 
 MACRO		PFN$V_RPTEVT	= 0,6,1,0%; 		!REPORT EVENT ON I/O COMPLETE 
 LITERAL	PFN$M_RPTEVT	= 1^7 - 1^6; 
 			
 ! 
 ! VIELD DEFINITIONS IN PFN$AL_BAK 
 ! 
 			 
 MACRO		PFN$V_BAK	= 0,0,23,0%; 		!BACKUP ADDRESS 
 LITERAL	PFN$M_BAK	= 1^23 - 1^0; 
 MACRO		PFN$V_GBLBAK	= 0,23,1,0%; 		!GLOBAL BACKING STORE ADDRESS 
 LITERAL	PFN$M_GBLBAK	= 1^24 - 1^23; 
 MACRO		PFN$V_PGFLX	= 0,24,8,0%; 		!PAGE FILE INDEX 
 LITERAL	PFN$M_PGFLX	= 1^32 - 1^24; 
 			
 ! 
 ! LOCATION VIELD VALUES 
 ! 
 LITERAL	
 $EQULST (PFN$C_,GBL,0,1  
 	,(FREPAGLST,0) 			!ON FREE PAGE LIST 
 	,(MFYPAGLST,1) 			!ON MODIFIED PAGE LIST 
 	,(BADPAGLST,2) 			!ON BAD PAGE LIST 
 	,(RELPEND,3) 			!RELEASE PENDING 
 					!WHEN REFCNT = 0 RELEASE PFN 
 	,(RDERR,4) 				!READ ERROR WHILE PAGING IN 
 	,(WRTINPROG,5) 			!WRITE IN PROGRESS (BY MFY PAG WRITER) 
 	,(RDINPROG,6) 			!READ IN PROGRESS (PAGE IN) 
 	,(ACTIVE,7) 			!PAGE IS ACTIVE AND VALID 
 	); 
 ! 
 ! PAGE TYPE VIELD DEFINITIONS 
 ! 
 LITERAL	
 $EQULST (PFN$C_,GBL,0,1  
 	,(PROCESS,0) 			!PROCESS PAGE 
 	,(SYSTEM,1) 			!SYSTEM PAGE 
 	,(GLOBAL,2) 			!GLOBAL PAGE (READ ONLY) 
 	,(GBLWRT,3) 			!GLOBAL WRITABLE PAGE 
 	,(PPGTBL,4) 			!PROCESS PAGE TABLE 
 	,(GPGTBL,5) 			!GLOBAL PAGE TABLE 
 	); 
  

  
 !+ 
 ! A PROCESS HEADER CONTAINS THE SWAPPABLE SCHEDULER AND 
 ! MEMORY MANAGEMENT DATA BASES FOR A PROCESS IN THE 
 ! BALANCE SET. 
 !- 
  
 !...$PHDDEF	
  
 MACRO		PHD$Q_PRIVMSK	= 0,0,0,0%; 		!PRIVILEGE MASK 
 LITERAL	PHD$S_PRIVMSK	= 8; 
 ! 
 ! WORKING SET LIST POINTERS - THESE CONTAIN LONG WORD OFFSETS FROM THE 
 ! BEGINNING OF THE PROCESS HEADER. 
 ! 
 MACRO		PHD$W_WSLIST	= 8,0,16,0%; 		!1ST WORKING SET LIST ENTRY 
 MACRO		PHD$W_WSAUTH	= 10,0,16,0%; 		!AUTHORIZED WORKING SET SIZE 
 MACRO		PHD$W_WSLOCK	= 12,0,16,0%; 		!1ST LOCKED WORKING SET LIST ENTRY 
 MACRO		PHD$W_WSDYN	= 14,0,16,0%; 			!1ST DYNAMIC WORKING SET LIST ENTRY 
 MACRO		PHD$W_WSNEXT	= 16,0,16,0%; 		!LAST WSL ENTRY REPLACED 
 MACRO		PHD$W_WSLAST	= 18,0,16,0%; 		!LAST WSL ENTRY IN LIST 
 ! 
 ! ***** MOVE THE FOLLOWING TO THE ACCOUNTING AREA WHEN POSSIBLE 
 ! 
 MACRO		PHD$L_REFERFLT	= 20,0,32,0%; 		!REFERENCE FAULT COUNT 
 ! 
 ! THE FOLLOWING TWO WORDS SPECIFY THE MAXIMUM AND INITIAL WORKING SET 
 ! SIZES FOR THE PROCESS.  RATHER THAN CONTAINING THE COUNT OF PAGES 
 ! THEY CONTAIN THE LONG WORD INDEX TO WHAT WOULD BE THE LAST WORKING 
 ! SET LIST ENTRY. 
 ! 
 MACRO		PHD$W_WSQUOTA	= 24,0,16,0%; 		!QUOTA ON WORKING SET SIZE 
 MACRO		PHD$W_DFWSCNT	= 26,0,16,0%; 		!DEFAULT WORKING SET SIZE 
 MACRO		PHD$L_PAGFIL	= 28,0,32,0%; 		!PAGING FILE INDEX, LONG WORD REF 
 MACRO		PHD$B_PAGFIL	= 31,0,8,0%; 		!PAGING FILE INDEX, BYTE REFERENCE 
 ! 
 ! PROCESS SECTION TABLE DATA BASE 
 !	PSTBASOFF IS THE BYTE OFFSET (INTEGRAL # OF PAGES) FROM THE 
 ! BEGINNING OF THE PROCESS HEADER TO THE 1ST LONG WORD BEYOND THE 
 ! PROCESS SECTION TABLE. 
 !	THE WORDS, PSTLAST AND PSTFREE ARE SECTION TABLE INDICES WHICH 
 ! ARE THE NEGATIVE LONG WORD INDEX FROM THE END OF THE SECTION TABLE TO 
 ! THE SECTION TABLE ENTRY. 
 ! 
 MACRO		PHD$L_PSTBASOFF	= 32,0,32,0%; 		!BYTE OFFSET TO BASE OF PST 
 					!FIRST LONG WORD NOT IN PST 
 					!PST GROWS BACKWARDS FROM HERE 
 MACRO		PHD$W_PST	= 32,0,16,0%; 			!*****TEMP***** 
 MACRO		PHD$W_PSTLAST	= 36,0,16,0%; 		!END OF PROCESS SECTION TABLE 
 					!ADR OF LAST PSTE ALLOCATED 
 MACRO		PHD$W_PSTFREE	= 38,0,16,0%; 		!HEAD OF FREE PSTE LIST 
 ! 
 ! CREATE/DELETE PAGE CONTEXT 
 ! 
 MACRO		PHD$L_FREP0VA	= 40,0,32,0%; 		!1ST FREE VIRTUAL ADR AT END OF P0 SPACE 
 					!***** MUST BE QUAD WORD AWAY FROM FREP1VA 
 MACRO		PHD$L_FREPTECNT	= 44,0,32,0%; 		!CNT OF FREE PTE'S BETWEEN THE ENDS 
 					!0F THE P0 AND P1 PAGE TABLES 
 MACRO		PHD$L_FREP1VA	= 48,0,32,0%; 		!1ST FREE VIRTUAL ADR AT END OF P1 SPACE 
 MACRO		PHD$L_PGFLCNT	= 52,0,32,0%; 		!COUNT OF PAGE FILE PAGES THAT 
 					!MAY STILL BE CREATED 
 MACRO		PHD$B_DFPFC	= 56,0,8,0%; 			!DEFAULT PAGE FAULT CLUSTER 
 MACRO		PHD$B_PGTBPFC	= 57,0,8,0%; 		!PAGE TABLE CLUSTER FACTOR 
 MACRO		PHD$W_FLAGS	= 58,0,16,0%; 			!FLAGS WORD 
 			 
 MACRO		PHD$V_PFMFLG	= 58,0,1,0%; 			!PAGE FAULT MONITORING ENABLED 
 LITERAL	PHD$M_PFMFLG	= 1^1 - 1^0; 
 MACRO		PHD$V_DALCSTX	= 58,1,1,0%; 			!NEED TO DEALLOCATE SECTION INDICES 
 LITERAL	PHD$M_DALCSTX	= 1^2 - 1^1; 
 MACRO		PHD$V_WSPEAKCHK	= 58,2,1,0%; 		!CHECK FOR NEW WORKING SET SIZE PEAK 
 LITERAL	PHD$M_WSPEAKCHK	= 1^3 - 1^2; 
 			
 ! 
 ! QUOTAS AND LIMITS 
 ! 
 MACRO		PHD$L_CPUTIM	= 60,0,32,0%; 		!ACCUMULATED CPU TIME CHARGED 
 MACRO		PHD$W_QUANT	= 64,0,16,0%; 			!ACCUMULATED CPU TIME SINCE 
 					!LAST QUANTUM OVERFLOW 
 MACRO		PHD$W_PRCLM	= 66,0,16,0%; 			!SUBPROCESS QUOTA 
 MACRO		PHD$W_ASTLM	= 68,0,16,0%; 			!AST LIMIT 
  
 MACRO		PHD$W_PHVINDEX	= 70,0,16,0%; 		!PROCESS HEADER VECTOR INDEX 
 MACRO		PHD$W_BAK	= 72,0,16,0%; 			!POINTER TO BACKUP ADDRESS VECTOR FOR 
 					!PROCESS HEADER PAGES 
 MACRO		PHD$W_WSLX	= 74,0,16,0%; 			!POINTER TO WORKING SET LIST INDEX 
 					!SAVE AREA 
 MACRO		PHD$W_PSTBASMAX	= 74,0,16,0%; 		!LW OFFSET TO TOP PST ADDRESS 
 MACRO		PHD$L_PAGEFLTS	= 76,0,32,0%; 		!COUNT OF PAGE FAULTS 
  
 ! 
 ! THE NEXT TWO I/O COUNTERS MUST BE ADJACENT 
 ! 
  
 MACRO		PHD$L_DIOCNT	= 80,0,32,0%; 		!DIRECT I/O COUNT 
 MACRO		PHD$L_BIOCNT	= 84,0,32,0%; 		!BUFFERED I/O COUNT 
  
 MACRO		PHD$L_CPULIM	= 88,0,32,0%; 		!LIMIT ON CPU TIME FOR PROCESS 
 MACRO		PHD$L_PGFLQUOTA	= 92,0,32,0%; 		!MAXIMUM VIRTUAL PAGE COUNT 
 MACRO		PHD$W_FILLM	= 96,0,16,0%; 			!OPEN FILE LIMIT 
 MACRO		PHD$W_TQLM	= 98,0,16,0%; 			!TIMER QUEUE ENTRY LIMIT 
 ! 
 ! PAGE TABLE STATISTICS 
 ! 
 MACRO		PHD$L_PTWSLELCK	= 100,0,32,0%; 		! BYTE OFFSET TO BYTE ARRAY OF COUNTS 
 					! OF LOCKED WSLE'S IN THIS PAGE TABLE 
 MACRO		PHD$L_PTWSLEVAL	= 104,0,32,0%; 		! BYTE OFFSET TO BYTE ARRAY OF COUNTS 
 					! OF VALID WSLE'S IN THIS PAGE TABLE 
 LITERAL	PHD$C_PHDPAGCTX	= 8; 			! SIZE OF CONTEXT FOR PHD PAGES 
 MACRO		PHD$W_PTCNTLCK	= 108,0,16,0%; 		! COUNT OF PAGE TABLES CONTAINING 
 					! 1 OR MORE LOCKED WSLE 
 MACRO		PHD$W_PTCNTVAL	= 110,0,16,0%; 		! COUNT OF PAGE TABLES CONTAINING 
 					! 1 OR MORE VALID WSLE 
 MACRO		PHD$W_PTCNTACT	= 112,0,16,0%; 		! COUNT OF ACTIVE PAGE TABLES 
 MACRO		PHD$W_PTCNTMAX	= 114,0,16,0%; 		! MAX COUNT OF PAGE TABLES 
 					! WHICH HAVE NON-ZERO PTE'S 
 MACRO		PHD$W_WSFLUID	= 116,0,16,0%; 		! GUARANTEED NUMBER OF FLUID WS PAGES 
 MACRO		PHD$W_EXTDYNWS	= 118,0,16,0%; 		! EXTRA DYNAMIC WORKING SET LIST ENTRIES 
 					! ABOVE REQUIRED WSFLUID MINIMUM 
 ! 
 ! HARDWARE PCB PORTION OF PROCESS HEADER 
 ! 
 MACRO		PHD$L_PCB	= 120,0,32,0%; 			!HARDWARE PCB 
 MACRO		PHD$L_KSP	= 120,0,32,0%; 			!KERNEL STACK POINTER 
 MACRO		PHD$L_ESP	= 124,0,32,0%; 			!EXEC STACK POINTER 
 MACRO		PHD$L_SSP	= 128,0,32,0%; 			!SUPERVISOR STACK POINTER 
 MACRO		PHD$L_USP	= 132,0,32,0%; 			!USER STACK POINTER 
 MACRO		PHD$L_R0	= 136,0,32,0%; 			!R0 
 MACRO		PHD$L_R1	= 140,0,32,0%; 			!R1 
 MACRO		PHD$L_R2	= 144,0,32,0%; 			!R2 
 MACRO		PHD$L_R3	= 148,0,32,0%; 			!R3 
 MACRO		PHD$L_R4	= 152,0,32,0%; 			!R4 
 MACRO		PHD$L_R5	= 156,0,32,0%; 			!R5 
 MACRO		PHD$L_R6	= 160,0,32,0%; 			!R6 
 MACRO		PHD$L_R7	= 164,0,32,0%; 			!R7 
 MACRO		PHD$L_R8	= 168,0,32,0%; 			!R8 
 MACRO		PHD$L_R9	= 172,0,32,0%; 			!R9 
 MACRO		PHD$L_R10	= 176,0,32,0%; 			!R10 
 MACRO		PHD$L_R11	= 180,0,32,0%; 			!R11 
 MACRO		PHD$L_R12	= 184,0,32,0%; 			!R12 
 MACRO		PHD$L_R13	= 188,0,32,0%; 			!R13 
 MACRO		PHD$L_PC	= 192,0,32,0%; 			!PC 
 MACRO		PHD$L_PSL	= 196,0,32,0%; 			!PROGRAM STATUS LONGWORD 
 MACRO		PHD$L_P0BR	= 200,0,32,0%; 			!P0 BASE REGISTER 
 MACRO		PHD$L_P0LRASTL	= 204,0,32,0%; 		!P0LR, ASTLVL 
 						! VIELDS IN P0LRASTL 
 MACRO		PHD$V_P0LR	= 204,0,24,0%; 			!P0 LENGTH REGISTER 
 MACRO		PHD$V_ASTLVL	= 204,24,8,0%; 		! AST LEVEL 
 					! END OF VIELDS 
 MACRO		PHD$B_ASTLVL	= 207,0,8,0%; 		!AST LEVEL SUBFIELD 
 MACRO		PHD$L_P1BR	= 208,0,32,0%; 			!P1 BASE REGISTER 
 MACRO		PHD$L_P1LR	= 212,0,32,0%; 			!P1 LENGTH REGISTER 
 MACRO		PHD$W_EMPTPG	= 216,0,16,0%; 		!COUNT OF EMPTY WORKING SET PAGES 
 ! 
 ! END OF FIXED PORTION OF PROCESS HEADER 
 ! 
 LITERAL	PHD$C_LENGTH	= 280; 
 LITERAL	PHD$K_LENGTH	= 280; 				!LENGTH OF FIXED PART OF PROCESS HEADER 
 MACRO		PHD$L_WSL	= 280,0,32,0%; 			!FIRST WORKING SET LIST ENTRY 
  

  
 !+ 
 ! PERFORMANCE I/O INFORMATION BLOCK 
 !- 
  
 !...$PIBDEF	
  
 MACRO		PIB$B_TYPE	= 0,0,8,0%; 			!TYPE OF ENTRY 
 			 
  
 ! 
 ! START OF I/O REQUEST TRANSACTION MESSAGE BLOCK 
 ! 
  
 			 
 MACRO		PIB$B_SRQ_PRI	= 1,0,8,0%; 		!BASE PRIORITY OF PROCESS 
 MACRO		PIB$L_SRQ_TIME	= 4,0,32,0%; 		!TIME OF I/O TRANSACTION 
 MACRO		PIB$L_SRQ_SEQN	= 8,0,32,0%; 		!SEQUENCE NUMBER OF I/O TRANSACTION 
 MACRO		PIB$L_SRQ_PID	= 12,0,32,0%; 		!REQUESTER PID 
 MACRO		PIB$L_SRQ_UCB	= 16,0,32,0%; 		!ADDRESS OF DEVICE UCB 
 MACRO		PIB$W_SRQ_FUNC	= 20,0,16,0%; 		!I/O FUNCTION CODE 
 MACRO		PIB$W_SRQ_STS	= 22,0,16,0%; 		!I/O PACKET STATUS 
 LITERAL	PIB$C_SRQ_SIZE	= 24; 
 LITERAL	PIB$K_SRQ_SIZE	= 24; 			!LENGTH OF START I/O MESSAGE 
  
 ! 
 ! START OF I/O TRANSACTION MESSAGE BLOCK 
 ! 
  
 			 
 MACRO		PIB$W_SIO_BCNT	= 2,0,16,0%; 		!TRANSFER BYTE COUNT 
 MACRO		PIB$L_SIO_TIME	= 4,0,32,0%; 		!TIME OF TRANSACTION 
 MACRO		PIB$L_SIO_SEQN	= 8,0,32,0%; 		!SEQUENCE NUMBER OF TRANSACTION 
 MACRO		PIB$L_SIO_MEDIA	= 12,0,32,0%; 		!TRANSFER MEDIA ADDRESS 
 LITERAL	PIB$C_SIO_SIZE	= 16; 
 LITERAL	PIB$K_SIO_SIZE	= 16; 			!LENGTH OF I/O TRANSACTION MESSAGE 
  
 ! 
 ! END OF I/O TRANSACTION MESSAGE BLOCK 
 ! 
  
 			 
 MACRO		PIB$L_EIO_TIME	= 4,0,32,0%; 		!TIME OF TRANSACTION 
 MACRO		PIB$L_EIO_SEQN	= 8,0,32,0%; 		!SEQUENCE NUMBER OF TRANSACTION 
 MACRO		PIB$Q_EIO_IOSB	= 12,0,0,0%; 		!FINAL I/O STATUS 
 LITERAL	PIB$S_EIO_IOSB	= 8; 
 LITERAL	PIB$C_EIO_SIZE	= 20; 
 LITERAL	PIB$K_EIO_SIZE	= 20; 			!LENGTH OF END OF I/O TRANSACTION 
  
 ! 
 ! END OF I/O REQUEST MESSAGE BLOCK 
 ! 
  
 			 
 MACRO		PIB$L_ERQ_TIME	= 4,0,32,0%; 		!TIME OF TRANSACTION 
 MACRO		PIB$L_ERQ_SEQN	= 8,0,32,0%; 		!SEQUENCE NUMBER OF TRANSACTION 
 LITERAL	PIB$C_ERQ_SIZE	= 12; 
 LITERAL	PIB$K_ERQ_SIZE	= 12; 			!LENGTH OF END OF I/O REQUEST TRANSACTION 
  
 ! 
 ! I/O MESSAGE BLOCK ENTRY TYPE CODES 
 ! 
  
 LITERAL	PIB$K_SRQ	= 0; 				!START OF I/O REQUEST 
 LITERAL	PIB$K_SIO	= 1; 				!START OF I/O TRANSACTION 
 LITERAL	PIB$K_EIO	= 2; 				!END OF I/O TRANSACTION 
 LITERAL	PIB$K_ERQ	= 3; 				!END OF I/O REQUEST 
  

  
 !+ 
 ! PAGE FAULT MONITOR CONTROL BLOCK 
 !- 
  
 !...$PMBDEF	
  
 MACRO		PMB$L_CURBUF	= 0,0,32,0%; 		!CURRENT BUFFER POINTER 
 MACRO		PMB$L_BUFEND	= 4,0,32,0%; 		!CURRENT BUFFER END 
 MACRO		PMB$W_SIZE	= 8,0,16,0%; 			!BLOCK SIZE FIELD 
 MACRO		PMB$W_MBXCHN	= 10,0,16,0%; 		!SUBPROCESS MAILBOX CHANNEL 
 MACRO		PMB$Q_HDR	= 12,0,0,0%; 			!FREE BUFFER QUEUE HEADER 
 LITERAL	PMB$S_HDR	= 8; 
 MACRO		PMB$Q_SBPHDR	= 20,0,0,0%; 		!SUBRPCESS QUEUE HEADER 
 LITERAL	PMB$S_SBPHDR	= 8; 
 MACRO		PMB$L_PID	= 28,0,32,0%; 			!SUBPROCESS PID 
 MACRO		PMB$B_OVRRUN	= 32,0,8,0%; 		!DATA OVERRUN INDICATOR 
 LITERAL	PMB$C_LENGTH	= 33; 
 LITERAL	PMB$K_LENGTH	= 33; 				!LENGTH OF PMB 

  
 !+ 
 ! PROCESS QUOTA BLOCK DEFINITION 
 !- 
  
 !...$PQBDEF	
  
 MACRO		PQB$Q_PRVMSK	= 0,0,0,0%; 		!PRIVILEGE MASK 
 LITERAL	PQB$S_PRVMSK	= 8; 
 MACRO		PQB$W_SIZE	= 8,0,16,0%; 			!SIZE OF PQB IN BYTES 
 MACRO		PQB$B_TYPE	= 10,0,8,0%; 			!STRUCTURE TYPE CODE 
 MACRO		PQB$B_STS	= 11,0,8,0%; 			!STATUS FLAGS 
 MACRO		PQB$T_IMAGE	= 12,0,0,0%; 		!IMAGE NAME FOR NEW PROCESS 
 LITERAL	PQB$S_IMAGE	= 64; 
 MACRO		PQB$T_ERROR	= 76,0,0,0%; 		!LOGICAL NAME FOR ERROR OUTPUT 
 LITERAL	PQB$S_ERROR	= 64; 
 MACRO		PQB$T_INPUT	= 140,0,0,0%; 		!LOGICAL NAME FOR INPUT 
 LITERAL	PQB$S_INPUT	= 64; 
 MACRO		PQB$T_OUTPUT	= 204,0,0,0%; 		!LOGICAL NAME FOR OUTPUT 
 LITERAL	PQB$S_OUTPUT	= 64; 
 MACRO		PQB$T_DISK	= 268,0,0,0%; 		!LOGICAL NAME FOR SYS$DISK 
 LITERAL	PQB$S_DISK	= 64; 
 MACRO		PQB$L_ASTLM	= 332,0,32,0%; 			!AST LIMIT 
 MACRO		PQB$L_BIOLM	= 336,0,32,0%; 			!BUFFERED I/O LIMIT 
 MACRO		PQB$L_BYTLM	= 340,0,32,0%; 			!BUFFERED I/O LIMIT 
 MACRO		PQB$L_CPULM	= 344,0,32,0%; 			!CPU TIME LIMIT 
 MACRO		PQB$L_DIOLM	= 348,0,32,0%; 			!DIRECT I/O LIMIT 
 MACRO		PQB$L_FILLM	= 352,0,32,0%; 			!OPEN FILE LIMIT 
 MACRO		PQB$L_PGFLQUOTA	= 356,0,32,0%; 		!PAGING FILE QUOTA 
 MACRO		PQB$L_PRCLM	= 360,0,32,0%; 			!SUB-PROCESS LIMIT 
 MACRO		PQB$L_TQELM	= 364,0,32,0%; 			!TIMER QUEUE ENTRY LIMIT 
 MACRO		PQB$L_WSQUOTA	= 368,0,32,0%; 		!WORKING SET QUOTA 
 MACRO		PQB$L_WSDEFAULT	= 372,0,32,0%; 		!WORKING SET DEFAULT 
 MACRO		PQB$T_USERNAME	= 376,0,0,0%; 		!USERNAME FOR SUBPROCESS 
 LITERAL	PQB$S_USERNAME	= 12; 
 MACRO		PQB$T_ACCOUNT	= 388,0,0,0%; 		!ACCOUNT NAME FOR SUBPROCESS 
 LITERAL	PQB$S_ACCOUNT	= 8; 
 MACRO		PQB$T_DDSTRING	= 396,0,0,0%; 		!DEFAULT DIRECTORY STRING 
 LITERAL	PQB$S_DDSTRING	= 32; 
 LITERAL	PQB$C_LENGTH	= 428; 
 LITERAL	PQB$K_LENGTH	= 428; 				!LENGTH OF PROCESS QUOTA BLOCK 
  

  
  
 !+ 
 ! PRIORITY INCREMENT CLASS DEFINITIONS 
 !- 
  
 !...$PRIDEF	
  
 LITERAL	
 $EQULST (PRI$_,GBL,0,1  
 	,(NULL,0) 					! NO PRIORITY INCREMENT 
 	,(IOCOM,1) 					! DIRECT I/O COMPLETION 
 	,(RESAVL,2) 				! RESOURCE AVAIL 
 	,(TOCOM,3) 					! TERMINAL OUTPUT COMPLETE 
 	,(TICOM,4) 					! TERMINAL INPUT COMPLETE 
 	,(TIMER,2) 					! TIMER INTERVAL COMPLETION 
 	); 

  
 !+ 
 ! DEFINE PARAMETER DESCRIPTOR BLOCK 
 !- 
 !...$PRMDEF	
  
 MACRO		PRM$L_ADDR	= 0,0,32,0%; 			!ADDRESS OF PARAMETER 
 MACRO		PRM$L_DEFAULT	= 4,0,32,0%; 		!DEFAULT VALUE 
 MACRO		PRM$L_MIN	= 8,0,32,0%; 			!MINIMUM VALUE (-1)=>NONE 
 MACRO		PRM$L_MAX	= 12,0,32,0%; 			!MAXIMUM VALUE (-1)=>NONE 
 MACRO		PRM$W_FLAGS	= 16,0,16,0%; 			!TYPE FLAGS 
 						! BIT DEFINITIONS 
 MACRO		PRM$V_DYNAMIC	= 16,0,1,0%; 		! DYNAMIC PARAMETER 
 LITERAL	PRM$M_DYNAMIC	= 1^1 - 1^0; 
 MACRO		PRM$V_STATIC	= 16,1,1,0%; 		! STATIC PARAMETER 
 LITERAL	PRM$M_STATIC	= 1^2 - 1^1; 
 MACRO		PRM$V_SYSGEN	= 16,2,1,0%; 		! SYSGEN PARAMETER 
 LITERAL	PRM$M_SYSGEN	= 1^3 - 1^2; 
 MACRO		PRM$V_ACP	= 16,3,1,0%; 			! ACP CONTROL PARAMETER 
 LITERAL	PRM$M_ACP	= 1^4 - 1^3; 
 MACRO		PRM$V_JBC	= 16,4,1,0%; 			! JOB CONTROL PARAMETER 
 LITERAL	PRM$M_JBC	= 1^5 - 1^4; 
 MACRO		PRM$V_RMS	= 16,5,1,0%; 			! RMS CONTROL PARAMETER 
 LITERAL	PRM$M_RMS	= 1^6 - 1^5; 
 MACRO		PRM$V_SYS	= 16,6,1,0%; 			! GENERAL SYSTEM PARAMETER 
 LITERAL	PRM$M_SYS	= 1^7 - 1^6; 
 MACRO		PRM$V_SPECIAL	= 16,7,1,0%; 		! SPECIAL PARAMETER 
 LITERAL	PRM$M_SPECIAL	= 1^8 - 1^7; 
 MACRO		PRM$V_DISPLAY	= 16,8,1,0%; 		! DISPLAY ONLY (NO CHANGE) 
 LITERAL	PRM$M_DISPLAY	= 1^9 - 1^8; 
 MACRO		PRM$V_CONTROL	= 16,9,1,0%; 		! CONTROL PARAMETER 
 LITERAL	PRM$M_CONTROL	= 1^10 - 1^9; 
 MACRO		PRM$V_MAJOR	= 16,10,1,0%; 		! MAJOR PARAMETER 
 LITERAL	PRM$M_MAJOR	= 1^11 - 1^10; 
 MACRO		PRM$V_PQL	= 16,11,1,0%; 			! PROCESS QUOTA LIST 
 LITERAL	PRM$M_PQL	= 1^12 - 1^11; 
 MACRO		PRM$V_NEG	= 16,12,1,0%; 			! NEGATIVE 
 LITERAL	PRM$M_NEG	= 1^13 - 1^12; 
 					! 
 MACRO		PRM$B_SIZE	= 18,0,8,0%; 			!SIZE CODE FOR DATUM 
 LITERAL	PRM$C_BYTE	= 8; 				! 
 LITERAL	PRM$C_WORD	= 16; 				! 
 LITERAL	PRM$C_LONG	= 32; 				! 
 MACRO		PRM$B_POS	= 19,0,8,0%; 			!BIT POSITION 
 MACRO		PRM$T_NAME	= 20,0,0,0%; 		!ASCIC NAME STRING 
 LITERAL	PRM$S_NAME	= 16; 
 MACRO		PRM$T_UNIT	= 36,0,0,0%; 		!ASCIC UNIT STRING 
 LITERAL	PRM$S_UNIT	= 12; 
 LITERAL	PRM$C_LENGTH	= 48; 
 LITERAL	PRM$K_LENGTH	= 48; 				!SIZE OF DESCRIPTOR BLOCK 
 			! 
  
 !+ 
 ! DEFINE PAGE TABLE ENTRY VIELDS AND VALUES 
 !- 
 !...$PTEDEF	
 ! 
 ! VIELD DEFINITION FOR "VALID" PTE'S 
 ! 
 			 
 MACRO		PTE$V_PFN	= 0,0,21,0%; 		! PAGE FRAME NUMBER 
 LITERAL	PTE$M_PFN	= 1^21 - 1^0; 
 							! RESERVED 
 MACRO		PTE$V_OWN	= 0,23,2,0%; 		! MODE OF THE OWNER 
 LITERAL	PTE$M_OWN	= 1^25 - 1^23; 
 							! RESERVED 
 MACRO		PTE$V_MODIFY	= 0,26,1,0%; 		! MODIFY BIT 
 LITERAL	PTE$M_MODIFY	= 1^27 - 1^26; 
 MACRO		PTE$V_PROT	= 0,27,4,0%; 		! PROTECTION 
 LITERAL	PTE$M_PROT	= 1^31 - 1^27; 
 MACRO		PTE$V_VALID	= 0,31,1,0%; 		! VALID BIT 
 LITERAL	PTE$M_VALID	= 1^32 - 1^31; 
 			
 ! 
 ! VIELD DEFINITIONS FOR VARIOUS INVALID FORMS OF PTE 
 ! 
 							! SECTION TABLE INDEX FORM 
 MACRO		PTE$V_STX	= 0,0,16,0%; 			! SECTION TABLE INDEX 
 MACRO		PTE$V_CRF	= 0,16,1,0%; 			! COPY ON REFERENCE 
 LITERAL	PTE$M_CRF	= 1^17 - 1^16; 
 MACRO		PTE$V_DZRO	= 0,17,1,0%; 		! DEMAND ZERO 
 LITERAL	PTE$M_DZRO	= 1^18 - 1^17; 
 MACRO		PTE$V_WRT	= 0,18,1,0%; 			! SECTION FILE IS ACCESSED FOR WRITING 
 LITERAL	PTE$M_WRT	= 1^19 - 1^18; 
 							! SPARE 
 MACRO		PTE$V_TYP0	= 0,22,1,0%; 		! LOW ORDER BIT OF PTE TYPE 
 LITERAL	PTE$M_TYP0	= 1^23 - 1^22; 
 							! OWNER FIELD 
 							! RESERVED 
 MACRO		PTE$V_TYP1	= 0,26,1,0%; 		! HIGH ORDER BIT OF PTE TYPE 
 LITERAL	PTE$M_TYP1	= 1^27 - 1^26; 
 					! OVERLAYS MODIFY BIT 
 			
 						! PAGING FILE POINTER 
 MACRO		PTE$V_PGFLVB	= 0,0,22,0%; 		! PAGE FILE VBN 
 LITERAL	PTE$M_PGFLVB	= 1^22 - 1^0; 
 			
  
 						! GLOBAL PAGE TABLE POINTER 
 MACRO		PTE$V_GPTX	= 0,0,22,0%; 		! GLOBAL PAGE TABLE INDEX 
 LITERAL	PTE$M_GPTX	= 1^22 - 1^0; 
 			
 !+ 
 ! PROTECTION FIELD DEFINITIONS 
 !- 
 LITERAL	
 $EQULST (PTE$C_,GBL,0,1  
 	,(NA,(%B'0000'^$BITPOSITION(PTE$V_PROT))) 	 !  NO ACCESS 
 	,(KR,(%B'0011'^$BITPOSITION(PTE$V_PROT))) 	 !  KERNEL READ ONLY 
 	,(KW,(%B'0010'^$BITPOSITION(PTE$V_PROT))) 	 !  KERNEL WRITE 
 	,(ER,(%B'0111'^$BITPOSITION(PTE$V_PROT))) 	 !  EXEC READ ONLY 
 	,(EW,(%B'0101'^$BITPOSITION(PTE$V_PROT))) 	 !  EXEC WRITE 
 	,(SR,(%B'1011'^$BITPOSITION(PTE$V_PROT))) 	 !  SUPER READ ONLY 
 	,(SW,(%B'1000'^$BITPOSITION(PTE$V_PROT))) 	 !  SUPER WRITE 
 	,(UR,(%B'1111'^$BITPOSITION(PTE$V_PROT))) 	 !  USER READ ONLY 
 	,(UW,(%B'0100'^$BITPOSITION(PTE$V_PROT))) 	 !  USER WRITE 
 	); 
 LITERAL	
 $EQULST (PTE$C_,GBL,0,1  
 	,(ERKW,(%B'0110'^$BITPOSITION(PTE$V_PROT))) 	  	! EXEC READ KERNEL WRITE 
 	,(SRKW,(%B'1010'^$BITPOSITION(PTE$V_PROT))) 	  	! SUPER READ KERNEL WRITE 
 	,(SREW,(%B'1001'^$BITPOSITION(PTE$V_PROT))) 	  	! SUPER READ EXEC WRITE 
 	,(URKW,(%B'1110'^$BITPOSITION(PTE$V_PROT))) 	  	! USER READ KERNEL WRITE 
 	,(UREW,(%B'1101'^$BITPOSITION(PTE$V_PROT))) 	  	! USER READ EXEC WRITE 
 	,(URSW,(%B'1100'^$BITPOSITION(PTE$V_PROT))) 	  	! USER READ SUPER WRITE 
 	); 
 !+ 
 ! OWNER FIELD DEFINITIONS 
 !_ 
 LITERAL	
 $EQULST (PTE$C_,GBL,0,1  
 	,(KOWN,(0^$BITPOSITION(PTE$V_OWN))) 		! KERNEL OWNER 
 	,(EOWN,(1^$BITPOSITION(PTE$V_OWN))) 		! EXEC OWNER 
 	,(SOWN,(2^$BITPOSITION(PTE$V_OWN))) 		! SUPER OWNER 
 	,(UOWN,(3^$BITPOSITION(PTE$V_OWN))) 	 ! USER OWNER 
 	); 

  
  
 !+ 
 ! POINTER CONTROL BLOCK 
 !	THIS IS A STRUCTURE OF POINTERS TO OTHER DYNAMIC STRUCTURES 
 !	OF LIKE KIND.  TYPICALLY THE STRUCTURES POINTED TO ARE KNOWN 
 !	BY THEIR LONG WORD INDEX INTO THE TABLE AND TO FACILITATE FETCHING 
 !	THESE, IT IS CONVENTIONAL TO KEEP A POINTER TO THE BASE OF THE 
 !	STRUCTURE POINTERS RATHER THAN (OR IN ADDITION TO) THE POINTER 
 !	TO THE FRONT OF THE POINTER CONTROL BLOCK.  THE NUMBER OF POINTERS 
 !	IN THE ARRAY PRECEEDS THE FIRST POINTER IN THE ARRAY. 
 !- 
  
 !...$PTRDEF	
  
 MACRO		PTR$W_SIZE	= 8,0,16,0%; 			!SIZE OF DYNAMIC CONTROL BLOCK 
 MACRO		PTR$B_TYPE	= 10,0,8,0%; 			!TYPE OF DYNAMIC CONTROL BLOCK 
 MACRO		PTR$B_PTRTYPE	= 11,0,8,0%; 		!TYPE OF CONTROL BLOCK POINTED TO 
 MACRO		PTR$L_PTRCNT	= 12,0,32,0%; 		!COUNT OF ENTRIES 
 MACRO		PTR$L_PTR0	= 16,0,32,0%; 			!PTR NUMBER 0 
  

  
 !+ 
 ! RESTART PARAMETER BLOCK DEFINITIONS 
 !- 
 !...$RPBDEF	
 MACRO		RPB$L_BASE	= 0,0,32,0%; 			!PHYSICAL BASE ADDRESS OF 64K BLOCK 
 MACRO		RPB$L_RESTART	= 4,0,32,0%; 		!POINTER TO RESTART ROUTINE (PHYSICAL) 
 MACRO		RPB$L_CHKSUM	= 8,0,32,0%; 		!CHECKSUM OF BYTES 0-7F OF RESTART ROUTINE 
 MACRO		RPB$L_RSTRTFLG	= 12,0,32,0%; 		!RESTART IN PROGRESS FLAG 
 MACRO		RPB$L_HALTPC	= 16,0,32,0%; 		!PC AT RESTART/HALT 
 MACRO		RPB$L_HALTPSL	= 20,0,32,0%; 		!PSL AT RESTART/HALT 
 MACRO		RPB$L_HALTCODE	= 24,0,32,0%; 		!CODE DESCRIBING RESTART REASON 
 MACRO		RPB$L_BOOTR0	= 28,0,32,0%; 		!SAVED BOOT PARAMETER R0 
 MACRO		RPB$L_BOOTR1	= 32,0,32,0%; 		!SAVED BOOT PARAMETER R1 
 MACRO		RPB$L_BOOTR2	= 36,0,32,0%; 		!SAVED BOTT PARAMETER R2 
 MACRO		RPB$L_BOOTR3	= 40,0,32,0%; 		!SAVED BOOT PARAMETER R3 
 MACRO		RPB$L_BOOTR4	= 44,0,32,0%; 		!SAVED BOOT PARAMETER R4 
 MACRO		RPB$L_BOOTR5	= 48,0,32,0%; 		!SAVED BOOT PARAMETER R5 
 						!DEFINE BOOT OPTION BITS 
 MACRO		RPB$V_CONV	= 48,0,1,0%; 			! CONVERSATIONAL BOOTSTRAP 
 MACRO		RPB$V_DEBUG	= 48,1,1,0%; 			! KEEP DEBUGGER CODE 
 MACRO		RPB$V_INIBPT	= 48,2,1,0%; 			! INITIAL BREAKPOINT 
 MACRO		RPB$V_BBLOCK	= 48,3,1,0%; 			! TRANSFER TO BOOTBLOCK 
 MACRO		RPB$V_DIAG	= 48,4,1,0%; 			! BOOT DIAGNOSTIC FILE 
 MACRO		RPB$V_BOOBPT	= 48,5,1,0%; 			! BOOTSTRAP BREAKPOINT 
 MACRO		RPB$V_HEADER	= 48,6,1,0%; 			! USE START ADDRESS FROM IMAGE HEADER 
 MACRO		RPB$V_NOTEST	= 48,7,1,0%; 			! FLAG TO INHIBIT MEMORY TESTING 
 MACRO		RPB$V_SOLICT	= 48,8,1,0%; 			! SOLICIT BOOT FILE NAME 
 MACRO		RPB$V_HALT	= 48,9,1,0%; 			! HALT BEFORE TRANSFER 
 MACRO		RPB$V_NOPFND	= 48,10,1,0%; 			! INHIBIT PFN DELETION 
 					! 
 MACRO		RPB$L_IOVEC	= 52,0,32,0%; 			!ADDRESS OF BOOTSTRAP QIO VECTOR 
 MACRO		RPB$L_IOVECSZ	= 56,0,32,0%; 		!SIZE OF BOOT QIO ROUTINE 
 MACRO		RPB$L_FILLBN	= 60,0,32,0%; 		!LOGICAL BLOCK NUMBER OF BOOT FILE 
 MACRO		RPB$L_FILSIZ	= 64,0,32,0%; 		!SIZE OF BOOT FILE 
 MACRO		RPB$Q_PFNMAP	= 68,0,0,0%; 		!DESCRIPTOR FOR PFN BITMAP 
 LITERAL	RPB$S_PFNMAP	= 8; 
 MACRO		RPB$L_PFNCNT	= 76,0,32,0%; 		!COUNT OF PHYSICAL PAGES 
 MACRO		RPB$L_SVASPT	= 80,0,32,0%; 		!SYSTEM VIRTUAL ADDRESS OF SPT 
 MACRO		RPB$L_CSRPHY	= 84,0,32,0%; 		!UBA DEVICE CSR ADDRESS (PHYSICAL) 
 MACRO		RPB$L_CSRVIR	= 88,0,32,0%; 		!UBA DEVICE CSR ADDRESS (VIRTUAL) 
 MACRO		RPB$L_ADPPHY	= 92,0,32,0%; 		!ADAPTER CONFIGURATION REGISTER (PHYSICAL) 
 MACRO		RPB$L_ADPVIR	= 96,0,32,0%; 		!ADAPTER CONFIGURATION REGISTER (VIRTUAL) 
 MACRO		RPB$W_UNIT	= 100,0,16,0%; 			!UNIT NUMBER 
 MACRO		RPB$B_DEVTYP	= 102,0,8,0%; 		!DEVICE TYPE CODE 
 MACRO		RPB$B_SLAVE	= 103,0,8,0%; 			!SLAVE UNIT NUMBER 
 MACRO		RPB$T_FILE	= 104,0,0,0%; 		!BOOT FILE NAME (ASCIC) 
 LITERAL	RPB$S_FILE	= 40; 
 MACRO		RPB$B_CONFREG	= 144,0,0,0%; 		!ARRAY OF ADAPTER TYPES 
 LITERAL	RPB$S_CONFREG	= 16; 
 MACRO		RPB$B_HDRPGCNT	= 160,0,8,0%; 		!COUNT OF HEADER PAGES 
 MACRO		RPB$L_ISP	= 164,0,32,0%; 			!PWR FAIL INTERRUPT STACK POINTER 
 MACRO		RPB$L_PCBB	= 168,0,32,0%; 			!PROCESS CONTROL BLOCK BASE 
 MACRO		RPB$L_SBR	= 172,0,32,0%; 			!SYSTEM BASE REGISTER 
 MACRO		RPB$L_SCBB	= 176,0,32,0%; 			!SYSTEM CONTROL BLOCK BASE 
 MACRO		RPB$L_SISR	= 180,0,32,0%; 			!SOFTWARE INTERRUPT SUMMARY REGISTER 
 MACRO		RPB$L_SLR	= 184,0,32,0%; 			!SYSTEM LENGTH REGISTER 
 LITERAL	RPB$C_LENGTH	= 188; 
 LITERAL	RPB$K_LENGTH	= 188; 				!LENGTH OF RPB 

  
 !+ 
 ! RESOURCE NAME DEFINITIONS 
 !- 
 !...$RSNDEF	
  
 LITERAL	
 $EQULST (RSN$_,GBL,1,1 		!0 ORIGIN IN INCREMENTS OF 1 
 	,(ASTWAIT,) 	 		!WAIT FOR AST EVENT, CHANNEL INTERLOCK 
 	,(MAILBOX,) 				!MAILBOX SPACE 
 	,(NPDYNMEM,) 	  		!NON-PAGED DYNAMIC MEMORY 
 	,(PGFILE,) 				!PAGING FILE SPACE 
 	,(PGDYNMEM,) 			!PAGED DYNAMIC MEMORY 
 	,(BRKTHRU,) 				!TERMINAL BROADCAST 
 	,(IACLOCK,) 				!IMAGE ACTIVATION INTERLOCK 
 	); 

  
 !+ 
 ! RVT - RELATIVE VOLUME TABLE 
 ! 
 ! A RELATIVE VOLUME MAPPING TABLE IS REQUIRED FOR EVERY MULTIVOLUME 
 ! STRUCTURE THAT IS MOUNTED IN A SYSTEM. 
 !- 
  
 !...$RVTDEF	
  
 MACRO		RVT$W_SIZE	= 8,0,16,0%; 			!SIZE OF RVT IN BYTES 
 MACRO		RVT$B_TYPE	= 10,0,8,0%; 			!STRUCTURE TYPE OF RVT 
 MACRO		RVT$B_NVOLS	= 11,0,8,0%; 			!NUMBER OF VOLUMES IN SET 
 MACRO		RVT$L_UCBLST	= 12,0,32,0%; 		!ADDRESSES OF THE RESPECTIVE UCB'S 
 LITERAL	RVT$C_LENGTH	= 16; 
 LITERAL	RVT$K_LENGTH	= 16; 				!LENGTH OF STANDARD RVT 
  

  
  
 !+ 
 ! SWAP FILE TABLE 
 !- 
  
 !...$SFTDEF	
 ! 
 ! ***** L_VBN, L_WINDOW, AND B_PFC MUST BE THE SAME OFFSET VALUES AS THE 
 ! ***** EQUIVALENTLY NAMED OFFSETS IN $SECDEF 
 ! 
  
 MACRO		SFT$B_SLTCNT	= 0,0,8,0%; 		! COUNT OF AVAILABLE SLOT COUNTS 
 MACRO		SFT$B_IOSZ	= 1,0,8,0%; 			! MAXIMUM NUMBER OF PAGES FOR I/O OPS 
 MACRO		SFT$W_SLOTSZ	= 2,0,16,0%; 		! SIZE OF SLOT IN BLOCKS 
 MACRO		SFT$W_SIZE	= 8,0,16,0%; 			! SIZE OF DYNAMIC STRUCTURE 
 MACRO		SFT$B_TYPE	= 10,0,8,0%; 			! TYPE OF DYNAMIC STRUCTURE 
 MACRO		SFT$B_PFC	= 11,0,8,0%; 			! PAGE FAULT CLUSTER 
 MACRO		SFT$L_WINDOW	= 12,0,32,0%; 		! POINTER TO WINDOW CONTROL BLOCK 
 MACRO		SFT$L_VBN	= 16,0,32,0%; 			! BASE VBN 
 MACRO		SFT$L_BITMAP	= 20,0,0,0%; 		! ALLOCATION BITMAP 
 LITERAL	SFT$S_BITMAP	= 8; 
 LITERAL	SFT$C_LENGTH	= 32; 
 LITERAL	SFT$K_LENGTH	= 32; 				! SIZE OF SFT ENTRY 
  

  
  
 !+ 
 ! SYSGEN PARAMETER DEFINITIONS 
 !- 
  
 !...$SGNDEF	
  
 LITERAL	
 $EQULST (SGN$C_,GBL,0,1 			! 
 	,(BALSETCNT,24) 			! NUMBER OF PROCESSES IN BALANCE SET 
 	,(DFWSCNT,100) 			! DEFAULT WORKING SET COUNT 
 	,(DFWSQUOTA,120) 			! DEFAULT WORKING SET QUOTA 
 	,(GBLSECCNT,40) 			! GLOBAL SECTION COUNT 
 	,(MAXGPGCNT,2*1024) 		! GLOBAL PAGE COUNT (GPT SIZE) 
 	,(MAXPAGCNT,128*32*4) 		! PHYSICAL MEMORY SIZE IN PAGES 
 	,(MAXPGFL,4096) 			! DEFAULT MAXIMUM PAGING FILE 
 	,(MAXPSTCNT,5) 			! MAX NUMBER OF PST ENTRIES 
 	,(MAXVPGCNT,8*8*128) 		! MAX PROCESS VIRTUAL SIZE (PAGES) 
 	,(MAXWSCNT,1024) 			! MAX WORKING SET SIZE (PAGES) 
 	,(MINWSCNT,10) 			! MIN WORKING SET SIZE (PAGES) 
 	,(NPAGEDYN,52*512) 			! NON-PAGED DYNAMIC POOL SIZE 
 	,(NPROCS,64) 			! MAX NUMBER OF PROCESSES 
 	,(PAGEDYN,2*16*512) 		! PAGED DYNAMIC POOL SIZE IN BYTES 
 	,(PHYPAGCNT,32*128) 		! ACTUAL PHYSICAL PAGE COUNT 
 	,(SFTMAX,3) 			! SWAP FILE TABLE ENTRIES 
 	,(SYSDWSCNT,40) 			! DEFAULT SYSTEM WORKING SET COUNT 
 	,(SYSVECPGS,3) 			! NO. OF PAGES OF SYSTEM SERVICE VECTORS 
 	,(SYSWSCNT,96) 			! SYSTEM WORKING SET COUNT 
 	); 

  
 !+ 
 ! SCHEDULING STATES 
 !- 
  
 !...$STATEDEF	
  
 LITERAL	
 $EQULST (SCH$C_,GBL,1,1 		! DEFINITIONS START AT 1 
 	,(COLPG,) 	  			!COLLIDED PAGE WAIT 
 	,(MWAIT,) 	  			!MUTEX AND MISCELLANEOUS RESOURCE WAIT 
 	,(CEF,) 	  			!COMMON EVENT FLAG WAIT STATE 
 	,(PFW,) 	  			!PAGE FAULT WAIT 
 	,(LEF,) 	  			!LOCAL EVENT FLAG WAIT 
 	,(LEFO,) 	  			!LOCAL EVENT FLAG WAIT OUT OF BALANCE SET 
 	,(HIB,) 	  			!HIBERNATE WAIT 
 	,(HIBO,) 	  			!HIBERNATE WAIT OUT OF BALANCE SET 
 	,(SUSP,) 	  			!SUSPENDED 
 	,(SUSPO,) 				!SUSPENDED OUT OF THE BALANCE SET 
 	,(FPG,) 	  			!FREEPAGE WAIT 
 	,(COM,) 	  			!COMPUTE, IN BALANCE SET STATE 
 	,(COMO,) 	  			!COMPUTE, OUT OF BALANCE SET STATE 
 	,(CUR,) 	  			!CURRENT PROCESS STATE 
 	); 

  
 !+ 
 ! TQE - TIME QUEUE ENTRY 
 ! 
 ! TIME QUEUE ENTRIES ARE UTILIZED TO SET TIMERS, WAKE UP PROCESSES, AND 
 ! FOR INTERNAL SYSTEM SUBROUTINES. 
 !- 
  
 !...$TQEDEF	
  
 MACRO		TQE$L_TQFL	= 0,0,32,0%; 			!TIME QUEUE FORWARD LINK 
 MACRO		TQE$L_TQBL	= 4,0,32,0%; 			!TIME QUEUE BACKWARD LINK 
 MACRO		TQE$W_SIZE	= 8,0,16,0%; 			!SIZE OF TQE IN BYTES 
 MACRO		TQE$B_TYPE	= 10,0,8,0%; 			!STRUCTURE TYPE FOR TQE 
 MACRO		TQE$B_RQTYPE	= 11,0,8,0%; 		!TIME QUEUE ENTRY TYPE 
 						! TQE$B_RQTYPE BIT DEFINITIONS 
 							! STARTING OFFSET 
 MACRO		TQE$V_REPEAT	= 11,2,1,0%; 		! REPEAT REQUEST (1=YES) 
 LITERAL	TQE$M_REPEAT	= 1^3 - 1^2; 
 					! END OF BIT DEFINITIONS 
 MACRO		TQE$L_PID	= 12,0,32,0%; 			!TIMER OR WAKE REQUEST PROCESS ID 
 MACRO		TQE$L_FPC	= 12,0,32,0%; 			!TIMER SUBROUTINE ADDRESS 
 MACRO		TQE$L_AST	= 16,0,32,0%; 			!ADDRESS OF AST ROUTINE 
 MACRO		TQE$L_FR3	= 16,0,32,0%; 			!TIMER SUBROUTINE SAVED R3 
 MACRO		TQE$L_ASTPRM	= 20,0,32,0%; 		!AST PARAMETER 
 MACRO		TQE$L_FR4	= 20,0,32,0%; 			!TIMER SUBROUTINE SAVED R4 
 MACRO		TQE$Q_TIME	= 24,0,0,0%; 			!ABSOLUTE EXPIRATION TIME 
 LITERAL	TQE$S_TIME	= 8; 
 MACRO		TQE$Q_DELTA	= 32,0,0,0%; 			!DELTA REPEAT TIME 
 LITERAL	TQE$S_DELTA	= 8; 
 MACRO		TQE$B_RMOD	= 40,0,8,0%; 			!ACCESS MODE OF REQUEST 
 MACRO		TQE$B_EFN	= 41,0,8,0%; 			!EVENT FLAG NUMBER AND EVENT GROUP 
 MACRO		TQE$L_RQPID	= 44,0,32,0%; 			!REQUESTER PROCESS ID 
 LITERAL	TQE$C_LENGTH	= 48; 
 LITERAL	TQE$K_LENGTH	= 48; 				!LENGTH OF STANDARD TQE 
  
 ! 
 ! TIME QUEUE ENTRY REQUEST TYPE DEFINITIONS 
 ! 
  
 LITERAL	TQE$C_TMSNGL	= 0; 			!TIMER ENTRY SINGLE SHOT REQUEST 
 LITERAL	TQE$C_SSREPT	= 1+TQE$M_REPEAT; 		!SYSTEM SUBROUTINE REPEAT REQUEST 
 LITERAL	TQE$C_SSSNGL	= 1; 			!SYSTEM SUBROUTINE SINGLE SHOT REQUEST 
 LITERAL	TQE$C_WKREPT	= 2+TQE$M_REPEAT; 		!WAKE ENTRY REPEAT REQUEST 
 LITERAL	TQE$C_WKSNGL	= 2; 			!WAKE ENTRY SINGLE SHOT REQUEST 
  

  
  
 !++ 
 ! TERMINAL DRIVER SYMBOLS 
 !-- 
 !...$TRMDEF			! 
 							! 
 MACRO		TRM$V_XON	= 0,0,1,0%;  
 LITERAL	TRM$M_XON	= 1^1 - 1^0; 
 MACRO		TRM$V_XOFF	= 0,1,1,0%;  
 LITERAL	TRM$M_XOFF	= 1^2 - 1^1; 
 MACRO		TRM$V_CTRLS	= 0,2,1,0%;  
 LITERAL	TRM$M_CTRLS	= 1^3 - 1^2; 
 MACRO		TRM$V_FILL	= 0,3,1,0%;  
 LITERAL	TRM$M_FILL	= 1^4 - 1^3; 
 MACRO		TRM$V_CURSOROV	= 0,4,1,0%;  
 LITERAL	TRM$M_CURSOROV	= 1^5 - 1^4; 
 MACRO		TRM$V_SENDLF	= 0,5,1,0%;  
 LITERAL	TRM$M_SENDLF	= 1^6 - 1^5; 
 MACRO		TRM$V_MULTIECHO	= 0,6,1,0%;  
 LITERAL	TRM$M_MULTIECHO	= 1^7 - 1^6; 
 MACRO		TRM$V_BRKTHRU	= 0,7,1,0%;  
 LITERAL	TRM$M_BRKTHRU	= 1^8 - 1^7; 
 MACRO		TRM$V_WRITE	= 0,8,1,0%;  
 LITERAL	TRM$M_WRITE	= 1^9 - 1^8; 
 MACRO		TRM$V_EOL	= 0,9,1,0%;  
 LITERAL	TRM$M_EOL	= 1^10 - 1^9; 
 MACRO		TRM$V_CTRLR	= 0,10,1,0%;  
 LITERAL	TRM$M_CTRLR	= 1^11 - 1^10; 
 MACRO		TRM$V_READ	= 0,11,1,0%;  
 LITERAL	TRM$M_READ	= 1^12 - 1^11; 
 MACRO		TRM$V_CTRLO	= 0,12,1,0%;  
 LITERAL	TRM$M_CTRLO	= 1^13 - 1^12; 
 MACRO		TRM$V_DELETE	= 0,13,1,0%;  
 LITERAL	TRM$M_DELETE	= 1^14 - 1^13; 
 			
 			 
 MACRO		TRM$V_A	= 0,0,13,0%;  
 LITERAL	TRM$M_A	= 1^13 - 1^0; 
 MACRO		TRM$V_WRITEALL	= 0,13,1,0%;  
 LITERAL	TRM$M_WRITEALL	= 1^14 - 1^13; 
 MACRO		TRM$V_PASSALL	= 0,14,1,0%;  
 LITERAL	TRM$M_PASSALL	= 1^15 - 1^14; 
 MACRO		TRM$V_NOECHO	= 0,15,1,0%;  
 LITERAL	TRM$M_NOECHO	= 1^16 - 1^15; 
 MACRO		TRM$V_TIMED	= 0,16,1,0%;  
 LITERAL	TRM$M_TIMED	= 1^17 - 1^16; 
 MACRO		TRM$V_PROMPT	= 0,17,1,0%;  
 LITERAL	TRM$M_PROMPT	= 1^18 - 1^17; 
 MACRO		TRM$V_NOFILTER	= 0,18,1,0%;  
 LITERAL	TRM$M_NOFILTER	= 1^19 - 1^18; 
 MACRO		TRM$V_MBDSABL	= 0,19,1,0%;  
 LITERAL	TRM$M_MBDSABL	= 1^20 - 1^19; 
 MACRO		TRM$V_NOTIFIED	= 0,20,1,0%;  
 LITERAL	TRM$M_NOTIFIED	= 1^21 - 1^20; 
 MACRO		TRM$V_ESCAPE	= 0,21,1,0%;  
 LITERAL	TRM$M_ESCAPE	= 1^22 - 1^21; 
 MACRO		TRM$V_BADESCAPE	= 0,22,1,0%;  
 LITERAL	TRM$M_BADESCAPE	= 1^23 - 1^22; 
 MACRO		TRM$V_ATNEWLINE	= 0,23,1,0%;  
 LITERAL	TRM$M_ATNEWLINE	= 1^24 - 1^23; 
 MACRO		TRM$V_TYPAHDFUL	= 0,24,1,0%;  
 LITERAL	TRM$M_TYPAHDFUL	= 1^25 - 1^24; 
 			
 LITERAL	
 $EQULST (TRMC$_,GBL,0,1 	 
 	,(CTRLC,3) 		 
 	,(BELL,7) 		 
 	,(BS,8) 		 
 	,(TAB,9) 		 
 	,(LF,10) 		 
 	,(VT,11) 		 
 	,(FF,12) 		 
 	,(CR,13) 		 
 	,(CTRLO,15) 	 
 	,(CTRLQ,17) 	 
 	,(XON,17) 		 
 	,(CTRLR,18) 	 
 	,(CTRLS,19) 	 
 	,(XOFF,19) 		 
 	,(CTRLU,21) 	 
 	,(CTRLX,24) 	 
 	,(CTRLY,25) 	 
 	,(CTRLZ,26) 	 
 	,(ESCAPE,27) 	 
 	,(BLANK,32) 	 
 	,(DOLLAR,36) 	 
 	,(PLUS,43) 		 
 	,(ZERO,48) 		 
 	,(ONE,49) 		 
 	,(SCRIPT,96) 	 
 	,(LOWA,97) 		 
 	,(LOWZ,123) 	 
 	,(DELETE,127) 	 
 	,(NL,128) 		 
 	); 
 LITERAL	
 $EQULST (TRM$C_,GBL,0,1  
 	,(TYPEAHEAD,72) 	 
 	,(HIGHIPL,22) 	 
 	); 
 			 
 MACRO		TRM$V_FILLCNT	= 0,0,1,0%;  
 					 
 MACRO		TRM$V_INTERFACE	= 0,4,1,0%;  
 			
 			 
 					 
 MACRO		TRM$V_SPECIAL	= 0,4,1,0%;  
 LITERAL	TRM$M_SPECIAL	= 1^5 - 1^4; 
 MACRO		TRM$V_CTRLSEQ	= 0,5,1,0%;  
 LITERAL	TRM$M_CTRLSEQ	= 1^6 - 1^5; 
 MACRO		TRM$V_LOWER	= 0,6,1,0%;  
 LITERAL	TRM$M_LOWER	= 1^7 - 1^6; 
 MACRO		TRM$V_CTRL2SEQ	= 0,7,1,0%;  
 LITERAL	TRM$M_CTRL2SEQ	= 1^8 - 1^7; 
 			

  
 !++ 
 ! TERMINAL DRIVER SYMBOLS 
 !-- 
 !...$TTYDEF			! 
 						! 
 MACRO		TTY$L_RB_NXT	= 0,0,32,0%; 		! READ BUFFER - NEXT CHARACTER 
 MACRO		TTY$L_RB_UVA	= 4,0,32,0%; 		! READ BUFFER - USER VIRTUAL ADDR 
 MACRO		TTY$W_RB_SIZE	= 8,0,16,0%; 		! READ BUFFER - BLOCK SIZE 
 MACRO		TTY$W_RB_ORGHOR	= 12,0,16,0%; 		! READ BUFFER - ORIGIONAL HORIZON 
 MACRO		TTY$W_RB_TIMOS	= 14,0,16,0%; 		! READ BUFFER - TIMEOUT SECONDS 
 MACRO		TTY$L_RB_DATA	= 16,0,32,0%; 			! READ BUFFER  - DATA 
 			 
 MACRO		TTY$L_WB_NXT	= 0,0,32,0%; 		! WRITE BUFFER - NEXT CHARACTER 
 MACRO		TTY$L_WB_END	= 4,0,32,0%; 		! WRITE BUFFER - END CHARACTER 
 MACRO		TTY$W_WB_SIZE	= 8,0,16,0%; 		! WRITE BUFFER - SIZE 
 MACRO		TTY$L_WB_DATA	= 12,0,32,0%; 		! WRITE BUFFER - DATA 
 			 
 MACRO		TTY$L_TA_PUT	= 0,0,32,0%; 		! TYPEAHEAD BUFFER - PUT POINTER 
 MACRO		TTY$L_TA_GET	= 4,0,32,0%; 		! TYPEAHEAD BUFFER - GET POINTER 
 MACRO		TTY$W_TA_SIZE	= 8,0,16,0%; 		! TYPEAHEAD BUFFER - BLOCK SIZE 
 MACRO		TTY$B_TA_TYPE	= 10,0,8,0%; 		! 
 MACRO		TTY$L_TA_END	= 12,0,32,0%; 		! TYPEAHEAD BUFFER - END ADDRESS 
 MACRO		TTY$L_TA_DATA	= 16,0,32,0%; 		! TYPEAHEAD BUFFER - DATA START 
 			 
 MACRO		TTY$Q_BD_LINK	= 0,0,0,0%; 		! BROADCAST MESSAGE BLOCK - LINK 
 LITERAL	TTY$S_BD_LINK	= 8; 
 MACRO		TTY$W_BD_SIZE	= 8,0,16,0%; 		! BROADCAST MESSAGE BLOCK - SIZE 
 MACRO		TTY$B_BD_TYPE	= 10,0,8,0%; 		! BROADCAST MESSAGE BLOCK - TYPE 
 MACRO		TTY$L_BD_FORK	= 12,0,32,0%; 		! BROADCAST MESSAGE BLOCK - FORK BLOCK 
 MACRO		TTY$L_BD_UCB	= 16,0,32,0%; 		! BROADCAST MESSAGE BLOCK - TARGET UCB 
 MACRO		TTY$B_BD_WHO	= 20,0,8,0%; 		! BROADCAST MESSAGE BLOCK - TARGET DESC 
 MACRO		TTY$B_BD_CNT	= 21,0,8,0%; 		! BROADCAST MESSAGE BLOCK - MESSAGE SIZE 
 MACRO		TTY$B_BD_REFC	= 22,0,8,0%; 		! BROADCAST MESSAGE BLOCK - REF COUNT 
 MACRO		TTY$B_BD_IPL	= 23,0,8,0%; 		! BROADCAST MESSAGE BLOCK - FORK IPL 
 MACRO		TTY$L_BD_DATA	= 24,0,0,0%; 		! BROADCAST MESSAGE BLOCK - DATA 
 LITERAL	TTY$S_BD_DATA	= 16; 
 MACRO		TTY$L_BD_MIN	= 40,0,32,0%; 		! MINIMUM MESSAGE 
 							! 
 MACRO		TTY$V_ST_XON	= 40,0,1,0%;  
 LITERAL	TTY$M_ST_XON	= 1^1 - 1^0; 
 MACRO		TTY$V_ST_XOFF	= 40,1,1,0%;  
 LITERAL	TTY$M_ST_XOFF	= 1^2 - 1^1; 
 MACRO		TTY$V_ST_CTRLS	= 40,2,1,0%;  
 LITERAL	TTY$M_ST_CTRLS	= 1^3 - 1^2; 
 MACRO		TTY$V_ST_FILL	= 40,3,1,0%;  
 LITERAL	TTY$M_ST_FILL	= 1^4 - 1^3; 
 MACRO		TTY$V_ST_CURSOR	= 40,4,1,0%;  
 LITERAL	TTY$M_ST_CURSOR	= 1^5 - 1^4; 
 MACRO		TTY$V_ST_SENDLF	= 40,5,1,0%;  
 LITERAL	TTY$M_ST_SENDLF	= 1^6 - 1^5; 
 MACRO		TTY$V_ST_MULTI	= 40,6,1,0%;  
 LITERAL	TTY$M_ST_MULTI	= 1^7 - 1^6; 
 MACRO		TTY$V_ST_BRDCST	= 40,7,1,0%;  
 LITERAL	TTY$M_ST_BRDCST	= 1^8 - 1^7; 
 MACRO		TTY$V_ST_WRITE	= 40,8,1,0%;  
 LITERAL	TTY$M_ST_WRITE	= 1^9 - 1^8; 
 MACRO		TTY$V_ST_EOL	= 40,9,1,0%;  
 LITERAL	TTY$M_ST_EOL	= 1^10 - 1^9; 
 MACRO		TTY$V_ST_CTRLR	= 40,10,1,0%;  
 LITERAL	TTY$M_ST_CTRLR	= 1^11 - 1^10; 
 MACRO		TTY$V_ST_READ	= 40,11,1,0%;  
 LITERAL	TTY$M_ST_READ	= 1^12 - 1^11; 
 MACRO		TTY$V_ST_CTRLO	= 40,12,1,0%;  
 LITERAL	TTY$M_ST_CTRLO	= 1^13 - 1^12; 
 MACRO		TTY$V_ST_DEL	= 40,13,1,0%;  
 LITERAL	TTY$M_ST_DEL	= 1^14 - 1^13; 
 			
 			 
 MACRO		TTY$V_A	= 40,0,14,0%;  
 LITERAL	TTY$M_A	= 1^14 - 1^0; 
 MACRO		TTY$V_ST_PASALL	= 40,14,1,0%;  
 LITERAL	TTY$M_ST_PASALL	= 1^15 - 1^14; 
 MACRO		TTY$V_ST_NOECHO	= 40,15,1,0%;  
 LITERAL	TTY$M_ST_NOECHO	= 1^16 - 1^15; 
 MACRO		TTY$V_ST_WRTALL	= 40,16,1,0%;  
 LITERAL	TTY$M_ST_WRTALL	= 1^17 - 1^16; 
 MACRO		TTY$V_ST_PROMPT	= 40,17,1,0%;  
 LITERAL	TTY$M_ST_PROMPT	= 1^18 - 1^17; 
 MACRO		TTY$V_ST_NOFLTR	= 40,18,1,0%;  
 LITERAL	TTY$M_ST_NOFLTR	= 1^19 - 1^18; 
 MACRO		TTY$V_ST_ESC	= 40,19,1,0%;  
 LITERAL	TTY$M_ST_ESC	= 1^20 - 1^19; 
 MACRO		TTY$V_ST_BADESC	= 40,20,1,0%;  
 LITERAL	TTY$M_ST_BADESC	= 1^21 - 1^20; 
 MACRO		TTY$V_ST_NL	= 40,21,1,0%;  
 LITERAL	TTY$M_ST_NL	= 1^22 - 1^21; 
 MACRO		TTY$V_ST_TYPFUL	= 40,22,1,0%;  
 LITERAL	TTY$M_ST_TYPFUL	= 1^23 - 1^22; 
 MACRO		TTY$V_ST_SKIPLF	= 40,23,1,0%;  
 LITERAL	TTY$M_ST_SKIPLF	= 1^24 - 1^23; 
 MACRO		TTY$V_ST_GETAHD	= 40,24,1,0%;  
 LITERAL	TTY$M_ST_GETAHD	= 1^25 - 1^24; 
 MACRO		TTY$V_ST_UNSOL	= 40,25,1,0%;  
 LITERAL	TTY$M_ST_UNSOL	= 1^26 - 1^25; 
 MACRO		TTY$V_ST_ESC_O	= 40,26,1,0%;  
 LITERAL	TTY$M_ST_ESC_O	= 1^27 - 1^26; 
 			
 LITERAL	
 $EQULST (TTY$C_,GBL,0,1  
 	,(CTRLC,3) 		 
 	,(BELL,7) 		 
 	,(BS,8) 		 
 	,(TAB,9) 		 
 	,(LF,10) 		 
 	,(VT,11) 		 
 	,(FF,12) 		 
 	,(CR,13) 		 
 	,(CTRLO,15) 	 
 	,(CTRLQ,17) 	 
 	,(XON,17) 		 
 	,(CTRLR,18) 	 
 	,(CTRLS,19) 	 
 	,(XOFF,19) 		 
 	,(CTRLU,21) 	 
 	,(CTRLX,24) 	 
 	,(CTRLY,25) 	 
 	,(CTRLZ,26) 	 
 	,(ESCAPE,27) 	 
 	,(BLANK,32) 	 
 	,(DOLLAR,36) 	 
 	,(PLUS,43) 		 
 	,(ZERO,48) 		 
 	,(ONE,49) 		 
 	,(SCRIPT,96) 	 
 	,(LOWA,97) 		 
 	,(LOWZ,123) 	 
 	,(DELETE,127) 	 
 	,(NL,128) 		 
 	); 
 LITERAL	
 $EQULST (TTY$C_,GBL,0,1  
 	,(TYPAHDSIZ,78) 	 
 	,(HIGHIPL,22) 	 
 	); 
 LITERAL	
 $EQULST (TTY$C_,GBL,0,1 				! DIALUP STATES 
 	,(DS_IDLE,0) 	 
 	,(DS_ACTIVE,1) 	 
 	,(DS_ATTN1,2) 	 
 	,(DS_ATTN3,9) 	 
 	,(DS_HANG,10) 	 
 	,(DS_RESET,11) 	 
 	); 
 LITERAL	
 $EQULST (TTY$C_,GBL,0,1 				! INTERNAL FUNCTION CODES 
 	,(FC_READ,) 	 
 	,(FC_WRITE,) 	 
 	,(FC_SETM,) 	 
 	,(FC_SETC,) 	 
 	,(FC_N_SET,) 	 
 	); 
 							! CHARACTER CHARACTERISTICS 
 					 
 MACRO		TTY$V_CH_SPEC	= 40,4,1,0%;  
 LITERAL	TTY$M_CH_SPEC	= 1^5 - 1^4; 
 MACRO		TTY$V_CH_CTRL	= 40,5,1,0%;  
 LITERAL	TTY$M_CH_CTRL	= 1^6 - 1^5; 
 MACRO		TTY$V_CH_LOWER	= 40,6,1,0%;  
 LITERAL	TTY$M_CH_LOWER	= 1^7 - 1^6; 
 MACRO		TTY$V_CH_CTRL2	= 40,7,1,0%;  
 LITERAL	TTY$M_CH_CTRL2	= 1^8 - 1^7; 
 			

  
 !++ 
 ! USER AUTHORIZATION FILE FORMAT 
 !-- 
  
 !...$UAFDEF	
 MACRO		UAF$T_USERNAME	= 0,0,0,0%; 		! USERNAME 
 LITERAL	UAF$S_USERNAME	= 12; 
 MACRO		UAF$L_PWD	= 12,0,32,0%; 			! HASHED PASSWORD 
 MACRO		UAF$T_ACCOUNT	= 16,0,0,0%; 		! ACCOUNT NAME 
 LITERAL	UAF$S_ACCOUNT	= 8; 
 MACRO		UAF$L_UIC	= 24,0,32,0%; 			! USER ID CODE 
 MACRO		UAF$W_MEM	= 24,0,16,0%; 			! MEMBER SUBFIELD 
 MACRO		UAF$W_GRP	= 26,0,16,0%; 			! GROUP SUBFIELD 
 MACRO		UAF$T_DEFDIR	= 28,0,0,0%; 		! DEFAULT DIRECTORY 
 LITERAL	UAF$S_DEFDIR	= 32; 
 MACRO		UAF$T_DEFDEV	= 60,0,0,0%; 		! DEFAULT DEVICE 
 LITERAL	UAF$S_DEFDEV	= 16; 
 MACRO		UAF$T_DEFCLI	= 76,0,0,0%; 		! DEFAULT COMMAND INTERPRETER 
 LITERAL	UAF$S_DEFCLI	= 8; 
 MACRO		UAF$L_CPUTIM	= 84,0,32,0%; 		! CPU TIME QUOTA 
 MACRO		UAF$Q_PRIV	= 88,0,0,0%; 			! PROCESS PRIVILEGE VECTOR 
 LITERAL	UAF$S_PRIV	= 8; 
 MACRO		UAF$W_BIOLM	= 96,0,16,0%; 			! BUFFERED I/O LIMIT 
 MACRO		UAF$W_BYTLM	= 98,0,16,0%; 			! BUFFERED I/O BYTE COUNT LIMIT 
 MACRO		UAF$W_DIOLM	= 100,0,16,0%; 			! DIRECT I/O LIMIT 
 MACRO		UAF$W_FILLM	= 102,0,16,0%; 			! OPEN FILE LIMIT 
 MACRO		UAF$W_TQCNT	= 104,0,16,0%; 			! TIMER QUEUE ENTRY LIMIT 
 MACRO		UAF$W_PRCCNT	= 106,0,16,0%; 		! SUBPROCESS CREATION LIMIT 
 MACRO		UAF$W_WSQUOTA	= 108,0,16,0%; 		! WORKING SET SIZE LIMIT 
 MACRO		UAF$W_DFWSCNT	= 110,0,16,0%; 		! DEFAULT WORKING SET SIZE 
 MACRO		UAF$W_ASTLM	= 112,0,16,0%; 			! AST QUEUE LIMIT 
 MACRO		UAF$W_PGFLQUOTA	= 114,0,16,0%; 		! PAGE FILE QUOTA 
 MACRO		UAF$T_OWNER	= 116,0,0,0%; 		! OWNER'S NAME 
 LITERAL	UAF$S_OWNER	= 20; 
 MACRO		UAF$W_FILPRT	= 136,0,16,0%; 		! DEFAULT FILE PROTECTION 
 MACRO		UAF$B_PRI	= 138,0,8,0%; 			! BASE PROCESS PRIORITY 
 MACRO		UAF$B_FLAGS	= 139,0,8,0%; 			! USER FLAGS BYTE 
 						!  BIT DEFINITIONS 
 MACRO		UAF$V_DISCTLY	= 139,0,1,0%; 			! DON'T ALLOW USER CONTROL-Y 
 MACRO		UAF$V_DEFCLI	= 139,1,1,0%; 			! ONLY ALLOW USER DEFAULT CLI 
 			
 MACRO		UAF$L_LEVEL	= 140,0,32,0%; 			! FOR RECORD AND FILE LEVEL INFO 
 MACRO		UAF$T_LGICMD	= 144,0,0,0%; 		! ALTERNATE LOGIN COMMAND FILE NAME 
 LITERAL	UAF$S_LGICMD	= 20; 
 LITERAL	UAF$C_LENGTH	= 184; 
 LITERAL	UAF$K_LENGTH	= 184; 	 

  
 !+ 
 ! UNIBUS ADAPTER REGISTER OFFSET DEFINITIONS 
 !- 
  
 !...$UBADEF	
  
 MACRO		UBA$L_CSR	= 0,0,32,0%; 			!CONFIGURATION STATUS REGISTER 
 						! CONFIGURATION STATUS REGISTER FIELD DEFINITIONS 
 MACRO		UBA$V_CSR_ADCOD	= 0,0,8,0%; 		! ADAPTER CODE FIELD 
 							! RESERVED BITS 
 MACRO		UBA$V_CSR_UBIC	= 0,16,1,0%; 		! UNIBUS INITIALIZATION COMPLETE 
 LITERAL	UBA$M_CSR_UBIC	= 1^17 - 1^16; 
 MACRO		UBA$V_CSR_UBPDN	= 0,17,1,0%; 		! UNIBUS POWER DOWN 
 LITERAL	UBA$M_CSR_UBPDN	= 1^18 - 1^17; 
 MACRO		UBA$V_CSR_UBIIP	= 0,18,1,0%; 		! UNIBUS INITIALIZATION IN PROGRESS 
 LITERAL	UBA$M_CSR_UBIIP	= 1^19 - 1^18; 
 							! RESERVED BITS 
 MACRO		UBA$V_CSR_OT	= 0,21,1,0%; 		! OVER TEMPERATURE 
 LITERAL	UBA$M_CSR_OT	= 1^22 - 1^21; 
 MACRO		UBA$V_CSR_PU	= 0,22,1,0%; 		! ADAPTER POWER UP 
 LITERAL	UBA$M_CSR_PU	= 1^23 - 1^22; 
 MACRO		UBA$V_CSR_PD	= 0,23,1,0%; 		! ADAPTER POWER DOWN 
 LITERAL	UBA$M_CSR_PD	= 1^24 - 1^23; 
 							! RESERVED BITS 
 MACRO		UBA$V_CSR_XMFLT	= 0,26,1,0%; 		! TRANSMITTER FAULT 
 LITERAL	UBA$M_CSR_XMFLT	= 1^27 - 1^26; 
 MACRO		UBA$V_CSR_MT	= 0,27,1,0%; 		! MULTIPLE TRANSMITTERS 
 LITERAL	UBA$M_CSR_MT	= 1^28 - 1^27; 
 MACRO		UBA$V_CSR_IS	= 0,28,1,0%; 		! INTERLOCK SEQUENCE FAULT 
 LITERAL	UBA$M_CSR_IS	= 1^29 - 1^28; 
 MACRO		UBA$V_CSR_URD	= 0,29,1,0%; 		! UNEXPECTED READ DATA 
 LITERAL	UBA$M_CSR_URD	= 1^30 - 1^29; 
 MACRO		UBA$V_CSR_WS	= 0,30,1,0%; 		! WRITE SEQUENCE DATA 
 LITERAL	UBA$M_CSR_WS	= 1^31 - 1^30; 
 MACRO		UBA$V_CSR_PE	= 0,31,1,0%; 		! SBI PARITY ERROR 
 LITERAL	UBA$M_CSR_PE	= 1^32 - 1^31; 
 					! 
 MACRO		UBA$L_CR	= 4,0,32,0%; 			!CONTROL REGISTER 
 						! CONTROL REGISTER FIELD DEFINITIONS 
 MACRO		UBA$V_CR_INIT	= 4,0,1,0%; 		! ADAPTER INITIALIZATION 
 LITERAL	UBA$M_CR_INIT	= 1^1 - 1^0; 
 MACRO		UBA$V_CR_UBPF	= 4,1,1,0%; 		! UNIBUS POWER FAIL 
 LITERAL	UBA$M_CR_UBPF	= 1^2 - 1^1; 
 MACRO		UBA$V_CR_CNFIE	= 4,2,1,0%; 		! CONFIGURATION INTERRUPT ENABLE 
 LITERAL	UBA$M_CR_CNFIE	= 1^3 - 1^2; 
 MACRO		UBA$V_CR_SUEFIE	= 4,3,1,0%; 		! SBI TO UNIBUS ERROR FIELD INTERRUPT ENABLE 
 LITERAL	UBA$M_CR_SUEFIE	= 1^4 - 1^3; 
 MACRO		UBA$V_CR_USEFIE	= 4,4,1,0%; 		! UNIBUS TO SBI ERROR FIELD INTERRUPT ENABLE 
 LITERAL	UBA$M_CR_USEFIE	= 1^5 - 1^4; 
 MACRO		UBA$V_CR_BRIE	= 4,5,1,0%; 		! BUS REQUEST INTERRUPT ENABLE 
 LITERAL	UBA$M_CR_BRIE	= 1^6 - 1^5; 
 MACRO		UBA$V_CR_IFSIE	= 4,6,1,0%; 		! INTERRUPT FIELD SWITCH INTERRUPT ENABLE 
 LITERAL	UBA$M_CR_IFSIE	= 1^7 - 1^6; 
 MACRO		UBA$V_CR_ARLVL	= 4,7,2,0%; 		! ADAPTER REQUEST LEVEL 
 LITERAL	UBA$M_CR_ARLVL	= 1^9 - 1^7; 
 							! RESERVED BITS 
 MACRO		UBA$V_CR_MRDSB	= 4,26,5,0%; 		! MAP REGISTER DISABLE 
 					! 
 MACRO		UBA$L_SR	= 8,0,32,0%; 			!STATUS REGISTER 
 						! STATUS REGISTER FIELD DEFINITIONS 
 MACRO		UBA$V_SR_SSYNC	= 8,0,1,0%; 		! UNIBUS SLAVE SYNC TIMEOUT 
 LITERAL	UBA$M_SR_SSYNC	= 1^1 - 1^0; 
 MACRO		UBA$V_SR_UBSTO	= 8,1,1,0%; 		! UNIBUS SELECT TIMEOUT 
 LITERAL	UBA$M_SR_UBSTO	= 1^2 - 1^1; 
 MACRO		UBA$V_SR_LER	= 8,2,1,0%; 		! LOST ERROR 
 LITERAL	UBA$M_SR_LER	= 1^3 - 1^2; 
 MACRO		UBA$V_SR_MRPE	= 8,3,1,0%; 		! MAP REGISTER PARITY ERROR 
 LITERAL	UBA$M_SR_MRPE	= 1^4 - 1^3; 
 MACRO		UBA$V_SR_IVMR	= 8,4,1,0%; 		! INVALID MAP REGISTER 
 LITERAL	UBA$M_SR_IVMR	= 1^5 - 1^4; 
 MACRO		UBA$V_SR_DPPE	= 8,5,1,0%; 		! DATAPATH PARITY ERROR 
 LITERAL	UBA$M_SR_DPPE	= 1^6 - 1^5; 
 MACRO		UBA$V_SR_CXTMO	= 8,6,1,0%; 		! COMMAND TRANSMISSION TIMEOUT 
 LITERAL	UBA$M_SR_CXTMO	= 1^7 - 1^6; 
 MACRO		UBA$V_SR_CXTER	= 8,7,1,0%; 		! COMMAND TRANSMISSION ERROR 
 LITERAL	UBA$M_SR_CXTER	= 1^8 - 1^7; 
 MACRO		UBA$V_SR_CRD	= 8,8,1,0%; 		! CORRECTED READ DATA 
 LITERAL	UBA$M_SR_CRD	= 1^9 - 1^8; 
 MACRO		UBA$V_SR_RDS	= 8,9,1,0%; 		! READ DATA SUBSTITUTE 
 LITERAL	UBA$M_SR_RDS	= 1^10 - 1^9; 
 MACRO		UBA$V_SR_RDTO	= 8,10,1,0%; 		! READ DATA TIMEOUT 
 LITERAL	UBA$M_SR_RDTO	= 1^11 - 1^10; 
 MACRO		UBA$V_SR_BRID	= 8,11,1,0%; 		! BUS REQUEST INTERRUPT DONE 
 LITERAL	UBA$M_SR_BRID	= 1^12 - 1^11; 
 							! RESERVED BITS 
 MACRO		UBA$V_SR_BRRVF	= 8,24,4,0%; 		! BUS REQUEST RECEIVE VECTOR FULL 
 MACRO		UBA$V_SR_BRSVF	= 8,28,1,0%; 		! BUS REQUEST SEND VECTOR FULL 
 LITERAL	UBA$M_SR_BRSVF	= 1^29 - 1^28; 
 MACRO		UBA$V_SR_RIE	= 8,29,1,0%; 		! REQUEST INTERRUPT ENABLED 
 LITERAL	UBA$M_SR_RIE	= 1^30 - 1^29; 
 MACRO		UBA$V_SR_UBIFS	= 8,30,1,0%; 		! UNIBUS INTERRUPT FIELD SWITCH 
 LITERAL	UBA$M_SR_UBIFS	= 1^31 - 1^30; 
 					! 
 MACRO		UBA$L_DCR	= 12,0,32,0%; 			!DIAGNOSTIC CONTROL REGISTER 
 MACRO		UBA$L_FMER	= 16,0,32,0%; 			!FAILED MAP ENTRY REGISTER 
 						! FAILED MAP ENTRY REGISTER FIELD DEFINITIONS 
 MACRO		UBA$V_FMER_MRN	= 16,0,9,0%; 		! FAILED MAP REGISTER NUMBER 
 					! 
 MACRO		UBA$L_FUBAR	= 20,0,32,0%; 			!FAILED UNIBUS ADDRESS REGISTER 
 						! FAILED UNIBUS ADDRESS REGISTER FIELD DEFINITIONS 
 MACRO		UBA$V_FUBAR_ADR	= 20,0,18,0%; 		! FAILED SBI TO UNIBUS ADDRESS 
 					! 
 MACRO		UBA$L_BRSVR	= 32,0,0,0%; 		!BUS REQUEST SEND VECTOR REGISTERS 
 LITERAL	UBA$S_BRSVR	= 16; 
 MACRO		UBA$L_BRRVR	= 48,0,0,0%; 		!BUS REQUEST RECEIVE VECTOR REGISTER 
 LITERAL	UBA$S_BRRVR	= 16; 
 						! BUS REQUEST RECEIVE VECTOR REGISTER FIELD DEFINITIONS 
 MACRO		UBA$V_BRRVR_IVA	= 48,0,16,0%; 		! INTERRUPT VECTOR ADDRESS 
 							! RESERVED BITS 
 MACRO		UBA$V_BRRVR_AIR	= 48,31,1,0%; 		! ADAPTER INTERRUPT REQUEST PENDING 
 LITERAL	UBA$M_BRRVR_AIR	= 1^32 - 1^31; 
 					! 
 MACRO		UBA$L_DPR	= 64,0,0,0%; 		!DATAPATH REGISTERS 
 LITERAL	UBA$S_DPR	= 64; 
 						! DATAPATH REGISTER FIELD DEFINITIONS 
 MACRO		UBA$V_DPR_ADDR	= 64,0,16,0%; 		! BUFFERED UNIBUS ADDRESS 
 MACRO		UBA$V_DPR_STATE	= 64,16,8,0%; 		! BUFFER STATE FLAGS 
 							! RESERVED BITS 
 MACRO		UBA$V_DPR_DPF	= 64,29,1,0%; 		! DATAPATH FUNCTION 
 LITERAL	UBA$M_DPR_DPF	= 1^30 - 1^29; 
 MACRO		UBA$V_DPR_XMTER	= 64,30,1,0%; 		! BUFFER TRANSFER ERROR 
 LITERAL	UBA$M_DPR_XMTER	= 1^31 - 1^30; 
 MACRO		UBA$V_DPR_BNE	= 64,31,1,0%; 		! BUFFER NOT EMPTY 
 LITERAL	UBA$M_DPR_BNE	= 1^32 - 1^31; 
 					! 
 MACRO		UBA$L_MAP	= 2048,0,0,0%; 		!MAP REGISTERS 
 LITERAL	UBA$S_MAP	= 1984; 
 						! MAP REGISTER FIELD DEFINITIONS 
 MACRO		UBA$V_MAP_ADDR	= 2048,0,21,0%; 		! SBI PAGE ADDRESS 
 MACRO		UBA$V_MAP_DPD	= 2048,21,4,0%; 		! DATAPATH DESIGNATOR 
 MACRO		UBA$V_MAP_BO	= 2048,25,1,0%; 		! BYTE OFFSET 
 LITERAL	UBA$M_MAP_BO	= 1^26 - 1^25; 
 							! RESERVED BITS 
 MACRO		UBA$V_MAP_VALID	= 2048,31,1,0%; 		! MAP REGISTER VALID 
 LITERAL	UBA$M_MAP_VALID	= 1^32 - 1^31; 
 					! 
  

  
 !+ 
 ! UCB - UNIT CONTROL BLOCK 
 ! 
 ! THERE IS ONE UCB FOR EACH DEVICE UNIT IN A SYSTEM. 
 !- 
  
 !...$UCBDEF	
  
 						!MARK 0 POSITION 
 MACRO		UCB$L_FQFL	= 0,0,32,0%; 			!FORK QUEUE FORWARD LINK 
 MACRO		UCB$L_RQFL	= 0,0,32,0%; 			!NET RCV QUEUE FORWARD LINK 
 MACRO		UCB$L_FQBL	= 4,0,32,0%; 			!FORK QUEUE BACKWARD LINK 
 MACRO		UCB$L_RQBL	= 4,0,32,0%; 			!NET RCV QUEUE BACKWARD LINK 
 MACRO		UCB$W_SIZE	= 8,0,16,0%; 			!SIZE OF UCB IN BYTES 
 MACRO		UCB$B_TYPE	= 10,0,8,0%; 			!STRUCTURE TYPE FOR UCB 
 MACRO		UCB$B_FIPL	= 11,0,8,0%; 			!FORK INTERRUPT PRIORITY LEVEL 
 MACRO		UCB$L_ASTQFL	= 12,0,32,0%; 		!MAILBOX AST QUEUE LISTHEAD FORWARD LINK 
 MACRO		UCB$L_FPC	= 12,0,32,0%; 			!FORK PC 
 MACRO		UCB$T_PARTNER	= 12,0,8,0%; 		! NETWORK - PARTNER'S NODENAME 
 MACRO		UCB$L_ASTQBL	= 16,0,32,0%; 		!MAILBOX AST QUEUE LISTHEAD BACKWARD LINK 
 MACRO		UCB$L_FR3	= 16,0,32,0%; 			!FORK R3 
 MACRO		UCB$L_FR4	= 20,0,32,0%; 			!FORK R4 
 MACRO		UCB$L_FIRST	= 20,0,32,0%; 		! ADDR OF 1ST SEG OF CHAINED NET MSG 
 MACRO		UCB$W_MSGMAX	= 20,0,16,0%; 		!MAILBOX MAXIMUM MESSAGES ALLOWED 
 MACRO		UCB$W_MSGCNT	= 22,0,16,0%; 		!MAILBOX CURRENT NUMBER OF MESSAGES 
 MACRO		UCB$W_BUFQUO	= 24,0,16,0%; 		!MAILBOX BUFFERED I/O QUOTA 
 MACRO		UCB$W_DSTADDR	= 24,0,16,0%; 		! NETWORK - REMOTE CONNECT NO. 
 MACRO		UCB$W_VPROT	= 26,0,16,0%; 			!VOLUME PROTECTION 
 MACRO		UCB$W_SRCADDR	= 26,0,16,0%; 		! NETWORK - LOCAL CONNECT NO. 
 MACRO		UCB$L_OWNUIC	= 28,0,32,0%; 		!VOLUME OWNER UIC 
 MACRO		UCB$L_CRB	= 32,0,32,0%; 			!ADDRESS OF PRIMARY CHANNEL REQUEST BLOCK 
 MACRO		UCB$L_DDB	= 36,0,32,0%; 			!BACKPOINTER TO DEVICE DATA BLOCK 
 MACRO		UCB$L_PID	= 40,0,32,0%; 			!PROCESS ID OF OWNER PROCESS 
 MACRO		UCB$L_LINK	= 44,0,32,0%; 			!ADDRESS OF NEXT UCB FOR RESPECTIVE DDB 
 MACRO		UCB$L_VCB	= 48,0,32,0%; 			!ADDRESS OF VOLUME CONTROL BLOCK 
 MACRO		UCB$L_DEVCHAR	= 52,0,32,0%; 		!DEVICE CHARACTERISTIC BITS 
 MACRO		UCB$B_DEVCLASS	= 56,0,8,0%; 		!DEVICE CLASS 
 MACRO		UCB$B_DEVTYPE	= 57,0,8,0%; 		!DEVICE TYPE 
 MACRO		UCB$W_DEVBUFSIZ	= 58,0,16,0%; 		!DEVICE DEFAULT BUFFER SIZE 
 MACRO		UCB$L_DEVDEPEND	= 60,0,32,0%; 		!DEVICE DEPENDENT DATA 
 MACRO		UCB$L_TTCHAR	= 60,0,32,0%; 		!TERMINAL CHARACTERISTICS 
 MACRO		UCB$B_SECTORS	= 60,0,8,0%; 		!DISK - SECTORS PER TRACK 
 MACRO		UCB$B_LOCSRV	= 60,0,8,0%; 		! NETWORK - LOCAL LINK SERVICES 
 MACRO		UCB$B_REMSRV	= 61,0,8,0%; 		! NETWORK - REMOTE LINK SERVICES 
 MACRO		UCB$B_TRACKS	= 61,0,8,0%; 		!DISK - TRACKS PER CYLINDER 
 MACRO		UCB$W_CYLINDERS	= 62,0,16,0%; 		!DISK - TOTAL CYLINDERS 
 MACRO		UCB$W_BYTESTOGO	= 62,0,16,0%; 		! NETWORK - NO. OF BYTES LEFT IN RCV BFR 
 MACRO		UCB$B_VERTSZ	= 63,0,8,0%; 		!VERTICAL PAGE SIZE 
 MACRO		UCB$L_IOQFL	= 64,0,32,0%; 			!I/O QUEUE LISTHEAD FORWARD LINK 
 MACRO		UCB$L_IOQBL	= 68,0,32,0%; 			!I/O QUEUE LISTHEAD BACKWARD LINK 
 MACRO		UCB$W_UNIT	= 72,0,16,0%; 			!PHYSICAL DEVICE UNIT NUMBER 
 MACRO		UCB$W_CHARGE	= 74,0,16,0%; 		!MAILBOX BYTE COUNT QUOTA CHARGE 
 MACRO		UCB$B_CM1	= 74,0,8,0%; 			!LEVEL 1 CONTROLLER ALLOCATION MASK 
 MACRO		UCB$B_CM2	= 75,0,8,0%; 			!LEVEL 2 CONTROLLER ALLOCATION MASK 
 MACRO		UCB$B_ESCAPE	= 75,0,8,0%; 		!CURRENT ESCAPE SYNTAX RULE - TERMINAL 
 MACRO		UCB$L_IRP	= 76,0,32,0%; 			!CURRENT I/O REQUEST PACKET ADDRESS 
 MACRO		UCB$W_REFC	= 80,0,16,0%; 			!REFERENCE COUNT OF PROCESSES 
 MACRO		UCB$B_DIPL	= 82,0,8,0%; 			!DEVICE INTERRUPT PRIORITY LEVEL 
 MACRO		UCB$B_STATE	= 82,0,8,0%; 		! LINK STATE FOR NETWORK TRANSITIONS 
 MACRO		UCB$B_AMOD	= 83,0,8,0%; 			!ALLOCATION ACCESS MODE 
 MACRO		UCB$L_AMB	= 84,0,32,0%; 			!ASSOCIATED UNIT CONTROL BLOCK POINTER 
 MACRO		UCB$W_STS	= 88,0,16,0%; 			!DEVICE UNIT STATUS 
 						! UCB$W_STS BIT DEFINITIONS 
 MACRO		UCB$V_TIM	= 88,0,1,0%; 			! TIME OUT ENABLED (1=YES) 
 LITERAL	UCB$M_TIM	= 1^1 - 1^0; 
 MACRO		UCB$V_INT	= 88,1,1,0%; 			! INTERRUPT EXPECTED (1=YES) 
 LITERAL	UCB$M_INT	= 1^2 - 1^1; 
 MACRO		UCB$V_ERLOGIP	= 88,2,1,0%; 		! ERROR LOG IN PROGRESS ON UNIT (1=YES) 
 LITERAL	UCB$M_ERLOGIP	= 1^3 - 1^2; 
 MACRO		UCB$V_CANCEL	= 88,3,1,0%; 		! CANCEL I/O ON UNIT (1=YES) 
 LITERAL	UCB$M_CANCEL	= 1^4 - 1^3; 
 MACRO		UCB$V_ONLINE	= 88,4,1,0%; 		! UNIT ONLINE (1=YES) 
 LITERAL	UCB$M_ONLINE	= 1^5 - 1^4; 
 MACRO		UCB$V_POWER	= 88,5,1,0%; 		! POWER FAILED WHILE UNIT BUSY (1=YES) 
 LITERAL	UCB$M_POWER	= 1^6 - 1^5; 
 MACRO		UCB$V_TIMOUT	= 88,6,1,0%; 		! UNIT TIMED OUT (1=YES) 
 LITERAL	UCB$M_TIMOUT	= 1^7 - 1^6; 
 MACRO		UCB$V_INTTYPE	= 88,7,1,0%; 		! RECEIVER INTERRUPT IF SET 
 LITERAL	UCB$M_INTTYPE	= 1^8 - 1^7; 
 MACRO		UCB$V_BSY	= 88,8,1,0%; 			! UNIT IS BUSY (1=YES) 
 LITERAL	UCB$M_BSY	= 1^9 - 1^8; 
 MACRO		UCB$V_MOUNTING	= 88,9,1,0%; 		! DEVICE IS BEING MOUNTED 
 LITERAL	UCB$M_MOUNTING	= 1^10 - 1^9; 
 MACRO		UCB$V_DEADMO	= 88,10,1,0%; 		! DEALLOCATE AT DISMOUNT 
 LITERAL	UCB$M_DEADMO	= 1^11 - 1^10; 
 MACRO		UCB$V_VALID	= 88,11,1,0%; 		! VOLUME IS SOFTWARE VALID 
 LITERAL	UCB$M_VALID	= 1^12 - 1^11; 
 MACRO		UCB$V_UNLOAD	= 88,12,1,0%; 		! UNLOAD VOLUME AT DISMOUNT 
 LITERAL	UCB$M_UNLOAD	= 1^13 - 1^12; 
 					! END OF BIT DEFINITIONS 
 MACRO		UCB$W_DEVSTS	= 90,0,16,0%; 		! DEVICE DEPENDENT STATUS 
 MACRO		UCB$L_CPID	= 92,0,32,0%; 			!MAILBOX CREATOR PROCESS ID 
 MACRO		UCB$L_DUETIM	= 92,0,32,0%; 		!DUE TIME FOR I/O COMPLETION 
 MACRO		UCB$L_OPCNT	= 96,0,32,0%; 			!COUNT OF OPERATIONS COMPLETED 
 MACRO		UCB$L_LOGADR	= 100,0,32,0%; 		!MAILBOX LOGICAL NAME BLOCK ADDRESS 
 MACRO		UCB$L_SVPN	= 100,0,32,0%; 			!SYSTEM VIRTUAL PAGE/MAP REGISTER NUMBER 
 MACRO		UCB$L_SVAPTE	= 104,0,32,0%; 		!SYSTEM VIRTUAL ADDRESS OF PTE 
 MACRO		UCB$W_BOFF	= 108,0,16,0%; 			!BYTE OFFSET IN FIRST PAGE 
 MACRO		UCB$W_BCNT	= 110,0,16,0%; 			!BYTE COUNT OF TRANSFER 
 MACRO		UCB$B_ERTCNT	= 112,0,8,0%; 		!ERROR LOG DEVICE CURRENT ERROR RETRY COUNT 
 MACRO		UCB$B_ERTMAX	= 113,0,8,0%; 		!ERROR LOG DEVICE MAXIMUM ERROR RETRY COUNT 
 MACRO		UCB$W_ERRCNT	= 114,0,16,0%; 		!DEVICE ERROR COUNT 
 LITERAL	UCB$C_LENGTH	= 116; 
 LITERAL	UCB$K_LENGTH	= 116; 				!LENGTH OF STANDARD UCB 
 						!MARK END OF STANDARD UCB 
  
 ! 
 ! DEVICE DEPENDENT UCB EXTENSIONS 
 ! 
 ! MAILBOX 
 ! 
  
 			 
 						! UCB$W_DEVSTS BITS FOR MAILBOXES AND NETWORKS 
 MACRO		UCB$V_PRMMBX	= 0,0,1,0%; 		! PERMANENT MAILBOX 
 LITERAL	UCB$M_PRMMBX	= 1^1 - 1^0; 
 MACRO		UCB$V_DELMBX	= 0,1,1,0%; 		! MAILBOX MARKED FOR DELETE 
 LITERAL	UCB$M_DELMBX	= 1^2 - 1^1; 
 MACRO		UCB$V_NT_BFROVF	= 0,2,1,0%; 		! TOO MANY BYTES RCVD 
 LITERAL	UCB$M_NT_BFROVF	= 1^3 - 1^2; 
 							! UNUSED 
 MACRO		UCB$V_NT_NAME	= 0,4,1,0%; 		! LINK HAS DECLARED A CONNECT NAME 
 LITERAL	UCB$M_NT_NAME	= 1^5 - 1^4; 
 MACRO		UCB$V_NT_BREAK	= 0,5,1,0%; 		! LINK IS BEING BROKEN 
 LITERAL	UCB$M_NT_BREAK	= 1^6 - 1^5; 
 			
 MACRO		UCB$W_MB_SEED	= -4,0,16,0%; 		!UNIT NUMBER SEED 
  
 ! 
 ! ERROR LOG DEVICES (ALL) 
 ! 
  
 						! 
 MACRO		UCB$B_SLAVE	= 116,0,8,0%; 			!SLAVE CONTROLLER NUMBER 
 MACRO		UCB$B_SPR	= 117,0,8,0%; 			!SPARE UNUSED BYTE 
 MACRO		UCB$B_FEX	= 118,0,8,0%; 			!FUNCTION DISPATCH TABLE INDEX 
 MACRO		UCB$B_CEX	= 119,0,8,0%; 			!CASE TABLE FUNCTION EXECUTION INDEX 
 MACRO		UCB$L_EMB	= 120,0,32,0%; 			!ADDRESS OF ERROR MESSAGE BUFFER 
 MACRO		UCB$W_FUNC	= 126,0,16,0%; 			!I/O FUNCTION MODIFIERS 
 MACRO		UCB$L_DPC	= 128,0,32,0%; 			!SAVED DRIVER SUBROUTINE RETURN ADDRESS 
 						!MARK END OF ERROR LOG DEVICE PROLOGUE 
  
 ! 
 ! DISK (ALL) 
 ! 
  
 						! 
 						!UCB$W_DEVSTS BITS FOR DISKS 
 MACRO		UCB$V_ECC	= 128,0,1,0%; 			!ECC CORRECTION MADE 
 LITERAL	UCB$M_ECC	= 1^1 - 1^0; 
 MACRO		UCB$V_DIAGBUF	= 128,1,1,0%; 		!DIAGNOSTIC BUFFER SPECIFIED 
 LITERAL	UCB$M_DIAGBUF	= 1^2 - 1^1; 
 MACRO		UCB$V_NOCNVRT	= 128,2,1,0%; 		!NO LBN TO MEDIA ADDRESS CONVERSION 
 LITERAL	UCB$M_NOCNVRT	= 1^3 - 1^2; 
 MACRO		UCB$V_DX_WRITE	= 128,3,1,0%; 		!FLOPPY WRITE OPERATION 
 LITERAL	UCB$M_DX_WRITE	= 1^4 - 1^3; 
 			
 MACRO		UCB$L_MAXBLOCK	= 132,0,32,0%; 		!RANDOM ACCESS DEVICE HIGHEST BLOCK 
 MACRO		UCB$W_DIRSEQ	= 136,0,16,0%; 		!DIRECTORY SEQUENCE NUMBER 
 MACRO		UCB$W_OFFSET	= 138,0,16,0%; 		!CURRENT OFFSET REGISTER CONTENTS 
 MACRO		UCB$L_MEDIA	= 140,0,32,0%; 			!MEDIA ADDRESS LONGWORD 
 MACRO		UCB$W_DA	= 140,0,16,0%; 			!SAVED DESIRED SECTOR/TRACK ADDRESS REGISTER 
 MACRO		UCB$W_DC	= 142,0,16,0%; 			!SAVED DESIRED CYLINDER ADDRESS REGISTER 
 MACRO		UCB$W_EC1	= 144,0,16,0%; 			!ECC POSITION REGISTER 
 MACRO		UCB$W_EC2	= 146,0,16,0%; 			!ECC PATTERN REGISTER 
 MACRO		UCB$B_OFFNDX	= 148,0,8,0%; 		!CURRENT OFFSET TABLE INDEX 
 MACRO		UCB$B_OFFRTC	= 149,0,8,0%; 		!CURRENT OFFSET RETRY COUNT 
 MACRO		UCB$W_BCR	= 150,0,16,0%; 			!BYTE COUNT REGISTER 
 			 
  
 ! 
 ! FLOPPY DEPENDENT BIT DEFINITIONS 
 ! 
  
 			 
 MACRO		UCB$L_DX_BUF	= 152,0,32,0%; 		!ADDRESS OF SECTOR BUFFER 
 MACRO		UCB$L_DX_BFPNT	= 156,0,32,0%; 		!CURRENT SECTOR BUFFER POINTER 
 MACRO		UCB$L_DX_RXDB	= 160,0,32,0%; 		!SAVED RECEIVER DATA BUFFER 
 MACRO		UCB$W_DX_BCR	= 164,0,16,0%; 		!CURRENT FLOPPY BYTE COUNT 
 MACRO		UCB$B_DX_SCTCNT	= 166,0,8,0%; 		!CURRENT SECTOR BYTE COUNT 
  
 ! 
 ! TERMINAL DEPENDENT BITS 
 ! 
 						! UCB$W_DEVSTS BITS 
 MACRO		UCB$V_JOB	= 167,0,1,0%; 			! JOB CONTROLLER NOTIFIED 
 LITERAL	UCB$M_JOB	= 1^1 - 1^0; 
 MACRO		UCB$V_TT_TIMO	= 167,1,1,0%; 		! TERMINAL READ TIMEOUT IN PROGRESS 
 LITERAL	UCB$M_TT_TIMO	= 1^2 - 1^1; 
 MACRO		UCB$V_TT_NOTIF	= 167,2,1,0%; 		! TERMINAL USER NOTIFIED OF UNSOLICTED DATA 
 LITERAL	UCB$M_TT_NOTIF	= 1^3 - 1^2; 
 			
 ! 
 ! NETWORK LOGICAL LINK (NETWORK MAILBOX) EXTENSION 
 ! 
 			 
 MACRO		UCB$L_NT_DATSSB	= 116,0,32,0%; 		! ADDRESS OF DATA SUBCHANNEL STATUS BLOCK 
 MACRO		UCB$L_NT_INTSSB	= 120,0,32,0%; 		! ADDRESS OF INT/LS SSB 
 MACRO		UCB$W_NT_CHAN	= 124,0,16,0%; 		! DDCMP CHANNEL NO. 
 							! NETWORK - LINK SERVICE DEFS 
 MACRO		UCB$V_LTYPE	= 126,0,2,0%; 			! LINK TYPE BITS 
 MACRO		UCB$V_SEGFLO	= 126,2,1,0%; 			! SEGMENT REQUEST COUNTS 
 MACRO		UCB$V_MSGFLO	= 126,3,1,0%; 			! MESSAGE REQUEST COUNTS 
 MACRO		UCB$V_MSGACK	= 126,4,1,0%; 			! MESSAGE ACK/NAK 
 MACRO		UCB$V_BACKP	= 126,5,1,0%; 		! BACKPRESSURE (1=> NO FLOW) 
 LITERAL	UCB$M_BACKP	= 1^6 - 1^5; 
 MACRO		UCB$V_LNKPRI	= 126,6,2,0%; 		! LINK PRIORITY (IGNORED) 
 			
 LITERAL	
 $EQULST (UCB$C_,GBL,0,1 				! NETWORK CONSTANTS 
 	,(LOGLNK,1) 			! CONNECT IS FOR LOGICAL LINK (NOT SINGLE MSG) 
 	); 

  
  
 !+ 
 ! VIRTUAL ADDRESS VIELDS 
 !- 
 !...$VADEF	
  
 			 
 MACRO		VA$V_BYTE	= 0,0,9,0%; 		!BYTE VIELD 
 LITERAL	VA$M_BYTE	= 1^9 - 1^0; 
 MACRO		VA$V_VPN	= 0,9,21,0%; 		!VIRTUAL PAGE NUMBER 
 LITERAL	VA$M_VPN	= 1^30 - 1^9; 
 MACRO		VA$V_P1	= 0,30,1,0%; 			!P1 SPACE 
 LITERAL	VA$M_P1	= 1^31 - 1^30; 
 MACRO		VA$V_SYSTEM	= 0,31,1,0%; 		!SYSTEM SPACE 
 LITERAL	VA$M_SYSTEM	= 1^32 - 1^31; 
 			
 			 
 				 
 MACRO		VA$V_VPG	= 0,9,23,0%; 		!VIRTUAL PAGE INCLUDING P1 & S 
 LITERAL	VA$M_VPG	= 1^32 - 1^9; 
 			

  
 !+ 
 ! VCB - VOLUME CONTROL BLOCK 
 ! 
 ! THERE IS ONE VOLUME CONTROL BLOCK FOR EACH MOUNTED DEVICE UNIT IN A 
 ! SYSTEM. IT CONTAINS INFORMATION NECESSARY TO CONTROL ACCESS TO AND 
 ! VERIFY CERTAIN VOLUME PARAMETERS IN THE CASE A DEVICE UNIT SHOULD 
 ! ERRONEOUSLY GO OFFLINE. 
 !- 
  
 !...$VCBDEF	
 						! MARK 1 POSITION 
 MACRO		VCB$L_FCBFL	= 0,0,32,0%; 			! FCB LISTHEAD FORWARD LINK 
 MACRO		VCB$L_FCBBL	= 4,0,32,0%; 			! FCB LISTHEAD BACKWARD LINK 
 MACRO		VCB$W_SIZE	= 8,0,16,0%; 		! SIZE OF VCB IN BYTES 
 MACRO		VCB$B_TYPE	= 10,0,8,0%; 		! STRUCTURE TYPE OF VCB 
 LITERAL	VCB$C_MRKLEN	= 11; 
 LITERAL	VCB$K_MRKLEN	= 11; 			! MARK LENGTH 
 						! MARK 2 POSITION 
 MACRO		VCB$B_STATUS	= 11,0,8,0%; 		! VOLUME STATUS 
 			 
 MACRO		VCB$V_WRITE_IF	= 11,0,1,0%; 	! INDEX FILE IS WRITE ACCESSED 
 MACRO		VCB$V_WRITE_SM	= 11,1,1,0%; 	! STORAGE MAP IS WRITE ACCESSED 
 MACRO		VCB$V_HOMBLKBAD	= 11,2,1,0%; 	! PRIMARY HOME BLOCK IS BAD 
 MACRO		VCB$V_IDXHDRBAD	= 11,3,1,0%; 	! PRIMARY INDEX FILE HEADER IS BAD 
 MACRO		VCB$V_NOALLOC	= 11,4,1,0%; 		! ALLOCATION/DEALLOCATION INHIBITED (BAD BITMAPS) 
 MACRO		VCB$V_EXTFID	= 11,5,1,0%; 		! VOLUME HAS 24 BIT FILE NUMBERS 
 MACRO		VCB$V_GROUP	= 11,6,1,0%; 		! VOLUME IS MOUNTED /GROUP 
 MACRO		VCB$V_SYSTEM	= 11,7,1,0%; 		! VOLUME IS MOUNTED /SYSTEM 
 			
 MACRO		VCB$W_TRANS	= 12,0,16,0%; 		! VOLUME TRANSACTION COUNT 
 MACRO		VCB$W_RVN	= 14,0,16,0%; 			! RELATIVE VOLUME NUMBER 
 MACRO		VCB$L_AQB	= 16,0,32,0%; 			! ADDRESS OF AQB 
 MACRO		VCB$T_VOLNAME	= 20,0,0,0%; 		! VOLUME LABEL BLANK FILLED 
 LITERAL	VCB$S_VOLNAME	= 12; 
 MACRO		VCB$L_RVT	= 32,0,32,0%; 			! ADDRESS OF UCB OR RELATIVE VOLUME TABLE 
 LITERAL	VCB$C_COMLEN	= 36; 
 LITERAL	VCB$K_COMLEN	= 36; 			! LENGTH OF COMMON AREA 
 						! MARK 3 POSITION 
 MACRO		VCB$L_HOMELBN	= 36,0,32,0%; 		! LBN OF VOLUME HOME BLOCK 
 MACRO		VCB$L_HOME2LBN	= 40,0,32,0%; 		! LBN OF ALTERNATE VOLUME HOME BLOCK 
 MACRO		VCB$L_IXHDR2LBN	= 44,0,32,0%; 		! LBN OF ALTERNATE INDEX FILE HEADER 
 MACRO		VCB$L_IBMAPLBN	= 48,0,32,0%; 		! LBN OF INDEX FILE BITMAP 
 MACRO		VCB$L_SBMAPLBN	= 52,0,32,0%; 		! LBN OF STORAGE BITMAP 
 MACRO		VCB$B_IBMAPSIZE	= 56,0,8,0%; 		! SIZE OF INDEX FILE BITMAP 
 MACRO		VCB$B_SBMAPSIZE	= 57,0,8,0%; 		! SIZE OF STORAGE BITMAP 
 MACRO		VCB$B_IBMAPVBN	= 58,0,8,0%; 		! CURRENT VBN IN INDEX FILE BIT MAP 
 MACRO		VCB$B_SBMAPVBN	= 59,0,8,0%; 		! CURRENT VBN IN STORAGE MAP 
 MACRO		VCB$W_CLUSTER	= 60,0,16,0%; 		! VOLUME CLUSTER SIZE 
 MACRO		VCB$W_EXTEND	= 62,0,16,0%; 		! VOLUME DEFAULT FILE EXTENSION LENGTH 
 MACRO		VCB$L_FREE	= 64,0,32,0%; 			! NUMBER OF FREE BLOCKS ON VOLUME 
 MACRO		VCB$L_MAXFILES	= 68,0,32,0%; 		! MAXIMUM NUMBER OF FILES ALLOWED ON VOLUME 
 MACRO		VCB$B_WINDOW	= 72,0,8,0%; 		! VOLUME DEFAULT WINDOW SIZE 
 MACRO		VCB$B_LRU_LIM	= 73,0,8,1%; 		! VOLUME DIRECTORY LRU SIZE LIMIT 
 MACRO		VCB$W_FILEPROT	= 74,0,16,0%; 		! VOLUME DEFAULT FILE PROTECTION 
 MACRO		VCB$W_MCOUNT	= 76,0,16,0%; 		! MOUNT COUNT 
 MACRO		VCB$B_EOFDELTA	= 78,0,8,0%; 		! INDEX FILE EOF UPDATE COUNT 
 MACRO		VCB$B_RESFILES	= 79,0,8,0%; 		! NUMBER OF RESERVED FILES ON VOLUME 
 MACRO		VCB$W_RECORDSZ	= 80,0,16,0%; 		! NUMBER OF BYTES IN A RECORD 
 LITERAL	VCB$C_LENGTH	= 84; 
 LITERAL	VCB$K_LENGTH	= 84; 			! LENGTH OF STANDARD VCB 
  
 ! 
 ! MTAACP VOLUME CONTROL BLOCK FIELDS 
 ! 
 						! RESET POINTER TO  FCB LISTHEAD 
 MACRO		VCB$L_BLOCKFL	= 0,0,32,0%; 		! BLOCKED REQUEST LISTHEAD FORWARD LINK 
 MACRO		VCB$L_BLOCKBL	= 4,0,32,0%; 		! BLOCKED REQUEST LISTHEAD BACKWARD LINK 
 						! RESET POINTER TO STATUS 
 				 
 MACRO		VCB$V_PARTFILE	= 11,0,1,0%; 	! PARTIAL FILE EXISTS ON TAPE 
 MACRO		VCB$V_LOGICEOVS	= 11,1,1,0%; 	! POSITIONED AT LOGICAL END OF VOLUME SET 
 MACRO		VCB$V_WAIMOUVOL	= 11,2,1,0%; 	! WAIT FOR VOLUME MOUNT 
 LITERAL	VCB$M_WAIMOUVOL	= 1^3 - 1^2; 
 MACRO		VCB$V_WAIREWIND	= 11,3,1,0%; 	! WAIT FOR REWIND COMPLETION 
 LITERAL	VCB$M_WAIREWIND	= 1^4 - 1^3; 
 MACRO		VCB$V_WAIUSRLBL	= 11,4,1,0%; 	! WAIT FOR USER LABEL 
 LITERAL	VCB$M_WAIUSRLBL	= 1^5 - 1^4; 
 MACRO		VCB$V_CANCELIO	= 11,5,1,0%; 	! CANCEL IO 
 LITERAL	VCB$M_CANCELIO	= 1^6 - 1^5; 
 MACRO		VCB$V_MUSTCLOSE	= 11,6,1,0%; 	! MUST CLOSE FILE 
 LITERAL	VCB$M_MUSTCLOSE	= 1^7 - 1^6; 
 MACRO		VCB$V_NOWRITE	= 11,7,1,0%; 	! DON'T WRITE TRAILERS 
 LITERAL	VCB$M_NOWRITE	= 1^8 - 1^7; 
 			
  
 						! RESET POINTER TO END OF COMMON VCB 
 MACRO		VCB$L_CUR_FID	= 36,0,32,0%; 		! CURRENT FILE IDENTIFICATION 
 MACRO		VCB$W_CUR_NUM	= 36,0,16,0%; 		! CURRENT FILE SECTION NUMBER 
 MACRO		VCB$W_CUR_SEQ	= 38,0,16,0%; 		! CURRENT FILE SEQUENCE NUMBER 
 MACRO		VCB$L_START_FID	= 40,0,32,0%; 		! FILE IDENTIFICATION AT START OF SEARCH 
 MACRO		VCB$W_START_NUM	= 40,0,16,0%; 	! FILE SECTION NUMBER AT START OF SEARCH 
 MACRO		VCB$W_START_SEQ	= 42,0,16,0%; 	! FILE SEQUENCE NUMBER AT START OF SEARCH 
 MACRO		VCB$W_MODE	= 44,0,16,0%; 		! MODE OF OPERATION 
 			 
 MACRO		VCB$V_OVREXP	= 44,0,1,0%; 		! OVERRIDE EXPIRATION 
 MACRO		VCB$V_OVRACC	= 44,1,1,0%; 		! OVERRIDE ACCESS 
 MACRO		VCB$V_OVRLBL	= 44,2,1,0%; 		! OVERRIDE LABELS 
 MACRO		VCB$V_OVRSETID	= 44,3,1,0%; 	! OVERRIDE SET IDENTIFIER 
 MACRO		VCB$V_INTCHG	= 44,4,1,0%; 		! INTERCHANGE TAPE 
 MACRO		VCB$V_EBCDIC	= 44,5,1,0%; 		! EBCDIC CODE SET 
 						! SPARE 
 MACRO		VCB$V_STARFILE	= 44,8,1,0%; 	! CURRENT FILE IS A STARLET PRODUCED FILE 
 			
 	 
 MACRO		VCB$B_TM	= 46,0,8,0%; 			! NUMBER OF TM'S INTO FILE 
 MACRO		VCB$B_CUR_RVN	= 47,0,8,0%; 		! CURRENT RELATIVE VOLUME 
 MACRO		VCB$L_ST_RECORD	= 48,0,32,0%; 		! NUMBER OF RECORDS UP TO AND INCLUDING LAST TAPE MARK 
 MACRO		VCB$L_MVL	= 52,0,32,0%; 			! ADDRESS OF MAGNETIC TAPE VOLUME LIST 
 MACRO		VCB$L_WCB	= 56,0,32,0%; 			! ADDRESS OF WINDOW FOR THIS VOLUME 
 MACRO		VCB$L_VPFL	= 60,0,32,0%; 			! VIRTUAL PAGE LIST HEAD 
 MACRO		VCB$L_VPBL	= 64,0,32,0%; 			! VIRTUAL PAGE LIST TAIL 
 MACRO		VCB$L_USRLBLAST	= 68,0,32,0%; 		! ADDRESS OF USER LABEL AST CONTROL BLOCK 
  
 ! NOTE THAT FCP AND MTAACP SHARE VCB$W_MCOUNT(DISPLACEMENT 76) 
  
 						! VCB FORMAT USED FOR SPOOLED DEVICE 
 MACRO		VCB$B_QNAMECNT	= 11,0,8,0%; 		! BYTE COUNT OF QUEUE NAME 
 MACRO		VCB$T_QNAME	= 12,0,0,0%; 		! ASCII NAME OF QUEUE FOR THIS DEVICE 
 LITERAL	VCB$S_QNAME	= 20; 

  
 !+ 
 ! VOL1 ANSI MAGNETIC TAPE LABEL 
 ! THIS IS THE FIRST BLOCK ON EVERY ANSI LABELED MAGNETIC TAPE. 
 ! IT IDENTIFIES THE VOLUME AND ITS PROTECTION. 
 !- 
 !...$VL1DEF		!VOL1 LABEL FORMAT 
  
 MACRO		VL1$L_VL1LID	= 0,0,32,0%; 	!LABEL IDENTIFIER AND NUMBER 'VOL1' 
 MACRO		VL1$T_VOLLBL	= 4,0,0,0%; 	!VOLUME LABEL 
 LITERAL	VL1$S_VOLLBL	= 6; 
 MACRO		VL1$B_VOLACCESS	= 10,0,8,0%; 	!VOLUME ACCESS 
 MACRO		VL1$T_VOLOWNER	= 37,0,0,0%; 	!VOLUME OWNER IDENTIFICATION 
 LITERAL	VL1$S_VOLOWNER	= 13; 
 MACRO		VL1$B_DECSTDVER	= 50,0,8,0%; 	!DEC STANDARD VERSION 
 MACRO		VL1$B_LBLSTDVER	= 79,0,8,0%; 	!LABEL STANDARD VERSION '3' 

  
  
 !+ 
 ! WCB - WINDOW CONTROL BLOCK 
 ! 
 ! THERE IS A WINDOW CONTROL BLOCK FOR EACH FILE ACCESSED BY A PROCESS. 
 ! IT CONTAINS MAPPING INFORMATION SUCH THAT A LARGE PERCENTAGE OF VIRTUAL 
 ! FILE I/O CAN BE MAPPED FROM VIRTUAL TO LOGICAL BLOCK NUMBERS WITHOUT 
 ! HAVING TO READ THE RESPECTIVE FILE HEADER. 
 !- 
  
 !...$WCBDEF	
 			 
 MACRO		WCB$L_WLFL	= 0,0,32,0%; 			! WINDOW LIST FORWARD LINK 
 MACRO		WCB$L_WLBL	= 4,0,32,0%; 			! WINDOW LIST BACKWARD LINK 
 MACRO		WCB$W_SIZE	= 8,0,16,0%; 		! SIZE OF WINDOW BLOCK IN BYTES 
 MACRO		WCB$B_TYPE	= 10,0,8,0%; 		! STRUCTURE TYPE OF WCB 
 MACRO		WCB$B_ACCESS	= 11,0,8,0%; 		! ACCESS CONTROL BYTE 
 						! WCB$B_ACCESS DEFINITIONS 
 MACRO		WCB$V_READ	= 11,0,1,0%; 		! READ ACCESS ALLOWED (1=YES) 
 LITERAL	WCB$M_READ	= 1^1 - 1^0; 
 MACRO		WCB$V_WRITE	= 11,1,1,0%; 		! WRITE ACCESS ALLOWED (1=YES) 
 LITERAL	WCB$M_WRITE	= 1^2 - 1^1; 
 MACRO		WCB$V_NOTFCP	= 11,2,1,0%; 		! FILE NOT ACCESSED BY FCP IF SET 
 LITERAL	WCB$M_NOTFCP	= 1^3 - 1^2; 
 MACRO		WCB$V_SHRWCB	= 11,3,1,0%; 		! SHARED WINDOW 
 LITERAL	WCB$M_SHRWCB	= 1^4 - 1^3; 
 					! END OF WCB$B_ACCESS DEFINITIONS 
 MACRO		WCB$L_PID	= 12,0,32,0%; 			! PROCESS ID OF ACCESSOR PROCESS 
 MACRO		WCB$W_REFCNT	= 14,0,16,0%; 		! REFERENCE COUNT FOR SHARED WINDOW 
 MACRO		WCB$L_ORGUCB	= 16,0,32,0%; 		! ADDRESS OF ORIGINAL UCB FROM CCB 
 MACRO		WCB$W_ACON	= 20,0,16,0%; 		! ACCESS CONTROL INFORMATION 
 				! NOTE - THESE BITS TRACK THE BITS 
 				! IN FIB$L_ACCTL 
 			 
 MACRO		WCB$V_NOWRITE	= 20,0,1,0%; 		! NO OTHER WRITERS 
 MACRO		WCB$V_DLOCK	= 20,1,1,0%; 		! ENABLE DEACCESS LOCK 
 						! UNUSED 
 MACRO		WCB$V_SPOOL	= 20,4,1,0%; 		! SPOOL FILE ON CLOSE 
 MACRO		WCB$V_WRITECK	= 20,5,1,0%; 		! ENABLE WRITE CHECK 
 MACRO		WCB$V_SEQONLY	= 20,6,1,0%; 		! SEQUENTIAL ONLY ACCESS 
 						! SPARE 
 MACRO		WCB$V_WRITEAC	= 20,8,1,0%; 		! WRITE ACCESS 
 MACRO		WCB$V_READCK	= 20,9,1,0%; 		! ENABLE READ CHECK 
 MACRO		WCB$V_NOREAD	= 20,10,1,0%; 		! NO OTHER READERS 
 MACRO		WCB$V_NOTRUNC	= 20,11,1,0%; 		! NO TRUNCATES 
 			
 MACRO		WCB$W_NMAP	= 22,0,16,0%; 		! NUMBER OF MAPPING POINTERS 
 MACRO		WCB$L_FCB	= 24,0,32,0%; 			! ADDRESS OF FCB 
 MACRO		WCB$L_RVT	= 28,0,32,0%; 			! ADDRESS OF RELATIVE VOLUME TABLE 
 MACRO		WCB$L_STVBN	= 32,0,32,0%; 			! STARTING VBN MAPPED BY WINDOW 
 LITERAL	WCB$C_MAP	= 36; 
 LITERAL	WCB$K_MAP	= 36; 				! MAP POINTERS START HERE 
 LITERAL	WCB$C_LENGTH	= 36; 
 LITERAL	WCB$K_LENGTH	= 36; 			! LENGTH OF STANDARD WCB SANS POINTERS 
 MACRO		WCB$W_P1_COUNT	= 36,0,16,0%; 		! COUNT FIELD OF FIRST POINTER 
 MACRO		WCB$L_P1_LBN	= 38,0,32,0%; 		! LBN FIELD OF SECOND POINTER 
 MACRO		WCB$W_P2_COUNT	= 42,0,16,0%; 		! COUNT FIELD OF SECOND POINTER 
 MACRO		WCB$L_P2_LBN	= 44,0,32,0%; 		! LBN FIELD OF FIRST POINTER 
 			 
 				! FORMAT OF RETRIEVAL POINTER 
 MACRO		WCB$W_COUNT	= 0,0,16,0%; 		! COUNT FIELD 
 MACRO		WCB$L_LBN	= 2,0,32,0%; 			! LBN FIELD 
 			 
 MACRO		WCB$W_PREVCOUNT	= -6,0,16,0%; 		! PREVIOUS RETRIEVAL POINTER 
 MACRO		WCB$L_PREVLBN	= -4,0,32,0%;  
 				! RETRIEVAL POINTER FORMAT 
 	
  
 !+ 
 ! WORKING SET LIST DEFINITIONS 
 !- 
  
 !...$WSLDEF	
  
 			 
 					!THE FOLLOWING 5 BITS MUST BE IN ORDER 
 MACRO		WSL$V_VALID	= 0,0,1,0%; 			!WSL ENTRY VALID 
 LITERAL	WSL$M_VALID	= 1^1 - 1^0; 
 MACRO		WSL$V_PAGTYP	= 0,1,3,0%; 		!PAGE TYPE (SEE PFNDEF FOR VALUES) 
 LITERAL	WSL$M_PAGTYP	= 1^4 - 1^1; 
 MACRO		WSL$V_PFNLOCK	= 0,4,1,0%; 			!PAGE FRAME LOCK 
 LITERAL	WSL$M_PFNLOCK	= 1^5 - 1^4; 
 					!THE PRECEDING 5 BITS MUST BE IN ORDER 
 MACRO		WSL$V_WSLOCK	= 0,5,1,0%; 			!WORKING SET LOCK 
 LITERAL	WSL$M_WSLOCK	= 1^6 - 1^5; 
 MACRO		WSL$V_GOODPAGE	= 0,6,1,0%; 		!THIS PAGE SHOULD REMAIN IN WS ONE MORE PASS 
 LITERAL	WSL$M_GOODPAGE	= 1^7 - 1^6; 
 							!SPARE BIT 
 MACRO		WSL$V_MODIFY	= 0,8,1,0%; 			!SAVED MODIFY BIT 
 LITERAL	WSL$M_MODIFY	= 1^9 - 1^8; 
 			
  
 LITERAL	WSL$C_LENGTH	= 4; 			!SIZE OF WS LIST ENTRY 
 ! 
 ! PAGE TYPE VIELD DEFINITIONS 
 ! 
 LITERAL	
 $EQULST (WSL$C_,GBL,0,1  
 	,(PROCESS,0^WSL$V_PAGTYP) 		!PROCESS PAGE 
 	,(SYSTEM,1^WSL$V_PAGTYP) 		!SYSTEM PAGE 
 	,(GLOBAL,2^WSL$V_PAGTYP) 		!GLOBAL PAGE (READ ONLY) 
 	,(GBLWRT,3^WSL$V_PAGTYP) 		!GLOBAL WRITABLE PAGE 
 	,(PPGTBL,4^WSL$V_PAGTYP) 		!PROCESS PAGE TABLE 
 	,(GPGTBL,5^WSL$V_PAGTYP) 		!GLOBAL PAGE TABLE 
 	); 

  
 !+ 
 ! WAIT QUEUE HEADER DEFINITIONS 
 !- 
  
 !...$WQHDEF	
  
 MACRO		WQH$L_WQFL	= 0,0,32,0%; 		!HEAD OR FORWARD LINK 
 MACRO		WQH$L_WQBL	= 4,0,32,0%; 		!TAIL OR BACKWARD LINK 
 MACRO		WQH$W_WQCNT	= 8,0,16,0%; 		!WAIT QUEUE COUNT 
 MACRO		WQH$W_WQSTATE	= 10,0,16,0%; 	!STATE NUMBER FOR WAIT 
 LITERAL	WQH$C_LENGTH	= 12; 
 LITERAL	WQH$K_LENGTH	= 12; 			!LENGTH OF WAIT QUEUE HEADER 
  

  
  
 !+ 
 ! NDB - NETWORK NODE DESCRIPTOR BLOCK 
 !- 
  
 !...$NDBDEF	
 	 
 MACRO		NDB$L_NEXT	= 0,0,32,0%; 			! THREAD TO NEXT NDB 
 MACRO		NDB$L_LINE_NAME	= 4,0,32,0%; 		! 4-CHARACTER PHYSICAL LINE NAME 
 MACRO		NDB$W_SIZE	= 8,0,16,0%; 			! SIZE OF THIS CONTROL BLOCK 
 MACRO		NDB$B_TYPE	= 10,0,8,0%; 			! TYPE OF THIS CONTROL BLOCK 
 MACRO		NDB$B_NUMBUF	= 11,0,8,0%; 		! NUMBER OF PREALLOCATED BUFFERS 
 MACRO		NDB$Q_AST	= 12,0,0,0%; 			! DUMMY AST CALL AREA 
 LITERAL	NDB$S_AST	= 8; 
 MACRO		NDB$W_CHANNEL	= 20,0,16,0%; 		! ASSOCIATED CHANNEL NUMBER 
 MACRO		NDB$B_STATE	= 22,0,8,0%; 			! NODE STATE (NSP INITIALIZTION) 
 MACRO		NDB$B_STATUS	= 23,0,8,0%; 		! NODE STATUS (E.G. LOOPBACK) 
 MACRO		NDB$W_NODEADDR	= 24,0,16,0%; 		! NETWORK NODE ADDRESS 
 MACRO		NDB$T_NAME	= 26,0,0,0%; 		! NODENAME (COUNTED ASCII STRING) 
 LITERAL	NDB$S_NAME	= 7; 
 MACRO		NDB$B_FUNC	= 33,0,8,0%; 			! SUPPORTED FUNCTIONS 
 MACRO		NDB$W_BLKSIZE	= 34,0,16,0%; 		! MAX NSP MSG BLOCK SIZE 
 MACRO		NDB$W_NSPSIZE	= 36,0,16,0%; 		! MAX NSP MSG SIZE 
 MACRO		NDB$W_MAXLNK	= 38,0,16,0%; 		! MAX NO. OF INBOUND LINKS 
 MACRO		NDB$B_RTEVER	= 40,0,24,0%; 		! NSP ROUTING VERSION   ****Z*** 
 MACRO		NDB$B_COMMVER	= 43,0,24,0%; 		! COMM PROTOCOL VERSION   ****Z**** 
 MACRO		NDB$T_SYSVER	= 46,0,0,0%; 		! SYSTEM VERSION DESC (COUNTED ASCII) 
 LITERAL	NDB$S_SYSVER	= 33; 
 MACRO		NDB$B_CONNTMO	= 79,0,8,0%; 		! CONNECT TIMEOUT IN SECONDS 0=INFINITY 
 MACRO		NDB$B_NONPRVACC	= 80,0,8,0%; 		! FLAG NONPRV DEFAULT ACCESS INFO 
 MACRO		NDB$B_PRVACC	= 124,0,8,0%; 		! FLAG PRV DEFAULT ACCESS INFO 
 MACRO		NDB$W_BUFSIZE	= 168,0,16,0%; 		! SIZE OF PREALLOCATED BUFFERS 
 MACRO		NDB$W_CHAR	= 170,0,16,0%; 			! PHYSICAL LINE CHARACTERISTICS 
 MACRO		NDB$Q_ZEROTIME	= 172,0,0,0%; 		! TIME WHEN COUNTS WERE ZEROED 
 LITERAL	NDB$S_ZEROTIME	= 8; 
 MACRO		NDB$W_RCVBLKS	= 180,0,16,0%; 		! NO. OF BLOCKS RCVD (2^15-1 MAX) 
 MACRO		NDB$W_XMTBLKS	= 182,0,16,0%; 		! NO. OF BLOCKS XMTD (2^15-1 MAX) 
 MACRO		NDB$W_HISBLKSIZ	= 184,0,16,0%; 		! PARTNER'S BLK SIZE 
 MACRO		NDB$W_HISNSPSIZ	= 186,0,16,0%; 		! PARTNER'S NSP SIZE 
 LITERAL	NDB$C_LENGTH	= 188; 
 LITERAL	NDB$K_LENGTH	= 188; 	 
 LITERAL	NDB$C_ON	= 0; 				! ON STATE 
 LITERAL	NDB$C_OFF	= 1; 				! OFF STATE 
 LITERAL	NDB$C_SHUT	= 2; 				! SHUT STATE 
 LITERAL	NDB$C_LOOP	= 3; 				! LOOP STATE 
 LITERAL	NDB$C_MAINT	= 4; 				! MAINT STATE 
 LITERAL	NDB$C_CTL_LOOP	= 5; 			! CONTROLLER LOOP STATE 
 							! NDB LOOPBACK BIT FOR NDB$B_STATUS 
 MACRO		NDB$V_LOOPBACK	= 188,0,1,0%; 		! LINE FOR NODE IS IN LOOPBACK 
 LITERAL	NDB$M_LOOPBACK	= 1^1 - 1^0; 
 MACRO		NDB$V_OFF	= 188,1,1,0%; 			! LINE (OR NODE) OFF 
 LITERAL	NDB$M_OFF	= 1^2 - 1^1; 
 MACRO		NDB$V_SHUT	= 188,2,1,0%; 		! NODE IS SHUT 
 LITERAL	NDB$M_SHUT	= 1^3 - 1^2; 
 MACRO		NDB$V_CTL_LOOP	= 188,3,1,0%; 		! CONTROLLER LOOPBACK 
 LITERAL	NDB$M_CTL_LOOP	= 1^4 - 1^3; 
 			
 LITERAL	
 $EQULST (NDB$C_,GBL,1,1 		! MESSAGE CODES FOR OPCOM 
 	,(MSG_START,) 			! LINE STARTING 
 	,(MSG_MAINT,) 			! LINE ENTERED MAINTENANCE MODE 
 	,(MSG_DOWN,) 			! LINE DOWN DUE TO ERROR 
 	,(MSG_NGINI,) 			! UNSUCCESSFUL NODE INIT 
 	,(MSG_OKINI,) 			! SUCCESSFUL NODE INIT 
 	,(MSG_SHUT,) 			! LINE SHUTTING DOWN 
 	,(MSG_DSRCH,) 			! DSR ON-TO-OFF TRANSITION 
 	,(MSG_LOOPB,) 			! LINE ILLEGALLY SWITCHED TO LOOPBACK 
 	,(MSG_DCHK,) 			! ERROR THRESHOLD EXCEEDED 
 	); 

  
  
 !+ 
 ! NFB DEFINITIONS - CODES FOR USE IN NFB (FIB) IN NET ACPCONTROL I/O FUNCTIONS 
 !- 
  
 !...$NFBDEF	
 LITERAL	
 $EQULST (NFB$C_,GBL,1,1 		! FUNCTIONS CODES FOR NFB 
 	,(SETLINSTA,) 			! SET LINE STATE 
 	,(GETLINSTA,) 			! GET LINE STATE 
 	,(GETLINCTR,) 			! GET LINE COUNTERS 
 	,(CLRLINCTR,) 			! CLEAR LINE COUNTERS 
 	,(UPDOBJECT,) 			! UPDATE OBJECT RECORD 
 	,(UPDREMOTE,) 			! UPDATE REMOTE RECORD 
 	,(GETLOCNAM,) 			! GET LOCAL NODE NAME 
 	,(GETLNBYND,) 			! GET LINE BY NODE 
 	,(GETLOGLNK,) 			! GET LOGICAL LINKS 
 	,(SETLOCSTA,) 			! SET LOCAL STATE 
 	,(GETLOCSTA,) 			! GET LOCAL STATE 
 	,(GETLOCCTR,) 			! GET LOCAL COUNTERS 
 	,(CLRLOCCTR,) 			! CLEAR LOCAL COUNTERS 
 	,(GETNODNAM,) 			! GET NODE NAMES 
 	,(GETLINNAM,) 			! GET LINE NAMES 
 	,(DISCLINK,) 			! DISCONNECT LINK 
 	,(GETNAMNUM,) 			! GET NODE NAME BY NODE NUMBER 
 	,(GETNUMNAM,) 			! GET NODE NUMBER BY NODE NAME 
 	,(GETVER,) 				! GET VERSIONS 
 	,(GETNDBYLN,) 			! GET NODE BY LINE 
 	,(DECLNAME,) 			! DECLARE NAME 
 	); 

  
  
 !+ 
 ! SSB - NETWORK LOGICAL LINK SUBCHANNEL STATUS BLOCK 
 !_ 
  
 !...$SSBDEF	
 MACRO		SSB$L_XQFL	= 0,0,32,0%; 			! TRANSMIT QUEUE FORWARD LINK 
 MACRO		SSB$L_XQBL	= 4,0,32,0%; 			! TRANSMIT QUEUE BACKWARD LINK 
 MACRO		SSB$W_SIZE	= 8,0,16,0%; 			! BLOCK SIZE 
 MACRO		SSB$B_TYPE	= 10,0,8,0%; 			! TYPE 
 MACRO		SSB$L_WACKQFL	= 12,0,32,0%; 		! WAITING FOR ACK QUEUE FWD LINK 
 MACRO		SSB$L_WACKQBL	= 16,0,32,0%; 		! WAITING FOR ACK QUEUE BWD LINK 
 MACRO		SSB$L_UCB	= 20,0,32,0%; 			! BACK POINTER TO UCB 
 MACRO		SSB$W_RCVSEGNUM	= 24,0,16,0%; 		! SEGNUM EXPECTED FROM PARTNER (1) 
 MACRO		SSB$W_RCVSEGACK	= 26,0,16,0%; 		! LAST SEGNUM I ACKED (0) 
 MACRO		SSB$W_XMTSEGNUM	= 28,0,16,0%; 		! LAST SEGNUM I SENT (0) 
 							! BITS FOR ACK/NAK FIELD IN SEGNUM 
 							! DUMMY 
 MACRO		SSB$V_NAKP	= 28,12,3,0%; 			! NAK PENDING 
 LITERAL	SSB$M_NAKP	= 1^15 - 1^12; 
 MACRO		SSB$V_ACKP	= 28,15,1,0%; 			! ACK PENDING 
 LITERAL	SSB$M_ACKP	= 1^16 - 1^15; 
 			
 MACRO		SSB$W_XMTSEGACK	= 30,0,16,0%; 		! LAST SEGNUM PARTNER ACKED (0) 
 MACRO		SSB$B_TIPC	= 32,0,8,0%; 			! TRANSMITS IN PROGRESS COUNTER 
 MACRO		SSB$B_FCVAL	= 33,0,8,0%; 			! FCVAL TO GO IN NEXT LS MSG 
 MACRO		SSB$B_REQCNT	= 34,0,8,0%; 		! PARTNER'S DATA REQUEST COUNT 
 MACRO		SSB$B_PNDCNT	= 35,0,8,0%; 		! MY DATA REQUEST COUNT (PENDING) 
 LITERAL	SSB$C_LENGTH	= 36; 
 LITERAL	SSB$K_LENGTH	= 36; 				! LENGTH OF SSB 

 ! 
 ! DISCONNECT REASONS 
 ! 
 !...$DRDEF	
 LITERAL	
 $EQULST (NET$C_,GBL,0,1  
 	,(DR_NORMAL,0) 			! NO ERROR (SYNCH DISCONNECT) 
 	,(DR_RSU,1) 			! COULDN'T ALLOCATE UCB ADDRESS 
 	,(DR_SHUT,3) 			! NODE OR LINE SHUTTING DOWN 
 	,(DR_NOBJ,4) 			! UNKNOWN OBJECT TYPE OR PROCESS 
 	,(DR_FMT,5) 			! ILLEGAL PROCESS NAME FIELD 
 	,(DR_PROTCL,7) 			! GENERAL PROTOCOL ERROR 
 	,(DR_THIRD,8) 			! THIRD PARTY DISCONNECT 
 	,(DR_ABORT,9) 			! DISCONNECT ABORT 
 	,(DR_NONZ,21) 			! NON-ZERO DST ADDRESS 
 	,(DR_BADLNK,22) 			! INCONSISTENT DSTLNK 
 	,(DR_ZERO,23) 			! ZERO SOURCE ADDRESS 
 	,(DR_BADFC,24) 			! FCVAL ILLEGAL 
 	,(DR_NOCON,32) 			! NO CONNECT SLOTS AVAILABLE 
 	,(DR_ACCESS,34) 			! INVALID ACCESS CONTROL 
 	,(DR_BADSRV,35) 			! LOGICAL LINK SERVICES MISMATCH 
 	,(DR_ACCNT,36) 			! INVALID ACCOUNT INFORMATION 
 	,(DR_SEGSIZ,37) 			! SEGSIZE TOO SMALL 
 	,(DR_EXIT,38) 			! USER EXIT OR TIMEOUT 
 	,(DR_NOPATH,39) 			! NO PATH TO DESTINATION NODE 
 	,(DR_LOSS,40) 			! LOSS OF DATA HAS OCCURRED 
 	,(DR_NOLINK,41) 			! ILLEGAL MSG FOR LINK NOLINK STATE 
 	,(DR_CONF,42) 			! REAL DISCONNECT CONFIRM 
 	,(DR_IMLONG,43) 			! IMAGE DATA FIELD TOO LONG 
 	); 

 !...$NETDEF	
 LITERAL	
 $EQULST (NET$C_,GBL,0,1  
 	,(MSGFLG,0) 			! MSGFLG INDICATOR BITS 
 	,(NSPOVH,11) 			! NSP MSG OVERHEAD 
 	,(MAXNSPOVH,24) 			! MAX (WITH RTHDRS) NSP OVERHEAD 
 	,(DATAM,0) 				! DATA MESSAGE TYPE 
 	,(ACKM,1) 				! ACK MESSAGE TYPE 
 	,(CTRLM,2) 				! CONTROL MESSAGE TYPE 
 	); 
 							! BITS FOR ACK/NAK FIELD IN SEGNUM 
 MACRO		NET$V_MSGID	= 0,0,2,0%; 			! BITS TO DISTINGUISH RTHDR, COUNT, AND MSGFLG 
 MACRO		NET$V_MSGFLG	= 0,2,5,0%; 		! MSGFLG FIELD 
 			
 			 
 							! DUMMY 
 MACRO		NET$V_MSGTYP	= 0,2,2,0%; 		! MSGTYP BITS 
 MACRO		NET$V_SUBTYP	= 0,4,3,0%; 		! SUBTYP BITS 
 			
 			 
 							! DUMMY 
 MACRO		NET$V_INTLS	= 0,4,1,0%; 			! INTERRUPT/LINKSERVICE SUBCHANNEL 
 LITERAL	NET$M_INTLS	= 1^5 - 1^4; 
 MACRO		NET$V_BOM	= 0,5,1,0%; 			! BEGINNING-OF-MSG 
 LITERAL	NET$M_BOM	= 1^6 - 1^5; 
 MACRO		NET$V_EOM	= 0,6,1,0%; 			! END-OF-MSG 
 LITERAL	NET$M_EOM	= 1^7 - 1^6; 
 			
 			 
 							! DUMMY 
 MACRO		NET$V_INTMSG	= 0,5,1,0%; 		! INTERRUPT MESSAGE 
 LITERAL	NET$M_INTMSG	= 1^6 - 1^5; 
 			

 ! 
 ! FILE HEADER DEFINITIONS FOR FILE-11 STRUCTURE LEVEL 1 
 ! 
 !...$FHDDEF		! HEADER AREA 
 MACRO		FHD$B_IDOFFSET	= 0,0,8,0%; 		! IDENT AREA OFFSET IN WORDS 
 MACRO		FHD$B_MPOFFSET	= 1,0,8,0%; 		! MAP AREA OFFSET IN WORDS 
 MACRO		FHD$W_FID	= 2,0,32,0%; 		! FILE ID 
 MACRO		FHD$W_FID_NUM	= 2,0,16,0%; 	! FILE NUMBER 
 MACRO		FHD$W_FID_SEQ	= 4,0,16,0%; 	! FILE SEQUENCE NUMBER 
 MACRO		FHD$W_STRUCLEV	= 6,0,16,0%; 		! FILE STRUCTURE LEVEL 
 LITERAL	FHD$C_LEVEL1	= 257; 			! 401 OCTAL = STRUCTURE LEVEL 1 
 MACRO		FHD$W_FILEOWNER	= 8,0,16,0%; 		! FILE OWNER UIC 
 MACRO		FHD$B_UICMEMBER	= 8,0,8,0%; 	! UIC MEMBER NUMBER 
 MACRO		FHD$B_UICGROUP	= 9,0,8,0%; 	! UIC GROUP NUMBER 
 MACRO		FHD$W_FILEPROT	= 10,0,16,0%; 		! FILE PROTECTION 
 			 
 MACRO		FHD$V_SYSPRO	= 10,0,4,0%; 	! SYSTEM PROTECTION 
 MACRO		FHD$V_OWNPRO	= 10,4,4,0%; 	! OWNER PROTECTION 
 MACRO		FHD$V_GROUPPRO	= 10,8,4,0%; 	! GROUP PROTECTION 
 MACRO		FHD$V_WORLDPRO	= 10,12,4,0%; 	! WORLD PROTECTION 
 			
 MACRO		FHD$W_FILECHAR	= 12,0,16,0%; 		! FILE CHARACTERISTICS 
 MACRO		FHD$B_USERCHAR	= 12,0,8,0%; 	! USER CONTROLLED CHARACTERISTICS 
 			 
 						! RESERVED 
 MACRO		FHD$V_READCHECK	= 12,3,1,0%; 	! VERIFY ALL READ OPERATIONS 
 MACRO		FHD$V_WRITCHECK	= 12,4,1,0%; 	! VERIFY ALL WRITE OPERATIONS 
 MACRO		FHD$V_CONTIGB	= 12,5,1,0%; 		! KEEP FILE AS CONTIGUOUS AS POSSIBLE 
 MACRO		FHD$V_LOCKED	= 12,6,1,0%; 		! FILE IS DEACESS LOCKED	 
 MACRO		FHD$V_CONTIG	= 12,7,1,0%; 		! FILE IS CONTIGUOUS 
 			
 MACRO		FHD$B_SYSCHAR	= 13,0,8,0%; 	! SYSTEM CONTROLLED CHARACTERISTICS 
 			 
 						! RESERVED 
 MACRO		FHD$V_BADBLOCK	= 13,6,1,0%; 	! FILE CONTAINS BAD BLOCKS 
 MACRO		FHD$V_MARKDEL	= 13,7,1,0%; 		! FILE IS MARKED FOR DELETE 
 			
 MACRO		FHD$W_RECATTR	= 14,0,0,0%; 		! FILE RECORD ATTRIBUTES 
 LITERAL	FHD$S_RECATTR	= 32; 
 LITERAL	FHD$C_LENGTH	= 46; 
 LITERAL	FHD$K_LENGTH	= 46; 			! LENGTH OF HEADER AREA 
 MACRO		FHD$W_CHECKSUM	= 510,0,16,0%; 		! FILE HEADER CHECKSUM 

  
 !...$FHIDEF		! IDENT AREA 
 MACRO		FHI$W_FILENAME	= 0,0,0,0%; 		! FILE NAME (RAD-50) 
 LITERAL	FHI$S_FILENAME	= 6; 
 MACRO		FHI$W_FILETYPE	= 6,0,16,0%; 		! FILE TYPE (RAD-50) 
 MACRO		FHI$W_VERSION	= 8,0,16,0%; 		! VERSION NUMBER (BINARY) 
 MACRO		FHI$W_REVISION	= 10,0,16,0%; 		! REVISION NUMBER (BINARY) 
 MACRO		FHI$T_REVDATE	= 12,0,0,0%; 		! REVISION DATE (ASCII DDMMMYY) 
 LITERAL	FHI$S_REVDATE	= 7; 
 MACRO		FHI$T_REVTIME	= 19,0,0,0%; 		! REVISION TIME (ASCII HHMMSS) 
 LITERAL	FHI$S_REVTIME	= 6; 
 MACRO		FHI$T_CREDATE	= 25,0,0,0%; 		! CREATION DATE (ASCII DDMMMYY) 
 LITERAL	FHI$S_CREDATE	= 7; 
 MACRO		FHI$T_CRETIME	= 32,0,0,0%; 		! CREATION TIME (ASCII HHMMSS) 
 LITERAL	FHI$S_CRETIME	= 6; 
 MACRO		FHI$T_EXPDATE	= 38,0,0,0%; 		! EXPIRATION DATE (ASCII DDMMMYY) 
 LITERAL	FHI$S_EXPDATE	= 7; 
 LITERAL	FHI$C_LENGTH	= 46; 
 LITERAL	FHI$K_LENGTH	= 46; 			! LENGTH OF IDENT AREA 
 MACRO		FHI$T_MTHDR1	= 46,0,0,0%; 		! HDR1 OF ANSI MAGNETIC TAPE FILE 
 LITERAL	FHI$S_MTHDR1	= 80; 
 MACRO		FHI$T_MTHDR2	= 126,0,0,0%; 		! HDR2 OF ANSI MAGNETIC TAPE FILE 
 LITERAL	FHI$S_MTHDR2	= 80; 

  
 !...$FHMDEF		! MAP AREA 
 			 
 MACRO		FHM$B_EX_SEGNUM	= 0,0,8,0%; 		! EXTENSION SEGMENT NUMBER OF THIS HEADER 
 MACRO		FHM$B_EX_RVN	= 1,0,8,0%; 		! EXTENSION RELATIVE VOLUME NUMBER 
 MACRO		FHM$W_EX_FILNUM	= 2,0,16,0%; 		! EXTENSION FILE NUMBER 
 MACRO		FHM$W_EX_FILSEQ	= 4,0,16,0%; 		! EXTENSION FILE SEQUENCE NUMBER 
 MACRO		FHM$B_COUNTSIZE	= 6,0,8,0%; 		! RETRIEVAL POINTER COUNT FIELD SIZE 
 MACRO		FHM$B_LBNSIZE	= 7,0,8,0%; 		! RETRIEVAL POINTER LBN FIELD SIZE 
 MACRO		FHM$B_INUSE	= 8,0,8,0%; 		! NUMBER OF RETRIEVAL WORDS IN USE 
 MACRO		FHM$B_AVAIL	= 9,0,8,0%; 		! NUMBER OF RETRIEVAL WORDS AVAILABLE 
 LITERAL	FHM$C_POINTERS	= 10; 
 LITERAL	FHM$K_POINTERS	= 10; 			! START OF RETRIEVAL POINTERS 
 LITERAL	FHM$C_LENGTH	= 10; 
 LITERAL	FHM$K_LENGTH	= 10; 			! LENGTH OF MAP AREA 
  
 				! RETRIEVAL POINTER FORMAT 
 			 
 MACRO		FHM$B_HIGHLBN	= 0,0,8,0%; 		! HIGH ORDER LBN 
 MACRO		FHM$B_COUNT	= 1,0,8,0%; 		! BLOCK COUNT 
 MACRO		FHM$W_LOWLBN	= 2,0,16,0%; 		! LOW ORDER LBN 
 			 
 MACRO		FHM$B_PREVHLBN	= -4,0,8,0%;  
 MACRO		FHM$B_PREVCOUNT	= -3,0,8,0%;  
 MACRO		FHM$W_PREVLLBN	= -2,0,16,0%; 		! PREVIOUS RETRIEVAL POINTER 
  
  
 !+ 
 ! 
 ! HOME BLOCK DEFINITIONS FOR FILES-11 STRUCTURE LEVEL 1 
 ! 
 !- 
  
 !...$HMBDEF		! HOME BLOCK STRUCTURE 
 MACRO		HMB$W_IBMAPSIZE	= 0,0,16,0%; 		! INDEX FILE BITMAP SIZE, BLOCKS 
 MACRO		HMB$L_IBMAPLBN	= 2,0,32,0%; 		! INDEX FILE BITMAP STARTING LBN 
 MACRO		HMB$W_MAXFILES	= 6,0,16,0%; 		! MAXIMUM # FILES ON VOLUME 
 MACRO		HMB$W_CLUSTER	= 8,0,16,0%; 		! STORAGE BITMAP CLUSTER FACTOR 
 MACRO		HMB$W_DEVTYPE	= 10,0,16,0%; 		! DISK DEVICE TYPE 
 MACRO		HMB$W_STRUCLEV	= 12,0,16,0%; 		! VOLUME STRUCTURE LEVEL 
 LITERAL	HMB$C_LEVEL1	= 257; 			! 401 OCTAL = STRUCTURE LEVEL 1 
 MACRO		HMB$T_VOLNAME	= 14,0,0,0%; 		! VOLUME NAME (ASCII) 
 LITERAL	HMB$S_VOLNAME	= 12; 
 MACRO		HMB$W_VOLOWNER	= 30,0,16,0%; 		! VOLUME OWNER UIC 
 MACRO		HMB$W_PROTECT	= 32,0,16,0%; 		! VOLUME PROTECTION 
 			 
 MACRO		HMB$V_SYSPRO	= 32,0,4,0%; 	! SYSTEM PROTECTION 
 MACRO		HMB$V_OWNPRO	= 32,4,4,0%; 	! OWNER PROTECTION 
 MACRO		HMB$V_GROUPPRO	= 32,8,4,0%; 	! GROUP PROTECTION 
 MACRO		HMB$V_WORLDPRO	= 32,12,4,0%; 	! WORLD PROTECTION 
 			
 MACRO		HMB$W_VOLCHAR	= 34,0,16,0%; 		! VOLUME CHARACTERISTICS 
 MACRO		HMB$W_FILEPROT	= 36,0,16,0%; 		! DEFAULT FILE PROTECTION 
 MACRO		HMB$B_WINDOW	= 44,0,8,0%; 		! DEFAULT WINDOW SIZE 
 MACRO		HMB$B_EXTEND	= 45,0,8,0%; 		! DEFAULT FILE EXTEND 
 MACRO		HMB$B_LRU_LIM	= 46,0,8,0%; 		! DEFAULT LRU LIMIT 
 MACRO		HMB$W_CHECKSUM1	= 58,0,16,0%; 		! FIRST CHECKSUM 
 MACRO		HMB$T_CREDATE	= 60,0,0,0%; 		! VOLUME CREATION DATE 
 LITERAL	HMB$S_CREDATE	= 14; 
 MACRO		HMB$T_VOLNAME2	= 472,0,0,0%; 	! 2ND COPY OF VOLUME NAME 
 LITERAL	HMB$S_VOLNAME2	= 12; 
 MACRO		HMB$T_OWNERNAME	= 484,0,0,0%; 	! VOLUME OWNER NAME 
 LITERAL	HMB$S_OWNERNAME	= 12; 
 MACRO		HMB$T_FORMAT	= 496,0,0,0%; 		! VOLUME FORMAT TYPE 
 LITERAL	HMB$S_FORMAT	= 12; 
 MACRO		HMB$W_CHECKSUM2	= 510,0,16,0%; 		! SECOND CHECKSUM 

  
 !+ 
 ! 
 ! File header definitions for File-11 Structure Level 1 
 ! 
 !- 
  
 !...$FH1DEF		! Header area 
  
 MACRO		FH1$B_IDOFFSET	= 0,0,8,0%; 		! ident area offset in words 
 MACRO		FH1$B_MPOFFSET	= 1,0,8,0%; 		! map area offset in words 
 MACRO		FH1$W_FID	= 2,0,32,0%; 		! file ID 
 MACRO		FH1$W_FID_NUM	= 2,0,16,0%; 	! file number 
 MACRO		FH1$W_FID_SEQ	= 4,0,16,0%; 	! file sequence number 
 MACRO		FH1$W_STRUCLEV	= 6,0,16,0%; 		! file structure level 
 LITERAL	FH1$C_LEVEL1	= 257; 			! 401 octal = structure level 1 
 MACRO		FH1$W_FILEOWNER	= 8,0,16,0%; 		! file owner UIC 
 MACRO		FH1$B_UICMEMBER	= 8,0,8,0%; 	! UIC member number 
 MACRO		FH1$B_UICGROUP	= 9,0,8,0%; 	! UIC group number 
 MACRO		FH1$W_FILEPROT	= 10,0,16,0%; 		! file protection 
 			 
 MACRO		FH1$V_SYSPRO	= 10,0,4,0%; 	! system protection 
 MACRO		FH1$V_OWNPRO	= 10,4,4,0%; 	! owner protection 
 MACRO		FH1$V_GROUPPRO	= 10,8,4,0%; 	! group protection 
 MACRO		FH1$V_WORLDPRO	= 10,12,4,0%; 	! world protection 
 			
 MACRO		FH1$W_FILECHAR	= 12,0,16,0%; 		! file characteristics 
 MACRO		FH1$B_USERCHAR	= 12,0,8,0%; 	! user controlled characteristics 
 			 
 						! reserved 
 MACRO		FH1$V_READCHECK	= 12,3,1,0%; 	! verify all read operations 
 MACRO		FH1$V_WRITCHECK	= 12,4,1,0%; 	! verify all write operations 
 MACRO		FH1$V_CONTIGB	= 12,5,1,0%; 		! keep file as contiguous as possible 
 MACRO		FH1$V_LOCKED	= 12,6,1,0%; 		! file is deacess locked	 
 MACRO		FH1$V_CONTIG	= 12,7,1,0%; 		! file is contiguous 
 			
 MACRO		FH1$B_SYSCHAR	= 13,0,8,0%; 	! system controlled characteristics 
 			 
 						! reserved 
 MACRO		FH1$V_SPOOL	= 13,4,1,0%; 		! intermediate spool file 
 						! reserved 
 MACRO		FH1$V_BADBLOCK	= 13,6,1,0%; 	! file contains bad blocks 
 MACRO		FH1$V_MARKDEL	= 13,7,1,0%; 		! file is marked for delete 
 			
 MACRO		FH1$W_RECATTR	= 14,0,0,0%; 		! file record attributes 
 LITERAL	FH1$S_RECATTR	= 32; 
 LITERAL	FH1$C_LENGTH	= 46; 
 LITERAL	FH1$K_LENGTH	= 46; 			! length of header area 
 MACRO		FH1$W_CHECKSUM	= 510,0,16,0%; 		! file header checksum 

  
 !...$FI1DEF		! Ident area 
  
 MACRO		FI1$W_FILENAME	= 0,0,0,0%; 		! file name (RAD-50) 
 LITERAL	FI1$S_FILENAME	= 6; 
 MACRO		FI1$W_FILETYPE	= 6,0,16,0%; 		! file type (RAD-50) 
 MACRO		FI1$W_VERSION	= 8,0,16,0%; 		! version number (binary) 
 MACRO		FI1$W_REVISION	= 10,0,16,0%; 		! revision number (binary) 
 MACRO		FI1$T_REVDATE	= 12,0,0,0%; 		! revision date (ASCII DDMMMYY) 
 LITERAL	FI1$S_REVDATE	= 7; 
 MACRO		FI1$T_REVTIME	= 19,0,0,0%; 		! revision time (ASCII HHMMSS) 
 LITERAL	FI1$S_REVTIME	= 6; 
 MACRO		FI1$T_CREDATE	= 25,0,0,0%; 		! creation date (ASCII DDMMMYY) 
 LITERAL	FI1$S_CREDATE	= 7; 
 MACRO		FI1$T_CRETIME	= 32,0,0,0%; 		! creation time (ASCII HHMMSS) 
 LITERAL	FI1$S_CRETIME	= 6; 
 MACRO		FI1$T_EXPDATE	= 38,0,0,0%; 		! expiration date (ASCII DDMMMYY) 
 LITERAL	FI1$S_EXPDATE	= 7; 
 LITERAL	FI1$C_LENGTH	= 46; 
 LITERAL	FI1$K_LENGTH	= 46; 			! length of ident area 
 MACRO		FI1$T_MTHDR1	= 46,0,0,0%; 		! HDR1 of ANSI magnetic tape file 
 LITERAL	FI1$S_MTHDR1	= 80; 
 MACRO		FI1$T_MTHDR2	= 126,0,0,0%; 		! HDR2 of ANSI magnetic tape file 
 LITERAL	FI1$S_MTHDR2	= 80; 

  
 !...$FM1DEF		! Map area 
  
 			 
 MACRO		FM1$B_EX_SEGNUM	= 0,0,8,0%; 		! extension segment number of this header 
 MACRO		FM1$B_EX_RVN	= 1,0,8,0%; 		! extension relative volume number 
 MACRO		FM1$W_EX_FILNUM	= 2,0,16,0%; 		! extension file number 
 MACRO		FM1$W_EX_FILSEQ	= 4,0,16,0%; 		! extension file sequence number 
 MACRO		FM1$B_COUNTSIZE	= 6,0,8,0%; 		! retrieval pointer count field size 
 MACRO		FM1$B_LBNSIZE	= 7,0,8,0%; 		! retrieval pointer LBN field size 
 MACRO		FM1$B_INUSE	= 8,0,8,0%; 		! number of retrieval words in use 
 MACRO		FM1$B_AVAIL	= 9,0,8,0%; 		! number of retrieval words available 
 LITERAL	FM1$C_POINTERS	= 10; 
 LITERAL	FM1$K_POINTERS	= 10; 			! start of retrieval pointers 
 LITERAL	FM1$C_LENGTH	= 10; 
 LITERAL	FM1$K_LENGTH	= 10; 			! length of map area 
  
 				! retrieval pointer format 
 			 
 MACRO		FM1$B_HIGHLBN	= 0,0,8,0%; 		! high order LBN 
 MACRO		FM1$B_COUNT	= 1,0,8,0%; 		! block count 
 MACRO		FM1$W_LOWLBN	= 2,0,16,0%; 		! low order LBN 
 			 
 MACRO		FM1$B_PREVHLBN	= -4,0,8,0%;  
 MACRO		FM1$B_PREVCOUNT	= -3,0,8,0%;  
 MACRO		FM1$W_PREVLLBN	= -2,0,16,0%; 		! previous retrieval pointer 
  
  
 !+ 
 ! 
 ! File header definitions for Files-11 Structure Level 2 
 ! 
 !- 
  
 !...$FH2DEF		! Header area 
  
 MACRO		FH2$B_IDOFFSET	= 0,0,8,0%; 		! ident area offset in words 
 MACRO		FH2$B_MPOFFSET	= 1,0,8,0%; 		! map area offset in words 
 MACRO		FH2$B_ACOFFSET	= 2,0,8,0%; 		! access control list offset in words 
 MACRO		FH2$B_RSOFFSET	= 3,0,8,0%; 		! reserved area offset in words 
 MACRO		FH2$W_SEG_NUM	= 4,0,16,0%; 		! file segment number 
 MACRO		FH2$W_STRUCLEV	= 6,0,16,0%; 		! file structure level 
 MACRO		FH2$B_STRUCVER	= 6,0,8,0%; 	! file structure version 
 MACRO		FH2$B_STRUCLEV	= 7,0,8,0%; 	! principal file structure level 
 LITERAL	FH2$C_LEVEL1	= 257; 			! 401 octal = structure level 1 
 LITERAL	FH2$C_LEVEL2	= 512; 			! 1000 octal = structure level 2 
 MACRO		FH2$W_FID	= 8,0,0,0%; 		! file ID 
 LITERAL	FH2$S_FID	= 6; 
 MACRO		FH2$W_FID_NUM	= 8,0,16,0%; 	! file number 
 MACRO		FH2$W_FID_SEQ	= 10,0,16,0%; 	! file sequence number 
 MACRO		FH2$W_FID_RVN	= 12,0,16,0%; 	! relative volume number 
 MACRO		FH2$B_FID_RVN	= 12,0,8,0%; 	! alternate format RVN 
 MACRO		FH2$B_FID_NMX	= 13,0,8,0%; 	! alternate format file number extension 
 MACRO		FH2$W_EXT_FID	= 14,0,0,0%; 		! extension file ID 
 LITERAL	FH2$S_EXT_FID	= 6; 
 MACRO		FH2$W_EX_FIDNUM	= 14,0,16,0%; 	! extension file number 
 MACRO		FH2$W_EX_FIDSEQ	= 16,0,16,0%; 	! extension file sequence number 
 MACRO		FH2$W_EX_FIDRVN	= 18,0,16,0%; 	! extension relative volume number 
 MACRO		FH2$B_EX_FIDRVN	= 18,0,8,0%; 	! alternate format extension RVN 
 MACRO		FH2$B_EX_FIDNMX	= 19,0,8,0%; 	! alternate format extension file number extension 
 MACRO		FH2$W_RECATTR	= 20,0,0,0%; 		! file record attributes 
 LITERAL	FH2$S_RECATTR	= 32; 
 MACRO		FH2$L_FILECHAR	= 52,0,32,0%; 		! file characteristics 
 			 
 						! reserved 
 MACRO		FH2$V_READCHECK	= 52,3,1,0%; 	! verify all read operations 
 LITERAL	FH2$M_READCHECK	= 1^4 - 1^3; 
 MACRO		FH2$V_WRITCHECK	= 52,4,1,0%; 	! verify all write operations 
 LITERAL	FH2$M_WRITCHECK	= 1^5 - 1^4; 
 MACRO		FH2$V_CONTIGB	= 52,5,1,0%; 		! keep file as contiguous as possible 
 LITERAL	FH2$M_CONTIGB	= 1^6 - 1^5; 
 MACRO		FH2$V_LOCKED	= 52,6,1,0%; 		! file is deacess locked	 
 LITERAL	FH2$M_LOCKED	= 1^7 - 1^6; 
 MACRO		FH2$V_CONTIG	= 52,7,1,0%; 		! file is contiguous 
 LITERAL	FH2$M_CONTIG	= 1^8 - 1^7; 
 						! reserved 
 MACRO		FH2$V_SPOOL	= 52,12,1,0%; 		! intermediate spool file 
 LITERAL	FH2$M_SPOOL	= 1^13 - 1^12; 
 MACRO		FH2$V_DIRECTORY	= 52,13,1,0%; 	! file is a directory 
 LITERAL	FH2$M_DIRECTORY	= 1^14 - 1^13; 
 MACRO		FH2$V_BADBLOCK	= 52,14,1,0%; 	! file contains bad blocks 
 LITERAL	FH2$M_BADBLOCK	= 1^15 - 1^14; 
 MACRO		FH2$V_MARKDEL	= 52,15,1,0%; 		! file is marked for delete 
 LITERAL	FH2$M_MARKDEL	= 1^16 - 1^15; 
 			
 MACRO		FH2$B_MAP_INUSE	= 58,0,8,0%; 		! number of map area words in use 
 MACRO		FH2$B_ACC_MODE	= 59,0,8,0%; 		! least privileged access mode 
 MACRO		FH2$L_FILEOWNER	= 60,0,32,0%; 		! file owner UIC 
 MACRO		FH2$W_UICMEMBER	= 60,0,16,0%; 	! UIC member number 
 MACRO		FH2$W_UICGROUP	= 62,0,16,0%; 	! UIC group number 
 MACRO		FH2$W_FILEPROT	= 64,0,16,0%; 		! file protection 
 MACRO		FH2$W_RECPROT	= 66,0,16,0%; 		! record protection 
 MACRO		FH2$L_SEC_MASK	= 68,0,32,0%; 		! file security mask 
 MACRO		FH2$L_SEC_LIMIT	= 72,0,32,0%; 		! file security limit 
 LITERAL	FH2$C_LENGTH	= 76; 
 LITERAL	FH2$K_LENGTH	= 76; 			! length of header area 
 MACRO		FH2$W_CHECKSUM	= 510,0,16,0%; 		! file header checksum 

  
 !...$FI2DEF		! Ident area 
  
 MACRO		FI2$T_FILENAME	= 0,0,0,0%; 		! file name, type, and version (ASCII) 
 LITERAL	FI2$S_FILENAME	= 20; 
 MACRO		FI2$W_REVISION	= 20,0,16,0%; 		! revision number (binary) 
 MACRO		FI2$Q_CREDATE	= 22,0,0,0%; 		! creation date and time 
 LITERAL	FI2$S_CREDATE	= 8; 
 MACRO		FI2$Q_REVDATE	= 30,0,0,0%; 		! revision date and time 
 LITERAL	FI2$S_REVDATE	= 8; 
 MACRO		FI2$Q_EXPDATE	= 38,0,0,0%; 		! expiration date and time 
 LITERAL	FI2$S_EXPDATE	= 8; 
 MACRO		FI2$Q_BAKDATE	= 46,0,0,0%; 		! backup date and time 
 LITERAL	FI2$S_BAKDATE	= 8; 
 LITERAL	FI2$C_LENGTH	= 54; 
 LITERAL	FI2$K_LENGTH	= 54; 			! length of ident area 
 MACRO		FI2$T_USERLABEL	= 54,0,0,0%; 	! optional user file label 
 LITERAL	FI2$S_USERLABEL	= 80; 

  
 !...$FM2DEF		! Map area 
  
 LITERAL	
 $EQULST (FM2$C_,GBL,0,1 			! retrieval pointer type codes 
 	,(PLACEMENT,) 			! 00 = placement control data 
 	,(FORMAT1,) 			! 01 = format 1 
 	,(FORMAT2,) 			! 10 = format 2 
 	,(FORMAT3,) 			! 11 = format 3 
 	); 
 				! format of retrieval pointer 
 MACRO		FM2$W_WORD0	= 0,0,16,0%; 		! first word, of many uses 
 			 
 						! low byte described below 
 MACRO		FM2$V_HIGHLBN	= 0,8,6,0%; 	! high order LBN (format 1) 
 MACRO		FM2$V_FORMAT	= 0,14,2,0%; 	! format type code 
 			
 			 
 MACRO		FM2$V_COUNT2	= 0,0,14,0%; 	! format 2 & 3 count field 
 			
 MACRO		FM2$B_COUNT1	= 0,0,8,0%; 		! format 1 count field 
 LITERAL	FM2$C_LENGTH0	= 2; 
 LITERAL	FM2$K_LENGTH0	= 2; 			! length of format 0 (placement) 
 			 
 MACRO		FM2$W_LOWLBN	= 2,0,16,0%; 		! format 1 low order LBN 
 LITERAL	FM2$C_LENGTH1	= 4; 
 LITERAL	FM2$K_LENGTH1	= 4; 			! length of format 1 
 			 
 MACRO		FM2$L_LBN2	= 2,0,32,0%; 			! format 2 LBN (longword) 
 LITERAL	FM2$C_LENGTH2	= 6; 
 LITERAL	FM2$K_LENGTH2	= 6; 			! length of format 2 
 			 
 MACRO		FM2$W_LOWCOUNT	= 2,0,16,0%; 		! format 3 low order count 
 MACRO		FM2$L_LBN3	= 4,0,32,0%; 			! format 3 LBN (longword) 
 LITERAL	FM2$C_LENGTH3	= 8; 
 LITERAL	FM2$K_LENGTH3	= 8; 			! length of format 3 

  
 !+ 
 ! 
 ! Record attributes area as used by FCS and RMS. 
 ! 
 !- 
  
 !...$FATDEF	
  
 MACRO		FAT$B_RTYPE	= 0,0,8,0%; 		! record type 
 LITERAL	
 $EQULST (FAT$C_,GBL,1,1  
 	,(FIXED,) 			! fixed record type 
 	,(VARIABLE,) 		! variable length 
 	,(VFC,) 			! variable + fixed control 
 	); 
 MACRO		FAT$B_RATTRIB	= 1,0,8,0%; 		! record attributes 
 			 
 MACRO		FAT$V_FORTRANCC	= 1,0,1,0%; 	! Fortran carriage control 
 LITERAL	FAT$M_FORTRANCC	= 1^1 - 1^0; 
 MACRO		FAT$V_IMPLIEDCC	= 1,1,1,0%; 	! implied carriage control 
 LITERAL	FAT$M_IMPLIEDCC	= 1^2 - 1^1; 
 MACRO		FAT$V_PRINTCC	= 1,2,1,0%; 		! print file carriage control 
 LITERAL	FAT$M_PRINTCC	= 1^3 - 1^2; 
 MACRO		FAT$V_NOSPAN	= 1,3,1,0%; 		! no spanned records 
 LITERAL	FAT$M_NOSPAN	= 1^4 - 1^3; 
 			
 MACRO		FAT$W_RSIZE	= 2,0,16,0%; 		! record size in bytes 
 MACRO		FAT$L_HIBLK	= 4,0,32,0%; 			! highest allocated VBN 
 MACRO		FAT$W_HIBLKH	= 4,0,16,0%; 		! high order word 
 MACRO		FAT$W_HIBLKL	= 6,0,16,0%; 		! low order word 
 MACRO		FAT$L_EFBLK	= 8,0,32,0%; 			! end of file VBN 
 MACRO		FAT$W_EFBLKH	= 8,0,16,0%; 		! high order word 
 MACRO		FAT$W_EFBLKL	= 10,0,16,0%; 		! low order word 
 MACRO		FAT$W_FFBYTE	= 12,0,16,0%; 		! first free byte in EFBLK 
 MACRO		FAT$B_BKTSIZE	= 14,0,8,0%; 		! bucket size in blocks 
 MACRO		FAT$B_VFCSIZE	= 15,0,8,0%; 		! size in bytes of fixed length control for VFC records 
 MACRO		FAT$W_MAXREC	= 16,0,16,0%; 		! maximum record size in bytes 
 MACRO		FAT$W_DEFEXT	= 18,0,16,0%; 		! default extend quantity 
 LITERAL	FAT$C_LENGTH	= 20; 
 LITERAL	FAT$K_LENGTH	= 20; 	 
  

  
 !+ 
 ! 
 ! Home block definitions for Files-11 Structure Level 1 
 ! 
 !- 
  
 !...$HM1DEF		! Home block structure 
  
 MACRO		HM1$W_IBMAPSIZE	= 0,0,16,0%; 		! index file bitmap size, blocks 
 MACRO		HM1$L_IBMAPLBN	= 2,0,32,0%; 		! index file bitmap starting LBN 
 MACRO		HM1$W_MAXFILES	= 6,0,16,0%; 		! maximum # files on volume 
 MACRO		HM1$W_CLUSTER	= 8,0,16,0%; 		! storage bitmap cluster factor 
 MACRO		HM1$W_DEVTYPE	= 10,0,16,0%; 		! disk device type 
 MACRO		HM1$W_STRUCLEV	= 12,0,16,0%; 		! volume structure level 
 LITERAL	HM1$C_LEVEL1	= 257; 			! 401 octal = structure level 1 
 MACRO		HM1$T_VOLNAME	= 14,0,0,0%; 		! volume name (ASCII) 
 LITERAL	HM1$S_VOLNAME	= 12; 
 MACRO		HM1$W_VOLOWNER	= 30,0,16,0%; 		! volume owner UIC 
 MACRO		HM1$W_PROTECT	= 32,0,16,0%; 		! volume protection 
 			 
 MACRO		HM1$V_SYSPRO	= 32,0,4,0%; 	! system protection 
 MACRO		HM1$V_OWNPRO	= 32,4,4,0%; 	! owner protection 
 MACRO		HM1$V_GROUPPRO	= 32,8,4,0%; 	! group protection 
 MACRO		HM1$V_WORLDPRO	= 32,12,4,0%; 	! world protection 
 			
 MACRO		HM1$W_VOLCHAR	= 34,0,16,0%; 		! volume characteristics 
 MACRO		HM1$W_FILEPROT	= 36,0,16,0%; 		! default file protection 
 MACRO		HM1$B_WINDOW	= 44,0,8,0%; 		! default window size 
 MACRO		HM1$B_EXTEND	= 45,0,8,0%; 		! default file extend 
 MACRO		HM1$B_LRU_LIM	= 46,0,8,0%; 		! default LRU limit 
 MACRO		HM1$W_CHECKSUM1	= 58,0,16,0%; 		! first checksum 
 MACRO		HM1$T_CREDATE	= 60,0,0,0%; 		! volume creation date 
 LITERAL	HM1$S_CREDATE	= 14; 
 MACRO		HM1$T_VOLNAME2	= 472,0,0,0%; 		! 2nd copy of volume name 
 LITERAL	HM1$S_VOLNAME2	= 12; 
 MACRO		HM1$T_OWNERNAME	= 484,0,0,0%; 	! volume owner name 
 LITERAL	HM1$S_OWNERNAME	= 12; 
 MACRO		HM1$T_FORMAT	= 496,0,0,0%; 		! volume format type 
 LITERAL	HM1$S_FORMAT	= 12; 
 MACRO		HM1$W_CHECKSUM2	= 510,0,16,0%; 		! second checksum 

  
 !+ 
 ! 
 ! Home block definitions for Files-11 Structure Level 2 
 ! 
 !- 
  
 !...$HM2DEF		! Home block structure 
  
 MACRO		HM2$L_HOMELBN	= 0,0,32,0%; 		! LBN of home (i.e., this) block 
 MACRO		HM2$L_ALHOMELBN	= 4,0,32,0%; 		! LBN of alternate home block 
 MACRO		HM2$L_ALTIDXLBN	= 8,0,32,0%; 		! LBN of alternate index file header 
 MACRO		HM2$W_STRUCLEV	= 12,0,16,0%; 		! volume structure level 
 MACRO		HM2$B_STRUCVER	= 12,0,8,0%; 	! structure version number 
 MACRO		HM2$B_STRUCLEV	= 13,0,8,0%; 	! main structure level 
 LITERAL	HM2$C_LEVEL1	= 257; 			! 401 octal = structure level 1 
 LITERAL	HM2$C_LEVEL2	= 512; 			! 1000 octal = structure level 2 
 MACRO		HM2$W_CLUSTER	= 14,0,16,0%; 		! storage bitmap cluster factor 
 MACRO		HM2$W_HOMEVBN	= 16,0,16,0%; 		! VBN of home (i.e., this) block 
 MACRO		HM2$W_ALHOMEVBN	= 18,0,16,0%; 		! VBN of alternate home block 
 MACRO		HM2$W_ALTIDXVBN	= 20,0,16,0%; 		! VBN of alternate index file header 
 MACRO		HM2$W_IBMAPVBN	= 22,0,16,0%; 		! VBN of index file bitmap 
 MACRO		HM2$L_IBMAPLBN	= 24,0,32,0%; 		! LBN of index file bitmap 
 MACRO		HM2$L_MAXFILES	= 28,0,32,0%; 		! maximum # files on volume 
 MACRO		HM2$W_IBMAPSIZE	= 32,0,16,0%; 		! index file bitmap size, blocks 
 MACRO		HM2$W_RESFILES	= 34,0,16,0%; 		! # reserved files on volume 
 MACRO		HM2$W_DEVTYPE	= 36,0,16,0%; 		! disk device type 
 MACRO		HM2$W_RVN	= 38,0,16,0%; 			! relative volume number of this volume 
 MACRO		HM2$W_SETCOUNT	= 40,0,16,0%; 		! count of volumes in set 
 MACRO		HM2$W_VOLCHAR	= 42,0,16,0%; 		! volume characteristics 
 			 
 MACRO		HM2$V_READCHECK	= 42,0,1,0%; 	! verify all read operations 
 LITERAL	HM2$M_READCHECK	= 1^1 - 1^0; 
 MACRO		HM2$V_WRITCHECK	= 42,1,1,0%; 	! verify all write operations 
 LITERAL	HM2$M_WRITCHECK	= 1^2 - 1^1; 
 				 
 MACRO		HM2$V_NOPHYS	= 42,3,1,0%; 		! physical I/O not allowed 
 LITERAL	HM2$M_NOPHYS	= 1^4 - 1^3; 
 MACRO		HM2$V_NOATTACH	= 42,4,1,0%; 	! attach not allowed 
 LITERAL	HM2$M_NOATTACH	= 1^5 - 1^4; 
 			
 MACRO		HM2$L_VOLOWNER	= 44,0,32,0%; 		! volume owner UIC 
 MACRO		HM2$L_SEC_LIMIT	= 48,0,32,0%; 		! volume security mask limit 
 MACRO		HM2$W_PROTECT	= 52,0,16,0%; 		! volume protection 
 MACRO		HM2$W_FILEPROT	= 54,0,16,0%; 		! default file protection 
 MACRO		HM2$W_RECPROT	= 56,0,16,0%; 		! default file record protection 
 MACRO		HM2$W_CHECKSUM1	= 58,0,16,0%; 		! first checksum 
 MACRO		HM2$Q_CREDATE	= 60,0,0,0%; 		! volume creation date 
 LITERAL	HM2$S_CREDATE	= 8; 
 MACRO		HM2$B_WINDOW	= 68,0,8,0%; 		! default window size 
 MACRO		HM2$B_LRU_LIM	= 69,0,8,0%; 		! default LRU limit 
 MACRO		HM2$W_EXTEND	= 70,0,16,0%; 		! default file extend 
 MACRO		HM2$T_STRUCNAME	= 460,0,0,0%; 	! structure (volume set name) 
 LITERAL	HM2$S_STRUCNAME	= 12; 
 MACRO		HM2$T_VOLNAME	= 472,0,0,0%; 		! volume name 
 LITERAL	HM2$S_VOLNAME	= 12; 
 MACRO		HM2$T_OWNERNAME	= 484,0,0,0%; 	! volume owner name 
 LITERAL	HM2$S_OWNERNAME	= 12; 
 MACRO		HM2$T_FORMAT	= 496,0,0,0%; 		! volume format type 
 LITERAL	HM2$S_FORMAT	= 12; 
 MACRO		HM2$W_CHECKSUM2	= 510,0,16,0%; 		! second checksum 

  
 !+ 
 ! 
 ! Directory entry structure for Files-11 Structure Level 2 
 ! 
 !- 
  
 !...$DIRDEF	
  
 			 
 MACRO		DIR$W_SIZE	= 0,0,16,0%; 		! size of directory record in bytes 
 MACRO		DIR$W_VERLIMIT	= 2,0,16,0%; 		! maximum number of versions 
 MACRO		DIR$B_FLAGS	= 4,0,8,0%; 		! status flags 
 			 
 MACRO		DIR$V_TYPE	= 4,0,3,0%; 		! directory entry type 
 						! reserved 
 MACRO		DIR$V_NEXTREC	= 4,6,1,0%; 		! another record of same name & type follows 
 MACRO		DIR$V_PREVREC	= 4,7,1,0%; 		! another record of same name & type precedes 
 			
 LITERAL	
 $EQULST (DIR$C_,GBL,0,1 		! directory entry type codes 
 	,(FID,) 			! normal file ID 
 	,(LINKNAME,) 		! symbolic name 
 	); 
 MACRO		DIR$B_NAMECOUNT	= 5,0,8,0%; 		! byte count of name string 
 LITERAL	DIR$C_LENGTH	= 6; 
 LITERAL	DIR$K_LENGTH	= 6; 			! length of directory entry overhead 
 MACRO		DIR$T_NAME	= 6,0,0,0%; 		! name string 
 				! the version numbers and file ID's follow the 
 				! variable length name area in the form of a 
 				! blockvector. Each entry is as follows: 
 			 
 MACRO		DIR$W_VERSION	= 0,0,16,1%; 		! version number 
 MACRO		DIR$W_FID	= 2,0,0,0%; 		! file ID 
 LITERAL	DIR$S_FID	= 6; 
 MACRO		DIR$W_FID_NUM	= 2,0,16,0%; 	! file number 
 MACRO		DIR$W_FID_SEQ	= 4,0,16,0%; 	! file sequence number 
 MACRO		DIR$W_FID_RVN	= 6,0,16,0%; 	! relative volume number 
 LITERAL	DIR$C_VERSION	= 8; 
 LITERAL	DIR$K_VERSION	= 8; 			! size of each version entry 
  
 			 
 MACRO		DIR$T_LINKNAME	= 0,0,8,0%; 		! symbolic link name (counted string) 

  
 !+ 
 ! 
 ! Format of storage control block, Files-11 Structure Level 2 
 ! 
 !- 
  
 !...$SCBDEF	
  
 MACRO		SCB$W_STRUCLEV	= 0,0,16,0%; 		! file structure level 
 MACRO		SCB$B_STRUCVER	= 0,0,8,0%; 	! file structure version 
 MACRO		SCB$B_STRUCLEV	= 1,0,8,0%; 	! principal file structure level 
 LITERAL	SCB$C_LEVEL2	= 512; 			! 1000 octal = structure level 2 
 MACRO		SCB$W_CLUSTER	= 2,0,16,0%; 		! storage map cluster factor 
 MACRO		SCB$L_VOLSIZE	= 4,0,32,0%; 		! volume size in logical blocks 
 MACRO		SCB$L_BLKSIZE	= 8,0,32,0%; 		! number of physical blocks per logical block 
 MACRO		SCB$L_SECTORS	= 12,0,32,0%; 		! number of sectors per track 
 MACRO		SCB$L_TRACKS	= 16,0,32,0%; 		! number of tracks per cylinder 
 MACRO		SCB$L_CYLINDER	= 20,0,32,0%; 		! number of cylinders 
 MACRO		SCB$L_STATUS	= 24,0,32,0%; 		! volume status flags 
 			 
 MACRO		SCB$V_MAPDIRTY	= 24,0,1,0%; 	! storage map is dirty (partially updated) 
 LITERAL	SCB$M_MAPDIRTY	= 1^1 - 1^0; 
 			
 MACRO		SCB$W_CHECKSUM	= 510,0,16,0%; 		! block checksum 

  
 !+ 
 ! 
 ! Bad block map (generated by bad block scan program) 
 ! 
 !- 
  
 !...$BBMDEF	
  
 			 
 MACRO		BBM$B_COUNTSIZE	= 0,0,8,0%; 		! retrieval pointer count field size 
 MACRO		BBM$B_LBNSIZE	= 1,0,8,0%; 		! retrieval pointer LBN field size 
 MACRO		BBM$B_INUSE	= 2,0,8,0%; 		! number of retrieval words in use 
 MACRO		BBM$B_AVAIL	= 3,0,8,0%; 		! number of retrieval words available 
 LITERAL	BBM$C_POINTERS	= 4; 
 LITERAL	BBM$K_POINTERS	= 4; 			! start of retrieval pointers 
 MACRO		BBM$W_CHECKSUM	= 510,0,16,0%; 		! block checksum 
  
 				! retrieval pointer format 
 			 
 MACRO		BBM$B_HIGHLBN	= 0,0,8,0%; 		! high order LBN 
 MACRO		BBM$B_COUNT	= 1,0,8,0%; 		! block count 
 MACRO		BBM$W_LOWLBN	= 2,0,16,0%; 		! low order LBN 
 			 
 MACRO		BBM$B_PREVHLBN	= -4,0,8,0%;  
 MACRO		BBM$B_PREVCOUNT	= -3,0,8,0%;  
 MACRO		BBM$W_PREVLLBN	= -2,0,16,0%; 		! previous retrieval pointer 
  
  
 !+ 
 ! 
 ! Bad block descriptor (generated by formatters for RK06, RM03, et al) 
 ! 
 !- 
  
 !...$BBDDEF	
  
 			 
 MACRO		BBD$L_SERIAL	= 0,0,32,0%; 		! pack serial number 
 MACRO		BBD$W_RESERVED	= 4,0,16,0%; 		! reserved area (MBZ) 
 MACRO		BBD$W_FLAGS	= 6,0,16,0%; 		! pack status flags (zero for normal use) 
 LITERAL	BBD$C_DESCRIPT	= 8; 
 LITERAL	BBD$K_DESCRIPT	= 8; 			! start of bad block descriptors 
 MACRO		BBD$L_LASTWORD	= 508,0,32,0%; 		! last longword of block 
  
 			 
 MACRO		BBD$L_BADBLOCK	= 0,0,32,0%; 		! individual bad block entry 
 			 
 MACRO		BBD$V_CYLINDER	= 0,0,15,0%; 		! cylinder number of bad block 
 				 
 MACRO		BBD$V_SECTOR	= 0,16,8,0%; 		! sector number of bad block 
 MACRO		BBD$V_TRACK	= 0,24,7,0%; 		! track number of bad block 
 			
 LITERAL	BBD$C_ENTRY	= 4; 
 LITERAL	BBD$K_ENTRY	= 4; 	 

  
 !+ 
 ! 
 ! Pending bad block file record format. Each record describes a disk block 
 ! on which an error has occurred which has not been turned over to the bad block 
 ! file. 
 ! 
 !- 
  
 !...$PBBDEF	
  
 MACRO		PBB$W_FID	= 0,0,0,0%; 			! File ID of containing file 
 LITERAL	PBB$S_FID	= 6; 
 MACRO		PBB$B_FLAGS	= 6,0,8,0%; 			! status flags 
 			 
 MACRO		PBB$V_READERR	= 6,0,1,0%; 			! read error occurred 
 LITERAL	PBB$M_READERR	= 1^1 - 1^0; 
 MACRO		PBB$V_WRITERR	= 6,1,1,0%; 			! write error occurred 
 LITERAL	PBB$M_WRITERR	= 1^2 - 1^1; 
 			
 MACRO		PBB$B_COUNT	= 7,0,8,0%; 			! error count 
 MACRO		PBB$L_VBN	= 8,0,32,0%; 				! virtual block in file 
 MACRO		PBB$L_LBN	= 12,0,32,0%; 				! logical block number 
 LITERAL	PBB$C_LENGTH	= 16; 
 LITERAL	PBB$K_LENGTH	= 16; 				! length of entry 
  

