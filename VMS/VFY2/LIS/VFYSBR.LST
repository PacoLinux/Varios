VFYSBR M0104, VFY - ROOT SUBROU	MACRO M1110  22-AUG-78 00:36
TABLE OF CONTENTS

     7-    1	**** VFYSBR VERSION M0104 ****
     8-   39	SCAN THE HEADERS IN THE INDEX FILE
    11-  151	RDCKHD - READ AND CHECK HEADER
    12-  213	LBNBIT - CONVERT LBN TO WORD AND BIT NUMBER
    13-  263	FIXEOF, BITREC, DETACH, SETREC
    14-  314	READ AND VERIFY HEADER
    15-  368	LISTING OUTPUT SUBROUTINE - USES EDMSG
    20-  520	GET ONE RETRIEVAL POINTER FROM THE MAP AREA.
    22-  599	FORMAT STRINGS
VFYSBR M0104, VFY - ROOT SUBROU	MACRO M1110  22-AUG-78 00:36  PAGE 7


      1						.TITLE	VFYSBR M0104, VFY - ROOT SUBROUTINES
						.SBTTL	**** VFYSBR VERSION M0104 ****
						.IDENT	/M0104/
      2					; ALTERED:
      3					; ANDREW C. GOLDSTEIN  26-JUL-78  10:23
      4					;
      5					; COPYRIGHT (C) 1977
      6					; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS 01754
      7					;
      8					; THIS SOFTWARE IS FURNISHED  UNDER A LICENSE FOR USE ONLY ON A SINGLE
      9					; COMPUTER  SYSTEM AND  MAY BE  COPIED ONLY WITH  THE INCLUSION OF THE
     10					; ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,
     11					; MAY NOT BE PROVIDED OR  OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
     12					; EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE
     13					; TERMS.  TITLE TO AND  OWNERSHIP OF THE  SOFTWARE  SHALL AT ALL TIMES
     14					; REMAIN IN DEC.
     15					;
     16					; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE
     17					; AND SHOULD  NOT BE CONSTRUED  AS A COMMITMENT  BY DIGITAL  EQUIPMENT
     18					; CORPORATION.
     19					;
     20					; DEC ASSUMES  NO  RESPONSIBILITY  FOR  THE USE OR  RELIABILITY OF ITS
     21					; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
     22
     23					;
     24					; PETER H. LIPMAN 28-OCT-74
     25					; ALTERED MONDAY 4-NOV-74 14:25
     26					;
     27					;	DHC001	9/6/77	ADD RETURN WITH STATUS
     28					;
     29					;	DHC002	9/13/77	FIX FILE HEADER PRINT BUG
     30					;
     31						.MCALL	CALL,CALLR,RETURN,FDAT$R,FDRC$R
     32						.MCALL	OPEN$W,OPNS$R,OPNS$M,GET$,PUT$
     33						.MCALL	FHDL2$,HMBL2$		;FILE HEADER & HOME BLOCK OFFSETS.
     34	000000					FHDL2$	DEF$L			;DEFINE FILE HEADER OFFSETS LOCALLY.
     35	000000					HMBL2$	DEF$L			;DEFINE HOME BLOCK OFFSETS LOCALLY.
     36	000000					PURE.I
VFYSBR M0104, VFY - ROOT SUBROU	MACRO M1110  22-AUG-78 00:36  PAGE 8
**** VFYSBR VERSION M0104 ****

     38
     39						.SBTTL	SCAN THE HEADERS IN THE INDEX FILE
     40					;
     41					; SCAN FOR BITS ON IN THE INDEX FILE BIT MAP
     42					; FOR EACH BIT FOUND, READ AND VERIFY THE CORRESPONDING FILE HEADER
     43					;
     44					;
     45					; MOVE BITMAP ADDRESSED BY R1, TO BITMAP ADDRESSED BY R2
     46					;
     47	000000	010160 	000002G		MULSCN::MOV	R1,F.RCNM+2(R0)
     48	000004					GET$	R0,,,RDERR
     49	000016	005201 				INC	R1
     50	000020	010260 	000002G			MOV	R2,F.RCNM+2(R0)
     51	000024					PUT$	R0,,,WRTERR
     52	000036	005202 				INC	R2
     53	000040					SOB	R3,MULSCN
     54	000044	012701 	000002 			MOV	#2,R1		;RESET RECORD SIZE TO 2 BYTES
     55	000050	012702 	000000G			MOV	#BITWRD,R2
     56	000054					CALL	SETREC
     57	000060	012700 	000000G		INXSC2::MOV	#INDEX,R0
     58	000064	016704 	000000G		INXSCN::MOV	IBVBN,R4	;FIRST VBN OF INDEX FILE BIT MAP
     59	000070	016705 	000000G			MOV	SINXBT,R5	;NO. OF BLOCKS
     60	000074	010046 				MOV	R0,-(SP)	;SAVE FDB ADDR .
     61					;
     62	000076	011600 			INXSC1::MOV	@SP,R0		;RESTORE FDB ADDRESS TO R0.
     63	000100	010460 	000002G			MOV	R4,F.RCNM+2(R0)
     64	000104					FDRC$R	R0,#FD.RAN	;TEMPORARILY MOVE MODE
     65	000112					GET$	R0,,,RDERR	;READ INDEX FILE BIT MAP PAGE
     66	000124					FDRC$R	R0,#FD.RAN!FD.PLC ;BACK TO PARTIAL LOCATE MODE
     67	000132	012703 	000400 			MOV	#256.,R3	;NO. OF WORDS IN BLOCK
     68	000136	016002 	000002G			MOV	F.NRBD+2(R0),R2	;ADDRESS OF BLOCK
     69	000142	012200 			10$:	MOV	(R2)+,R0	;GET NEXT BIT WORD
     70	000144	012701 	000020 			MOV	#16.,R1		;16 BITS PER WORD
     71	000150	062767 	000001 	000000G	20$:	ADD	#1,NXTFID	;INCREMENT THE FILE ID.
     72	000156	105567 	000005G			ADCB	NXTFID+5	;FILE ID IS 24 BITS.
     73	000162	006000 				ROR	R0		;DOES THIS FILE ID EXISTS
     74	000164	103002 				BCC	40$		;BRANCH IF NO
     75	000166					CALL	RDCKHD		;YES, CHECK THIS HEADER
     76	000172				40$:	SOB	R1,20$		;NEXT BIT IN WORD
     77	000176					SOB	R3,10$		;NEXT WORD IN BLOCK
     78	000202	005204 				INC	R4
     79	000204					SOB	R5,INXSC1	;NEXT BLOCK IN INDEX FILE BIT MAP
     80	000210	005726 				TST	(SP)+		;CLEAR THE FDB ADDRESS FROM THE STACK
     81	000212	032767 	000000C	000000G		BIT	#LISTBT!RDCKBT,VFYCTL
     82	000220	001015 				BNE	45$		;BRANCH IF LIST OR READ CHECK COMMAND
     83	000222	032767 	000000G	000000G		BIT	#LOSTBT,VFYCTL
     84	000230	001413 				BEQ	50$		;BRANCH IF NOT LOST COMMAND
     85	000232	012702 	000000G			MOV	#MOPRM,R2	;SAY HOW MANY FILES WERE LOST
     86	000236	016712 	000000G			MOV	LOSTCT,@R2
     87	000242	005212 				INC	@R2		;STARTED AT -1
     88	000244	012701 	000263'			MOV	#LO31MG,R1
     89	000250					CALL	OUT1
     90	000254	000167 	000000G		45$:	JMP	RSTART
VFYSBR M0104, VFY - ROOT SUBROU	MACRO M1110  22-AUG-78 00:36  PAGE 9
SCAN THE HEADERS IN THE INDEX FILE

     92					;
     93					; NOW PRINT OUT HOW MUCH ROOM IS FREE ACCORDING TO BOTH MAPS
     94					;
     95	000260	012700 	000000G		50$:	MOV	#TBTMAP,R0	;FREE SPACE ACCORDING TO INDEX FILE
     96	000264	012703 	000417'			MOV	#LO42MG,R3
     97	000270					CALL	OUTFRE
     98					;
     99	000274	012700 	000000G			MOV	#BITMAP,R0	;FREE SPACE ACCORDING TO BIT MAP
    100	000300	012703 	000443'			MOV	#LO43MG,R3
    101	000304					CALL	OUTFRE
    102					;
    103	000310	012701 	000465'			MOV	#LO46MG,R1	;EXTRA CR,LF
    104	000314	005002 				CLR	R2
    105	000316					CALL	OUT1
    106					;
    107	000322	032767 	000000G	000000G		BIT	#PASS2,VFYCTL	;ALREADY DONE 2ND PASS?
    108	000330	001057 				BNE	80$		;BRANCH IF YES
    109	000332	005767 	000000G			TST	MLTALC		;ANY MULTIPLE ALLOCATION ERRORS?
    110	000336	001454 				BEQ	80$		;BRANCH IF NO, ALL DONE
    111					;
    112					; TAKE A 2ND PASS TO GET NAMES AND ID'S OF ALL FILES THAT SHARE BLOCKS
    113	000340	052767 	000000G	000000G		BIS	#PASS2,VFYCTL	;NOTE THAT WE'RE IN 2ND PASS
    114	000346	012701 	000322'			MOV	#LO32MG,R1
    115	000352	005002 				CLR	R2
    116	000354	132767 	000000G	000000C		BITB	#FD.TTY,FDBOUT+F.RCTL ;IF OUTPUT TO TTY
    117	000362	001401 				BEQ	65$
    118	000364	005201 				INC	R1		;SKIP THE FORM FEED
    119	000366				65$:	CALL	OUT1		;RESCAN HEADER LINE
    120	000372	005067 	000000G			CLR	NXTFID
    121	000376	105067 	000005G			CLRB	NXTFID+5	;FILE ID IS 24 BITS.
    122	000402	012700 	000000G			MOV	#BITMAP,R0
    123	000406	012701 	000002 			MOV	#2,R1
    124	000412	012702 	000000G			MOV	#BITWRD,R2
    125	000416					CALL	SETREC		;SET RECORD SIZE TO 2 FOR BITMAP
    126	000422					FDRC$R	#TBTMAP,#FD.RAN
    127	000434	012701 	001000 			MOV	#512.,R1
    128	000440	012702 	000000G			MOV	#INXBIT,R2
    129	000444					CALL	SETREC		;SET RECORD SIZE TO 1 BLOCK
    130					; SET UP TO MOVE THE MULT ALLOC BIT MAP OVER THE REGULAR BIT MAP
    131	000450	016703 	000000G			MOV	NBTBLK,R3
    132	000454	016702 	000000G			MOV	FBTBLK,R2	;R2=DESTINATION ADDRESS
    133	000460	010201 				MOV	R2,R1
    134	000462	060301 				ADD	R3,R1		;R1=SOURCE OF BITMAP
    135					;
    136					; MOVE THE MULTIPLE ALLOCATION BIT MAP INTO POSITION, AND START RESCAN
    137	000464	000167 	177310 			JMP	MULSCN
    138					;
    139					;
    140	000470	000167 	000000G		80$:	JMP	RSTART
VFYSBR M0104, VFY - ROOT SUBROU	MACRO M1110  22-AUG-78 00:36  PAGE 10
SCAN THE HEADERS IN THE INDEX FILE

    142
    143
    144					; READ ERROR ON FILE IN R0
    145	000474				RDERR::	ERROUX	ER11,0,0
	000474	104427 				TRAP	X
	000476	000000G				.WORD	ER11SZ
	000500	000000G				.WORD	ER11MG
    146
    147					; WRITE ERROR ON FILE IN R0
    148	000502				WRTERR::ERROUX	ER12,0,0
	000502	104427 				TRAP	X
	000504	000000G				.WORD	ER12SZ
	000506	000000G				.WORD	ER12MG
    149
VFYSBR M0104, VFY - ROOT SUBROU	MACRO M1110  22-AUG-78 00:36  PAGE 11
RDCKHD - READ AND CHECK HEADER

    151						.SBTTL	RDCKHD - READ AND CHECK HEADER
    152					;
    153					; READ AND CHECK ALLOCATION FOR FILE HEADER
    154					; PRESERVES ALL REGISTERS
    155					;
    156	000510				RDCKHD::CALL	$SAVAL
    157	000514	012700 	000000G			MOV	#INDEX,R0
    158	000520					CALL	INIOUT
    159	000524	116704 	000005G			MOVB	NXTFID+5,R4	;FILE ID IS 24 BITS.
    160	000530	016705 	000000G			MOV	NXTFID,R5	;FILE ID TO BE CHECKED
    161	000534	010560 	000002G			MOV	R5,F.RCNM+2(R0) ;SET UP TO READ THE HEADER
    162	000540	010460 	000000G			MOV	R4,F.RCNM(R0)	;HIGH ORDER OF FILE ID TO REC #.
    163	000544	066705 	000000G			ADD	INXOFF,R5	;FORM VBN IN INDEX FILE
    164	000550	005504 				ADC	R4
    165	000552	020460 	000000G			CMP	R4,F.HIBK(R0)	;BEYOND EOF ?
    166	000556	001002 				BNE	4$
    167	000560	020560 	000002G			CMP	R5,F.HIBK+2(R0)	;BEYOND EOF?
    168	000564	101053 			4$:	BHI	50$		;BRANCH IF YES, ERROR
    169	000566					CALL	RDHEDR		;READ AND VERIFY THE FILE HEADER
    170	000572	103460 				BCS	60$		;BRANCH IF HEADER WAS NO GOOD
    171	000574	032767 	000000G	000000G		BIT	#LISTBT,VFYCTL	;LISTING THE INDEX FILE?		;**-1
    172	000602	001052 				BNE	55$		;BRANCH IF YES
    173	000604	032767 	000000G	000000G		BIT	#RDCKBT,VFYCTL	;READ CHECK OF THE FILES?
    174	000612	001402 				BEQ	5$		;BRANCH IF NO
    175	000614					CALLR	RDFIL		;YES, GO READ THE ENTIRE FILE
    176					;
    177					; IS THE FILE THE TEMP FILE?  IF IT IS SKIP IT FOR THE
    178					; /LO COMMANDS, AND DON'T CHECK THE DELETE BIT
    179					;
    180	000620	026167 	000010 	000000C	5$:	CMP	H.FNUM(R1),TBTMAP+F.FNB+N.FID ;FILE NUMBER?
    181	000626	001022 				BNE	10$
    182	000630	026167 	000012 	000000C		CMP	H.FSEQ(R1),TBTMAP+F.FNB+N.FID+2 ;FILE SEQUENCE NO.
    183	000636	001016 				BNE	10$
    184	000640	026767 	000000C	000000C		CMP	INDEX+F.DVNM,TBTMAP+F.DVNM ;DEVICE?
    185	000646	001012 				BNE	10$
    186	000650	026767 	000000C	000000C		CMP	INDEX+F.UNIT,TBTMAP+F.UNIT ;UNIT?
    187	000656	001006 				BNE	10$
    188					;
    189					; THIS IS THE TEMP FILE
    190					;
    191	000660	032767 	000000G	000000G		BIT	#LOSTBT,VFYCTL	;LOST FILE SCAN?
    192	000666	001024 				BNE	80$		;BRANCH IF YES, ,DON'T REPORT IT
    193	000670					CALLR	CONCK1		;NO, CHECK CONSISTENCY, BUT NOT DEL BIT
    194	000674	032767 	000000G	000000G	10$:	BIT	#LOSTBT,VFYCTL	;SCANNING FOR LOST FILES?
    195	000702	001402 				BEQ	20$		;BRANCH IF NO
    196	000704					CALLR	ENTERL		;YES, ENTER THIS ONE IN THE LOST FILE DIR
    197	000710				20$:	CALLR	CONCHK		;CHECK THE CONSISTENCY
    198					;
    199					; HEADER IS BEYOND INDEX FILE END OF FILE
    200					;
    201	000714	012701 	000470'		50$:	MOV	#LO47MG,R1	;FILE HEADER BEYOND INDEX FILE EOF
    202	000720	005002 				CLR	R2
    203	000722					CALL	OUTC
    204	000726	000402 				BR	60$
VFYSBR M0104, VFY - ROOT SUBROU	MACRO M1110  22-AUG-78 00:36  PAGE 12
RDCKHD - READ AND CHECK HEADER

    206					;
    207					; LIST THE FILE
    208					;
    209	000730				55$:	CALL	HDROUT
    210	000734				60$:	CALL	TRMOUT
    211	000740				80$:	RETURN
    212					;
    213						.SBTTL	LBNBIT - CONVERT LBN TO WORD AND BIT NUMBER
    214					;
    215					; CONVERT LBN TO WORD NUMBER IN STORAGE BIT MAP AND BIT MASK.
    216					;
    217					; INPUT
    218					;	R2,R3	=HIGH, LOW ORDER LBN
    219					; OUTPUT
    220					;	R2,R3	=WORD NUMBER-(1ST WORD=0)
    221					;	R1	=MASK FOR DESIRED BIT WITHIN WORD.
    222					;
    223	000742				LBNBIT::
    224					;
    225					; DIVIDE THE LBN (R2,R3) BY STORAGE BIT MAP CLUSTER FACTOR.
    226					;
    227	000742	010046 				MOV	R0,-(SP)	;SAVE CALLER'S R0.
    228	000744	010201 				MOV	R2,R1		;REARRANGE AS REQUIRED BY
    229	000746	010302 				MOV	R3,R2		;DOUBLE PRECISION DIVIDE ROUTINE.
    230	000750	016700 	000000G			MOV	SBCLUS,R0	;CLUSTER FACTOR BECOMES DIVISOR.
    231	000754					CALL	$DDIV		;DIVIDE R1,R2 BY R0. QUOT IN R1,R2.
    232	000760	010203 				MOV	R2,R3		;REARRANGE AS REQUIRED BY THIS
    233	000762	010102 				MOV	R1,R2		;ENVIRONMENT.
    234	000764	012600 				MOV	(SP)+,R0	;RESTORE CALLER'S R0.
    235					;
    236					; ENTRY POINT TO CONVERT A (FILE NUMBER-1) TO WORD NUMBER AND BIT MASK.
    237					;
    238	000766				IBMBIT::
    239	000766	012701 	000001 			MOV	#1,R1
    240	000772	010346 				MOV	R3,-(SP)
    241	000774	042716 	177760 			BIC	#177760,@SP	;ISOLATE LOW 4 BITS.
    242
    243						.IF	GT,R$$EIS
    244						ASH	(SP)+,R1	;GENERATE MASK FOR BIT WITHIN WORD.
    245						ASHC	#-4,R2		;CONVERT BIT # TO WORD #.
    246
    247						.IFF
    248	001000	001403 				BEQ	20$
    249	001002	006301 			10$:	ASL	R1		;SHIFT R1 LEFT BY COUNT ON STACK
    250	001004	005316 				DEC	(SP)		;FORMING BIT MASK
    251	001006	003375 				BGT	10$
    252	001010	005726 			20$:	TST	(SP)+		;POP THE SHIFT COUNT
    253	001012	012746 	000004 			MOV	#4,-(SP)	;RIGHT SHIFT COUPLED R2,R3 BY 4
    254	001016	006202 			30$:	ASR	R2
    255	001020	006003 				ROR	R3
    256	001022	005316 				DEC	(SP)
    257	001024	003374 				BGT	30$
    258	001026	005726 				TST	(SP)+		;POP THE EXHAUSTED SHIFT COUNT
    259						.ENDC
    260
    261	001030					RETURN
VFYSBR M0104, VFY - ROOT SUBROU	MACRO M1110  22-AUG-78 00:36  PAGE 13
FIXEOF, BITREC, DETACH, SETREC

    263						.SBTTL	FIXEOF, BITREC, DETACH, SETREC
    264					; USE THE FILE SIZE FROM THE STATISTICS BLOCK TO SET EFBK AND FFBY
    265	001032	005060 	000002G		FIXEOF::CLR	F.VBN+2(R0)	;FIX UP THE EOF AND CURRENT BLOCK NO
    266	001036	016760 	000004G	000000G		MOV	STBLK+4,F.EFBK(R0)
    267	001044	016760 	000006G	000002G		MOV	STBLK+6,F.EFBK+2(R0)
    268	001052	016760 	000004G	000000G		MOV	STBLK+4,F.HIBK(R0)
    269	001060	016760 	000006G	000002G		MOV	STBLK+6,F.HIBK+2(R0)
    270	001066	062760 	000001 	000002G		ADD	#1,F.EFBK+2(R0)
    271	001074	005560 	000000G			ADC	F.EFBK(R0)
    272	001100	005060 	000000G			CLR	F.FFBY(R0)
    273	001104					RETURN
    274					; R0=FDB,R2,R3=RECORD NO RELATIVE TO BEGINNING OF MAP AREA
    275	001106	010260 	000000G		BITREC::MOV	R2,F.RCNM(R0)	;SET THE DESIRED RECORD NUMBER
    276	001112	010360 	000002G			MOV	R3,F.RCNM+2(R0)
    277	001116	066760 	000000G	000002G		ADD	MAPOFF,F.RCNM+2(R0) ;ADD IN THE OFFSET
    278	001124	005560 	000000G			ADC	F.RCNM(R0)
    279	001130					RETURN
    280					;
    281					; DETACH THE OUTPUT LISTING DEVICE IF NECESSARY
    282					;
    283	001132	005760 	000000G		DETACH::TST	F.BDB(R0)	;IF CLOSED, DON'T DETACH
    284	001136	001425 				BEQ	20$
    285	001140	032767 	000000G	000000G		BIT	#DEVATT,OUTCTL	;IF NOT RECORDED ATTACHED, DON'T DETACH
    286	001146	001421 				BEQ	20$
    287	001150	042767 	000000G	000000G		BIC	#DEVATT,OUTCTL	;RECORD DEVICE DETACHED
    288	001156	012701 	000000G			MOV	#IO.DET,R1
    289	001162	005002 				CLR	R2
    290	001164					CALL	.XQIO		;ISSUE THE DETACH QI/O
    291	001170	103010 				BCC	20$
    292	001172					ERROUT	ER06,0,0	;FAILED TO DETACH
	001172	104426 				TRAP	X
	001174	000000G				.WORD	ER06SZ
	001176	000000G				.WORD	ER06MG
    293	001200	016767 	000000G	000000G		MOV	EX$WAR,.EXSTS	; SET STATUS TO WARNING			;DHC001
    294	001206	000167 	000000G			JMP	RSTART
    295	001212				20$:	RETURN
    296					;
    297					;+
    298					; SET RECORD SIZE AND BUFFER
    299					; CALLING SEQUENCE:
    300					;	CALL	SETREC
    301					; INPUTS:
    302					;	R0=FDB
    303					;	R1=RECORD SIZE
    304					;	R2=RECORD BUFFER ADDRESS
    305					; OUTPUTS:
    306					;	ALL REGISTERS PRESERVED
    307					;-
    308	001214	010160 	000000G		SETREC::MOV	R1,F.NRBD(R0)
    309	001220	010260 	000002G			MOV	R2,F.NRBD+2(R0)	;NEXT RECORD BUFFER ADDRESS AND SIZE
    310	001224					FDAT$R	R0,,,R1
    311	001230					FDRC$R	R0,,R2,R1
    312	001240					RETURN
VFYSBR M0104, VFY - ROOT SUBROU	MACRO M1110  22-AUG-78 00:36  PAGE 14
READ AND VERIFY HEADER

    314						.SBTTL	READ AND VERIFY HEADER
    315					;+
    316					; READ AND VERIFY FILE HEADER
    317					; INPUTS:
    318					;	R0=FDB ADDRESS
    319					; OUTPUTS:
    320					;	ALL REGISTERS ALTERED
    321					;	C=0 FOR CORRECTLY READ AND VERIFIED HEADER, R1=ADDRESS OF HEADER
    322					;	C=1 IF HEADER WAS BAD, MESSAGE ALREADY SENT
    323					;-
    324	001242	066760 	000000G	000002G	RDHEDR::ADD	INXOFF,F.RCNM+2(R0)
    325	001250	005560 	000000G			ADC	F.RCNM(R0)	;FILE ID IS 24 BITS.
    326	001254					GET$	R0
    327	001260	103426 				BCS	50$		;BRANCH IF I/O ERROR READING HEADER
    328	001262	052767 	000000G	000000G		BIS	#HDROK,OUTCTL	; INDICATE HEADER IS IN CORE		;DHC002
    329	001270	016001 	000002G			MOV	F.NRBD+2(R0),R1
    330	001274	026761 	000000G	000010 		CMP	NXTFID,H.FNUM(R1) ;DOES FILE ID (LOW BITS) AGREE ?
    331	001302	001021 				BNE	60$		;BRANCH IF BAD DATA
    332					;
    333					; RECOMPUTE THE CHECKSUM AND CMP TO ORIGINAL.
    334					;
    335	001304	012704 	000377 			MOV	#255.,R4	;NUMBER OF WORDS TO SUM
    336	001310	005003 				CLR	R3		;COLLECT CHECKSUM HERE
    337	001312	010102 				MOV	R1,R2
    338	001314	062203 			10$:	ADD	(R2)+,R3	;ADDITIVE CHECKSUM
    339	001316					SOB	R4,10$
    340	001322	021203 				CMP	@R2,R3		;CHECKSUM OK?
    341	001324	001010 				BNE	60$		;BRANCH IF NO
    342					;
    343					; FILE NUMBER MUST BE NON ZERO.
    344	001326	005761 	000010 			TST	H.FNUM(R1)
    345	001332	001405 				BEQ	60$		;ERROR IF FILE NUMBER IS 0
    346	001334					RETURN
    347					;
    348					; READ ERROR ON FILE HEADER
    349	001336	012701 	000162'		50$:	MOV	#LO20MG,R1
    350	001342					CALLR	HDRERR
    351					;
    352					; BAD FILE HEADER, DATA IS INCONSISTENT
    353	001346	016761 	000000G	000010 	60$:	MOV	NXTFID,H.FNUM(R1) ;SET FILE NUMBER IN HEADER FOR MESSAGE
    354	001354	012701 	000242'			MOV	#LO21MG,R1
    355	001360	005002 				CLR	R2
    356	001362					CALL	OUTC
    357	001366	000261 			99$:	SEC
    358	001370					RETURN
    359					;
    360					; I/O ERROR READING OR WRITING INDEX FILE
    361	001372	012702 	000000G		HDRERR::MOV	#MOPRM,R2
    362	001376	116000 	000000G			MOVB	F.ERR(R0),R0
    363	001402	010012 				MOV	R0,@R2
    364	001404					CALL	OUTC
    365	001410	000261 				SEC
    366	001412					RETURN
VFYSBR M0104, VFY - ROOT SUBROU	MACRO M1110  22-AUG-78 00:36  PAGE 15
LISTING OUTPUT SUBROUTINE - USES EDMSG

    368						.SBTTL	LISTING OUTPUT SUBROUTINE - USES EDMSG
    369
    370					; OUTPUT MSG WITH LOGICAL BLOCK NUMBER, R1=FORMAT STRING
    371	001414	012702 	000000G		OUTLB::	MOV	#MOPRM,R2
    372	001420	016712 	000000G			MOV	LBN,@R2
    373	001424	016762 	000002G	000002 		MOV	LBN+2,2(R2)
    374	001432					CALLR	OUTC
    375					;
    376					; OUTPUT MESSAGE FIRST CHECKING THAT HEADER HAS BEEN WRITTEN
    377					; R1=FORMAT STRING, R2=PARAMETER BLOCK ADDRESS, PARAMETERS
    378					; ARE ALL FILLED IN.
    379	001436	032767 	000000G	000000G	OUTC::	BIT	#OUTID,OUTCTL
    380	001444	001002 				BNE	OUT1
    381	001446					CALL	HDROUT		;PUT THE HEADER OUT
    382
    383					; OUTPUT MESSAGE, R1=FORMAT STRING, R2=PARAM BLOCK, FILLED IN
    384	001452	016700 	000000C		OUT1::	MOV	FDBOUT+F.NRBD+2,R0
    385	001456					CALL	$EDMSG
    386	001462				OUT2::	PUT$	#FDBOUT,,R1,WRTERR
    387	001504					RETURN
VFYSBR M0104, VFY - ROOT SUBROU	MACRO M1110  22-AUG-78 00:36  PAGE 16
LISTING OUTPUT SUBROUTINE - USES EDMSG

    389					; OUTPUT HEADER IDENTIFYING THE FILE WHICH THE SUBSEQUENT
    390					; ERROR REPORTS REFERENCE.  PUT OUT THE ID AND THE FILE NAME
    391					; PRESERVE ALL BUT R0
    392					;
    393	001506	004567 	000000G		HDROUT::JSR	R5,.SAVR1
    394	001512	012700 	000000G			MOV	#FDBOUT,R0
    395	001516	132760 	000000G	000000G		BITB	#FD.TTY,F.RCTL(R0) ;IF TTY, ATTACH
    396	001524	001421 				BEQ	6$
    397	001526	012701 	000000G			MOV	#IO.ATT,R1
    398	001532	005002 				CLR	R2
    399	001534					CALL	.XQIO
    400	001540	103010 				BCC	4$
    401	001542					ERROUT	ER07,0,0
	001542	104426 				TRAP	X
	001544	000000G				.WORD	ER07SZ
	001546	000000G				.WORD	ER07MG
    402	001550	016767 	000000G	000000G		MOV	EX$WAR,.EXSTS	; SET STATUS TO WARNING			;DHC001
    403	001556	000167 	000000G			JMP	RSTART
    404	001562	052767 	000000G	000000G	4$:	BIS	#DEVATT,OUTCTL	;NOTE THAT DEVICE IS ATTACHED
    405	001570	032767 	000000G	000000G	6$:	BIT	#RDCKBT,VFYCTL	;USE READ CHECK HEADER FORMAT?
    406	001576	001403 				BEQ	8$		;BRANCH IF NO
    407	001600					CALL	RCHDOU		;YES, OUTPUT THE HEADER
    408	001604	000441 				BR	40$		;AND EXIT
    409	001606	162706 	000026 		8$:	SUB	#11.*2,SP	; BUILD INPUT STRING ON STACK.
    410	001612	010600 				MOV	SP,R0
    411	001614	010002 				MOV	R0,R2
    412	001616	032767 	000000G	000000G		BIT	#HDROK,OUTCTL
    413	001624	001007 				BNE	10$		;BRANCH IF HEADER IS IN CORE
    414					;********CHANGE TO HANDLE BIG FILE ID -- 24 BITS******
    415	001626	012701 	000040'			MOV	#LO02MG,R1	;OTHERWISE JUST USE FILE NO.
    416	001632	016720 	000000G			MOV	NXTFID,(R0)+
    417	001636	016720 	000002G			MOV	NXTFID+2,(R0)+
    418	001642	000416 				BR	20$
    419
    420					; OUTPUT THE FULL FILE ID AND FILE NAME FROM THE HEADER
    421	001644	016704 	000000C		10$:	MOV	INDEX+F.NRBD+2,R4
    422	001650	016420 	000010 			MOV	H.FNUM(R4),(R0)+ ;FILE NUMBER
    423	001654	016420 	000012 			MOV	H.FSEQ(R4),(R0)+ ;FILE SEQUENCE NUMBER
    424	001660					CALL	MVFNAM
    425	001664	016420 	000076 			MOV	H.PROJ(R4),(R0)+
    426	001670	016420 	000074 			MOV	H.PROG(R4),(R0)+
    427	001674	012701 	000000'			MOV	#LO01MG,R1
    428	001700				20$:	CALL	OUT1
    429	001704	062706 	000026 			ADD	#11.*2,SP	; CLEAN STACK.
    430	001710	052767 	000000G	000000G	40$:	BIS	#OUTID,OUTCTL	;NOTE ID SENT
    431	001716					RETURN
VFYSBR M0104, VFY - ROOT SUBROU	MACRO M1110  22-AUG-78 00:36  PAGE 17
LISTING OUTPUT SUBROUTINE - USES EDMSG

    433					;+
    434					; CONVERT FILE NAME, TYPE AND VERSION FROM ASCII REPRESENTATION
    435					; IN THE FILE HEADER, TO RAD50 AND BINARY RESPECTIVELY.
    436					; INPUTS:
    437					;	R0=DESTINATION
    438					;	R4=ADDRESS OF FILE HEADER
    439					; OUTPUTS:
    440					;	R0 UPDATED TO NEXT WORD BEYOND FILE NAME
    441					;	R1,R3 ALTERED
    442					;	R2,R4,R5 PRESERVED
    443					;-
    444	001720	005024 			BLANKS:	CLR	(R4)+		; RAD50 BLANKS.
    445	001722	000423 				BR	TYPE		; GO TEST R3 AGAIN. DONE ?
    446	001724				MVFNAM::
    447	001724	010246 				MOV	R2,-(SP)	; SAVE CALLER'S R2.
    448	001726	010446 				MOV	R4,-(SP)	; SAVE CALLER'S R4.
    449	001730	010046 				MOV	R0,-(SP)	; SAVE ADDR OF FILE NAME.
    450					;
    451					; MAKE R0 POINT AT THE ASCII STRING (NAME.TYP;VERS) IN THE FILE HEADER.
    452					;
    453	001732	005000 				CLR	R0
    454	001734	156400 	000000 			BISB	H.IDOF(R4),R0
    455	001740	006300 				ASL	R0
    456	001742	060400 				ADD	R4,R0
    457	001744	011604 				MOV	(SP),R4		; ADDR OF FILE NAME IN OUTPUT AREA TO R4.
    458					;
    459					; CONVERT THE FILE NAME.
    460					;
    461	001746	012703 	000000C			MOV	#S.FNAM/2,R3	; NO. OF WORDS IN RAD50 FILE NAME
    462	001752	005001 			15$:	CLR	R1		; SIGNAL PERIOD IS A TERMINATOR.
    463	001754					CALL	$CAT5		; CONV 3 OR FEWER CHAR TO RAD50.
    464	001760	010124 				MOV	R1,(R4)+	; STORE ONE WORD OF RAD50 FILE NAME.
    465	001762	103403 				BCS	TYPE		; EARLY EXIT IF PERIOD ENCOUNTERED.
    466	001764					SOB	R3,15$
    467					;
    468					; INCREMENT R0 BY 1 TO SKIP THE PERIOD AND INCREMENT R3 BY 1 TO
    469					; COMPENSATE FOR IT'S GETTING TESTED TWICE.
    470					;
    471					; NOTE THAT WE ONLY GET HERE IF R3 BECAME ZERO I.E. NINE CHAR FILE NAME.
    472					;
    473	001770	122023 				CMPB	(R0)+,(R3)+	; INCREMENT R0 AND R3.
VFYSBR M0104, VFY - ROOT SUBROU	MACRO M1110  22-AUG-78 00:36  PAGE 18
LISTING OUTPUT SUBROUTINE - USES EDMSG

    475					;
    476					; CONVERT THE FILE TYPE.
    477					;
    478	001772				TYPE:	SOB	R3,BLANKS	; PAD FILE NAME WITH BLANKS IF NEEDED.
    479	001776	012604 				MOV	(SP)+,R4	; RESTORE ADDR OF FILE NAME IN OUTPUT AREA.
    480	002000	062704 	000000G			ADD	#S.FNAM,R4	; POSITION TO TYPE FIELD OF OUTPUT AREA.
    481	002004					CALL	$CAT5		; CONVERT THE TYPE TO RAD50.
    482	002010	010124 				MOV	R1,(R4)+	; STORE RAD50 TYPE.
    483					;
    484					; CONVERT THE VERSION NUMBER.
    485					;
    486	002012	105720 				TSTB	(R0)+		; SKIP OVER THE SEMICOLON.
    487	002014					CALL	$CDTB		; CONVERT DECIMAL VERSION NUMBER TO BINARY.
    488	002020	010124 				MOV	R1,(R4)+	; STORE BINARY VERSION NUMBER.
    489	002022	010400 				MOV	R4,R0		; PRESERVE THE OLD (ODS-1) INTERFACE.
    490	002024	012604 				MOV	(SP)+,R4	; RESTORE CALLER'S R4.
    491	002026	012602 				MOV 	(SP)+,R2	; RESTORE CALLER'S R2.
    492
    493	002030					RETURN
VFYSBR M0104, VFY - ROOT SUBROU	MACRO M1110  22-AUG-78 00:36  PAGE 19
LISTING OUTPUT SUBROUTINE - USES EDMSG

    495					; INITIALIZE FOR ERROR OUTPUT ABOUT A GIVEN FILE
    496	002032	005067 	000000G		INIOUT::CLR	OUTCTL
    497	002036	005067 	000000G			CLR	NBAD
    498	002042	005067 	000000G			CLR	NMULT
    499	002046	005067 	000000G			CLR	NFREE
    500	002052					RETURN
    501
    502					; TERMINATE OUTPUT FOR A GIVEN FILE
    503	002054	012700 	000000G		TRMOUT::MOV	#FDBOUT,R0
    504	002060					CALL	DETACH
    505	002064	016700 	000000G			MOV	NMULT,R0
    506	002070	056700 	000000G			BIS	NFREE,R0
    507	002074	056700 	000000G			BIS	NBAD,R0
    508	002100	001415 				BEQ	30$		;BRANCH IF NO ERRORS
    509
    510					; PUT OUT SUMMARY OF ERRORS
    511	002102	012700 	000000G			MOV	#MOPRM,R0
    512	002106	010002 				MOV	R0,R2
    513	002110	016720 	000000G			MOV	NMULT,(R0)+
    514	002114	016720 	000000G			MOV	NFREE,(R0)+
    515	002120	016720 	000000G			MOV	NBAD,(R0)+
    516	002124	012701 	000056'			MOV	#LO07MG,R1
    517	002130					CALL	OUT1
    518	002134				30$:	RETURN
VFYSBR M0104, VFY - ROOT SUBROU	MACRO M1110  22-AUG-78 00:36  PAGE 20
GET ONE RETRIEVAL POINTER FROM THE MAP AREA.

    520						.SBTTL	GET ONE RETRIEVAL POINTER FROM THE MAP AREA.
    521					;
    522					; GET ONE RETRIEVAL POINTER FROM THE MAP AREA.
    523					;
    524					;
    525					; INPUTS:	R0 -- POINTS TO THE CURRENT RETRIEVAL POINTER TO PROCESS.
    526					;
    527					; OUTPUTS:	R0 -- POINTS TO NEXT RETRIEVAL POINTER OR BEYOND THE LAST ONE.
    528					;		R1 -- UNCHANGED.
    529					;		R2,R3 -- HIGH AND LOW ORDER LBN FROM RETRIEVAL POINTER.
    530					;		R4,R5 -- HIGH AND LOW ORDER COUNT FROM RETRIEVAL POINTER.
    531					;
    532	002136	010146 			GET1RP::MOV	R1,-(SP)		;SAVE CALLER'S R1.
    533	002140	016701 	000000C			MOV	INDEX+F.NRBD+2,R1  	;ADDR OF FILE HEADER TO R1.
    534	002144	005046 				CLR	-(SP)
    535	002146	156116 	000072 			BISB	H.USE(R1),(SP)		;NUMBER OF WORDS IN USE TO TEMP.
    536	002152	006316 				ASL	(SP)			;CONVERT TO BYTES.
    537	002154	060116 				ADD	R1,(SP)			;ADD ADDRESS OF HEADER.
    538	002156	005002 				CLR	R2
    539	002160	156102 	000001 			BISB	H.MPOF(R1),R2		;MAP AREA OFFSET TO R2.
    540	002164	006302 				ASL	R2			;CONVERT TO BYTES.
    541	002166	060216 				ADD	R2,(SP)			;(SP) = ADDR OF ONE BEYOND LAST  RP.
    542	002170	021600 				CMP	(SP),R0			;ANY MORE RETRIEVAL POINTERS ?
    543	002172	001442 				BEQ	98$			;BR IF END OF MAP.
    544					;
    545					; PROCESS ONE RETRIEVAL POINTER.
    546					;
    547	002174	005004 				CLR	R4			;ZERO THE HIGH ORDER COUNT.
    548	002176	012002 				MOV	(R0)+,R2		;FIRST WORD OF POINTER TO R2.
    549	002200	010205 				MOV	R2,R5			;COPY THE BLOCK COUNT TO R5.
    550	002202	100410 				BMI	10$			;BR IF 6 OR 8 BYTE POINTER.
    551					;
    552					; FALL IN HERE IF IT'S A 4 BYTE POINTER.
    553					;
    554	002204	042705 	177400 			BIC	#177400,R5		;ISOLATE THE COUNT FIELD.
    555	002210	105002 				CLRB	R2			;ISOLATE THE HIGH 8 BITS OF
    556	002212	000302 				SWAB	R2			;THE LBN.
    557	002214	042702 	177700 			BIC	#^C77,R2		;HIGH LBN IS 6 BITS ONLY.
    558	002220	012003 				MOV	(R0)+,R3		;LOW ORDER OF LBN TO R3.
    559	002222	000411 				BR	30$			;GO DO COMMON PROCESSING.
    560					;
    561					; A 6 OR 8 BYTE POINTER BRINGS US HERE.
    562					;
    563	002224	042705 	140000 		10$:	BIC	#140000,R5		;ISOLATE THE COUNT FIELD.
    564	002230	032702 	040000 			BIT	#040000,R2		;6 BYTE OR 8 BYTE POINTER ?
    565	002234	001402 				BEQ	20$			;BR IF 6 BYTE POINTER.
    566					;
    567					; FALL IN HERE IF IT'S AN 8 BYTE POINTER.
    568					;
    569	002236	010504 				MOV	R5,R4			;HIGH ORDER BITS OF COUNT TO R4.
    570	002240	012005 				MOV	(R0)+,R5		;LOW ORDER BITS OF COUNT TO R5.
    571
    572	002242	012003 			20$:	MOV	(R0)+,R3		;LOW ORDER OF LBN TO R3.
    573	002244	012002 				MOV	(R0)+,R2		;HIGH ORDER OF LBN TO R2.
VFYSBR M0104, VFY - ROOT SUBROU	MACRO M1110  22-AUG-78 00:36  PAGE 21
GET ONE RETRIEVAL POINTER FROM THE MAP AREA.

    575					;
    576					; NOW DO COMMON PROCESSING FOR ALL THREE POINTER TYPES.
    577					;
    578	002246	062705 	000001 		30$:	ADD 	#1,R5			;DELIVER TRUE BLOCK COUNT
    579	002252	005504 				ADC	R4
    580					;
    581					; HAVE WE BEEN FOOLED BY GARBAGED RETRIEVAL POINTERS INTO GOING
    582					; BEYOND THE END OF THE MAP AREA ?
    583					; (SP) CONTAINS THE ADDR OF ONE BEYOND THE LAST VALID POINTER.
    584					;
    585	002254	021600 				CMP	(SP),R0
    586	002256	103011 				BCC	99$			;BR IF NO PROBLEM.
    587					;
    588					; WE'VE GONE BEYOND, SO PRODUCE AN ERROR MESSAGE AND EXIT WITH C-BIT SET.
    589					;
    590	002260	005267 	000000G			INC	NBAD			;RECORD THE BAD POINTER.
    591	002264	012701 	000132'			MOV	#LO10MG,R1		; "HEADER MAP OUT OF SYNC"
    592	002270	012702 	000000G			MOV	#MOPRM,R2
    593	002274					CALL	OUTC
    594	002300	000261 			98$:	SEC				;INDICATE END OF MAP AREA ENCOUNTERED.
    595	002302	005226 			99$:	INC	(SP)+			;CLEAR THE STACK.
    596	002304	012601 				MOV	(SP)+,R1		;RESTORE CALLER'S R1.
    597	002306	000207 				RTS	PC			;RETURN TO CALLER.
VFYSBR M0104, VFY - ROOT SUBROU	MACRO M1110  22-AUG-78 00:36  PAGE 22
FORMAT STRINGS

    599						.SBTTL	FORMAT STRINGS
    600
    601	000000					.PSECT
    602	000000					MSG	LO01,<FILE ID %P,%P %X  >
    603	000000					MSGZ	,<OWNER [%O,%O]>
    604	000000					MSGZ	LO02,<FILE ID %P,%P>
    605	000000					MSGZ	LO07,<	SUMMARY: MULT = %D.  FREE = %D.  BAD = %D.>
    606	000000					MSGZ	LO10,<	HEADER MAP OUT OF SYNC>
    607	000000					MSGZ	LO20,<	I/O ERROR READING FILE HEADER - ERROR CODE %D.>
    608	000000					MSGZ	LO21,<	BAD FILE HEADER>
    609	000000					MSG1	LO31,<<15><12><11>^%D. LOST FILES WERE FOUND^>
    610	000000					MSG1	,<<15><12><0>>
    611	000000					MSG1	LO32,<<14>^RESCAN OF VOLUME TO FIND ALL FILES ^>
    612	000000					MSGZ	,<WITH MULTIPLE ALLOCATION>
    613	000000					MSGZ	LO42,<%NINDEX  INDICATES >
    614	000000					MSGZ	LO43,<BITMAP INDICATES >
    615	000000					MSGZ	LO46,<%N>
    616	000000					MSGZ	LO47,<	FILE HEADER DOES NOT EXIST>
    617						.EVEN
    618					;
    619					;
    620		000001 				.END
VFYSBR M0104, VFY - ROOT SUBROU	MACRO M1110  22-AUG-78 00:36  PAGE 22-1
SYMBOL TABLE

BITMAP= ****** GX	HDRERR  001372RG    002	H.RSVF= 000042   	LO07MG= 000056R     003	RDCKHD  000510RG    002
BITREC  001106RG    002	HDROK = ****** GX	H.RVN = 000046   	LO07SZ= 000054   	RDERR   000474RG    002
BITWRD= ****** GX	HDROUT  001506RG    002	H.SBCL= 000016   	LO10MG= 000132R     003	RDFIL = ****** GX
BLANKS  001720R     002	H.ACOF= 000002   	H.SCHA= 000065   	LO10SZ= 000030   	RDHEDR  001242RG    002
CONCHK= ****** GX	H.AHLB= 000004   	H.SEMK= 000104   	LO20MG= 000162R     003	RSTART= ****** GX
CONCK1= ****** GX	H.AHVB= 000022   	H.SMMX= 000110   	LO20SZ= 000060   	R$$DPB= 000001
DETACH  001132RG    002	H.CHK1= 000072   	H.SNAM= 000714   	LO21MG= 000242R     003	R$$DYM= 000001
DEVATT= ****** GX	H.CHK2= 000776   	H.UCHA= 000064   	LO21SZ= 000021   	R$$EIS= 000000
ENTERL= ****** GX	H.CKSM= 000776   	H.UFAT= 000024   	LO31MG= 000263R     003	R$$MSG= 000000
ER06MG= ****** GX	H.DFPR= 000066   	H.USE = 000072   	LO31SZ= 000034   	R$$11M= 000001
ER06SZ= ****** GX	H.DRPR= 000070   	H.VCHA= 000052   	LO32MG= 000322R     003	SBCLUS= ****** GX
ER07MG= ****** GX	H.DVTY= 000044   	H.VDAT= 000074   	LO32SZ= 000044   	SC.BAD= 000100
ER07SZ= ****** GX	H.EFNU= 000016   	H.VLEV= 000014   	LO42MG= 000417R     003	SC.DIR= 000040
ER11MG= ****** GX	H.EFSQ= 000020   	H.VOWN= 000054   	LO42SZ= 000024   	SC.MDL= 000200
ER11SZ= ****** GX	H.ERVN= 000022   	H.VPRO= 000064   	LO43MG= 000443R     003	SETREC  001214RG    002
ER12MG= ****** GX	H.FCHA= 000064   	H.VSMX= 000060   	LO43SZ= 000022   	SINXBT= ****** GX
ER12SZ= ****** GX	H.FIEX= 000106   	H.WISZ= 000104   	LO46MG= 000465R     003	STBLK = ****** GX
EX$WAR= ****** GX	H.FLEV= 000006   	IBMBIT  000766RG    002	LO46SZ= 000003   	SZ    = 000031
FBTBLK= ****** GX	H.FMAX= 000034   	IBVBN = ****** GX	LO47MG= 000470R     003	S.FNAM= ****** GX
FDBOUT= ****** GX	H.FNUM= 000010   	INDEX = ****** GX	LO47SZ= 000034   	S.HDHD= 000114
FD.PLC= ****** GX	H.FOWN= 000074   	INIOUT  002032RG    002	MAPOFF= ****** GX	S.IDHD= 000202
FD.RAN= ****** GX	H.FPRO= 000100   	INXBIT= ****** GX	MG    = 000366R     003	S.MPHD= 000000
FD.TTY= ****** GX	H.FRVN= 000014   	INXOFF= ****** GX	MLTALC= ****** GX	TBTMAP= ****** GX
FIXEOF  001032RG    002	H.FSEG= 000004   	INXSCN  000064RG    002	MOPRM = ****** GX	TRMOUT  002054RG    002
FP.DEL= 000010   	H.FSEQ= 000012   	INXSC1  000076RG    002	MULSCN  000000RG    002	TYPE    001772R     002
FP.EXE= 000004   	H.HBLB= 000000   	INXSC2  000060RG    002	MVFNAM  001724RG    002	UC.CON= 000200
FP.RDV= 000001   	H.HBVB= 000020   	IO.ATT= ****** GX	NBAD  = ****** GX	UC.DLK= 000100
FP.WRV= 000002   	H.IBLB= 000030   	IO.DET= ****** GX	NBTBLK= ****** GX	VFYCTL= ****** GX
F.BDB = ****** GX	H.IBSZ= 000040   	I.BKDT= 000052   	NB.NXD= 020000   	WRTERR  000502RG    002
F.DVNM= ****** GX	H.IBVB= 000026   	I.CRDT= 000022   	NFREE = ****** GX	X     = 000026
F.EFBK= ****** GX	H.IDOF= 000000   	I.EXDT= 000042   	NMULT = ****** GX	$CAT5 = ****** GX
F.ERR = ****** GX	H.IHLB= 000010   	I.FNAM= 000000   	NXTFID= ****** GX	$CDTB = ****** GX
F.FFBY= ****** GX	H.IHVB= 000024   	I.RVDT= 000032   	N.FID = ****** GX	$DDIV = ****** GX
F.FNB = ****** GX	H.INDF= 000760   	I.RVNO= 000020   	OUTC    001436RG    002	$EDMSG= ****** GX
F.HIBK= ****** GX	H.INDN= 000730   	I.ULAB= 000062   	OUTCTL= ****** GX	$SAVAL= ****** GX
F.NRBD= ****** GX	H.INDO= 000744   	LBN   = ****** GX	OUTFRE= ****** GX	$$$T1 = 000067
F.RACC= ****** GX	H.LRUC= 000105   	LBNBIT  000742RG    002	OUTID = ****** GX	.EXSTS= ****** GX
F.RCNM= ****** GX	H.MPOF= 000001   	LISTBT= ****** GX	OUTLB   001414RG    002	.GET  = ****** G
F.RCTL= ****** GX	H.NVOL= 000050   	LOSTBT= ****** GX	OUT1    001452RG    002	.PUT  = ****** G
F.RSIZ= ****** GX	H.PRIV= 000073   	LOSTCT= ****** GX	OUT2    001462RG    002	.SAVR1= ****** GX
F.UNIT= ****** GX	H.PROG= 000074   	LO01MG= 000000R     003	PAR$$$= 000027   	.XQIO = ****** GX
F.URBD= ****** GX	H.PROJ= 000076   	LO01SZ= 000022   	PASS2 = ****** GX	...GBL= 000000
F.VBN = ****** GX	H.RPRO= 000102   	LO02MG= 000040R     003	RCHDOU= ****** GX	...TPC= 001000
GET1RP  002136RG    002	H.RSOF= 000003   	LO02SZ= 000016   	RDCKBT= ****** GX

. ABS.	000000	   000
      	000000	   001
PURE$I	002310	   002
MSGSTR	000524	   003
ERRORS DETECTED:  0

VIRTUAL MEMORY USED:  6103 WORDS  ( 24 PAGES)
DYNAMIC MEMORY:  6996 WORDS  ( 26 PAGES)
ELAPSED TIME:  00:00:35
EXE$:VFYSBR,LIS$:VFYSBR/-SP=SRC$:PIPMAC,VFYSBR
