PARSER	MACRO M1110  21-AUG-78 21:57
TABLE OF CONTENTS

    32-    2	**********  PARSING ROUTINES  **********
    33-   51	LRPRSE		PARSE MARS PROGRAM
    34-  178	**********  LEXICAL ROUTINES  **********
    34-  179	TOKEN		GET NEXT LEXICAL TOKEN
    35-  216	CHRERR		REPORT ILLEGAL CHARACTER
    35-  225	SKIPSP		ROUTINE TO SPAN OVER SPACES AND TABS
    35-  240	MCDFIN		A MACRO HAS DEFINED ANOTHER MACRO
    35-  252	MCDFDC		A MACRO DEFINITION HAS TERMINATED
    36-  266	OPTEXP		EXPRESSION OPTIMIZER ROUTINE
    36-  303	ERROR MESSAGE OUTPUT ROUTINES
PARSER	MACRO M1110  21-AUG-78 21:57  PAGE 26


      1						.IDENT	\X03.11\
      2					;
      3					; COPYRIGHT (C) 1977, 1978
      4					; DIGITAL EQUIPMENT CORPORATION, MAYNARD MASSACHUSETTS 01754
      5					;
      6					; THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR USE ON A SINGLE
      7					; COMPUTER SYSTEM AND MAY BE COPIED ONLY WITH THE INCLUSION OF THE
      8					; ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,
      9					; MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
     10					; EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE
     11					; TERMS.  TITLE TO AND OWNERSHIP OF THE SOFTWARE SHALL AT ALL TIMES
     12					; REMAIN IN DEC.
     13					;
     14					; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE
     15					; AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL EQUIPMENT
     16					; CORPORATION.
     17					;
     18					; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF ITS
     19					; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
     20					;
     21
     22					;++
     23					; FACILITY:	VAX-11 MACRO OBJECT MODULE LIBRARY "MAR.OLB"
     24					;
     25					; ABSTRACT:	THIS MODULE IS PART OF THE VAX-11 MACRO ASSEMBLER, ITS DESCRIPTION
     26					;		IS ON THE FOLLOWING PAGE.
     27					;
     28					;
     29					; ENVIRNOMENT:	VAX-11 MACRO RUNS ON ANY VAX-11 WITH COMPATIBILITY MODE, UNDER
     30					;		THE CME (COMPATIBILITY MODE EMULATOR) OF VAX/VMS OR ON A PDP-11
     31					;		WITH EXTENDED INSTRUCTIONS UNDER RSX-11/M.
     32					;
     33					; AUTHOR:	STEVE POULSEN, CREATION DATE:  22-JUL-76
     34					;		DALE A. ROEDGER, 10-JAN-77 - 19-DEC-77
     35					;		DAVE N. CUTLER
     36					;		BENN L. SCHREIBER
     37					;
     38					; MODIFIED BY:
     39					;
     40					;--
     41					.IF NDF $DATA$
PARSER	MACRO M1110  21-AUG-78 21:57  PAGE 32


      1						.TITLE PARSER
      2						.SBTTL	**********  PARSING ROUTINES  **********
      3	000000					.PSECT PARSER
      4					;
      5					;
      6					;	MARS PARSING ROUTINES
      7					;
      8					;
      9					;
     10					;THE "LRPARSE" ROUTINE DOES THE FOLLOWING THINGS:
     11					;
     12					;1.  IT INITIALIZES ITS VARIABLES.
     13
     14					;2.  IT MAKES AN INITIAL CALL TO "GETREC" TO
     15					;    GET THE FIRST DATA INPUT RECORD.
     16
     17					;3.  IT MAKES AN INITIAL CALL TO "TOKEN" TO
     18					;    TO DETERMINE THE FIRST LEXICAL ITEM, AND
     19					;    TO CLASSIFY IT INTO ONE OF THE LEXICAL CLASSES.
     20
     21					;4.  NEXT IT DETERMINES THE NEXT TRANSITION STATE
     22					;    BY USING THE CURRENT STATE AS <J> THE
     23					;    INDEX INTO THE STATE TABLE OF TRANSITIONS.
     24
     25					;5.  THE JTH TRANSITION STATE IS THEN COMPARED TO
     26					;    THE CLASS OF THE TOKEN; IF IT IS EQUAL
     27					;    TO THE <CLASS> OR IT IS EQUAL TO THE
     28					;    <ELSECODE> THEN THE "MATCH" ROUTINE IS CALLED
     29					;    AND THE SEQUENCE STARTS BACK AT 4.
     30
     31					;6.  IF THE <TRANSITION> DID NOT MATCH EITHER THE
     32					;    <ELSE CODE> OR THE <CLASS> THEN IF THE
     33					;    <TRANSITION> EQUALS THE <CONTINUE CODE> THE
     34					;    <J>, THE INDEX INTO HE <TRANSITION> TABLE IS
     35					;    CHANGED TO BE THE JTH ITEM IN THE <ACTION>
     36					;    TABLE.  IF IT DOES NOT EQUAL THE CONTINUE
     37					;    CODE <J> SIMPLY BUMPED BY 1.
     38
     39					;7.  ACTION NOW CONTINUES AT 5.
     40
     41
     42					;
     43					;	CONSTANTS DEFINED BY THE PATTERN RECOGNITION PROGRAM:
     44					;
     45		177775 			ELSECODE	=	-3.			; ELSE CODE
     46		177774 			CONTCODE	=	-4.			; CONTINUE CODE
     47		023416 			SCANCODE	=	9998.			; SCAN CODE
     48		023417 			ERRCODE		=	9999.			; ERROR CODE
     49		000011 			ERRMAX		=	9.			; MAX ERROR CODE
PARSER	MACRO M1110  21-AUG-78 21:57  PAGE 33
LRPRSE		PARSE MARS PROGRAM

     51					.SBTTL	LRPRSE		PARSE MARS PROGRAM
     52					;
     53					; MAIN PASS 1 CONTROL ROUTINE.
     54					;
     55					; THIS ROUTINE HAS BEEN HIGHLY OPTIMIZED TO MAKE IT RUN AS FAST A POSSIBLE.
     56					; PASS 1 PARSING IS TERMINATED BY THE ".END" DIRECTIVE ACTION ROUTINE.
     57					;
     58					; REGISTER USAGE:
     59					;
     60					;	R5 - POINTER INTO PARSE TABLES
     61					;	R4 - STACK POINTER (PSTACK, V1STACK, V2STACK)
     62					;	R3 - CURRENT TOKEN CLASS
     63					;	R2 - CURRENT STATE OF PARSE
     64					;	R1 - ACTION TO PERFORM
     65					;	R0 - SCRATCH AND RESULT REGISTER
     66					;
     67					; STACK USAGE:
     68					;
     69					;	(SP) = BOOLEAN VARIABLE "SKAN"
     70					;
     71					;		NOTE THAT THIS VARIABLE IS SET TRUE BY THE CALL TO THIS ROUTINE.
     72					;
     73					;
     74
     75						.ENABL	LSB
     76	000000				LRPRSE::				;
     77	000000				LET BOL		:= TRUE				; BEGINNING OF LINE
     78	000006				LET OPRND	:= FALSE			; NOT IN OPERAND FIELD
     79	000012				LET R4		:= 0				; CLEAR THE STACK POINTER
     80	000014				LET R2		:= 0				; CLEAR CURRENT STATE
     81	000016				LET CHAR	:= #CR				; FORCE READING OF NEW LINE
     82	000024				CALL GETCHR					; INITIALIZE FIRST CHAR
     83	000030				CALL TOKEN					; GET FIRST TOKEN TYPE
     84	000034				LET R3		:= R0				; SET CURRENT TOKEN CLASS
     85
     86	000036	010205 			10$:	MOV	R2,R5			;COPY CURRENT STATE
     87	000040	116500 	000000G		20$:	MOVB	SYMLST(R5),R0		;GET TABLE ENTRY
     88	000044	010501 				MOV	R5,R1			;CALCULATE WORD INDEX INTO ACTION TABLE
     89	000046	006301 				ASL	R1			;
     90	000050	016101 	000000G			MOV	ACTION(R1),R1		;GET ACTION TO PERFORM
     91	000054	120003 				CMPB	R0,R3			;STATE EQUAL TO TOKEN CLASS?
     92	000056	001416 				BEQ	40$			;IF EQ YES
     93	000060	122700 	177775 			CMPB	#ELSECODE,R0		;TOKEN CLASS EQUAL ELSE CODE?
     94	000064	001413 				BEQ	40$			;IF EQ YES
     95	000066	005703 				TST	R3			;ERROR PROCESSING TOKEN CLASS?
     96	000070	001003 				BNE	30$			;IF NE NO
     97	000072	022700 	000011 			CMP	#ERRMAX,R0		;TOKEN CLASS ERROR?
     98	000076	101006 				BHI	40$			;IF HI YES
     99	000100	005205 			30$:	INC	R5			;ASSUME TRY NEXT ENTRY
    100	000102	122700 	177774 			CMPB	#CONTCODE,R0		;CONTINUE ELSEWHERE IN TABLE?
    101	000106	001354 				BNE	20$			;IF NE NO
    102	000110	010105 				MOV	R1,R5			;SET NEW STATE CODE
    103	000112	000752 				BR	20$			;
    104
    105					;
    106					; PERFORM MATCH
    107					;
PARSER	MACRO M1110  21-AUG-78 21:57  PAGE 33-1
LRPRSE		PARSE MARS PROGRAM

    108
    109	000114	022701 	023417 		40$:	CMP	#ERRCODE,R1		;ERROR DETECTED?
    110	000120	001007 				BNE	60$			;IF NE NO
    111	000122	005703 				TST	R3			;BACKTRACKING ERROR?
    112	000124	001003 				BNE	50$			;IF NE NO
    113	000126	005744 				TST	-(R4)			;BACK UP STACK POINTER
    114	000130	016402 	000000G			MOV	PSTACK(R4),R2		;BACK UP TO PREVIOUS STATE
    115	000134	005003 			50$:	CLR	R3			;START BACKTRACKING IF NOT ALREADY
    116	000136	000737 				BR	10$			;
    117	000140	022701 	154362 		60$:	CMP	#-SCANCODE,R1		;LOOK AHEAD (NO SCAN?)
    118	000144	002010 				BGE	70$			;IF GE YES
    119	000146	010264 	000000G			MOV	R2,PSTACK(R4)		;SAVE CURRENT STATE
    120	000152	016764 	000000G	000000G		MOV	VAL1,V1STACK(R4)	;
    121	000160	016764 	000000G	000000G		MOV	VAL2,V2STACK(R4)	;
    122	000166	005701 			70$:	TST	R1			;TIME TO READ NEXT TOKEN?
    123	000170	002423 				BLT	90$			;IF LT NO
    124
    125					;
    126					; READ NEXT TOKEN
    127					;
    128
    129	000172	010102 				MOV	R1,R2			;SET CURRENT STATE TO ACTION CODE
    130	000174	062704 	000002 			ADD	#2,R4			;ADVANCE STACK POINTER
    131	000200	005716 				TST	(SP)			;SCAN FOR NEXT TOKEN?
    132	000202	001012 				BNE	80$			;IF NE YES
    133	000204	016703 	000000G			MOV	NEXT,R3			;RESET CONTEXT, SYMBOL ALREADY SCANNED
    134	000210	016767 	000000G	000000G		MOV	V1NEXT,VAL1		;DURING A LOOK AHEAD
    135	000216	016767 	000000G	000000G		MOV	V2NEXT,VAL2		;
    136	000224	010616 				MOV	SP,(SP)			;SET TO CONTINUE SCANNING
    137	000226	000703 				BR	10$			;
    138	000230				80$:	CALL	TOKEN			;GET NEXT TOKEN
    139	000234	010003 				MOV	R0,R3			;SET CLASS TO TOKEN TYPE
    140	000236	000677 				BR	10$			;
    141
    142					;
    143					; REDUCE -- CALL SEMANTIC ROUTINE TO PERFORM REDUCTION TO NONTERMINAL STATE
    144					;
    145
    146	000240				90$:					;
    147	000240				IF R1 LE #-SCANCODE THEN			; NO-SCAN?
    148	000246				    LET R1	:= R1 + #SCANCODE		; YES, CORRECT ACTION CODE
    149	000252	005016 				CLR	(SP)			;PROHIBIT SCANNING
    150	000254				    LET R4	:= R4 - #2			; BACK UP STACK POINTER
    151	000260				    LET NEXT	:= R3				; SAVE CURRENT CLASS
    152	000264				    LET V1NEXT	:= VAL1				; AS WELL AS CURRENT VALUE
    153	000272				    LET V2NEXT	:= VAL2
    154	000300				END
    155
    156	000300				LET R1		:= - R1				; GET ACTION ROUTINE NUMBER
    157	000302	010100 				MOV	R1,R0			;CONVERT FOR WORD TABLE INDEX
    158	000304	006300 				ASL	R0			;
    159	000306	016467 	000000G	000000G		MOV	V1STACK(R4),VAL1	;GET CURRENT VALUES
    160	000314	016467 	000000G	000000G		MOV	V2STACK(R4),VAL2	;
    161	000322	016000 	000000G			MOV	SEM(R0),R0		;GET ADDRESS OF SEMANTIC ROUTINE
    162	000326	001411 				BEQ	100$			;IF EQ NONE
    163	000330					PUSH	R1,R2,R3,R4		;SAVE REGISTERS
    164	000340					CALL	(R0)			;CALL SEMANTIC ROUTINE
PARSER	MACRO M1110  21-AUG-78 21:57  PAGE 33-2
LRPRSE		PARSE MARS PROGRAM

    165	000342					POP	R4,R3,R2,R1		;RESTORE REGISTERS
    166	000352				100$:					;REF LABEL
    167	000352				LET R0		:B= POP(R1)			; GET NUMBER OF ITEMS TO POP
    168	000356				LET R0		:= R0 L.SHIFT 1			; STACKS ARE WORD ORIENTED
    169	000360				LET R4		:= R4 - R0			; POP THE STACK
    170	000362				LET R2		:= PSTACK(R4)			; GET CURRENT STATE
    171	000366				LET V1STACK(R4)	:= VAL1				; PUT RESULT ON STACK
    172	000374				LET V2STACK(R4)	:= VAL2
    173	000402	005003 				CLR	R3			;PICK UP CLASS OF LEFT HAND SIDE
    174	000404	156103 	000000G			BISB	LHS(R1),R3		;
    175	000410	000612 				BR	10$			;
    176						.DSABL	LSB
PARSER	MACRO M1110  21-AUG-78 21:57  PAGE 34
**********  LEXICAL ROUTINES  **********

    178					.SBTTL	**********  LEXICAL ROUTINES  **********
    179					.SBTTL	TOKEN		GET NEXT LEXICAL TOKEN
    180					;
    181					;	MARS LEXICAL ANALYZER
    182					;
    183					;
    184					;	TOKEN -- GET NEXT TOKEN
    185					;
    186					; THE NEXT LEXICAL TOKEN TYPE IS RETURNED IN R0.  THE VALUE ASSOCIATED
    187					; WITH THE TOKEN IS RETURNED IN VAL1,VAL2.
    188					;
    189
    190	000412				TOKEN::					;
    191
    192	000412				LET ERRPT	:= ERRPTX			; POINT TO PREVIOUS TOKEN
    193	000420				LET ERRPTX	:= LINEPT			; POINT TO THIS TOKEN
    194	000426				LET VAL1	:= 0				; DEFAULT VALUE IS 0
    195	000432				LET VAL2	:= 0
    196	000436	016700 	000000G			MOV	CHAR,R0			;GET NEXT CHARACTER
    197	000442	006300 			10$:	ASL	R0			;CONVERT TO WORD INDEX
    198	000444	016000 	000000G			MOV	CHRTAB(R0),R0		;GET CHARACTER DESCRIPTION
    199	000450	001003 				BNE	20$			;IF NEQ VALID CHARACTER
    200	000452					CALL	GETCHR			;GET NEXT CHARACTER
    201	000456	000771 				BR	10$			;
    202	000460	005767 	000000G		20$:	TST	CHAR			;ILLEGAL CHARACTER?
    203	000464	002415 				BLT	CHRERR			;IF LT YES
    204	000466	022767 	000137 	000000G		CMP	#'_,CHAR		;ILLEGAL CHARACTER?
    205	000474	103411 				BLO	CHRERR			;IF LO YES
    206	000476	006200 				ASR	R0			;IS CHARACTER A TOKEN?
    207	000500	103005 				BCC	30$			;IF CC NO
    208	000502	010046 				MOV	R0,-(SP)		;SAVE TOKEN NUMBER
    209	000504					CALL	GETCHR			;GET NEXT CHARACTER
    210	000510	012600 				MOV	(SP)+,R0		;RESTORE TOKEN NUMBER
    211	000512					RETURN				;
    212	000514	006300 			30$:	ASL	R0			;CONVERT BACK TO SCANNING ROUTINE ADDRESS
    213	000516	000110 				JMP	(R0)			;CALL SCANNING ROUTINE
    214
PARSER	MACRO M1110  21-AUG-78 21:57  PAGE 35
CHRERR		REPORT ILLEGAL CHARACTER

    216					.SBTTL	CHRERR		REPORT ILLEGAL CHARACTER
    217
    218	000520				CHRERR::				; INPUT CHARACTER IS IN ERROR
    219	000520					CALL GETCHR			; READ NEXT CHARACTER
    220	000524					CALL ERORPT,#ILGCHR		; CALL ERROR OUTPUT ROUTINE
    221	000534	000167 	177652 			JMP	TOKEN			; AND GET TOKEN AGAIN
    222
    223
    224
    225					.SBTTL	SKIPSP		ROUTINE TO SPAN OVER SPACES AND TABS
    226
    227	000540				SKIPSP::
    228	000540	016700 	000000G			MOV	CHAR,R0			; COPY CURRENT CHARACTER
    229	000544	032700 	000100 		1$:	BIT	#100,R0			; IS CHARACTER ALPHA NUMERIC?
    230	000550	001402 				BEQ	5$			; SKIP IF NOT
    231	000552	042700 	000040 			BIC	#40,R0			; INSURE UPPER CASE CHARACTER
    232	000556	006300 			5$:	ASL	R0			; MAKE IT A WORD INDEX
    233	000560	005760 	000000G			TST	CHRTAB(R0)		; CHECK ENTRY IN TABLE
    234	000564	001401 				BEQ	10$			; IF EQ GET ANOTHER CHARACTER
    235	000566					RETURN				;
    236	000570	004767 	000000G		10$:	JSR	PC,GETCHR		; GET NEXT CHARACTER OF FILE
    237	000574	000763 				BR	1$			; CONTINUE CHECKING
    238
    239
    240					.SBTTL	MCDFIN		A MACRO HAS DEFINED ANOTHER MACRO
    241					;
    242					; THIS ROUTINE IS CALLED DURING A MACRO DEFINITION WHEN A NEW
    243					; MACRO DEFINING DIRECTIVE IS ENCOUNTERED.  IT INCREMENTS THE MACRO
    244					; LEVEL INDICATOR (MCLVL).
    245					;
    246	000576				MCDFIN::			; INCREMENT MACRO DEFINITION LEVEL
    247	000576					LET MCLVL	:= MCLVL +1	; ONE MORE DEFINITION LEVEL
    248	000602					RETURN				;
    249
    250
    251
    252					.SBTTL	MCDFDC		A MACRO DEFINITION HAS TERMINATED
    253					;
    254					; THIS ROUTINE IS CALLED WHEN ANY MACRO TERMINATION DIRECTIVE IS
    255					; ENCOUNTERED.  IT DECREMENTS THE MACRO LEVEL INDICATOR (MCLVL)
    256					;
    257	000604				MCDFDC::			; DECREMENT MACRO DEFINITION LEVEL
    258	000604					LET MCLVL	:= MCLVL -1	; DOWN ONE LEVEL
    259	000610					IF MCLVL IS LE THEN		; ALL DONE
    260	000616					    IF LS.MD+SYMVL2 IS EQ THEN	; LISTING MACRO DEF?
    261	000624						OUT #I.FLAG,<#0,#LISTIT> ; SET LISTING FLAG TO FALSE
    262	000644					    END;IF
    263	000644					END;IF
    264	000644					RETURN
PARSER	MACRO M1110  21-AUG-78 21:57  PAGE 36
OPTEXP		EXPRESSION OPTIMIZER ROUTINE

    266					.SBTTL	OPTEXP		EXPRESSION OPTIMIZER ROUTINE
    267					;++
    268					;	OPTEXP -- OPTIMIZE EXPRESSION.  THE CODE TO EVALUATE AN
    269					; EXPRESSION IS REMOVED FROM THE INTERMEDIATE CODE BUFFER.  THE
    270					; START OF THE EXPRESSION IS POINTED TO BY 'EXPPTR', AND THE
    271					; END OF THE EXPRESSION IS POINTED TO BY 'EXPEND'.  THE REMAINING
    272					; CODE IN THE BUFFER IS MOVED UP OVER THE EXPRESSION EVALUATION
    273					; CODE.
    274					;--
    275
    276	000646				OPTEXP::
    277	000646				    IF EXPPTR NE EXPEND THEN			; ANY EXPRESSION ?
    278	000656					PUSH		R0,R1,R2		; SAVE REGS
    279	000664					LET R1		:= EXPPTR		; START OF CODE
    280	000670					LET R2		:= R1			; TEMP PTR TO SAV MACRO LINES
    281	000672					REPEAT
    282	000672					    IFB (R2) NE #377 THEN		; IS THIS A MACRO LINE?
    283	000700						LET R0	:B= (R2)		; GET LENGTH IF NOT MACRO
    284	000702						LET R2 := R2 + R0		; SKIP COMMAND BLOCK
    285	000704					    ELSE
    286	000706						REPEAT THRU R0 := 2(R2) + #4	; GET MACRO LINE LEN
    287	000716						    LET (R1)+ :B= (R2)+		; COPY MACRO LINE
    288	000720						END
    289	000722					    END
    290	000722					UNTIL R2 HIS EXPEND			; TOP OF STACK
    291	000730					LET R2		:= EXPEND		; END OF CODE
    292	000734					LET R0		:= FRMPTR - R2		; LENGTH OF CODE TO MOVE
    293	000742					IF R0 IS GT THEN			; LENGTH MUST BE > 0
    294	000746					    REPEAT THRU R0 := R0 R.SHIFT 1	; ONCE PER WORD
    295	000750						LET (R1)+	:= (R2)+	; SLIDE UP CODE
    296	000752					    END
    297	000754					END
    298	000754					LET FRMPTR	:= R1			; RESET OUTPUT POINTER
    299	000760					POP		R2,R1,R0		; RESTORE REGS
    300	000766				    END
    301	000766				    RETURN
    302
    303					.SBTTL	ERROR MESSAGE OUTPUT ROUTINES
    304
    305	000770				ERORPX::			; ERROR USING "ERRPTX"
    306	000770	016746 	000000G			MOV	ERRPTX,-(SP)		; PUSH POINTER
    307	000774	000405 				BR	ERORCL			; COMMON POINT
    308	000776				ERORPT::			; ERROR USING "ERRPT"
    309	000776	016746 	000000G			MOV	ERRPT,-(SP)		; PUSH POINTER
    310	001002	000402 				BR	ERORCL			; COMMON POINT
    311	001004				ERORLN::			; ERROR USING "LINEPT"
    312	001004	016746 	000000G			MOV	LINEPT,-(SP)		; PUSH POINTER
    313	001010				ERORCL:
    314	001010	010046 				MOV	R0,-(SP)		; PUSH MESSAGE INDEX
    315	001012	012746 	000000C			MOV	#I.ERR*256.+6,-(SP)	; ERROR CODE + LENGTH OF FRAME
    316	001016	004767 	000000G			JSR	PC,OUTERR		; WRITE OUT FRAME
    317	001022	000207 				RTS	PC			; RETURN TO CALLER
    318
    319		000001 			.END
PARSER	MACRO M1110  21-AUG-78 21:57  PAGE 36-1
SYMBOL TABLE

ACTION= ****** GX	E2      000754R     002	L7      000754R     002	SCANCO= 023416   	TOKEN   000412RG    002
A3    = 000000   	FF    = 000014   	MCDFDC  000604RG    002	SEM   = ****** GX	TYPS0 = 000000
BLNK  = 000040   	FRMPTR= ****** GX	MCDFIN  000576RG    002	SEMI  = 000073   	TYPS1 = 000000
BOL   = ****** GX	GETCHR= ****** GX	MCLVL = ****** GX	SKIPSP  000540RG    002	TYPS2 = 000006
B0      000672R     002	IIII  = 177777   	M.ARGC= 000014   	SPACE = 000040   	TYPS3 = 000006
B1      000716R     002	ILGCHR= ****** GX	M.ARGS= 000016   	SYMCHR= 000012   	VAL1  = ****** GX
B2      000750R     002	I.ERR = ****** GX	M.END = 000012   	SYMFLA= 000002   	VAL2  = ****** GX
CHAR  = ****** GX	I.FLAG= ****** GX	M.GETL= 000004   	SYMLEN= 000011   	V1NEXT= ****** GX
CHRERR  000520RG    002	LBLS0 = 000003   	M.IFLV= 000006   	SYMLIN= 000000   	V1STAC= ****** GX
CHRTAB= ****** GX	LBLS1 = 000007   	M.IFVL= 000010   	SYMLST= ****** GX	V2NEXT= ****** GX
CNT   = 000006   	LBLS2 = 000002   	M.LINK= 000000   	SYMMAX= 000017   	V2STAC= ****** GX
COMMA = 000054   	LBLS3 = 000001   	M.NXTL= 000002   	SYMSEG= 000010   	$DIDDO= 000000
CONTCO= 177774   	LF    = 000012   	NEXT  = ****** GX	SYMVL1= 000004   	$E$   = 000001
CR    = 000015   	LFTANG= 000074   	OPRND = ****** GX	SYMVL2= 000006   	$F$   = 000000
ELSECO= 177775   	LHS   = ****** GX	OPTEXP  000646RG    002	S.ABS = 004000   	$I$   = 000001
ERORCL  001010R     002	LINEPT= ****** GX	OUTERR= ****** GX	S.ASN = 000200   	$L    = 000003
ERORLN  001004RG    002	LISTIT= ****** GX	OUTFRA= ****** GX	S.DBG = 002000   	$LL   = 000001
ERORPT  000776RG    002	LOWCAS= 000140   	POP   = ****** GX	S.DF  = 100000   	$L$   = 000000
ERORPX  000770RG    002	LPTLEN= 000074   	PSECCH= 000020   	S.EPT = 000100   	$O$   = 000000
ERRCOD= 023417   	LRPRSE  000000RG    002	PSECOP= 000016   	S.EXTN= 010000   	$R    = 177777
ERRMAX= 000011   	LS.MD = ****** GX	PSECV1= 000012   	S.GLOB= 020000   	$T    = 000010
ERRPT = ****** GX	L0      000300R     002	PSECV2= 000014   	S.LOCL= 001000   	$T1   = 000000
ERRPTX= ****** GX	L1      000644R     002	PSTACK= ****** GX	S.ODBG= 000040   	$T2   = 000003
EXPEND= ****** GX	L2      000644R     002	RGTANG= 000076   	S.REF = 000400   	$Y$   = 000000
EXPPTR= ****** GX	L3      000766R     002	RTNVAL=%000000   	S.TKMS= 000377   	$Z$   = 000000
E0      000730R     002	L4      000706R     002	R6    =%000006   	S.WEAK= 040000   	$$T   = 000006
E1      000722R     002	L5      000722R     002	R7    =%000007   	TAB   = 000011   	.$T   = 000001

. ABS.	000000	   000
      	000000	   001
PARSER	001024	   002
ERRORS DETECTED:  0

VIRTUAL MEMORY USED:  11873 WORDS  ( 47 PAGES)
DYNAMIC MEMORY:  13332 WORDS  ( 51 PAGES)
ELAPSED TIME:  00:01:58
OBJ$:PARSER,LIS$:PARSER/-SP=SRC$:MD,COMMON,PARSER
