INTOUT	MACRO M1110  21-AUG-78 22:18
TABLE OF CONTENTS

     7-    5	OUTPUT INTERMEDIATE CODE BLOCK
     8-   49	WRTFRM		OUTPUT INTERMEDIATE CODE FRAME
INTOUT	MACRO M1110  21-AUG-78 22:18  PAGE 1


      1						.IDENT	\X03.11\
      2					;
      3					; COPYRIGHT (C) 1977, 1978
      4					; DIGITAL EQUIPMENT CORPORATION, MAYNARD MASSACHUSETTS 01754
      5					;
      6					; THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR USE ON A SINGLE
      7					; COMPUTER SYSTEM AND MAY BE COPIED ONLY WITH THE INCLUSION OF THE
      8					; ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,
      9					; MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
     10					; EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE
     11					; TERMS.  TITLE TO AND OWNERSHIP OF THE SOFTWARE SHALL AT ALL TIMES
     12					; REMAIN IN DEC.
     13					;
     14					; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE
     15					; AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL EQUIPMENT
     16					; CORPORATION.
     17					;
     18					; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF ITS
     19					; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
     20					;
     21
     22					;++
     23					; FACILITY:	VAX-11 MACRO OBJECT MODULE LIBRARY "MAR.OLB"
     24					;
     25					; ABSTRACT:	THIS MODULE IS PART OF THE VAX-11 MACRO ASSEMBLER, ITS DESCRIPTION
     26					;		IS ON THE FOLLOWING PAGE.
     27					;
     28					;
     29					; ENVIRNOMENT:	VAX-11 MACRO RUNS ON ANY VAX-11 WITH COMPATIBILITY MODE, UNDER
     30					;		THE CME (COMPATIBILITY MODE EMULATOR) OF VAX/VMS OR ON A PDP-11
     31					;		WITH EXTENDED INSTRUCTIONS UNDER RSX-11/M.
     32					;
     33					; AUTHOR:	STEVE POULSEN, CREATION DATE:  22-JUL-76
     34					;		DALE A. ROEDGER, 10-JAN-77 - 19-DEC-77
     35					;		DAVE N. CUTLER
     36					;		BENN L. SCHREIBER
     37					;
     38					; MODIFIED BY:
     39					;
     40					;--
     41					.IF NDF $DATA$
INTOUT	MACRO M1110  21-AUG-78 22:18  PAGE 7


      1						.TITLE	INTOUT
      2	000000					.PSECT	INTOUT
      3						.MCALL	QIOW$,DIR$
      4
      5					.SBTTL	OUTPUT INTERMEDIATE CODE BLOCK
      6					;++
      7					;
      8					; "OUTFRAME" IS CALLED BY THE "OUT" MACRO TO WRITE THE STACK FRAME INTO THE
      9					; INTERMEDIATE BUFFER.  IF THE BUFFER IS FULL IT IS WRITTEN INTO THE INTERMEDIATE
     10					; FILE "MACROTMP.TMP" BY CALLING "WRTFRM".  THE STACK FRAME FORMAT IS THE FOLLOWING:
     11					;
     12					;	+---------------+
     13					;	!  CMD	!  LEN	!
     14					;	+---------------+
     15					;	!    DATA  N	!
     16					;	+---------------+
     17					;	!    DATA N-1	!
     18					;	+---------------+
     19					;	!	:	!
     20					;	+---------------+
     21					;	!	.	!
     22					;	+---------------+
     23					;	!    DATA  1	!
     24					;	+---------------+
     25					;
     26					; ALL REGISTERS ARE PRESERVED ACROSS THE CALL.
     27					;
     28					;--
     29
     30	000000				OUTERR::					; OUTPUT ERROR BLOCK
     31	000000				OUTWRN::					; OUTPUT WARNING BLOCK
     32	000000	005067 	000000G			CLR	EXPOPT				; SET "EXPOPT" FALSE
     33	000004				OUTFRA::					;
     34	000004	012667 	000000G			MOV	(SP)+,OUTRET			; SAVE RETURN ADDRESS
     35	000010	010067 	000000G			MOV	R0,TEMP0			; SAVE R0
     36	000014	111600 				MOVB	(SP),R0				; GET LENGTH OF STACK FRAME
     37	000016	066700 	000000G			ADD	FRMPTR,R0			; ADD FRAME LENGTH TO INTER. BUFFER
     38	000022	020027 	000000G			CMP	R0,#FRMPTR			; WILL FRAME FIT INTO BUFFER
     39	000026	103402 				BLO	10$				; SKIP IF IT FITS
     40	000030	004767 	000030 			JSR	PC,WRTFRM			; OUTPUT BUFFER
     41	000034	111600 			10$:	MOVB	(SP),R0				; GET LENGTH OF STACK FRAME
     42	000036	006200 				ASR	R0				; CONVERT LENGTH TO WORD COUNT
     43	000040	012677 	000000G		20$:	MOV	(SP)+,@FRMPTR			; COPY WORD INTO BUFFER
     44	000044	062767 	000002 	000000G		ADD	#2,FRMPTR			; POINT TO NEXT WORD IN BUFFER
     45	000052	077006 				SOB	R0,20$				; COPY ENTIRE FRAME
     46	000054	016700 	000000G			MOV	TEMP0,R0			; RESTORE R0
     47	000060	000177 	000000G			JMP	@OUTRET				; RETURN
INTOUT	MACRO M1110  21-AUG-78 22:18  PAGE 8
WRTFRM		OUTPUT INTERMEDIATE CODE FRAME

     49					.SBTTL	WRTFRM		OUTPUT INTERMEDIATE CODE FRAME
     50					;++
     51					;
     52					; WRTFRM -- WRITE OUT INTERMEDIATE CODE BUFFER
     53					;
     54					;--
     55
     56	000064				WRTFRM::
     57	000064				1$:	DIR$	#INTQIO				; WRITE VIRTUAL BLOCK
     58	000072	103447 				BCS	20$				; SKIP IF QIO FAILED
     59	000074	105767 	000000G			TSTB	INTRSB				; STATUS BYTE SHOULD BE POSITIVE
     60	000100	003025 				BGT	10$				; WRITE SUCCESSFUL
     61	000102	122767 	000000G	000000G		CMPB	#IE.EOF,INTRSB			; END OF FILE ERROR
     62	000110	001040 				BNE	20$				; NO, REAL ERROR
     63	000112	010046 				MOV	R0,-(SP)			; SAVE R0 - R2
     64	000114	010146 				MOV	R1,-(SP)			;
     65	000116	010246 				MOV	R2,-(SP)			;
     66	000120	012700 	000000G			MOV	#INTBLK,R0			; ADDRESS OF INTER. FDB
     67	000124	016701 	000000G			MOV	INTALO,R1			; FILE EXTEND SIZE
     68	000130	003001 				BGT	5$				; SKIP IF POSITIVE
     69	000132	005401 				NEG	R1				; MAKE SIZE POSITIVE
     70	000134	005002 			5$:	CLR	R2				; NON-CONTIGUOUS FILE
     71	000136	004767 	000000G			JSR	PC,.EXTND			; EXTEND FILE
     72	000142	012602 				MOV	(SP)+,R2			; RESTORE R2 - R0
     73	000144	012601 				MOV	(SP)+,R1			;
     74	000146	012600 				MOV	(SP)+,R0			;
     75	000150	103420 				BCS	20$				; EXIT IF EXTEND FAILED
     76	000152	000744 				BR	1$				; TRY AGAIN
     77	000154	062767 	000003 	000000C	10$:	ADD	#3,INTQIO+Q.IOPL+10		; UPDATE LOW PART OF VIRTUAL BLOCK
     78	000162	005567 	000000C			ADC	INTQIO+Q.IOPL+6			; PROPAGATE CARRY
     79	000166	012767 	000000G	000000G		MOV	#FRMBUF,FRMPTR			; RESET INTERMEDIATE BUFFER PTR.
     80	000174	005067 	000000G			CLR	EXPOPT				; CAN'T OPTIMIZE EXPRESSION
     81	000200	005067 	000000G			CLR	EXPPTR				; CLEAR EXPRESSION POINTER
     82	000204	005267 	000000G			INC	GETINT				;;; COUNT WRITE TO INTER. FILE
     83	000210	000207 				RETURN					;
     84
     85	000212				20$:	ERRPRT	WRKOUT				; OUTPUT ERROR TO WORK FILE
     86	000226	000167 	000000G			JMP	ABORT				; TERMINATE THIS ASSEMBLY
     87
     88		000001 			.END
INTOUT	MACRO M1110  21-AUG-78 22:18  PAGE 8-1
SYMBOL TABLE

ABORT = ****** GX	INTBLK= ****** GX	M.LINK= 000000   	SPACE = 000040   	S.EPT = 000100
BLNK  = 000040   	INTQIO= ****** GX	M.NXTL= 000002   	SYMCHR= 000012   	S.EXTN= 010000
COMMA = 000054   	INTRSB= ****** GX	OUTERR  000000RG    002	SYMFLA= 000002   	S.GLOB= 020000
CR    = 000015   	LF    = 000012   	OUTFRA  000004RG    002	SYMLEN= 000011   	S.LOCL= 001000
ERRPRI= ****** GX	LFTANG= 000074   	OUTRET= ****** GX	SYMLIN= 000000   	S.ODBG= 000040
EXPOPT= ****** GX	LOWCAS= 000140   	OUTWRN  000000RG    002	SYMMAX= 000017   	S.REF = 000400
EXPPTR= ****** GX	LPTLEN= 000074   	PSECCH= 000020   	SYMSEG= 000010   	S.TKMS= 000377
FF    = 000014   	M.ARGC= 000014   	PSECOP= 000016   	SYMVL1= 000004   	S.WEAK= 040000
FRMBUF= ****** GX	M.ARGS= 000016   	PSECV1= 000012   	SYMVL2= 000006   	TAB   = 000011
FRMPTR= ****** GX	M.END = 000012   	PSECV2= 000014   	S.ABS = 004000   	TEMP0 = ****** GX
GETINT= ****** GX	M.GETL= 000004   	Q.IOPL= ****** GX	S.ASN = 000200   	WRKOUT= ****** GX
IE.EOF= ****** GX	M.IFLV= 000006   	RGTANG= 000076   	S.DBG = 002000   	WRTFRM  000064RG    002
INTALO= ****** GX	M.IFVL= 000010   	SEMI  = 000073   	S.DF  = 100000   	.EXTND= ****** GX

. ABS.	000000	   000
      	000000	   001
INTOUT	000232	   002
ERRORS DETECTED:  0

VIRTUAL MEMORY USED:  1586 WORDS  ( 7 PAGES)
DYNAMIC MEMORY:  2772 WORDS  ( 10 PAGES)
ELAPSED TIME:  00:00:08
OBJ$:INTOUT,LIS$:INTOUT/-SP=SRC$:COMMON,INTOUT
