MDRIVE	MACRO M1110  21-AUG-78 21:49
TABLE OF CONTENTS

    32-    2	**********  MARS DRIVER  **********
    34-   26	.SAVAL		REGISTER SAVE CO-ROUTINE
    34-   53	.SAVRG		CO-ROUTINE TO SAVE R1 THRU R3
    34-   69	GET SEQUENTIAL ENTRY POINT
    34-   74	PUT SEQUENTIAL ENTRY POINT
    35-   79	GETLIN		GET NEXT INPUT LINE
    36-  118	NXTFIL		OPEN NEXT INPUT FILE
    37-  145	OPNFAIL		FILE OPEN FAILURE ROUTINE
    37-  176	DIE		SWITCH TO PASS 2 AND TERMINATE
    38-  199	SYMFUL		CHECK FOR SYMBOL TABLE OVERFLOW
    38-  213	SETPC		SAVE MAXIMUM PC VALUE IN PSECT BLOCK
MDRIVE	MACRO M1110  21-AUG-78 21:49  PAGE 26


      1						.IDENT	\X03.11\
      2					;
      3					; COPYRIGHT (C) 1977, 1978
      4					; DIGITAL EQUIPMENT CORPORATION, MAYNARD MASSACHUSETTS 01754
      5					;
      6					; THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR USE ON A SINGLE
      7					; COMPUTER SYSTEM AND MAY BE COPIED ONLY WITH THE INCLUSION OF THE
      8					; ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,
      9					; MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
     10					; EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE
     11					; TERMS.  TITLE TO AND OWNERSHIP OF THE SOFTWARE SHALL AT ALL TIMES
     12					; REMAIN IN DEC.
     13					;
     14					; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE
     15					; AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL EQUIPMENT
     16					; CORPORATION.
     17					;
     18					; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF ITS
     19					; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
     20					;
     21
     22					;++
     23					; FACILITY:	VAX-11 MACRO OBJECT MODULE LIBRARY "MAR.OLB"
     24					;
     25					; ABSTRACT:	THIS MODULE IS PART OF THE VAX-11 MACRO ASSEMBLER, ITS DESCRIPTION
     26					;		IS ON THE FOLLOWING PAGE.
     27					;
     28					;
     29					; ENVIRNOMENT:	VAX-11 MACRO RUNS ON ANY VAX-11 WITH COMPATIBILITY MODE, UNDER
     30					;		THE CME (COMPATIBILITY MODE EMULATOR) OF VAX/VMS OR ON A PDP-11
     31					;		WITH EXTENDED INSTRUCTIONS UNDER RSX-11/M.
     32					;
     33					; AUTHOR:	STEVE POULSEN, CREATION DATE:  22-JUL-76
     34					;		DALE A. ROEDGER, 10-JAN-77 - 19-DEC-77
     35					;		DAVE N. CUTLER
     36					;		BENN L. SCHREIBER
     37					;
     38					; MODIFIED BY:
     39					;
     40					;--
     41					.IF NDF $DATA$
MDRIVE	MACRO M1110  21-AUG-78 21:49  PAGE 32


      1					.TITLE	MDRIVE
      2					.SBTTL	**********  MARS DRIVER  **********
      3	000000				.PSECT	MDRIVE
      4					.MCALL	FINIT$,	GET$S,	CLOSE$,	CSI$2,	WSIG$S
      5					;++
      6					;
      7					;  MACRO-11/700 DRIVER
      8					;
      9					;--
     10	000000				MARS::
     11	000000				    FINIT$					; INITIALIZE FCS AREA
     12	000004				    REPEAT
     13	000004					LET STKSAV	:= SP			; SAVE STARTING STACK POINTER
     14	000010					CALL SETUP				; INITIALIZE TABLES FOR PASS 1
     15	000014					CALL INIT				; INITIALIZE FOR PASS 1
     16	000020					CALL STARTUP				; INITIALIZE FILES
     17	000024					CALL GETIME				; INITIALIZE HEADER
     18	000030					CALL PASS1				; START PASS ONE OF ASSEMBLER
     19	000034				P2STRT::					; STARTING POINT FOR PASS 2
     20	000034					CALL INIT				; INITIALIZE FOR PASS 2
     21	000040					CALL PASS2
     22	000044					CALL CLOSET				; CLOSE FILES
     23	000050				    END;R
MDRIVE	MACRO M1110  21-AUG-78 21:49  PAGE 34
.SAVAL		REGISTER SAVE CO-ROUTINE

     26					.SBTTL	.SAVAL		REGISTER SAVE CO-ROUTINE
     27					;
     28					; THIS ROUTINE IS CALLED BY A "JSR R5,.SAVAL" WHICH SAVES R5 ON THE
     29					; STACK.  THE ROUTINE THEN SAVES R4 - R0 AND CALLS THE CALLING ROUTINE
     30					; VIA A "JSR PC,@(SP)+".  WHEN THE ROUTINE RETURNS THIS ROUTINE RESTORES
     31					; ALL THE REGISTERS AND RETURNS TO THE ORIGINAL CALLING ROUTINE.
     32					;
     33	000052				.SAVAL::				; CALL SAVES R5
     34	000052	010446 				MOV	R4,-(SP)		; SAVE R4
     35	000054	010346 				MOV	R3,-(SP)		; SAVE R3
     36	000056	010246 				MOV	R2,-(SP)		; SAVE R2
     37	000060	010146 				MOV	R1,-(SP)		; SAVE R1
     38	000062	010046 				MOV	R0,-(SP)		; SAVE R0
     39	000064	010546 				MOV	R5,-(SP)		; SAVE RETURN ADDRESS ON STACK
     40	000066	016605 	000014 			MOV	14(SP),R5		; RESTORE R5 FOR ROUTINE
     41	000072	004736 				JSR	PC,@(SP)+		; RETURN TO CALLING ROUTINE
     42	000074	012600 				MOV	(SP)+,R0		; RESTORE R0
     43	000076	012601 				MOV	(SP)+,R1		; RESTORE R1
     44	000100	012602 				MOV	(SP)+,R2		; RESTORE R2
     45	000102	012603 				MOV	(SP)+,R3		; RESTORE R3
     46	000104	012604 				MOV	(SP)+,R4		; RESTORE R4
     47	000106	012605 				MOV	(SP)+,R5		; RESTORE R5
     48	000110	000207 				RTS	PC			; RETURN TO ORIGINAL ROUTINE
     49
     50
     51
     52
     53					.SBTTL	.SAVRG		CO-ROUTINE TO SAVE R1 THRU R3
     54
     55	000112				.SAVRG::				; CALL SAVES R3
     56	000112	010246 				MOV	R2,-(SP)		; SAVE R2
     57	000114	010146 				MOV	R1,-(SP)		; SAVE R1
     58	000116	010346 				MOV	R3,-(SP)		; SAVE RETURN ADDRESS ON STACK
     59	000120	016603 	000006 			MOV	6(SP),R3		; RESTORE R3 FOR ROUTINE
     60	000124	004736 				JSR	PC,@(SP)+		; RETURN TO CALLING ROUTINE
     61	000126	012601 				MOV	(SP)+,R1		; RESTORE R1
     62	000130	012602 				MOV	(SP)+,R2		; RESTORE R2
     63	000132	012603 				MOV	(SP)+,R3		; RESTORE R3
     64	000134	000207 				RTS	PC			; RETURN TO ORIGINAL ROUTINE
     65
     66
     67
     68
     69					.SBTTL	GET SEQUENTIAL ENTRY POINT
     70
     71	000136				.GETSQ::
     72	000136	000167 	000000G			JMP	.GET			; CALL GET ROUTINE
     73
     74					.SBTTL	PUT SEQUENTIAL ENTRY POINT
     75
     76	000142				.PUTSQ::
     77	000142	000167 	000000G			JMP	.PUT			; CALL PUT ROUTINE
MDRIVE	MACRO M1110  21-AUG-78 21:49  PAGE 35
GETLIN		GET NEXT INPUT LINE

     79					.SBTTL	GETLIN		GET NEXT INPUT LINE
     80					;
     81					;
     82					; 	GETLIN -- GET A LINE OF INPUT AND PLACE IT IN <LINEBF>
     83					;
     84					;
     85
     86	000146				PROCEDURE	GETLIN
     87
     88	000146					GET$S		#VAXBLK,#LINEBF,#LINEBN-LINEBF	; READ NEXT SOURCE LINE
     89	000172					ON.ERROR DO				; END OF INPUT FILE?
     90	000174					    CALL NXTFIL				; GET NEXT FILE
     91	000200					    LET SRCPAG	:= #1			; START WITH PAGE ONE AGAIN
     92	000206					    IF MORFIL IS TRUE THEN GOTO GETLIN	; READ NEW LINE
     93	000214					    LET LINEBF	 := #".E		; IF SO, RETURN ".END"
     94	000222					    LET LINEBF+2 := #"ND
     95	000230					    LET F.NRBD(R0) := #4		; 4 CHARACTERS
     96	000236					    IF IFLVL IS GT THEN			; UNFINISHED CONDITIONS
     97	000244						LET LINEBF+4	:B= #'C		; MAKE AN ENDC
     98	000252						LET F.NRBD(R0)	:= F.NRBD(R0) +1 ; ONE MORE CHAR
     99	000256					    ELSE
    100	000260						IF P2 IS FALSE THEN		; MESSAGE ONLY ON PASS 1
    101	000266						    OUT #I.FNEWL		; PRINT CONTENTS OF PREVIOUS LINE
    102	000276						    OUT #I.WRN,<#MISEND,#LINEBF> ; MISSING END STATEMENT
    103	000316						END
    104	000316					    END
    105	000316					END
    106	000316					LET LINELN	:= F.NRBD(R0)		; SAVE LENGTH OF LINE
    107	000324					LET LINEPT	:= #LINEBF		; POINT TO START OF LINE
    108	000332					IFB @LINEPT EQ #FF THEN			; NEW SOURCE PAGE?
    109	000342					    LET SRCPAG	:= SRCPAG +1		; UPDATE PAGE COUNT
    110	000346					END
    111	000346					LET R0		:= #LINEBF + LINELN	; POINT TO LAST CHAR
    112	000356					LET (R0)	:B= #CR			; STORE CR AT END OF LINE
    113	000362					LET LINENM	:= LINENM +1		; COUNT THIS LINE
    114	000366					LET ERRPTX	:= #LINEBF		; RESET ERROR POINTER
    115
    116	000374				ENDPROCEDURE	GETLIN
MDRIVE	MACRO M1110  21-AUG-78 21:49  PAGE 36
NXTFIL		OPEN NEXT INPUT FILE

    118					.SBTTL	NXTFIL		OPEN NEXT INPUT FILE
    119
    120					;
    121					; READ NEXT INPUT FILE
    122					;
    123	000376				NXTFIL::
    124	000376					SAVAL					; SAVE R0 - R5
    125	000402	016767 	000000G	000000G		MOV	LINENM,LINBAS			; SET LINE BASE TO HIGHEST LINE NO.
    126	000410					CLOSE$	#VAXBLK				; CLOSE OLD INPUT FILE
    127	000420	005067 	000000G			CLR	MORFIL				; ASSUME END OF FILES
    128	000424	132767 	000020 	000001G		BITB	#CS.MOR,C.STAT+CSIBLK		; MORE INPUT FILES?
    129	000432	001444 				BEQ	20$				; NO, EXIT
    130	000434	012701 	000000G			MOV	#VAXFIL,R1			; SET INPUT POINTERS
    131	000440	012703 	000000G			MOV	#VAXBLK,R3
    132	000444	012705 	000000G			MOV	#CSIBLK,R5			; POINT TO CSIBLK
    133	000450					CSI$2	R5,INPUT,#INP.SW		; SCAN FILE AND SWITCHES
    134	000470	103010 				BCC	5$				; SKIP IF NO ERRORS
    135	000472					ERRPRT	INPSPC,CSIBLK+C.FILD		; INPUT FILE SPEC ERROR
    136	000506	000167 	000100 			JMP	ABORT				; TERMINATE ASSEMBLY
    137	000512	032765 	000000G	000024 	5$:	BIT	#SWM.ML,C.MKW1(R5)		; MACRO LIBRARY?
    138	000520	001402 				BEQ	10$				; SKIP IF NOT
    139	000522	012701 	000000G			MOV	#MLBFIL,R1			; POINT TO DEFAULT FNB
    140	000526	004767 	000000G		10$:	JSR	PC,OPENIT			; OPEN INPUT FILE
    141	000532	004767 	000000G			JSR	PC,SWSCN			; SCAN SWITCHES
    142	000536	012767 	177777 	000000G		MOV	#-1,MORFIL			; THERE IS ANOTHER FILE
    143	000544	000207 			20$:	RTS	PC				; EXIT THRU CO-ROUTINE
MDRIVE	MACRO M1110  21-AUG-78 21:49  PAGE 37
OPNFAIL		FILE OPEN FAILURE ROUTINE

    145					.SBTTL	OPNFAIL		FILE OPEN FAILURE ROUTINE
    146					;++
    147					;
    148					; THIS ROUTINE WILL CHECK THE CAUSE OF AN OPEN FAILURE AND RETURN TO THE CALLER
    149					; IF THE CAUSE WAS EXHAUSTED POOL NODES.  IF THE CAUSE WAS SOMETHING ELSE THE
    150					; ASSEMBLY IS ABORTED.
    151					;
    152					;--
    153	000546				OPNFAIL::
    154	000546	126027 	000000G	000000G		CMPB	F.ERR(R0),#IE.NOD	; INSUFFICIENT NODES
    155	000554	001404 				BEQ	10$			; SKIP IF YES
    156	000556	126027 	000000G	000000G		CMPB	F.ERR(R0),#IE.UPN	; INSUFFICIENT NODES?
    157	000564	001004 				BNE	20$			; ABORT ASSEMBLY
    158	000566				10$:	WSIG$S				; WAIT FOR SIGNIFICANT EVENT
    159	000574	000207 				RTS	PC			; RE-TRY OPEN !!!
    160
    161	000576				20$:	ERRPRT	OPNFLD,CSIBLK+C.FILD	; FILE OPEN FAILURE
    162
    163	000612	012700 	000000G		ABORT::	MOV	#OBJBLK,R0		; POINT TO OBJECT FILE FDB
    164	000616	004767 	000000G			JSR	PC,.DLFNB		; DELETE OBJECT FILE
    165	000622	005767 	000000G			TST	P2			; IS THIS PASS 2?
    166	000626	001004 				BNE	10$			; SKIP IF PASS 2
    167	000630	012700 	000000G			MOV	#LSTBLK,R0		; POINT TO LISTING FILE FDB
    168	000634	004767 	000000G			JSR	PC,.DLFNB		; DELETE LINTING FILE
    169	000640	004767 	000000G		10$:	JSR	PC,CLOSET		; CLOSE ALL FILES
    170	000644	016706 	000000G			MOV	STKSAV,SP		; RESET STACK POINTER
    171	000650	000167 	177124 			JMP	MARS			; GO GET NEXT COMMAND
    172
    173
    174
    175
    176					.SBTTL	DIE		SWITCH TO PASS 2 AND TERMINATE
    177					;++
    178					;
    179					; ROUTINE CALLED IF SYMBOL TABLE OVERFLOWS.  THE OBJECT FILE IS DELETED,
    180					; AN ERROR IS RECORDED, AND THE ASSEMBLY IS SWITCHED TO PASS TWO.  IF "P2"
    181					; IS NOT ZERO THE USER SYMBOL TABLE AND PSECT INFORMATION IS PRINTED IN THE
    182					; LISTING AND THE ASSEMBLY IS STOPPED.
    183					;
    184					;--
    185	000654				DIE::	ERRPRT	SYMTBF			; SYMBOL TABLE MESSAGE TO TTY
    186	000670					OUT	#I.ERR,<#SYMOVR,LINEPT>	; TREAT AS ERROR
    187
    188	000710	012700 	000000G		DIE1::	MOV	#OBJBLK,R0		; POINT TO OBJECT FILE FDB
    189	000714	004767 	000000G			JSR	PC,.DLFNB		; DELETE OBJECT FILE
    190	000720	005767 	000000G			TST	P2			; IS THIS PASS 2 ?
    191	000724	001004 				BNE	10$			; SKIP TO FINISH LISTING IF YES
    192	000726	005267 	000000G			INC	P2			; MAKE SWITCH NON-ZERO
    193	000732	000167 	000000G			JMP	XXXEND			; WRITE "END" TO INTERMEDIATE FILE
    194	000736	004767 	000000G		10$:	JSR	PC,FINISH		; PRINT SYMBOL TABLE AND PSECT INFO
    195	000742	004767 	000000G			JSR	PC,CLOSET		; CLOSE ALL FILES
    196	000746	016706 	000000G			MOV	STKSAV,SP		; RESET STACK POINTER
    197	000752	000167 	177022 			JMP	MARS			; PICK UP NEXT COMMAND
MDRIVE	MACRO M1110  21-AUG-78 21:49  PAGE 38
SYMFUL		CHECK FOR SYMBOL TABLE OVERFLOW

    199					.SBTTL	SYMFUL		CHECK FOR SYMBOL TABLE OVERFLOW
    200					;
    201					; THIS ROUTINE VERIFIES THAT THERE IS, AT LEAST, 132 BYTES LEFT IN
    202					; THE SYMBOL TABLE SPACE.
    203					;
    204	000756				PROCEDURE	SYMFUL
    205
    206	000756				LET R0	:= FREEPT + #132.		; ADD ONE LINE'S LENGTH
    207	000766				IF R0 HIS FRIEND THEN GOTO DIE		; NOT ENOUGH ROOM, ABORT ASS.
    208
    209	000774				ENDPROCEDURE	SYMFUL
    210
    211
    212
    213					.SBTTL	SETPC		SAVE MAXIMUM PC VALUE IN PSECT BLOCK
    214					;
    215					; THIS ROUTINE IS CALLED WHEN PSECTS ARE ABOUT TO CHANGE.  IT MAXIMIZES
    216					; THE STORED PC WITH THE CURRENT PC IN THE CURRENT PSECT NAME BLOCK.
    217					;
    218
    219	000776				SETPC::
    220	000776					LET R0		:= PSECTP		; COPY CURRENT PSECT PTR
    221	001002					IF PC2 LO SYMVL2(R0) THEN GOTO SETPCX	; EXIT IF STORED HIGHER
    222	001012					IF RESULT IS EQ THEN			; CHECK LOWER BITS
    223	001014					    IF PC1 LOS SYMVL1(R0) THEN GOTO SETPCX ; EXIT IF STORED HIGHER
    224	001024					END
    225	001024					LET SYMVL1(R0)	:= PC1			; UPDATE LOW BITS
    226	001032					LET SYMVL2(R0)	:= PC2			; UPDATE HIGH BITS
    227	001040				SETPCX:
    228	001040	000207 				RTS	PC				; RETURN
    229
    230
    231		000001 			.END
MDRIVE	MACRO M1110  21-AUG-78 21:49  PAGE 38-1
SYMBOL TABLE

ABORT   000612RG    002	FRIEND= ****** GX	L5      001024R     002	RTNVAL=%000000   	S.TKMS= 000377
BLNK  = 000040   	F.ERR = ****** GX	MARS    000000RG    002	R6    =%000006   	S.WEAK= 040000
B0      000004R     002	F.NRBD= ****** GX	MISEND= ****** GX	R7    =%000007   	TAB   = 000011
CLOSET= ****** GX	F.URBD= ****** GX	MLBFIL= ****** GX	SEMI  = 000073   	TYPS0 = 000000
CNT   = 000006   	GETIME= ****** GX	MORFIL= ****** GX	SETPC   000776RG    002	TYPS1 = 000000
COMMA = 000054   	GETLIN  000146RG    002	M.ARGC= 000014   	SETPCX  001040R     002	TYPS2 = 000000
CR    = 000015   	IE.NOD= ****** GX	M.ARGS= 000016   	SETUP = ****** GX	VAXBLK= ****** GX
CSIBLK= ****** GX	IE.UPN= ****** GX	M.END = 000012   	SPACE = 000040   	VAXFIL= ****** GX
CS.DIF= 000002   	IFLVL = ****** GX	M.GETL= 000004   	SRCPAG= ****** GX	XXXEND= ****** GX
CS.DVF= 000004   	IIII  = 177777   	M.IFLV= 000006   	STARTU= ****** GX	$DIDDO= 000000
CS.EQU= 000040   	INIT  = ****** GX	M.IFVL= 000010   	STKSAV= ****** GX	$E$   = 000001
CS.INP= 000001   	INPSPC= ****** GX	M.LINK= 000000   	SWM.ML= ****** GX	$F$   = 000000
CS.MOR= 000020   	INP.SW= ****** GX	M.NXTL= 000002   	SWSCN = ****** GX	$I$   = 000001
CS.NMF= 000001   	I.ERR = ****** GX	NXTFIL  000376RG    002	SYMCHR= 000012   	$L    = 000001
CS.OUT= 000002   	I.FNEW= ****** GX	OBJBLK= ****** GX	SYMFLA= 000002   	$LL   = 177777
CS.WLD= 000010   	I.WRN = ****** GX	OPENIT= ****** GX	SYMFUL  000756RG    002	$L$   = 000000
C.CMLD= 000002   	LBLS0 = 000005   	OPNFAI  000546RG    002	SYMLEN= 000011   	$O$   = 000000
C.DEVD= 000006   	LBLS1 = 000006   	OPNFLD= ****** GX	SYMLIN= 000000   	$R    = 177777
C.DIRD= 000012   	LBLS2 = 000003   	OUTERR= ****** GX	SYMMAX= 000017   	$T    = 000006
C.DSDS= 000006   	LF    = 000012   	OUTFRA= ****** GX	SYMOVR= ****** GX	$T1   = 000000
C.FILD= 000016   	LFTANG= 000074   	OUTWRN= ****** GX	SYMSEG= 000010   	$T2   = 000005
C.MKW1= 000024   	LINBAS= ****** GX	PAR$$$= 000005   	SYMTBF= ****** GX	$Y$   = 000000
C.MKW2= 000026   	LINEBF= ****** GX	PASS1 = ****** GX	SYMVL1= 000004   	$Z$   = 000000
C.SIZE= 000054   	LINEBN= ****** GX	PASS2 = ****** GX	SYMVL2= 000006   	$$TT  = 000006
C.STAT= 000001   	LINELN= ****** GX	PC1   = ****** GX	S.ABS = 004000   	.CLOSE= ****** G
C.SWAD= 000022   	LINENM= ****** GX	PC2   = ****** GX	S.ASN = 000200   	.CSI2 = ****** G
C.TYPR= 000000   	LINEPT= ****** GX	PSECCH= 000020   	S.DBG = 002000   	.DLFNB= ****** GX
DIE     000654RG    002	LOWCAS= 000140   	PSECOP= 000016   	S.DF  = 100000   	.FINIT= ****** G
DIE1    000710RG    002	LPTLEN= 000074   	PSECTP= ****** GX	S.EPT = 000100   	.GET  = ****** GX
ERRPRI= ****** GX	LSTBLK= ****** GX	PSECV1= 000012   	S.EXTN= 010000   	.GETSQ  000136RG    002
ERRPTX= ****** GX	L0      000316R     002	PSECV2= 000014   	S.GLOB= 020000   	.PUT  = ****** GX
E0      000052R     002	L1      000260R     002	P2    = ****** GX	S.LOCL= 001000   	.PUTSQ  000142RG    002
FF    = 000014   	L2      000316R     002	P2STRT  000034RG    002	S.ODBG= 000040   	.SAVAL  000052RG    002
FINISH= ****** GX	L3      000316R     002	RGTANG= 000076   	S.REF = 000400   	.SAVRG  000112RG    002
FREEPT= ****** GX	L4      000346R     002

. ABS.	000000	   000
      	000000	   001
MDRIVE	001042	   002
ERRORS DETECTED:  0

VIRTUAL MEMORY USED:  12738 WORDS  ( 50 PAGES)
DYNAMIC MEMORY:  14388 WORDS  ( 55 PAGES)
ELAPSED TIME:  00:01:28
OBJ$:MDRIVE,LIS$:MDRIVE/-SP=SRC$:MD,COMMON,MDRIVE
