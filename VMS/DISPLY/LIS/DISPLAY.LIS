DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page   0
TABLE OF CONTENTS   

   (2)      43  FUNCTIONAL DESCTIPTION
   (3)      83  DECLARATIONS
   (4)     352  MAIN - MAIN PROGRAM FOR DISPLAY PROCESSOR
   (6)     538  VT55SET - INITIALIZE VT55 TERMINAL
   (7)     582  CYCLE - HANDLE AUTOMATIC CYCLING OF DISPLAYS
   (8)     667  PRINTVAL - PRINT CURRENT AND AVERAGE VALUES
   (9)     739  PRINTRATE - PRINT INTERVAL VALUE , INTERVAL AND
   (10)    834  HHIST - PRINT HORIZONTAL VALUE GRAPH
   (11)    910  VHIST - VT55 VERTICAL BAR GRAPH
   (12)   1034  GRAPH6 - ROUTINE TO MAINTAIN 6 ITEM GRAPH
   (13)   1135  GETSTATES - ROUTINE TO COUNT SCHEDULING STATE I
   (14)   1201  GET - DATA COLLECTION ROUTINES
   (15)   1268  GETPAGE - GET INFORMATION FOR PAGE INFORMATION 
   (16)   1312  GETPHDINFO - GET INFORMATION FROM PROCESS HEADE
   (17)   1365  GETFCP - Accumulate FCP Statistics
   (18)   1445  GETPOOL - Accumulate Pool Statistics
   (19)   1586  UPTIME - Construct 64 bit uptime from time in s
   (20)   1621  FETCH - COLLECT DATA FOR DISPLAY
   (21)   1685  TRANSFER - TRANSFER DATA FROM VALUES ARRAY TO S
   (22)   1750  COMPUTE_STATS - maintain statistics for this in
   (23)   1803  COMPUTE_PERCNT - STATISTICS AS INTEGER PERCENTA
   (24)   1851  FMTOUT - FORMAT AND OUTPUT STRING
   (25)   1870  EXIT - Final cleanup routine
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page   1
01                                                                                                                               (1)

                                     0000     1 
                                     0000     2 	.TITLE	DISPLAY	- STARLET PERFORMANCE DISPLAY PROGRAM
                                     0000     3 	.IDENT	/01/
                                     0000     4 
                                     0000     5 ;
                                     0000     6 ; COPYRIGHT (C) 1977
                                     0000     7 ; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS 01754
                                     0000     8 ;
                                     0000     9 ; THIS SOFTWARE IS FURNISHED  UNDER A LICENSE FOR USE ONLY ON A SINGLE
                                     0000    10 ; COMPUTER  SYSTEM AND  MAY BE  COPIED ONLY WITH  THE INCLUSION OF THE
                                     0000    11 ; ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,
                                     0000    12 ; MAY NOT BE PROVIDED OR  OTHERWISE MADE AVAILABLE TO ANY OTHER PERSON
                                     0000    13 ; EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE
                                     0000    14 ; TERMS.  TITLE TO AND  OWNERSHIP OF THE  SOFTWARE  SHALL AT ALL TIMES
                                     0000    15 ; REMAIN IN DEC.
                                     0000    16 ;
                                     0000    17 ; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE
                                     0000    18 ; AND SHOULD  NOT BE CONSTRUED  AS A COMMITMENT  BY DIGITAL  EQUIPMENT
                                     0000    19 ; CORPORATION.
                                     0000    20 ;
                                     0000    21 ; DEC ASSUMES  NO  RESPONSIBILITY  FOR  THE USE OR  RELIABILITY OF ITS
                                     0000    22 ; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
                                     0000    23 
                                     0000    24 ;++
                                     0000    25 ; FACILITY:  System Performance Analysis Display Program
                                     0000    26 ;
                                     0000    27 ; ABSTRACT:
                                     0000    28 ;
                                     0000    29 ;	DISPLAY is a VAX/VMS utility program which will display
                                     0000    30 ;	performance and system usage information on VT52 and VT55
                                     0000    31 ;	terminals.
                                     0000    32 ;
                                     0000    33 ; ENVIRONMENT: Display runs in User and Kernel modes
                                     0000    34 ;
                                     0000    35 ; AUTHOR: Henry M. Levy	, CREATION DATE: 28-March-1977
                                     0000    36 ;
                                     0000    37 ; MODIFIED BY:
                                     0000    38 ;
                                     0000    39 ;	, : VERSION
                                     0000    40 ; 01	- 
                                     0000    41 ;--
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page   2
01              FUNCTIONAL DESCTIPTION                                                                                           (2)

                                     0000    43 	.SBTTL	FUNCTIONAL DESCTIPTION
                                     0000    44 
                                     0000    45 ;
                                     0000    46 ; Display is a program to output performance related information
                                     0000    47 ; to VT52 and VT55 video terminals.  Display is written in both BLISS-32 and
                                     0000    48 ; MARS.  
                                     0000    49 ;
                                     0000    50 ; Each display has associated with it, a Display Control Block, which is
                                     0000    51 ; the structure which drives the display.  The display control block
                                     0000    52 ; contains the addresses of:
                                     0000    53 ;
                                     0000    54 ;	1) an initialization routine - called once before processing
                                     0000    55 ;	2) a data collection routine - called once per iteration
                                     0000    56 ;	3) a display routine - called once per iteration
                                     0000    57 ;
                                     0000    58 ; Any of the addresses may be the address of the routine NULL, which
                                     0000    59 ; is simply a no-op routine.  
                                     0000    60 ;
                                     0000    61 ; The other major data structure is PERFTABLE, which contains all of
                                     0000    62 ; the Item Descriptor Blocks.  Each data item which can be recorded
                                     0000    63 ; or displayed has an item ID.  This ID is used as an index into
                                     0000    64 ; PERFTABLE to locate the IDB for that item.   For each display, the
                                     0000    65 ; DCB contains an address of a byte string containing the item IDs for
                                     0000    66 ; all items in that display.   The display or collection routines can
                                     0000    67 ; locate the IDBs for all items, to get the data address, size, and
                                     0000    68 ; name strings.  The item IDs are defined in the file DSPDEF.MDL.
                                     0000    69 ;
                                     0000    70 ; The initialization, collection, and display routines are all called
                                     0000    71 ; by a CALL instruction.  On the call R9 contains the address of
                                     0000    72 ; the DCB for the display, R10 contains the address of the current
                                     0000    73 ; vector in which the data items will be stored.  Usually , the collection
                                     0000    74 ; routine will move either the data items or some function of them (e.g.,
                                     0000    75 ; the percentage of each item) to the array STATS.  The display routines
                                     0000    76 ; may then be driven off of STATS, regardless of the transformation needed
                                     0000    77 ; for the data to be displayed.  The raw data may be output directly
                                     0000    78 ; from the collection vector pointed to by R10.   R10 cycles between
                                     0000    79 ; arrays VAL1 and VAL2, so that the current and previous values are
                                     0000    80 ; always maintained.
                                     0000    81 ;
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page   3
01              DECLARATIONS                                                                                                     (3)

                                     0000    83 	.SBTTL	DECLARATIONS
                                 00000000    84 	.PSECT	DSPDATA,QUAD
                                     0000    85 ;
                                     0000    86 ; INCLUDE FILES:
                                     0000    87 ;
                                     0000    88 
                                     0000    89 ;
                                     0000    90 ; MACROS:
                                     0000    91 ;
                                     0000    92 
                                     0000    93 	$DCBDEF				; define display control block offsets
                                     0000    94 	$IDBDEF				; define item descriptor block offsets
                                     0000    95 	$IODEF				; insert I/O function codes
                                     0000    96 	$IPLDEF				; define interrupt levels
                                     0000    97 	$JPIDEF				; define GETJPI items
                                     0000    98 	$PCBDEF				; process control block
                                     0000    99 	$PHDDEF				; process header definitions
                                     0000   100 	$PRDEF				; define processor registers
                                     0000   101 	$SSDEF				; define status codes
                                     0000   102 	$TTDEF				; define terinal functions
                                     0000   103 
                                     0000   104 
                                     0000   105 ;
                                     0000   106 ; Macro to build CYCLE_TABLE entries to define displays to be
                                     0000   107 ; cycled by cycle option.
                                     0000   108 ;
                                     0000   109 
                                     0000   110 	.MACRO	CYCLE_ENTRY	DCBNAME,INTERVAL=3,TYPE=52
                                     0000   111 	.LONG	DCBNAME
                                     0000   112 	.BYTE	INTERVAL
                                     0000   113 	.BYTE	TYPE
                                     0000   114 	CYCLE_TABLE_END = .
                                     0000   115 	.ENDM	CYCLE_ENTRY
                                     0000   116 
                                     0000   117 ;
                                     0000   118 ; EQUATED SYMBOLS:
                                     0000   119 ;
                                     0000   120 
                                     0000   121 
                           00000001  0000   122 FLOAT = 1				; conditional switch
                                     0000   123 
                           00000014  0000   124 ARRAYSIZE = 20				; maximum size for data arrays
                           00000010  0000   125 AST_PC = 16				; offset to PC in ast argument block
                           00000048  0000   126 CAPH = 72				; capital 'H'
                           0000004A  0000   127 CAPJ = 74				; captial 'J'
                           0000004B  0000   128 CAPK = 75				; capital 'K'
                           0000004C  0000   129 CAPL = 76				; capital 'L'
                           0000000D  0000   130 CR = 13					; carriage return
                           0000001B  0000   131 ESC = 27				; escape character
                           0000000A  0000   132 LF = 10					; line feed
                           00000028  0000   133 MAXBARS == 40				; number of bar chars in horiz. graph
                           000000C8  0000   134 MAX55HEIGHT = 200			; max height of vertical bars (VT55)
                           00000032  0000   135 STARTPOS = 50				; start of bargraph position
                           00000026  0000   136 START_XPOS = 34+4			; starting x position for VT55 bar
                           00000018  0000   137 VTHEIGHT == 24				; number of rows on screen
                           00000050  0000   138 VTWIDTH == 80				; number of columns on screen
                           0000004A  0000   139 VT55CWIDTH == 74			; number of chars. on x axis
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page   4
01              DECLARATIONS                                                                                                     (3)

                           000000EC  0000   140 VT55HEIGHT = 236			; screen height in points
                           00000200  0000   141 VT55WIDTH = 512				; screen width in points
                                     0000   142 
                                     0000   143 
                                     0000   144 ;
                                     0000   145 ; FLAGS BIT DEFINITIONS
                                     0000   146 ;
                                     0000   147 
                           00000000  0000   148 V_FIRSTTIME = 0				; first call to data collection
                           00000001  0000   149 V_CYCLEMODE = 1				; currently cycling displays
                                     0000   150 
                                     0000   151 ;
                                     0000   152 ; OWN STORAGE:
                                     0000   153 ;
                                     0000   154 
                                     0000   155 ;
                                     0000   156 ; QIO argument list
                                     0000   157 ;
                                     0000   158 
                                     0000   159 QIOLST:	$QIOW	FUNC=<IO$_WRITEVBLK!IO$M_NOFORMAT>,P1=OUTBUF
                                     0034   160 
                           00000019  0034   161 BARSIZE::	.LONG	25		; width of bar graph in points (VT55)
                           00000000  0038   162 CURDCB::	.LONG	0		; address of current display control block
                           00000000  003C   163 CURGRAPH::	.LONG	0		; currently enabled VT55 graph
                           00000000  0040   164 CURXPOS:	.LONG	0		; current position for GRAPH6
                           0000004C  0044   165 CPUTIME:	.BLKQ	1		; space for saved process cpu time
                           00000000  004C   166 CYCLE_COUNT:	.LONG	0		; number of updates
                                     0050   167 
                                     0050   168 ;
                                     0050   169 ; Table of display DCB addresses, update intervals, and terminal types
                                     0050   170 ; for cycling through displays.
                                     0050   171 ;
                                     0050   172 
                                     0050   173 CYCLE_ADDR:				; address of next display in cycle
                           00000000  0050   174 	.LONG	0
                                     0054   175 CYCLE_TABLE:
                                     0054   176 	CYCLE_ENTRY	MODE3DCB,INTERVAL=1,TYPE=55
                                     005A   177 	CYCLE_ENTRY	USERDCB
                                     0060   178 	CYCLE_ENTRY	TOPTENDCB,INTERVAL=2
                                     0066   179 	CYCLE_ENTRY	PAGEDCB
                                     006C   180 	CYCLE_ENTRY	STATEDCB,INTERVAL=1,TYPE=55
                                     0072   181 	CYCLE_ENTRY	IORATEDCB
                                     0078   182 	CYCLE_ENTRY	MODE2DCB,INTERVAL=2
                                     007E   183 	CYCLE_ENTRY	POOLDCB
                                     0084   184 	CYCLE_ENTRY	S2DCB
                                     008A   185 	.ALIGN LONG
                                     008C   186 CYCLE_TIME::				; interval between displays
                           F70F2E80  008C   187 	.LONG	-10*1000*1000*15
                           FFFFFFFF  0090   188 	.LONG	-1
                                     0094   189 
                           00000000  0094   190 DISPLAY_TYPE:	.LONG	0		; display format indicator
                           00000000  0098   191 DSPFLGS::	.LONG	0		; global flags longword
                                     009C   192 
                                     009C   193 
                                     009C   194 ;
                                     009C   195 ; Global buffers and variables for building of fao control strings
                                     009C   196 ; and parameter lists.
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page   5
01              DECLARATIONS                                                                                                     (3)

                                     009C   197 ;
                                     009C   198 
                                     009C   199 FAOBUF::				; fao control string buffer
                           000002F4  009C   200 		.BLKB	600		;
                                     02F4   201 FAODSC::				; descriptor for output control string
                           00000000  02F4   202 		.LONG	0		; to be filled in
                           0000009C' 02F8   203 		.LONG	FAOBUF		; buffer address
                           00000000  02FC   204 FAOLEN:		.LONG	0		; space for return length
                                     0300   205 FAOSTK::				; space for fao argument list
                           00000440  0300   206 		.BLKL	4*ARRAYSIZE
                                     0440   207 
                                     0440   208 ;
                                     0440   209 ; VARIABLES FILLED IN BY FCP DISPLAY COLLECTION ROUTINE
                                     0440   210 ;
                                     0440   211 
                           00000000  0440   212 FCPCALLS::	.LONG	0		; total calls to FCP
                           00000000  0444   213 FCPCACHE::	.LONG	0		; FCP directory cache hits
                           00000000  0448   214 FCPCPU::	.LONG	0		; FCP CPU time used
                           00000000  044C   215 FCPREAD::	.LONG	0		; FCP disk reads
                           00000000  0450   216 FCPWRITE::	.LONG	0		; FCP disk writes
                                     0454   217 
                           00000000  0454   218 INITFLG:	.LONG	0		; initialize flag
                           00000005' 0458   219 INPDSC:		.LONG	20$-10$		; descriptor for INPUT logical name
                           00000460' 045C   220 		.LONG	10$
                     54 55 50 4E 49  0460   221 10$:		.ASCII	/INPUT/
                                     0465   222 20$:	
                                     0465   223 	.ALIGN LONG
                                     0468   224 INTERVAL::
                           FF676980  0468   225 		.LONG	-10*1000*1000	; update interval (delta time)
                           FFFFFFFF  046C   226 		.LONG	-1		; 
                                     0470   227 
                                     0470   228 ;
                                     0470   229 ; Space for accumulating statistics on the nonpaged pool.
                                     0470   230 ; (do not change order)
                                     0470   231 ;
                                     0470   232 
                           00000000  0470   233 HOLECNT::	.LONG	0		; number of blocks in nonpaged pool
                           00000000  0474   234 HOLESUM::	.LONG	0		; total space in pool
                           00000000  0478   235 BIGHOLE::	.LONG	0		; largest hole in pool
                           00000000  047C   236 SMALLCNT::	.LONG	0		; number of holes < 32 bytes
                           00000000  0480   237 SMALLHOLE::	.LONG	0		; smallest hole in pool
                           00000000  0484   238 IRPCNT::	.LONG	0		; number of packets in look aside pool
                                     0488   239 
                           000004D8  0488   240 MAX:		.BLKL	ARRAYSIZE	; vector of maximum values for data
                           00000528  04D8   241 MIN:		.BLKL	ARRAYSIZE	; vector of minimum values for data
                           00000000  0528   242 NEWXPOS:	.LONG	0		; next point to plot for GRAPH6
                           00000000  052C   243 NULLTIME:	.LONG	0		; previous CPU time of null process
                                     0530   244 OUTDSC::				; output buffer descriptor
                           00000258  0530   245 		.LONG	600		; six hundred bytes
                           00000538' 0534   246 		.LONG	OUTBUF		; output buffer
                           00000790  0538   247 OUTBUF:		.BLKB	600		; the buffer itself
                           00000000  0790   248 SPSAVE:		.LONG	0		; save keeping for stack pointer
                           00000000  0794   249 SYSFAULTS::	.LONG	0		; count of system space page faults
                                     0798   250 
                                     0798   251 ;
                                     0798   252 ; Space for time at start of display initialization and time at start
                                     0798   253 ; of each collection interval.
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page   6
01              DECLARATIONS                                                                                                     (3)

                                     0798   254 ;
                                     0798   255 
                                     0798   256 STARTIME:
                           000007A0  0798   257 		.BLKQ	1		; start of initialization
                                     07A0   258 SYSTIME:
                           000007A8  07A0   259 		.BLKQ	1		; start of interval
                                     07A8   260 SYSINTRVL::
                           000007B0  07A8   261 		.BLKQ	1		; time since last interval
                                     07B0   262 					; (only low 32 bits are computed)
                                     07B0   263 
                                     07B0   264 ;
                                     07B0   265 ; The quadword time slot must be adjacent to STATS
                                     07B0   266 ;
                                     07B0   267 
                           000007B8  07B0   268 		.BLKQ	1		; slot for time stamp
                           00000808  07B8   269 STATS:		.BLKL	ARRAYSIZE	; array for data to be written to disk
                                     0808   270 
                           00000858  0808   271 SUM:		.BLKL	ARRAYSIZE	; sum of collected values
                               0000  0858   272 TTCHAN::	.WORD	0		; terminal channel number
                           00000002' 085A   273 TTNAME::	.LONG	20$-10$		; descriptor for terminal
                           00000862' 085E   274 		.LONG	10$		; address of string
                              54 54  0862   275 10$:		.ASCII	/TT/		; terminal name string
                                     0864   276 20$:
                                     0864   277 
                                     0864   278 	.ALIGN	LONG
                                     0864   279 
                           0000086C  0864   280 		.BLKQ	1		; space for time stamp
                           000008BC  086C   281 VAL1:		.BLKL	ARRAYSIZE	; first data collection array
                           000008C4  08BC   282 		.BLKQ	1		; space for time stamp
                           00000914  08C4   283 VAL2:		.BLKL	ARRAYSIZE	; second data collection array
                           00000034  0914   284 VTTYPE::	.LONG	52		; note VT52 terminal
                           00000000  0918   285 VT55XINCR::	.LONG	0		; incr to next bar of graph
                                     091C   286 
                                     091C   287 ;
                                     091C   288 ; Common data for the USERS display
                                     091C   289 ;
                                     091C   290 
                                     091C   291 USRCPUTIM::				; process accumulated CPU time
                           00000924  091C   292 	.BLKQ	1
                                     0924   293 USRDIRIO::				; process accumulated direct I/Os
                           00000928  0924   294 	.BLKL	1
                                     0928   295 USRPAGEFLTS::				; process page faults
                           0000092C  0928   296 	.BLKL	1
                                     092C   297 
                                     092C   298 ;
                                     092C   299 ; Control and name strings
                                     092C   300 ;
                                     092C   301 
                                     092C   302 CLRVT55::
                                 08' 092C   303 	.BYTE	10$-5$
                                     092D   304 5$:
                              31 1B' 092D   305 	.BYTE	ESC,^A/1/		; enter graphics mode
                              20 41  092F   306 	.BYTE	^A/A/,^X20		; turn off graphs
                              30 49  0931   307 	.BYTE	^A/I/,^X30		; turn off lines, cursors, etc.
                              32 1B' 0933   308 	.BYTE	ESC,^A/2/		; back to alphanumeric mode
                                     0935   309 10$:
                                     0935   310 
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page   7
01              DECLARATIONS                                                                                                     (3)

                                     0935   311 NAMESTR::
                                 08' 0935   312 	.BYTE	10$-5$
                                 0D' 0936   313 5$:	.BYTE	CR
                           2A 23 21  0937   314 	.ASCII	'!#*'
                                 0A' 093A   315 	.BYTE	LF
                           43 41 21  093B   316 	.ASCII	'!AC'
                                     093E   317 10$:
                                     093E   318 
                                     093E   319 ;
                                     093E   320 ; String for formatting free list and modify list size on page display
                                     093E   321 ;
                                     093E   322 
                                     093E   323 PAGESTR:
                                 10' 093E   324 	.BYTE	10$-5$
                                     093F   325 5$:
                        2D 20 59 1B' 093F   326 	.BYTE	ESC,^A/Y/,32+0,32+13			; position command
                        4C 55 34 21  0943   327 	.ASCII	\!4UL\
                        6B 20 59 1B' 0947   328 	.BYTE	ESC,^A/Y/,32+0,32+75			; position command
                        4C 55 34 21  094B   329 	.ASCII	\!4UL\
                                     094F   330 10$:
                                     094F   331 ;
                                     094F   332 ; Starting message, home and clear screen, set regular graphics.
                                     094F   333 ;
                                     094F   334 
                                     094F   335 STRTMSG:
                                 17' 094F   336 	.BYTE	10$-5$
                  4A 1B'48 1B'47 1B' 0950   337 5$:	.BYTE	ESC,^A/G/,ESC,^A/H/,ESC,^A/J/
59 41 4C 50 53 49 44 29 5F 28 34 21  0956   338 	.ASCII	'!4(_)DISPLAY!2(/)'
                     29 2F 28 32 21  0962       
                                     0967   339 10$:
                                     0967   340 
                                     0967   341 	TITLESTR::
                                 0B' 0967   342 	.BYTE	10$-5$
                        4A 1B'48 1B' 0968   343 5$:	.BYTE	ESC,^A/H/,ESC,^A/J/
               43 41 21 20 2A 23 21  096C   344 	.ASCII	'!#* !AC'
                                     0973   345 10$:
                                     0973   346 
                                     0973   347 TYPESTR:					; ask terminal to identify itself
                              5A 1B' 0973   348 	.BYTE	ESC,^A/Z/
                                     0975   349 VT55RSP:					; VT55 response to identify message
                           45 2F 1B' 0975   350 	.BYTE	ESC,^A./.,^A.E.
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page   8
01              MAIN - MAIN PROGRAM FOR DISPLAY PROCESSOR                                                                        (4)

                                     0978   352 	.SBTTL	MAIN - MAIN PROGRAM FOR DISPLAY PROCESSOR
                                     0978   353 	.LIST	MEB
                                 00000000   354 	.PSECT	DSPCODE,NOWRT
                                     0000   355 
                                     0000   356 ;++
                                     0000   357 ;
                                     0000   358 ; FUNCTIONAL DESCRIPTION:
                                     0000   359 ;
                                     0000   360 ;	Call user interface and initialization routines to set up
                                     0000   361 ;	data structures.  Once display is defined, registers are
                                     0000   362 ;	loaded with parameters needed for run time loop.
                                     0000   363 ;
                                     0000   364 ; CALLING SEQUENCE:
                                     0000   365 ;
                                     0000   366 ;	CALLS/CALLG
                                     0000   367 ;
                                     0000   368 ; INPUTS:
                                     0000   369 ;
                                     0000   370 ;	none
                                     0000   371 ;
                                     0000   372 ; IMPLICIT INPUTS:
                                     0000   373 ;
                                     0000   374 ;	AST_PC - offset to return PC in timer AST control block
                                     0000   375 ;
                                     0000   376 ; OUTPUTS:
                                     0000   377 ;
                                     0000   378 ;	none
                                     0000   379 ;
                                     0000   380 ; IMPLICIT OUTPUTS:
                                     0000   381 ;
                                     0000   382 ;	none
                                     0000   383 ;
                                     0000   384 ; COMPLETION CODES:
                                     0000   385 ;
                                     0000   386 ;	none
                                     0000   387 ;
                                     0000   388 ; SIDE EFFECTS:
                                     0000   389 ;
                                     0000   390 ;	none
                                     0000   391 ;--
                                     0000   392 
                                     0000   393 MAIN::
                                     0000   394 
                               0000  0000   395 	.WORD	0			; register save mask ( no registers )
                                     0002   396 
                                     0002   397 	
                                     0002   398 ;
                                     0002   399 ; Assign the user's terminal for all input and output
                                     0002   400 ;
                                     0002   401 
                                     0002   402 	$ASSIGN_S DEVNAM=W^TTNAME,CHAN=W^TTCHAN
                          7E     7C  0002       		CLRQ	-(SP)
                     0858'CF     3F  0004       		PUSHAW	W^TTCHAN
                     085A'CF     7F  0008       		PUSHAQ	W^TTNAME
   00000000'GF            04     FB  000C       		CALLS	#4,G^SYS$ASSIGN
            0D            50     E8  0013   403 	BLBS	R0,5$			; continue if assign ok
                                     0016   404 	$EXIT_S	CODE=#100		; exit with error code
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page   9
01              MAIN - MAIN PROGRAM FOR DISPLAY PROCESSOR                                                                        (4)

                 00000064 8F     DD  0016       		PUSHL	#100
   00000000'GF            01     FB  001C       		CALLS	#1,G^SYS$EXIT
                                     0023   405 5$:	
                                     0023   406 
                                     0023   407 ;
                                     0023   408 ; Save channel number and stack pointer
                                     0023   409 ;
                                     0023   410 
       0008'CF       0858'CF     3C  0023   411 	MOVZWL	W^TTCHAN,W^QIOLST+QIOW$_CHAN ; insert channel in QIO arg list
       0790'CF            5E     D0  002A   412 	MOVL	SP,W^SPSAVE		; save pointer for easy cleanup
                                     002F   413 
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  10
01              MAIN - MAIN PROGRAM FOR DISPLAY PROCESSOR                                                                        (5)

                                     002F   415 ;
                                     002F   416 ; This is the main loop which is returned to if the user types
                                     002F   417 ; control-C to regain control from the program.
                                     002F   418 ;
                                     002F   419 
                                     002F   420 DSPSTRT:
            5E       0790'CF     D0  002F   421 	MOVL	W^SPSAVE,SP		; restore stack to healthy condition
                     004C'CF     D4  0034   422 	CLRL	W^CYCLE_COUNT		; nothing has been collected yet
       0034'CF            19     D0  0038   423 	MOVL	#25,W^BARSIZE		; reset default vt55 bar width
       0914'CF            37     D1  003D   424 	CMPL	#55,W^VTTYPE		; is this a VT55?
                          03     12  0042   425 	BNEQ	10$			; branch if not
                          0117   30  0044   426 	BSBW	VT55SET			; call VT55 init code
                                     0047   427 10$:
       0098'CF            01     E0  0047   428 	BBS	#V_CYCLEMODE,W^DSPFLGS,20$ ; skip user interface if cycling
                          41         004C       
                                     004D   429 	$QIOW_S	CHAN=W^TTCHAN,-		; set CNTRL-C ast handler
                                     004D   430 		FUNC=#<IO$_SETMODE!IO$M_CTRLCAST>,-
                                     004D   431 		P1=W^CNTRL_C		; address of control-c handler
                          7E     7C  004D       		CLRQ	-(SP)
                          7E     7C  004F       		CLRQ	-(SP)
                          00     DD  0051       		PUSHL	#0
                     0146'CF     DF  0053       		PUSHAL	W^CNTRL_C
                          7E     7C  0057       		CLRQ	-(SP)
                          00     DD  0059       		PUSHL	#0
            7E       0123 8F     3C  005B       		MOVZWL	#<IO$_SETMODE!IO$M_CTRLCAST>,-(SP)
            7E       0858'CF     3C  0060       		MOVZWL	W^TTCHAN,-(SP)
                          00     DD  0065       		PUSHL	#0
   00000000'GF            0C     FB  0067       		CALLS	#12,G^SYS$QIOW
                     094F'CF     DF  006E   432 	PUSHAL	W^STRTMSG		; address of starting announcement
       0000'CF            01     FB  0072   433 	CALLS	#1,W^FAOOUT		; announce that we're here
       0000'CF            00     FB  0077   434 	CALLS	#0,W^QUERY		; define user supplied parameters
            03            50     E8  007C   435 	BLBS	R0,15$			; check if user wishes to exit
                          07EE   31  007F   436 	BRW	EXIT			; exit if yes
                                     0082   437 15$:
            07       0454'CF     E8  0082   438 	BLBS	W^INITFLG,20$		; check if we've been here before
                          00E0   30  0087   439 	BSBW	GET_TT_TYPE		; if not, determine terminal type
                     0454'CF     D6  008A   440 	INCL	W^INITFLG		; and note that we've done it
                                     008E   441 	
                                     008E   442 ;
                                     008E   443 ; Initialize all collection data structures.
                                     008E   444 ;
                                     008E   445 
                          50     D4  008E   446 20$:	CLRL	R0			; clear counter
                                     0090   447 
                                     0090   448 30$:
       04D8'CF40          01     CE  0090   449 	MNEGL	#1,W^MIN[R0]		; make min large
                     0488'CF40   D4  0096   450 	CLRL	W^MAX[R0]		; make max small
                     086C'CF40   D4  009B   451 	CLRL	W^VAL1[R0]		; zero data arrays
                     08C4'CF40   D4  00A0   452 	CLRL	W^VAL2[R0]		;
                     0808'CF40   D4  00A5   453 	CLRL	W^SUM[R0]		;
            50            14     F2  00AA   454 	AOBLSS	#ARRAYSIZE,R0,30$	; continue until done
                          E2         00AD       
                                     00AE   455 
                                     00AE   456 ;
                                     00AE   457 ; Set up the registers for collection and display process as follows:
                                     00AE   458 ;	R8 - address of data collection routine
                                     00AE   459 ;	R9 - address of Display Control Block
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  11
01              MAIN - MAIN PROGRAM FOR DISPLAY PROCESSOR                                                                        (5)

                                     00AE   460 ;	R10 - address of vector to store gathered values
                                     00AE   461 ;		( This is either VAL1 or VAL2  , as each
                                     00AE   462 ;		  cycle alternates between vectors to keep the
                                     00AE   463 ;		  current and previous values. )
                                     00AE   464 ;
                                     00AE   465 
            5A       086C'CF     DE  00AE   466 	MOVAL	W^VAL1,R10		; address to store gathered values
            59       0038'CF     D0  00B3   467 	MOVL	W^CURDCB,R9		; get DCB address ( set by QUERY )
            58         10 A9     D0  00B8   468 	MOVL	DCB$L_COLLECT(R9),R8	; set collection routine address
                                     00BC   469 
                                     00BC   470 ;
                                     00BC   471 ; Call initialization routine and verify that it completed properly.
                                     00BC   472 ;
                                     00BC   473 
         0C B9            00     FB  00BC   474 	CALLS	#0,@DCB$L_INIT(R9)	; call initialization routine
            03            50     E8  00C0   475 	BLBS	R0,40$			; continue on normal init return
                          FF69   31  00C3   476 	BRW	DSPSTRT			; else reprompt for display name
                                     00C6   477 40$:
       0098'CF            00     E2  00C6   478 	BBSS	#V_FIRSTTIME,W^DSPFLGS,50$ ; indicate first collection call
                          00         00CB       
                                     00CC   479 50$:
       0798'CF   00000000'EF     7D  00CC   480 	MOVQ	EXE$GQ_SYSTIME,W^STARTIME ; save experiment start time
       07A0'CF       0798'CF     7D  00D5   481 	MOVQ	W^STARTIME,W^SYSTIME	; get low order bits for interval start
                                     00DC   482 	$CMEXEC_S ROUTIN=(R8)		; call collection routine for initial data
                          00     DD  00DC       		PUSHL	#0
                          68     DF  00DE       		PUSHAL	(R8)
   00000000'GF            02     FB  00E0       		CALLS	#2,G^SYS$CMEXEC
       0098'CF            00     E5  00E7   483 	BBCC	#V_FIRSTTIME,W^DSPFLGS,60$ ; clear first time flag
                          00         00EC       
                                     00ED   484 60$:
                          003A   31  00ED   485 	BRW	90$			; start at timer point
                                     00F0   486 70$:
                                     00F0   487 
                                     00F0   488 ;
                                     00F0   489 ; Main collection code.   Executes once every interval to collect
                                     00F0   490 ; data and update display.
                                     00F0   491 ;
                                     00F0   492 
                                     00F0   493 ;
                                     00F0   494 ; R10 cycles between the two arrays at VAL1 and VAL2 so
                                     00F0   495 ; that the previous interval's times are always maintained.  Switch R10
                                     00F0   496 ; to point to the proper array for the next interval.
                                     00F0   497 ;
                                     00F0   498 
            50       086C'CF     DE  00F0   499 	MOVAL	W^VAL1,R0		; address for 'even' collection
            5A            50     D1  00F5   500 	CMPL	R0,R10			; are we using that now?
                          05     12  00F8   501 	BNEQ	80$			; branch if not and make it so
            50       08C4'CF     DE  00FA   502 	MOVAL	W^VAL2,R0		; else use other array
            5A            50     D0  00FF   503 80$:	MOVL	R0,R10			; switch R10
                                     0102   504 
   00000000'EF       07A0'CF     C3  0102   505 	SUBL3	W^SYSTIME,EXE$GQ_SYSTIME,W^SYSINTRVL ; get interval tics
                     07A8'CF         010B       
       07A0'CF   00000000'EF     7D  010E   506 	MOVQ	EXE$GQ_SYSTIME,W^SYSTIME ; save next time start
                                     0117   507 	$CMEXEC_S ROUTIN=(R8)		; call collection routine
                          00     DD  0117       		PUSHL	#0
                          68     DF  0119       		PUSHAL	(R8)
   00000000'GF            02     FB  011B       		CALLS	#2,G^SYS$CMEXEC
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  12
01              MAIN - MAIN PROGRAM FOR DISPLAY PROCESSOR                                                                        (5)

                     004C'CF     D6  0122   508 	INCL	W^CYCLE_COUNT		; one more data point collected
                                     0126   509 
                                     0126   510 ;
                                     0126   511 ; Call data output routine, if any
                                     0126   512 ;
                                     0126   513 
         14 B9            00     FB  0126   514 	CALLS	#0,@DCB$L_DISPLAY(R9)	; call display routine
                                     012A   515 
                                     012A   516 ;
                                     012A   517 ; Display routine returns here
                                     012A   518 ; Set timer for next interval
                                     012A   519 ;
                                     012A   520 
                                     012A   521 90$:	$SETIMR_S EFN=#4,DAYTIM=W^INTERVAL ; wait for next interval
                          00     DD  012A       		PUSHL	#0
                          00     DD  012C       		PUSHL	#0
                     0468'CF     DF  012E       		PUSHAL	W^INTERVAL
                          04     DD  0132       		PUSHL	#4
   00000000'GF            04     FB  0134       		CALLS	#4,G^SYS$SETIMR
                                     013B   522 	$WAITFR_S EFN=#4		; wait for timer to expire
                          04     DD  013B       		PUSHL	#4
   00000000'GF            01     FB  013D       		CALLS	#1,G^SYS$WAITFR
                          AA     11  0144   523 	BRB	70$			; back to main line code
                                     0146   524 
                                     0146   525 ;
                                     0146   526 ;
                                     0146   527 ; Ast entry point for control-C ast
                                     0146   528 ;
                                     0146   529 ;
                                     0146   530 
                                     0146   531 CNTRL_C:
                               0000  0146   532 	.WORD	0			; save no registers
                                     0148   533 	$CANTIM_S			; cancel all timer requests
                          00     DD  0148       		PUSHL	#0
                          00     DD  014A       		PUSHL	#0
   00000000'GF            02     FB  014C       		CALLS	#2,G^SYS$CANTIM
         10 AC       FED8 CF     DE  0153   534 	MOVAL	W^DSPSTRT,AST_PC(AP)	; change return address to restart display
                     0098'CF     D4  0159   535 	CLRL	W^DSPFLGS		; clear display flags
                                 04  015D   536 	RET				; return from AST to display
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  13
01              VT55SET - INITIALIZE VT55 TERMINAL                                                                               (6)

                                     015E   538 	.SBTTL	VT55SET - INITIALIZE VT55 TERMINAL
                                     015E   539 
                                     015E   540 ;++
                                     015E   541 ;
                                     015E   542 ; FUNCTIONAL DESCRIPTION:
                                     015E   543 ;
                                     015E   544 ;	Routine to clear VT55 and graphic memories.
                                     015E   545 ;
                                     015E   546 ; INPUTS:
                                     015E   547 ;
                                     015E   548 ;	none
                                     015E   549 ;
                                     015E   550 ; OUTPUTS:
                                     015E   551 ;
                                     015E   552 ;	none
                                     015E   553 ;--
                                     015E   554 
                                     015E   555 VT55SET:
                 0000092C'EF     DF  015E   556 	PUSHAL	CLRVT55			; clear screen
       0000'CF            01     FB  0164   557 	CALLS	#1,W^OUTPUT		; output message
                                 05  0169   558 	RSB				; return
                                     016A   559 
                                     016A   560 
                                     016A   561 ;
                                     016A   562 ; Routine to determine if terminal is VT55.  If not , VT52 is assumed.
                                     016A   563 ;
                                     016A   564 
                                     016A   565 GET_TT_TYPE:
            50            7E     7E  016A   566 	MOVAQ	-(SP),R0		; construct terminator block
                          60     7C  016D   567 	CLRQ	(R0)			;  ..terminate on nothing
                                     016F   568 	$QIOW_S	CHAN=W^TTCHAN,-
                                     016F   569 		FUNC=#<IO$_READPROMPT!IO$M_TIMED!IO$M_NOECHO!IO$M_PURGE>,-
                                     016F   570 		P1=W^FAOBUF,P2=#3,-
                                     016F   571 		P3=#2,-			; timeout interval in seconds
                                     016F   572 		P4=R0,-			; no terminators
                                     016F   573 		P5=#TYPESTR,P6=#2	; control-Z string
                          02     DD  016F       		PUSHL	#2
                 00000973'8F     DD  0171       		PUSHL	#TYPESTR
                          50     DD  0177       		PUSHL	R0
                          02     DD  0179       		PUSHL	#2
                          03     DD  017B       		PUSHL	#3
                     009C'CF     DF  017D       		PUSHAL	W^FAOBUF
                          7E     7C  0181       		CLRQ	-(SP)
                          00     DD  0183       		PUSHL	#0
            7E       08F7 8F     3C  0185       		MOVZWL	#<IO$_READPROMPT!IO$M_TIMED!IO$M_NOECHO!IO$M_PURGE>,-(SP)
            7E       0858'CF     3C  018A       		MOVZWL	W^TTCHAN,-(SP)
                          00     DD  018F       		PUSHL	#0
   00000000'GF            0C     FB  0191       		CALLS	#12,G^SYS$QIOW
                                     0198   574 
       0914'CF            34     D0  0198   575 	MOVL	#52,W^VTTYPE		; set as VT52
       0975'CF            03     29  019D   576 	CMPC3	#3,W^VT55RSP,W^FAOBUF	; was it a 55?
                     009C'CF         01A2       
                          05     12  01A5   577 	BNEQ	10$			; branch if not
       0914'CF            37     D0  01A7   578 	MOVL	#55,W^VTTYPE		; else set as VT55
            5E            08     C0  01AC   579 10$:	ADDL	#8,SP			; clean descriptor from stack
                                 05  01AF   580 	RSB
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  14
01              CYCLE - HANDLE AUTOMATIC CYCLING OF DISPLAYS                                                                     (7)

                                     01B0   582 	.SBTTL	CYCLE - HANDLE AUTOMATIC CYCLING OF DISPLAYS
                                     01B0   583 
                                     01B0   584 ;++
                                     01B0   585 ;
                                     01B0   586 ; FUNCTIONAL DESCRIPTION:
                                     01B0   587 ;
                                     01B0   588 ;	This routine is called to initialize the CYCLE command
                                     01B0   589 ;	which automatically switches displays for continuous 
                                     01B0   590 ;	demonstrations.  The cycling is table driven.  Each
                                     01B0   591 ;	display has its own update interval.  VT55 displays
                                     01B0   592 ;	will only be shown on VT55 terminals.
                                     01B0   593 ;
                                     01B0   594 ; CALLING SEQUENCE:
                                     01B0   595 ;
                                     01B0   596 ;	CALLS/CALLG
                                     01B0   597 ;
                                     01B0   598 ; INPUTS:
                                     01B0   599 ;
                                     01B0   600 ;	none
                                     01B0   601 ;
                                     01B0   602 ; IMPLICIT INPUTS:
                                     01B0   603 ;
                                     01B0   604 ;	CYCLE_TABLE - table of display information for each display
                                     01B0   605 ;	CYCLE_TABLE_END - address of last byte in table + 1
                                     01B0   606 ;	CYCLE_ADDR - address of next CYCLE_TABLE entry
                                     01B0   607 ;
                                     01B0   608 ; OUTPUTS:
                                     01B0   609 ;
                                     01B0   610 ;	none
                                     01B0   611 ;
                                     01B0   612 ; IMPLICIT OUTPUTS:
                                     01B0   613 ;
                                     01B0   614 ;	CURDCB - intialized to next DCB address
                                     01B0   615 ;	CYCLE_ADDR - updated to next entry in CYCLE_TABLE
                                     01B0   616 ;
                                     01B0   617 ; COMPLETION CODES:
                                     01B0   618 ;
                                     01B0   619 ;	none
                                     01B0   620 ;
                                     01B0   621 ; SIDE EFFECTS:
                                     01B0   622 ;
                                     01B0   623 ;	none
                                     01B0   624 ;--
                                     01B0   625 
                                     01B0   626 	.ENABL	LSB
                                     01B0   627 CYCLE::
                               0000  01B0   628 	.WORD	0			; register save mask
       0454'CF            00     E2  01B2   629 	BBSS	#0,W^INITFLG,5$		; branch if we know the terminal type
                          03         01B7       
                          FFAF   30  01B8   630 	BSBW	GET_TT_TYPE		; else find out and remember
       0098'CF            01     E2  01BB   631 5$:	BBSS	#V_CYCLEMODE,W^DSPFLGS,10$ ; notice that we're cycling
                          00         01C0       
            50       0054'CF     DE  01C1   632 10$:	MOVAL	W^CYCLE_TABLE,R0	; init with first display info
                          01     10  01C6   633 	BSBB	20$			; set up next display
                                 04  01C8   634 	RET				; return from init call
                                     01C9   635 
                                     01C9   636 ;
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  15
01              CYCLE - HANDLE AUTOMATIC CYCLING OF DISPLAYS                                                                     (7)

                                     01C9   637 ; Set up next DCB address and set timer.
                                     01C9   638 ;
                                     01C9   639 
                                     01C9   640 20$:
   0000008A'8F            50     D1  01C9   641 	CMPL	R0,#CYCLE_TABLE_END	; is it time to start over?
                          07     1F  01D0   642 	BLSSU	30$			; branch if not
            50       0054'CF     DE  01D2   643 	MOVAL	W^CYCLE_TABLE,R0	; restart cycle
                          F0     11  01D7   644 	BRB	20$			; 
                                     01D9   645 30$:
       0038'CF            80     D0  01D9   646 	MOVL	(R0)+,W^CURDCB		; store DCB address
            51            80     9A  01DE   647 	MOVZBL	(R0)+,R1		; get interval in seconds
       0914'CF            80     91  01E1   648 	CMPB	(R0)+,W^VTTYPE		; check for VT55 only display
                          E1     14  01E6   649 	BGTR	20$			; if GTR then skip this display
       0050'CF            50     D0  01E8   650 	MOVL	R0,W^CYCLE_ADDR		; remember where we were
            51   FF676980 8F     7A  01ED   651 	EMUL	#-10*1000*1000,R1,#0,W^INTERVAL ; save update interval
       0468'CF            00         01F4       
                                     01F8   652 	$SETIMR_S DAYTIM=W^CYCLE_TIME,ASTADR=W^CYCLE_AST ; set ast to switch display
                          00     DD  01F8       		PUSHL	#0
                     020C'CF     DF  01FA       		PUSHAL	W^CYCLE_AST
                     008C'CF     DF  01FE       		PUSHAL	W^CYCLE_TIME
                          00     DD  0202       		PUSHL	#0
   00000000'GF            04     FB  0204       		CALLS	#4,G^SYS$SETIMR
                                 05  020B   653 	RSB				; return to caller
                                     020C   654 
                                     020C   655 ;
                                     020C   656 ; AST to cause display to switch
                                     020C   657 ;
                                     020C   658 
                                     020C   659 CYCLE_AST:
                               0000  020C   660 	.WORD	0			; save mask
            50       0050'CF     D0  020E   661 	MOVL	W^CYCLE_ADDR,R0		; get previous position in list
                          B4     10  0213   662 	BSBB	20$			; set up next display
         10 AC       FE16 CF     DE  0215   663 	MOVAL	W^DSPSTRT,AST_PC(AP)	; reset program to start this display
                                 04  021B   664 	RET				; return to start up display
                                     021C   665 	.DSABL	LSB
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  16
01              PRINTVAL - PRINT CURRENT AND AVERAGE VALUES                                                                      (8)

                                     021C   667 	.SBTTL	PRINTVAL - PRINT CURRENT AND AVERAGE VALUES
                                     021C   668 
                                     021C   669 ;++
                                     021C   670 ;
                                     021C   671 ; FUNCTIONAL DESCRIPTION:
                                     021C   672 ;
                                     021C   673 ;	Routine to output current and average values.
                                     021C   674 ;
                                     021C   675 ; CALLING SEQUENCE:
                                     021C   676 ;
                                     021C   677 ;	CALLS/CALLG
                                     021C   678 ;
                                     021C   679 ; INPUTS:
                                     021C   680 ;
                                     021C   681 ;	R9  - address of DCB for current display
                                     021C   682 ;	R10 - address of current values
                                     021C   683 ;
                                     021C   684 ; IMPLICIT INPUTS:
                                     021C   685 ;
                                     021C   686 ;	SUM - vector of the sum of the values
                                     021C   687 ;
                                     021C   688 ; OUTPUTS:
                                     021C   689 ;
                                     021C   690 ;	none
                                     021C   691 ;
                                     021C   692 ; IMPLICIT OUTPUTS:
                                     021C   693 ;
                                     021C   694 ;	none
                                     021C   695 ;
                                     021C   696 ; COMPLETION CODES:
                                     021C   697 ;
                                     021C   698 ;	none
                                     021C   699 ;
                                     021C   700 ; SIDE EFFECTS:
                                     021C   701 ;
                                     021C   702 ;	none
                                     021C   703 ;--
                                     021C   704 
                                     021C   705 PRINTVAL::
                               0000  021C   706 	.WORD	0
                          50     D4  021E   707 	CLRL	R0			; note print value entry point
                          05     11  0220   708 	BRB	PRT
                                     0222   709 PRINTAVG::
                               0000  0222   710 	.WORD	0	
            50            01     9A  0224   711 	MOVZBL	#1,R0			; note print average entry point
                                     0227   712 PRT:
                                     0227   713 ;
                                     0227   714 ; Build argument list for FAO and output the formatted string.
                                     0227   715 ;
                                     0227   716 
            51         04 A9     D0  0227   717 	MOVL	DCB$L_COUNT(R9),R1	; get number of items
            52       07B8'CF     DE  022B   718 	MOVAL	W^STATS,R2		; copy address of data array
            53       0808'CF     DE  0230   719 	MOVAL	W^SUM,R3		; first sum slot
            54       0300'CF     DE  0235   720 	MOVAL	W^FAOSTK,R4		; address of control string
                                     023A   721 10$:
            84            82     D0  023A   722 	MOVL	(R2)+,(R4)+		; insert first value in arg list
            19            50     E9  023D   723 	BLBC	R0,20$			; skip mean if PRINTVAL
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  17
01              PRINTVAL - PRINT CURRENT AND AVERAGE VALUES                                                                      (8)

                                     0240   724 
                                     0240   725 ;
                                     0240   726 ; Calculate the mean to two decimal places
                                     0240   727 ;
                                     0240   728 
            55            83     D0  0240   729 	MOVL	(R3)+,R5		; get the sum (dividend)
                          56     D4  0243   730 	CLRL	R6			; clear upper part of quad divident
            55       004C'CF     7B  0245   731 	EDIV	W^CYCLE_COUNT,R5,(R4)+,R5 ; stack integer part, R5 <- remainder
            55            84         024A       
            55   00000064 8F     C4  024C   732 	MULL	#100,R5			; compute fractional remainder
            55       004C'CF     C7  0253   733 	DIVL3	W^CYCLE_COUNT,R5,(R4)+	; ...and push on stack
                          84         0258       
            DE            51     F5  0259   734 20$:	SOBGTR	R1,10$			; continue
                          FDA1'  30  025C   735 	BSBW	NEWTIME			; output current time
                          05E6   30  025F   736 	BSBW	FMTOUT			; format and output line
                                 04  0262   737 	RET				; return
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  18
01              PRINTRATE - PRINT INTERVAL VALUE , INTERVAL AND                                                                  (9)

                                     0263   739 	.SBTTL	PRINTRATE - PRINT INTERVAL VALUE , INTERVAL AND CUM. RATES
                                     0263   740 
                                     0263   741 ;++
                                     0263   742 ;
                                     0263   743 ; FUNCTIONAL DESCRIPTION:
                                     0263   744 ;
                                     0263   745 ;	ROUTINE TO OUTPUT VALUES AND RATES IN A TWO COLUMN ASCII
                                     0263   746 ;	DISPLAY.
                                     0263   747 ;
                                     0263   748 ; CALLING SEQUENCE:
                                     0263   749 ;
                                     0263   750 ;	CALLS/CALLG
                                     0263   751 ;
                                     0263   752 ; INPUTS:
                                     0263   753 ;
                                     0263   754 ;	R9 - ADDRESS OF DCB FOR CURRENT DISPLAY
                                     0263   755 ;	R10 - ADDRESS OF CURRENT VALUES
                                     0263   756 ;
                                     0263   757 ; IMPLICIT INPUTS:
                                     0263   758 ;
                                     0263   759 ;	SUM - VECTOR OF THE SUM OF COLLECTED VALUES
                                     0263   760 ;	FAOSTK - ARRAY TO PLACE VALUES FOR FAO CONVERSION
                                     0263   761 ;	STATS - ARRAY OF CURRENT VALUES
                                     0263   762 ;
                                     0263   763 ; OUTPUTS:
                                     0263   764 ;
                                     0263   765 ;	NONE
                                     0263   766 ;
                                     0263   767 ; IMPLICIT OUTPUTS:
                                     0263   768 ;
                                     0263   769 ;	NONE
                                     0263   770 ;
                                     0263   771 ; ROUTINE VALUE:
                                     0263   772 ;
                                     0263   773 ;	NONE
                                     0263   774 ;
                                     0263   775 ; SIDE EFFECTS:
                                     0263   776 ;
                                     0263   777 ;	NONE
                                     0263   778 ;--
                                     0263   779 
                                     0263   780 
                                     0263   781 PRINTRATE::
                               0000  0263   782 	.WORD	0
                                     0265   783 
                                     0265   784 ;
                                     0265   785 ; First compute floating point elapsed seconds since last interval
                                     0265   786 ; and since start of data collection.
                                     0265   787 ;
                                     0265   788 
            51       07A4'CF     D0  0265   789 	MOVL	W^SYSTIME+4,R1		; get high order bits of time
       07A0'CF       0798'CF     C3  026A   790 	SUBL3	W^STARTIME,W^SYSTIME,R0	; compute elapsed time since start
                          50         0271       
            51       079C'CF     D9  0272   791 	SBWC	W^STARTIME+4,R1		; get high order difference
            50   00002710 8F     7B  0277   792 	EDIV	#10000,R0,R0,R1		; turn time into milliseconds
            51            50         027E       
            50            50     4E  0280   793 	CVTLF	R0,R0			; floating milliseconds
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  19
01              PRINTRATE - PRINT INTERVAL VALUE , INTERVAL AND                                                                  (9)

            50   0000457A 8F     47  0283   794 	DIVF3	#1000,R0,-(SP)		; save floating seconds
                          7E         028A       
            50       07A8'CF     4E  028B   795 	CVTLF	W^SYSINTRVL,R0		; floating time for last interval
            50   96804C18 8F     47  0290   796 	DIVF3	#10000000,R0,-(SP)	; floating seconds for last interval
                          7E         0297       
                                     0298   797 
                                     0298   798 ;
                                     0298   799 ; Load initial pointers.  The display will contain the interval count
                                     0298   800 ; for the last interval, the rate per second to two decimal digits, and
                                     0298   801 ; the average rate per second to two decimal digits for each item.
                                     0298   802 ;
                                     0298   803 
            50         04 A9     D0  0298   804 	MOVL	DCB$L_COUNT(R9),R0	; get item count
            51       07B8'CF     DE  029C   805 	MOVAL	W^STATS,R1		; address of stats array
            52       0808'CF     DE  02A1   806 	MOVAL	W^SUM,R2		; address of sum array
            53       0300'CF     DE  02A6   807 	MOVAL	W^FAOSTK,R3		; address of fao output data
                                     02AB   808 10$:
            83            61     D0  02AB   809 	MOVL	(R1),(R3)+		; stack current value
            54            81     4E  02AE   810 	CVTLF	(R1)+,R4		; get floating current value
            54            6E     46  02B1   811 	DIVF	(SP),R4			; compute rate/second
            63            54     4A  02B4   812 	CVTFL	R4,(R3)			; stack integer part of rate
            55            83     4E  02B7   813 	CVTLF	(R3)+,R5		; convert truncated back to floating
            54            55     42  02BA   814 	SUBF	R5,R4			; compute remainder
            54   000043C8 8F     44  02BD   815 	MULF	#100,R4			; get two decimal digits
            83            54     4A  02C4   816 	CVTFL	R4,(R3)+		; and stack for fao routine
                                     02C7   817 
                                     02C7   818 ;
                                     02C7   819 ; Now get cumulative rate per second
                                     02C7   820 ;
                                     02C7   821 
            54            82     4E  02C7   822 	CVTLF	(R2)+,R4		; floating sum
            54         04 AE     46  02CA   823 	DIVF	4(SP),R4		; floating average rate/second
            63            54     4A  02CE   824 	CVTFL	R4,(R3)			; stack whole part for fao
            55            83     4E  02D1   825 	CVTLF	(R3)+,R5		; get back rounded part
            54            55     42  02D4   826 	SUBF	R5,R4			; compute fraction
            54   000043C8 8F     44  02D7   827 	MULF	#100,R4			; ...to two digits
            83            54     4A  02DE   828 	CVTFL	R4,(R3)+		; stack fraction for fao
            C7            50     F5  02E1   829 	SOBGTR	R0,10$			; back for each item
                          FD19'  30  02E4   830 	BSBW	NEWTIME			; output current time
                          055E   30  02E7   831 	BSBW	FMTOUT			; format output line
                                 04  02EA   832 	RET				; return to caller
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  20
01              HHIST - PRINT HORIZONTAL VALUE GRAPH                                                                            (10)

                                     02EB   834 	.SBTTL	HHIST - PRINT HORIZONTAL VALUE GRAPH
                                     02EB   835 
                                     02EB   836 ;++
                                     02EB   837 ;
                                     02EB   838 ; FUNCTIONAL DESCRIPTION:
                                     02EB   839 ; 
                                     02EB   840 ;	Build the parameter stack containing the number of 'bar' characters
                                     02EB   841 ;	to output for each item.
                                     02EB   842 ;
                                     02EB   843 ; CALLING SEQUENCE:
                                     02EB   844 ;
                                     02EB   845 ;	CALLS/CALLG
                                     02EB   846 ;
                                     02EB   847 ; INPUTS:
                                     02EB   848 ;
                                     02EB   849 ;	R9 - address of current display control block
                                     02EB   850 ;
                                     02EB   851 ; IMPLICIT INPUTS:
                                     02EB   852 ;
                                     02EB   853 ; 	none
                                     02EB   854 ;
                                     02EB   855 ; OUTPUTS:
                                     02EB   856 ;
                                     02EB   857 ;	none
                                     02EB   858 ;
                                     02EB   859 ; IMPLICIT OUTPUTS:
                                     02EB   860 ;
                                     02EB   861 ;	none
                                     02EB   862 ;
                                     02EB   863 ; ROUTINE VALUE:
                                     02EB   864 ;
                                     02EB   865 ;	none
                                     02EB   866 ;
                                     02EB   867 ; SIDE EFFECTS:
                                     02EB   868 ;
                                     02EB   869 ;	none
                                     02EB   870 ;--
                                     02EB   871 
                                     02EB   872 
                                     02EB   873 HHIST::
                                     02EB   874 
                               0000  02EB   875 	.WORD	0
         04 A9            01     C3  02ED   876 	SUBL3	#1,DCB$L_COUNT(R9),R0	; get number of items to update
                          50         02F1       
                                     02F2   877 					; subtract one to use as array index
                                     02F2   878 
                                     02F2   879 ;
                                     02F2   880 ; The data structures are scanned and built backwards using R0 as an index.
                                     02F2   881 ;
                                     02F2   882 
            52         1A A9     4D  02F2   883 	CVTWF	DCB$W_RANGE(R9),R2	; get floating range for graph
            51            28     4C  02F6   884 	CVTBF	#MAXBARS,R1		; get max bar chars per line
            51            52     46  02F9   885 	DIVF	R2,R1			; calculate bar chars per unit of output
            52         18 A9     3C  02FC   886 	MOVZWL	DCB$W_MIN(R9),R2	; get minimum value for graph
                                     0300   887 
                                     0300   888 ;
                                     0300   889 ; Loop through and calculate the number of bargraph characters for each
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  21
01              HHIST - PRINT HORIZONTAL VALUE GRAPH                                                                            (10)

                                     0300   890 ; value.  The computation is done in floating point and then truncated.
                                     0300   891 ;
                                     0300   892 
                                     0300   893 10$:
                          54     D4  0300   894 	CLRL	R4			; assume no chars will be output
       07B8'CF40          52     C3  0302   895 	SUBL3	R2,W^STATS[R0],R3	; calculate units of value to output
                          53         0308       
                          11     15  0309   896 	BLEQ	20$			; output no chars if leq zero
            53            53     4E  030B   897 	CVTLF	R3,R3			; convert units to floating
            53            51     44  030E   898 	MULF2	R1,R3			; chars/unit * units => chars to output
            54            53     4A  0311   899 	CVTFL	R3,R4			; integer number to output
            54            28     D1  0314   900 	CMPL	#MAXBARS,R4		; check for upperbound
                          03     18  0317   901 	BGEQ	20$			; continue if within range
            54            28     D0  0319   902 	MOVL	#MAXBARS,R4		; else make it within range
                                     031C   903 20$:
       0300'CF40          54     D0  031C   904 	MOVL	R4,W^FAOSTK[R0]		; store number on parameter stack
            DB            50     F4  0322   905 	SOBGEQ	R0,10$			; loop back if more to do
                          FCD8'  30  0325   906 	BSBW	NEWTIME			; output time to terminal
                          051D   30  0328   907 	BSBW	FMTOUT			; output new graphs to screen
                                 04  032B   908 	RET
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  22
01              VHIST - VT55 VERTICAL BAR GRAPH                                                                                 (11)

                                     032C   910 	.SBTTL	VHIST - VT55 VERTICAL BAR GRAPH
                                     032C   911 
                                     032C   912 ;++
                                     032C   913 ;
                                     032C   914 ; FUNCTIONAL DESCRIPTION:
                                     032C   915 ;
                                     032C   916 ;	Routine to update VT55 bar graph.
                                     032C   917 ;
                                     032C   918 ; CALLING SEQUENCE:
                                     032C   919 ;
                                     032C   920 ;	CALLS/CALLG
                                     032C   921 ;
                                     032C   922 ; INPUTS:
                                     032C   923 ;
                                     032C   924 ;	R9 - address of display control block
                                     032C   925 ;
                                     032C   926 ; IMPLICIT INPUTS:
                                     032C   927 ;
                                     032C   928 ;	none
                                     032C   929 ;
                                     032C   930 ; OUTPUTS:
                                     032C   931 ;
                                     032C   932 ;	none
                                     032C   933 ;
                                     032C   934 ; IMPLICIT OUTPUTS:
                                     032C   935 ;
                                     032C   936 ;	none
                                     032C   937 ;
                                     032C   938 ; ROUTINE VALUE:
                                     032C   939 ;
                                     032C   940 ;	none
                                     032C   941 ;
                                     032C   942 ; SIDE EFFECTS:
                                     032C   943 ;
                                     032C   944 ;	none
                                     032C   945 ;--
                                     032C   946 
                                     032C   947 VHIST::
                               0000  032C   948 	.WORD	0			; entry mask
                          53     D4  032E   949 	CLRL	R3			; clear item counter
            55            26     D0  0330   950 	MOVL	#START_XPOS,R5		; get starting X position
                                     0333   951 
            52         1A A9     4D  0333   952 	CVTWF	DCB$W_RANGE(R9),R2	; get floating range
            54       00C8 8F     4D  0337   953 	CVTWF	#MAX55HEIGHT,R4		; get maximum points per column
            54            52     46  033C   954 	DIVF	R2,R4			; get points per unit of graph
                                     033F   955 
            52         18 A9     3C  033F   956 	MOVZWL	DCB$W_MIN(R9),R2	; save minimum graph value
                                     0343   957 
                                     0343   958 ;
                                     0343   959 ; Since the output buffer can get very large, each bar of the graph
                                     0343   960 ; is output individually.  (One bar of width 25 points takes
                                     0343   961 ; about 80 bytes of data to draw).
                                     0343   962 ;
                                     0343   963 
                                     0343   964 10$:
            5B       0538'CF     DE  0343   965 	MOVAL	W^OUTBUF,R11		; get output buffer address
                                     0348   966 	GRAPHICS_ON			; turn on VT55 graphics
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  23
01              VHIST - VT55 VERTICAL BAR GRAPH                                                                                 (11)

            8B       311B 8F     B0  0348       		MOVW	#^X311B,(R11)+
                          51     D4  034D   967 	CLRL	R1			; assume zero output
       07B8'CF43          52     C3  034F   968 	SUBL3	R2,W^STATS[R3],R0	; calculate units to output
                          50         0355       
                          16     15  0356   969 	BLEQ	20$			; branch if none
            50            50     4E  0358   970 	CVTLF	R0,R0			; else convert units to floating
            50            54     44  035B   971 	MULF2	R4,R0			; compute points to output (height)
            51            50     4A  035E   972 	CVTFL	R0,R1			; get decimal points to output
                                     0361   973 
            51   000000C8 8F     D1  0361   974 	CMPL	#MAX55HEIGHT,R1		; check for upper bound limit
                          04     18  0368   975 	BGEQ	20$			; continue if within bounds
            51         C8 8F     9A  036A   976 	MOVZBL	#MAX55HEIGHT,R1		; else force it to fit
                                     036E   977 20$:
                                     036E   978 
                                     036E   979 ;
                                     036E   980 ; Set up X position and insert points for the bar.
                                     036E   981 ;
                                     036E   982 
                                     036E   983 	SETXPOS	R5			; set graph X position
            8B         48 8F     90  036E       		MOVB	#^A/H/,(R11)+
            6B            20     90  0372       		MOVB	#32,(R11)
            00            55     F0  0375       		INSV	R5,#0,#5,(R11)+
            8B            05         0378       
            6B            20     90  037A       		MOVB	#32,(R11)
            04            05     EE  037D       		EXTV	#5,#4,R5,-(SP)
            7E            55         0380       
            00            8E     F0  0382       		INSV	(SP)+,#0,#4,(R11)+
            8B            04         0385       
                          56     D4  0387   984 	CLRL	R6			; clear counter for bar width
                                     0389   985 
                                     0389   986 ;
                                     0389   987 ; Compute the graphics characters to build one bar at the proper height
                                     0389   988 ; for graph zero or graph one.  Following the last bar, output the
                                     0389   989 ; command to switch graphs.  CURGRAPH contains the current graph number.
                                     0389   990 ;
                                     0389   991 
            50       2020 8F     B0  0389   992 	MOVW	#^X2020,R0		; build data bytes in R0
            00            51     F0  038E   993 	INSV	R1,#0,#5,R0		; first byte gets low five bits
            50            05         0391       
            04            05     EF  0393   994 	EXTZV	#5,#4,R1,R1		; get high four bits of Y value
            51            51         0396       
            08            51     F0  0398   995 	INSV	R1,#8,#4,R0		; insert four bits in second byte
            50            04         039B       
            51         42 8F     90  039D   996 	MOVB	#^A/B/,R1		; assume output to graph zero
            04       003C'CF     E8  03A1   997 	BLBS	W^CURGRAPH,30$		; branch if currently graph one
            51         4A 8F     90  03A6   998 	MOVB	#^A/J/,R1		; else output to graph one
                                     03AA   999 30$:
            8B            51     90  03AA  1000 	MOVB	R1,(R11)+		; insert load graph command
            8B            50     B0  03AD  1001 	MOVW	R0,(R11)+		; insert data bytes
            56       0034'CF     F2  03B0  1002 	AOBLSS	W^BARSIZE,R6,30$	; continue for width of bar
                          F4         03B5       
                                     03B6  1003 
                                     03B6  1004 ;
                                     03B6  1005 ; If this is the last bar to output, generate command to switch graphs.
                                     03B6  1006 ;
                                     03B6  1007 
                       01 A3     9F  03B6  1008 	PUSHAB	1(R3)			; check to see if last time through
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  24
01              VHIST - VT55 VERTICAL BAR GRAPH                                                                                 (11)

         04 A9            8E     D1  03B9  1009 	CMPL	(SP)+,DCB$L_COUNT(R9)	; was it last bar output?
                          1D     12  03BD  1010 	BNEQ	35$			; branch if not
            8B         41 8F     90  03BF  1011 	MOVB	#^A/A/,(R11)+		; load enable register command byte
            6B            21     90  03C3  1012 	MOVB	#^X21,(R11)		; all graphs off
            01       003C'CF     C3  03C6  1013 	SUBL3	W^CURGRAPH,#1,W^CURGRAPH ; switch graph number
                     003C'CF         03CB       
       003C'CF            01     C1  03CE  1014 	ADDL3	#1,W^CURGRAPH,-(SP)	; construct graph selector bits
                          7E         03D3       
            03            8E     F0  03D4  1015 	INSV	(SP)+,#3,#2,(R11)+	; turn on current histogram
            8B            02         03D7       
                          FC24'  30  03D9  1016 	BSBW	NEWTIME			; output current time
                                     03DC  1017 35$:
                                     03DC  1018 
                                     03DC  1019 ;
                                     03DC  1020 ; Output the line that has been built
                                     03DC  1021 ;
                                     03DC  1022 
                                     03DC  1023 	GRAPHICS_OFF			; turn off VT55 graphics
            8B       321B 8F     B0  03DC       		MOVW	#^X321B,(R11)+
            50       0538'CF     DE  03E1  1024 	MOVAL	W^OUTBUF,R0		; address of output buffer
            5B            50     C2  03E6  1025 	SUBL	R0,R11			; compute length of output
                                     03E9  1026 	$QIOW_S	CHAN=W^TTCHAN,FUNC=#<IO$_WRITEVBLK!IO$M_NOFORMAT>,-
                                     03E9  1027 		P1=(R0),P2=R11	
                          7E     7C  03E9       		CLRQ	-(SP)
                          7E     7C  03EB       		CLRQ	-(SP)
                          5B     DD  03ED       		PUSHL	R11
                          60     DF  03EF       		PUSHAL	(R0)
                          7E     7C  03F1       		CLRQ	-(SP)
                          00     DD  03F3       		PUSHL	#0
            7E       0130 8F     3C  03F5       		MOVZWL	#<IO$_WRITEVBLK!IO$M_NOFORMAT>,-(SP)
            7E       0858'CF     3C  03FA       		MOVZWL	W^TTCHAN,-(SP)
                          00     DD  03FF       		PUSHL	#0
   00000000'GF            0C     FB  0401       		CALLS	#12,G^SYS$QIOW
                                     0408  1028 
            55       0918'CF     C0  0408  1029 	ADDL	W^VT55XINCR,R5		; point to next position
            53         04 A9     F2  040D  1030 	AOBLSS	DCB$L_COUNT(R9),R3,40$	; continue for each item
                          01         0411       
                                 04  0412  1031 	RET				; return to caller if done
                          FF2D   31  0413  1032 40$:	BRW	10$			; else continue loop
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  25
01              GRAPH6 - ROUTINE TO MAINTAIN 6 ITEM GRAPH                                                                       (12)

                                     0416  1034 	.SBTTL	GRAPH6 - ROUTINE TO MAINTAIN 6 ITEM GRAPH
                                     0416  1035 
                                     0416  1036 ;++
                                     0416  1037 ;
                                     0416  1038 ; FUNCTIONAL DESCRIPTION:
                                     0416  1039 ;
                                     0416  1040 ;	Update VT55 six graph display.  The graph is wrapped around, that
                                     0416  1041 ;	is when the end of the graph is reached, the next point is plotted
                                     0416  1042 ;	over the starting graph position.  A vertical line marks the
                                     0416  1043 ;	current point.  The numbers used are magic, but basically
                                     0416  1044 ;	the screen is divided into six graphs, two rows of three.
                                     0416  1045 ;	The axis divide the screen into graphs which are 116 x 162 points
                                     0416  1046 ;	each.   The actual points are plotted on a grid within each
                                     0416  1047 ;	graph that is 100 x 150 , so as to not intersect the grid.
                                     0416  1048 ;
                                     0416  1049 ; CALLING SEQUENCE:
                                     0416  1050 ;
                                     0416  1051 ;	CALLS/CALLG
                                     0416  1052 ;
                                     0416  1053 ; INPUTS:
                                     0416  1054 ;
                                     0416  1055 ;	R9 - address of DCB
                                     0416  1056 ;
                                     0416  1057 ; IMPLICIT INPUTS:
                                     0416  1058 ;
                                     0416  1059 ;	None
                                     0416  1060 ;
                                     0416  1061 ; OUTPUTS:
                                     0416  1062 ;
                                     0416  1063 ;	None
                                     0416  1064 ;
                                     0416  1065 ; IMPLICIT OUTPUTS:
                                     0416  1066 ;
                                     0416  1067 ;	none
                                     0416  1068 ;
                                     0416  1069 ; ROUTINE VALUE:
                                     0416  1070 ;
                                     0416  1071 ;	none
                                     0416  1072 ;
                                     0416  1073 ; SIDE EFFECTS:
                                     0416  1074 ;
                                     0416  1075 ;	none
                                     0416  1076 ;--
                                     0416  1077 
                                     0416  1078 GRAPH6::
                               0000  0416  1079 	.WORD	0			; entry mask
            5B       0538'CF     DE  0418  1080 	MOVAL	W^OUTBUF,R11		; address output buffer
                                     041D  1081 	GRAPHICS_ON			; turn on VT55 graphics
            8B       311B 8F     B0  041D       		MOVW	#^X311B,(R11)+
            51       0040'CF     D0  0422  1082 	MOVL	W^CURXPOS,R1		; get current x position
            51            01     C1  0427  1083 	ADDL3	#1,R1,W^NEWXPOS		; update to new xposition
                     0528'CF         042A       
   0000009F 8F       0528'CF     D1  042D  1084 	CMPL	W^NEWXPOS,#159		; time to wrap graph?
                          05     15  0436  1085 	BLEQ	10$			; branch if not
       0528'CF            13     D0  0438  1086 	MOVL	#19,W^NEWXPOS		; else wrap to start
            53         7C 8F     9A  043D  1087 10$:	MOVZBL	#124,R3			; starting Y position for top graphs
            54         1A A9     4D  0441  1088 	CVTWF	DCB$W_RANGE(R9),R4	; get range for graph
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  26
01              GRAPH6 - ROUTINE TO MAINTAIN 6 ITEM GRAPH                                                                       (12)

            50       0064 8F     4D  0445  1089 	CVTWF	#100,R0			; get points for graph height
            50            54     46  044A  1090 	DIVF	R4,R0			; compute points per unit of graph
                                     044D  1091 
            52       0528'CF     D0  044D  1092 	MOVL	W^NEWXPOS,R2		; load new x position
                          55     D4  0452  1093 	CLRL	R5			; clear item counter
                                     0454  1094 20$:	
                          00C8   30  0454  1095 	BSBW	GETPOINT		; compute point height for next entry
                                     0457  1096 	SETXPOS	R2			; set graph X position for write
            8B         48 8F     90  0457       		MOVB	#^A/H/,(R11)+
            6B            20     90  045B       		MOVB	#32,(R11)
            00            52     F0  045E       		INSV	R2,#0,#5,(R11)+
            8B            05         0461       
            6B            20     90  0463       		MOVB	#32,(R11)
            04            05     EE  0466       		EXTV	#5,#4,R2,-(SP)
            7E            52         0469       
            00            8E     F0  046B       		INSV	(SP)+,#0,#4,(R11)+
            8B            04         046E       
            55            02     D1  0470  1097 	CMPL	#2,R5			; check for second three graphs
                          4D     14  0473  1098 	BGTR	25$			; branch if second row graph
                                     0475  1099 	LOAD_VLINE R1,DELETE=1		; delete previous line marker
            8B         4C 8F     90  0475       		MOVB	#^A/L/,(R11)+
            6B            20     90  0479       		MOVB	#32,(R11)
            00            51     F0  047C       		INSV	R1,#0,#5,(R11)+
            8B            05         047F       
            6B            20     90  0481       		MOVB	#32,(R11)
            04            05     EE  0484       		EXTV	#5,#4,R1,-(SP)
            7E            51         0487       
            00            8E     F0  0489       		INSV	(SP)+,#0,#4,(R11)+
            8B            04         048C       
                                     048E  1100 	LOAD_VLINE R2,DELETE=0		; load new line marker
            8B         4C 8F     90  048E       		MOVB	#^A/L/,(R11)+
            6B            20     90  0492       		MOVB	#32,(R11)
            00            52     F0  0495       		INSV	R2,#0,#5,(R11)+
            8B            05         0498       
            6B            30     90  049A       		MOVB	#48,(R11)
            04            05     EE  049D       		EXTV	#5,#4,R2,-(SP)
            7E            52         04A0       
            00            8E     F0  04A2       		INSV	(SP)+,#0,#4,(R11)+
            8B            04         04A5       
                                     04A7  1101 	LOADPOINT R4,GRAPH=0		; plot point on graph 0
            8B         42 8F     90  04A7       		MOVB	#^A/B/,(R11)+
            6B            20     90  04AB       		MOVB	#32,(R11)
            00            54     F0  04AE       		INSV	R4,#0,#5,(R11)+
            8B            05         04B1       
            6B            20     90  04B3       		MOVB	#32,(R11)
            04            05     EE  04B6       		EXTV	#5,#4,R4,-(SP)
            7E            54         04B9       
            00            8E     F0  04BB       		INSV	(SP)+,#0,#4,(R11)+
            8B            04         04BE       
                          19     11  04C0  1102 	BRB	30$			; continue
                                     04C2  1103 25$:	LOADPOINT R4,GRAPH=1		; plot point on graph 1
            8B         4A 8F     90  04C2       		MOVB	#^A/J/,(R11)+
            6B            20     90  04C6       		MOVB	#32,(R11)
            00            54     F0  04C9       		INSV	R4,#0,#5,(R11)+
            8B            05         04CC       
            6B            20     90  04CE       		MOVB	#32,(R11)
            04            05     EE  04D1       		EXTV	#5,#4,R4,-(SP)
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  27
01              GRAPH6 - ROUTINE TO MAINTAIN 6 ITEM GRAPH                                                                       (12)

            7E            54         04D4       
            00            8E     F0  04D6       		INSV	(SP)+,#0,#4,(R11)+
            8B            04         04D9       
            51   000000A2 8F     C0  04DB  1104 30$:	ADDL	#162,R1			; move to next graph 
            52   000000A2 8F     C0  04E2  1105 	ADDL	#162,R2			; move to next graph
            55            02     D1  04E9  1106 	CMPL	#2,R5			; last graph in first row?
                          0D     12  04EC  1107 	BNEQ	40$			; branch if not
            51       0040'CF     D0  04EE  1108 	MOVL	W^CURXPOS,R1		; else reset x positions for second row
            52       0528'CF     D0  04F3  1109 	MOVL	W^NEWXPOS,R2		;
            53            09     D0  04F8  1110 	MOVL	#9,R3			; reset Y position for second row
            55         04 A9     F2  04FB  1111 40$:	AOBLSS	DCB$L_COUNT(R9),R5,50$	; continue until done
                          02         04FF       
                          03     11  0500  1112 	BRB	60$			; skip branch back
                          FF4F   31  0502  1113 50$:	BRW	20$			; back for more
                                     0505  1114 60$:	GRAPHICS_OFF			; turn off VT55 graphics
            8B       321B 8F     B0  0505       		MOVW	#^X321B,(R11)+
            50       0538'CF     DE  050A  1115 	MOVAL	W^OUTBUF,R0		; get buffer address
            5B            50     C3  050F  1116 	SUBL3	R0,R11,W^QIOLST+QIOW$_P2 ; insert length in argument list
                     0020'CF         0512       
                                     0515  1117 	$QIOW_G	W^QIOLST		; output all of this stuff
   00000000'GF       0000'CF     FA  0515       		CALLG	W^QIOLST,G^SYS$QIOW
                                 04  051E  1118 	RET				; return to caller
                                     051F  1119 
                                     051F  1120 GETPOINT:
            7E         18 A9     3C  051F  1121 	MOVZWL	DCB$W_MIN(R9),-(SP)	; get longword min value
       07B8'CF45          8E     C3  0523  1122 	SUBL3	(SP)+,W^STATS[R5],R4	; compute difference
                          54         0529       
                          04     18  052A  1123 	BGEQ	10$			; branch if greater than min
                          54     D4  052C  1124 	CLRL	R4			; else assume zero 
                          19     11  052E  1125 	BRB	20$			; all done now
            54            54     4E  0530  1126 10$:	CVTLF	R4,R4			; get floating units
            54            50     44  0533  1127 	MULF	R0,R4			; compute points to output
            54            54     4A  0536  1128 	CVTFL	R4,R4			; back to integer again
   00000064 8F            54     D1  0539  1129 	CMPL	R4,#100			; check against max height
                          07     15  0540  1130 	BLEQ	20$			; branch if it fits
            54   00000064 8F     D0  0542  1131 	MOVL	#100,R4			; else use max height
            54            53     C0  0549  1132 20$:	ADDL	R3,R4			; height plus bottom of graph
                                 05  054C  1133 	RSB				; return to caller
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  28
01              GETSTATES - ROUTINE TO COUNT SCHEDULING STATE I                                                                 (13)

                                     054D  1135 	.SBTTL	GETSTATES - ROUTINE TO COUNT SCHEDULING STATE INFORMATION
                                     054D  1136 
                                     054D  1137 ;++
                                     054D  1138 ;
                                     054D  1139 ; FUNCTIONAL DESCRIPTION:
                                     054D  1140 ;
                                     054D  1141 ; 	Loop through all PCBs and count the number of processes in
                                     054D  1142 ;	each scheduling state.  The counts are accumulated in the
                                     054D  1143 ;	STATS array.
                                     054D  1144 ;
                                     054D  1145 ; CALLING SEQUENCE:
                                     054D  1146 ;
                                     054D  1147 ;	CALLS/CALLG
                                     054D  1148 ;
                                     054D  1149 ; INPUTS:
                                     054D  1150 ;
                                     054D  1151 ;	none
                                     054D  1152 ;
                                     054D  1153 ; IMPLICIT INPUTS:
                                     054D  1154 ;
                                     054D  1155 ;	SCH$GL_PCBVEC - contains address of PCB vector
                                     054D  1156 ;	SCH$GL_MAXPIX - maximum process index
                                     054D  1157 ;
                                     054D  1158 ; OUTPUTS:
                                     054D  1159 ;
                                     054D  1160 ;	none
                                     054D  1161 ;
                                     054D  1162 ; IMPLICIT OUTPUTS:
                                     054D  1163 ;
                                     054D  1164 ;	none
                                     054D  1165 ;
                                     054D  1166 ; ROUTINE VALUE:
                                     054D  1167 ;
                                     054D  1168 ;	none
                                     054D  1169 ;
                                     054D  1170 ; SIDE EFFECTS:
                                     054D  1171 ;
                                     054D  1172 ;	none
                                     054D  1173 ;--
                                     054D  1174 
                                     054D  1175 GETSTATES::
                                     054D  1176 
                               0000  054D  1177 	.WORD	0			; save no registers
                                     054F  1178 ;
                                     054F  1179 ; Reset counters in stats array to zero
                                     054F  1180 ;
                                     054F  1181 
            6E            00     2C  054F  1182 	MOVC5	#0,(SP),#0,#<ARRAYSIZE*4>,W^STATS ; zero stats array
       0050 8F            00         0552       
                     07B8'CF         0556       
            55   00000000'EF     D0  0559  1183 	MOVL	SCH$GL_MAXPIX,R5	; get max number of processes
                                     0560  1184 
       0034'CF            0F     9A  0560  1185 	MOVZBL	#15,W^BARSIZE		; shrink bar size
            50   00000000'EF     D0  0565  1186 	MOVL	SCH$GL_PCBVEC,R0	; get address of PCB vector
                          51     D4  056C  1187 	CLRL	R1			; clear counter
            52            6041   D0  056E  1188 	MOVL	(R0)[R1],R2		; get address of null process PCB
            53       07B4'CF     DE  0572  1189 	MOVAL	W^STATS-4,R3		; address to put data ( states start at one)
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  29
01              GETSTATES - ROUTINE TO COUNT SCHEDULING STATE I                                                                 (13)

            54            52     D0  0577  1190 	MOVL	R2,R4			; copy null PCB for first time
                          09     11  057A  1191 	BRB	20$			; skip null check first time through
                                     057C  1192 10$:
            54            6041   D0  057C  1193 	MOVL	(R0)[R1],R4		; get next PCB address
            52            54     D1  0580  1194 	CMPL	R4,R2			; does this point to null PCB?
                          07     13  0583  1195 	BEQL	30$			; try next one if so
            54         30 A4     3C  0585  1196 20$:	MOVZWL	PCB$W_STATE(R4),R4	; else get PCB address
                          6344   D6  0589  1197 	INCL	(R3)[R4]		; incr counter for that state
            51            55     F3  058C  1198 30$:	AOBLEQ	R5,R1,10$		; continue until max index
                          EC         058F       
                                 04  0590  1199 	RET				;
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  30
01              GET - DATA COLLECTION ROUTINES                                                                                  (14)

                                     0591  1201 	.SBTTL	GET - DATA COLLECTION ROUTINES
                                     0591  1202 
                                     0591  1203 ;++
                                     0591  1204 ;
                                     0591  1205 ; FUNCTIONAL DESCRIPTION:
                                     0591  1206 ;
                                     0591  1207 ;	Call routines to get current data values and set up
                                     0591  1208 ;	the STATS array, depending on what kind of data is
                                     0591  1209 ;	being collected
                                     0591  1210 ;
                                     0591  1211 ; CALLING SEQUENCE:
                                     0591  1212 ;
                                     0591  1213 ;	CALLS/CALLG
                                     0591  1214 ;
                                     0591  1215 ; INPUTS:
                                     0591  1216 ;
                                     0591  1217 ;	none
                                     0591  1218 ;
                                     0591  1219 ; OUTPUTS:
                                     0591  1220 ;
                                     0591  1221 ;	none
                                     0591  1222 ;
                                     0591  1223 ; ROUTINE VALUE:
                                     0591  1224 ;
                                     0591  1225 ;	none
                                     0591  1226 ;
                                     0591  1227 ; SIDE EFFECTS:
                                     0591  1228 ;
                                     0591  1229 ;	none
                                     0591  1230 ;--
                                     0591  1231 
                                     0591  1232 GETPCT::				; fetch and compute percentage
                               0000  0591  1233 	.WORD	0
                          01C2   30  0593  1234 	BSBW	FETCH			; move to VALUES
                          01FA   30  0596  1235 	BSBW	TRANSFER		; move to STATS
                          0281   30  0599  1236 	BSBW	COMPUTE_PERCNT		; compute percentage
                          023C   30  059C  1237 	BSBW	COMPUTE_STATS		; compute statistics
                                 04  059F  1238 	RET				; return from call
                                     05A0  1239 GETVAL::				; fetch data value
                               0000  05A0  1240 	.WORD	0
                          01B3   30  05A2  1241 	BSBW	FETCH
                          01EB   30  05A5  1242 	BSBW	TRANSFER
                          0230   30  05A8  1243 	BSBW	COMPUTE_STATS
                                 04  05AB  1244 	RET
                                     05AC  1245 
                                     05AC  1246 
                                     05AC  1247 GETMODE::
                               0000  05AC  1248 	.WORD	0
                          01A7   30  05AE  1249 	BSBW	FETCH
                          01DF   30  05B1  1250 	BSBW	TRANSFER		; move to stats
                                     05B4  1251 	
                                     05B4  1252 ;
                                     05B4  1253 ; Subtract out null process time
                                     05B4  1254 ;
                                     05B4  1255 
            50   00000000'FF     D0  05B4  1256 	MOVL	@SCH$GL_PCBVEC,R0	; get null pcb address
            50         64 A0     D0  05BB  1257 	MOVL	PCB$L_PHD(R0),R0	; get null phd address
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  31
01              GET - DATA COLLECTION ROUTINES                                                                                  (14)

            51         3C A0     D0  05BF  1258 	MOVL	PHD$L_CPUTIM(R0),R1	; get time for null process
            51   0000052C'EF     C2  05C3  1259 	SUBL	NULLTIME,R1		; compute updated null time
       07BC'CF            51     C2  05CA  1260 	SUBL	R1,W^STATS+4		; subtract bias from kernel mode
       07D0'CF            51     D0  05CF  1261 	MOVL	R1,W^STATS+<6*4>	; insert null time in list
       052C'CF         3C A0     D0  05D4  1262 	MOVL	PHD$L_CPUTIM(R0),W^NULLTIME ; insert current null time
                                     05DA  1263 
                          0240   30  05DA  1264 	BSBW	COMPUTE_PERCNT
                          01FB   30  05DD  1265 	BSBW	COMPUTE_STATS
                                 04  05E0  1266 	RET
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  32
01              GETPAGE - GET INFORMATION FOR PAGE INFORMATION                                                                  (15)

                                     05E1  1268 	.SBTTL	GETPAGE - GET INFORMATION FOR PAGE INFORMATION DISPLAY
                                     05E1  1269 
                                     05E1  1270 ;++
                                     05E1  1271 ;
                                     05E1  1272 ; FUNCTIONAL DESCRIPTION:
                                     05E1  1273 ;
                                     05E1  1274 ;	This routine simply outputs the free list size and
                                     05E1  1275 ;	modify list sizes in the heading of the PAGE management
                                     05E1  1276 ;	display, and then continues with normal processing.
                                     05E1  1277 ;
                                     05E1  1278 ; INPUTS:
                                     05E1  1279 ;
                                     05E1  1280 ;	none
                                     05E1  1281 ;
                                     05E1  1282 ; IMPLICIT INPUTS:
                                     05E1  1283 ;
                                     05E1  1284 ;	SCH$GL_FREECNT - free page list size
                                     05E1  1285 ;	SCH$GL_MFYCNT - modify page list size
                                     05E1  1286 ;
                                     05E1  1287 ; OUTPUTS:
                                     05E1  1288 ;
                                     05E1  1289 ;	none
                                     05E1  1290 ;
                                     05E1  1291 ; IMPLICIT OUTPUTS:
                                     05E1  1292 ;
                                     05E1  1293 ;	none
                                     05E1  1294 ;
                                     05E1  1295 ; ROUTINE VALUE:
                                     05E1  1296 ;
                                     05E1  1297 ;	None
                                     05E1  1298 ;--
                                     05E1  1299 
                                     05E1  1300 GETPAGE::
                               0000  05E1  1301 	.WORD	0			; save no registers
                 00000000'EF     DD  05E3  1302 	PUSHL	SCH$GL_MFYCNT		; push modify list count
                 00000000'EF     DD  05E9  1303 	PUSHL	SCH$GL_FREECNT		; push free list count
                     093E'CF     DF  05EF  1304 	PUSHAL	W^PAGESTR		; push fao string
       0000'CF            03     FB  05F3  1305 	CALLS	#3,W^FAOOUT		; call output format routine
            50   00000000'EF     D0  05F8  1306 	MOVL	MMG$GL_SYSPHD,R0	; get system header address
       0794'CF         4C A0     D0  05FF  1307 	MOVL	PHD$L_PAGEFLTS(R0),W^SYSFAULTS ; store system page fault count
                                     0605  1308 					; for page display
         97 AF            00     FB  0605  1309 	CALLS	#0,GETVAL		; do normal data collection
                                 04  0609  1310 	RET
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  33
01              GETPHDINFO - GET INFORMATION FROM PROCESS HEADE                                                                 (16)

                                     060A  1312 	.SBTTL	GETPHDINFO - GET INFORMATION FROM PROCESS HEADER FOR USERS
                                     060A  1313 
                                     060A  1314 ;++
                                     060A  1315 ;
                                     060A  1316 ; FUNCTIONAL DESCRIPTION:
                                     060A  1317 ;
                                     060A  1318 ;	Subroutine to bliss display routines to get cpu time and
                                     060A  1319 ;	page fault information from process header.  CPU time must be
                                     060A  1320 ;	converted to 64-bit system time format.
                                     060A  1321 ;
                                     060A  1322 ;	NOTE: All fields are returned as zero if the process concerned
                                     060A  1323 ;		is currently out of the balance set.
                                     060A  1324 ;
                                     060A  1325 ; INPUTS:
                                     060A  1326 ;
                                     060A  1327 ;	4(AP) = process index
                                     060A  1328 ;
                                     060A  1329 ; OUTPUTS:
                                     060A  1330 ;
                                     060A  1331 ;	USRCPUTIM = 64 bit accumulated process cpu time
                                     060A  1332 ;	USRDIRIO = accumulated direct I/O operations
                                     060A  1333 ;	USRPAGEFLTS = accumulated process page faults
                                     060A  1334 ;	R0 = process cputime in 10 ms tics
                                     060A  1335 ;
                                     060A  1336 ;--
                                     060A  1337 
                                     060A  1338 GETPHDINFO::
                               0000  060A  1339 	.WORD	0			; save mask
                     091C'CF     7C  060C  1340 	CLRQ	W^USRCPUTIM		; clear common data
                     0924'CF     D4  0610  1341 	CLRL	W^USRDIRIO		;
                     0928'CF     D4  0614  1342 	CLRL	W^USRPAGEFLTS		;
                                     0618  1343 	$CMKRNL_S ROUTIN=B^10$,ARGLST=(AP)
                          6C     DF  0618       		PUSHAL	(AP)
                       30'AF     DF  061A       		PUSHAL	B^10$
   00000000'GF            02     FB  061D       		CALLS	#2,G^SYS$CMKRNL
            50   000186A0 8F     7A  0624  1344 	EMUL	#100000,R0,#0,W^USRCPUTIM ; calculate time in 100ns units
       091C'CF            00         062B       
                                 04  062F  1345 	RET
                                     0630  1346 
                               000C  0630  1347 10$:	.WORD	^M<R2,R3>
                       6A'AF     D5  0632  1348 	TSTL	B^30$			; ensure all in working set
                          50     D4  0635  1349 	CLRL	R0			; zero in case process swapped out
            51         04 AC     3C  0637  1350 	MOVZWL	4(AP),R1		; get process index
            52   00000000'EF     D0  063B  1351 	MOVL	SCH$GL_PCBVEC,R2	; get PCB list address
                                     0642  1352 	SETIPL	#IPL$_SYNCH		; lock memory while examining header
            12            07     DA  0642       		MTPR	#IPL$_SYNCH,S^#PR$_IPL
            51            6241   D0  0645  1353 	MOVL	(R2)[R1],R1		; get PCB address
            1D         28 A1     E9  0649  1354 	BLBC	PCB$L_STS(R1),30$	; branch if not resident
            51         64 A1     D0  064D  1355 	MOVL	PCB$L_PHD(R1),R1	; get process header address
            52         50 A1     D0  0651  1356 	MOVL	PHD$L_DIOCNT(R1),R2	; get direct I/O count
            53         4C A1     D0  0655  1357 	MOVL	PHD$L_PAGEFLTS(R1),R3	; get page fault count
            50         3C A1     D0  0659  1358 	MOVL	PHD$L_CPUTIM(R1),R0	; get process CPU time in tics
                                     065D  1359 20$:	SETIPL	#0			; return to IPL 0
            12            00     DA  065D       		MTPR	#0,S^#PR$_IPL
       0924'CF            52     D0  0660  1360 	MOVL	R2,W^USRDIRIO		; store direct I/O count
       0928'CF            53     D0  0665  1361 	MOVL	R3,W^USRPAGEFLTS	; store page fault count
                                     066A  1362 30$:	SETIPL	#0			; to IPL 0
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  34
01              GETPHDINFO - GET INFORMATION FROM PROCESS HEADE                                                                 (16)

            12            00     DA  066A       		MTPR	#0,S^#PR$_IPL
                                 04  066D  1363 	RET				; return to caller
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  35
01              GETFCP - Accumulate FCP Statistics                                                                              (17)

                                     066E  1365 	.SBTTL	GETFCP - Accumulate FCP Statistics
                                     066E  1366 
                                     066E  1367 ;++
                                     066E  1368 ;
                                     066E  1369 ; FUNCTIONAL DESCRIPTION:
                                     066E  1370 ;
                                     066E  1371 ;	This routine accumulates statistics from the File Control Primitive
                                     066E  1372 ;	data base and saves them in global variables so that they
                                     066E  1373 ;	may be fetched and processed by the standard display
                                     066E  1374 ;	collection routines.
                                     066E  1375 ;
                                     066E  1376 ; CALLING SEQUENCE:
                                     066E  1377 ;
                                     066E  1378 ;	CALLS/CALLG
                                     066E  1379 ;
                                     066E  1380 ; INPUTS:
                                     066E  1381 ;
                                     066E  1382 ;	none
                                     066E  1383 ;
                                     066E  1384 ; IMPLICIT INPUTS:
                                     066E  1385 ;
                                     066E  1386 ;	PMS$GL_FCP2 - pointer to ten arrays of FCP data
                                     066E  1387 ;
                                     066E  1388 ; OUTPUTS:
                                     066E  1389 ;
                                     066E  1390 ;	None
                                     066E  1391 ;
                                     066E  1392 ; IMPLICIT OUTPUTS:
                                     066E  1393 ;
                                     066E  1394 ;	FCPCALLS - contains total calls made to FCP
                                     066E  1395 ;	FCPCACHE - total FCP cache hits
                                     066E  1396 ;	FCPCPU - percent of CPU time used by FCP during the last
                                     066E  1397 ;		interval
                                     066E  1398 ;	FCPREAD - total FCP disk reads
                                     066E  1399 ;	FCPWRITE - total FCP disk writes
                                     066E  1400 ;
                                     066E  1401 ; ROUTINE VALUE:
                                     066E  1402 ;
                                     066E  1403 ;	none
                                     066E  1404 ;
                                     066E  1405 ; SIDE EFFECTS:
                                     066E  1406 ;
                                     066E  1407 ;	none
                                     066E  1408 ;--
                                     066E  1409 
                                     066E  1410 GETFCP::
                               0000  066E  1411 	.WORD	0			; save mask
                                     0670  1412 	
                                     0670  1413 ;
                                     0670  1414 ; Compute total calls to fcp
                                     0670  1415 ;
                                     0670  1416 
            50            05     D0  0670  1417 	MOVL	#5,R0			; sum first six counters
                     0440'CF     D4  0673  1418 	CLRL	W^FCPCALLS		; clear counter
                                     0677  1419 10$:
       0440'CF   00000000'EF40   C0  0677  1420 	ADDL	PMS$GL_FCP2[R0],W^FCPCALLS	; add in next counter
            F3            50     F4  0681  1421 	SOBGEQ	R0,10$			; continue till done
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  36
01              GETFCP - Accumulate FCP Statistics                                                                              (17)

                                     0684  1422 
                                     0684  1423 ;
                                     0684  1424 ; Compute disk reads and writes, cache hits, and % CPU TIME
                                     0684  1425 ;
                                     0684  1426 
            50            09     D0  0684  1427 	MOVL	#9,R0			; sum 10 entries in each array
                     044C'CF     7C  0687  1428 	CLRQ	W^FCPREAD		; clear reads and writes
                     0444'CF     7C  068B  1429 	CLRQ	W^FCPCACHE		; clear cache and cpu time
                                     068F  1430 20$:
       044C'CF   00000050'EF40   C0  068F  1431 	ADDL	PMS$GL_FCP2+<20*4>[R0],W^FCPREAD ; sum reads
       0450'CF   00000078'EF40   C0  0699  1432 	ADDL	PMS$GL_FCP2+<30*4>[R0],W^FCPWRITE ; sum writes
       0444'CF   000000A0'EF40   C0  06A3  1433 	ADDL	PMS$GL_FCP2+<40*4>[R0],W^FCPCACHE ; cache hits
       0448'CF   000000C8'EF40   C0  06AD  1434 	ADDL	PMS$GL_FCP2+<50*4>[R0],W^FCPCPU ; sum cpu tics used
            D5            50     F4  06B7  1435 	SOBGEQ	R0,20$
                                     06BA  1436 
                                     06BA  1437 ;
                                     06BA  1438 ; Call normal collection processing routine
                                     06BA  1439 ;
                                     06BA  1440 
       FEE1 CF            00     FB  06BA  1441 	CALLS	#0,GETVAL		
                                     06BF  1442 
                                 04  06BF  1443 	RET				; return
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  37
01              GETPOOL - Accumulate Pool Statistics                                                                            (18)

                                     06C0  1445 	.SBTTL	GETPOOL - Accumulate Pool Statistics
                                     06C0  1446 
                                     06C0  1447 ;++
                                     06C0  1448 ;
                                     06C0  1449 ; FUNCTIONAL DESCRIPTION:
                                     06C0  1450 ;
                                     06C0  1451 ;	Routine to accumulate statistics on behavior of IRP lookaside list
                                     06C0  1452 ;	and nonpaged dynamic memory pool.
                                     06C0  1453 ;
                                     06C0  1454 ; CALLING SEQUENCE:
                                     06C0  1455 ;
                                     06C0  1456 ;	CALLS/CALLG
                                     06C0  1457 ;
                                     06C0  1458 ; INPUTS:
                                     06C0  1459 ;
                                     06C0  1460 ;	none
                                     06C0  1461 ;
                                     06C0  1462 ; IMPLICIT INPUTS:
                                     06C0  1463 ;
                                     06C0  1464 ;	none
                                     06C0  1465 ;
                                     06C0  1466 ; OUTPUTS:
                                     06C0  1467 ;
                                     06C0  1468 ;	none
                                     06C0  1469 ;
                                     06C0  1470 ; IMPLICIT OUTPUTS:
                                     06C0  1471 ;
                                     06C0  1472 ;	IRPCNT, HOLECNT, BIGHOLE, SMALLHOLE, SMALLCNT, HOLESUM
                                     06C0  1473 ;	are set by subroutine SCANPOOL
                                     06C0  1474 ;
                                     06C0  1475 ; ROUTINE VALUE:
                                     06C0  1476 ;
                                     06C0  1477 ;	none
                                     06C0  1478 ;
                                     06C0  1479 ; SIDE EFFECTS:
                                     06C0  1480 ;
                                     06C0  1481 ;	none
                                     06C0  1482 ;--
                                     06C0  1483 
                                     06C0  1484 GETPOOL::
                               0000  06C0  1485 	.WORD	0			; save mask
                                     06C2  1486 	$CMKRNL_S B^SCANPOOL		; get stats in kernel mode
                          00     DD  06C2       		PUSHL	#0
                       DA'AF     DF  06C4       		PUSHAL	B^SCANPOOL
   00000000'GF            02     FB  06C7       		CALLS	#2,G^SYS$CMKRNL
            5A       07B8'CF     DE  06CE  1487 	MOVAL	W^STATS,R10		; move data to stats
                          0082   30  06D3  1488 	BSBW	FETCH			; ...with fooled fetch routine
                          0102   30  06D6  1489 	BSBW	COMPUTE_STATS		; update statistics vectors
                                 04  06D9  1490 	RET				; return 
                                     06DA  1491 
                                     06DA  1492 
                                     06DA  1493 ;++
                                     06DA  1494 ; SCANPOOL - subroutine to update pool statistics
                                     06DA  1495 ;
                                     06DA  1496 ; CALLING SEQUENCE:
                                     06DA  1497 ;
                                     06DA  1498 ;	$CMKRNL_S SCANPOOL
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  38
01              GETPOOL - Accumulate Pool Statistics                                                                            (18)

                                     06DA  1499 ;
                                     06DA  1500 ; IMPLICIT INPUTS:
                                     06DA  1501 ;
                                     06DA  1502 ;	IOC$GL_IRPFL - address of IRP listhead
                                     06DA  1503 ;	EXE$GL_NONPAGED - address of nonpaged pool listhead
                                     06DA  1504 ;
                                     06DA  1505 ; IMPLICIT OUTPUTS:
                                     06DA  1506 ;
                                     06DA  1507 ;	IRPCNT - number of packets in IRP list
                                     06DA  1508 ;	HOLECNT - number of memory blocks in NONPAGED pool
                                     06DA  1509 ;	BIGHOLE - largest memory block
                                     06DA  1510 ;	SMALLHOLE - smallest memory block
                                     06DA  1511 ;	SMALLCNT - number of 32 byte or smaller blocks
                                     06DA  1512 ;	HOLESUM - total space in nonpaged pool
                                     06DA  1513 ;
                                     06DA  1514 ; SIDE EFFECTS:
                                     06DA  1515 ;
                                     06DA  1516 ;	must synchronize data base
                                     06DA  1517 ;--
                                     06DA  1518 
                                     06DA  1519 SCANPOOL:
                               01FC  06DA  1520 	.WORD	^M<R2,R3,R4,R5,R6,R7,R8> ; register save mask
                                     06DC  1521 
                                     06DC  1522 ;
                                     06DC  1523 ; Initialize all variables possible at this level.
                                     06DC  1524 ;
                                     06DC  1525 
                          52     7C  06DC  1526 	CLRQ	R2			; clear holecnt, holesum
                          54     7C  06DE  1527 	CLRQ	R4			; clear for bighole, smallcnt
            56            01     CE  06E0  1528 	MNEGL	#1,R6			; make smallest hole very large
                          57     D4  06E3  1529 	CLRL	R7			; clear for irp counter
                                     06E5  1530 
                                     06E5  1531 ;
                                     06E5  1532 ; Touch last word of sequence to make sure all code is resident.
                                     06E5  1533 ;
                                     06E5  1534 
                       35'AF     D5  06E5  1535 	TSTL	B^70$			; make sure all code is resident
                                     06E8  1536 
                                     06E8  1537 ;
                                     06E8  1538 ; Run through the IRP list and count the packets remaining
                                     06E8  1539 ;
                                     06E8  1540 
            50   00000000'EF     DE  06E8  1541 	MOVAL	IOC$GL_IRPFL,R0		; get IRP listhead address
            51            50     D0  06EF  1542 	MOVL	R0,R1			; copy header address 
                                     06F2  1543 
                                     06F2  1544 ;
                                     06F2  1545 ; Save address of nonpaged listhead and run at IPL
                                     06F2  1546 ; contained there.
                                     06F2  1547 ;
                                     06F2  1548 
            58   00000000'EF     DE  06F2  1549 	MOVAL	EXE$GL_NONPAGED,R8	; get nonpaged pool listhead
                                     06F9  1550 	DSBINT	(R8)+			; set ipl for pool access
            7E            12     DB  06F9       		MFPR	S^#PR$_IPL,-(SP)
            12            88     DA  06FC       		MTPR	(R8)+,S^#PR$_IPL
                                     06FF  1551 
            51            61     D0  06FF  1552 10$:	MOVL	(R1),R1			; get forward link
            50            51     D1  0702  1553 	CMPL	R1,R0			; point back to header?
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  39
01              GETPOOL - Accumulate Pool Statistics                                                                            (18)

                          04     13  0705  1554 	BEQL	20$			; done if so
                          57     D6  0707  1555 	INCL	R7			; count one more packet
                          F4     11  0709  1556 	BRB	10$			; loop back for more
                                     070B  1557 20$:
                                     070B  1558 
                                     070B  1559 ;
                                     070B  1560 ; Now run through the nonpaged pool, count the blocks, and check the
                                     070B  1561 ; smallest and largest holes.
                                     070B  1562 ;
                                     070B  1563 
            50            58     D0  070B  1564 	MOVL	R8,R0			; get pool listhead address
            50            60     D0  070E  1565 30$:	MOVL	(R0),R0			; get address of next block
                          22     13  0711  1566 	BEQL	70$			; branch if zero, list done
                          52     D6  0713  1567 	INCL	R2			; note one more block
            51         04 A0     D0  0715  1568 	MOVL	4(R0),R1		; get size of block
            53            51     C0  0719  1569 	ADDL	R1,R3			; add in size of this block
            56            51     D1  071C  1570 	CMPL	R1,R6			; is this smallest found?
                          03     1E  071F  1571 	BGEQU	40$			; branch if not
            56            51     D0  0721  1572 	MOVL	R1,R6			; else save it
            54            51     D1  0724  1573 40$:	CMPL	R1,R4			; is this largest found?
                          03     1B  0727  1574 	BLEQU	50$			; branch if not
            54            51     D0  0729  1575 	MOVL	R1,R4			; else update largest
            20            51     D1  072C  1576 50$:	CMPL	R1,#32			; is this one of the small ones?
                          02     1A  072F  1577 	BGTRU	60$			; branch if not
                          55     D6  0731  1578 	INCL	R5			; note another small hole
                          D9     11  0733  1579 60$:	BRB	30$			; go on to next block
                                     0735  1580 70$:	ENBINT				; enable interrupts
            12            8E     DA  0735       		MTPR	(SP)+,S^#PR$_IPL
       0470'CF            52     7D  0738  1581 	MOVQ	R2,W^HOLECNT		; save variables
       0478'CF            54     7D  073D  1582 	MOVQ	R4,W^BIGHOLE		; ...
       0480'CF            56     7D  0742  1583 	MOVQ	R6,W^SMALLHOLE
                                 04  0747  1584 	RET
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  40
01              UPTIME - Construct 64 bit uptime from time in s                                                                 (19)

                                     0748  1586 	.SBTTL	UPTIME - Construct 64 bit uptime from time in seconds
                                     0748  1587 
                                     0748  1588 
                                     0748  1589 ;++
                                     0748  1590 ;
                                     0748  1591 ; FUNCTIONAL DESCRIPTION:
                                     0748  1592 ;
                                     0748  1593 ;	Subroutine to the user's display to update the system uptime
                                     0748  1594 ;	field.  Must be written in macro because bliss does not allow
                                     0748  1595 ;	64 bit arithmetic.
                                     0748  1596 ;
                                     0748  1597 ; INPUTS:
                                     0748  1598 ;
                                     0748  1599 ;	none
                                     0748  1600 ;
                                     0748  1601 ; IMPLICIT INPUTS:
                                     0748  1602 ;
                                     0748  1603 ;	EXE$GL_ABSTIM - system up time in seconds
                                     0748  1604 ;
                                     0748  1605 ; OUTPUTS:
                                     0748  1606 ;
                                     0748  1607 ;	none
                                     0748  1608 ;
                                     0748  1609 ; IMPLICIT OUTPUTS:
                                     0748  1610 ;
                                     0748  1611 ;	sets CPUTIM field to 64 bit uptime
                                     0748  1612 ;
                                     0748  1613 ;--
                                     0748  1614 
                                     0748  1615 
                                     0748  1616 
                                     0748  1617 UPTIME::
   00000000'EF   FF676980 8F     7A  0748  1618 	EMUL	#-10*1000*1000,EXE$GL_ABSTIM,#0,W^USRCPUTIM ; construct 64 bit time
       091C'CF            00         0753       
                                 05  0757  1619 	RSB
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  41
01              FETCH - COLLECT DATA FOR DISPLAY                                                                                (20)

                                     0758  1621 	.SBTTL	FETCH - COLLECT DATA FOR DISPLAY
                                     0758  1622 
                                     0758  1623 ;++
                                     0758  1624 ;
                                     0758  1625 ; FUNCTIONAL DESCRIPTION:
                                     0758  1626 ;
                                     0758  1627 ;	This routine is called to collect the data for the next interval.
                                     0758  1628 ;	It scans a table describing which items to collect, and moves
                                     0758  1629 ;	each item to the proper slot in the VALUE table.
                                     0758  1630 ;
                                     0758  1631 ; CALLING SEQUENCE:
                                     0758  1632 ;
                                     0758  1633 ;	JSB/BSB
                                     0758  1634 ;
                                     0758  1635 ; INPUTS:
                                     0758  1636 ;
                                     0758  1637 ;	R9 - address of Display Control Block
                                     0758  1638 ;	R10 - address of vector to store collected values
                                     0758  1639 ;
                                     0758  1640 ; IMPLICIT INPUTS:
                                     0758  1641 ;
                                     0758  1642 ;	PERFTABLE - table describing each data item, indexed by
                                     0758  1643 ;			item number ( * entry size)
                                     0758  1644 ;
                                     0758  1645 ; OUTPUTS:
                                     0758  1646 ;
                                     0758  1647 ;	none
                                     0758  1648 ;
                                     0758  1649 ; IMPLICIT OUTPUTS:
                                     0758  1650 ;
                                     0758  1651 ;	none
                                     0758  1652 ;
                                     0758  1653 ; ROUTINE VALUE:
                                     0758  1654 ;
                                     0758  1655 ;	none
                                     0758  1656 ;
                                     0758  1657 ; SIDE EFFECTS:
                                     0758  1658 ;
                                     0758  1659 ;	R0 - R4 are destroyed
                                     0758  1660 ;
                                     0758  1661 ;--
                                     0758  1662 
                                     0758  1663 
                                     0758  1664 FETCH:
                                     0758  1665 
                          5A     DD  0758  1666 	PUSHL	R10			; save vector address
            50         04 A9     D0  075A  1667 	MOVL	DCB$L_COUNT(R9),R0	; get number of items to fetch
            51         08 A9     D0  075E  1668 	MOVL	DCB$L_ITMSTR(R9),R1	; address of item-number string
                          53     D4  0762  1669 	CLRL	R3			; clear loop counter
                                     0764  1670 10$:
            52            81     9A  0764  1671 	MOVZBL	(R1)+,R2		; get next item number
            52            10     C4  0767  1672 	MULL	#IDB$C_ILENGTH,R2	; compute index into IDB table
            52       0000'CF42   9E  076A  1673 	MOVAB	W^PERFTABLE[R2],R2	; address of IDB for this item
                                     0770  1674 	CASE	IDB$W_ISIZE(R2),<20$,30$,40$>,W ; select on proper size
            00         08 A2     AF  0770       	CASEW	IDB$W_ISIZE(R2),#0,S^#<<30001$-30000$>/2>-1
                          02'        0774       
                                     0775       30000$:
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  42
01              FETCH - COLLECT DATA FOR DISPLAY                                                                                (20)

                               0006' 0775       	.WORD	20$-30000$
                               000C' 0777       	.WORD	30$-30000$
                               0012' 0779       	.WORD	40$-30000$
                                     077B       30001$:
                                     077B  1675 
            8A         0C B2     9A  077B  1676 20$:	MOVZBL	@IDB$L_ADDR(R2),(R10)+	; convert byte to long
                          0A     11  077F  1677 	BRB	50$
            8A         0C B2     3C  0781  1678 30$:	MOVZWL	@IDB$L_ADDR(R2),(R10)+	; get word parameter
                          04     11  0785  1679 	BRB	50$
            8A         0C B2     D0  0787  1680 40$:	MOVL	@IDB$L_ADDR(R2),(R10)+	; get longword parameter
            53            50     F2  078B  1681 50$:	AOBLSS	R0,R3,10$		; loop until done
                          D5         078E       
                          5A   8ED0  078F  1682 	POPL	R10			; restore vector address
                                 05  0792  1683 	RSB				; return
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  43
01              TRANSFER - TRANSFER DATA FROM VALUES ARRAY TO S                                                                 (21)

                                     0793  1685 	.SBTTL	TRANSFER - TRANSFER DATA FROM VALUES ARRAY TO STATS
                                     0793  1686 
                                     0793  1687 ;++
                                     0793  1688 ; FUNCTIONAL DESCRIPTION:
                                     0793  1689 ;
                                     0793  1690 ;	This routine moves the data from VALUES to STATS, doing computation
                                     0793  1691 ;	if necessary.  For example, if the values are times, they must
                                     0793  1692 ;	be subtracted from the previous values. 
                                     0793  1693 ;
                                     0793  1694 ; CALLING SEQUENCE:
                                     0793  1695 ;
                                     0793  1696 ;	BSB/JSB
                                     0793  1697 ;
                                     0793  1698 ; INPUT PARAMETERS:
                                     0793  1699 ;
                                     0793  1700 ;	NONE
                                     0793  1701 ;
                                     0793  1702 ; IMPLICIT INPUTS:
                                     0793  1703 ;
                                     0793  1704 ;	R9 - Display Control Block address
                                     0793  1705 ;	R10 - address of vector of current values
                                     0793  1706 ;
                                     0793  1707 ; OUTPUT PARAMETERS:
                                     0793  1708 ;
                                     0793  1709 ;	none
                                     0793  1710 ;
                                     0793  1711 ; IMPLICIT OUTPUTS:
                                     0793  1712 ;
                                     0793  1713 ;	none
                                     0793  1714 ;
                                     0793  1715 ; COMPLETION CODES:
                                     0793  1716 ;
                                     0793  1717 ;	none
                                     0793  1718 ;
                                     0793  1719 ; SIDE EFFECTS:
                                     0793  1720 ;
                                     0793  1721 ;	none
                                     0793  1722 ;
                                     0793  1723 ;--
                                     0793  1724 TRANSFER:
                          5A     DD  0793  1725 	PUSHL	R10			; save vector address
            50       07B8'CF     DE  0795  1726 	MOVAL	W^STATS,R0		; array to store difference
            51       086C'CF     DE  079A  1727 	MOVAL	W^VAL1,R1		; address of VAL1 array
            51            5A     D1  079F  1728 	CMPL	R10,R1			; does R1 have address of values from
                                     07A2  1729 					; ...last interval?
                          05     12  07A2  1730 	BNEQ	5$			; yes, continue
            51       08C4'CF     DE  07A4  1731 	MOVAL	W^VAL2,R1		; no, make it so
            52         04 A9     D0  07A9  1732 5$:	MOVL	DCB$L_COUNT(R9),R2	; get number of items to scan
            53         08 A9     D0  07AD  1733 	MOVL	DCB$L_ITMSTR(R9),R3	; address of item-number string
                          54     D4  07B1  1734 	CLRL	R4			; clear loop counter
                                     07B3  1735 10$:
            55            83     9A  07B3  1736 	MOVZBL	(R3)+,R5		; get item number
            55            10     C4  07B6  1737 	MULL	#IDB$C_ILENGTH,R5	; compute index in PERFTABLE
            55       0000'CF45   9E  07B9  1738 	MOVAB	W^PERFTABLE[R5],R5	; compute IDB address
                                     07BF  1739 	CASE	IDB$W_TYPE(R5),<20$,30$,40$>,W ; case on type
            00         0A A5     AF  07BF       	CASEW	IDB$W_TYPE(R5),#0,S^#<<30003$-30002$>/2>-1
                          02'        07C3       
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  44
01              TRANSFER - TRANSFER DATA FROM VALUES ARRAY TO S                                                                 (21)

                                     07C4       30002$:
                               0006' 07C4       	.WORD	20$-30002$
                               000B' 07C6       	.WORD	30$-30002$
                               000F' 07C8       	.WORD	40$-30002$
                                     07CA       30003$:
                                     07CA  1740 
                                     07CA  1741 20$:					; VALUE , just move data to stats
            80            8A     D0  07CA  1742 	MOVL	(R10)+,(R0)+		; simple copy to new place
                          04     11  07CD  1743 	BRB	40$			; continue
                                     07CF  1744 30$:					; DIFF , move difference from last interval
            8A            81     C3  07CF  1745 	SUBL3	(R1)+,(R10)+,(R0)+	; subtract previous from current
                          80         07D2       
            54            52     F2  07D3  1746 40$:	AOBLSS	R2,R4,10$		; loop until done
                          DC         07D6       
                          5A   8ED0  07D7  1747 	POPL	R10			; restore register
                                 05  07DA  1748 	RSB
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  45
01              COMPUTE_STATS - maintain statistics for this in                                                                 (22)

                                     07DB  1750 	.SBTTL	COMPUTE_STATS - maintain statistics for this interval
                                     07DB  1751 
                                     07DB  1752 ;++
                                     07DB  1753 ;
                                     07DB  1754 ; FUNCTIONAL DESCRIPTION:
                                     07DB  1755 ;
                                     07DB  1756 ;	Maintiain minimum, maximum, and sum for each data item.
                                     07DB  1757 ;
                                     07DB  1758 ; CALLING SEQUENCE:
                                     07DB  1759 ;
                                     07DB  1760 ;	BSB/JSB
                                     07DB  1761 ;
                                     07DB  1762 ; INPUTS:
                                     07DB  1763 ;
                                     07DB  1764 ;	R9 - address of display control block
                                     07DB  1765 ;
                                     07DB  1766 ; IMPLICIT INPUTS:
                                     07DB  1767 ;
                                     07DB  1768 ;	STATS - address of data values to analyze
                                     07DB  1769 ;
                                     07DB  1770 ; OUTPUTS:
                                     07DB  1771 ;
                                     07DB  1772 ;	NONE
                                     07DB  1773 ;
                                     07DB  1774 ; IMPLICIT OUTPUTS:
                                     07DB  1775 ;
                                     07DB  1776 ;	NONE
                                     07DB  1777 ;
                                     07DB  1778 ; RETURN CODES:
                                     07DB  1779 ;
                                     07DB  1780 ;	NONE
                                     07DB  1781 ;
                                     07DB  1782 ; SIDE EFFECTS:
                                     07DB  1783 ;
                                     07DB  1784 ;--
                                     07DB  1785 
                                     07DB  1786 
                                     07DB  1787 COMPUTE_STATS:
                                     07DB  1788 
       0098'CF            00     E0  07DB  1789 	BBS	#V_FIRSTTIME,W^DSPFLGS,40$ ; leave if first time through
                          3B         07E0       
            50         04 A9     D0  07E1  1790 	MOVL	DCB$L_COUNT(R9),R0	; get item count
                          52     D4  07E5  1791 	CLRL	R2			; clear loop counter
                                     07E7  1792 10$:
       04D8'CF42     07B8'CF42   D1  07E7  1793 	CMPL	W^STATS[R2],W^MIN[R2]	; check minimum
                          09     1E  07F0  1794 	BGEQU	20$			; branch if not less
       04D8'CF42     07B8'CF42   D0  07F2  1795 	MOVL	W^STATS[R2],W^MIN[R2]	; else insert new minimum
       0488'CF42     07B8'CF42   D1  07FB  1796 20$:	CMPL	W^STATS[R2],W^MAX[R2]	; check maximum
                          09     1B  0804  1797 	BLEQU	30$			; branch if not more
       0488'CF42     07B8'CF42   D0  0806  1798 	MOVL	W^STATS[R2],W^MAX[R2]	; else insert new maximum
       0808'CF42     07B8'CF42   C0  080F  1799 30$:	ADDL	W^STATS[R2],W^SUM[R2]	; add in new sum
            52            50     F2  0818  1800 	AOBLSS	R0,R2,10$
                          CB         081B       
                                 05  081C  1801 40$:	RSB
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  46
01              COMPUTE_PERCNT - STATISTICS AS INTEGER PERCENTA                                                                 (23)

                                     081D  1803 	.SBTTL	COMPUTE_PERCNT - STATISTICS AS INTEGER PERCENTAGE OF TOTAL
                                     081D  1804 
                                     081D  1805 ;++
                                     081D  1806 ;
                                     081D  1807 ; FUNCTIONAL DESCRIPTION:
                                     081D  1808 ;
                                     081D  1809 ;	Sum the STATS array and replace each item with its percentage
                                     081D  1810 ;	of the total value.
                                     081D  1811 ;
                                     081D  1812 ; INPUTS:
                                     081D  1813 ;
                                     081D  1814 ;	R9 - address of display control block
                                     081D  1815 ;
                                     081D  1816 ; IMPLICIT INPUTS:
                                     081D  1817 ;
                                     081D  1818 ;	STATS - vector of values to be analyzed
                                     081D  1819 ;
                                     081D  1820 ; OUTPUTS:
                                     081D  1821 ;
                                     081D  1822 ;	none
                                     081D  1823 ;
                                     081D  1824 ; IMPLICIT OUTPUTS:
                                     081D  1825 ;
                                     081D  1826 ;	none
                                     081D  1827 ;
                                     081D  1828 ; ROUTINE VALUE:
                                     081D  1829 ;
                                     081D  1830 ;	none
                                     081D  1831 ;
                                     081D  1832 ; SIDE EFFECTS:
                                     081D  1833 ;
                                     081D  1834 ;	none
                                     081D  1835 ;--
                                     081D  1836 
                                     081D  1837 COMPUTE_PERCNT:
                                     081D  1838 
            50         04 A9     D0  081D  1839 	MOVL	DCB$L_COUNT(R9),R0	; get number of items
                          51     7C  0821  1840 	CLRQ	R1			; clear accumulator and counter
            51       07B8'CF42   C0  0823  1841 10$:	ADDL	W^STATS[R2],R1		; add next item
            52            50     F2  0829  1842 	AOBLSS	R0,R2,10$		; sum all items
                          F6         082C       
                          52     D4  082D  1843 	CLRL	R2			; clear counter again
                          51     D5  082F  1844 	TSTL	R1			; check for zero sum
                          14     13  0831  1845 	BEQL	30$			; exit if all elements zero
       07B8'CF42 00000064 8F     C4  0833  1846 20$:	MULL	#100,W^STATS[R2]	; multiply value by 100
       07B8'CF42          51     C6  083D  1847 	DIVL	R1,W^STATS[R2]		; and divide by sum leaving percentage
            52            50     F2  0843  1848 	AOBLSS	R0,R2,20$		; continue for all items
                          EC         0846       
                                 05  0847  1849 30$:	RSB				; return
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  47
01              FMTOUT - FORMAT AND OUTPUT STRING                                                                              (24)

                                     0848  1851 	.SBTTL	FMTOUT - FORMAT AND OUTPUT STRING
                                     0848  1852 
                                     0848  1853 ;++
                                     0848  1854 ;
                                     0848  1855 ; FUNCTIONAL DESCRIPTION:
                                     0848  1856 ;
                                     0848  1857 ;	Format string using FAOL with arguments in FAOSTK and
                                     0848  1858 ;	output to terminal.   FAODSC has control string descriptor.
                                     0848  1859 ;
                                     0848  1860 ;--
                                     0848  1861 
                                     0848  1862 	
                                     0848  1863 FMTOUT::
                                     0848  1864 	$FAOL_S	W^FAODSC,W^FAOLEN,W^OUTDSC,W^FAOSTK
                     0300'CF     DF  0848       		PUSHAL	W^FAOSTK
                     0530'CF     7F  084C       		PUSHAQ	W^OUTDSC
                     02FC'CF     3F  0850       		PUSHAW	W^FAOLEN
                     02F4'CF     7F  0854       		PUSHAQ	W^FAODSC
   00000000'GF            04     FB  0858       		CALLS	#4,G^SYS$FAOL
       0020'CF       02FC'CF     3C  085F  1865 	MOVZWL	W^FAOLEN,W^QIOLST+QIOW$_P2	; insert output length in list
                                     0866  1866 	$QIOW_G	W^QIOLST			; call QIO
   00000000'GF       0000'CF     FA  0866       		CALLG	W^QIOLST,G^SYS$QIOW
                                 05  086F  1867 	RSB
                                     0870  1868 
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  48
01              EXIT - Final cleanup routine                                                                                    (25)

                                     0870  1870 	.SBTTL	EXIT - Final cleanup routine
                                     0870  1871 
                                     0870  1872 ;++
                                     0870  1873 ;
                                     0870  1874 ; FUNCTIONAL DESCRIPTION:
                                     0870  1875 ;
                                     0870  1876 ;	Final code to reset the state of the world.  Clean up any changes
                                     0870  1877 ;	made to the terminal or characteristics.
                                     0870  1878 ;
                                     0870  1879 ;--
                                     0870  1880 
                                     0870  1881 EXIT:
                                     0870  1882 
                                     0870  1883 ;
                                     0870  1884 ; Exit image
                                     0870  1885 ;
                                     0870  1886 
                                     0870  1887 	$EXIT_S				; normal exit
                          01     DD  0870       		PUSHL	#1
   00000000'GF            01     FB  0872       		CALLS	#1,G^SYS$EXIT
                                     0879  1888 
                                     0879  1889 	.END MAIN
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  49
SYMBOL TABLE                                                                                                                    (25)

$$ARGS         = 0000000C            FMTOUT           00000848 RG    04   IO$M_READATTN  = 00000080            
$$T1           = 00000001            GBL...         = 00000000            IO$M_REVERSE   = 00000040            
ARRAYSIZE      = 00000014            GETFCP           0000066E RG    04   IO$M_SHUTDOWN  = 00000080            
AST_PC         = 00000010            GETMODE          000005AC RG    04   IO$M_STARTUP   = 00000040            
BARSIZE          00000034 RG    02   GETPAGE          000005E1 RG    04   IO$M_SYNCH     = 00000200            
BIGHOLE          00000478 RG    02   GETPCT           00000591 RG    04   IO$M_TIMED     = 00000080            
BIT...         = 00000008            GETPHDINFO       0000060A RG    04   IO$M_TRMNOECHO = 00001000            
CAPH           = 00000048            GETPOINT         0000051F R     04   IO$M_WRTATTN   = 00000100            
CAPJ           = 0000004A            GETPOOL          000006C0 RG    04   IO$S_FCODE     = 00000006            
CAPK           = 0000004B            GETSTATES        0000054D RG    04   IO$V_ABORT     = 00000008            
CAPL           = 0000004C            GETVAL           000005A0 RG    04   IO$V_ACCESS    = 00000006            
CLRVT55          0000092C RG    02   GET_TT_TYPE      0000016A R     04   IO$V_ATTNAST   = 00000008            
CNTRL_C          00000146 R     04   GRAPH6           00000416 RG    04   IO$V_BINARY    = 00000006            
COMPUTE_PERCNT   0000081D R     04   HHIST            000002EB RG    04   IO$V_CANCTRLO  = 00000006            
COMPUTE_STATS    000007DB R     04   HOLECNT          00000470 RG    02   IO$V_COMMOD    = 00000006            
CPUTIME          00000044 R     02   HOLESUM          00000474 RG    02   IO$V_CREATE    = 00000007            
CR             = 0000000D            IDB$C_ILENGTH    00000010            IO$V_CTRLCAST  = 00000008            
CURDCB           00000038 RG    02   IDB$K_ILENGTH    00000010            IO$V_CTRLYAST  = 00000007            
CURGRAPH         0000003C RG    02   IDB$L_ADDR       0000000C            IO$V_CVTLOW    = 00000008            
CURXPOS          00000040 R     02   IDB$L_LNAME      00000004            IO$V_DATACHECK = 0000000E            
CYCLE            000001B0 RG    04   IDB$L_SNAME      00000000            IO$V_DELETE    = 00000008            
CYCLE_ADDR       00000050 R     02   IDB$W_ISIZE      00000008            IO$V_DMOUNT    = 0000000A            
CYCLE_AST        0000020C R     04   IDB$W_TYPE       0000000A            IO$V_DSABLMBX  = 0000000A            
CYCLE_COUNT      0000004C R     02   INITFLG          00000454 R     02   IO$V_ENABLMBX  = 00000007            
CYCLE_TABLE      00000054 R     02   INPDSC           00000458 R     02   IO$V_FCODE     = 00000000            
CYCLE_TABLE_END= 0000008A R     02   INTERVAL         00000468 RG    02   IO$V_HANGUP    = 00000009            
CYCLE_TIME       0000008C RG    02   IO$M_ABORT     = 00000100            IO$V_INHERLOG  = 0000000B            
DCB$C_LENGTH     0000001C            IO$M_ACCESS    = 00000040            IO$V_INHEXTGAP = 0000000C            
DCB$K_LENGTH     0000001C            IO$M_ATTNAST   = 00000100            IO$V_INHRETRY  = 0000000F            
DCB$L_COLLECT    00000010            IO$M_BINARY    = 00000040            IO$V_INHSEEK   = 0000000C            
DCB$L_COUNT      00000004            IO$M_CANCTRLO  = 00000040            IO$V_INTERRUPT = 00000006            
DCB$L_DISPLAY    00000014            IO$M_COMMOD    = 00000040            IO$V_INTSKIP   = 00000008            
DCB$L_INIT       0000000C            IO$M_CREATE    = 00000080            IO$V_MOUNT     = 00000009            
DCB$L_ITMSTR     00000008            IO$M_CTRLCAST  = 00000100            IO$V_NOECHO    = 00000006            
DCB$L_TITLE      00000000            IO$M_CTRLYAST  = 00000080            IO$V_NOFILTR   = 00000009            
DCB$W_MIN        00000018            IO$M_CVTLOW    = 00000100            IO$V_NOFORMAT  = 00000008            
DCB$W_RANGE      0000001A            IO$M_DATACHECK = 00004000            IO$V_NOW       = 00000006            
DISPLAY_TYPE     00000094 R     02   IO$M_DELETE    = 00000100            IO$V_NOWAIT    = 00000007            
DSPFLGS          00000098 RG    02   IO$M_DMOUNT    = 00000400            IO$V_PACKED    = 00000007            
DSPSTRT          0000002F R     04   IO$M_DSABLMBX  = 00000400            IO$V_PURGE     = 0000000B            
ESC            = 0000001B            IO$M_ENABLMBX  = 00000080            IO$V_READATTN  = 00000007            
EXE$GL_ABSTIM    ********   X   04   IO$M_FCODE     = 0000003F            IO$V_REVERSE   = 00000006            
EXE$GL_NONPAGED  ********   X   04   IO$M_HANGUP    = 00000200            IO$V_SHUTDOWN  = 00000007            
EXE$GQ_SYSTIME   ********   X   04   IO$M_INHERLOG  = 00000800            IO$V_STARTUP   = 00000006            
EXIT             00000870 R     04   IO$M_INHEXTGAP = 00001000            IO$V_SYNCH     = 00000009            
FAOBUF           0000009C RG    02   IO$M_INHRETRY  = 00008000            IO$V_TIMED     = 00000007            
FAODSC           000002F4 RG    02   IO$M_INHSEEK   = 00001000            IO$V_TRMNOECHO = 0000000C            
FAOLEN           000002FC R     02   IO$M_INTERRUPT = 00000040            IO$V_WRTATTN   = 00000008            
FAOOUT           ********   X   04   IO$M_INTSKIP   = 00000100            IO$_ACCESS     = 00000032            
FAOSTK           00000300 RG    02   IO$M_MOUNT     = 00000200            IO$_ACPCONTROL = 00000038            
FCPCACHE         00000444 RG    02   IO$M_NOECHO    = 00000040            IO$_CREATE     = 00000033            
FCPCALLS         00000440 RG    02   IO$M_NOFILTR   = 00000200            IO$_DEACCESS   = 00000034            
FCPCPU           00000448 RG    02   IO$M_NOFORMAT  = 00000100            IO$_DELETE     = 00000035            
FCPREAD          0000044C RG    02   IO$M_NOW       = 00000040            IO$_DIAGNOSE   = 0000001D            
FCPWRITE         00000450 RG    02   IO$M_NOWAIT    = 00000080            IO$_DRVCLR     = 00000004            
FETCH            00000758 R     04   IO$M_PACKED    = 00000080            IO$_ERASETAPE  = 00000006            
FLOAT          = 00000001            IO$M_PURGE     = 00000800            IO$_LOGICAL    = 0000002F            
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  50
SYMBOL TABLE                                                                                                                    (25)

IO$_MODIFY     = 00000036            JPI$_ACCOUNT   = 00000203            JPI$_WSPEAK    = 00000201            
IO$_MOUNT      = 00000039            JPI$_APTCNT    = 0000030A            JPI$_WSQUOTA   = 00000402            
IO$_NOP        = 00000000            JPI$_ASTACT    = 00000300            JPI$_WSSIZE    = 00000411            
IO$_OFFSET     = 00000006            JPI$_ASTCNT    = 0000030E            LF             = 0000000A            
IO$_PACKACK    = 00000008            JPI$_ASTEN     = 00000301            MAIN             00000000 RG    04   
IO$_PHYSICAL   = 0000001F            JPI$_ASTLM     = 00000409            MAX              00000488 R     02   
IO$_READHEAD   = 0000000E            JPI$_BIOCNT    = 0000030F            MAX55HEIGHT    = 000000C8            
IO$_READLBLK   = 00000021            JPI$_BIOLM     = 00000310            MAXBARS        = 00000028  G         
IO$_READPBLK   = 0000000C            JPI$_BUFIO     = 0000040C            MIN              000004D8 R     02   
IO$_READPRESET = 00000019            JPI$_BYTCNT    = 00000311            MMG$GL_SYSPHD    ********   X   04   
IO$_READPROMPT = 00000037            JPI$_BYTLM     = 0000031A            MODE2DCB         ********   X   02   
IO$_READTRACKD = 00000010            JPI$_CPULIM    = 0000040D            MODE3DCB         ********   X   02   
IO$_READVBLK   = 00000031            JPI$_CPUTIM    = 00000407            NAMESTR          00000935 RG    02   
IO$_RECAL      = 00000003            JPI$_CURPRIV   = 00000400            NEWTIME          ********   X   04   
IO$_RELEASE    = 00000005            JPI$_DFPFC     = 00000406            NEWXPOS          00000528 R     02   
IO$_RETCENTER  = 00000007            JPI$_DFWSCNT   = 00000403            NULLTIME         0000052C R     02   
IO$_REWIND     = 00000024            JPI$_DIOCNT    = 00000312            OUTBUF           00000538 R     02   
IO$_REWINDOFF  = 00000022            JPI$_DIOLM     = 00000313            OUTDSC           00000530 RG    02   
IO$_SEARCH     = 00000009            JPI$_DIRIO     = 0000040B            OUTPUT           ********   X   04   
IO$_SEEK       = 00000002            JPI$_EFCS      = 00000317            PAGEDCB          ********   X   02   
IO$_SENSECHAR  = 0000001B            JPI$_EFCU      = 00000318            PAGESTR          0000093E R     02   
IO$_SENSEMODE  = 00000027            JPI$_EFWM      = 00000316            PCB$B_ASTACT     0000000C            
IO$_SETCHAR    = 0000001A            JPI$_EXCVEC    = 00000100            PCB$B_ASTEN      0000000D            
IO$_SETMODE    = 00000023            JPI$_FILCNT    = 00000314            PCB$B_PRI        0000000B            
IO$_SKIPFILE   = 00000025            JPI$_FILLM     = 0000040F            PCB$B_PRIB       00000033            
IO$_SKIPRECORD = 00000026            JPI$_FINALEXC  = 00000101            PCB$B_TYPE       0000000A            
IO$_SPACEFILE  = 00000002            JPI$_FREP0VA   = 00000404            PCB$B_WEFC       00000032            
IO$_SPACERECORD= 00000009            JPI$_FREP1VA   = 00000405            PCB$C_LENGTH     0000007C            
IO$_STARTSPNDL = 00000019            JPI$_GPGCNT    = 0000030C            PCB$K_LENGTH     0000007C            
IO$_UNLOAD     = 00000001            JPI$_GRP       = 00000308            PCB$L_ASTQBL     00000014            
IO$_VIRTUAL    = 0000003F            JPI$_LASTADR   = 00000102            PCB$L_ASTQFL     00000010            
IO$_WRITECHECK = 0000000A            JPI$_LASTCTL   = 00000207            PCB$L_EFC2P      00000058            
IO$_WRITECHECKH= 00000018            JPI$_LASTPCB   = 0000031D            PCB$L_EFC3P      0000005C            
IO$_WRITEHEAD  = 0000000D            JPI$_LASTPHD   = 00000412            PCB$L_EFCS       00000050            
IO$_WRITELBLK  = 00000020            JPI$_LOGINTIM  = 00000206            PCB$L_EFCU       00000054            
IO$_WRITEMARK  = 0000001C            JPI$_MEM       = 00000307            PCB$L_EFWM       0000004C            
IO$_WRITEOF    = 00000028            JPI$_OWNER     = 00000303            PCB$L_OWNER      0000001C            
IO$_WRITEPBLK  = 0000000B            JPI$_PAGEFLTS  = 0000040A            PCB$L_PHD        00000064            
IO$_WRITETRACKD= 0000000F            JPI$_PGFLQUOTA = 0000040E            PCB$L_PHYPCB     00000018            
IO$_WRITEVBLK  = 00000030            JPI$_PID       = 00000319            PCB$L_PID        00000060            
IOC$GL_IRPFL     ********   X   04   JPI$_PPGCNT    = 0000030D            PCB$L_PQB        0000004C            
IORATEDCB        ********   X   02   JPI$_PRCCNT    = 0000031B            PCB$L_SQBL       00000004            
IPL$_ASTDEL    = 00000002            JPI$_PRCLM     = 00000408            PCB$L_SQFL       00000000            
IPL$_HWCLK     = 00000018            JPI$_PRCNAM    = 0000031C            PCB$L_STS        00000028            
IPL$_IOPOST    = 00000004            JPI$_PRI       = 00000302            PCB$L_UIC        00000020            
IPL$_MAILBOX   = 0000000B            JPI$_PRIB      = 00000309            PCB$L_WSSWP      00000024            
IPL$_POWER     = 0000001F            JPI$_PROCPRIV  = 00000204            PCB$L_WTIME      0000002C            
IPL$_QUEUEAST  = 00000006            JPI$_STATE     = 00000306            PCB$T_LNAME      0000006C            
IPL$_SCHED     = 00000003            JPI$_STS       = 00000305            PCB$V_ASTPEN   = 00000011            
IPL$_SYNCH     = 00000007            JPI$_TMBU      = 0000030B            PCB$V_BATCH    = 0000000E            
IPL$_TIMER     = 00000007            JPI$_TQCNT     = 00000315            PCB$V_DELPEN   = 00000001            
IRPCNT           00000484 RG    02   JPI$_TQLM      = 00000410            PCB$V_FORCPEN  = 00000002            
JPI$C_ADRTYPE  = 00000001            JPI$_UIC       = 00000304            PCB$V_HIBER    = 00000013            
JPI$C_CTLTYPE  = 00000002            JPI$_USERNAME  = 00000202            PCB$V_INQUAN   = 00000003            
JPI$C_LISTEND  = 00000000            JPI$_VIRTPEAK  = 00000200            PCB$V_LOGIN    = 00000014            
JPI$C_PCBTYPE  = 00000003            JPI$_VOLUMES   = 00000205            PCB$V_NETWRK   = 00000015            
JPI$C_PHDTYPE  = 00000004            JPI$_WSAUTH    = 00000401            PCB$V_NOACNT   = 0000000F            
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  51
SYMBOL TABLE                                                                                                                    (25)

PCB$V_NODELET  = 00000017            PHD$L_PC         000000C0            PHD$W_WSDYN      0000000E            
PCB$V_PHDRES   = 00000012            PHD$L_PCB        00000078            PHD$W_WSFLUID    00000074            
PCB$V_PSWAPM   = 00000004            PHD$L_PGFLCNT    00000034            PHD$W_WSLAST     00000012            
PCB$V_PWRAST   = 00000016            PHD$L_PGFLQUOTA  0000005C            PHD$W_WSLIST     00000008            
PCB$V_RES      = 00000000            PHD$L_PSL        000000C4            PHD$W_WSLOCK     0000000C            
PCB$V_RESPEN   = 00000005            PHD$L_PSTBASOFF  00000020            PHD$W_WSLX       0000004A            
PCB$V_SSFEXC   = 00000006            PHD$L_PTWSLELCK  00000064            PHD$W_WSNEXT     00000010            
PCB$V_SSFEXCE  = 00000007            PHD$L_PTWSLEVAL  00000068            PHD$W_WSQUOTA    00000018            
PCB$V_SSFEXCS  = 00000008            PHD$L_R0         00000088            PMS$GL_FCP2      ********   X   04   
PCB$V_SSFEXCU  = 00000009            PHD$L_R1         0000008C            POOLDCB          ********   X   02   
PCB$V_SSRWAIT  = 0000000A            PHD$L_R10        000000B0            PR$_ACCR       = 00000029            
PCB$V_SUSPEN   = 0000000B            PHD$L_R11        000000B4            PR$_ACCS       = 00000028            
PCB$V_SWPVBN   = 00000010            PHD$L_R12        000000B8            PR$_ASTLVL     = 00000013            
PCB$V_WAKEPEN  = 0000000C            PHD$L_R13        000000BC            PR$_ESP        = 00000001            
PCB$V_WALL     = 0000000D            PHD$L_R2         00000090            PR$_ICCS       = 00000018            
PCB$W_APTCNT     00000034            PHD$L_R3         00000094            PR$_ICR        = 0000001A            
PCB$W_ASTCNT     0000003C            PHD$L_R4         00000098            PR$_IPL        = 00000012            
PCB$W_BIOCNT     0000003E            PHD$L_R5         0000009C            PR$_ISP        = 00000004            
PCB$W_BIOLM      00000040            PHD$L_R6         000000A0            PR$_KSP        = 00000000            
PCB$W_BYTCNT     00000042            PHD$L_R7         000000A4            PR$_MAPEN      = 00000038            
PCB$W_BYTLM      00000068            PHD$L_R8         000000A8            PR$_NICR       = 00000019            
PCB$W_DIOCNT     00000044            PHD$L_R9         000000AC            PR$_P0BR       = 00000008            
PCB$W_DIOLM      00000046            PHD$L_REFERFLT   00000014            PR$_P0LR       = 00000009            
PCB$W_FILCNT     00000048            PHD$L_SSP        00000080            PR$_P1BR       = 0000000A            
PCB$W_GPGCNT     00000038            PHD$L_USP        00000084            PR$_P1LR       = 0000000B            
PCB$W_GRP        00000022            PHD$L_WSL        00000118            PR$_PCBB       = 00000010            
PCB$W_MEM        00000020            PHD$M_DALCSTX  = 00000002            PR$_PME        = 0000003D            
PCB$W_MTXCNT     0000000E            PHD$M_PFMFLG   = 00000001            PR$_RXCS       = 00000020            
PCB$W_PPGCNT     0000003A            PHD$M_WSPEAKCHK= 00000004            PR$_RXDB       = 00000021            
PCB$W_PRCCNT     0000006A            PHD$Q_PRIVMSK    00000000            PR$_SBIER      = 00000034            
PCB$W_SIZE       00000008            PHD$S_ASTLVL   = 00000008            PR$_SBIFS      = 00000030            
PCB$W_STATE      00000030            PHD$S_P0LR     = 00000018            PR$_SBIMT      = 00000033            
PCB$W_TMBU       00000036            PHD$V_ASTLVL   = 00000018            PR$_SBIQC      = 00000036            
PCB$W_TQCNT      0000004A            PHD$V_DALCSTX  = 00000001            PR$_SBIS       = 00000031            
PERFTABLE        ********   X   04   PHD$V_P0LR     = 00000000            PR$_SBISC      = 00000032            
PHD$B_ASTLVL     000000CF            PHD$V_PFMFLG   = 00000000            PR$_SBITA      = 00000035            
PHD$B_DFPFC      00000038            PHD$V_WSPEAKCHK= 00000002            PR$_SBR        = 0000000C            
PHD$B_PAGFIL     0000001F            PHD$W_ASTLM      00000044            PR$_SCBB       = 00000011            
PHD$B_PGTBPFC    00000039            PHD$W_BAK        00000048            PR$_SID        = 0000003E            
PHD$C_LENGTH     00000118            PHD$W_DFWSCNT    0000001A            PR$_SIRR       = 00000014            
PHD$C_PHDPAGCTX= 00000008            PHD$W_EMPTPG     000000D8            PR$_SISR       = 00000015            
PHD$K_LENGTH     00000118            PHD$W_EXTDYNWS   00000076            PR$_SLR        = 0000000D            
PHD$L_BIOCNT     00000054            PHD$W_FILLM      00000060            PR$_SSP        = 00000002            
PHD$L_CPULIM     00000058            PHD$W_FLAGS      0000003A            PR$_TBIA       = 00000039            
PHD$L_CPUTIM     0000003C            PHD$W_PHVINDEX   00000046            PR$_TBIS       = 0000003A            
PHD$L_DIOCNT     00000050            PHD$W_PRCLM      00000042            PR$_TODR       = 0000001B            
PHD$L_ESP        0000007C            PHD$W_PST        00000020            PR$_TXCS       = 00000022            
PHD$L_FREP0VA    00000028            PHD$W_PSTBASMAX  0000004A            PR$_TXDB       = 00000023            
PHD$L_FREP1VA    00000030            PHD$W_PSTFREE    00000026            PR$_USP        = 00000003            
PHD$L_FREPTECNT  0000002C            PHD$W_PSTLAST    00000024            PR$_WCSA       = 0000002C            
PHD$L_KSP        00000078            PHD$W_PTCNTACT   00000070            PR$_WCSD       = 0000002D            
PHD$L_P0BR       000000C8            PHD$W_PTCNTLCK   0000006C            PRINTAVG         00000222 RG    04   
PHD$L_P0LRASTL   000000CC            PHD$W_PTCNTMAX   00000072            PRINTRATE        00000263 RG    04   
PHD$L_P1BR       000000D0            PHD$W_PTCNTVAL   0000006E            PRINTVAL         0000021C RG    04   
PHD$L_P1LR       000000D4            PHD$W_QUANT      00000040            PRT              00000227 R     04   
PHD$L_PAGEFLTS   0000004C            PHD$W_TQLM       00000062            QIOLST           00000000 R     02   
PHD$L_PAGFIL     0000001C            PHD$W_WSAUTH     0000000A            QIOW$_ASTADR   = 00000014            
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  52
SYMBOL TABLE                                                                                                                    (25)

QIOW$_ASTPRM   = 00000018            SS$_DATAOVERUN = 00000838            SS$_INSFARG    = 00000114            
QIOW$_CHAN     = 00000008            SS$_DEBUG      = 0000046C            SS$_INSFMEM    = 00000124            
QIOW$_EFN      = 00000004            SS$_DECOVF     = 000004A4            SS$_INSFRAME   = 0000012C            
QIOW$_FUNC     = 0000000C            SS$_DEVACTIVE  = 000002C4            SS$_INSFWSL    = 0000011C            
QIOW$_IOSB     = 00000010            SS$_DEVALLOC   = 00000840            SS$_INTDIV     = 00000484            
QIOW$_NARGS    = 0000000C            SS$_DEVALRALLOC= 00000641            SS$_INTOVF     = 0000047C            
QIOW$_P1       = 0000001C            SS$_DEVASSIGN  = 00000848            SS$_IVADDR     = 00000134            
QIOW$_P2       = 00000020            SS$_DEVFOREIGN = 00000064            SS$_IVCHAN     = 0000013C            
QIOW$_P3       = 00000024            SS$_DEVICEFULL = 00000850            SS$_IVCHNLSEC  = 0000026C            
QIOW$_P4       = 00000028            SS$_DEVMOUNT   = 0000006C            SS$_IVDEVNAM   = 00000144            
QIOW$_P5       = 0000002C            SS$_DEVNOTALLOC= 00000858            SS$_IVGSDNAM   = 0000014C            
QIOW$_P6       = 00000030            SS$_DEVNOTMBX  = 00000074            SS$_IVLOGNAM   = 00000154            
QUERY            ********   X   04   SS$_DEVNOTMOUNT= 0000007C            SS$_IVLOGTAB   = 0000015C            
S2DCB            ********   X   02   SS$_DEVOFFLINE = 00000084            SS$_IVPROTECT  = 000002F4            
SCANPOOL         000006DA R     04   SS$_DIRFULL    = 00000860            SS$_IVQUOTAL   = 00000164            
SCH$GL_FREECNT   ********   X   04   SS$_DRVERR     = 0000008C            SS$_IVSECFLG   = 0000016C            
SCH$GL_MAXPIX    ********   X   04   SS$_DUPFILENAME= 00000868            SS$_IVSECIDCTL = 000002E4            
SCH$GL_MFYCNT    ********   X   04   SS$_DUPLNAM    = 00000094            SS$_IVSSRQ     = 00000174            
SCH$GL_PCBVEC    ********   X   04   SS$_ENDOFFILE  = 00000870            SS$_IVSTSFLG   = 0000017C            
SMALLCNT         0000047C RG    02   SS$_ENDOFTAPE  = 00000878            SS$_IVTIME     = 00000184            
SMALLHOLE        00000480 RG    02   SS$_ENDOFUSRLBL= 00000970            SS$_LCKPAGFUL  = 000000D4            
SPSAVE           00000790 R     02   SS$_EXQUOTA    = 0000001C            SS$_LENVIO     = 0000018C            
SS$_ABORT      = 0000002C            SS$_EXTIDXFILE = 00000880            SS$_LKWSETFUL  = 00000194            
SS$_ACCONFLICT = 00000800            SS$_FCPREADERR = 00000888            SS$_MBFULL     = 000008D8            
SS$_ACCVIO     = 0000000C            SS$_FCPREPSTN  = 00000988            SS$_MBTOOSML   = 0000019C            
SS$_ACPVAFUL   = 000002FC            SS$_FCPREWNDERR= 00000890            SS$_MCHECK     = 000002BC            
SS$_ARTRES     = 00000474            SS$_FCPSPACERR = 00000898            SS$_MEDOFL     = 000001A4            
SS$_ASTFLT     = 0000040C            SS$_FCPWRITERR = 000008A0            SS$_MSGNOTFND  = 00000621            
SS$_BADATTRIB  = 00000034            SS$_FILACCERR  = 0000009C            SS$_MTLBLLONG  = 00000304            
SS$_BADCHKSUM  = 00000808            SS$_FILALRACC  = 000000A4            SS$_MUSTCLOSEFL= 00000948            
SS$_BADESCAPE  = 0000003C            SS$_FILELOCKED = 000008A8            SS$_NOAQB      = 00000314            
SS$_BADFILEHDR = 00000810            SS$_FILENUMCHK = 000008B0            SS$_NODATA     = 000001AC            
SS$_BADFILENAME= 00000818            SS$_FILESEQCHK = 000008B8            SS$_NOHANDLER  = 000008F8            
SS$_BADFILEVER = 00000820            SS$_FILESTRUCT = 000008C0            SS$_NOHOMEBLK  = 000008E0            
SS$_BADIMGHDR  = 00000044            SS$_FILNOTACC  = 000000AC            SS$_NOIOCHAN   = 000001B4            
SS$_BADIRECTORY= 00000828            SS$_FILNOTCNTG = 000002AC            SS$_NOLINKS    = 0000027C            
SS$_BADPARAM   = 00000014            SS$_FILNOTEXP  = 000000B4            SS$_NOLOGNAM   = 000001BC            
SS$_BADSTACK   = 000002B4            SS$_FLTDIV     = 00000494            SS$_NOMBX      = 00000274            
SS$_BEGOFFILE  = 00000938            SS$_FLTOVF     = 0000048C            SS$_NOMOREFILES= 00000930            
SS$_BLOCKCNTERR= 00000940            SS$_FLTUND     = 0000049C            SS$_NONEXDRV   = 000001C4            
SS$_BREAK      = 00000414            SS$_FORMAT     = 000000BC            SS$_NONEXPR    = 000008E8            
SS$_BUFBYTALI  = 0000030C            SS$_GPTFULL    = 000000C4            SS$_NONLOCAL   = 000008F0            
SS$_BUFFEROVF  = 00000601            SS$_GSDFULL    = 000000CC            SS$_NOPRIV     = 00000024            
SS$_BUGCHECK   = 000002A4            SS$_HANGUP     = 000002CC            SS$_NORMAL     = 00000001            
SS$_CANCEL     = 00000830            SS$_HEADERFULL = 000008C8            SS$_NOSIGNAL   = 00000900            
SS$_CHANINTLK  = 0000004C            SS$_IDXFILEFULL= 000008D0            SS$_NOSOLICIT  = 00000284            
SS$_CLIFRCEXT  = 00000980            SS$_ILLBLKNUM  = 000000DC            SS$_NOSUCHDEV  = 00000908            
SS$_CMODSUPR   = 0000041C            SS$_ILLCNTRFUNC= 000000E4            SS$_NOSUCHFILE = 00000910            
SS$_CMODUSER   = 00000424            SS$_ILLEFC     = 000000EC            SS$_NOSUCHNODE = 0000028C            
SS$_COMPAT     = 0000042C            SS$_ILLIOFUNC  = 000000F4            SS$_NOSUCHSEC  = 00000978            
SS$_CONTINUE   = 00000001            SS$_ILLLBLAST  = 00000968            SS$_NOTAPEOP   = 00000264            
SS$_CONTROLC   = 00000651            SS$_ILLPAGCNT  = 000000FC            SS$_NOTFILEDEV = 000001CC            
SS$_CONTROLO   = 00000609            SS$_ILLSEQOP   = 000002DC            SS$_NOTINTBLSZ = 000001D4            
SS$_CONTROLY   = 00000611            SS$_ILLSER     = 00000104            SS$_NOTLABELMT = 000001DC            
SS$_CREATED    = 00000619            SS$_ILLUSRLBLRD= 00000958            SS$_NOTMODIFIED= 00000659            
SS$_CTRLERR    = 00000054            SS$_ILLUSRLBLWT= 00000960            SS$_NOTNETDEV  = 000002EC            
SS$_DATACHECK  = 0000005C            SS$_INCVOLLABEL= 0000010C            SS$_NOTRAN     = 00000629            
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  53
SYMBOL TABLE                                                                                                                    (25)

SS$_NOTSQDEV   = 000001E4            SYSTIME          000007A0 R     02   TT$V_PAGE      = 00000019            
SS$_OPCCUS     = 00000434            TITLESTR         00000967 RG    02   TT$V_PARITY    = 00000006            
SS$_OPCDEC     = 0000043C            TOPTENDCB        ********   X   02   TT$V_PASSALL   = 00000000            
SS$_OPINCOMPL  = 000002D4            TRANSFER         00000793 R     04   TT$V_READSYNC  = 00000012            
SS$_PAGOWNVIO  = 000001EC            TT$C_BAUD_110  = 00000003            TT$V_REMOTE    = 0000000D            
SS$_PAGRDERR   = 00000444            TT$C_BAUD_1200 = 00000008            TT$V_SCOPE     = 0000000C            
SS$_PARITY     = 000001F4            TT$C_BAUD_134  = 00000004            TT$V_SCRIPT    = 00000006            
SS$_PARTESCAPE = 000001FC            TT$C_BAUD_150  = 00000005            TT$V_TTSYNC    = 00000005            
SS$_PFMBSY     = 00000204            TT$C_BAUD_1800 = 00000009            TT$V_WRAP      = 00000009            
SS$_PLHLDR     = 00000404            TT$C_BAUD_2000 = 0000000A            TT$_LA36       = 00000020            
SS$_PSTFULL    = 0000020C            TT$C_BAUD_2400 = 0000000B            TT$_LAX        = 00000020            
SS$_RADRMOD    = 0000044C            TT$C_BAUD_300  = 00000006            TT$_UNKNOWN    = 00000000            
SS$_REJECT     = 00000294            TT$C_BAUD_3600 = 0000000C            TT$_VT05       = 00000001            
SS$_REMOTE     = 00000649            TT$C_BAUD_4800 = 0000000D            TT$_VT52       = 00000040            
SS$_RESIGNAL   = 00000918            TT$C_BAUD_50   = 00000001            TT$_VT55       = 00000041            
SS$_RESULTOVF  = 00000214            TT$C_BAUD_600  = 00000007            TT$_VT5X       = 00000040            
SS$_ROPRAND    = 00000454            TT$C_BAUD_7200 = 0000000E            TTCHAN           00000858 RG    02   
SS$_SECTBLFUL  = 0000021C            TT$C_BAUD_75   = 00000002            TTNAME           0000085A RG    02   
SS$_SSFAIL     = 0000045C            TT$C_BAUD_9600 = 0000000F            TYPESTR          00000973 R     02   
SS$_SUBRNG     = 000004AC            TT$M_ALTRPAR   = 00000020            UPTIME           00000748 RG    04   
SS$_SUPERSEDE  = 00000631            TT$M_CRFILL    = 00000400            USERDCB          ********   X   02   
SS$_TAPEPOSLOST= 00000224            TT$M_EIGHTBIT  = 00008000            USRCPUTIM        0000091C RG    02   
SS$_TBIT       = 00000464            TT$M_ESCAPE    = 00000008            USRDIRIO         00000924 RG    02   
SS$_TIMEOUT    = 0000022C            TT$M_HOLDSCREEN= 00004000            USRPAGEFLTS      00000928 RG    02   
SS$_TOOMANYVER = 00000990            TT$M_HOSTSYNC  = 00000010            VAL1             0000086C R     02   
SS$_TOOMUCHDATA= 0000029C            TT$M_LFFILL    = 00000800            VAL2             000008C4 R     02   
SS$_UNASEFC    = 00000234            TT$M_LOWER     = 00000080            VHIST            0000032C RG    04   
SS$_UNSAFE     = 0000023C            TT$M_MBXDSABL  = 00010000            VT55CWIDTH     = 0000004A  G         
SS$_UNWIND     = 00000920            TT$M_MECHTAB   = 00000100            VT55HEIGHT     = 000000EC            
SS$_UNWINDING  = 00000928            TT$M_NOBRDCST  = 00020000            VT55RSP          00000975 R     02   
SS$_VASFULL    = 00000244            TT$M_NOECHO    = 00000002            VT55SET          0000015E R     04   
SS$_VECINUSE   = 0000024C            TT$M_NOTYPEAHD = 00000004            VT55WIDTH      = 00000200            
SS$_VOLINV     = 00000254            TT$M_ODD       = 00000080            VT55XINCR        00000918 RG    02   
SS$_WAITUSRLBL = 00000950            TT$M_PAGE      = FE000000            VTHEIGHT       = 00000018  G         
SS$_WASCLR     = 00000001            TT$M_PARITY    = 00000040            VTTYPE           00000914 RG    02   
SS$_WASECC     = 00000639            TT$M_PASSALL   = 00000001            VTWIDTH        = 00000050  G         
SS$_WASSET     = 00000009            TT$M_READSYNC  = 00040000            V_CYCLEMODE    = 00000001            
SS$_WRITLCK    = 0000025C            TT$M_REMOTE    = 00002000            V_FIRSTTIME    = 00000000            
SS$_WRONGACP   = 0000031C            TT$M_SCOPE     = 00001000            
STARTIME         00000798 R     02   TT$M_SCRIPT    = 00000040            
STARTPOS       = 00000032            TT$M_TTSYNC    = 00000020            
START_XPOS     = 00000026            TT$M_WRAP      = 00000200            
STATEDCB         ********   X   02   TT$S_PAGE      = 00000008            
STATS            000007B8 R     02   TT$V_ALTRPAR   = 00000005            
STRTMSG          0000094F R     02   TT$V_CRFILL    = 0000000A            
SUM              00000808 R     02   TT$V_EIGHTBIT  = 0000000F            
SYS$ASSIGN       ********   X   04   TT$V_ESCAPE    = 00000003            
SYS$CANTIM       ********   X   04   TT$V_HOLDSCREEN= 0000000E            
SYS$CMEXEC       ********   X   04   TT$V_HOSTSYNC  = 00000004            
SYS$CMKRNL       ********   X   04   TT$V_LFFILL    = 0000000B            
SYS$EXIT         ********   X   04   TT$V_LOWER     = 00000007            
SYS$FAOL         ********   X   04   TT$V_MBXDSABL  = 00000010            
SYS$QIOW         ********   X   04   TT$V_MECHTAB   = 00000008            
SYS$SETIMR       ********   X   04   TT$V_NOBRDCST  = 00000011            
SYS$WAITFR       ********   X   04   TT$V_NOECHO    = 00000001            
SYSFAULTS        00000794 RG    02   TT$V_NOTYPEAHD = 00000002            
SYSINTRVL        000007A8 RG    02   TT$V_ODD       = 00000007            
DISPLAY         - STARLET PERFORMANCE DISPLAY PROGRAM            21-AUG-1978 22:35:04   VAX-11 MACRO X0.3-11               Page  54
PROGRAM SECTION SYNOPSIS                                                                                                        (25)



PROGRAM SECTION SYNOPSIS

.  ABS  .        00000000      00     NOPIC   USR   CON   ABS   LCL NOSHR NOEXE NORD  NOWRT BYTE  
. BLANK .        00000000      01     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT BYTE  
DSPDATA          00000978      02     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD    WRT QUAD  
$ABS$            0000011C      03     NOPIC   USR   CON   ABS   LCL NOSHR   EXE   RD    WRT BYTE  
DSPCODE          00000879      04     NOPIC   USR   CON   REL   LCL NOSHR   EXE   RD  NOWRT BYTE  


THERE WERE NO ERRORS OR WARNINGS.
2906. BYTES LEFT IN FREE MEMORY POOL.
34. BYTES OF RECLAIMED MEMORY.
OBJ$:DISPLAY,LIS$:DISPLAY/-SP=EXECML$/ML,LIB$:DSPLIB/ML,SRC$:DISPLAY
106 MLB DIR RDS - 1244 GETS TO DEFINE 45 MACROS. 107 INTER. FILE WRITES. 
