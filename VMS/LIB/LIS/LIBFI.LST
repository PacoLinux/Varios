FORMAT	MACRO M1110  22-AUG-78 02:11
TABLE OF CONTENTS

     1-  300	OBJECT LANGUAGE DEFS
FORMAT	MACRO M1110  22-AUG-78 02:11  PAGE 1


    100						.TITLE	FORMAT
    200						.IDENT	/X0300/
    300						.SBTTL	OBJECT LANGUAGE DEFS
FORMAT	MACRO M1110  22-AUG-78 02:11  PAGE 3


      1					; COPYRIGHT (C) 1976, 1977
      2					; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
      3					;
      4					; THIS SOFTWARE IS FURNISHED UNDER  A LICENSE FOR USE ONLY  ON  A
      5					; SINGLE COMPUTER SYSTEM AND MAY BE  COPIED ONLY WITH  THE INCLU-
      6					; SION OF  THE  ABOVE  COPYRIGHT NOTICE.  THIS SOFTWARE,  OR  ANY
      7					; OTHER COPIES THEREOF, MAY NOT BE  PROVIDED  OR  OTHERWISE  MADE
      8					; AVAILABLE TO ANY OTHER PERSON EXCEPT  FOR  USE  ON  SUCH SYSTEM
      9					; AND TO  ONE WHO AGREES  TO  THESE LICENSE  TERMS.  TITLE TO AND
     10					; OWNERSHIP OF THE SOFTWARE SHALL AT ALL TIMES REMAIN IN DEC.
     11					;
     12					; THE INFORMATION IN THIS SOFTWARE  IS  SUBJECT TO CHANGE WITHOUT
     13					; NOTICE AND SHOULD NOT BE CONSTRUED  AS  A COMMITMENT BY DIGITAL
     14					; EQUIPMENT CORPORATION.
     15					;
     16					; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF ITS
     17					; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
LIBFI	MACRO M1110  22-AUG-78 02:11  PAGE 4


      1						.TITLE	LIBFI
      2						.IDENT	/03/
      3
      4					; COPYRIGHT (C) 1976, 1977
      5					; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
      6					;
      7					; THIS SOFTWARE IS FURNISHED UNDER  A LICENSE FOR USE ONLY  ON  A
      8					; SINGLE COMPUTER SYSTEM AND MAY BE  COPIED ONLY WITH  THE INCLU-
      9					; SION OF  THE  ABOVE  COPYRIGHT NOTICE.  THIS SOFTWARE,  OR  ANY
     10					; OTHER COPIES THEREOF, MAY NOT BE  PROVIDED  OR  OTHERWISE  MADE
     11					; AVAILABLE TO ANY OTHER PERSON EXCEPT  FOR  USE  ON  SUCH SYSTEM
     12					; AND TO  ONE WHO AGREES  TO  THESE LICENSE  TERMS.  TITLE TO AND
     13					; OWNERSHIP OF THE SOFTWARE SHALL AT ALL TIMES REMAIN IN DEC.
     14					;
     15					; THE INFORMATION IN THIS SOFTWARE  IS  SUBJECT TO CHANGE WITHOUT
     16					; NOTICE AND SHOULD NOT BE CONSTRUED  AS  A COMMITMENT BY DIGITAL
     17					; EQUIPMENT CORPORATION.
     18					;
     19					; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF ITS
     20					; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
     21					;
     22					; VERSION 03
     23					;
     24					; WRITTEN BY:
     25					;	GEORGE W. BERRY
     26					;
     27					; MODIFIED BY:
     28					;	C.A. D'ELIA	08-MAY-74
     29					;	C.A. D'ELIA	29-JUN-74  (VIRTUAL TABLES)
     30					;
     31					;
     32					; LOCAL DATA
     33					;
     34	000000	000000 			LINK:	.WORD	0		;LAST LINK ADDR
     35
     36					;+
     37					; **-$FINDA-*- ALPHABETIC TABLE SEARCH
     38					;
     39					; THIS ROUTINE IS USED TO SEARCH EITHER THE EPT OR THE MNT TABLES.
     40					; IT PERFORMS AN ALPHABETICAL SEARCH, FAILING EITHER AT THE END
     41					; OF THE TABLE OR UPON ENCOUNTERING AN ITEM THAT IS GREATER THAN
     42					; THE ITEM FOR WHICH THE TABLE IS BEING SEARCHED.  AN ALTERNATE
     43					; ERROR CONDITION ARISES WHEN THE ITEM DOES NOT FIT INTO THE LEGAL
     44					; BOUNDS OF THE TABLE, IE. THE TABLE HAS NULL LENGTH OR THE ITEM
     45					; IS LARGER THAN THE MAXIMUM RADIX-50 VALUE.
     46					;
     47					; INPUTS:
     48					;
     49					;+++STAR 	R0 = POINTER TO THE NAME TO BE MATCHED
     50					; 	R2 = ADDR OF TABLE DESCRIPTOR BLOCK
     51					;
     52					; OUTPUTS:
     53					;
     54					; 	C-BIT CLEAR (MATCH FOUND)
     55					;		R0 = ADDR OF MATCH
     56					;		R1 = VIRTUAL LOCN OF MATCH
     57					;
LIBFI	MACRO M1110  22-AUG-78 02:11  PAGE 4-1


     58					;	- OR -
     59					;
     60					;	C-BIT SET & R2 ZERO (MATCH NOT FOUND)
     61					;		R0 = ADDR OF LINK TO SLOT
     62					;		R1 = VIRTUAL LOCN OF LINK TO SLOT
     63					;
     64					;	- OR -
     65					;
     66					;	C-BIT SET & R2 NON-ZERO (NOT WITHIN TABLE BOUNDS)
     67					;
     68					;+++STAR THIS ROUTINE WAS REWRITTEN FOR STAR SOFTWARE
     69					;-
     70
     71	000002				$FINDA::
     72	000002					SAVRG			;SAVE R3-R5
     73	000006	010005 				MOV	R0,R5		;SAVE POINTER TO NAME
     74	000010	016267 	000002 	000000G		MOV	2(R2),$HDLST	;GET ADDR OF TABEL LIST HEADS
     75	000016	005003 				CLR	R3		;INITIAL OFFSET IS ZERO
     76	000020	010746 				MOV	PC,-(SP)	;SET STATUS TO BOUNDS ERROR FAILURE
     77	000022	005762 	000004 			TST	4(R2)		;CHECK TABEL LENGTH
     78	000026	001471 				BEQ	ERRXIT		;BR IF NULL - TABLE BOUND ERROR
     79	000030				5$:
     80	000030	126563 	000001 	000000G		CMPB	1(R5),$PARTD(R3);COMP 1ST CHAR OF NAME WITH PARTN LIMIT
     81	000036	101406 				BLOS	7$		;BR IF CORRECT PARTITION
     82	000040	062703 	000002 			ADD	#2,R3		;ELSE UPDATE LIST OFFSET
     83	000044	020327 	000000C			CMP	R3,#<NU$PAR*2>-2 ;COMPARE OFFSET WITH MAX NUMBER
     84	000050	003060 				BGT	ERRXIT		;BR IF TOO HIGH - BOUND ERROR
     85	000052	000766 				BR	5$		;CHECK NEXT PARTITION LIMIT
     86	000054				7$:
     87	000054	016700 	000000G			MOV	$HDLST,R0	;PUT ADDR OF PATITION LIST
     88	000060	060300 				ADD	R3,R0		;  HEAD IN R0
     89	000062	005001 				CLR	R1		;FORCE VIRTUAL LOCATION 0 FOR A LIST HEAD
     90	000064				10$:
     91	000064	005710 				TST	(R0)		;END OF LIST
     92	000066	001450 				BEQ	MATERR		;BR IF NULL - MATCH ERROR
     93	000070	010016 				MOV	R0,(SP)		;SAVE LINK ADDR ON STACK
     94	000072	010167 	177702 			MOV	R1,LINK		;SAVE LINK VIRTUAL LOCN
     95	000076	001402 				BEQ	20$		;BR IF LINK IS LIST HEAD
     96	000100					CALL	$LCKPG		;ELSE LOCK PAGE CONTAINING LINK
     97	000104				20$:
     98	000104	011001 				MOV	(R0),R1		;VIRT LOCATION OF NEXT LINK IN R1
     99	000106					CALL	$CVRL		;REAL MEMORY ADDR IN R0
    100	000112	016701 	177662 			MOV	LINK,R1		;PUT VIRT LOCN OF LAST LINK IN R1
    101	000116	001402 				BEQ	30$		;BR IF LIST HEAD
    102	000120					CALL	$UNLPG		;ELSE UNLOCK PAGE CONTAINING LAST LINK
    103	000124				30$:
    104	000124	017601 	000000 			MOV	@(SP),R1	;RESTORE VIRT LOCATION OF NEXT ELEMENT
    105	000130	010002 				MOV	R0,R2		;COPY ENTRY POINTER TO MODIFY
    106	000132	062702 	000006 			ADD	#T$SMBL+V$MEML,R2 ;POINT IT AT NAME
    107	000136	010504 				MOV	R5,R4		;COPY POINTER TO MODIFY
    108	000140	122422 				CMPB	(R4)+,(R2)+	;GET THE
    109	000142	101003 				BHI	40$		;  SMALLER LENGTH
    110	000144	116403 	177777 			MOVB	-1(R4),R3	;    OF THE
    111	000150	000402 				BR	50$		;      TWO
    112	000152				40$:
    113	000152	116203 	177777 			MOVB	-1(R2),R3	;        STRINGS
    114	000156				50$:
LIBFI	MACRO M1110  22-AUG-78 02:11  PAGE 4-2


    115	000156	122422 				CMPB	(R4)+,(R2)+	;CHAR MATCH
    116	000160	101341 				BHI	10$		;BR IF HIGH - LOOK FURTHER
    117	000162	103407 				BLO	SLOT		;BR IF LOW - FOUND SLOT
    118	000164					SOB	R3,50$		;LOOP TIL DONE
    119	000170	126015 	000006 			CMPB	T$SLEN+V$MEML(R0),(R5) ;FIND WHICH ONE WAS SMALLER
    120	000174	001407 				BEQ	EXIT		;FOUND SYM - LEAVE WITH C-BIT CLEAR
    121	000176	103732 				BLO	10$		;BR IF TABLED ENTRY SMALLER - LOOK AGAIN
    122	000200	000400 				BR	SLOT		;NEW NAME LESS THAN TABLED - FOUND SLOT
    123	000202				SLOT:
    124	000202	011600 				MOV	(SP),R0		;PUT ADDR OF LINK TO SLOT IN R0
    125	000204	016701 	177570 			MOV	LINK,R1		;PUT VIRT LOCATION IN R1
    126	000210				MATERR:
    127	000210	005016 				CLR	(SP)		;SET STATUS TO NO MATCH FOUND
    128	000212				ERRXIT:
    129	000212	000261 				SEC			;SET C-BIT TO INDICATE FAILURE
    130	000214				EXIT:
    131	000214	012602 				MOV	(SP)+,R2	;SET SUPPLEMENTAL FAILURE STATUS IN R2
    132	000216					RETURN
    133
    134					;+
    135					; **-$FINDC-*- CONTINUOUS ASSOCIATIVE SEARCH
    136					; **-$FINDN-*- RE-ENTRY FOR CONTINUOUS ASSOCIATIVE SEARCH
    137					;
    138					; THIS ROUTINE PERFORMS A SEARCH OF EITHER THE EPT OR MNT TABLES.
    139					; A MATCH MUST BE MADE ON THE DATA FIELDS OF THE TABLE ENTRIES.
    140					; THE CALLER MUST INITIALLY ENTER AT '$FINDC'.  IF THAT SUCCEEDS,
    141					; REQUESTS TO FIND THE NEXT MATCH MUST BE 6DE TO '$FINDN'.  THE
    142					; FAILURE CONDITION ARISES WHEN A MATCH IS NOT FOUND BETWEEN THE
    143					; CURRENT POSITION IN THE TABLE AND THE END OF THE TABLE.
    144					;
    145					; INPUTS: (FOR '$FINDC' ONLY)
    146					;
    147					;	R0 - VIRTUAL BLOCK NUMBER AND
    148					;	R1 -   BYTE IN BLOCK TO MATCH
    149					;	R2 = ADDR OF TABLE DESCRIPTOR BLOCK
    150					;
    151					; OUTPUTS: (FOR BOTH)
    152					;
    153					;	C-BIT CLEAR (MATCH FOUND)
    154					;		R0 = ADDR OF MATCH
    155					;		R1 = VIRTUAL LOCN OF MATCH
    156					;
    157					;	- OR -
    158					;
    159					;	C-BIT SET (MATCH NOT FOUND)
    160					;
    161					;-
    162
    163						.ENABL	LSB
    164
    165	000220				$FINDC::SAVRG			;SAVE R3-R5
    166	000224	010004 				MOV	R0,R4		;COPY DATA TO BE MATCHED INTO ...
    167	000226	010105 				MOV	R1,R5		;... R4-R5
    168	000230	016200 	000002 			MOV	2(R2),R0	;PUT ADDR OF FIRST LIST HEAD IN R0
    169	000234	010067 	000000G			MOV	R0,$HDLST	;AND SAVE THE ADDR
    170	000240	005003 				CLR	R3		;INITIAL OFFSET INTO LIST IS ZERO
    171
LIBFI	MACRO M1110  22-AUG-78 02:11  PAGE 4-3


    172	000242				10$:	CALL	ASCSCH		;PERFORM THE ASSOCIATIVE SEARCH
    173	000246	103407 				BCS	20$		;LEAVE IF MATCH NOT FOUND
    174	000250	012702 	000000G			MOV	#SR0,R2		;GET ADDR OF REGISTER SAVE AREA
    175	000254	010022 				MOV	R0,(R2)+	;SAVE REGISTERS NECESSARY ...
    176	000256	010122 				MOV	R1,(R2)+	;... TO CONTINUE THE SEARCH
    177	000260	010322 				MOV	R3,(R2)+	;
    178	000262	010422 				MOV	R4,(R2)+	;
    179	000264	010522 				MOV	R5,(R2)+	;
    180	000266				20$:	RETURN
    181
    182
    183	000270				$FINDN::SAVRG			;SAVE R3-R5
    184	000274	012702 	000000G			MOV	#SR0,R2		;GET ADDR OF REGISTER SAVE AREA
    185	000300	012200 				MOV	(R2)+,R0	;RESTORE REGISTERS NECESSARY ...
    186	000302	012201 				MOV	(R2)+,R1	;... TO CONTINUE THE SEARCH
    187	000304	012203 				MOV	(R2)+,R3	;
    188	000306	012204 				MOV	(R2)+,R4	;
    189	000310	012205 				MOV	(R2)+,R5	;
    190	000312	000753 				BR	10$		;BRANCH INTO COMMON SEARCH CODE
    191
    192						.DSABL	LSB
    193
    194
    195	000314	011001 			ASCSCH:	MOV	(R0),R1		;GET VIRTUAL LOCN OF NEXT ENTRY
    196	000316	001011 				BNE	10$		;BRANCH IF LINK IS NOT NULL
    197	000320	062703 	000002 			ADD	#2,R3		;ELSE, UPDATE THE LIST HEAD OFFSET
    198	000324	020327 	000000C			CMP	R3,#<NU$PAR*2>-2  ;COMPARE WITH MAXIMUM
    199	000330	003015 				BGT	20$		;ERROR-- END OF TABLE FOUND
    200	000332	016700 	000000G			MOV	$HDLST,R0	;POINT R0 TO NEXT LIST HEAD
    201	000336	060300 				ADD	R3,R0		;
    202	000340	000765 				BR	ASCSCH		;SEARCH THE NEXT PARTITION
    203	000342				10$:	CALL	$CVRL		;OBTAIN REAL ADDR OF ENTRY IN R0
    204	000346	020460 	000002 			CMP	R4,T$HEAD+V$MEML(R0) ;+++STAR TRY TO MATCH FIRST WORDS OF DATA
    205	000352	001360 				BNE	ASCSCH		;LOOK FURTHER IN LIST
    206	000354	020560 	000004 			CMP	R5,T$HEAD+2+V$MEML(R0) ;+++STAR TRY TO MATCH LAST WORDS OF DATA
    207	000360	001355 				BNE	ASCSCH		;LOOK FURTHER IN LIST
    208	000362	000401 				BR	25$		;MATCH--C-BIT IS CLEAR
    209
    210	000364	000261 			20$:	SEC			;FAILURE, SET C-BIT
    211	000366				25$:	RETURN
    212
    213
    214		000001 				.END
LIBFI	MACRO M1110  22-AUG-78 02:11  PAGE 4-4
SYMBOL TABLE

ASCSCH  000314R  	MH$MTC= 000005   	PF$OVL= 000004   	SF$REL= 000010   	TIRMAX= 000121
CTLGRP= 000120   	MH$SRC= 000002   	PF$PIC= 000001   	SF$UNI= 000004   	T$CHAR= 000005
EOM$MX= 000007   	MH$TTL= 000003   	PF$RD = 000200   	SF$VAL= 000020   	T$HEAD= 000000
ERRXIT  000212R  	MTC$MX= 000213   	PF$REL= 000010   	SF$WK = 000001   	T$SLEN= 000004
EXIT    000214R  	M$HDMS  000003      003	PF$SHR= 000040   	SLOT    000202R  	T$SMBL= 000004
E$OMAD  000003      012	M$HDNM  000005      003	PF$UNI= 000002   	SRF$MX= 000025   	V$MEML= 000002
E$OMER  000001      012	M$HDSL  000002      003	PF$WRT= 000001   	SR0   = ****** GX	$     = 000000      012
E$OMPS  000002      012	M$HDST  000001      003	PF$XEQ= 000100   	STAGRP= 000000   	$CVRL = ****** GX
GS$ARG= 000003   	M$TCPN  000002      004	PSD$MX= 000031   	STOGRP= 000024   	$FINDA  000002RG
GS$EPM= 000002   	NU$PAR= ****** GX	P$SALI  000002      006	S$DNAM  000013      011	$FINDC  000220RG
GS$PSC= 000000   	OBJ$SL= 000000   	P$SALO  000005      006	S$DNLN  000012      011	$FINDN  000270RG
GS$SYM= 000001   	OB$DBG= 000004   	P$SFL0  000003      006	S$DPSI  000005      011	$HDLST= ****** GX
G$SDTY  000001      005	OB$EOM= 000003   	P$SFL1  000004      006	S$DVAL  000006      011	$LCKPG= ****** GX
LINK    000000R  	OB$GSD= 000001   	P$SNAM  000012      006	S$MXLN= 000017   	$PARTD= ****** GX
MATERR  000210R  	OB$HDR= 000000   	P$SNLN  000011      006	S$RNAM  000006      010	$SAVRG= ****** GX
MAXALI= 000011   	OB$LNK= 000005   	Q$$CMO= 000000   	S$RNLN  000005      010	$UNLPG= ****** GX
MHD$MX= 000111   	OB$TIR= 000002   	R$MXLN= 001000   	S$SDTY  000002      007	$$    = 000001
MH$CPY= 000004   	OPRGRP= 000062   	R$$11M= 000000   	S$SFL0  000003      007	$$S   = 000005
MH$GTX= 000006   	O$BJTY  000000      002	SDF$MX= 000032   	S$SFL1  000004      007	$$0   = 000002
MH$LNM= 000001   	PAGALI= 000011   	SF$DEF= 000002   	S$$LIB= 000000   	$$1   = 000002
MH$MHD= 000000   	PF$GBL= 000020

. ABS.	000000	   000
      	000370	   001
OBJREC	000001	   002
MHDREC	000111	   003
MTCREC	000213	   004
GSDREC	000002	   005
PSDEF 	000031	   006
SYMBOL	000005	   007
SYMREF	000025	   010
SYMDEF	000032	   011
EOMREC	000007	   012
ERRORS DETECTED:  0

VIRTUAL MEMORY USED:  1023 WORDS  ( 4 PAGES)
DYNAMIC MEMORY:  2772 WORDS  ( 10 PAGES)
ELAPSED TIME:  00:00:08
OBJ$:LIBFI,LIS$:LIBFI/-SP=SRC$:NEWFORMAT.,LIBPRE,LIBFI
