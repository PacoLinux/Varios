P6STB	MACRO M1110  22-AUG-78 01:57  PAGE 3


      1						.TITLE	P6STB
      2						.IDENT	/17/
      3					;                                                                               ;**-1
      4					;
      5					; COPYRIGHT (C) 1977
      6					; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
      7					;
      8					; THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR USE ONLY ON A
      9					; SINGLE COMPUTER SYSTEM AND MAY  BE  COPIED   ONLY  WITH  THE
     10					; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE,  OR
     11					; ANY OTHER COPIES THEREOF, MAY NOT BE PROVIDED  OR  OTHERWISE
     12					; MADE AVAILABLE TO ANY OTHER PERSON   EXCEPT FOR  USE ON SUCH
     13					; SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE  TERMS.  TITLE
     14					; TO AND OWNERSHIP OF THE SOFTWARE SHALL AT ALL  TIMES  REMAIN
     15					; IN DEC.
     16					;
     17					; THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
     18					; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
     19					; EQUIPMENT CORPORATION.
     20					;
     21					; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF
     22					; ITS SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
     23					;
     24					; VERSION 17
     25					;                                                                               ;**-1
     26					; D. N. CUTLER/C. MONIA	21-JAN-74
     27					;
     28					; MODIFICATIONS:
     29					;
     30					; NO.		DATE		PROGRAMMER
     31					; ---		----		----------
     32					;
     33					; 038		22-MAR-75	C. MONIA
     34					; 058		11-APR-76	C. MONIA
     35					; 062		31-MAY-76	C. MONIA
     36					; 065		06-JUL-76	C. MONIA
     37					; JAK111	17-NOV-77	CHANGE FOR RE-ENTRANT TASKS
     38					;
     39					;
     40					; SYMBOL TABLE OUTPUT
     41					;
     42					; EQUATED SYMBOLS
     43					;
     44					; COMPLEX RELOCATION COMMANDS
     45					;
     46
     47		000001 			CMPADD=1			; ADDITION
     48		000005 			CMPAND=5			; LOGICAL AND
     49		000004 			CMPDIV=4			; DIVISION
     50		000020 			CMPFTC=20			; FETCH CONSTANT
     51		000021 			CMPFTL=21			; FETCH LIBRARY RELOCATION BIAS
     52		000012 			CMPSTO=12			; STORE RESULT
     53
     54					;
     55					; GSD ENTRY FORMAT
     56					;
     57
P6STB	MACRO M1110  22-AUG-78 01:57  PAGE 3-1


     58	000000					.DSECT
     59
     60	000000				GSDNM:	.BLKW	2		; RADIX-50 NAME
     61	000004				GSDFL:	.BLKB	1		; FLAGS BYTE
     62	000005				GSDTP:	.BLKB	1		; TYPE CODE
     63	000006				GSDVL:	.BLKW	1		; VALUE WORD
     64
     65
     66					;
     67					; GSD ENTRY TYPES
     68					;
     69
     70		000006 			IDNTYP=6			;IDENTIFICATION
     71		000005 			SECTYP=5			;P-SECTION NAME
     72		000004 			SYMTYP=4			;SYMBOL NAME
     73		000000 			TTLTYP=0			;MODULE NAME
     74
     75					;
     76					; OBJECT FILE BLOCK TYPES
     77					;
     78
     79		000001 			GSDSTR=1			;GSD START
     80		000002 			GSDEND=2			;GSD END
     81		000006 			MODEND=6			;MODULE END
     82		000004 			RLDIR=4				; RELOCATION DIRECTIVE
     83		000003 			TXTREC=3			; TEXT STRING
     84
     85					;
     86					; RLD RECORD TYPES
     87					;
     88
     89		000017 			CMPLX=17			; COMPLEX RELOCATION
     90		000005 			GBLADD=5			; GLOBAL ADDITIVE
     91		000020 			LIBADD=20			; RESIDENT LIBRARY ADDITIVE
     92		000007 			LOCDEF=7			; LOCATION COUNTER DEFINITION
     93		000015 			SECADD=15			; P-SECTION ADDITIVE
     94
     95
     96					;
     97					; MACRO LIBRARY CALLS
     98					;
     99
    100						.MCALL	CLOSE$,OFNB$W,PUT$S
    101
    102					;
    103					; LOCAL DATA
    104					;
    105					; AUTOLOAD VECTOR TEXT AND RLD TEMPLATES
    106					;
    107					; ADJACENCY REQUIRED
    108					;
    109
    110	000000					.PSECT
    111
    112						.ENABL	LSB
    113
    114	000000	000004 			ALRLD0:	.WORD	RLDIR		; RLD RECORD TYPE
P6STB	MACRO M1110  22-AUG-78 01:57  PAGE 3-2


    115	000002	000007 				.WORD	LOCDEF		; SET LOCATION COUNTER
    116	000004	126371 	047163 			.RAD50	/$$ALVC/	; AUTOLOAD SECTION
    117	000010	000000 				.WORD	0		; OFFSET INTO SECTION IS ZERO
    118	000012	000003 			ALTXT:	.WORD	TXTREC		; AUTOLOAD TEXT TEMPLATE
    119	000014					.BLKW	1		; OFFSET FROM BASE OF SECTION
    120	000016	004737 	000000 		10$:	JSR	PC,@#0		; TRANSFER OF CONTROL INSTRUCTION
    121	000022	000046'			20$:	.WORD	40$		; ADDRESS OF SEGMENT DESCRIPTOR
    122	000024	000052'			30$:	.WORD	ALVAL		; ADDRESS OF SYMBOL
    123	000026	000004 			ALRLD1:	.WORD	RLDIR		; START OF AUTOLOAD VECTOR RLD
    124	000030	   005 				.BYTE	GBLADD		; GLOBAL ADDITIVE RELOCATION
    125	000031	   006 				.BYTE	<10$+2>-ALTXT	; DISPLACEMENT INTO TEXT RECORD
    126	000032	124375 	077530 			.RAD50	/$AUTO/		; AUTOLOAD ENTRY POINT
    127	000036	000000 				.WORD	0		; DISPLACEMENT OF ZERO
    128	000040	   015 				.BYTE	SECADD		; SECTOR ADDITIVE RELOCATION
    129	000041	   010 				.BYTE	20$-ALTXT	; OFFSET INTO TEXT RECORD
    130	000042	126413 	026177 			.RAD50	/$$SGD1/	; NAME OF SECTION CONTAINING DESCRIPTOR
    131	000046				40$:	.BLKW	1		; OFFSET INTO SECTION
    132	000050				ALRLD2:	.BLKB	1		; SYMBOL RLD TEMPLATE
    133	000051	   012 				.BYTE	30$-ALTXT	; OFFSET INTO TEXT RECORD
    134	000052				ALVAL:	.BLKW	2		; SYMBOL OFFSET INTO LIBRARY
    135	000056	000000 				.WORD	0		; OFFSET INTO SECTION
    136	000060				ALRLD3:	.BLKW	0		; LENGTH OF RLD RECORD
    137
    138					;
    139					; REGION DESCRIPTOR TEXT AND RLD
    140					;
    141					; ADJACENCY REQUIRED
    142					;
    143
    144						.ENABL	LSB
    145
    146	000060	000004 			REGRL0:	.WORD	RLDIR		; INITIAL RELOCATION DIRECTIVE
    147	000062	000007 				.WORD	LOCDEF		; SET LOCATION COUNTER TO REGION SECTION
    148	000064	126412 	026163 			.RAD50	/$$RGDS/	; ADDRESS OF REGION DESCRIPTOR
    149	000070	000000 				.WORD	0		; OFFSET=0
    150	000072	000003 			REGTXT:	.WORD	TXTREC		; REGION DESCRIPTOR TEXT
    151	000074	000000 				.WORD	0		; OFFSET MUST BE ZERO
    152	000076	000000 				.WORD	0		; REGION IDENTIFICATION
    153	000100					.BLKW	1		; REGION SIZE
    154	000102				REGTX0:	.BLKW	2		; REGION NAME
    155	000106				REGTX1:	.BLKW	2		; NAME OF PARTITION
    156	000112	000000 				.WORD	0		; REGION STATUS
    157	000114	000000 				.WORD	0		; REGION PROTECTION
    158	000116	000000 				.WORD	0		; OVERLAY RUNTIME FLAGS
    159	000120				REGTX2:	.BLKW	0		; END OF REGION DESCRIPTOR
    160
    161						.DSABL	LSB
    162
    163					;
    164					; SEGMENT DESCRIPTOR TEXT AND RLD
    165					;
    166					; ADJACENCY REQUIRED
    167					;
    168
    169						.ENABL	LSB
    170
    171	000120	000004 			SEGRL0:	.WORD	RLDIR		; INITIAL RLD
P6STB	MACRO M1110  22-AUG-78 01:57  PAGE 3-3


    172	000122	000007 				.WORD	LOCDEF		; SET LOCATION COUNTER
    173	000124	126413 	026177 			.RAD50	/$$SGD1/	; SEGMENT DESCRIPTOR SECTION
    174	000130	000000 				.WORD	0		; OFFSET OF ZERO
    175	000132	000003 			SEGTXT:	.WORD	TXTREC		; SEGMENT DESCRIPTOR TEXT
    176	000134				SEGOFF:	.BLKW	1		; OFFSET INTO SECTION
    177	000136				SEGDES:	.BLKW	1		; FLAGS AND DISK ADDRESS
    178	000140	000164'			SEGVAD:	.WORD	50$		; SEGMENT VIRTUAL ADDRESS
    179	000142					.BLKW	1		; LENGTH OF SEGMENT (BYTES)
    180	000144	000174'			10$:	.WORD	60$		; LINK-UP
    181	000146	000204'			20$:	.WORD	70$		; LINK-DOWN
    182	000150	000214'			30$:	.WORD	80$		; LINK-NEXT
    183	000152					.BLKW	2		; SEGMENT NAME
    184	000156	000224'			40$:	.WORD	90$		; ADDRESS OF WINDOW DESCRIPTOR
    185	000160	000004 			SEGRL1:	.WORD	RLDIR		; RELOCATION DIRECTIVE
    186	000162	   020 				.BYTE	LIBADD		; LIBRARY ADDITIVE
    187	000163	   006 				.BYTE	SEGVAD-SEGTXT	; DISPLACEMENT INTO TEXT RECORD
    188	000164				50$:	.BLKW	1		; OFFSET OF SEGMENT
    189	000166	   015 				.BYTE	SECADD		; SECTION ADDITIVE RELOCATION
    190	000167	   012 				.BYTE	10$-SEGTXT	; OFFSET INTO TEXT RECORD
    191	000170					.BLKW	2		; NAME OF SEGMENT DESCIPTOR SECTION
    192	000174				60$:	.BLKW	1		; OFFSET TO LINK-UP
    193	000176	   015 				.BYTE	SECADD		; SECTOR ADDITIVE RELOCATION
    194	000177	   014 				.BYTE	20$-SEGTXT	; OFFSET INTO TEXT RECORD
    195	000200					.BLKW	2		; NAME OF SEGMENT DESCRIPTOR SECTION
    196	000204				70$:	.BLKW	1		; OFFSET TO LINK-NEXT
    197	000206	   015 				.BYTE	SECADD		; SECTOR ADDITIVE RELOCATION
    198	000207	   016 				.BYTE	30$-SEGTXT	; OFFSET INTO TEXT RECORD
    199	000210					.BLKW	2		; NAME OF SEGMENT DESCRIPTOR SECTION
    200	000214				80$:	.BLKW	1		; OFFSET TO LINK DOWN
    201	000216	   015 				.BYTE	SECADD		; SECTOR ADDITIVE RELOCATION
    202	000217	   024 				.BYTE	40$-SEGTXT	; OFFSET INTO RECORD
    203	000220					.BLKW	2		; NAME OF WINDOW DESCRIPTOR SECTION
    204	000224				90$:	.BLKW	1		; OFFSET INTO WINDOW DESCRIPTOR SECTION
    205	000226				SEGRL2:	.BLKW	0		; END OF SEGMENT TEXT AND RLD
    206
    207						.DSABL	LSB
    208
    209					;
    210					; WINDOW DESCRIPTOR TEXT AND RLD
    211					;
    212					; ADJACENCY REQUIRED
    213					;
    214
    215						.ENABL	LSB
    216
    217	000226	000004 			WNDRL0:	.WORD	RLDIR		; INITIAL RELOCATION DIRECTIVE
    218	000230	000007 				.WORD	LOCDEF		; SET LOCATION COUNTER
    219	000232	126417 	054063 			.RAD50	/$$WNDS/	; NAME OF WINDOW DESCRIPTOR SECTION
    220	000236	000000 				.WORD	0		; SECTION BIAS OF ZERO
    221	000240	000003 			WNDTXT:	.WORD	TXTREC		; WINDOW DESCRIPTOR TEXT
    222	000242				WNDOFF:	.BLKW	1		; OFFSET INTO SECTION
    223	000244	000276'			10$:	.WORD	40$		; WINDOW I/D, WINDOW APR
    224	000246	000316'			20$:	.WORD	50$		; WINDOW BASE ADDRESS
    225	000250					.BLKW	1		; WINDOW SIZE
    226	000252	000000 				.WORD	0		; REGION I/D
    227	000254					.BLKW	1		; WINDOW OFFSET INTO REGION
    228	000256	000000 				.WORD	0		; LENGTH TO MAP
P6STB	MACRO M1110  22-AUG-78 01:57  PAGE 3-4


    229	000260					.BLKW	1		; WINDOW STATUS
    230	000262	000000 				.WORD	0		; ADDRESS OF SEND/RECIEVE BUFFER
    231	000264					.BLKW	1		; OVERLAY RUNTIME FLAGS
    232	000266	000000 			30$:	.WORD	0		; REGION BACKPOINTER
    233	000270	000004 			WNDRL1:	.WORD	RLDIR		; REGION RELOCATION DIRECTIVE
    234	000272	   017 				.BYTE	CMPLX		; COMPLEX RELOCATION FOR REGION APR
    235	000273	   004 				.BYTE	10$-WNDTXT	; OFFSET INTO TEXT RECORD
    236	000274	   021 				.BYTE	CMPFTL		; PUSH LIBRARY BIAS
    237	000275	   020 				.BYTE	CMPFTC		; PUSH CONSTANT
    238	000276				40$:	.BLKB	1		; LOW BYTE OF VIRTUAL OFFSET
    239	000277					.BLKB	1		; HIGH BYTE OF VIRTUAL OFFSET
    240	000300	   001 				.BYTE	CMPADD		; ADD VIRTUAL OFFSET TO LIBRARY BASE
    241	000301	   020 				.BYTE	CMPFTC		; PUSH CONSTANT
    242	000302	   040 				.BYTE	32.		; LOW BYTE OF CONSTANT
    243	000303	   000 				.BYTE	0		; HIGH BYTE OF CONSTANT
    244	000304	   004 				.BYTE	CMPDIV		; CONVERT TO NUMBER OF APRS
    245	000305	   020 				.BYTE	CMPFTC		; PUSH MASK
    246	000306	   000 				.BYTE	0		; FIRST HALF OF MASK
    247	000307	   007 				.BYTE	7		; SECOND HALF OF MASK
    248	000310	   005 				.BYTE	CMPAND		; MASK OUT EXTRANEOUS BITS
    249	000311	   012 				.BYTE	CMPSTO		; STORE RESULT
    250	000312				WNDRL2:	.BLKB	0		;
    251
    252						.EVEN
    253
    254	000312	000004 			WNDRL3:	.WORD	RLDIR		; RELOCATION DIRECTIVE
    255	000314	   020 				.BYTE	LIBADD		; LIBRARY ADDITVE RELOCATION
    256	000315	   006 				.BYTE	20$-WNDTXT	; OFFSET TO WINDOW BASE
    257	000316				50$:	.BLKW	1		; WINDOW BASE OFFSET
    258	000320	   015 				.BYTE	SECADD		; SECTOR ADDITIVE RELOCATION
    259	000321	   026 				.BYTE	30$-WNDTXT	; OFFSET TO REGION DESCRIPTOR BACKPOINTER
    260	000322	126412 	026163 			.RAD50	/$$RGDS/	;
    261	000326	000000 				.WORD	0		; OFFSET MUST BE ZERO
    262	000330				WNDRL4:	.BLKW	0		; END OF RLD
    263
    264						.DSABL	LSB
    265
    266
    267	000330				CRSCT:	.BLKW	1		; VIRTUAL ADDRESS OF CURRENT SECTION
    268	000332	000002 			EOGSD:	.WORD	GSDEND		; END-OF-GSD
    269	000334	000006 			EOMOD:	.WORD	MODEND		; END-OF-MODULE
    270	000336				LCLSYM:	.BLKW	10.		; DATA FROM CURRENT SECTION.
    271	000362				PASS:	.BLKW	1		; PASS FLAG
    272	000364	126412 	077770 		RTSNM:	.RAD50	/$$RTS/		; NAME OF 'RTS' SECTION
    273	000370				RTSLOC:	.BLKW	1		; VIRTUAL ADDRESS OF RTS SECTION
    274	000372				SCTLH:	.BLKW	3		; SECTOR SYMBOL EDIT LISTHEAD
    275	000400				SYMLH:	.BLKW	3		; GLOBAL SYMBOL EDIT LISTHEAD
    276	000406	000001 			GSDREC:	.WORD	GSDSTR		; START OF GSD
    277	000410				STBBF:	.BLKW	63.		; GSD RECORD BUFFER
    278	000606				STBSW:	.BLKW	1		; STB FILE SWITCHES
    279
    280					;+
    281					; **-$P6STB-PHASE 6 SYMBOL TABLE OUTPUT
    282					;
    283					; THIS ROUTINE IS CALLED AT THE END OF PHASE 5 TO OUTPUT A SYMBOL
    284					; TABLE FILE. THE FILE IS WRITTEN IN OBJECT MODULE FORMAT SO THAT
    285					; IT MAY BE READ BY THE TASK BUILDER.
P6STB	MACRO M1110  22-AUG-78 01:57  PAGE 3-5


    286					;
    287					; INPUTS:
    288					;
    289					;	NONE.
    290					;
    291					; OUTPUTS:
    292					;
    293					;	SYMBOL TABLE FILE IS WRITTEN.
    294					;-
    295
    296	000610				$P6STB::SAVRG			;SAVE NONVOLITILE REGISTERS
    297	000614	016700 	000000G			MOV	$STBPT,R0	; GET RECORD BLOCK POINTER
    298	000620	010004 				MOV	R0,R4		; SAVE POINTER
    299	000622					CALL	$STRCB		; SETUP OUTPUT FILE
    300	000626	010400 				MOV	R4,R0		; RETRIEVE POINTER
    301	000630					OFNB$W	R0		; OPEN SYMBOL FILE
    302	000642	103007 				BCC	5$		; IF C/C OK
    303	000644	016002 	000000G			MOV	R$NAME(R0),R2	;GET ADDRESS OF NAME STRING
    304	000650	012701 				MOV	(PC)+,R1	;GET ERROR/SEVERITY
    305	000652	   000G	   000G			.BYTE	E$R11,S$V0	;DIAGNOSTIC
    306	000654					CALL	$ERMSG		;OUTPUT ERROR MESSAGE
    307	000660	000507 				BR	30$		; EXIT
    308	000662				5$:				;
    309	000662	016467 	000000G	177716 		MOV	R$SWTH(R4),STBSW ; COPY FILE SWITCH WORD
    310	000670	016701 	000000G			MOV	$RTSEG,R1	; GET VIRTUAL ADDRESS OF ROOT
    311	000674					CALL	$CVLOK		; CONVERT TO REAL, LOCK IN MEMORY
    312	000700	010005 				MOV	R0,R5		; SAVE REAL ADDRESS
    313	000702	012704 	000410'			MOV	#STBBF,R4	; GET ADDRESS OF GSD BUFFER
    314	000706	016524 	000000G			MOV	S$GNME(R5),(R4)+ ; SET MODULE NAME
    315	000712	016524 	000002G			MOV	S$GNME+2(R5),(R4)+ ; ...
    316	000716	012724 	000000 			MOV	#<TTLTYP*400!0>,(R4)+ ; SET RECORD TYPE
    317	000722	005024 				CLR	(R4)+		; CLEAR VALUE FIELD
    318	000724	012700 	000000G			MOV	#$IDENT,R0	; POINT TO IDENT.
    319	000730	012024 				MOV	(R0)+,(R4)+	; SETUP IDENT
    320	000732	011024 				MOV	(R0),(R4)+	; ...
    321	000734	012724 	003000 			MOV	#<IDNTYP*400!0>,(R4)+ ; SET RECORD TYPE
    322	000740	005024 				CLR	(R4)+		; CLEAR VALUE FIELD
    323	000742	105064 	000004 			CLRB	GSDFL(R4)	; CLEAR FLAGS BYTE
    324	000746	005067 	177410 			CLR	PASS		; CLEAR PASS FLAG
    325	000752	032767 	000000G	177626 		BIT	#SW$PI,STBSW	; PIC OUTPUT?
    326	000760	001010 				BNE	10$		; IF NE YES
    327	000762	012703 	000000G			MOV	#$ABSCT,R3	; GET ADDRESS OF ABS SECTION PROTOTYPE
    328	000766					CALL	OUTSEC		; WRITE SECTION INTO STB FILE
    329	000772					CALL	P6STB		; OUTPUT SYMBOL TABLE
    330	000776	005267 	177360 			INC	PASS		; SET FOR SECOND PASS
    331	001002				10$:				;
    332	001002					CALL	P6STB		; OUTPUT SYMBOL TABLE
    333	001006					CALL	FLSH		; FLUSH SYMBOL TABLE BUFFER
    334	001012	012701 	000332'			MOV	#EOGSD,R1	; POINT TO END-OF-GSD TEMPLATE
    335	001016	012702 	000002 			MOV	#2,R2		; GET BYTE COUNT
    336	001022					CALL	PUT		; TERMINATE GSD
    337	001026	026727 	000000G	000001 		CMP	$NUMSG,#1	; TASK OVERLAID?
    338	001034	001403 				BEQ	20$		; IF EQ NO
    339	001036					CALL	P6RLD		; WRITE TEXT, RLD FOR OVERLAY STRUCTURE
    340	001042	000404 				BR	25$		;
    341	001044				20$:				;
    342	001044	016701 	000000G			MOV	$RTSEG,R1	; GET ADDRESS OF ROOT SEGMENT
P6STB	MACRO M1110  22-AUG-78 01:57  PAGE 3-6


    343	001050					CALL	$UNLPG		; UNLOCK PAGE
    344	001054				25$:				;
    345	001054	012701 	000334'			MOV	#EOMOD,R1	; POINT TO END-OF-MODULE TEMPLATE
    346	001060	012702 	000002 			MOV	#2,R2		; SET BYTE COUNT
    347	001064					CALL	PUT		; WRITE END-OF-MODULE RECORD
    348	001070					CLOSE$	$STBPT		;
    349	001100				30$:				;
    350	001100					RETURN			;
    351
    352					;
    353					; OUTPUT OVERLAY DATA BASE IN OBJECT FORMAT
    354					;
    355
    356	001102				P6RLD:				;
    357	001102	012701 	000000C			MOV	#RTSNM-S$YM,R1	; POINT TO AUTOLOAD SEGMENT SECTION
    358	001106	010500 				MOV	R5,R0		; GET ADDRESS OF ROOT SEGMENT
    359	001110	062700 	000000G			ADD	#S$GCST,R0	; POINT TO SECTION TABLE FOR ROOT
    360	001114					CALL	$SRCH		; SEARCH FOR SECTION
    361	001120	010167 	177244 			MOV	R1,RTSLOC	; SAVE ADDRESS OF SECTION
    362	001124	005067 	176664 			CLR	ALTXT+2		; RESET OFFSET INTO AUTOLOAD SECTION
    363	001130	010504 				MOV	R5,R4		; COPY ADDRESS OF ROOT
    364	001132	062704 	000000G			ADD	#S$GATL,R4	; POINT TO AUTOLOAD LIST
    365	001136				10$:				;
    366	001136	011404 				MOV	(R4),R4		; GET ADDRESS OF NEXT AUTOLOAD ENTRY
    367	001140	001475 				BEQ	50$		; IF EQ NO MORE
    368	001142	012703 	000026'			MOV	#ALTXT+2+10+2,R3 ; POINT TO SYMBOL ADDRESS PLUS OFFSET
    369	001146	016401 	000002 			MOV	2(R4),R1	; GET ADDRESS OF REAL SYMBOL
    370	001152					CALL	$CVRL		; CONVERT TO REAL
    371	001156	016053 	000000G			MOV	S$YVAL(R0),@-(R3) ; SET SYMBOL VALUE
    372	001162	016046 	000000G			MOV	S$YCMT(R0),-(SP) ; SAVE VIRTUAL ADDRESS OF SECTION
    373	001166	016001 	000000G			MOV	S$YSEG(R0),R1	; GET VIRTUAL ADDRESS OF SEGMENT
    374	001172					CALL	$CVRL		; CONVERT TO REAL
    375	001176	016053 	000000G			MOV	S$GSEG(R0),@-(R3) ; SET OFFSET INTO DESCRIPTOR SECTION
    376	001202	011601 				MOV	(SP),R1		; GET ADDRESS OF SECTION
    377	001204					CALL	$CVRL		; CONVERT SECTION ADDRESS TO REAL
    378	001210	112767 	000020 	176632 		MOVB	#LIBADD,ALRLD2	; ASSUME NOT AUTOLOADABLE SECTION
    379	001216	012716 	000026 			MOV	#ALVAL+2-ALRLD1,(SP) ; SET RECORD LENGTH
    380	001222	132760 	000000G	000000G		BITB	#CS$IND,C$SFLG(R0) ; INDIRECT DEFINITION?
    381	001230	001402 				BEQ	20$		; IF EQ NO
    382	001232	016001 	000000G			MOV	C$SBSE(R0),R1	; GET REAL ADDRESS
    383	001236				20$:				;
    384	001236	020167 	177126 			CMP	R1,RTSLOC	; AUTOLOADABLE SEGMENT?
    385	001242	001013 				BNE	30$		; IF NE NO
    386	001244	012700 	000364'			MOV	#RTSNM,R0	; POINT TO SECTION NAME
    387	001250	016301 	000002 			MOV	2(R3),R1	; GET ADDRESS OF NAME
    388	001254	012021 				MOV	(R0)+,(R1)+	; COPY NAME
    389	001256	011011 				MOV	(R0),(R1)	; ...
    390	001260	012716 	000032 			MOV	#ALRLD3-ALRLD1,(SP) ; RESET BYTE COUNT
    391	001264	112767 	000015 	176556 		MOVB	#SECADD,ALRLD2	; RESET RLD RECORD TYPE
    392	001272				30$:				;
    393	001272	012701 	000000'			MOV	#ALRLD0,R1	; POINT TO INITIAL RLD
    394	001276	012702 	000012 			MOV	#ALTXT-ALRLD0,R2 ; GET BYTE COUNT
    395	001302					CALL	PUT		; PUT THE RECORD
    396	001306	012702 	000014 			MOV	#ALRLD1-ALTXT,R2 ; SET BYTE COUNT
    397	001312					CALL	PUT		; PUT THE RECORD
    398	001316	012602 				MOV	(SP)+,R2	; SET BYTE COUNT
    399	001320					CALL	PUT		; PUT THE RECORD
P6STB	MACRO M1110  22-AUG-78 01:57  PAGE 3-7


    400	001324	062767 	000000G	176462 		ADD	#S$ZATL,ALTXT+2	; RESET AUTOLOAD VECTOR OFFSET INTO SECTION
    401	001332	000701 				BR	10$		; GO AGAIN
    402
    403					;
    404					; OUTPUT SEGMENT DESCRIPTOR TEXT AND RLD
    405					;
    406
    407	001334				50$:				;
    408	001334	016701 	000000G			MOV	$RTSEG,R1	; GET ADDRESS OF ROOT SEGMENT
    409	001340					CALL	$UNLPG		; UNLOCK PAGE
    410	001344	012700 	001354'			MOV	#P6SEG,R0	; GET ADDRESS OF PHASE DEPENDANT ROUTINE
    411	001350					CALLR	$PCTRL		; CALL PHASE DEPENDANT ROUTINE
    412
    413					;
    414					; PHASE DEPENDANT ROUTINE TO OUTPUT SEGMENT DESCRIPTOR TEXT AND RLD
    415					; TO THE STB FILE.
    416					;
    417
    418	001354				P6SEG:				;
    419	001354					SAVRG			; SAVE THE NON-VOLATILE REGISTERS
    420	001360	016705 	000000G			MOV	$CRSEG,R5	; GET ADDRESS OF CURRENT SEGMENT
    421	001364	010503 				MOV	R5,R3		; COPY ADDRESS
    422	001366	012704 	000134'			MOV	#SEGOFF,R4	; POINT TO DESCRIPTOR TEXT OFFSET
    423	001372	016524 	000000G			MOV	S$GSEG(R5),(R4)+ ; SET OFFSET INTO SECTION
    424
    425					;
    426					; SETUP SEGMENT FLAGS AND RELATIVE DISK BLOCK ADDRESS
    427					;
    428
    429	001376	012314 				MOV	(R3)+,(R4)	; COPY FLAGS
    430	001400	042714 	000000C			BIC	#^C<SG$DES!SG$MEM>,(R4) ; CLEAR EXTRANEOUS BITS
    431	001404	052714 	000000C			BIS	#<SG$DSK!SG$LOD>,(R4) ; SET SEGMENT LOADED, NO DISK
    432	001410	000314 				SWAB	(R4)		; POSITION SEGMENT FLAGS
    433	001412	032715 	000000G			BIT	#SG$RO,(R5)	; R/O SEGMENT?					;JAK111
    434	001416	001403 				BEQ	5$		; IF EQ NO					;JAK111
    435	001420	005723 				TST	(R3)+		; SKIP TO R/0 BLK NUM				;JAK111
    436	001422	052324 				BIS	(R3)+,(R4)+	; COMBINE WITH DISK BLK ADDRESS			;JAK111
    437	001424	000402 				BR	6$		;						;JAK111
    438	001426				5$:										;JAK111
    439	001426	052324 				BIS	(R3)+,(R4)+	; COMBINE WITH DISK BLOCK ADDRESS
    440	001430	005723 				TST	(R3)+		; SKIP OVER R/O DISK BLK ADDRESS		;JAK111
    441	001432				6$:										;JAK111
    442
    443					;
    444					; SETUP VIRTUAL ADDRESS AND SIZE OF SEGMENT
    445					;
    446
    447	001432	012334 				MOV	(R3)+,@(R4)+	; COPY RELATIVE BASE ADDRESS OF SEGMENT
    448	001434	012324 				MOV	(R3)+,(R4)+	; SET SIZE OF SEGMENT IN BYTES
    449
    450					;
    451					; SETUP ADDRESS OF LINK-UP, LINK-DOWN AND LINK-NEXT
    452					;
    453
    454	001436	012746 	000003 			MOV	#3,-(SP)	; SET LOOP COUNT
    455	001442				10$:				;
    456	001442	012700 	000002G			MOV	#$ABSNM+2,R0	; POINT TO NAME OF ABS. SECTION
P6STB	MACRO M1110  22-AUG-78 01:57  PAGE 3-8


    457	001446	012402 				MOV	(R4)+,R2	; POINT TO RLD TEMPLATE
    458	001450	005012 				CLR	(R2)		; CLEAR OFFSET INTO SECTION
    459	001452	011042 				MOV	(R0),-(R2)	; SET NAME OF SECTION
    460	001454	014042 				MOV	-(R0),-(R2)	; ...
    461	001456	012301 				MOV	(R3)+,R1	; GET ADDRESS OF LINK
    462	001460	001411 				BEQ	20$		; IF EQ NONE
    463	001462	012722 	126413 			MOV	#^R$$S,(R2)+	; SET NAME OF REL. SECTION
    464	001466	012712 	026177 			MOV	#^RGD1,(R2)	; ...
    465	001472					CALL	$CVRL		; CONVERT TO REAL
    466	001476	016074 	000000G	177776 		MOV	S$GSEG(R0),@-2(R4) ; GET DISPLACMENT INTO SECTION
    467	001504				20$:				;
    468	001504	005316 				DEC	(SP)		; DECREMENT COUNT
    469	001506	003355 				BGT	10$		; IF GT GO AGAIN
    470	001510	005226 				INC	(SP)+		; CLEAN STACK
    471	001512	005723 				TST	(R3)+		; STEP PAST LINK-PREVIOUS
    472
    473					;
    474					; WRITE SEGMENT NAME INTO TEXT RECORD
    475					;
    476
    477	001514	012324 				MOV	(R3)+,(R4)+	; WRITE FIRST HALF OF NAME
    478	001516	012324 				MOV	(R3)+,(R4)+	; WRITE SECOND HALF OF NAME
    479
    480					;
    481					; WRITE OFFSET INTO WINDOW BLOCK SECTION
    482					;
    483
    484	001520	012700 	000002G			MOV	#$ABSNM+2,R0	; POINT TO NAME OF ABS SECTION
    485	001524	011402 				MOV	(R4),R2		; POINT TO RLD TEMPLATE
    486	001526	005012 				CLR	(R2)		; CLEAR OFFSET INTO SECTION
    487	001530	011042 				MOV	(R0),-(R2)	; SET SECTION NAME
    488	001532	014042 				MOV	-(R0),-(R2)	; ...
    489	001534	026567 	000000G	000000G		CMP	S$GWDP(R5),$RTWDP ; ROOT WINDOW?
    490	001542	001406 				BEQ	25$		; IF EQ YES
    491	001544	012722 	126417 			MOV	#^R$$W,(R2)+	; SET NAME OF DESCRIPTOR
    492	001550	012722 	054063 			MOV	#^RNDS,(R2)+	; ...
    493	001554	016512 	000000G			MOV	S$GWND(R5),(R2)	; SET OFFSET INTO SECTION
    494
    495					;
    496					; NOW EMIT THE TEXT AND RLD INFORMATION FOR THIS SEGMENT
    497					;
    498
    499	001560				25$:				;
    500	001560	016704 	000000G			MOV	$SZSEG,R4	; GET SIZE OF SEGMENT DESCRIPTOR
    501	001564	012701 	000120'			MOV	#SEGRL0,R1	; GET ADDRESS OF INITIAL RLD
    502	001570	012702 	000012 			MOV	#SEGTXT-SEGRL0,R2 ; SET BYTE COUNT
    503	001574					CALL	PUT		; OUTPUT THE RECORD
    504	001600	012702 	000004 			MOV	#4,R2		; ACCOUNT FOR TEXT RECORD HEADER
    505	001604	060402 				ADD	R4,R2		; COMPUTE RECORD LENGTH
    506	001606					CALL	PUT		; WRITE TEXT RECORD
    507	001612	012701 	000160'			MOV	#SEGRL1,R1	; POINT TO RLD
    508	001616	012702 	000046 			MOV	#SEGRL2-SEGRL1,R2 ; SET LENGTH OF RECORD
    509	001622	020427 	000002G			CMP	R4,#S$ZSEG+2	; WINDOW INFORMATION INCLUDED?
    510	001626	103002 				BHIS	27$		; IF HIS YES
    511	001630	162702 	000010 			SUB	#10,R2		; EXCLUDE RLD FOR WINDOW BLOCK
    512	001634				27$:				;
    513	001634					CALL	PUT		; OUTPUT RLD RECORD
P6STB	MACRO M1110  22-AUG-78 01:57  PAGE 3-9


    514
    515					;
    516					; OUTPUT REGION AND WINDOW DESCRIPTORS
    517					;
    518
    519	001640	026767 	000000G	000000G		CMP	$CRVSG,$RTSEG	; AT MAIN ROOT?
    520	001646	001027 				BNE	30$		; IF NE NO
    521	001650	005767 	000000G			TST	$TSKWD		; TASK HAVE RESIDENT OVERLAYS
    522	001654	001424 				BEQ	30$		; IF EQ NO
    523	001656	012700 	000102'			MOV	#REGTX0,R0	; POINT TO TEXT BLOCK
    524	001662	012701 	000106'			MOV	#REGTX1,R1	; ....
    525	001666	012702 	000000G			MOV	#$PNAME,R2	; POINT TO PARTITION NAME
    526	001672	011220 				MOV	(R2),(R0)+	; SETUP NAME
    527	001674	012221 				MOV	(R2)+,(R1)+	; ...
    528	001676	011210 				MOV	(R2),(R0)	; ...
    529	001700	011211 				MOV	(R2),(R1)	; ...
    530	001702	012701 	000060'			MOV	#REGRL0,R1	; POINT TO INITIAL RLD
    531	001706	012702 	000012 			MOV	#REGTXT-REGRL0,R2 ; SET BYTE COUNT
    532	001712					CALL	PUT		; OUTPUT THE RECORD
    533	001716	012702 	000026 			MOV	#REGTX2-REGTXT,R2 ; SET BYTE COUNT
    534	001722					CALL	PUT		;
    535
    536					;
    537					; OUTPUT WINDOW DESCRIPTOR IF SEGMENT IS RESIDENT
    538					;
    539
    540	001726				30$:				;
    541	001726	132765 	000000G	000000G		BITB	#SG$RES,S$GSTS(R5) ; SEGMENT RESIDENT?
    542	001734	001464 				BEQ	40$		; IF EQ NO
    543	001736	012703 	000242'			MOV	#WNDOFF,R3	; POINT TO WINDOW SECTION OFFSET
    544	001742	016523 	000000G			MOV	S$GWND(R5),(R3)+ ; SET WINDOW DESCRIPTOR OFFSET
    545	001746	016501 	000000G			MOV	S$GWDP(R5),R1	; GET ADDRESS OF WINDOW DESCRIPTOR
    546	001752					CALL	$CVRL		; CONVERT TO REAL
    547	001756	016001 	000000G			MOV	W.NBAS(R0),R1	; GET BASE ADDRESS
    548	001762	010173 	000000G			MOV	R1,@W.NBAS(R3)	; SET WINDOW BASE
    549	001766	016302 	000000G			MOV	W.NID(R3),R2	; GET ADDRESS TO RECEIVE I/D  AND APR
    550	001772	110122 				MOVB	R1,(R2)+	; SET LOW PART OF VIRTUAL BIAS
    551	001774	000301 				SWAB	R1		; POSITION HIGH BYTE
    552	001776	110112 				MOVB	R1,(R2)		; SET HIGH PART OF VIRTUAL BIAS
    553	002000	016063 	000000G	000000G		MOV	W.NSIZ(R0),W.NSIZ(R3) ; SET WINDOW SIZE
    554	002006	016063 	000000G	000000G		MOV	W.NOFF(R0),W.NOFF(R3) ; SET REGION OFFSET
    555	002014	066763 	000000G	000000G		ADD	$LBOFF,W.NOFF(R3) ; INCLUDE BIAS INTO REGION
    556	002022	016063 	000000G	000000G		MOV	W.NSTS(R0),W.NSTS(R3) ; SET WINDOW STATUS
    557	002030	016063 	000000G	000000G		MOV	W$NFLG(R0),W$NFLG(R3) ; SET WINDOW FLAGS
    558	002036	012701 	000226'			MOV	#WNDRL0,R1	; SET LOCATION OF RECORD
    559	002042	012702 	000012 			MOV	#WNDTXT-WNDRL0,R2 ; SET BYTE COUNT
    560	002046					CALL	PUT		; OUTPUT THE RECORD
    561	002052	012702 	000030 			MOV	#WNDRL1-WNDTXT,R2 ; SET BYTE COUNT
    562	002056					CALL	PUT		; OUTPUT THE TEXT RECORD
    563	002062	012702 	000022 			MOV	#WNDRL2-WNDRL1,R2 ; SET BYTE COUNT
    564	002066					CALL	PUT		; OUTPUT THE RECORD
    565	002072	012701 	000312'			MOV	#WNDRL3,R1	; POINT TO RLD RECORD
    566	002076	012702 	000016 			MOV	#WNDRL4-WNDRL3,R2 ; SET BYTE COUNT
    567	002102					CALL	PUT		; OUTPUT THE RECORD
    568	002106				40$:				;
    569	002106					RETURN			;
    570
P6STB	MACRO M1110  22-AUG-78 01:57  PAGE 3-10


    571					;
    572					; OUTPUT SYMBOL TABLE FOR ROOT SEGMENT
    573					;
    574
    575	002110				P6STB:				;
    576	002110	010500 				MOV	R5,R0		; COPY ADDRESS OF ROOT SEGMENT
    577	002112	032767 	000000G	000000G		BIT	#SE$QA,$SWTCH	; SEQUENCE OUTPUT
    578	002120	001015 				BNE	20$		; IF NE YES
    579	002122	062700 	000000G			ADD	#S$GCST,R0	; POINT TO SECTION TABLE LISTHEAD
    580	002126	012746 	000000G			MOV	#$ISD,-(SP)	; PUSH ADDRESS OF SYMBOL EDIT ROUTINE
    581	002132				10$:				;
    582	002132	012702 	000372'			MOV	#SCTLH,R2	; GET LISTHEAD ADDRESS
    583	002136					CALL	@(SP)+		; SCAN SECTION TABLE
    584	002140	012602 				MOV	(SP)+,R2	; CLEAN STACK IN CASE SCAN IS COMPLETE
    585	002142	103421 				BCS	40$		; IF C/S DONE
    586	002144	010246 				MOV	R2,-(SP)	; RESTORE STACK
    587	002146					CALL	50$		; WRITE SECTION INTO STB FILE
    588	002152	000767 				BR	10$		; GO AGAIN
    589	002154				20$:				;
    590	002154	062700 	000000G			ADD	#S$GSEQ,R0	; POINT TO SEQUENCE ALLOCATION LISTHEAD
    591	002160	010046 				MOV	R0,-(SP)	; PUSH ADDRESS OF LISTHEAD
    592	002162				30$:				;
    593	002162	013600 				MOV	@(SP)+,R0	; GET ADDRESS OF NEXT ENTRY
    594	002164	001410 				BEQ	40$		; IF EQ DONE
    595	002166	010046 				MOV	R0,-(SP)	; SAVE ENTRY ADDRESS
    596	002170	016001 	000002 			MOV	2(R0),R1	; GET ADDRESS OF NEXT
    597	002174					CALL	$CVRL		; CONVERT TO REAL
    598	002200					CALL	50$		; OUTPUT SECTION
    599	002204	000766 				BR	30$		; GO AGAIN
    600	002206				40$:				;
    601	002206					RETURN			;
    602
    603					;
    604					; WRITE SECTION TABLE ENTRY INTO STB FILE AND INITIATE SYMBOL
    605					; TABLE SCAN
    606					;
    607
    608	002210				50$:				;
    609	002210	016046 	000000G			MOV	C$SELM(R0),-(SP) ; PUSH ADDRESS OF ELEMENT DESCRIPTOR
    610	002214	132760 	000000G	000000G		BITB	#CS$IND,C$SFLG(R0) ; INDIRECT DEFINITION?
    611	002222	001404 				BEQ	55$		; IF EQ NO
    612	002224	016001 	000000G			MOV	C$SBSE(R0),R1	; GET ADDRESS OF REAL DEFINITION
    613	002230					CALL	$CVRL		; CONVERT TO REAL
    614	002234				55$:				;
    615	002234	132760 	000000G	000001G		BITB	#CS$VAS,C$SFLG+1(R0) ; VIRTUAL ARRAY?
    616	002242	001043 				BNE	67$		; IF NE YES, EXIT
    617	002244	010167 	176060 			MOV	R1,CRSCT	; COPY ADDRESS OF CURRENT SECTION
    618	002250	012703 	000336'			MOV	#LCLSYM,R3	; GET ADDRESS OF LOCAL SYMBOL BUFFER
    619	002254	010301 				MOV	R3,R1		; COPY BUFFER ADDRESS
    620	002256	012702 	000000C			MOV	#C$SLGH/2,R2	; GET LENGTH OF ENTRY IN BYTES
    621	002262				60$:				;
    622	002262	012021 				MOV	(R0)+,(R1)+	; COPY TABLE ENTRY
    623	002264					SOB	R2,60$		; LOOP
    624	002270	132763 	000000G	000001G		BITB	#CS$VSC,C$SFLG+1(R3) ; VIRTUAL SECTION?
    625	002276	001407 				BEQ	65$		; IF EQ NO
    626	002300	142763 	000000G	000000G		BICB	#CS$REL,C$SFLG(R3) ; CLEAR RELOCATABLE FLAG
    627	002306	005063 	000000G			CLR	C$SBSE(R3)	; CLEAR SECTION BASE ADDRESS
P6STB	MACRO M1110  22-AUG-78 01:57  PAGE 3-11


    628	002312	005063 	000000G			CLR	C$SLTH(R3)	; CLEAR LENGTH
    629	002316				65$:				;
    630	002316	012601 				MOV	(SP)+,R1	; GET ADDRESS OF ELEMENT DESCRIPTOR
    631	002320	105064 	000004 			CLRB	GSDFL(R4)	; RESET GSD RECORD FLAGS BYTE
    632	002324	132763 	000000G	000001G		BITB	#CS$RES,C$SFLG+1(R3) ; SECTION TASK-RESIDENT?
    633	002332	001410 				BEQ	70$		; IF EQ NO
    634	002334	032767 	000000G	176244 		BIT	#SW$PI,STBSW	 ; PIC OUTPUT?
    635	002342	001026 				BNE	90$		; IF NE YES
    636	002344	005767 	176012 			TST	PASS		; SECOND PASS?
    637	002350	001023 				BNE	90$		; IF NE YES
    638	002352				67$:				;
    639	002352	000550 				BR	P6RET		; IGNORE TKB DEFINED SECTIONS ON FIRST PASS
    640	002354				70$:				;
    641	002354	005701 				TST	R1		; ELEMENT DEFINED FOR THIS SECTION?
    642	002356	001411 				BEQ	80$		; IF EQ NO
    643	002360	112764 	000000G	000004 		MOVB	#CS$LIB,GSDFL(R4) ; SET LIBRARY FLAG
    644	002366					CALL	$CVRL		; CONVERT ELEMENT ADDRESS TO REAL
    645	002372	032760 	000000G	000000G		BIT	#SW$RL,E$LSWT(R0) ; LIBRARY ELEMENT?
    646	002400	001135 				BNE	P6RET		; IF NE YES, IGNORE SECTION
    647	002402				80$:				;
    648	002402	005767 	175754 			TST	PASS		; FIRST PASS?
    649	002406	001132 				BNE	P6RET		; IF NE NO, IGNORE SECTION
    650	002410	032767 	000000G	176170 		BIT	#SW$PI,STBSW	; PIC OUTPUT?
    651	002416	001403 				BEQ	P6SCN		; IF EQ NO, OUTPUT SYMBOLS ONLY
    652	002420				90$:				;
    653	002420					CALL	OUTSEC		; OUTPUT PROGRAM SECTION
    654	002424	103523 				BCS	P6RET		; IF C/S-BLANK SECTION
    655
    656					;
    657					; SCAN SYMBOL TABLE, WRITE ALL GLOBAL SYMBOLS INTO STB FILE
    658					; THAT ARE DEFINED IN CURRENT SECTION.
    659					;
    660
    661	002426				P6SCN:				;
    662	002426	010500 				MOV	R5,R0		; COPY ADDRESS OF ROOT SEGMENT
    663	002430	062700 	000000G			ADD	#S$GSTB,R0	; POINT TO GLOBAL SYMBOL TABLE
    664	002434	012746 	000000G			MOV	#$ISD,-(SP)	; PUSH ADDRESS OF SYMBOL EDIT ROUTINE
    665	002440				10$:				;
    666	002440	012702 	000400'			MOV	#SYMLH,R2	; POINT TO SYMBOL EDIT LISTHEAD
    667	002444					CALL	@(SP)+		; GET NEXT SYMBOL
    668	002446	012602 				MOV	(SP)+,R2	; CLEAN STACK IN CASE SCAN IS COMPLETE
    669	002450	103511 				BCS	P6RET		; IF C/S DONE
    670	002452	010246 				MOV	R2,-(SP)	; RESTORE STACK
    671	002454	105064 	000004 			CLRB	GSDFL(R4)	; CLEAR GSD FLAGS BYTE
    672	002460	132760 	000000G	000000G		BITB	#SY$IND,S$YFLG(R0) ; INDIRECT DEFINITION?
    673	002466	001423 				BEQ	15$		; IF EQ NO
    674	002470	026767 	175634 	000000G		CMP	CRSCT,$ASCT	; PROCESSING ABS SECTION?
    675	002476	001360 				BNE	10$		; IF NE NO
    676	002500	016001 	000000G			MOV	S$YVAL(R0),R1	; POINT TO REAL DEFINITION
    677	002504					CALL	$CVRL		; CONVERT TO REAL
    678	002510	132760 	000000G	000000G		BITB	#SY$REL,S$YFLG(R0) ; SYMBOL RELOCATABLE?
    679	002516	001413 				BEQ	17$		; IF EQ NO
    680	002520	142760 	000000G	000000G		BICB	#SY$REL,S$YFLG(R0) ; CLEAR RELOCATABLE FLAG
    681	002526	152764 	000000G	000004 		BISB	#SY$LIB,GSDFL(R4) ; SET LIBRARY BIT
    682	002534	000404 				BR	17$		;
    683	002536				15$:				;
    684	002536	026067 	000000G	175564 		CMP	S$YCMT(R0),CRSCT ; SYMBOL DEFINED IN CURRENT SECTION?
P6STB	MACRO M1110  22-AUG-78 01:57  PAGE 3-12


    685	002544	001335 				BNE	10$		; IF NE NO
    686	002546				17$:				;
    687	002546	132760 	000000G	000000G		BITB	#SY$LIB,S$YFLG(R0) ; SYMBOL DEFINED IN LIBRARY?
    688	002554	001331 				BNE	10$		; IF NE YES
    689	002556	010002 				MOV	R0,R2		; COPY ADDRESS OF SYMBOL
    690	002560	062702 	000000G			ADD	#S$YM,R2	; POINT TO SYMBOL NAME
    691	002564	012224 				MOV	(R2)+,(R4)+	; COPY NAME
    692	002566	012224 				MOV	(R2)+,(R4)+	; ...
    693	002570	151214 				BISB	(R2),(R4)	; COPY FLAGS
    694	002572	142724 	000000C			BICB	#^C<SY$GBL!SY$DEF!SY$LIB!SY$REL>,(R4)+ ; CLEAR EXTRANEOUS BITS
    695	002576	112724 	000004 			MOVB	#SYMTYP,(R4)+	; SET TYPE=GLOBAL SYMBOL
    696	002602	016024 	000000G			MOV	S$YVAL(R0),(R4)+ ; SET SYMBOL VALUE
    697	002606	032767 	000000G	175772 		BIT	#SW$PI,STBSW	; PIC OUTPUT?
    698	002614	001015 				BNE	20$		; IF NE YES
    699	002616	132763 	000000G	000000G		BITB	#CS$REL,C$SFLG(R3) ; SECTION RELOCATABLE?
    700	002624	001420 				BEQ	30$		; IF EQ NO
    701	002626	005763 	000000G			TST	C$SELM(R3)	; TKB DEFINED SECTION?
    702	002632	001412 				BEQ	25$		; IF EQ YES
    703	002634	066744 	000000G			ADD	$OFFST,-(R4)	; RELOCATE SYMBOL
    704	002640	042744 	000000G			BIC	#SY$REL,-(R4)	; MAKE SYMBOL ABSOLUTE
    705	002644	022424 				CMP	(R4)+,(R4)+	; ADJUST BUFFER POINTER
    706	002646	000407 				BR	30$		;
    707	002650				20$:				;
    708	002650	132763 	000000G	000000G		BITB	#CS$REL,C$SFLG(R3) ; SECTION RELOCATABLE?
    709	002656	001403 				BEQ	30$		; IF EQ NO
    710	002660				25$:				;
    711	002660	166364 	000000G	177776 		SUB	C$SBSE(R3),-2(R4) ; MAKE SYMBOL RELATIVE TO START OF SECTION
    712	002666				30$:				;
    713	002666					CALL	PUTGSD		; WRITE GSD RECORD
    714	002672	000662 				BR	10$		; PROCESS NEXT SYMBOL
    715	002674				P6RET:				;
    716	002674					RETURN			;
    717					;
    718					; OUTPUT A CONTROL SECTION TO THE STB FILE. IF SECTION IS UNNAMED
    719					; AND HAS ZERO LENGTH, THEN BYPASS OUTPUT AND RETURN WITH CARRY SET.
    720					;
    721
    722						.ENABL	LSB
    723
    724	002676				OUTSEC:				;
    725	002676	010400 				MOV	R4,R0		; COPY ADDRESS OF BUFFER POINTER
    726	002700	010301 				MOV	R3,R1		; COPY ADDRESS OF SECTION DATA
    727	002702	062701 	000000G			ADD	#S$YM,R1	; POINT TO SYMBOL NAME
    728	002706	012120 				MOV	(R1)+,(R0)+	; COPY NAME
    729	002710	001004 				BNE	10$		; IF NE NOT BLANK SECTION?
    730	002712	005763 	000000G			TST	C$SLTH(R3)	; SECTION HAVE LENGTH?
    731	002716	000261 				SEC			; ASSUME NO
    732	002720	001425 				BEQ	30$		; IF EQ NO
    733	002722				10$:				;
    734	002722	012120 				MOV	(R1)+,(R0)+	; COPY REMAINDER OF NAME
    735	002724	152120 				BISB	(R1)+,(R0)+	; MERGE FLAGS
    736	002726	112720 	000005 			MOVB	#SECTYP,(R0)+	; SET RECORD TYPE
    737	002732	016320 	000000G			MOV	C$SLTH(R3),(R0)+ ; SET LENGTH OF SECTION
    738	002736	010004 				MOV	R0,R4		; RESET BUFFER POINTER
    739
    740					;
    741					; OUTPUT A GSD RECORD
P6STB	MACRO M1110  22-AUG-78 01:57  PAGE 3-13


    742					;
    743
    744	002740				PUTGSD:				;
    745	002740	022704 	000576'			CMP	#STBSW-8.,R4	; ROOM FOR ANOTHER ENTRY?
    746	002744	101013 				BHI	30$		; IF HI (CARRY CLEAR) YES
    747
    748					;
    749					; FLUSH CONTENTS OF GSD RECORD BUFFER
    750					;
    751
    752	002746				FLSH:				;
    753	002746	012746 	000410'			MOV	#STBBF,-(SP)	; PUSH ADDRESS OF BUFFER
    754	002752	020416 				CMP	R4,(SP)		; ANYTHING IN BUFFER?
    755	002754	001406 				BEQ	20$		; IF EQ NO
    756	002756	012701 	000406'			MOV	#GSDREC,R1	; POINT TO GSD RECORD ENTRY
    757	002762	010402 				MOV	R4,R2		; COPY BUFFER ADDRESS
    758	002764	160102 				SUB	R1,R2		; COMPUTE BYTE COUNT
    759	002766					CALL	PUT		; OUTPUT THE RECORD
    760	002772				20$:				;
    761	002772	012604 				MOV	(SP)+,R4	; RESET BUFFER ADDRESS
    762	002774				30$:				;
    763	002774					RETURN			;
    764
    765						.DSABL	LSB
    766
    767
    768					;
    769					; OUTPUT A RECORD TO THE STB FILE
    770					;
    771					;	R1=BUFFER ADDRESS
    772					;	R2=BYTE COUNT
    773					;
    774					; OUTPUTS:
    775					;
    776					;	R1 IS INCREMENTED BY R2
    777					;	R2 IS UNCHANGED
    778					;
    779					; CARRY MUST BE CLEAR UPON EXIT.
    780					;
    781
    782	002776				PUT:				;
    783	002776					PUT$S	$STBPT,R1,R2	; OUTPUT THE RECORD
    784	003016	103006 				BCC	10$		; IF C/C OK
    785	003020	016002 	000000G			MOV	R$NAME(R0),R2	; POINT TO NAME BLOCK
    786	003024	012701 	000000C			MOV	#<S$V2*400!E$R25>,R1 ; GET ERROR/SEVERITY
    787	003030					CALL	$ERMSG		; FATAL, NO RETURN
    788	003034				10$:				;
    789	003034	060201 				ADD	R2,R1		; UPDATE BUFFER POINTER
    790	003036					RETURN			;
    791
    792		000001 				.END
P6STB	MACRO M1110  22-AUG-78 01:57  PAGE 3-14
SYMBOL TABLE

ALRLD0  000000R  	FD.F11= 040000   	F.MBCT= 000054   	PUT     002776R  	S$GWDP= ****** GX
ALRLD1  000026R  	FD.INS= 000010   	F.MBC1= 000055   	PUTGSD  002740R  	S$GWND= ****** GX
ALRLD2  000050R  	FD.ISP= 002000   	F.MBFG= 000056   	P6RET   002674R  	S$V0  = ****** GX
ALRLD3  000060R  	FD.MNT= 100000   	F.NRBD= 000024   	P6RLD   001102R  	S$V2  = ****** GX
ALTXT   000012R  	FD.OSP= 004000   	F.NREC= 000030   	P6SCN   002426R  	S$YCMT= ****** GX
ALVAL   000052R  	FD.PLC= 000004   	F.OVBS= 000030   	P6SEG   001354R  	S$YFLG= ****** GX
B.BBFS= 000010   	FD.PRN= 000004   	F.RACC= 000016   	P6STB   002110R  	S$YM  = ****** GX
B.BFST= 000015   	FD.PSE= 010000   	F.RATT= 000001   	REGRL0  000060R  	S$YSEG= ****** GX
B.NXBD= 000012   	FD.RAH= 000001   	F.RCNM= 000034   	REGTXT  000072R  	S$YVAL= ****** GX
B.VBN = 000004   	FD.RAN= 000002   	F.RCTL= 000017   	REGTX0  000102R  	S$ZATL= ****** GX
CH.AND= 000001   	FD.REC= 000001   	F.RSIZ= 000002   	REGTX1  000106R  	S$ZSEG= ****** GX
CMPADD= 000001   	FD.RWM= 000001   	F.RTYP= 000000   	REGTX2  000120R  	S.BFHD= 000020
CMPAND= 000005   	FD.SDI= 000020   	F.SEQN= 000100   	RLDIR = 000004   	S.FATT= 000016
CMPDIV= 000004   	FD.SQD= 000040   	F.SPDV= 000072   	RTSLOC  000370R  	S.FDB = 000140
CMPFTC= 000020   	FD.TTY= 000004   	F.SPUN= 000074   	RTSNM   000364R  	S.FNAM= 000006
CMPFTL= 000021   	FD.WBH= 000002   	F.STBK= 000036   	R$NAME= ****** GX	S.FNB = 000036
CMPLX = 000017   	FF    = 000014   	F.UNIT= 000136   	R$SWTH= ****** GX	S.FNBW= 000017
CMPSTO= 000012   	FF.CHR= 000005   	F.URBD= 000020   	R$$11M= 000000   	S.FNTY= 000004
CR    = 000015   	FF.NV = 000003   	F.VBN = 000064   	R.FIX = 000001   	S.FTYP= 000002
CRSCT   000330R  	FF.POE= 000002   	F.VBSZ= 000060   	R.SEQ = 000003   	S.NFEN= 000020
CS$IND= ****** GX	FF.RWD= 000001   	GBLADD= 000005   	R.VAR = 000002   	TTLTYP= 000000
CS$LIB= ****** GX	FF.RWF= 000006   	GSDEND= 000002   	SCTLH   000372R  	TXTREC= 000003
CS$REL= ****** GX	FF.SPC= 000004   	GSDFL   000004   	SECADD= 000015   	VT    = 000013
CS$RES= ****** GX	FLSH    002746R  	GSDNM   000000   	SECTYP= 000005   	WNDOFF  000242R
CS$VAS= ****** GX	FO.APD= 000106   	GSDREC  000406R  	SEGDES  000136R  	WNDRL0  000226R
CS$VSC= ****** GX	FO.MFY= 000002   	GSDSTR= 000001   	SEGOFF  000134R  	WNDRL1  000270R
C$SBSE= ****** GX	FO.RD = 000001   	GSDTP   000005   	SEGRL0  000120R  	WNDRL2  000312R
C$SELM= ****** GX	FO.UPD= 000006   	GSDVL   000006   	SEGRL1  000160R  	WNDRL3  000312R
C$SFLG= ****** GX	FO.WRT= 000016   	HT    = 000011   	SEGRL2  000226R  	WNDRL4  000330R
C$SLGH= ****** GX	F.ACTL= 000076   	IDNTYP= 000006   	SEGTXT  000132R  	WNDTXT  000240R
C$SLTH= ****** GX	F.ALOC= 000040   	LCLSYM  000336R  	SEGVAD  000140R  	W$NFLG= ****** GX
EOGSD   000332R  	F.BBFS= 000062   	LF    = 000012   	SE$QA = ****** GX	W.NBAS= ****** GX
EOMOD   000334R  	F.BDB = 000070   	LIBADD= 000020   	SG$DES= ****** GX	W.NID = ****** GX
E$LSWT= ****** GX	F.BGBC= 000057   	LOCDEF= 000007   	SG$DSK= ****** GX	W.NOFF= ****** GX
E$R11 = ****** GX	F.BKDN= 000026   	MODEND= 000006   	SG$LOD= ****** GX	W.NSIZ= ****** GX
E$R25 = ****** GX	F.BKDS= 000020   	NB.DEV= 000200   	SG$MEM= ****** GX	W.NSTS= ****** GX
FA.APD= 000100   	F.BKEF= 000050   	NB.DIR= 000100   	SG$RES= ****** GX	$ABSCT= ****** GX
FA.CRE= 000010   	F.BKP1= 000051   	NB.NAM= 000004   	SG$RO = ****** GX	$ABSNM= ****** GX
FA.DLK= 001000   	F.BKST= 000024   	NB.SD1= 000400   	SPA   = 000040   	$ASCT = ****** GX
FA.ENB= 100000   	F.BKVB= 000064   	NB.SD2= 001000   	STBBF   000410R  	$CRSEG= ****** GX
FA.EXC= 002000   	F.CHR = 000075   	NB.SNM= 000040   	STBSW   000606R  	$CRVSG= ****** GX
FA.EXT= 000004   	F.CNTG= 000034   	NB.STP= 000020   	SW$PI = ****** GX	$CVLOK= ****** GX
FA.NSP= 000100   	F.DFNB= 000046   	NB.SVR= 000010   	SW$RL = ****** GX	$CVRL = ****** GX
FA.POS= 010000   	F.DSPT= 000044   	NB.TYP= 000002   	SYMLH   000400R  	$ERMSG= ****** GX
FA.RD = 000001   	F.DVNM= 000134   	NB.VER= 000001   	SYMTYP= 000004   	$IDENT= ****** GX
FA.RWD= 004000   	F.EFBK= 000010   	N.DID = 000024   	SY$DEF= ****** GX	$ISD  = ****** GX
FA.SEQ= 040000   	F.EFN = 000050   	N.DVNM= 000032   	SY$GBL= ****** GX	$LBOFF= ****** GX
FA.SHR= 000040   	F.EOBB= 000032   	N.FID = 000000   	SY$IND= ****** GX	$NUMSG= ****** GX
FA.TMP= 000020   	F.ERR = 000052   	N.FNAM= 000006   	SY$LIB= ****** GX	$OFFST= ****** GX
FA.WCK= 020000   	F.FACC= 000043   	N.FTYP= 000014   	SY$REL= ****** GX	$PCTRL= ****** GX
FA.WRT= 000002   	F.FFBY= 000014   	N.FVER= 000016   	S$GATL= ****** GX	$PNAME= ****** GX
FD.BLK= 000010   	F.FNAM= 000110   	N.NEXT= 000022   	S$GCST= ****** GX	$P6STB  000610RG
FD.CCL= 000002   	F.FNB = 000102   	N.STAT= 000020   	S$GNME= ****** GX	$RTSEG= ****** GX
FD.COM= 020000   	F.FTYP= 000116   	N.UNIT= 000034   	S$GSEG= ****** GX	$RTWDP= ****** GX
FD.CR = 000002   	F.FVER= 000120   	OUTSEC  002676R  	S$GSEQ= ****** GX	$SAVRG= ****** GX
FD.DIR= 000010   	F.HIBK= 000004   	PAR$$$= 000067   	S$GSTB= ****** GX	$SRCH = ****** GX
FD.FTN= 000001   	F.LUN = 000042   	PASS    000362R  	S$GSTS= ****** GX	$STBPT= ****** GX
P6STB	MACRO M1110  22-AUG-78 01:57  PAGE 3-15
SYMBOL TABLE

$STRCB= ****** GX	$TSKWD= ****** GX	$$    = 000001   	.OPFNB= ****** G 	...GBL= 000000
$SWTCH= ****** GX	$UNLPG= ****** GX	.CLOSE= ****** G 	.PUTSQ= ****** G 	...TPC= 000140
$SZSEG= ****** GX

. ABS.	000010	   000
      	003040	   001
ERRORS DETECTED:  0

VIRTUAL MEMORY USED:  3353 WORDS  ( 14 PAGES)
DYNAMIC MEMORY:  4884 WORDS  ( 18 PAGES)
ELAPSED TIME:  00:00:32
OBJ$:P6STB,LIS$:P6STB/-SP=SRC$:MACFLM,FCSPR,P6STB
