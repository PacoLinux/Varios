P5ELM	MACRO M1110  22-AUG-78 01:54  PAGE 2


      1						.TITLE	P5ELM
      2						.IDENT	/13/
      3					                                                                                ;**-1
      4					;
      5					; COPYRIGHT   1973,  DIGITAL  EQUIPMENT  CORP.,  MAYNARD,   MASS.
      6					;
      7					; COPYRIGHT   1974,  DIGITAL  EQUIPMENT  CORP.,  MAYNARD,   MASS.
      8					; THIS SOFTWARE IS FURNISHED TO PURCHASER UNDER A LICENSE FOR USE
      9					; ON A  SINGLE COMPUTER SYSTEM AND CAN BE COPIED (WITH INCLUSION
     10					; OF DEC'S COPYRIGHT NOTICE) ONLY FOR USE IN SUCH SYSTEM, EXCEPT
     11					; AS MAY OTHERWISE BE PROVIDED IN WRITING BY DEC.
     12					;
     13					; THE  INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
     14					; NOTICE AND  SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
     15					; EQUIPMENT CORPORATION.
     16					;
     17					; DEC  ASSUMES NO  RESPONSIBILITY  FOR  THE  USE  OR RELIABILITY
     18					; OF ITS  SOFTWARE ON  EQUIPMENT WHICH  IS NOT SUPPLIED BY DEC.
     19					;
     20					; VERSION 13
     21					;                                                                               ;**-1
     22					; D. N. CUTLER/C. MONIA 27-JAN-74
     23					;
     24					;
     25					;
     26					; MODIFICATIONS
     27					;
     28					; NO.		DATE		PROGRAMMER
     29					; ---		----		----------
     30					;
     31					; 004		04-AUG-73	C. MONIA
     32					; 043		23-SEP-75	C. MONIA
     33					; 052		17-APR-76	C. MONIA
     34					; 058		17-APR-76	C. MONIA
     35					; 061		16-MAY-76	C. MONIA
     36					; 062		31-MAY-76	C. MONIA
     37					; 065		06-JUL-76	C. MONIA
     38					;
     39					;
     40					;
     41					;
     42					; PHASE 5 ELEMENT PROCESSING
     43					;
     44					; LOCAL DATA
     45					;
     46
     47	000000				BEGST:	.BLKW	1		;++004 BEGINING OF COMPLEX RELOCATION STACK
     48	000002				CMDBT:	.BLKW	1		;RLD COMMAND BYTE
     49	000004				CRADR:	.BLKW	1		;CURRENT VIRTUAL ADDRESS (MINUS 4)
     50	000006				CRSCT:	.BLKW	10.		; CURRENT CONTROL SECTION DATA                  ;**NEW**
     51	000032				ENDST:	.BLKW	1		;++004 END OF COMPLEX RELOCATION STACK          ;**-1
     52	000034				LCLSYM:	.BLKW	6		;LOCAL SYMBOL DESCRIPTOR
     53
     54					;+
     55					; **-$P5ELM-PHASE 5 ELEMENT PROCESSING
     56					;
     57					; THIS ROUTINE IS CALLED TO PROCESS EACH ELEMENT IN PHASE 5. THE
P5ELM	MACRO M1110  22-AUG-78 01:54  PAGE 2-1


     58					; ELEMENT IS RELOCATED AND THE TASK IMAGE IS WRITTEN.
     59					;
     60					; INPUTS:
     61					;
     62					;	$CRELM=ADDRESS OF CURRENT ELEMENT DESCRIPTOR.
     63					;	$CRSEG=ADDRESS OF CURRENT SEGMENT DESCRIPTOR.
     64					;
     65					; OUTPUTS:
     66					;
     67					;	NONE.
     68					;-
     69
     70	000050				$P5ELM::SAVRG			;SAVE NONVOLITILE REGISTERS
     71	000054					CALL	$WSINI		; INITIALIZE WHOLE-SEARCH ALGORITHM
     72	000060	016701 	000000G			MOV	$ASCT,R1	; GET VIRTUAL ADDRESS OF CURRENT SECTION        ;**NEW**
     73	000064					CALL	$CVRL		; CONVERT TO REAL ADDRESS                       ;**NEW**
     74	000070	010001 				MOV	R0,R1		; COPY REAL ADDRESS                             ;**NEW**
     75	000072					CALL	CPYSCT		; COPY SECTION DATA                             ;**NEW**
     76	000076	016700 	000000G			MOV	$CRVSG,R0	; GET VIRTUAL ADDRESS OF CURRENT SEGMENT        ;**-1
     77	000102					CALL	$ADRST		;SET ADDRESS LIMITS
     78	000106				10$:	CALL	$GTBYT		;GET RECORD LENGTH
     79	000112	103410 				BCS	20$		;IF CS EOF (ILL FORMAT)
     80	000114	010003 				MOV	R0,R3		;SAVE RECORD LENGTH
     81	000116					CALL	$GTWRD		;GET BLOCK TYPE
     82	000122	162703 	000002 			SUB	#2,R3		;ADJUST BYTE COUNT
     83	000126	020027 	000006 			CMP	R0,#LGBLK	;LEGAL BLOCK TYPE?
     84	000132	101401 				BLOS	30$		;IF LOS YES
     85	000134	005000 			20$:	CLR	R0		;SET ZERO BLOCK TYPE
     86	000136	006300 			30$:	ASL	R0		;MAKE WORD INDEX
     87	000140					CALL	@DSPVCT(R0)	;CALL BLOCK DEPENDENT ROUTINE
     88	000144	000760 				BR	10$		;GO AGAIN
     89
     90					;
     91					; DISPATCH VECTOR
     92					;
     93
     94	000146	002116'			DSPVCT:	.WORD	ILFMT		;BLK 0-ILLEGAL BLOCK TYPE
     95	000150	000416'				.WORD	RPEAT		; BLK 1-START GSD
     96	000152	000416'				.WORD	RPEAT		; BLK 2-END GSD
     97	000154	000164'				.WORD	TXT		;BLK 3-TXT
     98	000156	000316'				.WORD	RLD		;BLK 4-RLD
     99	000160	000416'				.WORD	RPEAT		;BLK 5-ISD
    100	000162	002274'				.WORD	MODND		;BLK 6-MODULE END
    101		000006 			LGBLK=<.-DSPVCT-2>/2		;HIGHEST LEGAL BLOCK TYPE
    102
    103					;
    104					; TXT-BLOCK TYPE 3
    105					;
    106
    107	000164	032767 	000000G	000000G	TXT:	BIT	#TS$KF,$SWTCH	;TASK IMAGE FILE SPECIFIED?
    108	000172	001511 				BEQ	RPEAT		;IF EQ NO
    109	000174					CALL	$GTWRD		;GET LOAD ADDRESS
    110	000200	162703 	000002 			SUB	#2,R3		;ADJUST BYTE COUNT
    111	000204	012702 	000006'			MOV	#CRSCT,R2	; GET ADDRESS OF CURRENT SECTION                ;**NEW**
    112	000210	132762 	000000C	000001G		BITB	#<CS$VSC!CS$VAS>,C$SFLG+1(R2) ; VIRTUAL SECTION?
    113	000216	001027 				BNE	30$		; IF NE YES, ILLEGAL
    114	000220	132762 	000000G	000000G		BITB	#CS$REL,C$SFLG(R2);ABS SECTION?                                 ;**-1
P5ELM	MACRO M1110  22-AUG-78 01:54  PAGE 2-2


    115	000226	001404 				BEQ	10$		;IF EQ YES
    116	000230	066200 	000000G			ADD	C$SCUR(R2),R0	;ADD CURRENT SECTOR BASE
    117	000234	066700 	000000G			ADD	$OFFST,R0	;ADD OFFSET BIAS
    118	000240	010004 			10$:	MOV	R0,R4		;SAVE LOAD ADDRESS
    119	000242	162700 	000004 			SUB	#4,R0		;BIAS FOR DISPLACEMENT BYTES
    120	000246	010067 	177532 			MOV	R0,CRADR	;STORE AS CURRENT VIRTUAL ADDRESS
    121	000252				20$:	CALL	$GTBYT		;GET NEXT BYTE
    122	000256	010001 				MOV	R0,R1		;TEXT BYTE TO R1
    123	000260	010400 				MOV	R4,R0		;VIRTUAL ADDRESS TO R0
    124	000262					CALL	$WRBYT		;WRITE BYTE INTO IMAGE FILE
    125	000266	005204 				INC	R4		;INCREMENT VIRTUAL ADDRESS
    126	000270					SOB	R3,20$		;REPEAT
    127	000274					RETURN			;
    128	000276				30$:				;
    129	000276	012701 	000000C			MOV	#<S$V2*400!E$R91>,R1 ; GET ERROR/SEVERITY
    130	000302	016702 	000000G			MOV	$INPPT,R2	; GET INPUT FILE RECORD BLOCK
    131	000306	016202 	000000G			MOV	R$NAME(R2),R2	; POINT TO NAME BLOCK
    132	000312					CALL	$ERMSG		; FATAL, NO RETURN
    133
    134					;
    135					; RLD-BLOCK TYPE 4
    136					;
    137
    138	000316	032767 	000000G	000000G	RLD:	BIT	#TS$KF,$SWTCH	;TASK IMAGE FILE SPECIFIED?
    139	000324	001434 				BEQ	RPEAT		;IF EQ NO
    140	000326				10$:	CALL	$GTBYT		;GET COMMAND BYTE
    141	000332	010067 	177444 			MOV	R0,CMDBT	;SAVE COMMAND BYTE
    142	000336					CALL	$GTBYT		;GET DISPLACEMENT BYTE
    143	000342	162703 	000002 			SUB	#2,R3		;ADJUST BYTE COUNT
    144	000346	010004 				MOV	R0,R4		;SAVE DISPLACEMENT BYTE
    145	000350	066704 	177430 			ADD	CRADR,R4	;CALCULATE VIRTUAL ADDRESS
    146	000354	016700 	177422 			MOV	CMDBT,R0	;RETRIEVE COMMAND BYTE
    147	000360	042700 	177600 			BIC	#177600,R0	;CLEAR GARBAGE BITS
    148	000364	020027 	000020 			CMP	R0,#LGCMD	;LEGAL COMMAND?
    149	000370	101010 				BHI	20$		;IF HI NO
    150	000372	006300 				ASL	R0		;MAKE WORD INDEX
    151	000374	012705 	000006'			MOV	#CRSCT,R5	; GET ADDRESS OF CURRENT SECTION DATA           ;**NEW**
    152	000400					CALL	@RLDVCT(R0)	;DISPATCH TO RELOCATION ROUTINE                 ;**-1
    153	000404	005703 				TST	R3		;ANY MORE TO PROCESS?
    154	000406	003347 				BGT	10$		;IF GT YES
    155	000410					RETURN			;
    156	000412	000167 	001500 		20$:	JMP	ILFMT		;
    157
    158					;
    159					; RPEAT-BLOCK TYPE 5
    160					;
    161
    162	000416	005067 	000000G		RPEAT:	CLR	$NBYTE		;CLEAR BYTE COUNT
    163	000422					RETURN			;
    164
    165					;
    166					; RLD DISPATCH VECTOR
    167					;
    168
    169	000424	002116'			RLDVCT:	.WORD	ILFMT		;ILLEGAL FORMAT
    170	000426	000466'				.WORD	INTREL		;INTERNAL RELOCATION
    171	000430	000520'				.WORD	GBLREL		;GLOBAL RELOCATION
P5ELM	MACRO M1110  22-AUG-78 01:54  PAGE 2-3


    172	000432	000526'				.WORD	INTDIS		;INTERNAL DISPLACED RELOCATION
    173	000434	000542'				.WORD	GBLDIS		;GLOBAL DISPLACED RELOCATION
    174	000436	000556'				.WORD	GBLADD		;GLOBAL ADDITIVE RELOCATION
    175	000440	000574'				.WORD	GADDIS		;GLOBAL ADDITIVE DISPLACED RELOCATION
    176	000442	001032'				.WORD	LOCDEF		;LOCATION COUNTER DEFINITION
    177	000444	001076'				.WORD	LOCMOD		;LOCATION COUNTER MODIFICATION
    178	000446	001156'				.WORD	LIMIT		;LIMIT DIRECTIVE
    179	000450	000620'				.WORD	SECREL		;SECTOR RELOCATION
    180	000452	002116'				.WORD	ILFMT		;ILLEGAL FORMAT
    181	000454	000632'				.WORD	SCRDIS		;SECTOR DISPLACED RELOCATION
    182	000456	000670'				.WORD	SECADD		;SECTOR ADDITIVE RELOCATION
    183	000460	000712'				.WORD	SECDIS		;SECTOR ADDITIVE DISPLACED RELOCATION
    184	000462	001220'				.WORD	CPLREL		;++004 COMPLEX RELOCATION
    185	000464	000652'				.WORD	LIBADD		; RESIDENT LIBRARY ADDITIVE RELOCATION
    186		000020 			LGCMD=<.-RLDVCT-2>/2		;HIGHEST LEGAL RLD TYPE
    187
    188					;
    189					; INTERNAL RELOCATION
    190					;
    191
    192	000466				INTREL:				;
    193	000466					CALL	$GTWRD		; GET CONSTANT
    194	000472	010046 				MOV	R0,-(SP)	; SAVE CONSTANT
    195	000474	016500 	000000G			MOV	C$SCUR(R5),R0	; GET CURRENT SECTION BASE
    196	000500	010501 				MOV	R5,R1		; COPY SECTION ADDRESS
    197	000502					CALL	GTMOD		; REDUCE TO MODULUS OF WINDOW
    198	000506	103402 				BCS	10$		; IF C/S VIRTUAL SECTION
    199	000510	066700 	000000G			ADD	$OFFST,R0	;ADD OFFSET BIAS
    200	000514				10$:				;
    201	000514	062600 				ADD	(SP)+,R0	; INCLUDE CONSTANT
    202	000516	000510 				BR	ADJCNT		;
    203
    204					;
    205					; GLOBAL RELOCATION
    206					;
    207
    208	000520				GBLREL:	CALL	GTSVL		;GET SYMBOL VALUE
    209	000524	000507 				BR	IMGOUT		;
    210
    211					;
    212					; INTERNAL DISPLACED RELOCATION
    213					;
    214
    215	000526				INTDIS:	CALL	$GTWRD		;GET CONSTANT
    216	000532	160400 				SUB	R4,R0		;CALCULATE DISPLACEMENT
    217	000534	162700 	000002 			SUB	#2,R0		;
    218	000540	000477 				BR	ADJCNT		;
    219
    220					;
    221					; GLOBAL DISPLACED RELOCATION
    222					;
    223
    224	000542				GBLDIS:	CALL	GTSVL		;GET SYMBOL VALUE
    225	000546	160400 				SUB	R4,R0		;CALCULATE DISPLACEMENT
    226	000550	162700 	000002 			SUB	#2,R0		;
    227	000554	000473 				BR	IMGOUT		;
    228
P5ELM	MACRO M1110  22-AUG-78 01:54  PAGE 2-4


    229					;
    230					; GLOBAL ADDITIVE RELOCATION
    231					;
    232
    233	000556				GBLADD:	CALL	GTSVL		;GET SYMBOL VALUE
    234	000562	010046 				MOV	R0,-(SP)	;SAVE VALUE
    235	000564					CALL	$GTWRD		;GET ADDITIVE CONSTANT
    236	000570	062600 				ADD	(SP)+,R0	;ADD CONSTANT
    237	000572	000462 				BR	ADJCNT		;
    238
    239					;
    240					; GLOBAL ADDITIVE DISPLACED RELOCATION
    241					;
    242
    243	000574				GADDIS:	CALL	GTSVL		;GET SYMBOL VALUE
    244	000600	010046 				MOV	R0,-(SP)	;SAVE VALUE
    245	000602					CALL	$GTWRD		;GET CONSTANT
    246	000606	062600 				ADD	(SP)+,R0	;ADD CONSTANT
    247	000610	160400 				SUB	R4,R0		;CALCULATE DISPLACEMENT
    248	000612	162700 	000002 			SUB	#2,R0		;
    249	000616	000450 				BR	ADJCNT		;
    250
    251					;
    252					; SECTOR RELOCATION
    253					;
    254
    255	000620				SECREL:	CALL	GTCVL		;GET CURRENT SECTOR BASE
    256	000624					CALL	GTMOD		; REDUCE R0 TO MODULUS OF WINDOW SIZE
    257	000630	000445 				BR	IMGOUT		;
    258
    259					;
    260					; SECTOR DISPLACED RELOCATION
    261					;
    262
    263	000632				SCRDIS:	CALL	GTCVL		;GET CURRENT SECTOR BASE
    264	000636					CALL	GTMOD		; REDUCE R0 TO MODULUS OF WINDOW SIZE
    265	000642	160400 				SUB	R4,R0		;CALCULATE DISPLACEMENT
    266	000644	162700 	000002 			SUB	#2,R0		;
    267	000650	000435 				BR	IMGOUT		;
    268
    269					;
    270					; RESIDENT LIBRARY ADDITIVE RELOCATION
    271					;
    272
    273	000652				LIBADD:				;
    274	000652					CALL	GTLIB		; GET LIBRARY OFFSET BIAS
    275	000656	010046 				MOV	R0,-(SP)	; SAVE OFFSET BIAS
    276	000660					CALL	$GTWRD		; GET ADDITIVE CONSTANT
    277	000664	062600 				ADD	(SP)+,R0	; ADD LIBRARY BIAS
    278	000666	000424 				BR	ADJCNT		; ADJUST COUNT
    279
    280
    281					;
    282					; SECTOR ADDITIVE RELOCATION
    283					;
    284
    285	000670				SECADD:	CALL	GTCVL		;GET CURRENT SECTOR BASE VALUE
P5ELM	MACRO M1110  22-AUG-78 01:54  PAGE 2-5


    286	000674					CALL	GTMOD		; REDUCE RESULT TO MODULUS OF WINDOW
    287	000700	010046 				MOV	R0,-(SP)	;SAVE VALUE
    288	000702					CALL	$GTWRD		;GET ADDITIVE CONSTANT
    289	000706	062600 				ADD	(SP)+,R0	;ADD CONSTANT
    290	000710	000413 				BR	ADJCNT		;
    291
    292					;
    293					; SECTOR ADDITIVE DISPLACED RELOCATION
    294					;
    295
    296	000712				SECDIS:	CALL	GTCVL		;GET CURRENT SECTOR BASE VALUE
    297	000716					CALL	GTMOD		; REDUCE RESULT TO MODULUS OF WINDOW
    298	000722	010046 				MOV	R0,-(SP)	;SAVE VALUE
    299	000724					CALL	$GTWRD		;GET ADDITIVE CONSTANT
    300	000730	062600 				ADD	(SP)+,R0	;ADD CONSTANT
    301	000732	160400 				SUB	R4,R0		;CALCULATE DISPLACEMENT
    302	000734	162700 	000002 			SUB	#2,R0		;
    303
    304
    305					;
    306					; ADJUST BYTE COUNT
    307					;
    308
    309	000740	162703 	000002 		ADJCNT:	SUB	#2,R3		;ADJUST BY ONE WORD
    310
    311					;
    312					; IMAGE OUTPUT
    313					;
    314
    315	000744	012746 	000000G		IMGOUT:	MOV	#$WRWRD,-(SP)	;ASSUME WORD WRITE
    316	000750	032767 	000200 	177024 		BIT	#200,CMDBT	;BYTE COMMAND?
    317	000756	001422 				BEQ	10$		;IF EQ NO
    318	000760	012716 	000000G			MOV	#$WRBYT,(SP)	;SET FOR BYTE WRITE
    319	000764	032700 	177400 			BIT	#177400,R0	;TOP BYTE ZERO?
    320	000770	001415 				BEQ	10$		;IF EQ YES BYPASS TEST
    321	000772	110002 				MOVB	R0,R2		;COPY BYTE
    322	000774	020002 				CMP	R0,R2		;IDENTICAL RESULT?
    323	000776	001412 				BEQ	10$		;IF EQ YES
    324	001000	010046 				MOV	R0,-(SP)	;SAVE OUTPUT VALUE
    325	001002	016702 	000000G			MOV	$CRELM,R2	;GET ADDRESS OF ELEMENT DESCRIPTOR
    326	001006	062702 	000000G			ADD	#E$LMOD,R2	;POINT TO MODULE NAME
    327	001012	012701 				MOV	(PC)+,R1	;GET ERROR/SEVERITY
    328	001014	   000G	   000G			.BYTE	E$R27,S$V0	;DIAGNOSTIC
    329	001016					CALL	$ERMSG		;OUTPUT ERROR MESSAGE
    330	001022	012600 				MOV	(SP)+,R0	;RESTORE R0
    331	001024	010001 			10$:	MOV	R0,R1		;OUTPUT VALUE TO R1
    332	001026	010400 				MOV	R4,R0		;VIRTUAL ADDRESS TO R0
    333	001030					CALLR	@(SP)+		;++004 OUTPUT TEXT - EXIT
    334
    335					;
    336					; LOCATION COUNTER DEFINITION
    337					;
    338
    339	001032				LOCDEF:	CALL	GTCVL		;GET CURRENT SECTOR BASE AND ADDR
    340	001036					CALL	CPYSCT		; COPY SECTION DATA                             ;**NEW**
    341	001042	010046 				MOV	R0,-(SP)	;SAVE CURRENT BASE ADDRESS                      ;**-1
    342	001044	010200 				MOV	R2,R0		;SET SEGMENT ADDRESS
P5ELM	MACRO M1110  22-AUG-78 01:54  PAGE 2-6


    343	001046					CALL	$ADRST		;SET ADDRESS LIMITS
    344	001052					CALL	$GTWRD		;GET OFFSET VALUE
    345	001056	162703 	000002 			SUB	#2,R3		;ADJUST BYTE COUNT
    346	001062	062600 				ADD	(SP)+,R0	;ADD IN CURRENT BASE ADDRESS
    347	001064	162700 	000004 			SUB	#4,R0		;BACK UP FOR DISPLACEMENT BYTE
    348	001070	010067 	176710 			MOV	R0,CRADR	;SET CURRENT VIRTUAL ADDRESS
    349	001074					RETURN			;
    350
    351					;
    352					; LOCATION COUNTER MODIFICATION
    353					;
    354
    355	001076				LOCMOD:				;
    356	001076					CALL	$GTWRD		; GET OFFSET CONSTANT
    357	001102	010046 				MOV	R0,-(SP)	; SAVE CONSTANT
    358	001104	005000 				CLR	R0		; CLEAR SECTION BASE
    359	001106	162703 	000002 			SUB	#2,R3		;ADJUST BYTE COUNT
    360	001112	132765 	000000G	000000G		BITB	#CS$REL,C$SFLG(R5);ABS SECTION?
    361	001120	001410 				BEQ	10$		;IF EQ YES
    362	001122	016500 	000000G			MOV	C$SCUR(R5),R0	; GET CURRENT SECTION BASE
    363	001126	010501 				MOV	R5,R1		; COPY ADDRESS OF CURRENT SECTION
    364	001130					CALL	GTMOD		; REDUCE TO MODULUS OF WINDOW
    365	001134	103402 				BCS	10$		; IF C/S SECTION IS VIRTUAL
    366	001136	066700 	000000G			ADD	$OFFST,R0	;ADD OFFSET BIAS
    367	001142				10$:				;
    368	001142	062600 				ADD	(SP)+,R0	; ADD IN CONSTANT
    369	001144	162700 	000004 			SUB	#4,R0		; BACK UP FOR DISPLACEMENT BYTE
    370	001150	010067 	176630 			MOV	R0,CRADR	;SET CURRENT VIRTUAL ADDRESS
    371	001154					RETURN			;
    372
    373					;
    374					; LIMIT
    375					;
    376
    377	001156	016701 	000000G		LIMIT:	MOV	$OFFST,R1	;GET LOWEST VIRTUAL ADDRESS
    378
    379						.IF	DF	R$$11M
    380
    381	001162	066701 	000000G			ADD	$HDSIZ,R1	; OFSET PAST HEADER
    382
    383						.ENDC
    384
    385	001166	010400 				MOV	R4,R0		;SET VIRTUAL ADDRESS
    386	001170					CALL	$WRWRD		;WRITE FIRST WORD
    387	001174	016701 	000000G			MOV	$HVRTL,R1	;GET HIGHEST VIRTUAL ADDRESS
    388	001200	005201 				INC	R1		; INCREMENT VIRTUAL ADDRESS
    389	001202	066701 	000000G			ADD	$OFFST,R1	;ADD IN OFFSET BIAS
    390	001206	010400 				MOV	R4,R0		;SET VIRTUAL ADDRESS
    391	001210	062700 	000002 			ADD	#2,R0		;ADJUST TO NEXT WORD
    392	001214					CALLR	$WRWRD		;++004 WRITE SECOND WORD
    393
    394
    395					;
    396					;++004 COMPLEX RELOCATION STRING PROCESSING
    397					;
    398
    399	001220				CPLREL:
P5ELM	MACRO M1110  22-AUG-78 01:54  PAGE 2-7


    400	001220	024646 				CMP	-(SP),-(SP)	;++004 ALLOCATE GUARD WORDS FROM STACK
    401	001222	010602 				MOV	SP,R2		;++004 MARK BOTTOM OF STACK
    402	001224	010267 	176550 			MOV	R2,BEGST	;++004 SAVE BOTTOM
    403	001230	162706 	000060 			SUB	#48.,SP		;++004 ALLOCATE STACK SPACE
    404	001234	010667 	176572 			MOV	SP,ENDST	;++004 MARK TOP OF STACK
    405	001240				10$:
    406	001240					CALL	$GTBYT		;++004 COMAND BYTE => R0
    407	001244	005303 				DEC	R3		;++004 DECREMENT BYTE COUNT
    408	001246	020027 	000021 			CMP	R0,#LGCPL	;++004 LEGAL COMMAND TYPE?
    409	001252	101005 				BHI	30$		;++004 NO -- BAD FORMAT
    410	001254	006300 				ASL	R0		;++004 CONVERT TO WORD OFFSET
    411	001256					CALL	@CPLVCT(R0)	;++004 CALL PROCESSING ROUTINE
    412	001262	005703 				TST	R3		;++004 CHECK BYTE COUNT
    413	001264	003365 				BGT	10$		;++004 OK -- GO AGAIN
    414	001266				30$:
    415	001266	000167 	000624 			JMP	ILFMT		;++004 BAD COUNT
    416
    417	001272				CPLVCT:				;++004 COMPLEX RELOCATION PROCESSING VECTOR
    418	001272	001336'				.WORD	CPLNOP		;++004 NOP
    419	001274	001342'				.WORD	CPLADD		;++004 ADD
    420	001276	001340'				.WORD	CPLSUB		;++004 SUBTRACT
    421	001300	001376'				.WORD	CPLMUL		;++004 MULTIPLY
    422	001302	001404'				.WORD	CPLDIV		;++004 DIVIDE
    423	001304	001354'				.WORD	CPLAND		;++004 'AND'
    424	001306	001372'				.WORD	CPLOR		;++004 'OR'
    425	001310	001362'				.WORD	CPLXOR		;++004 'XOR'
    426	001312	001346'				.WORD	CPLNEG		;++004 NEGATE
    427	001314	001350'				.WORD	CPLCOM		;++004 COMPLEMENT
    428	001316	001642'				.WORD	CPLSTO		;++004 STORE
    429	001320	001634'				.WORD	CPLSTD		;++004 STORE DISPLACED
    430	001322	002116'				.WORD	ILFMT		;++004 ILLEGAL FORMAT
    431	001324	002116'				.WORD	ILFMT		;++004 ILLEGAL FORMAT
    432	001326	001526'				.WORD	CPLPGB		;++004 PUSH GLOBAL
    433	001330	001542'				.WORD	CPLPRL		;++004 PUSH RELOCATABLE VALUE
    434	001332	001620'				.WORD	CPLGTV		; PUSH CONSTANT
    435	001334	001534'				.WORD	CPLPL		; PUSH LIBRARY CONSTANT
    436		000021 			LGCPL=<.-CPLVCT>/2-1
    437
    438
    439					;
    440					;++004  COMPLEX RELOCATION -- 'NOP'
    441					;
    442
    443	001336				CPLNOP:	RETURN
    444
    445					;
    446					;++004  SUBTRACT (SP)+,(SP)
    447					;
    448
    449	001340	005412 			CPLSUB:	NEG	@R2		;++004 NEGATE TOP ITEM ON STACK
    450
    451					;
    452					;++004  ADD (SP)+,(SP)
    453					;
    454
    455	001342	062212 			CPLADD:	ADD	(R2)+,(R2)	;++004 ADD TOP TWO ITEMS
    456	001344	000462 				BR	CPLRTN		;++004 CHECK STACK, EXIT
P5ELM	MACRO M1110  22-AUG-78 01:54  PAGE 2-8


    457
    458					;
    459					;++004  COMPLEX NEGATE -'(SP)'
    460					;
    461
    462	001346				CPLNEG:				;++004 DECREMENT TOP ITEM
    463	001346	005312 				DEC	@R2
    464
    465					;
    466					;++004  COMPLEX COMPLEMENT :(SP)
    467					;
    468
    469	001350				CPLCOM:
    470	001350	005112 				COM	@R2		;++004 COMPLEMENT TOP ITEM
    471	001352					RETURN			;++004 EXIT
    472
    473					;
    474					;++004  COMPLEX 'AND' (SP)+,(SP)
    475					;
    476
    477	001354				CPLAND:
    478	001354	005112 				COM	(R2)		;++004 COMPLEMENT TOP ITEM
    479	001356	042212 				BIC	(R2)+,(R2)	;++004 'AND' BOTH ITEMS
    480	001360	000454 				BR	CPLRTN		;++004 EXIT
    481
    482					;
    483					;++004 EXCLUSIVE OR (SP)+,(SP)
    484					;
    485
    486	001362				CPLXOR:
    487	001362	016201 	000002 			MOV	2(R2),R1	;++004 FETCH SECOND ITEM
    488	001366	042212 				BIC	(R2)+,(R2)	;++004 CLEAR BITS SET IN BOTH -- SECOND ITEM
    489	001370	040142 				BIC	R1,-(R2)	;++004 DITTO FIRST ITEM
    490
    491					;
    492					;++004  COMPLEX 'OR' (SP)+,(SP)
    493					;
    494
    495	001372				CPLOR:
    496	001372	052212 				BIS	(R2)+,(R2)	;++004 'OR' BOTH ITEMS.
    497	001374	000446 				BR	CPLRTN		;++004 EXIT
    498
    499					;
    500					;++004 COMPLEX MULTIPLY (SP)+,(SP)
    501					;
    502
    503	001376				CPLMUL:
    504						.IF	NDF	V1145
    505	001376	012746 	002374'			MOV	#MUL1,-(SP)	;++004 SET ADDRESS OF COMP. ROUTINE
    506	001402	000421 				BR	SGNOP		;++004 EXECUTE SIGNED ARITHMETIC
    507						.IFF
    508						MOV	(R2)+,R1	;++004 GET TOP ITEM - REGISTER MUST BE ODD
    509						MUL	(R2)+,R1	;++004 MULTIPLY TOP TWO ITEMS
    510						MOV	R1,-(R2)	;++004 STORE RESULT
    511						BR	CPLRTN		;++004 EXIT
    512						.ENDC
    513
P5ELM	MACRO M1110  22-AUG-78 01:54  PAGE 2-9


    514					;
    515					;++004  COMPLEX DIVIDE (SP)+,(SP)
    516					;
    517
    518	001404				CPLDIV:
    519						.IF	DF	V1145
    520						MOV	2(R2),R1	;++004 FETCH LOW PART
    521						SXT	R0		;++004 EXTEND SIGN
    522						DIV	(R2)+,R0	;++004 DIVIDE EM UP
    523						BVC	SGNEX		;++004 OK - DIVISOR NOT ZERO
    524						.IFF
    525	001404	005722 				TST	(R2)+		;++004 VERIFY DIVISOR .NE. 0
    526	001406	001014 				BNE	10$		;++004 OK -- PROCEED
    527					;
    528						.IFTF
    529	001410	010246 				MOV	R2,-(SP)	;++004 SAVE 'STACK POINTER'
    530	001412	016702 	000000G			MOV	$CRELM,R2	;++004 FETCH ADDRESS OF CURRENT ELEMENT
    531	001416	062702 	000000G			ADD	#E$LMOD,R2	;++004 POINT TO MODULE NAME
    532	001422	012701 				MOV	(PC)+,R1	;++004 ERROR/SEVERITY
    533	001424	   000G	   000G			.BYTE	E$R72,S$V0	;++004 DIAGNOSTIC
    534	001426					CALL	$ERMSG		;++004 REPORT ERROR
    535	001432	012602 				MOV	(SP)+,R2	;++004 RESTORE 'STACK POINTER'
    536	001434	005012 				CLR	(R2)		;++004 FORCE RESULT OF 0
    537	001436	000425 				BR	CPLRTN		;++004 EXIT
    538						.IFF
    539	001440				10$:
    540	001440	005742 				TST	-(R2)		;++004 POINT TO FIRST ITEM
    541	001442	012746 	000000G			MOV	#$DIV,-(SP)	;++004 SET ADDRESS OF ARITH. ROUTINE
    542	001446				SGNOP:
    543	001446	011201 				MOV	(R2),R1		;++004 FETCH TOP ITEM
    544	001450	100001 				BPL	10$		;++004 SEE IF POSITIVE
    545	001452	005401 				NEG	R1		;++004 GET ABS. VALUE
    546	001454				10$:
    547	001454	016200 	000002 			MOV	2(R2),R0	;++004 FETCH SECOND ITEM
    548	001460	100002 				BPL	20$		;++004 GET ABS VALUE
    549	001462	005400 				NEG	R0		;++004
    550	001464	005112 				COM	(R2)		;++004 SIGN .NE. 0 -- SO EFFECTIVE 'XOR'
    551	001466				20$:
    552	001466					CALL	@(SP)+		;++004 CALL ARITHMETIC ROUTINE
    553	001470	005722 				TST	(R2)+		;++004 CHECK SIGN OF RESULT
    554	001472	100001 				BPL	SGNEX		;++004 OK AS IS -- EXIT
    555	001474	005400 				NEG	R0		;++004 SIGNS WERE DIFFERENT - NEGATE
    556						.ENDC
    557	001476				SGNEX:
    558	001476	010012 				MOV	R0,(R2)		;++004 REPLACE TOP ITEM WITH RESULT
    559	001500	000404 				BR	CPLRTN		;++004 CHECK STACK, EXIT
    560
    561					;
    562					;++004  CHECK FOR STACK OVERFLOW/UNDERFLOW
    563					;
    564
    565	001502				CPLRT1:
    566	001502	020267 	176324 			CMP	R2,ENDST	;++004 SEE IF 'PUSH' CAUSED OVERFLOW
    567	001506	101404 				BLOS	CPLERX		;++004 YES - ERROR
    568	001510					RETURN			;++004 NO, EXIT
    569	001512				CPLRTN:
    570	001512	020267 	176262 			CMP	R2,BEGST	;++004 CHECK STACK POINTER VS. START
P5ELM	MACRO M1110  22-AUG-78 01:54  PAGE 2-10


    571	001516	103402 				BLO	CPLEXT		;++004 IF .LO. -OK
    572	001520	000167 	000372 		CPLERX:	JMP	ILFMT		;++004 ELSE ERROR
    573	001524				CPLEXT:	RETURN			;++004 EXIT
    574
    575					;
    576					;++004  PUSH GLOBAL SYMBOL
    577					;
    578
    579	001526				CPLPGB:
    580	001526					CALL	GTSVL		;++004 GET SYMBOL VALUE IN R0
    581	001532	000436 				BR	CPLPSH		;++004 PUSH SYMBOL VALUE
    582
    583					;
    584					; PUSH LIBRARY CONSTANT
    585					;
    586
    587	001534				CPLPL:				;
    588	001534					CALL	GTLIB		; GET LIBRARY RELOCATION BIAS
    589	001540	000433 				BR	CPLPSH		; PUSH RELOCATION BIAS
    590
    591					;
    592					;++004  PUSH RELOCATABLE VALUE
    593					;
    594
    595						.ENABL	LSB
    596
    597	001542				CPLPRL:
    598	001542					CALL	$GTBYT		;++004 GET SECTION NUMBER
    599	001546	005303 				DEC	R3		;++004 DECREMENT BYTE COUNT
    600	001550	016701 	000000G			MOV	$CRELM,R1	;++004 GRAB ADDRESS OF CURRENT ELEMENT
    601	001554	020061 	000000G			CMP	R0,E$LNUM(R1)	;++004 SEE IF SECTOR NO. OK
    602	001560	101357 				BHI	CPLERX		;++004 NO - ERROR
    603	001562	016101 	000000G			MOV	E$LCMT(R1),R1	;++004 GET MAPPING TABLE ADDRESS
    604	001566	006300 				ASL	R0		;++004 CONVERT SECTION NO. TO TWO-WORD INDEX
    605	001570	006300 				ASL	R0		;++004
    606	001572	060001 				ADD	R0,R1		;++004 GET ENTRY IN TABLE
    607	001574	011101 				MOV	(R1),R1		; GET VIRTUAL ADDRESS OF SECTION                ;**NEW**
    608	001576					CALL	GTCVL2		;++004 GET RELOCATION BASE IN R0                ;**-1
    609	001602					CALL	GTMOD		; REDUCE TO MODULO OF WINDOW SIZE
    610	001606	010046 				MOV	R0,-(SP)	; SAVE VALUE
    611	001610					CALL	$GTWRD		; GET OFFSET
    612	001614	062600 				ADD	(SP)+,R0	; ADD RELOCATION BASE
    613	001616	000402 				BR	10$		;
    614	001620				CPLGTV:				;
    615	001620					CALL	$GTWRD		; GET CONSTANT
    616	001624				10$:				;
    617	001624	162703 	000002 			SUB	#2,R3		;++004 BOOKEEP THE BYTE COUNT
    618	001630				CPLPSH:
    619	001630	010042 				MOV	R0,-(R2)	;++004 PUSH RESULT
    620	001632	000723 				BR	CPLRT1		;++004 EXIT
    621
    622						.DSABL	LSB
    623
    624					;
    625					;++004  COMPLEX STORE - DISPLACED
    626					;
    627					;++004  THIS OPERATION TERMINATES A COMPLEX RELOCATION STRING
P5ELM	MACRO M1110  22-AUG-78 01:54  PAGE 2-11


    628					;
    629
    630	001634				CPLSTD:
    631	001634	160412 				SUB	R4,@R2		;++004 SUBTRACT VIRTUAL ADDRESS
    632	001636	162712 	000002 			SUB	#2,@R2		;++004 OFFSET FOR PC
    633					;
    634					;++004  COMPLEX STORE- NOT DISPLACED
    635					;
    636					;++004  THIS OPERATION TERMINATES A COMPLEX RELOCATION STRING
    637					;
    638	001642	012200 			CPLSTO:	MOV	(R2)+,R0	;++004 FETCH DATA TO BE STORED
    639	001644	020267 	176130 			CMP	R2,BEGST	;++004 CHECK STACK
    640	001650	001323 				BNE	CPLERX		;++004 ERROR IF NOT AT BEGINNING
    641	001652				10$:
    642	001652	010206 				MOV	R2,SP		;++004 RESTORE STACK
    643	001654	022626 				CMP	(SP)+,(SP)+ 	;+004 FIX STACK
    644	001656					CALLR	IMGOUT		;++004 OUTPUT TASK IMAGE DATA
    645					                                                                                ;**NEW**
    646					;                                                                               ;**NEW**
    647					; COPY SECTION DATA TO LOCAL STORAGE                                            ;**NEW**
    648					;                                                                               ;**NEW**
    649					                                                                                ;**NEW**
    650	001662				CPYSCT:				;                                               ;**NEW**
    651	001662					SAVVR			; SAVE VOLATILE REGISTERS                       ;**NEW**
    652	001666	012700 	000006'			MOV	#CRSCT,R0	; GET BLOCK TO STORE SECTION DATA               ;**NEW**
    653	001672	012702 	000000C			MOV	#C$SLGH/2,R2	; GET WORD COUNT FOR ENTRY                      ;**NEW**
    654	001676				10$:				;                                               ;**NEW**
    655	001676	012120 				MOV	(R1)+,(R0)+	; COPY ENTRY                                    ;**NEW**
    656	001700					SOB	R2,10$		;                                               ;**NEW**
    657	001704					RETURN			;                                               ;**NEW**
    658					                                                                                ;**NEW**
    659					;
    660					; GET SECTION ENTRY ADDRESS AND CURRENT BASE
    661					;
    662
    663	001706				GTCVL:	CALL	GTSYM		;GET SECTION NAME
    664	001712	062700 	000000G			ADD	#S$GCST,R0	;POINT TO SECTION TABLE HEADER
    665	001716					CALL	$SRCH		;SEARCH FOR SECTION
    666	001722	103475 				BCS	ILFMT		;IF CS ILLEGAL FORMAT
    667	001724	016702 	000000G			MOV	$CRVSG,R2	; ASSUME CURRENT SEGMENT
    668	001730	132760 	000000G	000000G		BITB	#CS$IND,C$SFLG(R0);INDIRECT REFERENCE?
    669	001736	001410 				BEQ	GTCVL3		; IF EQ NO                                      ;**NEW**
    670	001740	016002 	000000G			MOV	C$SLTH(R0),R2	;GET ADDRESS OF REAL SEGMENT                    ;**-1
    671	001744	016001 	000000G			MOV	C$SBSE(R0),R1	; GET VA OF REAL ENTRY                          ;**NEW**
    672	001750				GTCVL2:				;                                               ;**NEW**
    673	001750	010246 				MOV	R2,-(SP)	; SAVE R2                                       ;**NEW**
    674	001752					CALL	$CVRL		; CONVERT TO REAL ADDRESS                       ;**NEW**
    675	001756	012602 				MOV	(SP)+,R2	; RESTORE R2                                    ;**NEW**
    676	001760				GTCVL3:				;                                               ;**NEW**
    677	001760	010001 				MOV	R0,R1		; SAVE REAL ADDRESS                             ;**NEW**
    678	001762	016100 	000000G			MOV	C$SCUR(R1),R0	; GET CURRENT BASE                              ;**NEW**
    679	001766	032761 	000000C	000000G		BIT	#<CS$VSC!CS$VAS*400!CS$LIB>,C$SFLG(R1) ; LIBRARY SECTION?
    680	001774	001007 				BNE	20$		;IF NE YES
    681	001776	066700 	000000G			ADD	$OFFST,R0	;ASSUME RELATIVE SECTION
    682	002002	132761 	000000G	000000G		BITB	#CS$REL,C$SFLG(R1);REL SECTION?
    683	002010	001001 				BNE	20$		;IF NE YES
    684	002012	005000 				CLR	R0		;BASE OF ALL ABS SECTIONS IS ZERO
P5ELM	MACRO M1110  22-AUG-78 01:54  PAGE 2-12


    685	002014				20$:	RETURN			;
    686
    687					;
    688					; GET RESIDENT LIBRARY RELOCATION BIAS
    689					;
    690
    691	002016				GTLIB:				;
    692	002016	016700 	000000G			MOV	$OFFST,R0	; GET OFFSET BIAS
    693	002022	016701 	000000G			MOV	$CRELM,R1	; GET ADDRESS OF CURRENT ELEMENT
    694	002026	032761 	000000G	000000G		BIT	#SW$RL,E$LSWT(R1) ; RESIDENT LIBRARY ELEMENT?
    695	002034	001404 				BEQ	10$		; IF EQ NO
    696	002036	016100 	000000G			MOV	E$LLGH(R1),R0	; GET LIBRARY LIST ENTRY
    697	002042	016000 	000000G			MOV	L$DSA(R0),R0	; GET BASE ADDRESS OF LIBRARY
    698	002046				10$:				;
    699	002046					RETURN			;
    700
    701					;
    702					; REDUCE SECTION OFFSET TO MODULUS OF WINDOW SIZE IF SECTION
    703					; IS VIRTUAL
    704					;
    705
    706	002050				GTMOD:				;
    707	002050	000241 				CLC			; ASSUME NOT VIRTUAL SECTION
    708	002052	132761 	000000G	000001G		BITB	#CS$VSC,C$SFLG+1(R1) ; VIRTUAL SECTION?
    709	002060	001415 				BEQ	10$		; IF EQ NO
    710	002062	132761 	000000G	000001G		BITB	#CS$VAS,C$SFLG+1(R1) ; VIRTUAL ARRAY?
    711	002070	001010 				BNE	5$		; IF NE YES
    712	002072	016146 	000000G			MOV	C$SBSE(R1),-(SP) ; COPY BASE ADDRESS
    713
    714						.IF DF	V1145
    715
    716						MOV	C$SLTH(R1),-(SP) ; SET DIVISOR
    717						MOV	R0,R1		; COPY SECTION OFFSET
    718						CLR	R0		; CLEAR HIGH PART
    719						DIV	(SP)+,R0	; DIVIDE
    720
    721						.IFF
    722
    723	002076	016101 	000000G			MOV	C$SLTH(R1),R1	; GET DIVISOR
    724	002102					CALL	$DIV		; DIVIDE
    725
    726						.ENDC
    727
    728	002106	010100 				MOV	R1,R0		; COPY REMAINDER
    729	002110	062600 				ADD	(SP)+,R0	; ADD BASE ADDRESS
    730	002112				5$:				;
    731	002112	000261 				SEC			; SET CARRY
    732	002114				10$:				;
    733	002114					RETURN			;
    734
    735
    736					;
    737					; ILLEGAL FORMAT-BLOCK TYPES 0 AND 6
    738					;
    739
    740	002116				ILFMT:				;                                               ;**NEW**
    741	002116	016702 	000000G			MOV	$INPPT,R2	; GET INPUT FILE RECORD BLOCK                   ;**NEW**
P5ELM	MACRO M1110  22-AUG-78 01:54  PAGE 2-13


    742	002122	016202 	000000G			MOV	R$NAME(R2),R2	;GET ADDRESS OF NAME STRING                     ;**-1
    743	002126	012701 				MOV	(PC)+,R1	;GET ERROR/SEVERITY
    744	002130	   000G	   000G			.BYTE	E$R14,S$V2	;FATAL-NO RETURN
    745	002132					CALL	$ERMSG		;OUTPUT ERROR MESSAGE
    746
    747					;
    748					; GET SYMBOL VALUE
    749					;
    750
    751	002136				GTSVL:				;                                               ;**NEW**
    752	002136	010246 				MOV	R2,-(SP)	; SAVE R2                                       ;**NEW**
    753	002140					CALL	GTSYM		; GET SYMBOL NAME                               ;**NEW**
    754	002144					CALL	$WSRCS		;SEARCH FOR SYMBOL                              ;**-1
    755	002150	103430 				BCS	20$		;IF CS NO FIND EM
    756	002152	005726 				TST	(SP)+		;CLEAN STACK
    757	002154	010001 				MOV	R0,R1		;SAVE SYMBOL ENTRY ADDRESS
    758	002156	005000 				CLR	R0		;ASSUME UNDEFINED SYMBOL
    759	002160	132761 	000000G	000000G		BITB	#SY$DEF,S$YFLG(R1);SYMBOL DEFINITION?
    760	002166	001421 				BEQ	20$		;IF EQ NO
    761	002170	132761 	000000G	000000G		BITB	#SY$IND,S$YFLG(R1);INDIRECT REFERENCE?
    762	002176	001405 				BEQ	10$		;IF EQ NO
    763	002200	016101 	000000G			MOV	S$YVAL(R1),R1	;GET ADDRESS OF REAL ENTRY
    764	002204					CALL	$CVRL		; CONVERT TO REAL ADDRESS                       ;**NEW**
    765	002210	010001 				MOV	R0,R1		; COPY REAL ADDRESS                             ;**NEW**
    766	002212	016100 	000000G		10$:	MOV	S$YVAL(R1),R0	;GET SYMBOL VALUE
    767	002216	132761 	000000G	000000G		BITB	#SY$REL,S$YFLG(R1);ABS SYMBOL?
    768	002224	001402 				BEQ	20$		;IF EQ YES
    769	002226	066700 	000000G			ADD	$OFFST,R0	;ADD OFFSET BIAS
    770	002232				20$:				;                                               ;**NEW**
    771	002232	012602 				MOV	(SP)+,R2	; RESTORE R2                                    ;**NEW**
    772	002234					RETURN			;                                               ;**NEW**
    773					                                                                                ;**-1
    774					;
    775					; GET SYMBOL
    776					;
    777
    778	002236				GTSYM:	CALL	$GTWRD		;GET FIRST HALF OF SYMBOL
    779	002242	010067 	175570 			MOV	R0,LCLSYM+2	;                                               ;**NEW**
    780	002246					CALL	$GTWRD		;GET SECOND HALF OF SYMBOL                      ;**-1
    781	002252	010067 	175562 			MOV	R0,LCLSYM+4	;                                               ;**NEW**
    782	002256	162703 	000004 			SUB	#4,R3		;ADJUST BYTE COUNT                              ;**-1
    783	002262	016700 	000000G			MOV	$CRSEG,R0	;GET ADDRESS OF CURRENT SEGMENT
    784	002266	012701 	000034'			MOV	#LCLSYM,R1	;GET ADDRESS OF LOCAL SYM DESCRIPTOR
    785	002272					RETURN			;
    786
    787
    788					;
    789					; END OF MODULE-BLOCK TYPE 6
    790					;
    791
    792	002274	005726 			MODND:	TST	(SP)+		;REMOVE RETURN FROM STACK
    793	002276	016704 	000000G			MOV	$CRELM,R4	;GET ADDRESS OF ELEMENT DESCRIPTOR
    794	002302	016403 	000000G			MOV	E$LCMT(R4),R3	;GET ADDRESS OF CMT TABLE
    795	002306	001431 				BEQ	40$		;IF EQ NONE IN TABLE
    796	002310	016405 	000000G			MOV	E$LNUM(R4),R5	; GET HIGHEST SECTION NUMBER                    ;**NEW**
    797	002314	005205 				INC	R5		; INCREMENT FOR LOOP COUNT                      ;**NEW**
    798	002316				10$:				;                                               ;**NEW**
P5ELM	MACRO M1110  22-AUG-78 01:54  PAGE 2-14


    799	002316	012301 				MOV	(R3)+,R1	; GET VIRTUAL ADDRESS OF ENTRY                  ;**NEW**
    800	002320					CALL	$CVRL		; CONVERT TO REAL ADDRESS                       ;**NEW**
    801	002324					CALL	$WRMPG		; WRITE-MARK PAGE                               ;**NEW**
    802	002330	012301 				MOV	(R3)+,R1	; GET MAX SIZE                                  ;**NEW**
    803	002332	132760 	000000G	000000G		BITB	#CS$LIB,C$SFLG(R0);LIB SECTION?                                 ;**-4
    804	002340	001012 				BNE	30$		;IF NE YES - DON'T UPDATE
    805	002342	132760 	000000G	000000G		BITB	#CS$REL,C$SFLG(R0);ABS SECTION?
    806	002350	001406 				BEQ	30$		;IF EQ YES
    807	002352	132760 	000000G	000000G		BITB	#CS$ALO,C$SFLG(R0);WHAT TYPE?
    808	002360	001002 				BNE	30$		;IF NE OVERLAID
    809	002362	060160 	000000G			ADD	R1,C$SCUR(R0)	;UPDATE CURRENT OFFSET ADDRESS
    810	002366				30$:				;                                               ;**NEW**
    811	002366					SOB	R5,10$		; REPEAT                                        ;**NEW**
    812	002372				40$:	RETURN			;                                               ;**-1
    813
    814						.IF	NDF	V1145
    815					;
    816					;++004 SUBROUTINE TO PERFORM SOFTWARE MULTIPLY AND LEAVE
    817					;++004 LOW 16 BITS IN R0
    818					;
    819					;++004 INPUTS:
    820					;
    821					;++004	R0 -- MULTIPLICAND
    822					;++004  R1 -- MULTIPLIER
    823					;
    824					;++004	OUTPUTS:
    825					;
    826					;++004	R0 -- 16 LSB OF RESULT
    827					;
    828					;
    829
    830	002374				MUL1:				;++004
    831	002374					CALL	$MUL		;++004 CALL MULTIPLY ROUTINE
    832	002400	010100 				MOV	R1,R0		;++004 PUT LOW HALF OF RESULT IN R0
    833	002402					RETURN			;++004 EXIT
    834						.ENDC
    835
    836
    837		000001 				.END
P5ELM	MACRO M1110  22-AUG-78 01:54  PAGE 2-15
SYMBOL TABLE

ADJCNT  000740R  	CR    = 000015   	GBLADD  000556R  	MUL1    002374R  	$ASCT = ****** GX
BEGST   000000R  	CRADR   000004R  	GBLDIS  000542R  	RLD     000316R  	$CRELM= ****** GX
CMDBT   000002R  	CRSCT   000006R  	GBLREL  000520R  	RLDVCT  000424R  	$CRSEG= ****** GX
CPLADD  001342R  	CS$ALO= ****** GX	GTCVL   001706R  	RPEAT   000416R  	$CRVSG= ****** GX
CPLAND  001354R  	CS$IND= ****** GX	GTCVL2  001750R  	R$NAME= ****** GX	$CVRL = ****** GX
CPLCOM  001350R  	CS$LIB= ****** GX	GTCVL3  001760R  	R$$11M= 000000   	$DIV  = ****** GX
CPLDIV  001404R  	CS$REL= ****** GX	GTLIB   002016R  	SCRDIS  000632R  	$ERMSG= ****** GX
CPLERX  001520R  	CS$VAS= ****** GX	GTMOD   002050R  	SECADD  000670R  	$GTBYT= ****** GX
CPLEXT  001524R  	CS$VSC= ****** GX	GTSVL   002136R  	SECDIS  000712R  	$GTWRD= ****** GX
CPLGTV  001620R  	C$SBSE= ****** GX	GTSYM   002236R  	SECREL  000620R  	$HDSIZ= ****** GX
CPLMUL  001376R  	C$SCUR= ****** GX	HT    = 000011   	SGNEX   001476R  	$HVRTL= ****** GX
CPLNEG  001346R  	C$SFLG= ****** GX	ILFMT   002116R  	SGNOP   001446R  	$INPPT= ****** GX
CPLNOP  001336R  	C$SLGH= ****** GX	IMGOUT  000744R  	SPA   = 000040   	$MUL  = ****** GX
CPLOR   001372R  	C$SLTH= ****** GX	INTDIS  000526R  	SW$RL = ****** GX	$NBYTE= ****** GX
CPLPGB  001526R  	DSPVCT  000146R  	INTREL  000466R  	SY$DEF= ****** GX	$OFFST= ****** GX
CPLPL   001534R  	ENDST   000032R  	LCLSYM  000034R  	SY$IND= ****** GX	$P5ELM  000050RG
CPLPRL  001542R  	E$LCMT= ****** GX	LF    = 000012   	SY$REL= ****** GX	$SAVRG= ****** GX
CPLPSH  001630R  	E$LLGH= ****** GX	LGBLK = 000006   	S$GCST= ****** GX	$SAVVR= ****** GX
CPLREL  001220R  	E$LMOD= ****** GX	LGCMD = 000020   	S$V0  = ****** GX	$SRCH = ****** GX
CPLRTN  001512R  	E$LNUM= ****** GX	LGCPL = 000021   	S$V2  = ****** GX	$SWTCH= ****** GX
CPLRT1  001502R  	E$LSWT= ****** GX	LIBADD  000652R  	S$YFLG= ****** GX	$WRBYT= ****** GX
CPLSTD  001634R  	E$R14 = ****** GX	LIMIT   001156R  	S$YVAL= ****** GX	$WRMPG= ****** GX
CPLSTO  001642R  	E$R27 = ****** GX	LOCDEF  001032R  	TS$KF = ****** GX	$WRWRD= ****** GX
CPLSUB  001340R  	E$R72 = ****** GX	LOCMOD  001076R  	TXT     000164R  	$WSINI= ****** GX
CPLVCT  001272R  	E$R91 = ****** GX	L$DSA = ****** GX	VT    = 000013   	$WSRCS= ****** GX
CPLXOR  001362R  	FF    = 000014   	MODND   002274R  	$ADRST= ****** GX	$$    = 000001
CPYSCT  001662R  	GADDIS  000574R

. ABS.	000000	   000
      	002404	   001
ERRORS DETECTED:  0

VIRTUAL MEMORY USED:  1400 WORDS  ( 6 PAGES)
DYNAMIC MEMORY:  2772 WORDS  ( 10 PAGES)
ELAPSED TIME:  00:00:21
OBJ$:P5ELM,LIS$:P5ELM/-SP=SRC$:MACFLM,P5ELM
