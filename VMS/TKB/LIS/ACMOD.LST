ACMOD	MACRO M1110  22-AUG-78 01:38  PAGE 2


      1						.TITLE	ACMOD
      2						.IDENT	/01/
      3
      4					;
      5					; COPYRIGHT   1976,  DIGITAL  EQUIPMENT  CORP.,  MAYNARD,   MASS.
      6					;
      7					; THIS SOFTWARE IS FURNISHED TO PURCHASER UNDER A LICENSE FOR USE
      8					; ON A SINGLE COMPUTER SYSTEM  AND  CAN BE COPIED (WITH INCLUSION
      9					; OF DEC'S COPYRIGHT NOTICE)  ONLY FOR USE IN SUCH SYSTEM, EXCEPT
     10					; AS MAY OTHERWISE BE PROVIDED IN WRITING BY DEC.
     11					;
     12					; THE INFORMATION IN  THIS DOCUMENT IS  SUBJECT TO CHANGE WITHOUT
     13					; NOTICE AND SHOULD NOT  BE CONSTRUED AS  A COMMITMENT BY DIGITAL
     14					; EQUIPMENT CORPORATION.
     15					;
     16					; DEC ASSUMES  NO  RESPONSIBILITY  FOR  THE  USE  OR  RELIABILITY
     17					; OF ITS  SOFTWARE  ON  EQUIPMENT  WHICH IS NOT  SUPPLIED BY DEC.
     18					;
     19					; VERSION 01
     20					;
     21					; C. MONIA 09-FEB-76
     22					;
     23					; PHASE 3 COMMON SUBROUTINES
     24					;
     25					; LOCAL DATA
     26					;
     27
     28	000000				CUREF:	.BLKW	1		; CURRENT REFERENCE
     29	000002	000000 			REFHD:	.WORD	0		; REFERENCE LISTHEAD
     30	000004	000002'				.WORD	.-2		; LAST POINTS TO FIRST INITIALLY
     31
     32					;+
     33					; **-$ACMOD-ALLOCATE A CONCATENATED MODULE DESCRIPTOR
     34					;
     35					; THIS SUBROUTINE IS CALLED TO ALLOCATE A DESCRIPTOR FOR MODULES
     36					; CONTAINING CONCATENATED ELEMENTS.
     37					;
     38					; INPUTS:
     39					;
     40					;	R4=ADDRESS OF CURRENT ELEMENT DESCRIPTOR
     41					;
     42					; OUTPUTS:
     43					;
     44					;	R0=REAL ADDRESS OF DESCRIPTOR
     45					;	R1=VIRTUAL ADDRESS OF DESCRIPTOR
     46					;	$CRELM=REAL ADDRESS OF NEW DESCRIPTOR
     47
     48					;	PAGE CONTAINING DESCRIPTOR IS WRITE MARKED
     49					;
     50					;-
     51
     52	000006				$ACMOD::			;
     53	000006	012701 	000000G			MOV	#E$LMND,R1	; GET SIZE OF BLOCK NEEDED
     54	000012					CALL	$ALSVB		; ALLOCATE VIRTUAL MEMORY
     55	000016	005360 	000000G			DEC	E$LNUM(R0)	; SET HIGHEST SECTION NUMBER TO -1
     56	000022	016460 	000000G	000000G		MOV	E$LSWT(R4),E$LSWT(R0) ; COPY SWITCH WORD OF PARENT ELEMENT
     57	000030	010067 	000000G			MOV	R0,$CRELM	; SET ELEMENT DESCRIPTOR ADDRESS
ACMOD	MACRO M1110  22-AUG-78 01:38  PAGE 2-1


     58	000034					RETURN			;
     59
     60					;+
     61					; **-$BLDRF-ALLOCATE A SYMBOL REFERENCE ENTRY
     62					;
     63					; THIS ROUTINE IS CALLED TO ALLOCATE A TWO-WORD REFERENCE LIST
     64					; ENTRY WHENEVER AN UNDEFINED GLOBAL SYMBOL IS FOUND. THE LIST
     65					; ENTRIES CONTAIN THE VIRTUAL ADDRESSES OF UNDEFINED SYM-
     66					; BOLS WITHIN THE SEGMENT CURRENTLY BEING PROCESSED.
     67					;
     68					; INPUTS:
     69					;
     70					;	R1=VIRTUAL ADDRESS OF REFERENCE
     71					;	REFHD=REFERENCE LISTHEAD
     72					;
     73					; OUTPUTS:
     74					;
     75					;	ENTRY IS THREADED INTO THE REFERENCE LIST.
     76					;
     77					; ALL REGISTER CONTENTS ARE PRESERVED
     78					;
     79					;-
     80
     81						.ENABL	LSB
     82
     83	000036				$BLDRF::			;
     84	000036					SAVVR			; SAVE VOLATILE REGISTERS
     85	000042	010146 				MOV	R1,-(SP)	; SAVE VIRTUAL ADDRESS OF REFERENCE
     86	000044	012701 	000004 			MOV	#4,R1		; GET SIZE OF BLOCK
     87	000050					CALL	$ALBLK		; ALLOCATE CORE BLOCK
     88	000054	010077 	177724 			MOV	R0,@REFHD+2	; LINK TO OLD LAST
     89	000060	010067 	177720 			MOV	R0,REFHD+2	; SET NEW LAST
     90	000064	012660 	000002 			MOV	(SP)+,2(R0)	; RECORD VIRTUAL ADDRESS OF REFERENCE
     91	000070					RETURN			;
     92
     93					;+
     94					; **-$EDRF-EDIT REFERENCE LIST
     95					;
     96					; THIS SUBROUTINE IS CALLED TO INITIALIZE A SCAN OF THE REFERENCE LIST.
     97					; AS EACH LIST ELEMENT IS SCANNED, THE VIRTUAL AND REAL ADDRESS OF THE
     98					; REFERENCE ARE OBTAINED AND A CO-ROUTINE CALL IS MADE TO THE CALLER
     99					; WITH THE C-BIT CLEAR. A CO-ROUTINE CALL CAUSES THE NEXT ENTRY TO BE
    100					; OBTAINED AS DESCRIBED. WHEN NO FURTHER ENTRIES REMAIN TO BE PRO-
    101					; CESSED THE ROUTINE EXITS VIA A RETURN WITH THE C-BIT SET. THE
    102					; CALLING ROUTINE MAY TERMINATE PROCESSING BY REMOVING THE RETURN
    103					; ADDRESS FROM THE STACK.
    104					;
    105					; INPUTS:
    106					;
    107					;	REFHD=REFERENCE LISTHEAD
    108					;
    109					; OUTPUTS:
    110					;
    111					;	C/CLEAR - NEXT ENTRY FOUND
    112					;
    113					;	R0=REAL ADDRESS OF UNDEFINED SYMBOL
    114					;	R1=VIRTUAL ADDRESS OF UNDEFINED SYMBOL
ACMOD	MACRO M1110  22-AUG-78 01:38  PAGE 2-2


    115					;
    116					;	EXIT IS VIA A COROUTINE CALL
    117					;
    118					;	C/SET - NO FURTHER ENTRIES TO BE PROCESSED
    119					;
    120					;	EXIT IS VIA A RETURN
    121					;
    122					;-
    123
    124	000072				$EDRF::				;
    125	000072	016767 	177704 	177700 		MOV	REFHD,CUREF	; SET CURRENT REFERENCE ADDRESS
    126	000100				10$:				;
    127	000100	016701 	177674 			MOV	CUREF,R1	; GET ADDRESS OF CURRENT ENTRY
    128	000104	000261 				SEC			; ASSUME END OF LIST
    129	000106	001423 				BEQ	30$		; IF EQ END OF LIST
    130	000110	012167 	177664 			MOV	(R1)+,CUREF	; SET ADDRESS OF NEXT
    131	000114	011101 				MOV	(R1),R1		; GET VIRTUAL ADDRESS OF ENTRY
    132	000116					CALL	$CVRL		; CONVERT TO REAL ADDRESS
    133	000122	000241 				CLC			; SET SUCCESS
    134	000124					CALL	@(SP)+		; CALL THE CALLER
    135	000126	000764 				BR	10$		; GO AGAIN
    136
    137					;+
    138					; **-$RLREF-FLUSH ALL REFERENCE LIST ENTRIES
    139					;
    140					; THIS SUBROUTINE IS CALLED TO RETURN ALL REFERENCE LIST ENTRIES
    141					; TO DYNAMIC STORAGE.
    142					;
    143					; INPUTS:
    144					;
    145					;	REFHD=REFERENCE LISTHEAD
    146					;
    147					; OUTPUTS:
    148					;
    149					;	ALL REFERENCE LIST ENTRIES ARE RETURNED TO DYNAMIC STORAGE
    150					;
    151					;-
    152
    153	000130				$RLREF::			;
    154	000130	016702 	177646 			MOV	REFHD,R2	; GET ADDRESS OF ENTRY
    155	000134	001405 				BEQ	20$		; IF EQ LIST NOW EMPTY
    156	000136	011267 	177640 			MOV	(R2),REFHD	; SET ADDRESS OF NEXT
    157	000142					CALL	RLEASE		; RELEASE ENTRY
    158	000146	000770 				BR	$RLREF		; GO AGAIN
    159	000150				20$:				;
    160	000150	012767 	000002'	177626 		MOV	#REFHD,REFHD+2	; LAST POINTS TO FIRST
    161	000156				30$:				;
    162	000156					RETURN			;
    163
    164					;
    165					; RELEASE A REFERENCE LIST ENTRY
    166					;
    167
    168	000160				RLEASE:				;
    169	000160	012701 	000004 			MOV	#4,R1		; GET SIZE OF ENTRY
    170	000164	012700 	000000G			MOV	#$FRHD,R0	; SET ADDRESS OF LISTHEAD
    171	000170					CALLR	$RLCB		; RELEASE CORE BLOCK
ACMOD	MACRO M1110  22-AUG-78 01:38  PAGE 2-3


    172
    173					;+
    174					; **-$DELRF-REMOVE SPECIFIED REFERENCE LIST ENTRY
    175					;
    176					; THIS SUBROUTINE IS CALLED TO SEARCH FOR AND REMOVE AN ENTRY
    177					; IN THE REFERENCE LIST WHOSE SECOND WORD MATCHES A SPECIFIED VIR-
    178					; TUAL ADDRESS. THE ENTRY IS UNLINKED AND RETURNED TO DYNAMIC STORAGE.
    179					;
    180					; INPUTS:
    181					;
    182					;	R1=VIRTUAL ADDRESS OF GLOBAL SYMBOL
    183					;
    184					; OUTPUTS:
    185					;
    186					;	C/CLEAR - REFERENCE LIST ENTRY FOUND AND RELEASED
    187					;
    188					;	C/SET - SPECIFIED REFERENCE LIST ENTRY DOES NOT EXIST
    189					;
    190					; ALL REGISTER CONTENTS ARE PRESERVED
    191					;
    192					;-
    193
    194	000174				$DELRF::			;
    195	000174					SAVVR			; SAVE THE VOLATILE REGISTERS
    196	000200	012702 	000002'			MOV	#REFHD,R2	; GET ADDRESS OF REFERENCE LIST
    197	000204				40$:				;
    198	000204	010200 				MOV	R2,R0		; SET ADDRESS OF PREVIOUS
    199	000206	011002 				MOV	(R0),R2		; GET ADDRESS OF NEXT
    200	000210	000261 				SEC			; ASSUME END OF LIST
    201	000212	001412 				BEQ	60$		; IF EQ END OF LIST
    202	000214	026201 	000002 			CMP	2(R2),R1	; FOUND ENTRY?
    203	000220	001371 				BNE	40$		; IF NE NO
    204	000222	011210 				MOV	(R2),(R0)	; RELINK REMAINING ENTRIES
    205	000224	001002 				BNE	50$		;
    206	000226	010067 	177552 			MOV	R0,REFHD+2	; SET NEW LAST
    207	000232				50$:				;
    208	000232					CALL	RLEASE		; RELEASE ENTRY
    209	000236	000241 				CLC			; CLEAR CARRY
    210	000240				60$:				;
    211	000240					RETURN			;
    212
    213						.DSABL	LSB
    214
    215		000001 				.END
ACMOD	MACRO M1110  22-AUG-78 01:38  PAGE 2-4
SYMBOL TABLE

CR    = 000015   	HT    = 000011   	SPA   = 000040   	$BLDRF  000036RG 	$FRHD = ****** GX
CUREF   000000R  	LF    = 000012   	VT    = 000013   	$CRELM= ****** GX	$RLCB = ****** GX
E$LMND= ****** GX	REFHD   000002R  	$ACMOD  000006RG 	$CVRL = ****** GX	$RLREF  000130RG
E$LNUM= ****** GX	RLEASE  000160R  	$ALBLK= ****** GX	$DELRF  000174RG 	$SAVVR= ****** GX
E$LSWT= ****** GX	R$$11M= 000000   	$ALSVB= ****** GX	$EDRF   000072RG 	$$    = 000001
FF    = 000014

. ABS.	000000	   000
      	000242	   001
ERRORS DETECTED:  0

VIRTUAL MEMORY USED:  675 WORDS  ( 3 PAGES)
DYNAMIC MEMORY:  2772 WORDS  ( 10 PAGES)
ELAPSED TIME:  00:00:07
OBJ$:ACMOD,LIS$:ACMOD/-SP=SRC$:MACFLM,ACMOD
