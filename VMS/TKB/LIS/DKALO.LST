DKALO	MACRO M1110  22-AUG-78 01:40  PAGE 3


      1						.TITLE	DKALO
      2						.IDENT	/16/
      3					                                                                                ;**-1
      4					;
      5					; COPYRIGHT   1973,  DIGITAL  EQUIPMENT  CORP.,  MAYNARD,   MASS.
      6					; COPYRIGHT   1974,  DIGITAL  EQUIPMENT  CORP.,  MAYNARD,   MASS.
      7					; COPYRIGHT   1976,  DIGITAL  EQUIPMENT  CORP.,  MAYNARD,   MASS.
      8					; COPYRIGHT (C) 1977
      9					;
     10					; THIS SOFTWARE IS FURNISHED TO PURCHASER UNDER A LICENSE FOR USE
     11					; ON A  SINGLE COMPUTER SYSTEM AND CAN BE COPIED (WITH INCLUSION
     12					; OF DEC'S COPYRIGHT NOTICE) ONLY FOR USE IN SUCH SYSTEM, EXCEPT
     13					; AS MAY OTHERWISE BE PROVIDED IN WRITING BY DEC.
     14					;
     15					; THE  INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
     16					; NOTICE AND  SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
     17					; EQUIPMENT CORPORATION.
     18					;
     19					; DEC  ASSUMES NO  RESPONSIBILITY  FOR  THE  USE  OR RELIABILITY
     20					; OF ITS  SOFTWARE ON  EQUIPMENT WHICH  IS NOT SUPPLIED BY DEC.
     21					;
     22					; VERSION	16
     23					;                                                                               ;**-1
     24					; D. N. CUTLER/C. MONIA	21-JAN-74
     25					;
     26					; MODIFICATIONS:
     27					;
     28					; NO.		DATE		PROGRAMMER
     29					; ---		----		----------
     30					;
     31					; 041		19-MAY-75	C. MONIA
     32					; 048		09-FEB-76	C. MONIA
     33					; 052		29-MAR-76	C. MONIA
     34					; 063		30-MAY-76	C. MONIA
     35					; JAK100	16-FEB-77	CHANGES FOR MULTIUSER TASKS
     36					;
     37					; MONITOR DEPENDENT ROUTINE TO ALLOCATE DISK SPACE FOR TASK IMAGE
     38					;
     39					; MACRO LIBRARY CALLS
     40					;
     41
     42						.MCALL	OFNB$W
     43
     44					;
     45					; LOCAL DATA
     46					;
     47
     48
     49						.IF	DF	T$$MP
     50
     51					;
     52					; OUTPUT LOGICAL DISK BLOCK ADDRESS OF TASK IMAGE
     53					;
     54
     55					TSKLM:	.ASCII	/TASK DISK ADDRESS: /
     56					TSKDB:	.ASCII	/000000:000000/
     57					TSKME:
DKALO	MACRO M1110  22-AUG-78 01:40  PAGE 3-1


     58						.EVEN
     59					TSKST:	.BLKW	6		; TASK IMAGE FILE STATISTICS BLOCK
     60
     61						.ENDC
     62
     63					;+
     64					; **-$DKALO-DISK ALLOCATION
     65					;
     66					; THIS ROUTINE IS CALLED IN PHASE 4 TO ALLOCATE THE DISK SPACE
     67					; FOR THE TASK IMAGE FILE. THE FILE IS ALLOCATED AND A BITMAP
     68					; IS CONSTRUCTED THAT CONTAINS A ONE BIT FOR EACH BLOCK IN THE
     69					; FILE.
     70					;
     71					; INPUTS:
     72					;
     73					;	$RLBLK=HIGHEST RELATIVE BLOCK NUMBER.
     74					;
     75					; OUTPUTS:
     76					;
     77					;	TASK IMAGE FILE IS ALLOCATED AND BITMAP IS CONSTRUCTED.
     78					;-
     79
     80	000000	032767 	000000G	000000G	$DKALO::BIT	#TS$KF,$SWTCH	;TASK IMAGE FILE SPECIFIED?
     81	000006	001522 				BEQ	50$		;IF EQ NO
     82	000010					SAVRG			;SAVE NONVOLITILE REGISTERS
     83	000014	012705 	000000G			MOV	#$RLBLK,R5	; POINT TO RELATIVE BLOCK
     84	000020	066715 	000000G			ADD	$HDRBN,(R5)	; INCLUDE HEADER IN DISK ALLOCATION
     85	000024	062515 				ADD	(R5)+,(R5)	; BIAS R/O DISK ALLOCATION
     86	000026	016700 	000000G			MOV	$TSKPT,R0	;GET TASK IMAGE FILE RECORD BLOCK
     87	000032	016704 	000000G			MOV	$FSIZI,R4	; GET REQUESTED ALLOCATION
     88	000036	066704 	000000G			ADD	$HDRBN,R4	; INCLUDE CHECKPOINT AREA
     89	000042	020415 				CMP	R4,(R5)		; COMPARE AGAINST TRUE DISK ALLOCATION
     90	000044	101001 				BHI	5$		; IF HI ALLOCATE MORE DISK AREA
     91	000046	011504 				MOV	(R5),R4		; ELSE ALLOCATE JUST ENOUGH FOR TASK IMAGE
     92	000050				5$:				;
     93	000050	010403 				MOV	R4,R3		; COPY SIZE OF FILE
     94	000052	010467 	000000G			MOV	R4,$FSIZI	;SET FILE SIZE INDICATOR
     95	000056	166767 	000000G	000000G		SUB	$LBBLK,$FSIZI	; SUBTRACT OUT LABEL BLOCKS
     96
     97						.IF	DF	T$$MP
     98
     99						MOV	#TSKST,F.STBK(R0) ; READ STATISTICS ON ACCESS
    100
    101						.ENDC
    102
    103	000064				6$:				;
    104	000064	016002 	000000G			MOV	R$NAME(R0),R2	; POINT TO NAME BLOCK
    105	000070	010360 	000034 			MOV	R3,F.CNTG(R0)	; SET SIZE OF FILE TO ALLOCATE
    106	000074					OFNB$W	R0		; OPEN TASK IMAGE FILE
    107	000106	103012 				BCC	10$		;IF CC OKAY
    108	000110	005403 				NEG	R3		; ALLOCATE NON-CONTIGUOUS FILE
    109	000112	100764 				BMI	6$		; IF MI, RE-TRY OPEN
    110	000114	012701 				MOV	(PC)+,R1	;ALLOCATION FAILURE
    111	000116	   000G	   000G			.BYTE	E$R24,S$V0	;DIAGNOSTIC
    112	000120					CALL	$ERMSG		;OUTPUT ERROR MESSAGE
    113	000124	042767 	000000G	000000G		BIC	#TS$KF,$SWTCH	;CLEAR TASK IMAGE OPTION BIT
    114	000132	000450 				BR	50$		;VAMOOSA!
DKALO	MACRO M1110  22-AUG-78 01:40  PAGE 3-2


    115
    116	000134				10$:				;
    117	000134	005703 				TST	R3		; CONTIGUOUS FILE OPENED?
    118	000136	100004 				BPL	15$		; IF PL YES
    119	000140	012701 	000000C			MOV	#<S$V0*400!E$R89>,R1 ; REPORT NON-CONTIGUOUS TASK FILE
    120	000144					CALL	$ERMSG		; ISSUE DIAGNOSTIC
    121	000150				15$:				; REFERENCE LABEL
    122
    123						.IF	DF	V1145
    124
    125						MOV	R4,R1		; SET LOW PART OF DIVIDEND
    126						CLR	R0		;CLEAR HIGH PART OF DIVIDEND
    127						DIV	#8.,R0		;CALCULATE SIZE OF BITMAP
    128
    129						.IFF
    130
    131	000150	010400 				MOV	R4,R0		; SET DIVIDEND
    132	000152	012701 	000010 			MOV	#8.,R1		;SET DIVISOR
    133	000156					CALL	$DIV		;CALCULATE SIZE OF BITMAP
    134
    135						.ENDC
    136
    137
    138	000162	010105 				MOV	R1,R5		;SAVE REMAINDER
    139	000164	001401 				BEQ	20$		;IF EQ SIZE IS RIGHT
    140	000166	005200 				INC	R0		;INCREMENT LENGTH OF BITMAP
    141	000170	010004 			20$:	MOV	R0,R4		;SAVE SIZE OF BITMAP
    142	000172	010001 				MOV	R0,R1		;SET SIZE OF BLOCK TO ALLOCATE
    143	000174					CALL	$ALBLK		;ALLOCATE STORAGE
    144	000200	010067 	000002G			MOV	R0,$BITMP+2	;SET ADDRESS OF BITMAP
    145	000204	010467 	000000G			MOV	R4,$BITMP	;SET SIZE OF BITMAP
    146	000210	112720 	000377 		30$:	MOVB	#377,(R0)+	;FILL BITMAP WITH ONE BITS
    147	000214					SOB	R4,30$		;REPEAT
    148	000220	005705 				TST	R5		;ANY REMAINDER?
    149	000222	001410 				BEQ	47$		;IF EQ NO
    150	000224	012701 	000001 			MOV	#1,R1		;GET ONE BIT FOR MASK FORMATION
    151
    152
    153						.IF	DF	V1145
    154
    155						ASH	R5,R1		;SHIFT INTO PLACE
    156
    157						.IFF
    158
    159	000230	005305 			43$:	DEC	R5		;DECREMENT SHIFT COUNT
    160	000232	002402 				BLT	45$		;IF LT DONE
    161	000234	006301 				ASL	R1		;SHIFT MASK INTO PLACE
    162	000236	000774 				BR	43$		;
    163
    164						.ENDC
    165
    166
    167	000240	005301 			45$:	DEC	R1		;FORM PARTIAL MAP FOR FINAL BYTE
    168	000242	110140 				MOVB	R1,-(R0)	;INSERT FINAL BYTE
    169	000244				47$:				;
    170	000244	012700 	000256'			MOV	#DKALO,R0	;GET PHASE CONTROL ROUTINE ADDRESS
    171	000250					CALL	$PCTRL		;CALL PHASE CONTROL ROUTINE
DKALO	MACRO M1110  22-AUG-78 01:40  PAGE 3-3


    172
    173						.IF	DF	T$$MP
    174
    175						MOV	#TSKDB,R0	; GET ADDRESS OF OUTPUT TEMPLATE
    176						MOV	TSKST,R1	; FIRST HALF OF LBN
    177						MOV	PC,R2		; NO ZERO SURPRESS
    178						CALL	$CBOMG		; CONVERT
    179						TSTB	(R0)+		; STEP PAST DELIMITER
    180						MOV	TSKST+2,R1	; GET SECOND HALF OF DISK ADDRESS
    181						MOV	PC,R2		; AGAIN, NO ZERO SURPRESS
    182						CALL	$CBOMG		; CONVERT TO ASCII
    183						MOV	#TSKLM,R1	; GET BUFFER ADDRESS
    184						MOV	#<TSKME-TSKLM>,R2 ; BUFFER LENGTH
    185						CALL	$PUTCO		; OUTPUT TO 'CO'
    186
    187						.ENDC
    188
    189	000254				50$:	RETURN			;
    190
    191					;
    192					; VIRTUAL SEGMENT DESCRIPTOR ADDRESS ASSIGNMENT
    193					;
    194					; THIS ROUTINE IS CALLED FOR EACH SEGMENT IN THE ALLOCATION.
    195					;
    196
    197	000256	016700 	000000G		DKALO:	MOV	$CRSEG,R0	;GET ADDRESS OF CURRENT SEGMENT
    198	000262	066760 	000000G	000000G		ADD	$HDRBN,S$GBLK(R0) ; ADD IN RELATIVE BLK. NUMBER OF HEADER	;JAK100
    199	000270	066760 	000000G	000002G		ADD	$RLBLK,S$GBLK+2(R0) ; ADD IN MAX R-W DISK BLOCK			;JAK100
    200	000276	016701 	000000G			MOV	$CRVSG,R1	; GET VIRTUAL ADDRESS OF CURRENT SEGMENT	;**-6
    201	000302					CALLR	$WRMPG		; WRITE-MARK PAGE
    202
    203		000001 				.END
DKALO	MACRO M1110  22-AUG-78 01:40  PAGE 3-4
SYMBOL TABLE

B.BBFS= 000010   	FD.OSP= 004000   	F.BKVB= 000064   	F.STBK= 000036   	S$GBLK= ****** GX
B.BFST= 000015   	FD.PLC= 000004   	F.CHR = 000075   	F.UNIT= 000136   	S$V0  = ****** GX
B.NXBD= 000012   	FD.PRN= 000004   	F.CNTG= 000034   	F.URBD= 000020   	S.BFHD= 000020
B.VBN = 000004   	FD.PSE= 010000   	F.DFNB= 000046   	F.VBN = 000064   	S.FATT= 000016
CH.AND= 000001   	FD.RAH= 000001   	F.DSPT= 000044   	F.VBSZ= 000060   	S.FDB = 000140
CR    = 000015   	FD.RAN= 000002   	F.DVNM= 000134   	HT    = 000011   	S.FNAM= 000006
DKALO   000256R  	FD.REC= 000001   	F.EFBK= 000010   	LF    = 000012   	S.FNB = 000036
E$R24 = ****** GX	FD.RWM= 000001   	F.EFN = 000050   	NB.DEV= 000200   	S.FNBW= 000017
E$R89 = ****** GX	FD.SDI= 000020   	F.EOBB= 000032   	NB.DIR= 000100   	S.FNTY= 000004
FA.APD= 000100   	FD.SQD= 000040   	F.ERR = 000052   	NB.NAM= 000004   	S.FTYP= 000002
FA.CRE= 000010   	FD.TTY= 000004   	F.FACC= 000043   	NB.SD1= 000400   	S.NFEN= 000020
FA.DLK= 001000   	FD.WBH= 000002   	F.FFBY= 000014   	NB.SD2= 001000   	TS$KF = ****** GX
FA.ENB= 100000   	FF    = 000014   	F.FNAM= 000110   	NB.SNM= 000040   	VT    = 000013
FA.EXC= 002000   	FF.CHR= 000005   	F.FNB = 000102   	NB.STP= 000020   	$ALBLK= ****** GX
FA.EXT= 000004   	FF.NV = 000003   	F.FTYP= 000116   	NB.SVR= 000010   	$BITMP= ****** GX
FA.NSP= 000100   	FF.POE= 000002   	F.FVER= 000120   	NB.TYP= 000002   	$CRSEG= ****** GX
FA.POS= 010000   	FF.RWD= 000001   	F.HIBK= 000004   	NB.VER= 000001   	$CRVSG= ****** GX
FA.RD = 000001   	FF.RWF= 000006   	F.LUN = 000042   	N.DID = 000024   	$DIV  = ****** GX
FA.RWD= 004000   	FF.SPC= 000004   	F.MBCT= 000054   	N.DVNM= 000032   	$DKALO  000000RG
FA.SEQ= 040000   	FO.APD= 000106   	F.MBC1= 000055   	N.FID = 000000   	$ERMSG= ****** GX
FA.SHR= 000040   	FO.MFY= 000002   	F.MBFG= 000056   	N.FNAM= 000006   	$FSIZI= ****** GX
FA.TMP= 000020   	FO.RD = 000001   	F.NRBD= 000024   	N.FTYP= 000014   	$HDRBN= ****** GX
FA.WCK= 020000   	FO.UPD= 000006   	F.NREC= 000030   	N.FVER= 000016   	$LBBLK= ****** GX
FA.WRT= 000002   	FO.WRT= 000016   	F.OVBS= 000030   	N.NEXT= 000022   	$PCTRL= ****** GX
FD.BLK= 000010   	F.ACTL= 000076   	F.RACC= 000016   	N.STAT= 000020   	$RLBLK= ****** GX
FD.CCL= 000002   	F.ALOC= 000040   	F.RATT= 000001   	N.UNIT= 000034   	$SAVRG= ****** GX
FD.COM= 020000   	F.BBFS= 000062   	F.RCNM= 000034   	PAR$$$= 000000   	$SWTCH= ****** GX
FD.CR = 000002   	F.BDB = 000070   	F.RCTL= 000017   	R$NAME= ****** GX	$TSKPT= ****** GX
FD.DIR= 000010   	F.BGBC= 000057   	F.RSIZ= 000002   	R$$11M= 000000   	$WRMPG= ****** GX
FD.FTN= 000001   	F.BKDN= 000026   	F.RTYP= 000000   	R.FIX = 000001   	$$    = 000001
FD.F11= 040000   	F.BKDS= 000020   	F.SEQN= 000100   	R.SEQ = 000003   	.OPFNB= ****** G
FD.INS= 000010   	F.BKEF= 000050   	F.SPDV= 000072   	R.VAR = 000002   	...GBL= 000000
FD.ISP= 002000   	F.BKP1= 000051   	F.SPUN= 000074   	SPA   = 000040   	...TPC= 000140
FD.MNT= 100000   	F.BKST= 000024

. ABS.	000000	   000
      	000306	   001
ERRORS DETECTED:  0

VIRTUAL MEMORY USED:  2349 WORDS  ( 10 PAGES)
DYNAMIC MEMORY:  3828 WORDS  ( 14 PAGES)
ELAPSED TIME:  00:00:18
OBJ$:DKALO,LIS$:DKALO/-SP=SRC$:MACFLM,FCSPR,DKALO
