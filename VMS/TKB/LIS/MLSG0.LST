FCSPR	MACRO M1110  22-AUG-78 01:46  PAGE 3


      1					 										;**NEW**
      2						.TITLE	MLSG0
      3						.IDENT	/07/
      4					                                                                                ;**-1
      5					;
      6					; COPYRIGHT   1975,  DIGITAL  EQUIPMENT CORP.,  MAYNARD,   MASS.
      7					; CPOYRIGHT (C) 1977
      8					; COPYRIGHT   1976,  DIGITAL  EQUIPMENT CORP.,  MAYNARD,   MASS.
      9					;
     10					; THIS SOFTWARE IS FURNISHED TO PURCHASER UNDER A LICENSE FOR USE
     11					; ON A  SINGLE COMPUTER SYSTEM AND CAN BE COPIED (WITH INCLUSION
     12					; OF DEC'S COPYRIGHT NOTICE) ONLY FOR USE IN SUCH SYSTEM, EXCEPT
     13					; AS MAY OTHERWISE BE PROVIDED IN WRITING BY DEC.
     14					;
     15					; THE  INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
     16					; NOTICE AND  SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
     17					; EQUIPMENT CORPORATION.
     18					;
     19					; DEC  ASSUMES NO  RESPONSIBILITY  FOR  THE  USE  OR RELIABILITY
     20					; OF ITS  SOFTWARE ON  EQUIPMENT WHICH  IS NOT SUPPLIED BY DEC.
     21					;
     22					; VERSION 07
     23					;                                                                               ;**-1
     24					; D. N. CUTLER/C. MONIA 10-DEC-73
     25					;
     26					;
     27					; MODIFICATIONS:
     28					;
     29					; NO.		DATE		PROGRAMMER
     30					; ---		----		----------
     31					;
     32					; 033		03-JAN-75	C. MONIA
     33					; 037		28-JAN-75	C. MONIA                                        ;**NEW**
     34					; 046		03-FEB-76	C. MONIA
     35					; 047		07-FEB-76	C. MONIA
     36					; JAK105	 1-APR-77	; CHANGES FOR PREMATURE EOF IN ODL
     37					;
     38					; READ OVERLAY DESCRIPTION FILE AND VERIFY LINE FORMAT
     39					;
     40					; MACRO LIBRARY CALLS
     41					;
     42
     43						.MCALL	CLOSE$,GCML$,GCMLD$,RCML$
     44	000000					GCMLD$
     45
     46					;
     47					; LOCAL MACROS
     48					;
     49					; GENERATE DIRECTIVE NAME LIST
     50					;
     51					; GDIR	NAME,FLAG
     52					;
     53					; WHERE:
     54					;
     55					;	NAME=1 TO 5 CHARACTER DIRECTIVE NAME AND ADDRESS OF PROCESSING
     56					;		SUBROUTINE
     57					;
MLSG0	MACRO M1110  22-AUG-78 01:46  PAGE 3-1


     58					;	FLAG=OPERAND FLAG, IF FLAG IS NB, THEN OPERANDS ARE REQUIRED
     59					;
     60
     61						.MACRO	GDIR	NAME,FLAG
     62						.PSECT	DIRL0
     63					$$=.
     64						.WORD	0
     65						.WORD	0
     66					.=$$
     67						.RAD50	/.'NAME/
     68					.=$$+4
     69					N=0
     70						.IIF	NB	FLAG, N=1
     71						.WORD	NAME+N
     72					LNG=.-$$
     73						.PSECT
     74						.ENDM
     75
     76					;
     77					; GENERATE CONTROL SECTION ATTRIBUTE LIST
     78					;
     79					; GSAT	SAT,FBIT,DIS
     80					;
     81					; WHERE:
     82					;
     83					;	SAT=1 TO 6 CHARACTER ATTRIBUTE NAME
     84					;	FBIT=FLAG BYTE BIT
     85					;	DIS= FLAG BIT DISPOSITION. IF DIS NB, THEN SET BIT. ELSE
     86					;		CLEAR BIT.
     87					;
     88
     89						.MACRO	GSAT	SAT,FBIT,DIS
     90						.PSECT	SATL0
     91					.=.-2
     92						.WORD	0
     93						.WORD	0
     94					$$=.
     95					.=.-4
     96						.RAD50	/SAT/
     97					.=$$
     98					N=1
     99						.IIF	NB	DIS, N=-1
    100						.BYTE	FBIT,N
    101						.WORD	0
    102						.PSECT
    103						.ENDM
    104
    105					;
    106					; LOCAL DATA
    107					;
    108					; GCML BLOCK SAVE AREA
    109					;
    110
    111	000000				GCMSA:	.BLKB	G.ISIZ		;
    112
    113						.EVEN
    114
MLSG0	MACRO M1110  22-AUG-78 01:46  PAGE 3-2


    115					;
    116					; DIRECTIVE LIST
    117					;
    118
    119	000000					.PSECT	DIRL0
    120	000000				DBAS:				; REF LABEL
    121	000000					.PSECT	DIRL1
    122	000000				DBASE:				; REF LABEL
    123	000020					.PSECT
    124
    125					;
    126					; SECTION ATTRIBUTE LIST
    127					;
    128
    129	000000					.PSECT	SATL0
    130	000000				SBAS:				; REF LABEL
    131	000000	000000 				.WORD	0		; DUMMY ZERO AT START OF LIST
    132
    133	000002					GSAT	ABS,CS$REL
    134	000020					GSAT	CON,CS$ALO
    135	000020					GSAT	D,CS$TYP,1
    136	000020					GSAT	GBL,CS$GBL,1
    137	000020					GSAT	HGH,CS$MEM,1
    138	000020					GSAT	I,CS$TYP
    139	000020					GSAT	LCL,CS$GBL
    140	000020					GSAT	LOW,CS$MEM
    141	000020					GSAT	OVR,CS$ALO,1
    142	000020					GSAT	REL,CS$REL,1
    143	000020					GSAT	RO,CS$ACC,1
    144	000020					GSAT	RW,CS$ACC
    145
    146	000020					.PSECT
    147
    148					;
    149					; SEGMENT ATTRIBUTE LIST
    150					;
    151
    152	000112					.PSECT	SATL0
    153
    154	000112				SGBAS:				; REF LABEL
    155	000112	000000 				.WORD	0		; DUMMY ZERO AT START OF LIST
    156
    157	000114					GSAT	DSK,SG$DSK
    158	000020					GSAT	GBL,SG$GBL,1
    159	000020					GSAT	PHY,SG$PHY,1
    160	000020					GSAT	NODSK,SG$DSK,1
    161	000020					GSAT	NOGBL,SG$GBL
    162	000020					GSAT	NOPHY,SG$PHY
    163
    164	000020					.PSECT
    165
    166
    167					;
    168					; TEMP STORAGE
    169					;
    170
    171	000020				TMP:	.BLKW	5		; TEMP STORAGE
MLSG0	MACRO M1110  22-AUG-78 01:46  PAGE 3-3


    172
    173					;
    174					;+
    175					; **-$MLSG0-READ ODL AND VERIFY LINE FORMAT
    176					;
    177					; INPUTS:
    178					;
    179					;	ODL FILE
    180					;
    181					; OUTPUTS:
    182					;
    183					;	EACH LINE IN THE OVERLAY DESCRIPTION IS READ, IDENTIFIED BY
    184					; DIRECTIVE TYPE AND RETAINED IN DYNAMIC STORAGE FOR LATER PROCESSING.
    185					;
    186					;	THIS ROUTINE IS CALLED BY $MULSG TO PERFORM THE ABOVE
    187					; PROCESSING AND VERIFY CORRECT LINE SYNTAX. NOTE THAT ALL I/O
    188					; SPECIFIC TO ODL PROCESSING IS DONE HERE.
    189					;
    190					;-
    191
    192	000032				$MLSG0::			;
    193	000032	005067 	000000G			CLR	$DIRHD		; CLEAR DIRECTIVE LISTHEAD
    194	000036	012767 	000000G	000002G		MOV	#$DIRHD,$DIRHD+2 ; LAST POINTS TO FIRST INITIALLY
    195	000044	005067 	000000G			CLR	$RTDIR		; CLEAR ROOT DIRECTIVE POINTER
    196	000050	016700 	000000G			MOV	$ODLPT,R0	;GET OVERLAY DESCRIPTION RECORD BLOCK
    197	000054	010004 				MOV	R0,R4		; SAVE POINTER
    198	000056	062700 	000140 			ADD	#S.FDB,R0	; POINT TO GCML IMPURE AREA
    199	000062	012701 	000000'			MOV	#GCMSA,R1	; POINT TO GCML SAVE AREA
    200	000066	012702 	000010 			MOV	#G.ISIZ/2,R2	; SET SIZE OF IMPURE AREA
    201	000072				5$:				;
    202	000072	012021 				MOV	(R0)+,(R1)+	; SAVE IMPURE DATA AREA
    203	000074					SOB	R2,5$		;
    204	000100	010400 				MOV	R4,R0		; RESTORE GCML BLOCK ADDRESS
    205	000102					CALL	$STFDB		; RECORD FDB ADDRESS OF OPEN FILE
    206	000106	010400 				MOV	R4,R0		; RETRIEVE RECORD BLOCK POINTER
    207	000110	016701 	000000G			MOV	$INIPT,R1	; GET RECORD BLOCK POINTER
    208	000114	012761 	000000G	000000G		MOV	#SW$CC,R$SWTH(R1) ; ASSUME CONCATENATED OBJECT FILE
    209	000122	016160 	000044 	000044 		MOV	F.DSPT(R1),F.DSPT(R0);SET ADDRESS OF DATA SET DESCRIPTOR
    210	000130				10$:				;
    211	000130					GCML$	$ODLPT		; READ A LINE OF ODL TEXT
    212	000144	103500 				BCS	50$		;IF CS I/O ERROR
    213	000146	062700 	000146 			ADD	#G.CMLD,R0	; POINT TO LENGTH OF LINE
    214	000152	010067 	000000G			MOV	R0,$LNDES	; SAVE DESCRIPTOR ADDRESS
    215	000156	012001 				MOV	(R0)+,R1	; GET LENGTH OF LINE
    216	000160	011000 				MOV	(R0),R0		; GET ADDRESS OF LINE
    217	000162	060001 				ADD	R0,R1		; COMPUTE ADDRESS OF LAST BYTE+1
    218	000164	105011 				CLRB	(R1)		; MARK END OF LINE
    219	000166					CALL	$SETNB		;BYPASS LEADING BLANKS AND HT'S
    220	000172	122710 	000073 			CMPB	#';,(R0)	;COMMENT LINE?
    221	000176	001754 				BEQ	10$		;IF EQ YES
    222	000200	105710 				TSTB	(R0)		;BLANK LINE?
    223	000202	001752 				BEQ	10$		;IF EQ YES
    224	000204	012705 	000030'			MOV	#TMP+8.,R5	;GET ADDRESS OF TEMP AREA
    225		000004 				.REPT	4
    226						CLR	-(R5)		;CLEAR TEMP STORAGE
    227						.ENDR
    228	000220					CALL	$RR		;CONVERT LABEL OR DIRECTIVE NAME
MLSG0	MACRO M1110  22-AUG-78 01:46  PAGE 3-4


    229	000224	122702 	000072 			CMPB	#':,R2		;LABEL SPECIFIED?
    230	000230	001010 				BNE	20$		;IF NE NO
    231	000232	014565 	000004 			MOV	-(R5),4(R5)	;MOVE LABEL
    232	000236	014565 	000004 			MOV	-(R5),4(R5)	;
    233	000242					CALL	$SETNB		;BYPASS LEADING BLANKS AND HT'S
    234	000246					CALL	$RR		;CONVERT DIRECTIVE NAME
    235	000252	005300 			20$:	DEC	R0		;BACK UP TO TERMINAL BYTE
    236	000254	010046 				MOV	R0,-(SP)	;++033 SAVE ADDRESS OF TERMINAL BYTE
    237	000256	010001 				MOV	R0,R1		;++033 COPY ADDRESS OF BYTE
    238	000260				22$:				;++033
    239	000260	112011 				MOVB	(R0)+,(R1)	;++033 COPY BYTE
    240	000262	001407 				BEQ	25$		;++033 IF EQ FINISHED WITH LINE
    241	000264	122127 	000040 			CMPB	(R1)+,#SPA	;++033 PRINTING CHARACTER?
    242	000270	101373 				BHI	22$		;++033 IF HI YES
    243	000272	005377 	000000G			DEC	@$LNDES		; DECREMENT BYTE COUNT
    244	000276	005301 				DEC	R1		;++033 BACKUP BYTE POINTER
    245	000300	000767 				BR	22$		;++033 GO AGAIN
    246	000302				25$:				;++033
    247	000302	012600 				MOV	(SP)+,R0	;++033 RETRIEVE TERMINAL BYTE ADDRESS
    248	000304	024545 				CMP	-(R5),-(R5)	;POINT TO DIRECTIVE NAME
    249	000306	012701 	000000'			MOV	#DBAS,R1	;GET ADDRESS OF DIRECTIVE LIST
    250	000312	021511 			30$:	CMP	(R5),(R1)	;FIRST HALF MATCH?
    251	000314	001004 				BNE	40$		;IF NE NO
    252	000316	026561 	000002 	000002 		CMP	2(R5),2(R1)	;SECOND HALF MATCH?
    253	000324	001447 				BEQ	60$		;IF EQ YES
    254	000326	062701 	000006 		40$:	ADD	#LNG,R1		;ADVANCE TO NEXT NAME
    255	000332	020127 	000000'			CMP	R1,#DBASE	; END OF LIST?
    256	000336	103765 				BLO	30$		;IF LO NO
    257	000340	012701 				MOV	(PC)+,R1	;ILLEGAL DIRECTIVE
    258	000342	   000G	   000G			.BYTE	E$R36,S$V2	;FATAL-NO RETURN
    259	000344	000460 				BR	90$		;
    260	000346				50$:				;
    261	000346	010002 				MOV	R0,R2		; COPY ADDRESS OF GCML BLOCK
    262	000350	062702 	000146 			ADD	#G.CMLD,R2	; POINT TO ADDRESS OF LINE DESCRIPTOR
    263	000354	116003 	000140 			MOVB	G.ERR(R0),R3	; GET ERROR CODE
    264	000360	012701 	000000C			MOV	#<S$V2*400!E$R9>,R1 ; ASSUME TOO MANY INDIRECT FILES
    265	000364	120327 	177774 			CMPB	R3,#GE.MDE	; TOO MANY INDIRECT FILES?
    266	000370	001423 				BEQ	55$		; IF EQ YES
    267	000372	012701 	000000C			MOV	#<S$V2*400!E$R8>,R1 ; ASSUME INDIRECT FILE SYNTAX ERROR
    268	000376	120327 	000002 			CMPB	R3,#GE.IND	; ERROR IN INDIRECT FILE SPECIFICATION?
    269	000402	001416 				BEQ	55$		; IF EQ YES
    270	000404	062702 	177742 			ADD	#<F.FNB+N.FNAM>-G.CMLD,R2 ; POINT TO FNB
    271	000410	012701 	000000C			MOV	#<S$V2*400!E$R11>,R1 ; ASSUME OPEN FAILURE
    272	000414	120327 	177776 			CMPB	R3,#GE.OPR	; OPEN FAILURE?
    273	000420	001407 				BEQ	55$		; IF EQ YES
    274	000422	012701 	000000C			MOV	#<S$V2*400!E$R94>,R1 ; ASSUME PREMATURE EOF			;JAK105
    275	000426	120327 	177766 			CMPB	R3,#GE.EOF	; PREMATURE EOF					;JAK105
    276	000432	001402 				BEQ	55$		; IF EQ YES					;JAK105
    277	000434	012701 	000000C			MOV	#<S$V2*400!E$R10>,R1 ; MUST BE ODL FILE I/O ERROR
    278	000440				55$:				;
    279	000440					CALL	$ERMSG		;OUTPUT ERROR MESSAGE
    280
    281					;
    282					; DIRECTIVE FOUND-DISPATCH TO DIRECTIVE PROCESSING ROUTINE
    283					;
    284
    285	000444	016101 	000004 		60$:	MOV	LNG-2(R1),R1	;GET ADDRESS OF ROUTINE AND OPERAND FLG
MLSG0	MACRO M1110  22-AUG-78 01:46  PAGE 3-5


    286	000450	032701 	000001 			BIT	#1,R1		;OPERANDS REQUIRED?
    287	000454	001405 				BEQ	70$		;IF EQ NO
    288	000456	005702 				TST	R2		;TERMINAL ZERO?
    289	000460	001410 				BEQ	80$		;IF EQ YES-ERROR
    290	000462	122702 	000073 			CMPB	#';,R2		;COMMENT TERMINATOR?
    291	000466	001405 				BEQ	80$		;IF EQ YES-ERROR
    292	000470	022525 			70$:	CMP	(R5)+,(R5)+	;POINT TO LABEL
    293	000472	042701 	000001 			BIC	#1,R1		;CLEAR OPERAND FLAG
    294	000476					CALL	(R1)		;CALL DIRECTIVE PROCESSING ROUTINE
    295	000500	000613 				BR	10$		;GO AGAIN
    296	000502	012701 			80$:	MOV	(PC)+,R1	;DIRECTIVE HAS NO OPERANDS
    297	000504	   000G	   000G			.BYTE	E$R35,S$V2	;FATAL-NO RETURN
    298	000506	000167 	000432 		90$:	JMP	SDIRL1		;
    299
    300					;
    301					; END DIRECTIVE
    302					;
    303
    304	000512					GDIR	END
    305
    306	000512	005726 			END:	TST	(SP)+		;REMOVE RETURN FROM STACK
    307	000514	005767 	000000G			TST	$RTDIR		; ROOT SEGMENT SPECIFIED?
    308	000520	001004 				BNE	20$		; IF NE YES
    309	000522	012701 			10$:	MOV	(PC)+,R1	;ROOT SEG NOT DEFFINED
    310	000524	   000G	   000G			.BYTE	E$R40,S$V2	;FATAL-NO RETURN
    311	000526	000167 	000412 			JMP	SDIRL1		;
    312	000532				20$:				;
    313	000532					CALLR	$CLSOD		; CLOSE ODL FILE
    314
    315					;
    316					; NAME DIRECTIVE
    317					;
    318
    319	000536					GDIR	NAME,1
    320
    321
    322						.ENABL	LSB
    323
    324
    325	000536				NAME:				;
    326	000536	024545 				CMP	-(R5),-(R5)	; POINT TO START OF PARAMETER BLOCK
    327	000540					CALL	$RR		; CONVERT NAME
    328	000544	024545 				CMP	-(R5),-(R5)	; BACK UP TO START OF NAME
    329	000546	012701 	000000C			MOV	#<S$V2*400!E$R40>,R1 ; ASSUME NULL NAME SPECIFIED
    330	000552	005715 				TST	(R5)		; NULL NAME SPECIFIED?
    331	000554	001562 				BEQ	SEG3		; IF EQ YES
    332	000556	012746 	000000C			MOV	#<<F$LG+2>*400!S$EGN>,-(SP) ; SET ITEM TYPE, SIZE
    333	000562	012746 	000112'			MOV	#SGBAS,-(SP)	; SET BASE ADDRESS OF ATTRIBUTE LIST
    334	000566	012704 	000000C			MOV	#<SG$DES!SG$MEM>,R4 ; SET INITIAL FLAGS WORD
    335	000572	000416 				BR	5$		;
    336
    337					;
    338					; PROGRAM SECTION DIRECTIVE
    339					;
    340
    341	000574					GDIR	PSECT,1
    342
MLSG0	MACRO M1110  22-AUG-78 01:46  PAGE 3-6


    343	000574	024545 			PSECT:	CMP	-(R5),-(R5)	;POINT TO BEGINNING OF TEMP STORAGE
    344	000576					CALL	$RP		;GET CONTROL SECTION NAME
    345	000602	024545 				CMP	-(R5),-(R5)	;POINT TO CONTROL SECTION NAME
    346	000604	012701 				MOV	(PC)+,R1	;ASSUME BLANK NAME
    347	000606	   000G	   000G			.BYTE	E$R41,S$V2	;FATAL-NO RETURN
    348	000610	005715 				TST	(R5)		;ANY NAME SPECIFIED?
    349	000612	001554 				BEQ	SDIRL1		;IF EQ NO
    350	000614	012704 	000000G			MOV	#CS$REL,R4	; SET INITIAL FLAGS WORD
    351	000620	012746 	000000C			MOV	#<<F$LG+2>*400!S$CTN>,-(SP) ; SET ITEM TYPE, SIZE
    352	000624	012746 	000000'			MOV	#SBAS,-(SP)	; GET BASE ADDRESS OF ATTRIBUTE LIST
    353	000630				5$:				;
    354	000630					CALL	SDIRL		;SCAN DIRECTIVE LIST FOR DUP NAME
    355	000634	022525 				CMP	(R5)+,(R5)+	;ADJUST R5
    356	000636				10$:				;
    357	000636	011603 				MOV	(SP),R3		; GET BASE ADDRESS OF DESCRIPTOR
    358	000640	005702 				TST	R2		; AT END OF LINE?
    359	000642	001434 				BEQ	40$		;IF EQ YES-DONE
    360	000644	122702 	000073 			CMPB	#';,R2		;COMMENT TERMINATOR?
    361	000650	001431 				BEQ	40$		;IF EQ YES-DONE
    362	000652	122702 	000054 			CMPB	#',,R2		;COMMA TERMINATOR?
    363	000656	001121 				BNE	SEG3		;IF NE NO-SYNTAX ERROR
    364	000660					CALL	$SETNB		;BYPASS LEADING BLANKS AND HT'S
    365	000664					CALL	$RP		;GET SECTION ATTRIBUTE NAME
    366	000670	024545 				CMP	-(R5),-(R5)	;BACK UP TO NAME
    367	000672				20$:				;
    368	000672	021523 				CMP	(R5),(R3)+	; CHECK FIRST HALF OF NAME
    369	000674	001004 				BNE	25$		; IF NE NO MATCH
    370	000676	026523 	000002 			CMP	2(R5),(R3)+	; CHECK SECOND HALF OF NAME
    371	000702	001407 				BEQ	30$		; IF EQ HAVE ATTRIBUTE
    372	000704	005743 				TST	-(R3)		; ADJUST R3
    373	000706				25$:				;
    374	000706	022323 				CMP	(R3)+,(R3)+	; STEP OVER NAME AND DATA
    375	000710	005713 				TST	(R3)		; AT END OF LIST
    376	000712	001367 				BNE	20$		; IF LO NO
    377	000714	012701 				MOV	(PC)+,R1	;ILLEGAL SECTION ATTRIBUTE NAME
    378	000716	   000G	   000G			.BYTE	E$R42,S$V2	;FATAL-NO RETURN
    379	000720	000511 				BR	SDIRL1		;
    380	000722	141304 			30$:	BICB	(R3),R4		;ASSUME BIT IS TO BE CLEARED
    381	000724	005713 				TST	(R3)		;CLEAR BIT?
    382	000726	100343 				BPL	10$		;IF PL YES
    383	000730	151304 				BISB	(R3),R4		;SET BIT
    384	000732	000741 				BR	10$		;GO AGAIN
    385	000734	012701 	000002G		40$:	MOV	#F$LG+2,R1	; GET SIZE OF BLOCK NEEDED
    386	000740					CALL	$ALBLK		;ALLOCATE STORAGE
    387	000744	010001 				MOV	R0,R1		;COPY ADDRESS OF BLOCK
    388	000746	022621 				CMP	(SP)+,(R1)+	; CLEAN STACK, ADJUST BLOCK ADDRESS
    389	000750	012621 				MOV	(SP)+,(R1)+	; SET TYPE, SIZE
    390	000752	016521 	177774 			MOV	-4(R5),(R1)+	; SET FIRST HALF OF NAME
    391	000756	014521 				MOV	-(R5),(R1)+	; SET SECOND HALF OF NAME
    392	000760	010411 				MOV	R4,(R1)		;SET FLAG BYTE
    393	000762	000452 				BR	SEG2		;
    394
    395						.DSABL	LSB
    396
    397					;
    398					; ROOT DIRECTIVE
    399					;
MLSG0	MACRO M1110  22-AUG-78 01:46  PAGE 3-7


    400
    401	000764					GDIR	ROOT,1
    402
    403	000764	005046 			ROOT:	CLR	-(SP)		;SET ROOT SEGMENT FLAG
    404	000766	005767 	000000G			TST	$RTDIR		; MULTIPLE ROOT DIRECTIVES
    405	000772	001406 				BEQ	SEG1		;IF EQ NO
    406	000774	012701 				MOV	(PC)+,R1	;MULTIPLY DEFINED ROOT SEGMENT
    407	000776	   000G	   000G			.BYTE	E$R38,S$V2	;FATAL-NO RETURN
    408	001000	000461 				BR	SDIRL1		;
    409					;
    410					; FACTOR DIRECTIVE
    411					;
    412
    413	001002					GDIR	FCTR,1
    414
    415	001002	005715 			FCTR:	TST	(R5)		;ANY LABEL SPECIFIED?
    416	001004	001446 				BEQ	SEG3		;IF EQ NO-SYNTAX ERROR
    417	001006	010546 				MOV	R5,-(SP)	;SET SEG SEGMENT FLAG
    418	001010	010003 			SEG1:	MOV	R0,R3		;SAVE ADDRESS OF NEXT BYTE
    419	001012					CALL	SDIRL		;SCAN DIRECTIVE LIST FOR DUP NAME
    420	001016	017701 	000000G			MOV	@$LNDES,R1	; GET LENGTH OF LINE
    421	001022	062701 	000013 			ADD	#11.,R1		;ALLOW FOR TERMINAL BYTE AND ENTRY
    422	001026	010146 				MOV	R1,-(SP)	;SAVE LENGTH FOR LATER
    423	001030					CALL	$ALBLK		;ALLOCATE STORAGE
    424	001034	012601 				MOV	(SP)+,R1	;RETRIEVE SIZE OF BLOCK
    425	001036	005726 				TST	(SP)+		;ROOT SEG?
    426	001040	001002 				BNE	10$		;IF NE NO
    427	001042	010067 	000000G			MOV	R0,$RTDIR	; SET POINT TO ROOT SEGMENT
    428	001046	010002 			10$:	MOV	R0,R2		;COPY ADDRESS OF BLOCK
    429	001050	005722 				TST	(R2)+		;POINT TO SECOND WORD
    430	001052	000301 				SWAB	R1		;SIZE TO LEFT BYTE
    431	001054	010122 				MOV	R1,(R2)+	;SET TYPE/SIZE
    432	001056	012522 				MOV	(R5)+,(R2)+	;INSERT SEGMENT NAME
    433	001060	012522 				MOV	(R5)+,(R2)+	;
    434	001062	016701 	000000G			MOV	$LNDES,R1	; GET DESCRIPTOR ADDRESS
    435	001066	016101 	000002 			MOV	2(R1),R1	; GET ADDRESS OF LINE BUFFER
    436	001072	160103 				SUB	R1,R3		;CALCULATE RELATIVE ADDR OF NEXT BYTE
    437	001074	060003 				ADD	R0,R3		;ADD BASE ADDRESS OF BLOCK
    438	001076	062703 	000012 			ADD	#10.,R3		;DISPLACE BY ENTRY SIZE
    439	001102	010322 				MOV	R3,(R2)+	;SET ADDRESS OF NEXT BYTE
    440	001104	112122 			20$:	MOVB	(R1)+,(R2)+	;MOVE LINE
    441	001106	001376 				BNE	20$		;IF NE GO AGAIN
    442	001110	010077 	000002G		SEG2:	MOV	R0,@$DIRHD+2	; LINK NEW LAST TO OLD LAST
    443	001114	010067 	000002G			MOV	R0,$DIRHD+2	; SET NEW LAST
    444	001120					RETURN			;
    445	001122	012701 			SEG3:	MOV	(PC)+,R1	;SYNTAX ERROR
    446	001124	   000G	   000G			.BYTE	E$R37,S$V2	;FATAL-NO RETURN
    447	001126	000406 				BR	SDIRL1		;
    448
    449					;
    450					; SCAN PARSED DIRECTIVE LIST FOR DUPLICATE NAME
    451					;
    452
    453	001130				SDIRL:	CALL	$SCNL		; SCAN DIRECTIVE LIST FOR A MATCH
    454	001134	103001 				BCC	10$		;IF CC FOUND ONE-ERROR
    455	001136					RETURN			;
    456	001140	012701 			10$:	MOV	(PC)+,R1	;DUPLICATE NAME DEFINITION
MLSG0	MACRO M1110  22-AUG-78 01:46  PAGE 3-8


    457	001142	   000G	   000G			.BYTE	E$R39,S$V2	;FATAL-NO RETURN
    458	001144	016702 	000000G		SDIRL1:	MOV	$LNDES,R2	; GET ADDRESS OF LINE DESCRIPTOR
    459	001150				SDIRL2:	CALL	$ERMSG		;OUTPUT ERROR MESSAGE
    460
    461					;+
    462					; **-$CLSOD-CLOSE ODL FILE AND RESET GCML BLOCK
    463					;
    464					; INPUTS:
    465					;
    466					;	GCMSA=INITIAL CONTENTS OF GCML IMPURE AREA
    467					;
    468					; OUTPUTS:
    469					;
    470					;	ODL FILE GCML BLOCK IS RESTORED TO  ITS INITIAL STATE.
    471					;	THE ODL FILE IS CLOSED.
    472					;
    473					; ALL REGISTER CONTENTS ARE PRESERVED.
    474					;
    475					;-
    476
    477	001154				$CLSOD::			;
    478	001154					SAVVR			; SAVE THE VOLATILE REGISTERS
    479	001160					RCML$	$ODLPT		; RESET GCML BLOCK
    480	001170					CLOSE$	R0		; CLOSE TOP LEVEL FILE
    481	001174	012701 	000000'			MOV	#GCMSA,R1	; GET ADDRESS OF SAVE AREA
    482	001200	012702 	000010 			MOV	#G.ISIZ/2,R2	; GET SIZE OF AREA IN WORDS
    483	001204	062700 	000140 			ADD	#S.FDB,R0	; POINT TO IMPURE AREA
    484	001210				10$:				;
    485	001210	012120 				MOV	(R1)+,(R0)+	; RESTORE IMPURE AREA
    486	001212					SOB	R2,10$		;
    487	001216					RETURN			;
    488
    489		000001 				.END
MLSG0	MACRO M1110  22-AUG-78 01:46  PAGE 3-9
SYMBOL TABLE

B.BBFS= 000010   	FD.COM= 020000   	F.DFNB= 000046   	GE.RBG= 177730   	SEG2    001110R
B.BFST= 000015   	FD.CR = 000002   	F.DSPT= 000044   	GE.SIZ= 000040   	SEG3    001122R
B.NXBD= 000012   	FD.DIR= 000010   	F.DVNM= 000134   	G.CMLD= 000146   	SGBAS   000112R     004
B.VBN = 000004   	FD.FTN= 000001   	F.EFBK= 000010   	G.DPRM= 000160   	SG$DES= ****** GX
CH.AND= 000001   	FD.F11= 040000   	F.EFN = 000050   	G.ERR = 000140   	SG$DSK= ****** GX
CR    = 000015   	FD.INS= 000010   	F.EOBB= 000032   	G.ISIZ= 000020   	SG$GBL= ****** GX
CS$ACC= ****** GX	FD.ISP= 002000   	F.ERR = 000052   	G.MODE= 000141   	SG$MEM= ****** GX
CS$ALO= ****** GX	FD.MNT= 100000   	F.FACC= 000043   	G.PSDS= 000142   	SG$PHY= ****** GX
CS$GBL= ****** GX	FD.OSP= 004000   	F.FFBY= 000014   	G.SIZE= 000224   	SPA   = 000040
CS$MEM= ****** GX	FD.PLC= 000004   	F.FNAM= 000110   	HT    = 000011   	SW$CC = ****** GX
CS$REL= ****** GX	FD.PRN= 000004   	F.FNB = 000102   	LF    = 000012   	S$CTN = ****** GX
CS$TYP= ****** GX	FD.PSE= 010000   	F.FTYP= 000116   	LNG   = 000006   	S$EGN = ****** GX
DBAS    000000R     002	FD.RAH= 000001   	F.FVER= 000120   	N     = 000001   	S$V2  = ****** GX
DBASE   000000R     003	FD.RAN= 000002   	F.HIBK= 000004   	NAME    000536R  	S.BFHD= 000020
END     000512R  	FD.REC= 000001   	F.LUN = 000042   	NB.DEV= 000200   	S.FATT= 000016
E$R10 = ****** GX	FD.RWM= 000001   	F.MBCT= 000054   	NB.DIR= 000100   	S.FDB = 000140
E$R11 = ****** GX	FD.SDI= 000020   	F.MBC1= 000055   	NB.NAM= 000004   	S.FNAM= 000006
E$R35 = ****** GX	FD.SQD= 000040   	F.MBFG= 000056   	NB.SD1= 000400   	S.FNB = 000036
E$R36 = ****** GX	FD.TTY= 000004   	F.NRBD= 000024   	NB.SD2= 001000   	S.FNBW= 000017
E$R37 = ****** GX	FD.WBH= 000002   	F.NREC= 000030   	NB.SNM= 000040   	S.FNTY= 000004
E$R38 = ****** GX	FF    = 000014   	F.OVBS= 000030   	NB.STP= 000020   	S.FTYP= 000002
E$R39 = ****** GX	FF.CHR= 000005   	F.RACC= 000016   	NB.SVR= 000010   	S.NFEN= 000020
E$R40 = ****** GX	FF.NV = 000003   	F.RATT= 000001   	NB.TYP= 000002   	TMP     000020R
E$R41 = ****** GX	FF.POE= 000002   	F.RCNM= 000034   	NB.VER= 000001   	VT    = 000013
E$R42 = ****** GX	FF.RWD= 000001   	F.RCTL= 000017   	N.DID = 000024   	$ALBLK= ****** GX
E$R8  = ****** GX	FF.RWF= 000006   	F.RSIZ= 000002   	N.DVNM= 000032   	$CLSOD  001154RG
E$R9  = ****** GX	FF.SPC= 000004   	F.RTYP= 000000   	N.FID = 000000   	$DIRHD= ****** GX
E$R94 = ****** GX	FO.APD= 000106   	F.SEQN= 000100   	N.FNAM= 000006   	$ERMSG= ****** GX
FA.APD= 000100   	FO.MFY= 000002   	F.SPDV= 000072   	N.FTYP= 000014   	$INIPT= ****** GX
FA.CRE= 000010   	FO.RD = 000001   	F.SPUN= 000074   	N.FVER= 000016   	$LNDES= ****** GX
FA.DLK= 001000   	FO.UPD= 000006   	F.STBK= 000036   	N.NEXT= 000022   	$MLSG0  000032RG
FA.ENB= 100000   	FO.WRT= 000016   	F.UNIT= 000136   	N.STAT= 000020   	$ODLPT= ****** GX
FA.EXC= 002000   	F$LG  = ****** GX	F.URBD= 000020   	N.UNIT= 000034   	$RP   = ****** GX
FA.EXT= 000004   	F.ACTL= 000076   	F.VBN = 000064   	PAR$$$= 000000   	$RR   = ****** GX
FA.NSP= 000100   	F.ALOC= 000040   	F.VBSZ= 000060   	PSECT   000574R  	$RTDIR= ****** GX
FA.POS= 010000   	F.BBFS= 000062   	GCMSA   000000R  	ROOT    000764R  	$SAVVR= ****** GX
FA.RD = 000001   	F.BDB = 000070   	GE.BIF= 177775   	R$SWTH= ****** GX	$SCNL = ****** GX
FA.RWD= 004000   	F.BGBC= 000057   	GE.CLO= 000004   	R$$11M= 000000   	$SETNB= ****** GX
FA.SEQ= 040000   	F.BKDN= 000026   	GE.COM= 000001   	R.FIX = 000001   	$STFDB= ****** GX
FA.SHR= 000040   	F.BKDS= 000020   	GE.CON= 000020   	R.SEQ = 000003   	$$    = 000001
FA.TMP= 000020   	F.BKEF= 000050   	GE.EOF= 177766   	R.VAR = 000002   	.CLOSE= ****** G
FA.WCK= 020000   	F.BKP1= 000051   	GE.IND= 000002   	SBAS    000000R     004	.GCML1= ****** G
FA.WRT= 000002   	F.BKST= 000024   	GE.IOR= 177777   	SDIRL   001130R  	.GCML2= ****** G
FCTR    001002R  	F.BKVB= 000064   	GE.LC = 000010   	SDIRL1  001144R  	...GBL= 000000
FD.BLK= 000010   	F.CHR = 000075   	GE.MDE= 177774   	SDIRL2  001150R  	...TPC= 000140
FD.CCL= 000002   	F.CNTG= 000034   	GE.OPR= 177776   	SEG1    001010R

. ABS.	000000	   000
      	001220	   001
DIRL0 	000036	   002
DIRL1 	000000	   003
SATL0 	000160	   004
ERRORS DETECTED:  0

VIRTUAL MEMORY USED:  2778 WORDS  ( 11 PAGES)
DYNAMIC MEMORY:  3828 WORDS  ( 14 PAGES)
ELAPSED TIME:  00:00:26
OBJ$:MLSG0,LIS$:MLSG0/-SP=SRC$:MACFLM,FCSPR,MLSG0
