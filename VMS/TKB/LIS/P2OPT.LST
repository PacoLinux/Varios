P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3


      1						.TITLE	P2OPT
      2						.IDENT	/23/
      3					                                                                                ;**-1
      4					;
      5					; COPYRIGHT (C) 1974,1976
      6					; COPYRIGHT (C) 1977
      7					; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
      8					;
      9					; THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR USE ONLY ON A
     10					; SINGLE COMPUTER SYSTEM AND MAY  BE  COPIED   ONLY  WITH  THE
     11					; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE,  OR
     12					; ANY OTHER COPIES THEREOF, MAY NOT BE PROVIDED  OR  OTHERWISE
     13					; MADE AVAILABLE TO ANY OTHER PERSON   EXCEPT FOR  USE ON SUCH
     14					; SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE  TERMS.  TITLE
     15					; TO AND OWNERSHIP OF THE SOFTWARE SHALL AT ALL  TIMES  REMAIN
     16					; IN DEC.
     17					;
     18					; THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
     19					; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
     20					; EQUIPMENT CORPORATION.
     21					;
     22					; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF
     23					; ITS SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
     24					;
     25					; VERSION	23
     26					;                                                                               ;**-1
     27					; D.N. CUTLER 6-NOV-72
     28					;
     29					; PHASE 2 OPTION PROCESSING
     30					;
     31					; MODIFICATIONS:
     32					;
     33					; NO.		DATE		PROGRAMMER
     34					; ---		---		----------
     35					;
     36					; 040		24-APR-75	C. MONIA
     37					; 041		15-MAY-75	C. MONIA
     38					; 043		23-SEP-75	C. MONIA
     39					; 048		09-FEB-76	C. MONIA
     40					; 051		02-MAR-76	C. MONIA
     41					; 052		02-MAR-76	C. MONIA
     42					; 059		15-APR-76	C. MONIA
     43					; 061		16-MAY-76	C. MONIA
     44					; 062		01-JUN-76	C. MONIA
     45					; JAK100	16-FEB-77	CHANGES FOR MULTIUSER TASKS
     46					;
     47					; MACRO LIBRARY CALLS
     48					;
     49
     50						.MCALL	CSI$
     51	000000					CSI$
     52
     53					;
     54					; EQUATED SYMBOLS
     55					;
     56					; MULTI-PARAMETER TRUE/FALSE DEFINITIONS
     57					;
P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3-1


     58
     59		000000 			F=0				;NO MULTI PARAMETER CONSTRUCTION ALLOWED
     60		000001 			T=1				;MULTI PARAMETER CONSTRUCTION IS ALLOWED
     61
     62					;
     63					; MEMORY ALLOCATION FLAGS
     64					;
     65
     66		000001 			EX$TSK==000001			;++041 EXTEND TASK KEYWORD LAST INVOKED
     67		000002 			PA$RT==000002			;++041 PARTITION KEYWORD LAST INVOKED
     68
     69
     70
     71					;
     72					; LOCAL MACROS
     73					;
     74					; DEFINE OPTION
     75					;
     76					; DFO	KW,MA,MS,A
     77					;
     78					; WHERE:
     79					;
     80					;	KW=A 1 TO 6 CHARACTER OPTION IDENTIFIER KEYWORD AND SUBROUTINE
     81					;		ADDRESS. THE SUBROUTINE IS CALLED AFTER THE PARAMETERS
     82					;		HAVE BEEN PARSED.
     83					;	MA=MINIMUM NUMBER OF PARAMETERS REQUIRED.
     84					;	MS=MULTI-PARAMETER T/F SWITCH.
     85					;	A=ADDRESS OF THE CONVERSION ROUTINES FOR THE ARGUMENTS. THIS
     86					;		ARGUMENT IS ASSUMED TO HAVE THE CONSTRUCTION <A,...,Z>.
     87					;
     88
     89						.MACRO	DFO KW,MA,MS,A
     90						.PSECT	ARGBLK, D,GBL
     91					$$=.
     92					NN=0
     93						.IRP	X,<A>
     94					NN=NN+1
     95						.WORD	X
     96						.ENDM
     97						.PSECT	OPTBLK,D,GBL
     98					MM=.
     99					K$EY==.-MM
    100						.WORD	0
    101						.WORD	0
    102					.=MM
    103						.RAD50	/KW/
    104					.=MM+4
    105					M$IN==.-MM
    106					M$AX==.-MM+1
    107						.BYTE	MA,NN
    108					A$RG==.-MM
    109						.WORD	$$+MS
    110					S$UB==.-MM
    111						.WORD	KW
    112					L$NG==.-MM
    113						.PSECT	OPCD$I,I,GBL
    114						.ENDM
P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3-2


    115
    116					;
    117					; LOCAL DATA
    118					;
    119					;
    120					; ADDRESS BOUND
    121					;
    122
    123	000000				$ADBND::.BLKW	1		;
    124
    125					;
    126					; HIGH ADDRESS LIMIT
    127					;
    128
    129	000002				$ADLIM::.BLKW	1		;
    130
    131					;
    132					; MEMORY ALLOCATION FLAGS WORD
    133					;
    134
    135	000004				$MEMFL::.BLKW	1		;
    136
    137
    138					;
    139					; MAXIMUM LUN ASSIGNMENT
    140					;
    141
    142	000006				$MXASG::.BLKW	1		;
    143
    144
    145					;
    146					; TASK FILE SWITCHES
    147					;
    148
    149	000010				$TKSW::	.BLKW	1		;
    150
    151	000000					.PSECT	OPTBLK ,D,GBL
    152
    153	000000				$KWRD::				; REF LABEL
    154	000012					.PSECT
    155
    156					;
    157					; PARAMETER DATA
    158					;
    159
    160	000000					.PSECT	PARM,D
    161
    162	000000				$NUMP::	.BLKW	1		; NUMBER OF PARAMETERS
    163	000002	126401 	057057 		IOBSCT:	.RAD50	/$$IOB1/	;MAX LENGTH SECTION NAME
    164	000006	126407 	006617 		OBFSCT:	.RAD50	/$$OBF1/	; FORTRAN OTS FORMATTING BUFFER SECTION
    165
    166					;
    167					; PARAMETER STORAGE
    168					;
    169
    170	000012				SCTNAM:	.BLKW	2		; RADIX 50 SECTION NAME
    171	000016				$PARM::				;
P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3-3


    172
    173						.IF	NDF	R$$11M
    174
    175						.BLKW	65.
    176
    177						.IFF
    178
    179	000016					.BLKW	C.SIZE+4/2
    180
    181						.ENDC
    182
    183	000076	000026 			OPMDS:	.WORD	OPMSE-OPMSG	;OPTION SOLICITATION MESSAGE DESCRIPTOR
    184	000100	000102'				.WORD	OPMSG		;
    185	000102	   015 	   012 	   105 	OPMSG:	.ASCII	<15><12>/ENTER OPTIONS:/;
	000105	   116 	   124 	   105
	000110	   122 	   040 	   117
	000113	   120 	   124 	   111
	000116	   117 	   116 	   123
	000121	   072
    186	000122	   015 	   012 	   124 		.ASCII	<15><12>/TKB>/	;
	000125	   113 	   102 	   076
    187	000130				OPMSE:				; REF LABEL
    188						.EVEN
    189	000012					.PSECT
    190
    191
    192					;+
    193					; **-$P2OPT-PHASE 2 OPTION PROCESSING
    194					;
    195					; THIS ROUTINE IS CALLED AT THE END OF PHASE 1 TO READ AND PROCESS
    196					; OPTION INPUT. DEFAULTS ARE ESTABLISHED AND THEN OPTIONS ARE
    197					; PROCESSED.
    198					;
    199					; INPUTS:
    200					;
    201					;	NONE.
    202					;
    203					; OUTPUTS:
    204					;
    205					;	DEFAULTS ARE ESTABLISHED AND OPTIONS ARE PROCESSED.
    206					;-
    207
    208	000012				$P2OPT::SAVRG			;SAVE NONVOLITILE REGISTERS
    209	000016					CALL	$STOPT		; INITIALIZE OPTIONS
    210	000022	032767 	000000G	000000G		BIT	#EN$DR,$SWTCH	; ACCEPT OPTIONS?
    211	000030	001024 				BNE	70$		; IF NE, NO
    212	000032				40$:				;
    213	000032	012767 	000076'	000000G		MOV	#OPMDS,$CMFLG	; SET ADDRESS OF PROMPT DESCRIPTOR
    214	000040				50$:				;
    215	000040					CALL	$GTCML		; READ A COMMAND LINE
    216	000044	103416 				BCS	70$		; IF C/S LOGICAL EOF
    217	000046	005067 	000000G			CLR	$CMFLG		; REVERT TO DEFAULT PROMPT
    218	000052	112702 	000041 			MOVB	#'!,R2		; SET KEYWORD STATUS
    219	000056	012700 	000000G			MOV	#$LNBUF,R0	; SET BUFFER ADDRESS
    220	000062				60$:				;
    221	000062					CALL	$P2PRS		; PARSE KEYWORD INPUT
    222	000066	103764 				BCS	50$		; IF C/S SYNTAX ERROR OR END OF LINE
P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3-4


    223	000070	010446 				MOV	R4,-(SP)	; SAVE OPTION BLOCK ADDRESS
    224	000072					CALL	@S$UB(R4)	; CALL OPTION PROCESSOR
    225	000076	012604 				MOV	(SP)+,R4	; RESTORE OPTION BLOCK ADDRESS
    226	000100	000770 				BR	60$		; GO AGAIN
    227	000102				70$:				;
    228	000102					CALLR	$P2POP		; PERFORM POST-OPTION PROCESSING
    229
    230
    231	000000					.PSECT	OPCD$I,I,GBL
    232
    233					;
    234					; CONVERT SYMBOL WITH OFFSET VALUE
    235					;
    236
    237	000000				SYM:	CALL	$RR		;GET SYMBOL
    238	000004	005300 				DEC	R0		;BACK UP TO TERMINATOR
    239	000006					CALL	$OT		;GET OFFSET
    240	000012					RETURN			;
    241
    242					;
    243					; ABORT TASK BUILD
    244					;
    245
    246	000014					DFO	ABORT,1,T,$DC
    247
    248	000014				ABORT:				;
    249	000014	012703 	000000C			MOV	#<S$V2*400!E$R83>,R3 ; GET USER ABORT MESSAGE
    250	000020	000167 	000134'			JMP	$P2OPE		; RESTART TKB
    251
    252					;
    253					; ABSOLUTE PATCH
    254					;
    255
    256	000024					DFO	ABSPAT,3,T,^/$RR,$OT,$OT,$OT,$OT,$OT,$OT,$OT,$OT,$OT/
    257
    258	000024				ABSPAT:	SAVVR			;SAVE VOLITILE REGISTERS
    259	000030	010301 				MOV	R3,R1		;CALCULATE SIZE OF BLOCK NEEDED
    260	000032	006301 				ASL	R1		;CONVERT TO BYTES
    261	000034	062701 	000012 			ADD	#6+4,R1		;ALLOW FOR EXTRA STORAGE
    262	000040					CALL	$ALBLK		;ALLOCATE STORAGE
    263	000044	005004 				CLR	R4		;SET TYPE TO ABS PATCH
    264	000046	005303 				DEC	R3		;DECREMENT WORD COUNT
    265	000050	000537 				BR	GBLPT1		;
    266
    267					;
    268					; ACTIVE FILES
    269					;
    270
    271	000052					DFO	ACTFIL,1,F,$DC
    272
    273	000052				ACTFIL:				;
    274	000052	011567 	000000G			MOV	(R5),$ACTFL	;SET NUMBER OF ACTIVE FILES
    275	000056					RETURN			;
    276
    277
    278					;
    279					; DEVICE ASSIGNMENT
P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3-5


    280					;
    281
    282	000060					DFO	ASG,2,T,^/$DV,$DC,$DC,$DC,$DC,$DC,$DC,$DC,$DC/
    283
    284	000060				ASG:	SAVVR			;SAVE VOLITILE REGISTERS
    285	000064	010500 				MOV	R5,R0		;COPY PARAMETER LIST ADDRESS
    286	000066	022020 				CMP	(R0)+,(R0)+	;POINT TO FIRST LUN NUMBER
    287	000070	005303 				DEC	R3		;CALCULATE NUMBER OF LUNS
    288	000072	010301 				MOV	R3,R1		;SET LOOP COUNT
    289	000074	005710 			10$:	TST	(R0)		;ZERO LUN NUMBER?
    290	000076	001436 				BEQ	30$		;IF EQ YES
    291	000100	021067 	000000G			CMP	(R0),$NUNIT	; LEGAL UNIT?
    292	000104	101033 				BHI	30$		;IF HI NO
    293	000106	022067 	000006'			CMP	(R0)+,$MXASG	; NEW MAX LUN?
    294	000112	101403 				BLOS	15$		; IF LOS NO
    295	000114	016067 	177776 	000006'		MOV	-2(R0),$MXASG	; SET NEW MAX
    296	000122				15$:				;
    297	000122					SOB	R1,10$		;REPEAT
    298	000126	010301 				MOV	R3,R1		;COPY NUMBER OF LUNS
    299	000130	006301 				ASL	R1		;CONVERT TO BYTES
    300	000132	062701 	000006 			ADD	#6,R1		;ALLOW FOR LINK AND DEVICE INFO
    301	000136					CALL	$ALBLK		;ALLOCATE STORAGE
    302	000142	010077 	000002G			MOV	R0,@$LUNHD+2	;LINK NEW TO OLD LAST
    303	000146	010067 	000002G			MOV	R0,$LUNHD+2	;SET NEW LAST
    304	000152	005720 				TST	(R0)+		;POINT TO DEVICE NAME
    305	000154	012520 				MOV	(R5)+,(R0)+	;INSERT DEVICE NAME
    306	000156	012501 				MOV	(R5)+,R1	;GET PHYSICAL UNIT
    307	000160	110120 				MOVB	R1,(R0)+	;INSERT PHYSICAL UNIT
    308	000162	110320 				MOVB	R3,(R0)+	;INSERT NUMBER OF LUN ASSIGNMENTS
    309	000164	012520 			20$:	MOV	(R5)+,(R0)+	;INSERT LUN NUMBERS
    310	000166					SOB	R3,20$		;REPEAT
    311	000172					RETURN			;
    312	000174	012703 			30$:	MOV	(PC)+,R3	;ILLEGAL LUN NUMBER
    313	000176	   000G	   000G			.BYTE	E$R48,S$V1	;DIAGNOSTIC
    314	000200	000167 	000134'			JMP	$P2OPE
    315
    316						.IF	NDF	R$$11M
    317
    318					;
    319					; BASE/TOP ADDRESS
    320					;
    321
    322						DFO	BASE,1,F,$DC
    323						DFO	TOP,1,F,$DC
    324
    325					TOP:	NEG	R3		;SET TOP FLAG
    326					BASE:	BIT	#3,(R5)		;4K BOUNDRY?
    327						BNE	20$		;IF NE NO
    328						CMP	(R5),#28.	;LEGAL 4K BOUNDRY?
    329						BHI	20$		;IF HI NO
    330						TST	R3		;TOP OR BASE?
    331						BPL	10$		;IF PL BASE
    332						NEG	(R5)		;MAKE NEGATIVE FOR TOP
    333					10$:	MOV	(R5),$OFFST	;SET OFFSET BIAS
    334						RETURN			;
    335					20$:	MOV	(PC)+,R3	;ILLEGAL BASE/TOP VALUE
    336						.BYTE	E$R51,S$V1	;DIAGNOSTIC
P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3-6


    337						JMP	$P2OPE
    338
    339						.ENDC
    340
    341					;
    342					; SET MINIMUM DISK ALLOCATION FOR TASK FILE
    343					;
    344
    345	000204					DFO	CORSIZ	1,F,$DC
    346
    347	000204				CORSIZ:				;
    348	000204	021527 	000200 			CMP	(R5),#128.	; REASONABLE ALLOCATION
    349	000210	101005 				BHI	10$		; IF HI NO
    350	000212	006315 				ASL	(R5)		; CONVERT K TO DISK BLOCKS
    351	000214	006315 				ASL	(R5)		;
    352	000216	011567 	000000G			MOV	(R5),$FSIZI	; SET MINIMUM DISK ALLOCATION
    353	000222					RETURN			;
    354	000224				10$:				;
    355	000224	012703 	000000C			MOV	#<S$V1*400!E$R84>,R3 ; DISK IMAGE ALLOCATION TOO LARGE
    356	000230	000167 	000134'			JMP	$P2OPE		;
    357
    358					;
    359					; ESTABLISH TASK EXTEND SIZE
    360					;
    361
    362	000234					DFO	EXTTSK	1,F,$DC
    363
    364	000234				EXTTSK:				;++041
    365	000234	032767 	000000G	000000G		BIT	#MP$SY,$SWTCH	;++041 TASK MAPPED?
    366	000242	001426 				BEQ	10$		;++041 IF EQ NO IGNORE KEYWORD
    367	000244	012767 	000001 	000004'		MOV	#EX$TSK,$MEMFL	;++041 SET EXTEND FLAG
    368	000252	005067 	000000G			CLR	$PARSZ		;++041 SET PARTITION SIZE TO ZERO
    369	000256	005067 	000000G			CLR	$HGHAD		;++041 SET HIGH ADDRESS BOUND TO ZERO
    370	000262	012767 	001777 	000000G		MOV	#1777,$LBEXT	;++041 FORCE EXTEND ERROR IF INVALID SIZE
    371	000270	062715 	000037 			ADD	#37,(R5)	;++041 ROUND INCREMENT TO 32 W BOUNDRY
    372	000274	103411 				BCS	10$		;++041 IF C/S ERROR
    373	000276	042715 	000037 			BIC	#37,(R5)	;++041 ...
    374	000302	006115 				ROL	(R5)		;++041 CONVERT TO NUMBER OF 32W BLOCKS
    375	000304	006115 				ROL	(R5)		;++041 ...
    376	000306	006115 				ROL	(R5)		;++041 ...
    377	000310	106115 				ROLB	(R5)		;++041 ...
    378	000312	000315 				SWAB	(R5)		;++041 ...
    379	000314	011567 	000000G			MOV	(R5),$LBEXT	;++041 SAVE EXTEND SIZE
    380	000320				10$:				;++041
    381	000320					RETURN			;++041
    382
    383
    384
    385					;
    386					; GLOBAL SYMBOL PATCH
    387					;
    388
    389	000322					DFO	GBLPAT,3,T,^/$RR,SYM,$OT,$OT,$OT,$OT,$OT,$OT,$OT,$OT/
    390
    391	000322				GBLPAT:	SAVVR			;SAVE VOLITILE REGISTERS
    392	000326	010301 				MOV	R3,R1		;CALCULATE SIZE OF BLOCK NEEDED
    393	000330	006301 				ASL	R1		;CONVERT TO BYTES
P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3-7


    394	000332	062701 	000016 			ADD	#6+4+4,R1	;ALLOW FOR EXTRA STORAGE
    395	000336					CALL	$ALBLK		;ALLOCATE STORAGE
    396	000342	012704 	000002 			MOV	#2,R4		;SET TYPE TO GLOBAL
    397	000346	005203 				INC	R3		;INCREMENT WORD COUNT
    398	000350	010077 	000002G		GBLPT1:	MOV	R0,@$PATHD+2	;LINK NEW LAST TO OLD LAST
    399	000354	010067 	000002G			MOV	R0,$PATHD+2	;SET NEW LAST
    400	000360	005720 				TST	(R0)+		;POINT TO NUMBER OF PARAMETERS
    401	000362	016710 	000000'			MOV	$NUMP,(R0)	; INSERT NUMBER OF PARAMETERS
    402	000366	162720 	000002 			SUB	#2,(R0)+	;ADJUST TO NUM PATCH VALUES
    403	000372	012520 				MOV	(R5)+,(R0)+	;INSERT SEGMENT NAME
    404	000374	012520 				MOV	(R5)+,(R0)+	;
    405	000376	010420 				MOV	R4,(R0)+	;INSERT TYPE OF ENTRY
    406	000400	012520 			10$:	MOV	(R5)+,(R0)+	;MOVE PARAMETERS
    407	000402					SOB	R3,10$		;REPEAT
    408	000406					RETURN			;
    409
    410					;
    411					; EXTEND CONTROL SECTION LENGTH
    412					;
    413
    414	000410					DFO	EXTSCT,2,T,^/$RR,$OT/
    415	000410					DFO	FMTBUF,1,F,$DC
    416	000410					DFO	MAXBUF,1,F,$DC
    417
    418
    419	000410				FMTBUF:				;
    420	000410					SAVVR			; SAVE THE VOLATILE REGISTERS
    421	000414	012701 	000012'			MOV	#OBFSCT+4,R1	; POINT TO SECTION NAME PLUS OFFSET
    422	000420	000404 				BR	MXBUF1		;
    423
    424	000422				MAXBUF:				;
    425	000422					SAVVR			; SAVE THE VOLATILE REGISTERS
    426	000426	012701 	000006'			MOV	#IOBSCT+4,R1	; POINT TO NAME OF SECTION PLUS OFFSET
    427	000432				MXBUF1:				;
    428	000432	014145 				MOV	-(R1),-(R5)	; MOVE NAME TO SECTION STORAGE
    429	000434	014145 				MOV	-(R1),-(R5)	;
    430	000436	000402 				BR	EXTSC1		; EXTEND SECTION LENGTH
    431	000440				EXTSCT:	SAVVR			;SAVE VOLITILE REGISTERS
    432	000444				EXTSC1:				;
    433	000444	010501 				MOV	R5,R1		;GET ADDRESS OF SECTION NAME
    434	000446	162701 	000000G			SUB	#S$YM,R1	;CALCULATE PROPER OFFSET
    435	000452	012700 	000000G			MOV	#$SCTHD,R0	;GET ADDRESS OF EXTEND LISTHEAD
    436	000456					CALL	$SRCHR		; SEARCH FOR SECTION NAME
    437	000462	103020 				BCC	10$		;IF CC ALREADY THERE-CHANGE DEFINITION
    438	000464	012701 	000002G			MOV	#C$SBSE+2,R1	;GET SIZE OF BLOCK NEEDED
    439	000470					CALL	$ALBLK		;ALLOCATE STORAGE
    440	000474	012560 	000000G			MOV	(R5)+,S$YM(R0)	;INSERT SECTION NAME
    441	000500	012560 	000002G			MOV	(R5)+,S$YM+2(R0);
    442	000504	011560 	000000G			MOV	(R5),C$SBSE(R0)	;SET SECTION EXTENSION LENGTH
    443	000510	010001 				MOV	R0,R1		;COPY ADDRESS OF SECTION ENTRY
    444	000512	012700 	000000G			MOV	#$SCTHD,R0	;GET ADDRESS OF EXTEND LISTHEAD
    445	000516					CALL	$ISYMR		; INSERT EXTENSION
    446	000522	000403 				BR	20$		;
    447	000524	016560 	000004 	000000G	10$:	MOV	4(R5),C$SBSE(R0);REDEFINE EXTENSION LENGTH
    448	000532				20$:	RETURN			;
    449
    450					;
P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3-8


    451					; GLOBAL SYMBOL DEFINITION
    452					;
    453
    454	000534					DFO	GBLDEF,2,T,^/$RR,$OT/
    455
    456	000534				GBLDEF:	SAVVR			;SAVE VOLITILE REGISTERS
    457	000540	012746 	000000G			MOV	#SY$DEF,-(SP)	; SET SYMBOL FLAGS
    458	000544				GBLDF1:				;
    459	000544					CALL	$GTRT		; GET REAL ADDRESS OF ROOT SEGMENT IN R0
    460	000550	016701 	000000G			MOV	$RTSEG,R1	; GET VIRTUAL ADDRESS OF ROOT
    461	000554					CALL	$LCKPG		; LOCK ROOT IN MEMORY
    462	000560	062700 	000000G			ADD	#S$GUND,R0	; OFFSET TO UNDEFINED COUNT
    463	000564	010067 	000012'			MOV	R0,SCTNAM	; SAVE REAL ADDRESS OF COUNT
    464	000570	010501 				MOV	R5,R1		;GET ADDRESS OF SYMBOL
    465	000572	162701 	000000G			SUB	#S$YM,R1	;CALCULATE PROPER OFFSET
    466	000576	062700 	000000C			ADD	#S$GSTB-S$GUND,R0 ; POINT TO SYMBOL TABLE
    467	000602					CALL	$SRCH		;SEARCH FOR SYMBOL
    468	000606	103057 				BCC	10$		;IF CC ALREADY THERE-CHANGE DEFINITION
    469	000610	012701 	000000G			MOV	#S$YLGH,R1	;GET SIZE OF BLOCK NEEDED
    470	000614					CALL	$ALVRT		; ALLOCATE VIRTUAL STORAGE
    471	000620	012560 	000000G			MOV	(R5)+,S$YM(R0)	;INSERT SYMBOL
    472	000624	012560 	000002G			MOV	(R5)+,S$YM+2(R0);
    473	000630	151660 	000000G			BISB	(SP),S$YFLG(R0) ; SET FLAGS
    474	000634	001004 				BNE	5$		; IF NE SYMBOL IS DEFINITION
    475	000636	005267 	000000G			INC	$MSYMC		; INCREMENT MASTER UNDEFINED COUNT
    476	000642	005277 	000012'			INC	@SCTNAM		; INCREMENT UNDEFINED COUNT
    477	000646				5$:				;
    478	000646	152760 	000000G	000000G		BISB	#SY$GBL,S$YFLG(R0);SET GLOBAL SYMBOL
    479	000654	012560 	000000G			MOV	(R5)+,S$YVAL(R0) ; SET SYMBOL VALUE
    480	000660	010115 				MOV	R1,(R5)		; SET VIRTUAL ADDRESS OF SYMBOL
    481	000662	016760 	000000G	000000G		MOV	$ASCT,S$YCMT(R0) ; SET SECTION ENTRY ADDRESS
    482	000670	016700 	000000G			MOV	$RTSEG,R0	; GET VIRTUAL ADDRESS OF ROOT
    483	000674	010045 				MOV	R0,-(R5)	; SAVE VIRTUAL ADDRESS OF ROOT
    484	000676	062700 	000000C			ADD	#S$GSTB/2,R0	; POINT TO SYMBOL TABLE LISTHEAD
    485	000702					CALL	$SRCHI		;SEARCH FOR SYMBOL INSERTION
    486	000706					CALL	$ISYM		;INSERT SYMBOL IN TABLE
    487	000712	026727 	000000G	000001 		CMP	$NUMSG,#1	; TASK OVERLAYED?
    488	000720	001447 				BEQ	20$		; IF EQ NO
    489	000722	162705 	000012 			SUB	#<2+3>*2,R5	; CONVERT DEFINITION TO DESCRIPTOR FORM
    490	000726	010501 				MOV	R5,R1		; COPY DESCRIPTOR ADDRESS
    491	000730	012700 	000000G			MOV	#$SYMHD,R0	; GET ADDRESS OF MASTER TABLE LIST
    492	000734					CALL	$SRCIV		; SEARCH FOR INSERTION
    493	000740					CALL	$ISYMV		; INSERT SYMBOL
    494	000744	000435 				BR	20$		;
    495	000746				10$:				;
    496	000746	005716 				TST	(SP)		; PROCESSING REFERENCE?
    497	000750	001014 				BNE	12$		; IF NE YES
    498	000752	132760 	000000G	000000G		BITB	#SY$WK,S$YFLG(R0)  ; WEAK QUALIFIER SET?
    499	000760	001427 				BEQ	20$		; IF EQ NO
    500	000762	005267 	000000G			INC	$MSYMC		; INCREMENT MASTER UNDEFINED COUNT
    501	000766	005277 	000012'			INC	@SCTNAM		; INCREMENT SEGMENT UNDEFINED COUNT
    502	000772	142760 	000000G	000000G		BICB	#SY$WK,S$YFLG(R0) ; CLEAR WEAK QUALIFIER
    503	001000	000415 				BR	17$		;
    504	001002				12$:				;
    505	001002	132760 	000000G	000000G		BITB	#SY$DEF,S$YFLG(R0) ; FIND DEFINITION?
    506	001010	001006 				BNE	15$		; IF NE YES, CHANGE DEFINITION
    507	001012	005367 	000000G			DEC	$MSYMC		; DECREMENT MASTER UNDEFINED COUNT
P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3-9


    508	001016	005377 	000012'			DEC	@SCTNAM		; DECREMENT SEGMENT UNDEFINED COUNT
    509	001022	151660 	000000G			BISB	(SP),S$YFLG(R0)	; SET DEFINITION FLAG
    510	001026				15$:				;
    511	001026	016560 	000004 	000000G		MOV	4(R5),S$YVAL(R0) ; REDEFINE SYMBOL
    512	001034				17$:				;
    513	001034					CALL	$WRMPG		; WRITE-MARK PAGE
    514	001040				20$:				;
    515	001040	005726 				TST	(SP)+		; CLEAN THE STACK
    516	001042	016701 	000000G			MOV	$RTSEG,R1	; GET VIRTUAL ADDRESS OF ROOT
    517	001046					CALLR	$UNLPG		; UNLOCK ROOT SEGMENT
    518
    519					;
    520					; GLOBAL SYMBOL REFERENCE
    521					;
    522
    523	001052					DFO	GBLREF,1,T,^/$RR/
    524
    525	001052				GBLREF:				;
    526	001052					SAVVR			; SAVE THE VOLATILE REGISTERS
    527	001056	005046 				CLR	-(SP)		; CLEAR FLAGS WORD ON STACK
    528	001060	000631 				BR	GBLDF1		;
    529
    530	000106					.PSECT
    531
    532					;
    533					; RESIDENT LIBRARY AND COMMON BLOCKS
    534					;
    535
    536	000106					DFO	COMMON,2,T,^/$LBR,$ACC,$DC/
    537	001062					DFO	LIBR,2,T,^/$LBR,$ACC,$DC/
    538	001062					DFO	RESCOM,1,T,^/$RESLB/
    539	001062					DFO	RESLIB,1,T,^/$RESLB/
    540
    541	000106					.PSECT
    542	000106				LIBR:				;
    543	000106				COMMON:				;
    544	000106				RESCOM:				;
    545	000106				RESLIB:				;
    546	000106					CALLR	$LIBR		; PROCESS RESIDENT LIBRARY REQUEST
    547
    548	001062					.PSECT	OPCD$I,I,GBL
    549
    550
    551					;
    552					; ODT SST VECTOR
    553					;
    554
    555	001062					DFO	ODTV,2,F,^/$RR,$DC/
    556
    557	001062	022525 			ODTV:	CMP	(R5)+,(R5)+	;POINT TO VECTOR SIZE
    558	001064	005715 				TST	(R5)		;ANY SIZE SPECIFIED?
    559	001066	001412 				BEQ	10$		;IF EQ NO
    560	001070	021527 	000040 			CMP	(R5),#32.	;LEGAL SIZE?
    561	001074	103007 				BHIS	10$		;IF HIS NO
    562						.IIF NDF R$$11M, MOVB	(R5),$ODTSZ ; SET VECTOR SIZE
    563	001076	011567 	000000G			.IIF DF	R$$11M,	MOV	(R5),$ODTSZ ; SET VECTOR SIZE
    564	001102	014567 	000002G			MOV	-(R5),$ODTV+2	;SET GLOBAL SYMBOL
P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3-10


    565	001106	014567 	000000G			MOV	-(R5),$ODTV	;
    566	001112					RETURN			;
    567	001114	000167 	000342 		10$:	JMP	TSKV1		;ILLEGAL VECTOR SIZE
    568
    569					;
    570					; PARTITION NAME
    571					;
    572
    573						.IIF NDF R$$11M,	DFO	PAR,1,F,$RR
    574	001120					.IIF DF R$$11M		DFO	PAR,1,F,^/$RR,$OT,$OT/
    575
    576	001120				PAR:				;
    577
    578						.IF	NDF	R$$11M
    579
    580						MOV	(R5)+,$PNAME	; INSERT PARTITION NAME
    581						MOV	(R5)+,$PNAME+2 	;
    582						RETURN			;
    583
    584						.IFF
    585
    586	001120					SAVVR			; SAVE VOLATILE REGISTERS
    587	001124	010500 				MOV	R5,R0		; COPY OPTION BLOCK POINTER
    588	001126	020327 	000002 			CMP	R3,#2		; CHECK NO. OF ARGUMENTS
    589	001132	001477 				BEQ	30$		; ERROR, SIZE NOT SPECIFIED
    590	001134	003004 				BGT	10$		; HAVE BOTH SIZE AND LENGTH
    591	001136					CALL	$GTPPR		; GET PARTITION PARAMETERS
    592	001142	103476 				BCS	40$		; IF C/S PARTITION NON-EXISTENT
    593	001144	000417 				BR	20$		; CHECK MAPPING
    594	001146				10$:				;
    595	001146	022020 				CMP	(R0)+,(R0)+	; POINT TO BASE ADDRESS
    596	001150	012001 				MOV	(R0)+,R1	; GET BASE ADDRESS
    597	001152	032701 	000077 			BIT	#77,R1		; ON 32W BOUND?
    598	001156	001065 				BNE	30$		; IF NE NO
    599	001160	011002 				MOV	(R0),R2		; GET LENGTH
    600	001162	032702 	000077 			BIT	#77,R2		; SIZE MUST BE MULTIPLE OF 32 W
    601	001166	001061 				BNE	30$		; ELSE ERROR
    602	001170	000302 				SWAB	R2		; CONVERT LENGTH TO 32W BLOCKS
    603	001172	106002 				RORB	R2		;
    604	001174	006102 				ROL	R2		;
    605	001176	006102 				ROL	R2		;
    606	001200	006102 				ROL	R2		;
    607	001202	010500 				MOV	R5,R0		; POINT TO PARTITION NAME
    608	001204				20$:				;
    609	001204	032767 	000000G	000000G		BIT	#MP$SY,$SWTCH	;++041 MAPPED SYSTEM?
    610	001212	001002 				BNE	21$		;++041 IF NE YES
    611	001214	005702 				TST	R2		;++041 PARTITION HAVE LENGTH?
    612	001216	001450 				BEQ	40$		;++041 IF EQ NO ERROR
    613	001220				21$:				;++041
    614	001220	010267 	000000G			MOV	R2,$PARSZ	; SET PARTITION SIZE
    615	001224	036701 	000000'			BIT	$ADBND,R1	; ADDRESS BOUND OK?
    616	001230	001043 				BNE	40$		; IF NE NO
    617	001232	005701 				TST	R1		; CHECK LOW ADDRESS BOUND
    618	001234	001410 				BEQ	22$		; IF EQ OK
    619	001236	032767 	000000G	000000G		BIT	#MP$SY,$SWTCH	; TARGET SYSTEM MAPPED?
    620	001244	001404 				BEQ	22$		; IF EQ NO OK
    621	001246	032767 	000000G	000010'		BIT	#SW$NH,$TKSW	; TASK HAVE HEADER?
P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3-11


    622	001254	001431 				BEQ	40$		; IF EQ YES ERROR
    623	001256				22$:				;
    624	001256					CALL	$VTKMP		; VERIFY MAPPING
    625	001262	103426 				BCS	40$		; IF C/S ERROR
    626	001264	020267 	000002'			CMP	R2,$ADLIM	; HIGH ADDRESS LIMIT OK?
    627	001270	101404 				BLOS	25$		; IF LOS YES
    628	001272	032767 	000000G	000010'		BIT	#SW$NH,$TKSW	; BUILDING LIBRARY ?
    629	001300	001417 				BEQ	40$		; IF EQ NO
    630	001302				25$:				;
    631	001302	012067 	000000G			MOV	(R0)+,$PNAME	; SET PARTITION NAME
    632	001306	012067 	000002G			MOV	(R0)+,$PNAME+2	;
    633	001312	010167 	000000G			MOV	R1,$OFFST	; SET OFFSET
    634	001316	010267 	000000G			MOV	R2,$HGHAD	; HIGH ADDRESS BOUND
    635	001322	012767 	000002 	000004'		MOV	#PA$RT,$MEMFL	;++041 SET EXPLICIT PARTITION  FLAG
    636	001330					RETURN			;
    637	001332				30$:				;
    638	001332	012703 	000000C			MOV	#<S$V1*400!E$R64>,R3 ; FETCH ERROR/SEVERITY
    639	001336	000402 				BR	50$		;
    640	001340				40$:				;
    641	001340	012703 	000000C			MOV	#<S$V1*400!E$R82>,R3 ; INVALID PARTITION SPECIFIED
    642	001344				50$:				;
    643	001344	000167 	000134'			JMP	$P2OPE		;
    644
    645						.ENDC
    646
    647						.IF	NDF	R$$11M
    648
    649					;
    650					; POOL USAGE
    651					;
    652
    653						DFO	POOL,1,F,$DC
    654
    655					POOL:	CMP	(R5),#512.	;REASONABLE NUMBER?
    656						BHI	10$		;IF HI NO
    657						TST	(R5)		;ZERO IS BAD ALSO
    658						BEQ	10$		;IF EQ NO NO
    659						MOV	(R5),$POOL	;SET POOL USAGE
    660						RETURN			;
    661					10$:	MOV	(PC)+,R3	;ILLEGAL POOL USAGE NUMBER
    662						.BYTE	E$R52,S$V1	;DIAGNOSTIC
    663						JMP	$P2OPE		;
    664
    665						.ENDC
    666
    667					;
    668					; DEFAULT PRIORITY
    669					;
    670
    671	001350					DFO	PRI,1,F,$DC
    672
    673	001350	021527 	000372 		PRI:	CMP	(R5),#250.	;LEGAL PRIORITY?
    674	001354	101003 				BHI	10$		;IF HI NO
    675	001356	011567 	000000G			MOV	(R5),$PRIOR	;SET DEFAULT PRIORITY
    676	001362					RETURN			;
    677	001364	012703 			10$:	MOV	(PC)+,R3	;ILLEGAL PRIORITY
    678	001366	   000G	   000G			.BYTE	E$R53,S$V1	;DIAGNOSTIC
P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3-12


    679	001370	000167 	000134'			JMP	$P2OPE		;
    680
    681					;
    682					; STACK SIZE ALLOCATION
    683					;
    684
    685	001374					DFO	STACK,1,F,$DC
    686
    687	001374	006315 			STACK:	ASL	(R5)		;CONVERT SIZE TO BYTES
    688	001376	011567 	000000G			MOV	(R5),$STACK	;SET STACK SIZE
    689	001402					RETURN			;
    690
    691					 										;JAK100
    692					;										;JAK100
    693					; R-O PARTITION NAME								;JAK100
    694					;										;JAK100
    695					 										;JAK100
    696						.IF DF	R$$11M								;JAK100
    697					 										;JAK100
    698	001404					DFO	ROPAR,1,F,$RR							;JAK100
    699					 										;JAK100
    700	001404				ROPAR:										;JAK100
    701	001404	012567 	000000G			MOV	(R5)+,$ROPAR		; INSERT R-O PARTITION NAME		;JAK100
    702	001410	012567 	000002G			MOV	(R5)+,$ROPAR+2		;					;JAK100
    703	001414					RETURN									;JAK100
    704					 										;JAK100
    705						.ENDC									;JAK100
    706					 										;JAK100
    707					;
    708					; TASK NAME
    709					;
    710
    711	001416					DFO	TASK,1,F,$RR
    712
    713	001416	012567 	000000G		TASK:	MOV	(R5)+,$TNAME	;SET TASK NAME
    714	001422	011567 	000002G			MOV	(R5),$TNAME+2	;
    715	001426					RETURN			;
    716
    717					;
    718					; TASK SST VECTOR
    719					;
    720
    721	001430					DFO	TSKV,2,F,^/$RR,$DC/
    722
    723	001430	022525 			TSKV:	CMP	(R5)+,(R5)+	;POINT TO VECTOR SIZE
    724	001432	005715 				TST	(R5)		;ANY SIZE SPECIFIED?
    725	001434	001412 				BEQ	TSKV1		;IF EQ NO
    726	001436	021527 	000040 			CMP	(R5),#32.	;LEGAL SIZE?
    727	001442	103007 				BHIS	TSKV1		;IF HIS NO
    728						.IIF  NDF  R$$11M, MOVB	(R5),$TSKSZ ; SET VECTOR SIZE
    729	001444	011567 	000000G			.IIF   DF R$$11M, MOV	(R5),$TSKSZ ; SET VECTOR SIZE
    730	001450	014567 	000002G			MOV	-(R5),$TSKV+2	;SET GLOBAL SYMBOL
    731	001454	014567 	000000G			MOV	-(R5),$TSKV	;
    732	001460					RETURN			;
    733	001462	012703 			TSKV1:	MOV	(PC)+,R3	;ILLEGAL SST VECTOR SIZE
    734	001464	   000G	   000G			.BYTE	E$R54,S$V1	;DIAGNOSTIC
    735	001466	000167 	000134'			JMP	$P2OPE		;
P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3-13


    736
    737					;
    738					; TASK UIC
    739					;
    740
    741	001472					DFO	UIC,1,F,UCVT
    742
    743	001472	011567 	000000G		UIC:	MOV	(R5),$TKUIC	;SET TASK UIC
    744	001476					RETURN			;
    745
    746					;
    747					; UIC CONVERSION ROUTINE
    748					;
    749
    750	001500	122720 	000133 		UCVT:	CMPB	#'[,(R0)+	;LEFT BRACKET?
    751	001504	001025 				BNE	10$		;IF NE NO-SYNTAX ERROR
    752	001506					CALL	20$		;CONVERT PROJECT NUMBER
    753	001512	122702 	000054 			CMPB	#',,R2		;TERMINAL COMMA?
    754	001516	001020 				BNE	10$		;IF NE NO-SYNTAX ERROR
    755	001520	105745 				TSTB	-(R5)		;PROJECT TOO BIG?
    756	001522	001016 				BNE	10$		;IF NE YES-SYNTAX ERROR
    757	001524	114546 				MOVB	-(R5),-(SP)	;SAVE PROJECT NUMBER
    758	001526					CALL	20$		;CONVERT PROGRAMMER NUMBER
    759	001532	012601 				MOV	(SP)+,R1	;RETRIEVE PROJECT NUMBER
    760	001534	122702 	000135 			CMPB	#'],R2		;RIGHT BRACKET?
    761	001540	001007 				BNE	10$		;IF NE NO-SYNTAX ERROR
    762	001542	105745 				TSTB	-(R5)		;PROGRAMMER TOO BIG?
    763	001544	001005 				BNE	10$		;IF NE YES-SYNTAX ERROR
    764	001546	110125 				MOVB	R1,(R5)+	;INSERT PROJECT NUMBER
    765	001550					CALL	$SETNB		;BYPASS LEADING BLANKS AND HT'S
    766	001554	112002 				MOVB	(R0)+,R2	;GET TERMINAL BYTE
    767	001556					RETURN			;
    768	001560	005726 			10$:	TST	(SP)+		;REMOVE RETURN FROM STACK
    769	001562	012702 	000000G			MOV	#$LNDES,R2	;GET ADDRESS OF LINE DESCRIPTOR
    770	001566	012701 				MOV	(PC)+,R1	;SYNTAX ERROR
    771	001570	   000G	   000G			.BYTE	E$R30,S$V1	;DIAGNOSTIC
    772	001572					CALL	$ERMSG		;OUTPUT ERROR MESSAGE
    773	001576	000261 				SEC			;
    774	001600					RETURN			; GO AGAIN
    775	001602	010046 			20$:	MOV	R0,-(SP)	;SAVE NEXT BYTE ADDRESS FOR POSSIBLE RESCAN
    776	001604					CALL	$OT		;CONVERT OCTAL
    777	001610	122702 	000056 			CMPB	#'.,R2		;TERMINAL PERIOD?
    778	001614	001007 				BNE	30$		;IF NE NO
    779	001616	011600 				MOV	(SP),R0		;RETRIEVE NEXT BYTE ADDRESS
    780	001620	005745 				TST	-(R5)		;BACK UP PARAMETER POINTER
    781	001622					CALL	$DC		;CONVERT DECIMAL
    782	001626					CALL	$SETNB		;SET NONBLANK
    783	001632	112002 				MOVB	(R0)+,R2	;GET TERMINAL BYTE
    784	001634	005726 			30$:	TST	(SP)+		;CLEAN STACK
    785	001636					RETURN			;
    786
    787					;
    788					; LOGICAL UNIT USAGE
    789					;
    790
    791	001640					DFO	UNITS,1,F,$DC
    792
P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3-14


    793						.ENABL	LSB
    794
    795	001640				UNITS:				;
    796	001640	021567 	000006'			CMP	(R5),$MXASG	; LESS THAN MAX LUN ASSIGNMENT?
    797	001644	103406 				BLO	10$		;IF LO YES
    798	001646	021527 	000372 			CMP	(R5),#250.	;REASONABLE NUMBER OF UNITS?
    799	001652	101003 				BHI	10$		;IF HI NO
    800	001654	011567 	000000G			MOV	(R5),$NUNIT	;SET NEW NUMBER OF UNITS
    801	001660					RETURN			;
    802	001662	012703 			10$:	MOV	(PC)+,R3	;ILLEGAL NUMBER OF UNITS
    803	001664	   000G	   000G			.BYTE	E$R49,S$V1	;DIAGNOSTIC
    804	001666				20$:				;
    805	001666	000167 	000134'			JMP	$P2OPE		;
    806
    807					;
    808					; SPECIFY VIRTUAL PROGRAM SECTION
    809					;
    810
    811	001672					DFO	VSECT,2,T,^\$RR,$OT,$OT,$OT\
    812
    813	001672				VSECT:				;
    814	001672					CALLR	$VSECT		; PROCESS VIRTUAL SECTION KEYWORD
    815
    816					;
    817					; NUMBER OF TASK WINDOWS
    818					;
    819
    820	001676					DFO	WNDWS,1,F,$DC
    821
    822	001676				WNDWS:				;
    823	001676	021527 	000007 			CMP	(R5),#7.	; TOO MANY WINDOWS REQUESTED?
    824	001702	101003 				BHI	30$		; IF HI YES
    825	001704	011567 	000000G			MOV	(R5),$NUMWN	; SET WINDOW COUNT FOR TASK
    826	001710					RETURN			;
    827	001712				30$:				;
    828	001712	012703 	000000C			MOV	#<S$V1*400!E$R85>,R3 ; SET ERROR/SEVERITY
    829	001716	000763 				BR	20$		; REPORT ILLEGAL WINDOW SPECIFICATION
    830
    831						.DSABL	LSB
    832
    833	000112					.PSECT
    834
    835					;
    836					; COMMON SUBROUTINES
    837					;
    838					;+
    839					; **-$GTRT-CONVERT VIRTUAL ADDRESS OF ROOT SEGMENT TO REAL ADDRESS
    840					;
    841					;	THIS ROUTINE IS CALLED TO CONVERT THE ROOT SEGMENT VIRTUAL ADDRESS
    842					;	TO AN ADDRESS IN REAL MEMORY. THE PAGE BUFFER CONTAINING THE
    843					;	SEGMENT DESCRIPTOR IS WRITE-MARKED.
    844					;
    845					;
    846					; INPUTS:
    847					;
    848					;	$RTSEG = VIRTUAL ADDRESS OF ROOT SEGMENT DESCRIPTOR
    849					;
P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3-15


    850					; OUTPUTS:
    851					;
    852					;	R0 = REAL ADDRESS OF DESCRIPTOR
    853					;	PAGE BUFFER IS WRITE-MARKED
    854					;
    855					; THE CONTENTS OF R1 ARE PRESERVED
    856					;-
    857
    858	000112				$GTRT::				;
    859	000112	010146 				MOV	R1,-(SP)	; SAVE R1
    860	000114	016701 	000000G			MOV	$RTSEG,R1	; GET VIRTUAL ADDRESS OF DESCRIPTOR
    861	000120					CALL	$CVRL		; CONVERT TO REAL ADDRESS
    862	000124					CALL	$WRMPG		; WRITE MARK PAGE
    863	000130	012601 				MOV	(SP)+,R1	; RESTORE R1
    864	000132					RETURN			;
    865					;
    866					;
    867					;
    868					;+
    869					; **-$P2OPE - PARAMETER ROUTINE ERROR EXIT
    870					;
    871					; INPUTS:
    872					;
    873					;	R3:	ERROR/SEVERITY CODE
    874					;
    875					; OUTPUTS:
    876					;
    877					; 	NONE
    878					;
    879					;-
    880					;
    881
    882	000134				$P2OPE::			;
    883	000134					SAVVR			; SAVE VOLATILE REGISTERS
    884	000140	010301 				MOV	R3,R1		;SET ERROR/SEVERITY
    885	000142	012702 	000000G			MOV	#$LNDES,R2	;GET ADDRESS OF LINE DESCRIPTOR
    886	000146					CALL	$ERMSG		;OUTPUT ERROR MESSAGE
    887	000152					RETURN			;
    888
    889
    890						.IF	DF	R$$11M
    891
    892					;
    893					; SUBROUTINES TO CHECK FOR INTERSECTING PARTITIONS
    894					;
    895					;+
    896					; **-$VTKMP - VERITY TASK AREA DOES NOT INTERSECT LIBRARIES
    897					;
    898					; **-$VLBMP - VERIFY LIBRARY DOES NOT INTERSECT OTHER LIBRARIES
    899					;		OR TASK PARTITION
    900					;
    901					; INPUTS:
    902					;
    903					;	R0:	ADDRESS OF 2-WORD, RADIX 50 PARTITION NAME
    904					;		OR RESIDENT LIBRARY NAME
    905					;	R1:	LOW MEMORY LIMIT
    906					;	R2:	LENGTH IN 32W BLOCKS OR 0
P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3-16


    907					;		IF R2=0 CHECKS ARE RESTRICTED TO SEARCH
    908					;		FOR PARTITION OR LIBRARY HAVING DUPLICATE
    909					;		NAME.
    910					;
    911					; OUTPUTS:
    912					;
    913					;	C-CLEAR: NO MEMORY CONFLICT
    914					;	C-SET:	BOUNDARIES OVERLAP, NAME CONFLICT, HIGH ADDRESS
    915					;		BOUND EXCEEDS 32K-1
    916					;
    917					;	R2:	HIGH ADDRESS BOUND OR 0 FOR NAME CHECK ONLY
    918					;
    919					; R0,R1 ARE UNCHANGED
    920					;
    921					;-
    922					;
    923					;
    924
    925						.ENABL	LSB
    926
    927	000154				$VTKMP::			;
    928	000154					SAVRG			; SAVE NON-VOLATILE REGISTERS
    929	000160					CALL	40$		; COMPUTE HIGH ADDRESS BOUND
    930	000164	000422 				BR	10$		;
    931	000166				$VLBMP::			;
    932	000166					SAVRG			; SAVE NON-VOLATILE REGISTERS
    933	000172					CALL	40$		; COMPUTE HIGH ADDRESS BOUND
    934	000176	016705 	000000G			MOV	$HGHAD,R5	; GET HIGH ADDRESS BOUND
    935	000202	001413 				BEQ	10$		; IF EQ PARTITION NOT SPECIFIED
    936	000204	016704 	000000G			MOV	$OFFST,R4	; GET RELOCATION BASE
    937	000210					CALL	50$		; CHECK ADDRESS LIMITS
    938	000214	021067 	000000G			CMP	(R0),$PNAME	; CHECK FOR NAME MATCH
    939	000220	001004 				BNE	10$		; IF NE NO MATCH
    940	000222	026067 	000002 	000002G		CMP	2(R0),$PNAME+2	; CHECK SECOND HALF OF NAME
    941	000230	001454 				BEQ	70$		; IF EQ ERROR
    942	000232				10$:				;
    943	000232	012703 	000000C			MOV	#<$LBRHD-L$DNXT>,R3 ; GET LISTHEAD ADDRESS MINUS OFFSET
    944	000236				20$:				;
    945	000236	016303 	000000G			MOV	L$DNXT(R3),R3	; GET ADDRESS OF NEXT ENTRY
    946	000242	001451 				BEQ	80$		; IF EQ CHECKED AGAINST ALL ENTRIES
    947	000244	021063 	000000G			CMP	(R0),L$DNME(R3)	; CHECK FIRST HALF OF NAME
    948	000250	001004 				BNE	30$		; IF NE NO MATCH
    949	000252	026063 	000002 	000002G		CMP	2(R0),L$DNME+2(R3) ; CHECK SECOND HALF OF NAME
    950	000260	001440 				BEQ	70$		; IF EQ -ERROR
    951	000262				30$:				;
    952	000262	032763 	000000G	000000G		BIT	#LD$RSV,L$DFLG(R3) ; APR RESERVED?
    953	000270	001004 				BNE	35$		; IF NE YES
    954	000272	032763 	000000G	000000G		BIT	#LD$REL,L$DFLG(R3) ; ABS LIBRARY?
    955	000300	001356 				BNE	20$		; IF NE NO
    956	000302				35$:				;
    957	000302	016304 	000000G			MOV	L$DSA(R3),R4	; GET STARTING ADDRESS
    958	000306	016305 	000000G			MOV	L$DMXV(R3),R5	; GET TOP ADDRESS
    959	000312					CALL	50$		; ADDRESS CHECK
    960	000316	000747 				BR	20$		; GO AGAIN
    961	000320				40$:				;
    962	000320	005702 				TST	R2		; NAME-CHECK ONLY
    963	000322	001422 				BEQ	90$		; IF EQ YES
P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3-17


    964	000324	000302 				SWAB	R2		; COMPUTE TASK UPPER BOUND
    965	000326	106002 				RORB	R2		;
    966	000330	006002 				ROR	R2		;
    967	000332	006002 				ROR	R2		;
    968	000334	005302 				DEC	R2		; BACK OFF BY ONE
    969	000336	060102 				ADD	R1,R2		; COMPUTE HIGH ADDRESS LIMIT
    970	000340	103407 				BCS	60$		; IF C/S ERROR
    971	000342	000412 				BR	90$		;
    972	000344				50$:				;
    973	000344	005702 				TST	R2		; NAME-CHECK ONLY?
    974	000346	001410 				BEQ	90$		; IF EQ YES
    975	000350	020204 				CMP	R2,R4		; CHECK END VS LOW
    976	000352	103406 				BLO	90$		; IF LO OK
    977	000354	020105 				CMP	R1,R5		; CHECK START VS. HIGH
    978	000356	101004 				BHI	90$		; IF HI, ENTIRELY ABOVE - OK.
    979	000360				60$:				;
    980	000360	005726 				TST	(SP)+		; REMOVE RETURN
    981	000362				70$:				;
    982	000362	000261 				SEC			; ERROR
    983	000364	000401 				BR	90$		;
    984	000366				80$:				;
    985	000366	000241 				CLC			; SUCCESS
    986	000370				90$:				;
    987	000370					RETURN			;
    988
    989						.DSABL	LSB
    990
    991						.ENDC
    992
    993	000416					.PSECT	OPTBLK
    994	000416				$KWRDE::			; REF LABEL
    995	000372					.PSECT
    996
    997		000001 				.END
P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3-18
SYMBOL TABLE

ABORT   000014R     004	FA.RD = 000001   	F.DVNM= 000134   	NB.DEV= 000200   	S.FNB = 000036
ABSPAT  000024R     004	FA.RWD= 004000   	F.EFBK= 000010   	NB.DIR= 000100   	S.FNBW= 000017
ACTFIL  000052R     004	FA.SEQ= 040000   	F.EFN = 000050   	NB.NAM= 000004   	S.FNTY= 000004
ASG     000060R     004	FA.SHR= 000040   	F.EOBB= 000032   	NB.SD1= 000400   	S.FTYP= 000002
A$RG  = 000006 G 	FA.TMP= 000020   	F.ERR = 000052   	NB.SD2= 001000   	S.NFEN= 000020
B.BBFS= 000010   	FA.WCK= 020000   	F.FACC= 000043   	NB.SNM= 000040   	T     = 000001
B.BFST= 000015   	FA.WRT= 000002   	F.FFBY= 000014   	NB.STP= 000020   	TASK    001416R     004
B.NXBD= 000012   	FD.BLK= 000010   	F.FNAM= 000110   	NB.SVR= 000010   	TSKV    001430R     004
B.VBN = 000004   	FD.CCL= 000002   	F.FNB = 000102   	NB.TYP= 000002   	TSKV1   001462R     004
CH.AND= 000001   	FD.COM= 020000   	F.FTYP= 000116   	NB.VER= 000001   	UCVT    001500R     004
COMMON  000106R  	FD.CR = 000002   	F.FVER= 000120   	NN    = 000001   	UIC     001472R     004
CORSIZ  000204R     004	FD.DIR= 000010   	F.HIBK= 000004   	N.DID = 000024   	UNITS   001640R     004
CR    = 000015   	FD.FTN= 000001   	F.LUN = 000042   	N.DVNM= 000032   	VSECT   001672R     004
CS.DIF= 000002   	FD.F11= 040000   	F.MBCT= 000054   	N.FID = 000000   	VT    = 000013
CS.DVF= 000004   	FD.INS= 000010   	F.MBC1= 000055   	N.FNAM= 000006   	WNDWS   001676R     004
CS.EQU= 000040   	FD.ISP= 002000   	F.MBFG= 000056   	N.FTYP= 000014   	$ACC  = ****** GX
CS.INP= 000001   	FD.MNT= 100000   	F.NRBD= 000024   	N.FVER= 000016   	$ACTFL= ****** GX
CS.MOR= 000020   	FD.OSP= 004000   	F.NREC= 000030   	N.NEXT= 000022   	$ADBND  000000RG
CS.NMF= 000001   	FD.PLC= 000004   	F.OVBS= 000030   	N.STAT= 000020   	$ADLIM  000002RG
CS.OUT= 000002   	FD.PRN= 000004   	F.RACC= 000016   	N.UNIT= 000034   	$ALBLK= ****** GX
CS.WLD= 000010   	FD.PSE= 010000   	F.RATT= 000001   	OBFSCT  000006R     003	$ALVRT= ****** GX
C$SBSE= ****** GX	FD.RAH= 000001   	F.RCNM= 000034   	ODTV    001062R     004	$ASCT = ****** GX
C.CMLD= 000002   	FD.RAN= 000002   	F.RCTL= 000017   	OPMDS   000076R     003	$CMFLG= ****** GX
C.DEVD= 000006   	FD.REC= 000001   	F.RSIZ= 000002   	OPMSE   000130R     003	$CVRL = ****** GX
C.DIRD= 000012   	FD.RWM= 000001   	F.RTYP= 000000   	OPMSG   000102R     003	$DC   = ****** GX
C.DSDS= 000006   	FD.SDI= 000020   	F.SEQN= 000100   	PAR     001120R     004	$DV   = ****** GX
C.FILD= 000016   	FD.SQD= 000040   	F.SPDV= 000072   	PA$RT = 000002 G 	$ERMSG= ****** GX
C.MKW1= 000024   	FD.TTY= 000004   	F.SPUN= 000074   	PRI     001350R     004	$FSIZI= ****** GX
C.MKW2= 000026   	FD.WBH= 000002   	F.STBK= 000036   	RESCOM  000106R  	$GTCML= ****** GX
C.SIZE= 000054   	FF    = 000014   	F.UNIT= 000136   	RESLIB  000106R  	$GTPPR= ****** GX
C.STAT= 000001   	FF.CHR= 000005   	F.URBD= 000020   	ROPAR   001404R     004	$GTRT   000112RG
C.SWAD= 000022   	FF.NV = 000003   	F.VBN = 000064   	R$$11M= 000000   	$HGHAD= ****** GX
C.TYPR= 000000   	FF.POE= 000002   	F.VBSZ= 000060   	R.FIX = 000001   	$ISYM = ****** GX
EN$DR = ****** GX	FF.RWD= 000001   	GBLDEF  000534R     004	R.SEQ = 000003   	$ISYMR= ****** GX
EXTSCT  000440R     004	FF.RWF= 000006   	GBLDF1  000544R     004	R.VAR = 000002   	$ISYMV= ****** GX
EXTSC1  000444R     004	FF.SPC= 000004   	GBLPAT  000322R     004	SCTNAM  000012R     003	$KWRD   000000RG    002
EXTTSK  000234R     004	FMTBUF  000410R     004	GBLPT1  000350R     004	SPA   = 000040   	$KWRDE  000416RG    002
EX$TSK= 000001 G 	FO.APD= 000106   	GBLREF  001052R     004	STACK   001374R     004	$LBEXT= ****** GX
E$R30 = ****** GX	FO.MFY= 000002   	HT    = 000011   	SW$NH = ****** GX	$LBR  = ****** GX
E$R48 = ****** GX	FO.RD = 000001   	IOBSCT  000002R     003	SYM     000000R     004	$LBRHD= ****** GX
E$R49 = ****** GX	FO.UPD= 000006   	K$EY  = 000000 G 	SY$DEF= ****** GX	$LCKPG= ****** GX
E$R53 = ****** GX	FO.WRT= 000016   	LD$REL= ****** GX	SY$GBL= ****** GX	$LIBR = ****** GX
E$R54 = ****** GX	F.ACTL= 000076   	LD$RSV= ****** GX	SY$WK = ****** GX	$LNBUF= ****** GX
E$R64 = ****** GX	F.ALOC= 000040   	LF    = 000012   	S$GSTB= ****** GX	$LNDES= ****** GX
E$R82 = ****** GX	F.BBFS= 000062   	LIBR    000106R  	S$GUND= ****** GX	$LUNHD= ****** GX
E$R83 = ****** GX	F.BDB = 000070   	L$DFLG= ****** GX	S$UB  = 000010 G 	$MEMFL  000004RG
E$R84 = ****** GX	F.BGBC= 000057   	L$DMXV= ****** GX	S$V1  = ****** GX	$MSYMC= ****** GX
E$R85 = ****** GX	F.BKDN= 000026   	L$DNME= ****** GX	S$V2  = ****** GX	$MXASG  000006RG
F     = 000000   	F.BKDS= 000020   	L$DNXT= ****** GX	S$YCMT= ****** GX	$NUMP   000000RG    003
FA.APD= 000100   	F.BKEF= 000050   	L$DSA = ****** GX	S$YFLG= ****** GX	$NUMSG= ****** GX
FA.CRE= 000010   	F.BKP1= 000051   	L$NG  = 000012 G 	S$YLGH= ****** GX	$NUMWN= ****** GX
FA.DLK= 001000   	F.BKST= 000024   	MAXBUF  000422R     004	S$YM  = ****** GX	$NUNIT= ****** GX
FA.ENB= 100000   	F.BKVB= 000064   	MM    = 000404R     002	S$YVAL= ****** GX	$ODTSZ= ****** GX
FA.EXC= 002000   	F.CHR = 000075   	MP$SY = ****** GX	S.BFHD= 000020   	$ODTV = ****** GX
FA.EXT= 000004   	F.CNTG= 000034   	MXBUF1  000432R     004	S.FATT= 000016   	$OFFST= ****** GX
FA.NSP= 000100   	F.DFNB= 000046   	M$AX  = 000005 G 	S.FDB = 000140   	$OT   = ****** GX
FA.POS= 010000   	F.DSPT= 000044   	M$IN  = 000004 G 	S.FNAM= 000006   	$PARM   000016RG    003
P2OPT	MACRO M1110  22-AUG-78 01:51  PAGE 3-19
SYMBOL TABLE

$PARSZ= ****** GX	$RESLB= ****** GX	$SRCH = ****** GX	$SYMHD= ****** GX	$VLBMP  000166RG
$PATHD= ****** GX	$ROPAR= ****** GX	$SRCHI= ****** GX	$TKSW   000010RG 	$VSECT= ****** GX
$PNAME= ****** GX	$RR   = ****** GX	$SRCHR= ****** GX	$TKUIC= ****** GX	$VTKMP  000154RG
$PRIOR= ****** GX	$RTSEG= ****** GX	$SRCIV= ****** GX	$TNAME= ****** GX	$WRMPG= ****** GX
$P2OPE  000134RG 	$SAVRG= ****** GX	$STACK= ****** GX	$TSKSZ= ****** GX	$$    = 000001
$P2OPT  000012RG 	$SAVVR= ****** GX	$STOPT= ****** GX	$TSKV = ****** GX	...GBL= 000000
$P2POP= ****** GX	$SCTHD= ****** GX	$SWTCH= ****** GX	$UNLPG= ****** GX	...TPC= 000140
$P2PRS= ****** GX	$SETNB= ****** GX

. ABS.	000000	   000
      	000372	   001
OPTBLK	000416	   002
PARM  	000130	   003
OPCD$I	001720	   004
ARGBLK	000204	   005
ERRORS DETECTED:  0

VIRTUAL MEMORY USED:  3307 WORDS  ( 13 PAGES)
DYNAMIC MEMORY:  3828 WORDS  ( 14 PAGES)
ELAPSED TIME:  00:00:40
OBJ$:P2OPT,LIS$:P2OPT/-SP=SRC$:MACFLM,FCSPR,P2OPT
