CORAL	MACRO M1110  22-AUG-78 01:40  PAGE 2


      1						.TITLE	CORAL
      2						.IDENT	/00/
      3
      4					;
      5					; COPYRIGHT (C) 1976
      6					; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
      7					;
      8					; THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR USE ONLY ON A
      9					; SINGLE COMPUTER SYSTEM AND MAY  BE  COPIED   ONLY  WITH  THE
     10					; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE,  OR
     11					; ANY OTHER COPIES THEREOF, MAY NOT BE PROVIDED  OR  OTHERWISE
     12					; MADE AVAILABLE TO ANY OTHER PERSON   EXCEPT FOR  USE ON SUCH
     13					; SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE  TERMS.  TITLE
     14					; TO AND OWNERSHIP OF THE SOFTWARE SHALL AT ALL  TIMES  REMAIN
     15					; IN DEC.
     16					;
     17					; THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
     18					; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
     19					; EQUIPMENT CORPORATION.
     20					;
     21					; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF
     22					; ITS SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
     23					;
     24					; VERSION 00
     25					;
     26					; D. N. CUTLER/C. MONIA 23-SEP-76
     27					;
     28					; FIRST FIT DYNAMIC CORE ALLOCATION ROUTINES
     29					;
     30					; DATA STRUCTURES
     31					;
     32					; FREE BLOCK LIST HEADER:
     33					;
     34					;	FREEHD:	.WORD	NEXT	;POINTER TO NEXT FREE BLOCK OR 0
     35					;		.WORD	0	;ALWAYS ZERO
     36					;
     37					; FREE BLOCK:
     38					;
     39					;	FREEBK:	.WORD	NEXT	;POINTER TO NEXT OR 0
     40					;		.WORD	SIZE	;SIZE OF BLOCK IN BYTES
     41					;
     42					; NOTE: THE FREE BLOCK LIST IS ORDERED BY THE CORE ADDRESS OF THE BLOCKS
     43					;	THEMSELVES. THIS IS SO GARBAGE COLLECTION AND BLOCK AGGLOMERATIO
     44					;	CAN BE PERFORMED WITH LITTLE OVERHEAD.
     45					;+
     46					; **-$RLCB-RELEASE CORE BLOCK
     47					;
     48					; THIS SUBROUTINE IS CALLED TO RELEASE A CORE BLOCK TO THE FREE LIST.
     49					; THE FREE LIST IS SEARCHED UNTIL THE PROPER SLOT IS FOUND AND THE
     50					; BLOCK IS MERGED INTO THE FREE LIST. IF THE BLOCK BEING RELEASED
     51					; CAN BE AGGLOMERATED WITH A BLOCK ALREADY IN THE FREE LIST, THEN THE
     52					; BLOCKS ARE AGGLOMERATED AND THE NEW BLOCK IS MERGED INTO THE FREE
     53					; LIST.
     54					;
     55					; INPUTS:
     56					;
     57					;	R0=ADDRESS OF FREE BLOCK LIST HEAD.
CORAL	MACRO M1110  22-AUG-78 01:40  PAGE 2-1


     58					;	R1=SIZE OF BLOCK TO RELEASE IN BYTES.
     59					;	R2=ADDRESS OF BLOCK TO RELEASE.
     60					;
     61					; OUTPUTS:
     62					;
     63					;	NONE.
     64					;-
     65
     66	000000					.PSECT	$$CRAL
     67
     68	000000				$RLCB::	SAVRG			;SAVE NONVOLITILE REGISTERS
     69	000004	062701 	000003 			ADD	#3,R1		;ROUND UP TO NEXT 2 WORD BOUNDRY
     70	000010	042701 	000003 			BIC	#3,R1		;CLEAR EXCESS BITS
     71	000014	001431 				BEQ	5$		;IF EQ VERGESSEN!!!
     72	000016	011003 			1$:	MOV	(R0),R3		;GET ADDRESS OF NEXT IN LIST
     73	000020	001404 				BEQ	2$		;IF EQ END OF CHAIN
     74	000022	020203 				CMP	R2,R3		;COMPARE ADDRESSES
     75	000024	103402 				BLO	2$		;IF LO FOUND SLOT
     76	000026	010300 				MOV	R3,R0		;SET NEW PREVIOUS ADDRESS
     77	000030	000772 				BR	1$		;GO AGAIN
     78	000032	010312 			2$:	MOV	R3,(R2)		;ASSUME NO AGGLOMERATION
     79	000034	010204 				MOV	R2,R4		;CALCULATE ADDRESS OF NEXT BLOCK
     80	000036	060104 				ADD	R1,R4		;ADD IN BLOCK SIZE
     81	000040	020304 				CMP	R3,R4		;COMPARE ADDRESSES
     82	000042	001002 				BNE	3$		;IF NE DO NOT MERGE BLOCKS
     83	000044	012312 				MOV	(R3)+,(R2)	;SET NEW FORWARD LINK
     84	000046	061301 				ADD	(R3),R1		;ADJUST SIZE
     85	000050	010210 			3$:	MOV	R2,(R0)		;ASSUME NO AGGLOMERATION
     86	000052	010004 				MOV	R0,R4		;CALCULATE ADDRESS OF NEXT BLOCK
     87	000054	066004 	000002 			ADD	2(R0),R4	;ADD IN BLOCK SIZE
     88	000060	020204 				CMP	R2,R4		;COMPARE ADDRESSES
     89	000062	001004 				BNE	4$		;IF NE DO NOT MERGE
     90	000064	011210 				MOV	(R2),(R0)	;SET NEW FORWARD LINK
     91	000066	066001 	000002 			ADD	2(R0),R1	;ADJUST SIZE
     92	000072	010002 				MOV	R0,R2		;SET NEW BASE ADDRESS OF BLOCK
     93	000074	010162 	000002 		4$:	MOV	R1,2(R2)	;SET SIZE OF BLOCK
     94	000100				5$:	RETURN			;
     95
     96					;+
     97					; **-$RQCB-REQUEST CORE BLOCK
     98					;
     99					; THIS ROUTINE IS CALLED TO REQUEST A CORE BLOCK FROM THE FREE LIST.
    100					; THE SELECTION IS ALWAYS FIRST FIT.
    101					;
    102					; INPUTS:
    103					;
    104					;	R0=ADDRESS OF FREE BLOCK LIST HEAD.
    105					;	R1=SIZE OF BLOCK REQUESTED IN BYTES.
    106					;		FOR COMPATIBILITY, R1 MAY BE EITHER POSITIVE OR NEGATIVE.
    107					;		IN EITHER CASE THE MAGNITUDE OF R1 IS THE SIZE OF THE BLOCK.
    108					;
    109					; OUTPUTS:
    110					;
    111					;	C=1 IF REQUEST CANNOT BE FULFILLED.
    112					;	C=0 IF REQUEST IS SATISFIED.
    113					;		R0=ADDRESS OF REQUESTED CORE BLOCK.
    114					;-
CORAL	MACRO M1110  22-AUG-78 01:40  PAGE 2-2


    115
    116	000102				$RQCB::				;
    117	000102	005701 				TST	R1		; SIZE NEGATIVE?
    118	000104	100001 				BPL	10$		; IF PL NO
    119	000106	005401 				NEG	R1		; GET ABSOLUTE VALUE OF ALLOCATION SIZE
    120	000110				10$:				;
    121	000110	062701 	000003 			ADD	#3,R1		; ROUND UP TO 4-BYTE BOUNDARY
    122	000114	042701 	000003 			BIC	#3,R1		; DISGARD EXCESS BITS
    123	000120	001402 				BEQ	30$		; IF EQ EXIT NOW
    124	000122				20$:				;
    125	000122	010002 				MOV	R0,R2		; COPY ADDRESS OF PREVIOUS
    126	000124	011200 				MOV	(R2),R0		; GET ADDRESS OF NEXT
    127	000126				30$:				;
    128	000126	000261 				SEC			; ASSUME AT END OF LIST
    129	000130	001414 				BEQ	50$		; IF EQ AT END
    130	000132	026001 	000002 			CMP	2(R0),R1	; THIS HOLE BIG ENOUGH?
    131	000136	103771 				BLO	20$		; IF LO NO
    132	000140	001407 				BEQ	40$		; IF EQ HOLE JUST FITS
    133	000142	160160 	000002 			SUB	R1,2(R0)	; DECREASE HOLE SIZE
    134	000146	060112 				ADD	R1,(R2)		; POINT TO NEXT HOLE
    135	000150	011202 				MOV	(R2),R2		; GET ADDRESS OF NEXT HOLE
    136	000152	016062 	000002 	000002 		MOV	2(R0),2(R2)	; SET LENGTH OF HOLE
    137	000160				40$:				;
    138	000160	011012 				MOV	(R0),(R2)	; RELINK HOLES
    139	000162				50$:				;
    140	000162					RETURN			;
    141
    142		000001 				.END
CORAL	MACRO M1110  22-AUG-78 01:40  PAGE 2-3
SYMBOL TABLE

CR    = 000015   	HT    = 000011   	R$$11M= 000000   	VT    = 000013   	$RQCB   000102RG    002
FF    = 000014   	LF    = 000012   	SPA   = 000040   	$RLCB   000000RG    002	$SAVRG= ****** GX

. ABS.	000000	   000
      	000000	   001
$$CRAL	000164	   002
ERRORS DETECTED:  0

VIRTUAL MEMORY USED:  596 WORDS  ( 3 PAGES)
DYNAMIC MEMORY:  2772 WORDS  ( 10 PAGES)
ELAPSED TIME:  00:00:05
OBJ$:CORAL,LIS$:CORAL/-SP=SRC$:MACFLM,CORAL
