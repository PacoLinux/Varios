
; Bliss-32 10.1-416	Monday 21-AUG-1978 22:56:08	DBB3:[F11A.SRC]EXTEND.B32;10					Page 1
;
;	0001	MODULE EXTEND (
;	0002			LANGUAGE (BLISS32),
;	0003			IDENT = 'A0012'
;	0004			) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1977
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	!
;	0028	! FACILITY:  F11ACP Structure Level 2
;	0029	!
;	0030	! ABSTRACT:
;	0031	!
;	0032	!	This routine extends a file by the requested number of blocks.
;	0033	!
;	0034	! ENVIRONMENT:
;	0035	!
;	0036	!	STARLET operating system, including privileged system services
;	0037	!	and internal exec routines.
;	0038	!
;	0039	!--
;	0040	!
;	0041	!
;	0042	! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  24-Feb-1977  15:42
;	0043	!
;	0044	! REVISION HISTORY:
;	0045	!
;	0046	!   Andrew C. Goldstein, 22-Mar-1977  14:30
;	0047	!   X0002 - Checksum file header after operation
;	0048	!
;	0049	!   Andrew C. Goldstein, 5-Apr-1977  11:30
;	0050	!   X0003 - Maximize extend size with volume default
;	0051	!
;	0052	!   Andrew C. Goldstein, 12-Apr-1977  15:37
;	0053	!   X0004 - Modify for buffer manager
;	0054	!
;	0055	!   Andrew C. Goldstein, 13-Jul-1977  15:45

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:56:08	DBB3:[F11A.SRC]EXTEND.B32;10					Page 1-1
;
;	0056	!   X0005 - Rework file header checksumming
;	0057	!
;	0058	!   Andrew C. Goldstein, 10-Aug-1977  15:31
;	0059	!   X0006 - Add multi-header support
;	0060	!
;	0061	!   Andrew C. Goldstein, 26-Aug-1977  10:39
;	0062	!   X0007 - Add performance metering
;	0063	!
;	0064	!   Andrew C. Goldstein, 26-Sep-1977  14:51
;	0065	!   X0008 - Add contiguous best effort flag in header
;	0066	!
;	0067	!   Andrew C. Goldstein, 24-Jan-1978  18:48
;	0068	!   X0009 - Use FIB to accumulate file size for reentrancy
;	0069	!
;	0070	!   Andrew C. Goldstein, 2-Feb-1978  21:54
;	0071	!   X0010 - Limit contiguous best try to 3 bitmap scans
;	0072	!
;	0073	!   Andrew C. Goldstein, 2-May-78  14:54
;	0074	!   X0011 - Update HIBLK in record attributes to reflect file size
;	0075	!
;	0076	!   Andrew C. Goldstein, 27-Jun-78  17:18
;	0077	!   A0012 - Limit extend size to 31 bits
;	0078	!
;	0079	!**
;	0080	
;	0081	
;	0082	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0083	REQUIRE 'SRC$:FCPDEF.B32';
;	0402	
;	0403	FORWARD ROUTINE
;	0404		EXTEND		: NOVALUE,	! extend a file
;	0405		UPDATE_FILESIZE	: NOVALUE;	! update file size in FCB

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:56:08	DBB3:[F11A.SRC]EXTEND.B32;10					Page 2
;
;	0406	GLOBAL ROUTINE EXTEND (USER_FIB, FILEHEADER) : NOVALUE =
;	0407	
;	0408	!++
;	0409	!
;	0410	! FUNCTIONAL DESCRIPTION:
;	0411	!
;	0412	!	This routine extends the given file by the amount and in the
;	0413	!	mode given in the FIB. The blocks are allocated from the storage
;	0414	!	bitmap and retrieval pointers are constructed in the header.
;	0415	!
;	0416	! CALLING SEQUENCE:
;	0417	!	EXTEND (ARG1, ARG2)
;	0418	!
;	0419	! INPUT PARAMETERS:
;	0420	!	ARG1: address of FIB for operation
;	0421	!	ARG2: addres of file header
;	0422	!
;	0423	! IMPLICIT INPUTS:
;	0424	!	CURRENT_WINDOW: window of file, if open
;	0425	!
;	0426	! OUTPUT PARAMETERS:
;	0427	!	NONE
;	0428	!
;	0429	! IMPLICIT OUTPUTS:
;	0430	!	NONE
;	0431	!
;	0432	! ROUTINE VALUE:
;	0433	!	NONE
;	0434	!
;	0435	! SIDE EFFECTS:
;	0436	!	blocks allocated, file header altered
;	0437	!
;	0438	!--
;	0439	
;	0440	BEGIN
;	0441	
;	0442	MAP
;	0443		USER_FIB	: REF BBLOCK,	! FIB of operation
;	0444		FILEHEADER	: REF BBLOCK;	! file header to extend
;	0445	
;	0446	LABEL
;	0447		ALLOC_LOOP;			! Block allocation and recording loop
;	0448	LOCAL
;	0449		FIB		: REF BBLOCK,	! address of FIB
;	0450		HEADER		: REF BBLOCK,	! address of current file header
;	0451		FCB		: REF BBLOCK,	! FCB of header being extended
;	0452		NEW_HEADER	: REF BBLOCK,	! next extension file header
;	0453		BLOCKS_NEEDED,			! number of blocks to be allocated
;	0454		MAP_AREA	: REF BBLOCK,	! address of header map area
;	0455		MAP_POINTER	: REF BBLOCK,	! pointer to current retrieval pointer
;	0456		CBT_COUNT,			! count of bitmap scans
;	0457		EXTEND_VBN,			! starting VBN of extend
;	0458		LBN,				! LBN of blocks allocated
;	0459		ALLOC_COUNT,			! number of blocks allocated
;	0460		COUNT,				! count of blocks for map pointers

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:56:08	DBB3:[F11A.SRC]EXTEND.B32;10					Page 2-1
;
;	0461		OLD_LBN,			! LBN of previous retrieval pointer
;	0462		OLD_COUNT;			! count of previous retrieval pointer
;	0463	
;	0464	EXTERNAL
;	0465		USER_STATUS	: VECTOR,	! I/O status block of user
;	0466		PRIMARY_FCB	: REF BBLOCK,	! FCB of file
;	0467		UNREC_LBN,			! LBN of unrecorded blocks
;	0468		UNREC_COUNT,			! count of unrecorded blocks
;	0469		CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
;	0470		CURRENT_VCB	: REF BBLOCK,	! VCB of volume
;	0471		CURRENT_WINDOW	: REF BBLOCK;	! window of file if open
;	0472	
;	0473	EXTERNAL ROUTINE
;	0474		PMS_START_SUB,			! start subfunction metering
;	0475		PMS_END_SUB,			! end subfunction metering
;	0476		NEXT_HEADER,			! read next extension header
;	0477		MARK_DIRTY,			! mark buffer for write-back
;	0478		ALLOC_BLOCKS,			! allocate blocks from storage map
;	0479		EXTEND_HEADER,			! create extension header
;	0480		RETURN_BLOCKS,			! return blocks to storage map
;	0481		CHECKSUM,			! compute file header checksum
;	0482		TURN_WINDOW,			! update file window
;	0483		INIT_FCB,			! initialize FCB
;	0484		WRITE_HEADER,			! write file header
;	0485		READ_HEADER;			! read file header
;	0486	
;	0487	
;	0488	! Start metering for this subfunction.
;	0489	!
;	0490	
;	0491	PMS_START_SUB (PMS_ALLOC);
;	0492	
;	0493	! Check the allocation control bits for validity. Then get the block count
;	0494	! and set up pointers.
;	0495	!
;	0496	
;	0497	FIB = .USER_FIB;
;	0498	IF (NOT .FIB[FIB$V_ALCON] AND .FIB[FIB$V_FILCON])
;	0499	OR .FIB[FIB$L_EXSZ] LSS 0
;	0500	THEN ERR_EXIT (SS$_BADPARAM);
;	0501	
;	0502	BLOCKS_NEEDED = (
;	0503	    IF .FIB[FIB$V_ALDEF]
;	0504	    THEN MAXU (.CURRENT_VCB[VCB$W_EXTEND], .FIB[FIB$L_EXSZ])
;	0505	    ELSE .FIB[FIB$L_EXSZ]
;	0506	    );
;	0507	
;	0508	HEADER = .FILEHEADER;
;	0509	FCB = .PRIMARY_FCB;
;	0510	EXTEND_VBN = 1;
;	0511	
;	0512	! If the file is marked contiguous best effort, make the extend so.
;	0513	!
;	0514	
;	0515	IF .HEADER[FH1$V_CONTIGB]

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:56:08	DBB3:[F11A.SRC]EXTEND.B32;10					Page 2-2
;
;	0516	THEN
;	0517	    IF NOT .FIB[FIB$V_ALCON] THEN FIB[FIB$V_ALCONB] = 1;
;	0518	
;	0519	! Scan through this header's map area and through the map area of all
;	0520	! extension headers to compute the current file size and find the end of file
;	0521	! to start extension.
;	0522	!
;	0523	
;	0524	WHILE 1 DO
;	0525	    BEGIN
;	0526	    MAP_AREA = .HEADER + .HEADER[FH1$B_MPOFFSET]*2;
;	0527	
;	0528	    IF .MAP_AREA[FM1$B_INUSE] NEQ 0 AND .FIB[FIB$V_FILCON]
;	0529	    THEN ERR_EXIT (SS$_BADPARAM);
;	0530	
;	0531	    MAP_POINTER = .MAP_AREA + FM1$C_POINTERS;
;	0532	
;	0533	    DECR MAPCOUNT FROM .MAP_AREA[FM1$B_INUSE]/2 TO 1 DO
;	0534		BEGIN
;	0535		EXTEND_VBN = .EXTEND_VBN + .MAP_POINTER[FM1$B_COUNT] + 1;
;	0536		MAP_POINTER = .MAP_POINTER + 4;
;	0537		END;
;	0538	
;	0539	    NEW_HEADER = NEXT_HEADER (.HEADER, .FCB);
;	0540	    IF .NEW_HEADER EQL 0 THEN EXITLOOP;
;	0541	    HEADER = .NEW_HEADER;
;	0542	    IF .FCB NEQ 0 THEN FCB = .FCB[FCB$L_EXFCB];
;	0543	    END;
;	0544	
;	0545	! Check the remaining parameters and set the relevant cleanup action flags.
;	0546	!
;	0547	
;	0548	IF .FIB[FIB$L_EXVBN] NEQ 0 AND .FIB[FIB$L_EXVBN] NEQ .EXTEND_VBN
;	0549	THEN ERR_EXIT (SS$_BADPARAM);
;	0550	
;	0551	MARK_DIRTY (.HEADER);
;	0552	CLEANUP_FLAGS[CLF_TRUNCATE] = 1;
;	0553	CLEANUP_FLAGS[CLF_FIXFCB] = 1;
;	0554	
;	0555	CBT_COUNT = 0;				! init count of bitmap scans
;	0556	FIB[FIB$L_EXSZ] = 0;
;	0557	FIB[FIB$L_EXVBN] = .EXTEND_VBN;
;	0558	
;	0559	! Now loop, allocating blocks fom the storage map and building retrieval
;	0560	! pointers in the header. Accumulate blocks allocated in the I/O
;	0561	! status block.
;	0562	!
;	0563	
;	0564	ALLOC_LOOP:
;	0565	BEGIN
;	0566	UNTIL .BLOCKS_NEEDED EQL 0 DO
;	0567	    BEGIN
;	0568	
;	0569	    ALLOC_BLOCKS (.FIB, .BLOCKS_NEEDED, LBN, ALLOC_COUNT);
;	0570	    COUNT = .ALLOC_COUNT;

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:56:08	DBB3:[F11A.SRC]EXTEND.B32;10					Page 2-3
;
;	0571	    FIB[FIB$L_EXSZ] = .FIB[FIB$L_EXSZ] + .COUNT;
;	0572	    BLOCKS_NEEDED = .BLOCKS_NEEDED - MINU (.BLOCKS_NEEDED, .COUNT);
;	0573	
;	0574	! Build the map pointers. If the new area allocated is contiguous with
;	0575	! the last pointer in the header, merge the pointers.
;	0576	!
;	0577	
;	0578	    IF .MAP_AREA[FM1$B_INUSE] NEQ 0
;	0579	    THEN
;	0580		BEGIN
;	0581		OLD_LBN = .MAP_POINTER[FM1$W_PREVLLBN];
;	0582		OLD_LBN<16,8> = .MAP_POINTER[FM1$B_PREVHLBN];
;	0583		OLD_COUNT = .MAP_POINTER[FM1$B_PREVCOUNT] + 1;
;	0584	
;	0585		IF .OLD_LBN + .OLD_COUNT EQL .LBN
;	0586		THEN
;	0587		    BEGIN
;	0588		    MAP_POINTER = .MAP_POINTER - 4;
;	0589		    MAP_AREA[FM1$B_INUSE] = .MAP_AREA[FM1$B_INUSE] - 2;
;	0590		    COUNT = .COUNT + .OLD_COUNT;
;	0591		    LBN = .OLD_LBN;
;	0592		    END;
;	0593		END;
;	0594	
;	0595	! Now build retrieval pointers to map the allocated blocks. If the map fills
;	0596	! up, store the unrecorded blocks in common so they can be returned
;	0597	! by the extend cleanup, and create an extension header. If header
;	0598	! extension is inhibited, return the unrecorded blocks and get out quietly.
;	0599	! We return header full status only if no new blocks were recorded.
;	0600	!
;	0601	
;	0602	    UNTIL .COUNT EQL 0 DO
;	0603		BEGIN
;	0604		IF .MAP_AREA[FM1$B_INUSE] + 2 GTR .MAP_AREA[FM1$B_AVAIL]
;	0605		THEN
;	0606		    BEGIN
;	0607		    IF .FIB[FIB$V_NOHDREXT]
;	0608		    THEN
;	0609			BEGIN
;	0610			RETURN_BLOCKS (.LBN, .COUNT);
;	0611			FIB[FIB$L_EXSZ] = .FIB[FIB$L_EXSZ] - .COUNT;
;	0612			IF .FIB[FIB$L_EXSZ] EQL 0
;	0613			THEN ERR_EXIT (SS$_HEADERFULL);
;	0614			LEAVE ALLOC_LOOP;
;	0615			END
;	0616		    ELSE
;	0617			BEGIN
;	0618			UNREC_LBN = .LBN;
;	0619			UNREC_COUNT = .COUNT;
;	0620			HEADER = EXTEND_HEADER (.HEADER, .FCB);
;	0621			IF .FCB NEQ 0 THEN FCB = .FCB[FCB$L_EXFCB];
;	0622			MAP_AREA = .HEADER + .HEADER[FH1$B_MPOFFSET]*2;
;	0623			MAP_POINTER = .MAP_AREA + FM1$C_POINTERS;
;	0624			END;
;	0625		    END;

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:56:08	DBB3:[F11A.SRC]EXTEND.B32;10					Page 2-4
;
;	0626	
;	0627	! Finally build the next retrieval pointer.
;	0628	!
;	0629	
;	0630		MAP_AREA[FM1$B_INUSE] = .MAP_AREA[FM1$B_INUSE] + 2;
;	0631	
;	0632		MAP_POINTER[FM1$B_HIGHLBN] = .LBN<16,8>;
;	0633		MAP_POINTER[FM1$B_COUNT] = MIN (.COUNT, 256) - 1;
;	0634		MAP_POINTER[FM1$W_LOWLBN] = .LBN<0,16>;
;	0635		MAP_POINTER = .MAP_POINTER + 4;
;	0636	
;	0637		LBN = .LBN + MIN (.COUNT, 256);
;	0638		COUNT = .COUNT - MIN (.COUNT, 256);
;	0639		END;
;	0640	
;	0641	    UNREC_COUNT = 0;			! all blocks are now recorded
;	0642	
;	0643	! If this was a contiguous allocation, we are done. Else count the pass
;	0644	! through the allocator. After 3 passes, shut off the contiguous best try
;	0645	! bit to avoid taking forever (since each CBT try is a full sweep of the map).
;	0646	!
;	0647	
;	0648	    IF .FIB[FIB$V_ALCON] THEN EXITLOOP;
;	0649	    CBT_COUNT = .CBT_COUNT + 1;
;	0650	    IF .CBT_COUNT GEQU 3
;	0651	    THEN FIB[FIB$V_ALCONB] = 0;
;	0652	    END;
;	0653	END;					! end of allocation loop
;	0654	
;	0655	! If the file is open by the caller, turn the window to the last VBN
;	0656	! that previously existed as a friendly gesture. Then, if the current header
;	0657	! is an extension header, write it and read back the primary header. Also
;	0658	! set the contiguous bit in the header appropriately and return the extend
;	0659	! data in the FIB. Update the file size in the primary FCB.
;	0660	!
;	0661	
;	0662	IF .CURRENT_WINDOW NEQ 0
;	0663	THEN KERNEL_CALL (TURN_WINDOW, .CURRENT_WINDOW, .HEADER, .FIB[FIB$L_EXVBN]-1, .FCB[FCB$L_STVBN]);
;	0664	
;	0665	IF .HEADER[FH1$W_FID_NUM] NEQ .FIB[FIB$W_FID_NUM]
;	0666	THEN
;	0667	    BEGIN
;	0668	    CHECKSUM (.HEADER);
;	0669	    WRITE_HEADER ();
;	0670	    IF .FCB NEQ 0 THEN KERNEL_CALL (INIT_FCB, .FCB, .HEADER);
;	0671	    HEADER = READ_HEADER (FIB[FIB$W_FID], .PRIMARY_FCB);
;	0672	    END;
;	0673	
;	0674	! Update the HIBLK field in the record attributes to reflect the new file
;	0675	! size.
;	0676	!
;	0677	
;	0678	MARK_DIRTY (.HEADER);
;	0679	BBLOCK [HEADER[FH1$W_RECATTR], FAT$L_HIBLK] = ROT (.FIB[FIB$L_EXVBN] + .FIB[FIB$L_EXSZ] - 1, 16);
;	0680	HEADER[FH1$V_CONTIG] = .FIB[FIB$V_FILCON];

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:56:08	DBB3:[F11A.SRC]EXTEND.B32;10					Page 2-5
;
;	0681	HEADER[FH1$V_CONTIGB] = .FIB[FIB$V_ALCONB];
;	0682	USER_STATUS[1] = .FIB[FIB$L_EXSZ];
;	0683	KERNEL_CALL (UPDATE_FILESIZE, .FIB[FIB$L_EXVBN] + .FIB[FIB$L_EXSZ] - 1);
;	0684	
;	0685	! Stop metering of this subfunction
;	0686	!
;	0687	
;	0688	PMS_END_SUB ();
;	0689	
;	0690	END;					! end of routine EXTEND


							    .TITLE  EXTEND
							    .IDENT  \A0012\

							    .EXTRN  USER_STATUS, PRIMARY_FCB, UNREC_LBN, UNREC_COUNT
							    .EXTRN  CLEANUP_FLAGS, CURRENT_VCB, CURRENT_WINDOW, PMS_START_SUB
							    .EXTRN  PMS_END_SUB, NEXT_HEADER, MARK_DIRTY, ALLOC_BLOCKS
							    .EXTRN  EXTEND_HEADER, RETURN_BLOCKS, CHECKSUM, TURN_WINDOW
							    .EXTRN  INIT_FCB, WRITE_HEADER, READ_HEADER, SYS$CMKRNL

							    .PSECT  $CODE$,NOWRT,2

					 0FFC 00000 	    .ENTRY  EXTEND, Save R2,R3,R4,R5,R6,R7,R8,R9,R10,R11	      ; 0406
		         5E 	       0C  C2 00002 	    SUBL2   #12, SP						      ;
				       08  DD 00005 	    PUSHL   #8							      ; 0491
		  0000G  CF	       01  FB 00007 	    CALLS   #1, PMS_START_SUB					      ;
		         52 	  04   AC  D0 0000C 	    MOVL    USER_FIB, FIB					      ; 0497
		         05 	  16   A2  E8 00010 	    BLBS    22(FIB), 1$						      ; 0498
	   05 	    16   A2	       02  E0 00014 	    BBS     #2, 22(FIB), 2$					      ;
				  18   A2  D5 00019 1$:     TSTL    24(FIB)						      ; 0499
				       02  18 0001C 	    BGEQ    3$							      ;
				       14  BF 0001E 2$:     CHMU    #20							      ; 0500
	   18 	    16   A2	       03  E1 00020 3$:     BBC     #3, 22(FIB), 5$					      ; 0503
		         50 	0000G  CF  D0 00025 	    MOVL    CURRENT_VCB, R0					      ; 0504
		         50 	  3E   A0  3C 0002A 	    MOVZWL  62(R0), R0						      ;
		    18   A2	       50  D1 0002E 	    CMPL    R0, 24(FIB)						      ;
				       04  1E 00032 	    BGEQU   4$							      ;
		         50 	  18   A2  D0 00034 	    MOVL    24(FIB), R0						      ;
		         5A 	       50  D0 00038 4$:     MOVL    R0, BLOCKS_NEEDED					      ; 0502
				       04  11 0003B 	    BRB     6$							      ;
		         5A 	  18   A2  D0 0003D 5$:     MOVL    24(FIB), BLOCKS_NEEDED				      ;
		         53 	  08   AC  D0 00041 6$:     MOVL    FILEHEADER, HEADER					      ; 0508
		         58 	0000G  CF  D0 00045 	    MOVL    PRIMARY_FCB, FCB					      ; 0509
		         55 	       01  D0 0004A 	    MOVL    #1, EXTEND_VBN					      ; 0510
	   08 	    0C   A3	       05  E1 0004D 	    BBC     #5, 12(HEADER), 7$					      ; 0515
		         04 	  16   A2  E8 00052 	    BLBS    22(FIB), 7$						      ; 0517
		    16   A2	       02  88 00056 	    BISB2   #2, 22(FIB)						      ;
		         50 	  01   A3  9A 0005A 7$:     MOVZBL  1(HEADER), R0					      ; 0526
		         54 	     6340  3E 0005E 	    MOVAW   (HEADER)[R0], MAP_AREA				      ;
				  08   A4  95 00062 	    TSTB    8(MAP_AREA)						      ; 0528
				       07  13 00065 	    BEQL    8$							      ;
	   02 	    16   A2	       02  E1 00067 	    BBC     #2, 22(FIB), 8$					      ;
				       14  BF 0006C 	    CHMU    #20							      ; 0529
		         56 	  0A   A4  9E 0006E 8$:     MOVAB   10(R4), MAP_POINTER					      ; 0531

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:56:08	DBB3:[F11A.SRC]EXTEND.B32;10					Page 2-6
;
		         51 	  08   A4  9A 00072 	    MOVZBL  8(MAP_AREA), R1					      ; 0533
		         51 	       02  C6 00076 	    DIVL2   #2, R1						      ;
				       51  D6 00079 	    INCL    MAPCOUNT						      ;
				       0C  11 0007B 	    BRB     10$							      ;
		         50 	  01   A6  9A 0007D 9$:     MOVZBL  1(MAP_POINTER), R0					      ; 0535
		         55 	  01 A045  9E 00081 	    MOVAB   1(R0)[EXTEND_VBN], EXTEND_VBN			      ;
		         56 	       04  C0 00086 	    ADDL2   #4, MAP_POINTER					      ; 0536
		         F1 	       51  F5 00089 10$:    SOBGTR  MAPCOUNT, 9$					      ; 0533
				0108   8F  BB 0008C 	    PUSHR   #^M<R3,R8>						      ; 0539
		  0000G  CF	       02  FB 00090 	    CALLS   #2, NEXT_HEADER					      ;
		         57 	       50  D0 00095 	    MOVL    R0, NEW_HEADER					      ;
				       0D  13 00098 	    BEQL    11$							      ; 0540
		         53 	       57  D0 0009A 	    MOVL    NEW_HEADER, HEADER					      ; 0541
				       58  D5 0009D 	    TSTL    FCB							      ; 0542
				       B9  13 0009F 	    BEQL    7$							      ;
		         58 	  0C   A8  D0 000A1 	    MOVL    12(FCB), FCB					      ;
				       B3  11 000A5 	    BRB     7$							      ; 0524
				  1C   A2  D5 000A7 11$:    TSTL    28(FIB)						      ; 0548
				       08  13 000AA 	    BEQL    12$							      ;
		         55 	  1C   A2  D1 000AC 	    CMPL    28(FIB), EXTEND_VBN					      ;
				       02  13 000B0 	    BEQL    12$							      ;
				       14  BF 000B2 	    CHMU    #20							      ; 0549
				       53  DD 000B4 12$:    PUSHL   HEADER						      ; 0551
		  0000G  CF	       01  FB 000B6 	    CALLS   #1, MARK_DIRTY					      ;
		  0000G  CF 00040002   8F  C8 000BB 	    BISL2   #262146, CLEANUP_FLAGS				      ; 0552
				       5B  D4 000C4 	    CLRL    CBT_COUNT						      ; 0555
				  18   A2  D4 000C6 	    CLRL    24(FIB)						      ; 0556
		    1C   A2	       55  D0 000C9 	    MOVL    EXTEND_VBN, 28(FIB)					      ; 0557
				       5A  D5 000CD 13$:    TSTL    BLOCKS_NEEDED					      ; 0566
				       03  12 000CF 	    BNEQ    14$							      ;
				     00FA  31 000D1 	    BRW     25$							      ;
				  08   AE  9F 000D4 14$:    PUSHAB  ALLOC_COUNT						      ; 0569
				  08   AE  9F 000D7 	    PUSHAB  LBN							      ;
				0404   8F  BB 000DA 	    PUSHR   #^M<R2,R10>						      ;
		  0000G  CF	       04  FB 000DE 	    CALLS   #4, ALLOC_BLOCKS					      ;
		         57 	  08   AE  D0 000E3 	    MOVL    ALLOC_COUNT, COUNT					      ; 0570
		    18   A2	       57  C0 000E7 	    ADDL2   COUNT, 24(FIB)					      ; 0571
		         50 	       5A  D0 000EB 	    MOVL    BLOCKS_NEEDED, R0					      ; 0572
		         57 	       50  D1 000EE 	    CMPL    R0, COUNT						      ;
				       03  1B 000F1 	    BLEQU   15$							      ;
		         50 	       57  D0 000F3 	    MOVL    COUNT, R0						      ;
		         5A 	       50  C2 000F6 15$:    SUBL2   R0, BLOCKS_NEEDED					      ;
				  08   A4  95 000F9 	    TSTB    8(MAP_AREA)						      ; 0578
				       28  13 000FC 	    BEQL    16$							      ;
		         59 	  FE   A6  3C 000FE 	    MOVZWL  -2(MAP_POINTER), OLD_LBN				      ; 0581
	   08 	         10 	  FC   A6  F0 00102 	    INSV    -4(MAP_POINTER), #16, #8, OLD_LBN			      ; 0582
				       59     00107									      ;
		         6E 	  FD   A6  9A 00108 	    MOVZBL  -3(MAP_POINTER), OLD_COUNT				      ; 0583
				       6E  D6 0010C 	    INCL    OLD_COUNT						      ;
	   50 	         59 	       6E  C1 0010E 	    ADDL3   OLD_COUNT, OLD_LBN, R0				      ; 0585
		    04   AE	       50  D1 00112 	    CMPL    R0, LBN						      ;
				       0E  12 00116 	    BNEQ    16$							      ;
		         56 	       04  C2 00118 	    SUBL2   #4, MAP_POINTER					      ; 0588
		    08   A4	       02  82 0011B 	    SUBB2   #2, 8(MAP_AREA)					      ; 0589
		         57 	       6E  C0 0011F 	    ADDL2   OLD_COUNT, COUNT					      ; 0590

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:56:08	DBB3:[F11A.SRC]EXTEND.B32;10					Page 2-7
;
		    04   AE	       59  D0 00122 	    MOVL    OLD_LBN, LBN					      ; 0591
		         55 	  08   A4  9E 00126 16$:    MOVAB   8(R4), R5						      ; 0604
				       57  D5 0012A 17$:    TSTL    COUNT						      ; 0602
				       03  12 0012C 	    BNEQ    18$							      ;
				     0087  31 0012E 	    BRW     23$							      ;
		         50 	       65  9A 00131 18$:    MOVZBL  (R5), R0						      ; 0604
		         50 	       02  C0 00134 	    ADDL2   #2, R0						      ;
      09   A4	         08 	       00  ED 00137 	    CMPZV   #0, #8, 9(MAP_AREA), R0				      ;
				       50     0013C									      ;
				       46  18 0013D 	    BGEQ    21$							      ;
	   16 	    17   A2	       01  E1 0013F 	    BBC     #1, 23(FIB), 19$					      ; 0607
				       57  DD 00144 	    PUSHL   COUNT						      ; 0610
				  08   AE  DD 00146 	    PUSHL   LBN							      ;
		  0000G  CF	       02  FB 00149 	    CALLS   #2, RETURN_BLOCKS					      ;
		    18   A2	       57  C2 0014E 	    SUBL2   COUNT, 24(FIB)					      ; 0611
				       7A  12 00152 	    BNEQ    25$							      ; 0612
				08C8   8F  BF 00154 	    CHMU    #2248						      ; 0613
				       74  11 00158 	    BRB     25$							      ; 0614
		  0000G  CF	  04   AE  D0 0015A 19$:    MOVL    LBN, UNREC_LBN					      ; 0618
		  0000G  CF	       57  D0 00160 	    MOVL    COUNT, UNREC_COUNT					      ; 0619
				0108   8F  BB 00165 	    PUSHR   #^M<R3,R8>						      ; 0620
		  0000G  CF	       02  FB 00169 	    CALLS   #2, EXTEND_HEADER					      ;
		         53 	       50  D0 0016E 	    MOVL    R0, HEADER						      ;
				       58  D5 00171 	    TSTL    FCB							      ; 0621
				       04  13 00173 	    BEQL    20$							      ;
		         58 	  0C   A8  D0 00175 	    MOVL    12(FCB), FCB					      ;
		         50 	  01   A3  9A 00179 20$:    MOVZBL  1(HEADER), R0					      ; 0622
		         54 	     6340  3E 0017D 	    MOVAW   (HEADER)[R0], MAP_AREA				      ;
		         56 	  0A   A4  9E 00181 	    MOVAB   10(R4), MAP_POINTER					      ; 0623
		         55 	  08   A4  9E 00185 21$:    MOVAB   8(R4), R5						      ; 0630
		         65 	       02  80 00189 	    ADDB2   #2, (R5)						      ;
		         66 	  06   AE  90 0018C 	    MOVB    LBN+2, (MAP_POINTER)				      ; 0632
		         50 	       57  D0 00190 	    MOVL    COUNT, R0						      ; 0633
	      00000100   8F	       50  D1 00193 	    CMPL    R0, #256						      ;
				       05  15 0019A 	    BLEQ    22$							      ;
		         50 	0100   8F  3C 0019C 	    MOVZWL  #256, R0						      ;
      01   A6	         50 	       01  83 001A1 22$:    SUBB3   #1, R0, 1(MAP_POINTER)				      ;
		    02   A6	  04   AE  B0 001A6 	    MOVW    LBN, 2(MAP_POINTER)					      ; 0634
		         56 	       04  C0 001AB 	    ADDL2   #4, MAP_POINTER					      ; 0635
		    04   AE	       50  C0 001AE 	    ADDL2   R0, LBN						      ; 0637
		         57 	       50  C2 001B2 	    SUBL2   R0, COUNT						      ; 0638
				     FF72  31 001B5 	    BRW     17$							      ; 0602
				0000G  CF  D4 001B8 23$:    CLRL    UNREC_COUNT						      ; 0641
		         0E 	  16   A2  E8 001BC 	    BLBS    22(FIB), 25$					      ; 0648
				       5B  D6 001C0 	    INCL    CBT_COUNT						      ; 0649
		         03 	       5B  D1 001C2 	    CMPL    CBT_COUNT, #3					      ; 0650
				       04  1F 001C5 	    BLSSU   24$							      ;
		    16   A2	       02  8A 001C7 	    BICB2   #2, 22(FIB)						      ; 0651
				     FEFF  31 001CB 24$:    BRW     13$							      ; 0566
		         50 	0000G  CF  D0 001CE 25$:    MOVL    CURRENT_WINDOW, R0					      ; 0662
				       19  13 001D3 	    BEQL    26$							      ;
				  28   A8  DD 001D5 	    PUSHL   40(FCB)						      ; 0663
	   7E 	    1C   A2	       01  C3 001D8 	    SUBL3   #1, 28(FIB), -(SP)					      ;
				       09  BB 001DD 	    PUSHR   #^M<R0,R3>						      ;
				       04  DD 001DF 	    PUSHL   #4							      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:56:08	DBB3:[F11A.SRC]EXTEND.B32;10					Page 2-8
;
				       5E  DD 001E1 	    PUSHL   SP							      ;
				0000G  CF  9F 001E3 	    PUSHAB  TURN_WINDOW						      ;
	      00000000G  9F	       07  FB 001E7 	    CALLS   #7, @#SYS$CMKRNL					      ;
		    04   A2	  02   A3  B1 001EE 26$:    CMPW    2(HEADER), 4(FIB)					      ; 0665
				       32  13 001F3 	    BEQL    28$							      ;
				       53  DD 001F5 	    PUSHL   HEADER						      ; 0668
		  0000G  CF	       01  FB 001F7 	    CALLS   #1, CHECKSUM					      ;
		  0000G  CF	       00  FB 001FC 	    CALLS   #0, WRITE_HEADER					      ; 0669
				       58  D5 00201 	    TSTL    FCB							      ; 0670
				       13  13 00203 	    BEQL    27$							      ;
				       53  DD 00205 	    PUSHL   HEADER						      ;
				       58  DD 00207 	    PUSHL   FCB							      ;
				       02  DD 00209 	    PUSHL   #2							      ;
				       5E  DD 0020B 	    PUSHL   SP							      ;
				0000G  CF  9F 0020D 	    PUSHAB  INIT_FCB						      ;
	      00000000G  9F	       05  FB 00211 	    CALLS   #5, @#SYS$CMKRNL					      ;
				0000G  CF  DD 00218 27$:    PUSHL   PRIMARY_FCB						      ; 0671
				  04   A2  9F 0021C 	    PUSHAB  4(FIB)						      ;
		  0000G  CF	       02  FB 0021F 	    CALLS   #2, READ_HEADER					      ;
		         53 	       50  D0 00224 	    MOVL    R0, HEADER						      ;
				       53  DD 00227 28$:    PUSHL   HEADER						      ; 0678
		  0000G  CF	       01  FB 00229 	    CALLS   #1, MARK_DIRTY					      ;
	   50 	    1C   A2	  18   A2  C1 0022E 	    ADDL3   24(FIB), 28(FIB), R0				      ; 0679
				       50  D7 00234 	    DECL    R0							      ;
      12   A3	         50 	       10  9C 00236 	    ROTL    #16, R0, 18(HEADER)					      ;
      16   A2	         01 	       02  EF 0023B 	    EXTZV   #2, #1, 22(FIB), R1					      ; 0680
				       51     00240									      ;
	   01 	         07 	       51  F0 00241 	    INSV    R1, #7, #1, 12(HEADER)				      ;
				  0C   A3     00245									      ;
      16   A2	         01 	       01  EF 00247 	    EXTZV   #1, #1, 22(FIB), R1					      ; 0681
				       51     0024C									      ;
	   01 	         05 	       51  F0 0024D 	    INSV    R1, #5, #1, 12(HEADER)				      ;
				  0C   A3     00251									      ;
		  0000G  CF	  18   A2  D0 00253 	    MOVL    24(FIB), USER_STATUS+4				      ; 0682
				       50  DD 00259 	    PUSHL   R0							      ; 0683
				       01  DD 0025B 	    PUSHL   #1							      ;
				       5E  DD 0025D 	    PUSHL   SP							      ;
				0000V  CF  9F 0025F 	    PUSHAB  UPDATE_FILESIZE					      ;
	      00000000G  9F	       04  FB 00263 	    CALLS   #4, @#SYS$CMKRNL					      ;
		  0000G  CF	       00  FB 0026A 	    CALLS   #0, PMS_END_SUB					      ; 0688
					   04 0026F 	    RET     							      ; 0406

; Routine Size:  624 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 22:56:08	DBB3:[F11A.SRC]EXTEND.B32;10					Page 3
;
;	0691	GLOBAL ROUTINE UPDATE_FILESIZE (SIZE) : NOVALUE =
;	0692	
;	0693	!++
;	0694	!
;	0695	! FUNCTIONAL DESCRIPTION:
;	0696	!
;	0697	!	This routine updates the file size recorded in the primary FCB of
;	0698	!	the file extended.
;	0699	!
;	0700	! CALLING SEQUENCE:
;	0701	!	UPDATE_FILESIZE (ARG1)
;	0702	!
;	0703	! INPUT PARAMETERS:
;	0704	!	ARG1: amount to increase size to
;	0705	!
;	0706	! IMPLICIT INPUTS:
;	0707	!	PRIMARY_FCB: address of file FCB or zero
;	0708	!
;	0709	! OUTPUT PARAMETERS:
;	0710	!	NONE
;	0711	!
;	0712	! IMPLICIT OUTPUTS:
;	0713	!	NONE
;	0714	!
;	0715	! ROUTINE VALUE:
;	0716	!	NONE
;	0717	!
;	0718	! SIDE EFFECTS:
;	0719	!	FCB updated
;	0720	!
;	0721	!--
;	0722	
;	0723	BEGIN
;	0724	
;	0725	EXTERNAL
;	0726		PRIMARY_FCB	: REF BBLOCK;	! FCB of file
;	0727	
;	0728	IF .PRIMARY_FCB NEQ 0
;	0729	THEN PRIMARY_FCB[FCB$L_FILESIZE] = .SIZE;
;	0730	
;	0731	END;					! end of routine UPDATE_FILESIZE





					 0000 00270 	    .ENTRY  UPDATE_FILESIZE, Save nothing			      ; 0691
		         50 	0000G  CF  D0 00272 	    MOVL    PRIMARY_FCB, R0					      ; 0728
				       05  13 00277 	    BEQL    1$							      ;
		    34   A0	  04   AC  D0 00279 	    MOVL    SIZE, 52(R0)					      ; 0729
					   04 0027E 1$:     RET     							      ; 0691

; Routine Size:  15 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 22:56:08	DBB3:[F11A.SRC]EXTEND.B32;10					Page 3-1
;
;	0732	
;	0733	END
;	0734	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $CODE$         	   639  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        31         0       245





; Size:		639 code + 0 data bytes
; Run Time:	00:14.7
; Elapsed Time:	00:30.5
; Memory Used:	406 pages
; Compilation Complete
