
; Bliss-32 10.1-416	Monday 21-AUG-1978 23:00:00	DBB3:[F11A.SRC]MAKNMB.B32;7					Page 1
;
;	0001	MODULE MAKNMB (
;	0002			LANGUAGE (BLISS32),
;	0003			IDENT = 'A0005B'
;	0004			) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1977
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	!
;	0028	! FACILITY:  F11ACP Structure Level 1
;	0029	!
;	0030	! ABSTRACT:
;	0031	!
;	0032	!	This routine converts a file name string into the
;	0033	!	RAD-50 name block format.
;	0034	!
;	0035	! ENVIRONMENT:
;	0036	!
;	0037	!	STARLET operating system, including privileged system services
;	0038	!	and internal exec routines.
;	0039	!
;	0040	!--
;	0041	!
;	0042	!
;	0043	! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  2-Jan-1977  17:06
;	0044	!
;	0045	! REVISION HISTORY:
;	0046	!
;	0047	!   Andrew C. Goldstein, 16-Feb-1977  15:03
;	0048	!   X0002 - Modify for condition handling
;	0049	!
;	0050	!   Andrew C. Goldstein, 29-Mar-1977  10:45
;	0051	!   X0003 - Disallow negative version numbers
;	0052	!
;	0053	!   Andrew C. Goldstein, 12-Jul-1977  10:26
;	0054	!   X0004 - Use JSB and register linkage
;	0055	!

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:00:00	DBB3:[F11A.SRC]MAKNMB.B32;7					Page 1-1
;
;	0056	!   Andrew C. Goldstein, 23-Jan-1978  22:58
;	0057	!   X0005 - Accept space as end of string marker
;	0058	!
;	0059	!**
;	0060	
;	0061	
;	0062	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0063	REQUIRE 'SRC$:FCPDEF.B32';
;	0382	
;	0383	
;	0384	! Linkages to subroutines in this module.
;	0385	!
;	0386	
;	0387	LINKAGE
;	0388		L_GETCHAR	= JSB :
;	0389				  NOPRESERVE (5)
;	0390				  GLOBAL (COUNT = 6, STRINGP = 7, FCOUNT = 8),
;	0391	
;	0392		L_GETSTAR	= JSB :
;	0393				  GLOBAL (COUNT = 6, STRINGP = 7),
;	0394	
;	0395		L_TYPE		= JSB :
;	0396				  GLOBAL (COUNT = 6, STRINGP = 7);
;	0397	
;	0398	! Routines in this module
;	0399	!
;	0400	
;	0401	FORWARD ROUTINE
;	0402		MAKE_NAMEBLOCK	: NOVALUE,	! main routine
;	0403		GETCHAR		: L_GETCHAR,	! get RAD-50 set character
;	0404		GETSTAR		: L_GETSTAR,	! get star character, if any
;	0405		TYPE		: L_TYPE;	! determine type of current character

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:00:00	DBB3:[F11A.SRC]MAKNMB.B32;7					Page 2
;
;	0406	GLOBAL ROUTINE MAKE_NAMEBLOCK (LENGTH, STRING, NAMEBLOCK) : NOVALUE =
;	0407	
;	0408	!++
;	0409	!
;	0410	! FUNCTIONAL DESCRIPTION:
;	0411	!
;	0412	!	This routine converts a file name string into the
;	0413	!	RAD-50 name block format.
;	0414	!
;	0415	! CALLING SEQUENCE:
;	0416	!	MAKE_NAMEBLOCK (ARG1, ARG2, ARG3)
;	0417	!
;	0418	! INPUT PARAMETERS:
;	0419	!	ARG1: length of file name string
;	0420	!	ARG2: address of file name string
;	0421	!
;	0422	! IMPLICIT INPUTS:
;	0423	!	NONE
;	0424	!
;	0425	! OUTPUT PARAMETERS:
;	0426	!	ARG3: address of file name block
;	0427	!
;	0428	! IMPLICIT OUTPUTS:
;	0429	!	NONE
;	0430	!
;	0431	! ROUTINE VALUE:
;	0432	!	NONE
;	0433	!
;	0434	! SIDE EFFECTS:
;	0435	!	NONE
;	0436	!
;	0437	!--
;	0438	
;	0439	BEGIN
;	0440	
;	0441	MAP
;	0442		NAMEBLOCK	: REF BBLOCK;	! name block arg
;	0443	
;	0444	GLOBAL REGISTER
;	0445		COUNT	= 6,			! characters remaining in string
;	0446		STRINGP	= 7	: REF VECTOR [,BYTE],  ! string pointer
;	0447		FCOUNT	= 8;			! count of chars in current field
;	0448	
;	0449	LOCAL
;	0450		P,				! string scan pointer
;	0451		BLOCKP		: REF VECTOR [,WORD]; ! pointer into name block
;	0452	
;	0453	EXTERNAL ROUTINE
;	0454		LIB$CVT_DTB	: ADDRESSING_MODE (ABSOLUTE);
;	0455						! decimal to binary convert
;	0456	
;	0457	! Initialize all the locals.
;	0458	!
;	0459	
;	0460	CH$FILL (0, NMB$C_LENGTH, .NAMEBLOCK);	! zero the entire block

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:00:00	DBB3:[F11A.SRC]MAKNMB.B32;7					Page 2-1
;
;	0461	STRINGP = .STRING;			! set up string pointer
;	0462	P = CH$FIND_CH (.LENGTH, .STRINGP, ' '); ! look for a terminating space
;	0463	COUNT = .P - .STRINGP;			! compute count
;	0464	IF CH$FAIL (.P)
;	0465	THEN COUNT = .LENGTH;			! use whole string if no space
;	0466	BLOCKP = NAMEBLOCK[NMB$W_NAME];		! point to name field in block
;	0467	FCOUNT = 0;				! init chars in field count
;	0468	
;	0469	
;	0470	! Build the name field, consisting of 3 words of 3 RAD-50 characters per word.
;	0471	!
;	0472	
;	0473	DECR I FROM 3 TO 1 DO
;	0474	    BEGIN
;	0475	    DECR J FROM 3 TO 1 DO
;	0476		BLOCKP[0] = .BLOCKP[0] * 40 + GETCHAR ();
;	0477	    BLOCKP = .BLOCKP + 2;
;	0478	    END;
;	0479	
;	0480	GETSTAR ();				! gobble star in name, if any
;	0481	
;	0482	! Pick up the name delimiter, which is either dot or end of string.
;	0483	!
;	0484	
;	0485	CASE TYPE () FROM 1 TO 5 OF
;	0486	    SET
;	0487	    [1,2,3,4]:	ERR_EXIT (SS$_BADFILENAME);
;	0488	    [5]:	BEGIN
;	0489			COUNT = .COUNT - 1;	! pick up the character
;	0490			STRINGP = .STRINGP + 1;
;	0491			END;
;	0492	    [OUTRANGE]:	0;
;	0493	    TES;
;	0494	
;	0495	! Now build the type field, consisting of 1 word of 3 RAD-50 characters.
;	0496	!
;	0497	
;	0498	FCOUNT = 0;				! re-init chars in field count
;	0499	
;	0500	DECR J FROM 3 TO 1 DO
;	0501	    BLOCKP[0] = .BLOCKP[0] * 40 + GETCHAR ();
;	0502	
;	0503	GETSTAR ();				! gobble star if any
;	0504	
;	0505	! Pick up the type delimiter, which may be dot, semicolon, or end of string.
;	0506	!
;	0507	
;	0508	CASE TYPE () FROM 1 TO 6 OF
;	0509	    SET
;	0510	    [1,2,3,4]:	ERR_EXIT (SS$_BADFILENAME);
;	0511	    [5,6]:	BEGIN
;	0512			COUNT = .COUNT - 1;	! pick up the character
;	0513			STRINGP = .STRINGP + 1;
;	0514			END;
;	0515	    [OUTRANGE]:	0;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:00:00	DBB3:[F11A.SRC]MAKNMB.B32;7					Page 2-2
;
;	0516	    TES;
;	0517	
;	0518	! If the version is not wild card and there are still characters present,
;	0519	! get the binary version number.
;	0520	!
;	0521	
;	0522	IF NOT GETSTAR () AND .COUNT GTR 0 THEN
;	0523	    BEGIN
;	0524	    BLOCKP = .BLOCKP + 2;
;	0525	    IF NOT LIB$CVT_DTB (.COUNT, .STRINGP, .BLOCKP)
;	0526		THEN ERR_EXIT (SS$_BADFILENAME);
;	0527	    IF ..BLOCKP GTRU 32767
;	0528		THEN ERR_EXIT (SS$_BADFILENAME);
;	0529	    END;
;	0530	
;	0531	RETURN 1;
;	0532	
;	0533	END;					! end of routine MAKE_NAMEBLOCK


							    .TITLE  MAKNMB
							    .IDENT  \A0005B\

							    .EXTRN  LIB$CVT_DTB

							    .PSECT  $CODE$,NOWRT,2

					 0FFC 00000 	    .ENTRY  MAKE_NAMEBLOCK, Save R2,R3,R4,R5,R6,R7,R8,R9,R10,R11      ; 0406
		         5A 	0000V  CF  9E 00002 	    MOVAB   GETSTAR, R10					      ;
	   00 	         6E 	       00  2C 00007 	    MOVC5   #0, (SP), #0, #20, @NAMEBLOCK			      ; 0460
		    0C   BC	       14     0000B									      ;
		         57 	  08   AC  D0 0000E 	    MOVL    STRING, STRINGP					      ; 0461
	   67 	    04   AC	       20  3A 00012 	    LOCC    #32, LENGTH, (STRINGP)				      ; 0462
				       02  12 00017 	    BNEQ    1$							      ;
				       51  D4 00019 	    CLRL    R1							      ;
		         50 	       51  D0 0001B 1$:     MOVL    R1, P						      ;
	   56 	         50 	       57  C3 0001E 	    SUBL3   STRINGP, P, COUNT					      ; 0463
				       50  D5 00022 	    TSTL    P							      ; 0464
				       04  12 00024 	    BNEQ    2$							      ;
		         56 	  04   AC  D0 00026 	    MOVL    LENGTH, COUNT					      ; 0465
	   52 	    0C   AC	       06  C1 0002A 2$:     ADDL3   #6, NAMEBLOCK, BLOCKP				      ; 0466
				       58  D4 0002F 	    CLRL    FCOUNT						      ; 0467
		         59 	       03  D0 00031 	    MOVL    #3, I						      ; 0473
		         53 	       03  D0 00034 3$:     MOVL    #3, J						      ; 0475
		         54 	       62  3C 00037 4$:     MOVZWL  (BLOCKP), R4					      ; 0476
		         54 	       28  C4 0003A 	    MULL2   #40, R4						      ;
				     0000V 30 0003D 	    BSBW    GETCHAR						      ;
	   62 	         54 	       50  A1 00040 	    ADDW3   R0, R4, (BLOCKP)					      ;
		         F0 	       53  F5 00044 	    SOBGTR  J, 4$						      ; 0475
		         52 	       02  C0 00047 	    ADDL2   #2, BLOCKP						      ; 0477
		         E7 	       59  F5 0004A 	    SOBGTR  I, 3$						      ; 0473
				       6A  16 0004D 	    JSB     GETSTAR						      ; 0480
				     0000V 30 0004F 	    BSBW    TYPE						      ; 0485
	   04 	         01 	       50  CF 00052 	    CASEL   R0, #1, #4						      ;
	 000C 	       000C 	     000C     00056 5$:     .WORD   6$-5$,-						      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:00:00	DBB3:[F11A.SRC]MAKNMB.B32;7					Page 2-3
;
		       0012 	     000C     0005C		    6$-5$,-						      ;
								    6$-5$,-						      ;
								    6$-5$,-						      ;
								    7$-5$						      ;
				       0A  11 00060 	    BRB     8$							      ;
				0818   8F  BF 00062 6$:     CHMU    #2072						      ; 0487
				       04  11 00066 	    BRB     8$							      ; 0485
				       56  D7 00068 7$:     DECL    COUNT						      ; 0489
				       57  D6 0006A 	    INCL    STRINGP						      ; 0490
				       58  D4 0006C 8$:     CLRL    FCOUNT						      ; 0498
		         53 	       03  D0 0006E 	    MOVL    #3, J						      ; 0500
		         54 	       62  3C 00071 9$:     MOVZWL  (BLOCKP), R4					      ; 0501
		         54 	       28  C4 00074 	    MULL2   #40, R4						      ;
				     0000V 30 00077 	    BSBW    GETCHAR						      ;
	   62 	         54 	       50  A1 0007A 	    ADDW3   R0, R4, (BLOCKP)					      ;
		         F0 	       53  F5 0007E 	    SOBGTR  J, 9$						      ; 0500
				       6A  16 00081 	    JSB     GETSTAR						      ; 0503
				     0000V 30 00083 	    BSBW    TYPE						      ; 0508
	   05 	         01 	       50  CF 00086 	    CASEL   R0, #1, #5						      ;
	 000E 	       000E 	     000E     0008A 10$:    .WORD   11$-10$,-						      ;
	 0014 	       0014 	     000E     00090		    11$-10$,-						      ;
								    11$-10$,-						      ;
								    11$-10$,-						      ;
								    12$-10$,-						      ;
								    12$-10$						      ;
				       0A  11 00096 	    BRB     13$							      ;
				0818   8F  BF 00098 11$:    CHMU    #2072						      ; 0510
				       04  11 0009C 	    BRB     13$							      ; 0508
				       56  D7 0009E 12$:    DECL    COUNT						      ; 0512
				       57  D6 000A0 	    INCL    STRINGP						      ; 0513
				       6A  16 000A2 13$:    JSB     GETSTAR						      ; 0522
		         27 	       50  E8 000A4 	    BLBS    R0, 15$						      ;
				       56  D5 000A7 	    TSTL    COUNT						      ;
				       23  15 000A9 	    BLEQ    15$							      ;
		         52 	       02  C0 000AB 	    ADDL2   #2, BLOCKP						      ; 0524
				       52  DD 000AE 	    PUSHL   BLOCKP						      ; 0525
		         7E 	       56  7D 000B0 	    MOVQ    COUNT, -(SP)					      ;
	      00000000G  9F	       03  FB 000B3 	    CALLS   #3, @#LIB$CVT_DTB					      ;
		         04 	       50  E8 000BA 	    BLBS    R0, 14$						      ;
				0818   8F  BF 000BD 	    CHMU    #2072						      ; 0526
	      00007FFF   8F	       62  D1 000C1 14$:    CMPL    (BLOCKP), #32767					      ; 0527
				       04  1B 000C8 	    BLEQU   15$							      ;
				0818   8F  BF 000CA 	    CHMU    #2072						      ; 0528
					   04 000CE 15$:    RET     							      ; 0406

; Routine Size:  207 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 23:00:00	DBB3:[F11A.SRC]MAKNMB.B32;7					Page 3
;
;	0534	ROUTINE GETCHAR : L_GETCHAR =
;	0535	
;	0536	!++
;	0537	!
;	0538	! FUNCTIONAL DESCRIPTION:
;	0539	!
;	0540	!	This routine returns the RAD-50 code of the next character in the
;	0541	!	input string if it is in the RAD-50 set. If it is not, or end of
;	0542	!	string has been reached, it returns zero.
;	0543	!
;	0544	! CALLING SEQUENCE:
;	0545	!	GETCHAR ()
;	0546	!
;	0547	! INPUT PARAMETERS:
;	0548	!	NONE
;	0549	!
;	0550	! IMPLICIT INPUTS:
;	0551	!	COUNT: characters remaining in string
;	0552	!	STRINGP: string pointer
;	0553	!	FCOUNT: chars in current field
;	0554	!
;	0555	! OUTPUT PARAMETERS:
;	0556	!	NONE
;	0557	!
;	0558	! IMPLICIT OUTPUTS:
;	0559	!	NONE
;	0560	!
;	0561	! ROUTINE VALUE:
;	0562	!	character code
;	0563	!
;	0564	! SIDE EFFECTS:
;	0565	!	COUNT decremented and STRINGP advanced if legal character.
;	0566	!
;	0567	!--
;	0568	
;	0569	BEGIN
;	0570	
;	0571	REGISTER
;	0572		CHAR		= 5;		! character in process
;	0573	
;	0574	EXTERNAL REGISTER
;	0575		COUNT	= 6,			! characters remaining in string
;	0576		STRINGP	= 7	: REF VECTOR [,BYTE],  ! string pointer
;	0577		FCOUNT	= 8;			! count of chars in current field
;	0578	
;	0579	
;	0580	! Get the next character from the string and dispatch in its type.
;	0581	!
;	0582	
;	0583	CHAR = .STRINGP[0];
;	0584	
;	0585	CASE TYPE () FROM 0 TO 6 OF
;	0586	    SET
;	0587	    [0,5,6]:				! end, dot, or semicolon
;	0588		CHAR = 0;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:00:00	DBB3:[F11A.SRC]MAKNMB.B32;7					Page 3-1
;
;	0589	    [1]:				! upper case alpha
;	0590		BEGIN
;	0591		CHAR = .CHAR - 'A' + 1;		! convert to RAD-50 code
;	0592		COUNT = .COUNT - 1;		! advance to next character
;	0593		STRINGP = .STRINGP + 1;
;	0594		FCOUNT = .FCOUNT + 1;		! count character in field
;	0595		END;
;	0596	    [2]:				! lower case alpha
;	0597		BEGIN
;	0598		CHAR = .CHAR - 'a' + 1;		! convert to RAD-50 code
;	0599		COUNT = .COUNT - 1;		! advance to next character
;	0600		STRINGP = .STRINGP + 1;
;	0601		FCOUNT = .FCOUNT + 1;		! count character in field
;	0602		END;
;	0603	    [3]:				! numeric
;	0604		BEGIN
;	0605		CHAR = .CHAR - '0' + 30;	! convert to RAD-50 code
;	0606		COUNT = .COUNT - 1;		! advance to next character
;	0607		STRINGP = .STRINGP + 1;
;	0608		FCOUNT = .FCOUNT + 1;		! count character in field
;	0609		END;
;	0610	    [4]:				! star - legal as only char in field
;	0611		BEGIN
;	0612		CHAR = 0;
;	0613		IF .FCOUNT NEQ 0 THEN ERR_EXIT (SS$_BADFILENAME);
;	0614		END;
;	0615	    TES;
;	0616	
;	0617	RETURN .CHAR;
;	0618	
;	0619	END;					! end of routine GETCHAR





		         55 	       67  9A 000CF GETCHAR:MOVZBL  (STRINGP), CHAR					      ; 0583
				     0000V 30 000D2 	    BSBW    TYPE						      ; 0585
	   06 	         00 	       50  CF 000D5 	    CASEL   R0, #0, #6						      ;
	 0018 	       0012 	     000E     000D9 1$:     .WORD   2$-1$,-						      ;
	 000E 	       0029 	     001E     000DF		    3$-1$,-						      ;
				     000E     000E5		    4$-1$,-						      ;
								    5$-1$,-						      ;
								    7$-1$,-						      ;
								    2$-1$,-						      ;
								    2$-1$						      ;
				       55  D4 000E7 2$:     CLRL    CHAR						      ; 0588
				       21  11 000E9 	    BRB     8$							      ; 0585
		         55 	  C0   A5  9E 000EB 3$:     MOVAB   -64(R5), CHAR					      ; 0591
				       09  11 000EF 	    BRB     6$							      ; 0592
		         55 	  A0   A5  9E 000F1 4$:     MOVAB   -96(R5), CHAR					      ; 0598
				       03  11 000F5 	    BRB     6$							      ; 0599
		         55 	       12  C2 000F7 5$:     SUBL2   #18, CHAR						      ; 0605
				       56  D7 000FA 6$:     DECL    COUNT						      ; 0606
				       57  D6 000FC 	    INCL    STRINGP						      ; 0607

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:00:00	DBB3:[F11A.SRC]MAKNMB.B32;7					Page 3-2
;
				       58  D6 000FE 	    INCL    FCOUNT						      ; 0608
				       0A  11 00100 	    BRB     8$							      ; 0585
				       55  D4 00102 7$:     CLRL    CHAR						      ; 0612
				       58  D5 00104 	    TSTL    FCOUNT						      ; 0613
				       04  13 00106 	    BEQL    8$							      ;
				0818   8F  BF 00108 	    CHMU    #2072						      ;
		         50 	       55  D0 0010C 8$:     MOVL    CHAR, R0						      ; 0617
					   05 0010F 	    RSB     							      ; 0534

; Routine Size:  65 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 23:00:00	DBB3:[F11A.SRC]MAKNMB.B32;7					Page 4
;
;	0620	ROUTINE GETSTAR : L_GETSTAR =
;	0621	
;	0622	!++
;	0623	!
;	0624	! FUNCTIONAL DESCRIPTION:
;	0625	!
;	0626	!	This routine gobbles the next character in the input string
;	0627	!	if it is a star.
;	0628	!
;	0629	! CALLING SEQUENCE:
;	0630	!	GETSTAR ()
;	0631	!
;	0632	! INPUT PARAMETERS:
;	0633	!	NONE
;	0634	!
;	0635	! IMPLICIT INPUTS:
;	0636	!	COUNT: number of characters in input string
;	0637	!	STRINGP: input string pointer
;	0638	!
;	0639	! OUTPUT PARAMETERS:
;	0640	!	NONE
;	0641	!
;	0642	! IMPLICIT OUTPUTS:
;	0643	!	NONE
;	0644	!
;	0645	! ROUTINE VALUE:
;	0646	!	1 if character was a star
;	0647	!	0 otherwise
;	0648	!
;	0649	! SIDE EFFECTS:
;	0650	!	COUNT decremented, STRINGP incremented if character was star.
;	0651	!
;	0652	!--
;	0653	
;	0654	BEGIN
;	0655	
;	0656	EXTERNAL REGISTER
;	0657		COUNT	= 6,			! characters remaining in string
;	0658		STRINGP	= 7	: REF VECTOR [,BYTE];  ! string pointer
;	0659	
;	0660	IF .COUNT GTR 0 AND .STRINGP[0] EQL '*'
;	0661	THEN
;	0662	    BEGIN
;	0663	    COUNT = .COUNT - 1;
;	0664	    STRINGP = .STRINGP + 1;
;	0665	    1
;	0666	    END
;	0667	ELSE
;	0668	    0
;	0669	
;	0670	END;					! end of routine GETSTAR





; Bliss-32 10.1-416	Monday 21-AUG-1978 23:00:00	DBB3:[F11A.SRC]MAKNMB.B32;7					Page 4-1
;

				       56  D5 00110 GETSTAR:TSTL    COUNT						      ; 0660
				       0D  15 00112 	    BLEQ    1$							      ;
		         2A 	       67  91 00114 	    CMPB    (STRINGP), #42					      ;
				       08  12 00117 	    BNEQ    1$							      ;
				       56  D7 00119 	    DECL    COUNT						      ; 0663
				       57  D6 0011B 	    INCL    STRINGP						      ; 0664
		         50 	       01  D0 0011D 	    MOVL    #1, R0						      ; 0660
					   05 00120 	    RSB     							      ;
				       50  D4 00121 1$:     CLRL    R0							      ;
					   05 00123 	    RSB     							      ; 0620

; Routine Size:  20 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 23:00:00	DBB3:[F11A.SRC]MAKNMB.B32;7					Page 5
;
;	0671	ROUTINE TYPE : L_TYPE =
;	0672	
;	0673	!++
;	0674	!
;	0675	! FUNCTIONAL DESCRIPTION:
;	0676	!
;	0677	!	This routine determines the type code of the current character
;	0678	!	in the string.
;	0679	!
;	0680	! CALLING SEQUENCE:
;	0681	!	TYPE ()
;	0682	!
;	0683	! INPUT PARAMETERS:
;	0684	!	NONE
;	0685	!
;	0686	! IMPLICIT INPUTS:
;	0687	!	COUNT: number of characters left in string
;	0688	!	STRINGP: string pointer
;	0689	!
;	0690	! OUTPUT PARAMETERS:
;	0691	!	NONE
;	0692	!
;	0693	! IMPLICIT OUTPUTS:
;	0694	!	NONE
;	0695	!
;	0696	! ROUTINE VALUE:
;	0697	!	type code of character:
;	0698	!	0: end of string or non-RAD-50
;	0699	!	1: upper case alpha
;	0700	!	2: lower case alpha
;	0701	!	3: numeric
;	0702	!	4: star
;	0703	!	5: dot
;	0704	!	6: semicolon
;	0705	!
;	0706	! SIDE EFFECTS:
;	0707	!	NONE
;	0708	!
;	0709	!--
;	0710	
;	0711	BEGIN
;	0712	
;	0713	EXTERNAL REGISTER
;	0714		COUNT	= 6,		! characters remaining in string
;	0715		STRINGP	= 7	: REF VECTOR [,BYTE]; ! string pointer
;	0716	
;	0717	! Character match tables. First is low character of range, second is
;	0718	! high character. Type is table index of the matching range.
;	0719	!
;	0720	
;	0721	BIND
;	0722		LOWCHAR		= UPLIT BYTE (0, 'Aa0*.;') : VECTOR [,BYTE],
;	0723		HIGHCHAR	= UPLIT BYTE (0, 'Zz9*.;') : VECTOR [,BYTE];
;	0724	
;	0725	! If the string is empty return 0 as the type. Else search the tables.

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:00:00	DBB3:[F11A.SRC]MAKNMB.B32;7					Page 5-1
;
;	0726	!
;	0727	
;	0728	IF .COUNT LEQ 0 THEN RETURN 0;
;	0729	
;	0730	INCR I FROM 1 TO 6 DO
;	0731	    IF .STRINGP[0] GEQU .LOWCHAR[.I]
;	0732	    AND .STRINGP[0] LEQU .HIGHCHAR[.I]
;	0733	    THEN RETURN .I;
;	0734	
;	0735	ERR_EXIT (SS$_BADFILENAME);		! other characters are illegal
;	0736	
;	0737	
;	0738	END;					! end of routine TYPE



					  00  00124 P.AAA:  .BYTE   0							      ;
		      3B  2E  2A  30  61  41  00125 	    .ASCII  \Aa0*.;\						      ;
					      0012B	    .BLKB   1
					  00  0012C P.AAB:  .BYTE   0							      ;
		      3B  2E  2A  39  7A  5A  0012D 	    .ASCII  \Zz9*.;\						      ;
					      00133	    .BLKB   1

						    LOWCHAR=		P.AAA
						    HIGHCHAR=		P.AAB


				       56  D5 00134 TYPE:   TSTL    COUNT						      ; 0728
				       19  15 00136 	    BLEQ    3$							      ;
		         50 	       01  D0 00138 	    MOVL    #1, I						      ; 0730
		    E4 AF40	       67  91 0013B 1$:     CMPB    (STRINGP), LOWCHAR[I]				      ; 0731
				       07  1F 00140 	    BLSSU   2$							      ;
		    E5 AF40	       67  91 00142 	    CMPB    (STRINGP), HIGHCHAR[I]				      ; 0732
				       0A  1B 00147 	    BLEQU   4$							      ;
	   EE 	         50 	       06  F3 00149 2$:     AOBLEQ  #6, I, 1$						      ; 0730
				0818   8F  BF 0014D 	    CHMU    #2072						      ; 0735
				       50  D4 00151 3$:     CLRL    R0							      ; 0671
					   05 00153 4$:     RSB     							      ;

; Routine Size:  32 bytes


;	0739	
;	0740	END
;	0741	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:00:00	DBB3:[F11A.SRC]MAKNMB.B32;7					Page 5-2
;
;  $CODE$         	   340  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582         4         0       224





; Size:		324 code + 16 data bytes
; Run Time:	00:08.9
; Elapsed Time:	00:16.9
; Memory Used:	285 pages
; Compilation Complete
