
; Bliss-32 10.1-416	Monday 21-AUG-1978 23:04:16	DBB3:[F11A.SRC]RWVB.B32;14					Page 1
;
;	0001	MODULE RWVB (
;	0002			LANGUAGE (BLISS32),
;	0003			IDENT = 'A0007'
;	0004			) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1977
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	!
;	0028	! FACILITY:  F11ACP Structure Level 1
;	0029	!
;	0030	! ABSTRACT:
;	0031	!
;	0032	!	This routine performs the window turn necessary to map a
;	0033	!	virtual I/O transfer which is not mapped by the current
;	0034	!	window. It also receives virtual I/O errors for bad block
;	0035	!	processing.
;	0036	!
;	0037	! ENVIRONMENT:
;	0038	!
;	0039	!	STARLET operating system, including privileged system services
;	0040	!	and internal exec routines.
;	0041	!
;	0042	!--
;	0043	!
;	0044	!
;	0045	! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  7-Jan-1977  00:48
;	0046	!
;	0047	! REVISION HISTORY:
;	0048	!
;	0049	!   Andrew C. Goldstein, 3-Mar-1977  13:26
;	0050	!   X0002 - Modify to run in exec mode
;	0051	!
;	0052	!   Andrew C. Goldstein, 17-Mar-1977  14:37
;	0053	!   X0003 - Change call to requeue routine to include packet update
;	0054	!
;	0055	!   Andrew C. Goldstein, 12-Aug-1977  14:19

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:04:16	DBB3:[F11A.SRC]RWVB.B32;14					Page 1-1
;
;	0056	!   X0004 - New read/write virtual handling
;	0057	!
;	0058	!   Andrew C. Goldstein, 24-May-78  21:28
;	0059	!   A0005 - Add bad block logging
;	0060	!
;	0061	!   Andrew C. Goldstein, 31-May-78  21:07
;	0062	!   A0006 - Temp. add SS$_CTRLERR to bad block status codes
;	0063	!
;	0064	!   Andrew C. Goldstein, 10-Jul-78  15:19
;	0065	!   A0007 - Preserve original I/O status to user
;	0066	!
;	0067	!**
;	0068	
;	0069	
;	0070	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0071	REQUIRE 'SRC$:FCPDEF.B32';
;	0390	
;	0391	
;	0392	FORWARD ROUTINE
;	0393		READ_WRITEVB,			! main read/write virtual handling
;	0394		MARKBAD_FCB;			! mark bad block in FCB

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:04:16	DBB3:[F11A.SRC]RWVB.B32;14					Page 2
;
;	0395	GLOBAL ROUTINE READ_WRITEVB  =
;	0396	
;	0397	!++
;	0398	!
;	0399	! FUNCTIONAL DESCRIPTION:
;	0400	!
;	0401	!	This routine performs the window turn necessary to map a
;	0402	!	virtual I/O transfer which is not mapped by the current
;	0403	!	window. It also receives virtual I/O errors for bad block
;	0404	!	processing. These are presently simply returned to the user.
;	0405	!
;	0406	! CALLING SEQUENCE:
;	0407	!	READ_WRITEVB ()
;	0408	!
;	0409	! INPUT PARAMETERS:
;	0410	!	NONE
;	0411	!
;	0412	! IMPLICIT INPUTS:
;	0413	!	IO_PACKET: I/O packet of request
;	0414	!
;	0415	! OUTPUT PARAMETERS:
;	0416	!	NONE
;	0417	!
;	0418	! IMPLICIT OUTPUTS:
;	0419	!	NONE
;	0420	!
;	0421	! ROUTINE VALUE:
;	0422	!	1 if request requeued to driver
;	0423	!	0 if error
;	0424	!
;	0425	! SIDE EFFECTS:
;	0426	!	window turned
;	0427	!	request requeued to driver if mapped
;	0428	!
;	0429	!--
;	0430	
;	0431	BEGIN
;	0432	
;	0433	LOCAL
;	0434		PACKET		: REF BBLOCK,	! pointer to I/O packet
;	0435		WINDOW		: REF BBLOCK,	! file window
;	0436		FCB		: REF BBLOCK,	! file FCB
;	0437		BLOCK_COUNT,			! number of blocks in transfer
;	0438		UNMAPPED,			! number of blocks not mapped
;	0439		MODE,				! mode (read/write) of transfer
;	0440		VBN,				! starting VBN of transfer
;	0441		LBN;				! translated LBN
;	0442	
;	0443	EXTERNAL
;	0444		USER_STATUS	: VECTOR,	! user I/O status block
;	0445		IO_PACKET	: REF BBLOCK,	! I/O request packet
;	0446		CURRENT_VCB	: REF BBLOCK;	! VCB of volume in use
;	0447	
;	0448	EXTERNAL ROUTINE
;	0449		MAP_VBN,			! map and turn window

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:04:16	DBB3:[F11A.SRC]RWVB.B32;14					Page 2-1
;
;	0450		REQUEUE_REQ,			! requeue request to driver
;	0451		SCAN_BADLOG;			! scan bad block log file
;	0452	
;	0453	
;	0454	! Extract the request parameters from the I/O packet. Compute VBN and LBN
;	0455	! of the next block to be transferred.
;	0456	!
;	0457	
;	0458	PACKET = .IO_PACKET;
;	0459	(USER_STATUS[0])<16,16> = .PACKET[IRP$W_ABCNT];
;	0460	WINDOW = .PACKET[IRP$L_WIND];
;	0461	BLOCK_COUNT = (.PACKET[IRP$W_BCNT]+511) / 512;
;	0462	VBN = .PACKET[IRP$L_SEGVBN];
;	0463	
;	0464	IF .VBN EQL 0 THEN ERR_EXIT (SS$_BADPARAM);
;	0465	
;	0466	
;	0467	! Attempt to map the request. If the map fails, report
;	0468	! failure. Else requeue the request to the driver.
;	0469	!
;	0470	
;	0471	LBN = MAP_VBN (.VBN, .WINDOW, .BLOCK_COUNT, UNMAPPED);
;	0472	IF .LBN EQL -1 THEN ERR_EXIT (SS$_ENDOFFILE);
;	0473	
;	0474	IF .PACKET[IRP$V_VIRTUAL]
;	0475	THEN
;	0476	    BEGIN
;	0477	    KERNEL_CALL (REQUEUE_REQ, .PACKET, .LBN, .UNMAPPED);
;	0478	    RETURN 1;
;	0479	    END
;	0480	
;	0481	! If the virtual bit is not set, this is an I/O error on a file sent here
;	0482	! for bad block processing. If the error is a parity, format, or datacheck
;	0483	! error, we set the bad block bit in the FCB of the file and enter the
;	0484	! block in question into the volume's bad block log. Note that we do not
;	0485	! do this on errors on the volume's reserved files, which are not subject
;	0486	! to dynamic bad block processing.
;	0487	!
;	0488	
;	0489	ELSE
;	0490	    BEGIN
;	0491	    FCB = .WINDOW[WCB$L_FCB];
;	0492	
;	0493	    IF  (
;	0494		   .(PACKET[IRP$L_IOST1])<0,16> EQL SS$_PARITY
;	0495		OR .(PACKET[IRP$L_IOST1])<0,16> EQL SS$_DATACHECK
;	0496		OR .(PACKET[IRP$L_IOST1])<0,16> EQL SS$_FORMAT
;	0497		)
;	0498	    AND (
;	0499		.FCB[FCB$W_FID_NUM] GTRU .CURRENT_VCB[VCB$B_RESFILES]
;	0500		OR (.CURRENT_VCB[VCB$V_EXTFID]
;	0501		    AND .FCB[FCB$B_FID_NMX] NEQ 0)
;	0502		)
;	0503	    THEN
;	0504		BEGIN

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:04:16	DBB3:[F11A.SRC]RWVB.B32;14					Page 2-2
;
;	0505		KERNEL_CALL (MARKBAD_FCB, .FCB);
;	0506		MODE = ENTER_READERR;			! assume read
;	0507		IF .PACKET[IRP$V_FCODE] EQL IO$_WRITEPBLK
;	0508		THEN MODE = ENTER_WRITERR;
;	0509		SCAN_BADLOG (FCB[FCB$W_FID], .VBN, .LBN, .MODE, 0);
;	0510		END;
;	0511	    USER_STATUS[0] = .PACKET[IRP$L_IOST1];	! get status to return to user
;	0512	    USER_STATUS[1] = .PACKET[IRP$L_IOST2];
;	0513	    RETURN 0;
;	0514	    END;
;	0515	
;	0516	END;					! end of routine READ_WRITEVB


							    .TITLE  RWVB
							    .IDENT  \A0007\

							    .EXTRN  USER_STATUS, IO_PACKET, CURRENT_VCB, MAP_VBN, REQUEUE_REQ
							    .EXTRN  SCAN_BADLOG, SYS$CMKRNL

							    .PSECT  $CODE$,NOWRT,2

					 007C 00000 	    .ENTRY  READ_WRITEVB, Save R2,R3,R4,R5,R6			      ; 0395
		         56 00000000G  9F  9E 00002 	    MOVAB   @#SYS$CMKRNL, R6					      ;
		         5E 	       04  C2 00009 	    SUBL2   #4, SP						      ;
		         52 	0000G  CF  D0 0000C 	    MOVL    IO_PACKET, PACKET					      ; 0458
		  0000G  CF	  3C   A2  B0 00011 	    MOVW    60(PACKET), USER_STATUS+2				      ; 0459
		         53 	  18   A2  D0 00017 	    MOVL    24(PACKET), WINDOW					      ; 0460
		         50 	  32   A2  3C 0001B 	    MOVZWL  50(PACKET), R0					      ; 0461
		         50 	01FF   C0  9E 0001F 	    MOVAB   511(R0), R0						      ;
		         50 00000200   8F  C6 00024 	    DIVL2   #512, BLOCK_COUNT					      ;
		         54 	  40   A2  D0 0002B 	    MOVL    64(PACKET), VBN					      ; 0462
				       02  12 0002F 	    BNEQ    1$							      ; 0464
				       14  BF 00031 	    CHMU    #20							      ;
				4001   8F  BB 00033 1$:     PUSHR   #^M<R0,SP>						      ; 0471
				       53  DD 00037 	    PUSHL   WINDOW						      ;
				       54  DD 00039 	    PUSHL   VBN							      ;
		  0000G  CF	       04  FB 0003B 	    CALLS   #4, MAP_VBN						      ;
		         55 	       50  D0 00040 	    MOVL    R0, LBN						      ;
	      FFFFFFFF   8F	       55  D1 00043 	    CMPL    LBN, #-1						      ; 0472
				       04  12 0004A 	    BNEQ    2$							      ;
				0870   8F  BF 0004C 	    CHMU    #2160						      ;
	   13 	    2A   A2	       04  E1 00050 2$:     BBC     #4, 42(PACKET), 3$					      ; 0474
				       6E  DD 00055 	    PUSHL   UNMAPPED						      ; 0477
				       24  BB 00057 	    PUSHR   #^M<R2,R5>						      ;
				       03  DD 00059 	    PUSHL   #3							      ;
				       5E  DD 0005B 	    PUSHL   SP							      ;
				0000G  CF  9F 0005D 	    PUSHAB  REQUEUE_REQ						      ;
		         66 	       06  FB 00061 	    CALLS   #6, SYS$CMKRNL					      ;
		         50 	       01  D0 00064 	    MOVL    #1, R0						      ; 0478
					   04 00067 	    RET     							      ;
		         53 	  18   A3  D0 00068 3$:     MOVL    24(WINDOW), FCB					      ; 0491
		  01F4   8F	  34   A2  B1 0006C 	    CMPW    52(PACKET), #500					      ; 0494
				       10  13 00072 	    BEQL    4$							      ;
		  005C   8F	  34   A2  B1 00074 	    CMPW    52(PACKET), #92					      ; 0495

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:04:16	DBB3:[F11A.SRC]RWVB.B32;14					Page 2-3
;
				       08  13 0007A 	    BEQL    4$							      ;
		  00BC   8F	  34   A2  B1 0007C 	    CMPW    52(PACKET), #188					      ; 0496
				       42  12 00082 	    BNEQ    7$							      ;
		         50 	0000G  CF  D0 00084 4$:     MOVL    CURRENT_VCB, R0					      ; 0499
		         51 	  4F   A0  9A 00089 	    MOVZBL  79(R0), R1						      ;
		    20   A3	       51  B1 0008D 	    CMPW    R1, 32(FCB)						      ;
				       0A  1F 00091 	    BLSSU   5$							      ;
	   2E 	    0B   A0	       05  E1 00093 	    BBC     #5, 11(R0), 7$					      ; 0500
				  25   A3  95 00098 	    TSTB    37(FCB)						      ; 0501
				       29  13 0009B 	    BEQL    7$							      ;
				       53  DD 0009D 5$:     PUSHL   FCB							      ; 0505
				       01  DD 0009F 	    PUSHL   #1							      ;
				       5E  DD 000A1 	    PUSHL   SP							      ;
				0000V  CF  9F 000A3 	    PUSHAB  MARKBAD_FCB						      ;
		         66 	       04  FB 000A7 	    CALLS   #4, SYS$CMKRNL					      ;
		         50 	       01  D0 000AA 	    MOVL    #1, MODE						      ; 0506
      20   A2	         06 	       00  ED 000AD 	    CMPZV   #0, #6, 32(PACKET), #11				      ; 0507
				       0B     000B2									      ;
				       03  12 000B3 	    BNEQ    6$							      ;
		         50 	       02  D0 000B5 	    MOVL    #2, MODE						      ; 0508
				       7E  D4 000B8 6$:     CLRL    -(SP)						      ; 0509
				       50  DD 000BA 	    PUSHL   MODE						      ;
				       30  BB 000BC 	    PUSHR   #^M<R4,R5>						      ;
				  20   A3  9F 000BE 	    PUSHAB  32(FCB)						      ;
		  0000G  CF	       05  FB 000C1 	    CALLS   #5, SCAN_BADLOG					      ;
		  0000G  CF	  34   A2  7D 000C6 7$:     MOVQ    52(PACKET), USER_STATUS				      ; 0511
				       50  D4 000CC 	    CLRL    R0							      ; 0395
					   04 000CE 	    RET     							      ;

; Routine Size:  207 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 23:04:16	DBB3:[F11A.SRC]RWVB.B32;14					Page 3
;
;	0517	GLOBAL ROUTINE MARKBAD_FCB (FCB) =
;	0518	
;	0519	!++
;	0520	!
;	0521	! FUNCTIONAL DESCRIPTION:
;	0522	!
;	0523	!	This routine set the bad block bit in the indicated FCB.
;	0524	!
;	0525	!
;	0526	! CALLING SEQUENCE:
;	0527	!	MARKBAD_FCB (ARG1)
;	0528	!
;	0529	! INPUT PARAMETERS:
;	0530	!	ARG1: address of FCB
;	0531	!
;	0532	! IMPLICIT INPUTS:
;	0533	!	NONE
;	0534	!
;	0535	! OUTPUT PARAMETERS:
;	0536	!	NONE
;	0537	!
;	0538	! IMPLICIT OUTPUTS:
;	0539	!	NONE
;	0540	!
;	0541	! ROUTINE VALUE:
;	0542	!	1
;	0543	!
;	0544	! SIDE EFFECTS:
;	0545	!	bad bit set in FCB
;	0546	!
;	0547	!--
;	0548	
;	0549	BEGIN
;	0550	
;	0551	MAP
;	0552		FCB		: REF BBLOCK;	! FCB argument
;	0553	
;	0554	
;	0555	FCB[FCB$V_BADBLK] = 1;
;	0556	
;	0557	RETURN 1;
;	0558	
;	0559	END;					! end of routine MARKBAD_FCB





					 0000 000CF 	    .ENTRY  MARKBAD_FCB, Save nothing				      ; 0517
		         50 	  04   AC  D0 000D1 	    MOVL    FCB, R0						      ; 0555
		    1E   A0	       04  88 000D5 	    BISB2   #4, 30(R0)						      ;
		         50 	       01  D0 000D9 	    MOVL    #1, R0						      ; 0557
					   04 000DC 	    RET     							      ; 0517

; Routine Size:  14 bytes

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:04:16	DBB3:[F11A.SRC]RWVB.B32;14					Page 3-1
;


;	0560	
;	0561	END
;	0562	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $CODE$         	   221  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        22         0       240





; Size:		221 code + 0 data bytes
; Run Time:	00:06.9
; Elapsed Time:	00:14.3
; Memory Used:	293 pages
; Compilation Complete
