
; Bliss-32 10.1-416	Monday 21-AUG-1978 22:59:06	DBB3:[F11A.SRC]INIFCP.B32;16					Page 1
;
;	0001	MODULE INIFCP (
;	0002			LANGUAGE (BLISS32),
;	0003			IDENT = 'A0019'
;	0004			) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1977
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	!
;	0028	! FACILITY:  F11ACP Structure Level 1
;	0029	!
;	0030	! ABSTRACT:
;	0031	!
;	0032	!	This routine does the one time initialization for FCP.
;	0033	!
;	0034	! ENVIRONMENT:
;	0035	!
;	0036	!	STARLET operating system, including privileged system services
;	0037	!	and internal exec routines. This routine must be called
;	0038	!	in kernel mode.
;	0039	!
;	0040	!--
;	0041	!
;	0042	!
;	0043	! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  20-Dec-1976  16:30
;	0044	!
;	0045	! REVISION HISTORY:
;	0046	!
;	0047	!   Andrew C. Goldstein, 25-Feb-1977  13:30
;	0048	!   X0002 - Add setup for DB0 and DB1.
;	0049	!
;	0050	!   Andrew C. Goldstein, 28-Feb-1977  10:16
;	0051	!   X0003 - Add fourth arg to assign call
;	0052	!
;	0053	!   Andrew C. Goldstein, 1-Mar-1977  15:03
;	0054	!   X0004 - New names for device characteristics
;	0055	!

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:59:06	DBB3:[F11A.SRC]INIFCP.B32;16					Page 1-1
;
;	0056	!   Andrew C. Goldstein, 11-Apr-1977  10:40
;	0057	!   X0005 - Set DEV$V_DIR bit in devices UCB's served
;	0058	!
;	0059	!   Andrew C. Goldstein, 12-Apr-1977  21:54
;	0060	!   X0006 - Add call to buffer pool init
;	0061	!
;	0062	!   Andrew C. Goldstein, 28-Apr-1977  16:10
;	0063	!   X0007 - Channel number returned from $ASSIGN is a word
;	0064	!
;	0065	!   Andrew C. Goldstein, 3-May-1977  12:58
;	0066	!   X0008 - Zero primary exec and kernel exception vectors
;	0067	!
;	0068	!   Andrew C. Goldstein, 5-May-1977  21:23
;	0069	!   X0009 - Remove UCB initialization code
;	0070	!
;	0071	!   Andrew C. Goldstein, 18-May-1977  11:25
;	0072	!   X0010 - Keep kernel mode vectored exception handlers
;	0073	!
;	0074	!   Andrew C. Goldstein, 10-Aug-1977  15:20
;	0075	!   X0011 - Set init flag in system flags longword
;	0076	!
;	0077	!   Andrew C. Goldstein, 27-Oct-1977  20:46
;	0078	!   X0012 - Add search for dynamically allocated AQB
;	0079	!
;	0080	!   Andrew C. Goldstein, 12-Dec-1977  13:47
;	0081	!   X0013 - Remove reference to global AQB
;	0082	!
;	0083	!   Andrew C. Goldstein, 5-Jan-1978  17:04
;	0084	!   X0014 - Restore debug exception vectors
;	0085	!
;	0086	!   Andrew C. Goldstein, 14-Feb-1978  13:49
;	0087	!   X0015 - Remove direct reference to CCB base
;	0088	!
;	0089	!   Andrew C. Goldstein, 17-Feb-1978  14:44
;	0090	!   X0016 - Use new bug check
;	0091	!
;	0092	!   Andrew C. Goldstein, 9-May-78  10:03
;	0093	!   A0017 - Pick up system global tuning parameters
;	0094	!
;	0095	!   Andrew C. Goldstein, 26-May-78  15:31
;	0096	!   A0018 - Create bad block scanner mailbox
;	0097	!
;	0098	!   Andrew C. Goldstein, 30-May-78  22:05
;	0099	!   A0019 - New working set computation algorithm
;	0100	!
;	0101	!**
;	0102	
;	0103	
;	0104	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0105	REQUIRE 'SRC$:FCPDEF.B32';
;	0424	
;	0425	! Dummy vectors to bracket the locked down code and data psects.
;	0426	!
;	0427	
;	0428	PSECT	OWN	= $LOCKEDC0$ (NOWRITE, EXECUTE, ALIGN (9));

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:59:06	DBB3:[F11A.SRC]INIFCP.B32;16					Page 1-2
;
;	0429	OWN	L_CODE_START	: VECTOR [0];
;	0430	
;	0431	PSECT	OWN	= $LOCKEDC9$ (NOWRITE, EXECUTE, ALIGN (2));
;	0432	OWN	L_CODE_END	: VECTOR [0];
;	0433	
;	0434	PSECT	OWN	= $LOCKEDD0$;
;	0435	OWN	L_DATA_START	: VECTOR [0];
;	0436	
;	0437	PSECT	OWN	= $LOCKEDD9$;
;	0438	OWN	L_DATA_END	: VECTOR [0];
;	0439	
;	0440	PSECT	OWN	= $LOCKEDD1$;

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:59:06	DBB3:[F11A.SRC]INIFCP.B32;16					Page 2
;
;	0441	GLOBAL ROUTINE INIT_FCP : NOVALUE =
;	0442	
;	0443	!++
;	0444	!
;	0445	! FUNCTIONAL DESCRIPTION:
;	0446	!
;	0447	!	This routine does the one time initialization for FCP.
;	0448	!
;	0449	! CALLING SEQUENCE:
;	0450	!	INIT_FCP ()
;	0451	!
;	0452	! INPUT PARAMETERS:
;	0453	!	NONE
;	0454	!
;	0455	! IMPLICIT INPUTS:
;	0456	!	system I/O data base
;	0457	!
;	0458	! OUTPUT PARAMETERS:
;	0459	!	NONE
;	0460	!
;	0461	! IMPLICIT OUTPUTS:
;	0462	!	IO_CHANNEL: gets channel number of I/O channel
;	0463	!	QUEUE_HEAD: points to ACP queue block
;	0464	!
;	0465	! ROUTINE VALUE:
;	0466	!	NONE
;	0467	!
;	0468	! SIDE EFFECTS:
;	0469	!	FCP hooked up to system data base
;	0470	!
;	0471	!--
;	0472	
;	0473	BEGIN
;	0474	
;	0475	LITERAL
;	0476		EXEC_MODE	= 1;		! exec mode
;	0477	
;	0478	LOCAL
;	0479		SYSEXV		: VECTOR [2],	! place to save system exception vectors
;	0480		MBX_CHANNEL,			! channel number of mailbox created
;	0481		WORKING_SET,			! desired ACP working set
;	0482		STATUS,				! system status return
;	0483		AQB		: REF BBLOCK,	! pointer to scan AQB list
;	0484		CCB		: REF BBLOCK;	! pointer to channel control block
;	0485	
;	0486	EXTERNAL
;	0487		IO_CHANNEL,			! I/O channel number
;	0488		DISK_UCB	: REF BBLOCK,	! UCB address of 'SYS$DISK'
;	0489		QUEUE_HEAD	: REF BBLOCK,	! address of queue header
;	0490		IOC$GL_AQBLIST	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE),
;	0491						! system AQB listhead
;	0492		SCH$GL_CURPCB	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE),
;	0493						! address of our PCB
;	0494		ACP$GW_WORKSET	: WORD ADDRESSING_MODE (ABSOLUTE),
;	0495						! user specified ACP working set

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:59:06	DBB3:[F11A.SRC]INIFCP.B32;16					Page 2-1
;
;	0496		ACP$GW_MAPCACHE	: WORD ADDRESSING_MODE (ABSOLUTE),
;	0497						! storage map cache size
;	0498		ACP$GW_HDRCACHE	: WORD ADDRESSING_MODE (ABSOLUTE),
;	0499						! file header cache size
;	0500		ACP$GW_DIRCACHE	: WORD ADDRESSING_MODE (ABSOLUTE),
;	0501						! directory cache size
;	0502		EXE$GL_FLAGS	: BITVECTOR ADDRESSING_MODE (ABSOLUTE);
;	0503						! system flags vector
;	0504	
;	0505	EXTERNAL LITERAL
;	0506		EXE$V_INIT	: UNSIGNED (6);	! bit position of FCP init flag
;	0507	
;	0508	EXTERNAL ROUTINE
;	0509		GET_CCB,			! get CCB address of channel
;	0510		INIT_POOL;			! initialize buffer pool
;	0511	
;	0512	
;	0513	! Clear the exec exception vectors to avoid interference
;	0514	! with FCP's error reporting logic.
;	0515	!
;	0516	
;	0517	$SETEXV (VECTOR = 0, ACMODE = EXEC_MODE, PRVHND = SYSEXV[0]); ! primary exec handler
;	0518	$SETEXV (VECTOR = 1, ACMODE = EXEC_MODE, PRVHND = SYSEXV[1]); ! secondary exec handler
;	0519	
;	0520	! If the previous handler addresses are found to be in process space,
;	0521	! restore them since they belong to the debugger.
;	0522	!
;	0523	
;	0524	IF .SYSEXV[0] GTR 0
;	0525	THEN $SETEXV (VECTOR = 0, ADDRES = .SYSEXV[0], ACMODE = EXEC_MODE); ! primary exec handler
;	0526	IF .SYSEXV[1] GTR 0
;	0527	THEN $SETEXV (VECTOR = 1, ADDRES = .SYSEXV[1], ACMODE = EXEC_MODE); ! secondary exec handler
;	0528	
;	0529	! Find the queue header for this ACP by searching the system AQB list
;	0530	! for an AQB with a matching PID. Then assign a channel to
;	0531	! 'SYS$DISK' (as good a device as any) and record the channel number.
;	0532	! Said channel number is used for all I/O - it is assigned to the
;	0533	! right device simply by stuffing the UCB pointer in the CCB.
;	0534	! Also save the UCB address in the channel so that it can be restored
;	0535	! to properly deassign the channel when we exit.
;	0536	!
;	0537	
;	0538	AQB = .IOC$GL_AQBLIST;
;	0539	UNTIL .AQB EQL 0 OR .AQB[AQB$L_ACPPID] EQL .SCH$GL_CURPCB[PCB$L_PID]
;	0540	DO AQB = .AQB[AQB$L_LINK];
;	0541	
;	0542	IF .AQB NEQ 0
;	0543	THEN QUEUE_HEAD = .AQB
;	0544	ELSE $EXIT (CODE = SS$_NOAQB);		! no queue header found - quit
;	0545	
;	0546	! Now adjust the working set. Get the working set size from the system
;	0547	! parameters if non-zero. Else, compute it from the buffer cache sizes.
;	0548	! This is done as follows: Add up the requested cache size. Add in the
;	0549	! buffer descriptor overhead. Add in 48 pages of FCP code and other overhead.
;	0550	! Add in additional charge for extra page tables.

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:59:06	DBB3:[F11A.SRC]INIFCP.B32;16					Page 2-2
;
;	0551	!
;	0552	
;	0553	WORKING_SET = .ACP$GW_WORKSET;
;	0554	IF .WORKING_SET EQL 0
;	0555	THEN
;	0556	    BEGIN
;	0557	    WORKING_SET = MAXU (4, .ACP$GW_MAPCACHE
;	0558				 + .ACP$GW_HDRCACHE
;	0559				 + .ACP$GW_DIRCACHE);
;	0560	    WORKING_SET = .WORKING_SET + (.WORKING_SET*161 + 4095) / 4096;
;	0561	    WORKING_SET = .WORKING_SET + 48;
;	0562	    WORKING_SET = .WORKING_SET + .WORKING_SET/128;
;	0563	    END;
;	0564	IF .AQB[AQB$B_ACPTYPE] EQL AQB$K_F11V2
;	0565	THEN WORKING_SET = .WORKING_SET + 6;	! allow extra space for structure level 2
;	0566	
;	0567	$ADJWSL (PAGCNT = -10000);		! adjust working set to minimum
;	0568	$ADJWSL (PAGCNT = .WORKING_SET);	! then add size desired
;	0569	
;	0570	! Now lock appropriate areas into the working set. These are code and data that
;	0571	! are used at raised IPL.
;	0572	!
;	0573	
;	0574	STATUS = $LKWSET (INADR = UPLIT (L_CODE_START, L_CODE_END));
;	0575	IF NOT .STATUS THEN $EXIT (CODE = .STATUS);
;	0576	
;	0577	STATUS = $LKWSET (INADR = UPLIT (L_DATA_START, L_DATA_END));
;	0578	IF NOT .STATUS THEN $EXIT (CODE = .STATUS);
;	0579	
;	0580	INIT_POOL ();
;	0581	
;	0582	IO_CHANNEL = 0;
;	0583	IF NOT $ASSIGN (DEVNAM = DESCRIPTOR ('SYS$SYSTEM'),
;     P 0584			CHAN   = IO_CHANNEL,
;     P 0585			ACMODE = EXEC_MODE)
;	0586	THEN BUG_CHECK (NOACPCHAN, FATAL, 'Failure to assign ACP channel');
;	0587	
;	0588	CCB = GET_CCB (.IO_CHANNEL);
;	0589	DISK_UCB = .CCB[CCB$L_UCB];
;	0590	
;	0591	! Finally set the FCP inited bit in the system flags word to indicate that
;	0592	! a file system now exists (significant only during system startup). If
;	0593	! this bit was clear, we are the first up, so also create the bad block
;	0594	! scanner mailbox. Also clear the transition bit in the AQB to tell
;	0595	! MOUNT that we are alive and well.
;	0596	!
;	0597	
;	0598	IF TESTBITCS (EXE$GL_FLAGS[EXE$V_INIT])
;	0599	THEN
;	0600	    BEGIN
;	0601	    $CREMBX (
;     P 0602			CHAN   = MBX_CHANNEL,
;     P 0603			MAXMSG = BBS$C_LENGTH,
;     P 0604			BUFQUO = BBS$C_LENGTH * 100,
;     P 0605			PROMSK = %X'FF0F',

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:59:06	DBB3:[F11A.SRC]INIFCP.B32;16					Page 2-3
;
;     P 0606			ACMODE = EXEC_MODE,
;     P 0607			LOGNAM = DESCRIPTOR ('ACP$BADBLOCK_MBX')
;     P 0608		    );
;	0609	    END;
;	0610	
;	0611	QUEUE_HEAD[AQB$V_CREATING] = 0;
;	0612	
;	0613	END;					! end of routine INIT_FCP


							    .TITLE  INIFCP
							    .IDENT  \A0019\

							    .PSECT  $CODE$,NOWRT,2

			  00000000' 00000000' 00000 P.AAA:  .ADDRESS L_CODE_START, L_CODE_END				      ;
			  00000000' 00000000' 00008 P.AAB:  .ADDRESS L_DATA_START, L_DATA_END				      ;
      4D  45  54  53  59  53  24  53  59  53  00010 P.AAD:  .ASCII  \SYS$SYSTEM\					      ;
					      0001A	    .BLKB   2
				    0000000A  0001C P.AAC:  .LONG   10							      ;
				    00000000' 00020 	    .ADDRESS P.AAD						      ;
  43  4F  4C  42  44  41  42  24  50  43  41  00024 P.AAG:  .ASCII  \ACP$BADBLOCK_MBX\					      ;
			  58  42  4D  5F  4B  0002F									      ;
				    00000010  00034 P.AAF:  .LONG   16							      ;
				    00000000' 00038 	    .ADDRESS P.AAG						      ;

							    .PSECT  $LOCKEDC2$,NOWRT,2

				  FEFF  0000  00000 P.AAE:  .WORD   0, -257						      ;
					0000* 00004 	    .WORD   <BUG$_NOACPCHAN!4>					      ;
					      00006	    .BLKB   2

							    .PSECT  $LOCKEDD9$,NOEXE,2

					      00000 L_DATA_END:
							    .BLKB   0

							    .PSECT  $LOCKEDD0$,NOEXE,2

					      00000 L_DATA_START:
							    .BLKB   0

							    .PSECT  $LOCKEDC9$,NOWRT,2

					      00000 L_CODE_END:
							    .BLKB   0

							    .PSECT  $LOCKEDC0$,NOWRT,9

					      00000 L_CODE_START:
							    .BLKB   0

							    .EXTRN  IO_CHANNEL, DISK_UCB, QUEUE_HEAD, IOC$GL_AQBLIST
							    .EXTRN  SCH$GL_CURPCB, ACP$GW_WORKSET, ACP$GW_MAPCACHE
							    .EXTRN  ACP$GW_HDRCACHE, ACP$GW_DIRCACHE, EXE$GL_FLAGS

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:59:06	DBB3:[F11A.SRC]INIFCP.B32;16					Page 2-4
;
							    .EXTRN  EXE$V_INIT, GET_CCB, INIT_POOL, SYS$SETEXV, SYS$EXIT
							    .EXTRN  SYS$ADJWSL, SYS$LKWSET, SYS$ASSIGN, BUG$_NOACPCHAN
							    .EXTRN  SYS$CREMBX

							    .PSECT  $CODE$,NOWRT,2

					 03FC 0003C 	    .ENTRY  INIT_FCP, Save R2,R3,R4,R5,R6,R7,R8,R9		      ; 0441
		         59 	0000G  CF  9E 0003E 	    MOVAB   IO_CHANNEL, R9					      ;
		         58 00000000G  9F  9E 00043 	    MOVAB   @#SYS$LKWSET, R8					      ;
		         57 00000000G  9F  9E 0004A 	    MOVAB   @#SYS$ADJWSL, R7					      ;
		         56 00000000G  9F  9E 00051 	    MOVAB   @#SYS$EXIT, R6					      ;
		         55 00000000G  9F  9E 00058 	    MOVAB   @#SYS$SETEXV, R5					      ;
		         5E 	       0C  C2 0005F 	    SUBL2   #12, SP						      ;
				  04   AE  9F 00062 	    PUSHAB  SYSEXV						      ; 0517
				       01  DD 00065 	    PUSHL   #1							      ;
				       7E  7C 00067 	    CLRQ    -(SP)						      ;
		         65 	       04  FB 00069 	    CALLS   #4, SYS$SETEXV					      ;
				  08   AE  9F 0006C 	    PUSHAB  SYSEXV+4						      ; 0518
				       01  DD 0006F 	    PUSHL   #1							      ;
		         7E 	       01  7D 00071 	    MOVQ    #1, -(SP)						      ;
		         65 	       04  FB 00074 	    CALLS   #4, SYS$SETEXV					      ;
				  04   AE  D5 00077 	    TSTL    SYSEXV						      ; 0524
				       0B  15 0007A 	    BLEQ    1$							      ;
		         7E 	       01  7D 0007C 	    MOVQ    #1, -(SP)						      ; 0525
				  0C   AE  DD 0007F 	    PUSHL   SYSEXV						      ;
				       7E  D4 00082 	    CLRL    -(SP)						      ;
		         65 	       04  FB 00084 	    CALLS   #4, SYS$SETEXV					      ;
				  08   AE  D5 00087 1$:     TSTL    SYSEXV+4						      ; 0526
				       0B  15 0008A 	    BLEQ    2$							      ;
		         7E 	       01  7D 0008C 	    MOVQ    #1, -(SP)						      ; 0527
				  10   AE  DD 0008F 	    PUSHL   SYSEXV+4						      ;
				       01  DD 00092 	    PUSHL   #1							      ;
		         65 	       04  FB 00094 	    CALLS   #4, SYS$SETEXV					      ;
		         52 00000000G  9F  D0 00097 2$:     MOVL    @#IOC$GL_AQBLIST, AQB				      ; 0538
				       14  13 0009E 3$:     BEQL    4$							      ; 0539
		         50 00000000G  9F  D0 000A0 	    MOVL    @#SCH$GL_CURPCB, R0					      ;
		    60   A0	  0C   A2  D1 000A7 	    CMPL    12(AQB), 96(R0)					      ;
				       06  13 000AC 	    BEQL    4$							      ;
		         52 	  10   A2  D0 000AE 	    MOVL    16(AQB), AQB					      ; 0540
				       EA  11 000B2 	    BRB     3$							      ; 0539
				       52  D5 000B4 4$:     TSTL    AQB							      ; 0542
				       07  13 000B6 	    BEQL    5$							      ;
		  0000G  CF	       52  D0 000B8 	    MOVL    AQB, QUEUE_HEAD					      ; 0543
				       08  11 000BD 	    BRB     6$							      ; 0542
		         7E 	0314   8F  3C 000BF 5$:     MOVZWL  #788, -(SP)						      ; 0544
		         66 	       01  FB 000C4 	    CALLS   #1, SYS$EXIT					      ;
		         53 00000000G  9F  3C 000C7 6$:     MOVZWL  @#ACP$GW_WORKSET, WORKING_SET			      ; 0553
				       4B  12 000CE 	    BNEQ    8$							      ; 0554
		         50 00000000G  9F  3C 000D0 	    MOVZWL  @#ACP$GW_MAPCACHE, R0				      ; 0558
		         51 00000000G  9F  3C 000D7 	    MOVZWL  @#ACP$GW_HDRCACHE, R1				      ;
		         50 	       51  C0 000DE 	    ADDL2   R1, R0						      ;
		         54 00000000G  9F  3C 000E1 	    MOVZWL  @#ACP$GW_DIRCACHE, R4				      ; 0559
		         50 	       54  C0 000E8 	    ADDL2   R4, R0						      ;
		         04 	       50  D1 000EB 	    CMPL    R0, #4						      ; 0557
				       03  1E 000EE 	    BGEQU   7$							      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:59:06	DBB3:[F11A.SRC]INIFCP.B32;16					Page 2-5
;
		         50 	       04  D0 000F0 	    MOVL    #4, R0						      ;
		         53 	       50  D0 000F3 7$:     MOVL    R0, WORKING_SET					      ;
	   50 	         53 000000A1   8F  C5 000F6 	    MULL3   #161, WORKING_SET, R0				      ; 0560
		         50 	0FFF   C0  9E 000FE 	    MOVAB   4095(R0), R0					      ;
		         50 00001000   8F  C6 00103 	    DIVL2   #4096, R0						      ;
		         53 	       50  C0 0010A 	    ADDL2   R0, WORKING_SET					      ;
		         53 	       30  C0 0010D 	    ADDL2   #48, WORKING_SET					      ; 0561
	   50 	         53 00000080   8F  C7 00110 	    DIVL3   #128, WORKING_SET, R0				      ; 0562
		         53 	       50  C0 00118 	    ADDL2   R0, WORKING_SET					      ;
		         02 	  15   A2  91 0011B 8$:     CMPB    21(AQB), #2						      ; 0564
				       03  12 0011F 	    BNEQ    9$							      ;
		         53 	       06  C0 00121 	    ADDL2   #6, WORKING_SET					      ; 0565
				       7E  D4 00124 9$:     CLRL    -(SP)						      ; 0567
		         7E 	D8F0   8F  32 00126 	    CVTWL   #-10000, -(SP)					      ;
		         67 	       02  FB 0012B 	    CALLS   #2, SYS$ADJWSL					      ;
				       7E  D4 0012E 	    CLRL    -(SP)						      ; 0568
				       53  DD 00130 	    PUSHL   WORKING_SET						      ;
		         67 	       02  FB 00132 	    CALLS   #2, SYS$ADJWSL					      ;
				       7E  7C 00135 	    CLRQ    -(SP)						      ; 0574
				FEC5   CF  9F 00137 	    PUSHAB  P.AAA						      ;
		         68 	       03  FB 0013B 	    CALLS   #3, SYS$LKWSET					      ;
		         52 	       50  D0 0013E 	    MOVL    R0, STATUS						      ;
		         05 	       52  E8 00141 	    BLBS    STATUS, 10$						      ; 0575
				       52  DD 00144 	    PUSHL   STATUS						      ;
		         66 	       01  FB 00146 	    CALLS   #1, SYS$EXIT					      ;
				       7E  7C 00149 10$:    CLRQ    -(SP)						      ; 0577
				FEB9   CF  9F 0014B 	    PUSHAB  P.AAB						      ;
		         68 	       03  FB 0014F 	    CALLS   #3, SYS$LKWSET					      ;
		         52 	       50  D0 00152 	    MOVL    R0, STATUS						      ;
		         05 	       52  E8 00155 	    BLBS    STATUS, 11$						      ; 0578
				       52  DD 00158 	    PUSHL   STATUS						      ;
		         66 	       01  FB 0015A 	    CALLS   #1, SYS$EXIT					      ;
		  0000G  CF	       00  FB 0015D 11$:    CALLS   #0, INIT_POOL					      ; 0580
				       69  D4 00162 	    CLRL    IO_CHANNEL						      ; 0582
		         7E 	       01  7D 00164 	    MOVQ    #1, -(SP)						      ; 0585
				       59  DD 00167 	    PUSHL   R9							      ;
				FEAF   CF  9F 00169 	    PUSHAB  P.AAC						      ;
	      00000000G  9F	       04  FB 0016D 	    CALLS   #4, @#SYS$ASSIGN					      ;
		         05 	       50  E8 00174 	    BLBS    R0, 12$						      ;
		  0000'  CF	       00  FB 00177 	    CALLS   #0, P.AAE						      ; 0586
				       69  DD 0017C 12$:    PUSHL   IO_CHANNEL						      ; 0588
		  0000G  CF	       01  FB 0017E 	    CALLS   #1, GET_CCB						      ;
		  0000G  CF	       60  D0 00183 	    MOVL    (CCB), DISK_UCB					      ; 0589
	   1E 00000000G  9F	       00G E2 00188 	    BBSS    S^EXE$V_INIT, @#EXE$GL_FLAGS, 13$			      ; 0598
				FEA0   CF  9F 00190 	    PUSHAB  P.AAF						      ; 0608
				       01  DD 00194 	    PUSHL   #1							      ;
		         7E 	FF0F   8F  3C 00196 	    MOVZWL  #65295, -(SP)					      ;
		         7E 	0708   8F  3C 0019B 	    MOVZWL  #1800, -(SP)					      ;
				       12  DD 001A0 	    PUSHL   #18							      ;
				  14   AE  9F 001A2 	    PUSHAB  MBX_CHANNEL						      ;
				       7E  D4 001A5 	    CLRL    -(SP)						      ;
	      00000000G  9F	       07  FB 001A7 	    CALLS   #7, @#SYS$CREMBX					      ;
		         50 	0000G  CF  D0 001AE 13$:    MOVL    QUEUE_HEAD, R0					      ; 0611
		    14   A0	       08  8A 001B3 	    BICB2   #8, 20(R0)						      ;
					   04 001B7 	    RET     							      ; 0441

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:59:06	DBB3:[F11A.SRC]INIFCP.B32;16					Page 2-6
;

; Routine Size:  380 bytes


;	0614	
;	0615	END
;	0616	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $LOCKEDC0$     	     0  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(9)
;  $LOCKEDC9$     	     0  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $LOCKEDD0$     	     0    WRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $LOCKEDD9$     	     0    WRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $CODE$         	   440  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $LOCKEDC2$     	     8  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        16         0       238





; Size:		380 code + 68 data bytes
; Run Time:	00:08.9
; Elapsed Time:	00:16.8
; Memory Used:	325 pages
; Compilation Complete
