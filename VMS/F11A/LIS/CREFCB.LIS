
; Bliss-32 10.1-416	Monday 21-AUG-1978 22:52:08	DBB3:[F11A.SRC]CREFCB.B32;8					Page 1
;
;	0001	MODULE CREFCB (
;	0002			LANGUAGE (BLISS32),
;	0003			IDENT = 'A0006'
;	0004			) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1977
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	!
;	0028	! FACILITY:  F11ACP Structure Level 1
;	0029	!
;	0030	! ABSTRACT:
;	0031	!
;	0032	!	These routines create and initialize a file control block
;	0033	!	from the given file header.
;	0034	!
;	0035	! ENVIRONMENT:
;	0036	!
;	0037	!	STARLET operating system, including privileged system services
;	0038	!	and internal exec routines. These routines must be called in
;	0039	!	kernel mode.
;	0040	
;	0041	!
;	0042	!--
;	0043	!
;	0044	!
;	0045	! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  14-Dec-1976  16:48
;	0046	!
;	0047	! REVISION HISTORY:
;	0048	!
;	0049	!   Andrew C. Goldstein, 16-Feb-1977  15:02
;	0050	!   X0002 - Modify for condition handling
;	0051	!
;	0052	!   Andrew C. Goldstein, 9-Aug-1977  14:23
;	0053	!   X0003 - Add UPDATE_FCB routine
;	0054	!
;	0055	!   Andrew C. Goldstein, 1-Nov-1977  15:11

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:52:08	DBB3:[F11A.SRC]CREFCB.B32;8					Page 1-1
;
;	0056	!   X0004 - Break out from INIFCB
;	0057	!
;	0058	!   Andrew C. Goldstein, 15-Nov-1977  18:26
;	0059	!   X0005 - Replicate code in INIFCB to get correct EOF check
;	0060	!
;	0061	!   Andrew C. Goldstein, 6-Jun-78  0:57
;	0062	!   A0006 - Add implicit spooling support
;	0063	!
;	0064	!**
;	0065	
;	0066	
;	0067	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0068	REQUIRE 'SRC$:FCPDEF.B32';
;	0387	
;	0388	
;	0389	FORWARD ROUTINE
;	0390		CREATE_FCB,
;	0391		UPDATE_FCB	: NOVALUE;

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:52:08	DBB3:[F11A.SRC]CREFCB.B32;8					Page 2
;
;	0392	GLOBAL ROUTINE CREATE_FCB (HEADER) =
;	0393	
;	0394	!++
;	0395	!
;	0396	! FUNCTIONAL DESCRIPTION:
;	0397	!
;	0398	!	This routine creates an FCB and initializes it according to
;	0399	!	the given file header.
;	0400	!
;	0401	! CALLING SEQUENCE:
;	0402	!	CREATE_FCB (ARG1)
;	0403	!
;	0404	! INPUT PARAMETERS:
;	0405	!	ARG1: address of file header
;	0406	!
;	0407	! IMPLICIT INPUTS:
;	0408	!	NONE
;	0409	!
;	0410	! OUTPUT PARAMETERS:
;	0411	!	NONE
;	0412	!
;	0413	! IMPLICIT OUTPUTS:
;	0414	!	NONE
;	0415	!
;	0416	! ROUTINE VALUE:
;	0417	!	ADDRESS OF FCB
;	0418	!
;	0419	! SIDE EFFECTS:
;	0420	!	FCB created and initialized
;	0421	!
;	0422	!--
;	0423	
;	0424	BEGIN
;	0425	
;	0426	MAP
;	0427		HEADER		: REF BBLOCK;	! file header argument
;	0428	
;	0429	LOCAL
;	0430		FCB		: REF BBLOCK;	! address of FCB created
;	0431	
;	0432	EXTERNAL ROUTINE
;	0433		ALLOCATE,			! allocate dynamic memory
;	0434		INIT_FCB;			! initialize contents of FCB
;	0435	
;	0436	! Allocate an FCB sized and typed block. Then use the common routine
;	0437	! to init it.
;	0438	!
;	0439	
;	0440	FCB = ALLOCATE (FCB$C_LENGTH, FCB_TYPE);
;	0441	FCB[FCB$L_WLFL] = FCB[FCB$L_WLFL];	! init null window list
;	0442	FCB[FCB$L_WLBL] = FCB[FCB$L_WLFL];
;	0443	FCB[FCB$L_STVBN] = 1;			! init start VBN to 1
;	0444	INIT_FCB (.FCB, .HEADER);
;	0445	RETURN .FCB;
;	0446	

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:52:08	DBB3:[F11A.SRC]CREFCB.B32;8					Page 2-1
;
;	0447	END;					! end of routine CREATE_FCB


							    .TITLE  CREFCB
							    .IDENT  \A0006\

							    .EXTRN  ALLOCATE, INIT_FCB

							    .PSECT  $CODE$,NOWRT,2

					 0004 00000 	    .ENTRY  CREATE_FCB, Save R2					      ; 0392
				       7E  D4 00002 	    CLRL    -(SP)						      ; 0440
		         7E 	  48   8F  9A 00004 	    MOVZBL  #72, -(SP)						      ;
		  0000G  CF	       02  FB 00008 	    CALLS   #2, ALLOCATE					      ;
		         52 	       50  D0 0000D 	    MOVL    R0, FCB						      ;
		    10   A2	  10   A2  9E 00010 	    MOVAB   16(FCB), 16(FCB)					      ; 0441
		    14   A2	  10   A2  9E 00015 	    MOVAB   16(FCB), 20(FCB)					      ; 0442
		    28   A2	       01  D0 0001A 	    MOVL    #1, 40(FCB)						      ; 0443
				  04   AC  DD 0001E 	    PUSHL   HEADER						      ; 0444
				       52  DD 00021 	    PUSHL   FCB							      ;
		  0000G  CF	       02  FB 00023 	    CALLS   #2, INIT_FCB					      ;
		         50 	       52  D0 00028 	    MOVL    FCB, R0						      ; 0445
					   04 0002B 	    RET     							      ; 0392

; Routine Size:  44 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 22:52:08	DBB3:[F11A.SRC]CREFCB.B32;8					Page 3
;
;	0448	GLOBAL ROUTINE UPDATE_FCB (HEADER) : NOVALUE =
;	0449	
;	0450	!++
;	0451	!
;	0452	! FUNCTIONAL DESCRIPTION:
;	0453	!
;	0454	!	This routine updates the file attributes of the file's primary FCB,
;	0455	!	if any, with the file attributes of the given header. The file size
;	0456	!	is preserved.
;	0457	!
;	0458	!
;	0459	! CALLING SEQUENCE:
;	0460	!	UPDATE_FCB (ARG1)
;	0461	!
;	0462	! INPUT PARAMETERS:
;	0463	!	ARG1: address of file header
;	0464	!
;	0465	! IMPLICIT INPUTS:
;	0466	!	NONE
;	0467	!
;	0468	! OUTPUT PARAMETERS:
;	0469	!	NONE
;	0470	!
;	0471	! IMPLICIT OUTPUTS:
;	0472	!	PRIMARY_FCB: address of file FCB or 0
;	0473	!
;	0474	! ROUTINE VALUE:
;	0475	!	NONE
;	0476	!
;	0477	! SIDE EFFECTS:
;	0478	!	FCB is updated if it exists
;	0479	!
;	0480	!--
;	0481	
;	0482	BEGIN
;	0483	
;	0484	MAP
;	0485		HEADER		: REF BBLOCK;	! file header arg
;	0486	
;	0487	LOCAL
;	0488		FCB		: REF BBLOCK,	! local pointer to FCB
;	0489		MAP_AREA	: REF BBLOCK,	! pointer to header map area
;	0490		MAP_POINTER	: REF BBLOCK;	! pointer to scan map
;	0491	
;	0492	EXTERNAL
;	0493		PRIMARY_FCB	: REF BBLOCK,	! FCB of file in process
;	0494		HEADER_LBN;			! LBN of file header
;	0495	
;	0496	
;	0497	FCB = .PRIMARY_FCB;
;	0498	IF .FCB EQL 0 THEN RETURN;
;	0499	
;	0500	
;	0501	! Get the known constants and the simple stuff from the file header
;	0502	! (i.e., header LBN, file ID, starting VBN, file owner and file protection).

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:52:08	DBB3:[F11A.SRC]CREFCB.B32;8					Page 3-1
;
;	0503	!
;	0504	
;	0505	FCB[FCB$L_HDLBN]	= .HEADER_LBN;
;	0506	FCB[FCB$W_FID_NUM]	= .HEADER[FH1$W_FID_NUM];
;	0507	FCB[FCB$W_FID_SEQ]	= .HEADER[FH1$W_FID_SEQ];
;	0508	FCB[FCB$W_UICMEMBER]	= .HEADER[FH1$B_UICMEMBER];
;	0509	FCB[FCB$W_UICGROUP]	= .HEADER[FH1$B_UICGROUP];
;	0510	FCB[FCB$W_FILEPROT]	= .HEADER[FH1$W_FILEPROT];
;	0511	IF .HEADER[FH1$V_SPOOL] THEN FCB[FCB$V_SPOOL] = 1;
;	0512	FCB[FCB$L_EFBLK]	= ROT (.BBLOCK[HEADER[FH1$W_RECATTR], FAT$L_EFBLK], 16);
;	0513	IF  .FCB[FCB$L_EFBLK] NEQ 0
;	0514	AND .BBLOCK[HEADER[FH1$W_RECATTR], FAT$W_FFBYTE] EQL 0
;	0515	THEN FCB[FCB$L_EFBLK] = .FCB[FCB$L_EFBLK] - 1;
;	0516	
;	0517	! Now scan the map area. Get the starting LBN if the file is contiguous.
;	0518	!
;	0519	
;	0520	MAP_AREA = .HEADER + .HEADER[FH1$B_MPOFFSET]*2;
;	0521	MAP_POINTER = .MAP_AREA + FM1$C_POINTERS;
;	0522	FCB[FCB$W_SEGN] = .MAP_AREA[FM1$B_EX_SEGNUM];
;	0523	
;	0524	FCB[FCB$L_STLBN] = 0;			! assume non-contiguous file
;	0525	IF .HEADER[FH1$V_CONTIG]
;	0526	THEN
;	0527	    BEGIN
;	0528	    FCB[FCB$L_STLBN] = .MAP_POINTER[FM1$W_LOWLBN]; ! get low order LBN
;	0529	    (FCB[FCB$L_STLBN])<16,8> = .MAP_POINTER[FM1$B_HIGHLBN]; ! and high order
;	0530	    END;
;	0531	
;	0532	
;	0533	IF .FCB[FCB$L_EFBLK] GTR .FCB[FCB$L_FILESIZE]
;	0534	THEN FCB[FCB$L_EFBLK] = .FCB[FCB$L_FILESIZE];
;	0535	
;	0536	END;					! end of routine UPDATE_FCB



							    .EXTRN  PRIMARY_FCB, HEADER_LBN

					 001C 0002C 	    .ENTRY  UPDATE_FCB, Save R2,R3,R4				      ; 0448
		         51 	0000G  CF  D0 0002E 	    MOVL    PRIMARY_FCB, FCB					      ; 0497
				       64  13 00033 	    BEQL    4$							      ; 0498
		    30   A1	0000G  CF  D0 00035 	    MOVL    HEADER_LBN, 48(FCB)					      ; 0505
		         50 	  04   AC  D0 0003B 	    MOVL    HEADER, R0						      ; 0506
		    20   A1	  02   A0  D0 0003F 	    MOVL    2(R0), 32(FCB)					      ;
		    38   A1	  08   A0  9B 00044 	    MOVZBW  8(R0), 56(FCB)					      ; 0508
		    3A   A1	  09   A0  9B 00049 	    MOVZBW  9(R0), 58(FCB)					      ; 0509
		    3C   A1	  0A   A0  B0 0004E 	    MOVW    10(R0), 60(FCB)					      ; 0510
	   04 	    0D   A0	       04  E1 00053 	    BBC     #4, 13(R0), 1$					      ; 0511
		    1E   A1	       10  88 00058 	    BISB2   #16, 30(FCB)					      ;
		         53 	  40   A1  9E 0005C 1$:     MOVAB   64(FCB), R3						      ; 0512
	   63 	    16   A0	       10  9C 00060 	    ROTL    #16, 22(R0), (R3)					      ;
				       07  13 00065 	    BEQL    2$							      ; 0513
				  1A   A0  B5 00067 	    TSTW    26(R0)						      ; 0514
				       02  12 0006A 	    BNEQ    2$							      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:52:08	DBB3:[F11A.SRC]CREFCB.B32;8					Page 3-2
;
				       63  D7 0006C 	    DECL    (R3)						      ; 0515
		         52 	  01   A0  9A 0006E 2$:     MOVZBL  1(R0), R2						      ; 0520
		         54 	     6042  3E 00072 	    MOVAW   (R0)[R2], MAP_AREA					      ;
		         52 	  0A   A4  9E 00076 	    MOVAB   10(R4), MAP_POINTER					      ; 0521
		    26   A1	       64  9B 0007A 	    MOVZBW  (MAP_AREA), 38(FCB)					      ; 0522
				  2C   A1  D4 0007E 	    CLRL    44(FCB)						      ; 0524
	   09 	    0C   A0	       07  E1 00081 	    BBC     #7, 12(R0), 3$					      ; 0525
		    2C   A1	  02   A2  3C 00086 	    MOVZWL  2(MAP_POINTER), 44(FCB)				      ; 0528
		    2E   A1	       62  90 0008B 	    MOVB    (MAP_POINTER), 46(FCB)				      ; 0529
		    34   A1	       63  D1 0008F 3$:     CMPL    (R3), 52(FCB)					      ; 0533
				       04  15 00093 	    BLEQ    4$							      ;
		         63 	  34   A1  D0 00095 	    MOVL    52(FCB), (R3)					      ; 0534
					   04 00099 4$:     RET     							      ; 0448

; Routine Size:  110 bytes


;	0537	
;	0538	END
;	0539	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $CODE$         	   154  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        31         0       246





; Size:		154 code + 0 data bytes
; Run Time:	00:06.6
; Elapsed Time:	00:13.0
; Memory Used:	290 pages
; Compilation Complete
