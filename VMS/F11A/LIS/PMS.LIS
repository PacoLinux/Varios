
; Bliss-32 10.1-416	Monday 21-AUG-1978 23:01:40	DBB3:[F11A.SRC]PMS.B32;7					Page 1
;
;	0001	MODULE PMS (
;	0002			LANGUAGE (BLISS32),
;	0003			IDENT = 'A0002'
;	0004			) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1977
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	!
;	0028	! FACILITY:  F11ACP Structure Level 1
;	0029	!
;	0030	! ABSTRACT:
;	0031	!
;	0032	!	This module contains the local performance measurement data base
;	0033	!	and the performance metering routines.
;	0034	!
;	0035	! ENVIRONMENT:
;	0036	!
;	0037	!	STARLET operating system, including privileged system services
;	0038	!	and internal exec routines.
;	0039	!
;	0040	!--
;	0041	!
;	0042	!
;	0043	! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  25-Aug-1977  11:30
;	0044	!
;	0045	! REVISION HISTORY:
;	0046	!
;	0047	!   Andrew C. Goldstein, 12-Dec-1977  13:59
;	0048	!   X0002 - Eliminate race conditions between multiple ACP's
;	0049	!
;	0050	!**
;	0051	
;	0052	
;	0053	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0054	REQUIRE 'SRC$:FCPDEF.B32';
;	0373	

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:01:40	DBB3:[F11A.SRC]PMS.B32;7					Page 1-1
;
;	0374	
;	0375	FORWARD ROUTINE
;	0376		PMS_START	: NOVALUE,	! start measuring main function
;	0377		PMS_END		: NOVALUE,	! end measuring main function
;	0378		PMS_START_SUB	: NOVALUE,	! start measuring subfunction
;	0379		PMS_END_SUB	: NOVALUE;	! end measuring subfunction

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:01:40	DBB3:[F11A.SRC]PMS.B32;7					Page 2
;
;	0380	!+
;	0381	!
;	0382	! The performance measurement data base consists of the accounting array in
;	0383	! system space, as well as some local storage to keep intermediate figures.
;	0384	! The data accumulated per function (and also broken out for significant
;	0385	! subfunctions) includes the number of functions executed, the number of
;	0386	! modifiers, the number of disk reads, disk writes, and cache reads, the
;	0387	! amount of CPU time, and the number of page faults.
;	0388	!
;	0389	!-
;	0390	
;	0391	!
;	0392	! System space data array. Each measured parameter is contained in a vector
;	0393	! with one entry per function.
;	0394	!
;	0395	
;	0396	EXTERNAL
;	0397		PMS$GL_FCP	: VECTOR ADDRESSING_MODE (ABSOLUTE);
;	0398						! base of FCP measurement array
;	0399	
;	0400	BIND
;	0401		PMS$GL_COUNT	= PMS$GL_FCP + 0	: VECTOR [10],
;	0402		PMS$GL_MCNT	= PMS$GL_FCP + 40	: VECTOR [10],
;	0403		PMS$GL_READ	= PMS$GL_FCP + 80	: VECTOR [10],
;	0404		PMS$GL_WRITE	= PMS$GL_FCP + 120	: VECTOR [10],
;	0405		PMS$GL_CACHE	= PMS$GL_FCP + 160	: VECTOR [10],
;	0406		PMS$GL_CPU	= PMS$GL_FCP + 200	: VECTOR [10],
;	0407		PMS$GL_PFA	= PMS$GL_FCP + 240	: VECTOR [10];
;	0408	
;	0409	!
;	0410	! Running totals maintained by FCP routines.
;	0411	!
;	0412	
;	0413	GLOBAL
;	0414		PMS_TOT_READ,			! total disk reads
;	0415		PMS_TOT_WRITE,			! total disk writes
;	0416		PMS_TOT_CACHE;			! total cache reads
;	0417	
;	0418	!
;	0419	! Base values of parameters at start of this function.
;	0420	!
;	0421	
;	0422	OWN
;	0423		PMS_FNC_READ,
;	0424		PMS_FNC_WRITE,
;	0425		PMS_FNC_CACHE,
;	0426		PMS_FNC_CPU,
;	0427		PMS_FNC_PFA;
;	0428	
;	0429	!
;	0430	! Base values of parameters at start of current subfunction.
;	0431	!
;	0432	
;	0433	
;	0434	GLOBAL

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:01:40	DBB3:[F11A.SRC]PMS.B32;7					Page 2-1
;
;	0435		PMS_SUB_NEST;			! nested subfunction flag
;	0436	
;	0437	OWN
;	0438		PMS_SUB_FUNC,			! subfunction code
;	0439		PMS_SUB_READ,
;	0440		PMS_SUB_WRITE,
;	0441		PMS_SUB_CACHE,
;	0442		PMS_SUB_CPU,
;	0443		PMS_SUB_PFA;

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:01:40	DBB3:[F11A.SRC]PMS.B32;7					Page 3
;
;	0444	GLOBAL ROUTINE PMS_START : NOVALUE =
;	0445	
;	0446	!++
;	0447	!
;	0448	! FUNCTIONAL DESCRIPTION:
;	0449	!
;	0450	!	This routine initiates measurement for the main function being executed.
;	0451	!
;	0452	!
;	0453	! CALLING SEQUENCE:
;	0454	!	PMS_START ()
;	0455	!
;	0456	! INPUT PARAMETERS:
;	0457	!	NONE
;	0458	!
;	0459	! IMPLICIT INPUTS:
;	0460	!	NONE
;	0461	!
;	0462	! OUTPUT PARAMETERS:
;	0463	!	NONE
;	0464	!
;	0465	! IMPLICIT OUTPUTS:
;	0466	!	NONE
;	0467	!
;	0468	! ROUTINE VALUE:
;	0469	!	NONE
;	0470	!
;	0471	! SIDE EFFECTS:
;	0472	!	NONE
;	0473	!
;	0474	!--
;	0475	
;	0476	BEGIN
;	0477	
;	0478	LOCAL
;	0479		PROCESS_HEADER	: REF BBLOCK;	! pointer to FCP process header
;	0480	
;	0481	EXTERNAL
;	0482		CTL$GL_PHD	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE);
;	0483						! address of process header in control region
;	0484	
;	0485	
;	0486	! To initialize measurement, we take copies of the running totals of all the
;	0487	! parameters and stash them, so we can later compute the incremental usage.
;	0488	!
;	0489	
;	0490	PROCESS_HEADER = .CTL$GL_PHD;		! get address of own process header
;	0491	
;	0492	PMS_FNC_READ = .PMS_TOT_READ;
;	0493	PMS_FNC_WRITE = .PMS_TOT_WRITE;
;	0494	PMS_FNC_CACHE = .PMS_TOT_CACHE;
;	0495	PMS_FNC_CPU = .PROCESS_HEADER[PHD$L_CPUTIM];
;	0496	PMS_FNC_PFA = .PROCESS_HEADER[PHD$L_PAGEFLTS];
;	0497	
;	0498	END;					! end of routine PMS_START

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:01:40	DBB3:[F11A.SRC]PMS.B32;7					Page 3-1
;


							    .TITLE  PMS
							    .IDENT  \A0002\

							    .PSECT  $LOCKEDD1$,NOEXE,2

					      00000 PMS_TOT_READ::
							    .BLKB   4
					      00004 PMS_TOT_WRITE::
							    .BLKB   4
					      00008 PMS_TOT_CACHE::
							    .BLKB   4
					      0000C PMS_FNC_READ:
							    .BLKB   4
					      00010 PMS_FNC_WRITE:
							    .BLKB   4
					      00014 PMS_FNC_CACHE:
							    .BLKB   4
					      00018 PMS_FNC_CPU:
							    .BLKB   4
					      0001C PMS_FNC_PFA:
							    .BLKB   4
					      00020 PMS_SUB_NEST::
							    .BLKB   4
					      00024 PMS_SUB_FUNC:
							    .BLKB   4
					      00028 PMS_SUB_READ:
							    .BLKB   4
					      0002C PMS_SUB_WRITE:
							    .BLKB   4
					      00030 PMS_SUB_CACHE:
							    .BLKB   4
					      00034 PMS_SUB_CPU:
							    .BLKB   4
					      00038 PMS_SUB_PFA:
							    .BLKB   4

							    .EXTRN  PMS$GL_FCP, CTL$GL_PHD

							    .PSECT  $CODE$,NOWRT,2

					 0004 00000 	    .ENTRY  PMS_START, Save R2					      ; 0444
		         52 	0000'  CF  9E 00002 	    MOVAB   PMS_TOT_READ, R2					      ;
		         50 00000000G  9F  D0 00007 	    MOVL    @#CTL$GL_PHD, PROCESS_HEADER			      ; 0490
		    0C   A2	       62  7D 0000E 	    MOVQ    PMS_TOT_READ, PMS_FNC_READ				      ; 0492
		    14   A2	  08   A2  D0 00012 	    MOVL    PMS_TOT_CACHE, PMS_FNC_CACHE			      ; 0494
		    18   A2	  3C   A0  D0 00017 	    MOVL    60(PROCESS_HEADER), PMS_FNC_CPU			      ; 0495
		    1C   A2	  4C   A0  D0 0001C 	    MOVL    76(PROCESS_HEADER), PMS_FNC_PFA			      ; 0496
					   04 00021 	    RET     							      ; 0444

; Routine Size:  34 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 23:01:40	DBB3:[F11A.SRC]PMS.B32;7					Page 4
;
;	0499	GLOBAL ROUTINE PMS_END : NOVALUE =
;	0500	
;	0501	!++
;	0502	!
;	0503	! FUNCTIONAL DESCRIPTION:
;	0504	!
;	0505	!	This routine ends measurement for the current main function. It
;	0506	!	subtracts the stored base values from the running totals of the
;	0507	!	parameters and accumulates the delta in the system space cells
;	0508	!	for the particular function.
;	0509	!
;	0510	!
;	0511	! CALLING SEQUENCE:
;	0512	!	PMS_END ()
;	0513	!
;	0514	! INPUT PARAMETERS:
;	0515	!	NONE
;	0516	!
;	0517	! IMPLICIT INPUTS:
;	0518	!	IO_PACKET: address of I/O packet of this function
;	0519	!
;	0520	! OUTPUT PARAMETERS:
;	0521	!	NONE
;	0522	!
;	0523	! IMPLICIT OUTPUTS:
;	0524	!	NONE
;	0525	!
;	0526	! ROUTINE VALUE:
;	0527	!	NONE
;	0528	!
;	0529	! SIDE EFFECTS:
;	0530	!	measurement data base updated
;	0531	!
;	0532	!--
;	0533	
;	0534	BEGIN
;	0535	
;	0536	BIND					! table to translate function to array index
;	0537		FUNCTAB		= UPLIT BYTE   (IO$_ACCESS,
;	0538						IO$_CREATE,
;	0539						IO$_DEACCESS,
;	0540						IO$_DELETE,
;	0541						IO$_MODIFY,
;	0542						IO$_ACPCONTROL)
;	0543				: VECTOR [,BYTE];
;	0544	
;	0545	LOCAL
;	0546		D,				! value of parameter change
;	0547		FUNCTION	: BBLOCK[4],	! I/O function code, including modifiers
;	0548		J,				! array index
;	0549		PROCESS_HEADER	: REF BBLOCK;	! address of own process header
;	0550	
;	0551	EXTERNAL
;	0552		IO_PACKET	: REF BBLOCK,	! address of I/O packet
;	0553		CTL$GL_PHD	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE);

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:01:40	DBB3:[F11A.SRC]PMS.B32;7					Page 4-1
;
;	0554						! address of process header in control region
;	0555	
;	0556	! If there is a subfunction open, close it first.
;	0557	!
;	0558	
;	0559	IF .PMS_SUB_NEST NEQ 0
;	0560	THEN
;	0561	    BEGIN
;	0562	    PMS_SUB_NEST = 1;
;	0563	    PMS_END_SUB ();
;	0564	    END;
;	0565	
;	0566	! Derive the table index from the function code by searching the function
;	0567	! code table. If the code is not found, we do not record data.
;	0568	!
;	0569	
;	0570	J =
;	0571	    BEGIN
;	0572	    INCR I FROM 0 TO 5 DO
;	0573	    IF .IO_PACKET[IRP$V_FCODE] EQL .FUNCTAB[.I]
;	0574	    THEN EXITLOOP .I
;	0575	    END;
;	0576	
;	0577	IF .J EQL -1 THEN RETURN;
;	0578	
;	0579	! Compute the deltas and accumulate them into the system space array.
;	0580	! Note that we explicitly compute the change for each parameter and then
;	0581	! add it into the data base cell, to prevent windows in which the value of
;	0582	! the parameter is held in a local. This is because we cannot count on the
;	0583	! compiler to generate simple stores which would be hazard free.
;	0584	!
;	0585	
;	0586	PROCESS_HEADER = .CTL$GL_PHD;
;	0587	FUNCTION = .IO_PACKET[IRP$W_FUNC];
;	0588	
;	0589	PMS$GL_COUNT[.J] = .PMS$GL_COUNT[.J] + 1;
;	0590	IF .FUNCTION[IO$V_ACCESS]
;	0591	THEN PMS$GL_MCNT[.J] = .PMS$GL_MCNT[.J] + 1;
;	0592	IF .FUNCTION[IO$V_CREATE]
;	0593	THEN PMS$GL_MCNT[.J] = .PMS$GL_MCNT[.J] + 1;
;	0594	IF .FUNCTION[IO$V_DELETE]
;	0595	THEN PMS$GL_MCNT[.J] = .PMS$GL_MCNT[.J] + 1;
;	0596	D =  .PMS_TOT_READ - .PMS_FNC_READ;
;	0597	PMS$GL_READ[.J] = .PMS$GL_READ[.J] + .D;
;	0598	D =  .PMS_TOT_WRITE - .PMS_FNC_WRITE;
;	0599	PMS$GL_WRITE[.J] = .PMS$GL_WRITE[.J] + .D;
;	0600	D =  .PMS_TOT_CACHE - .PMS_FNC_CACHE;
;	0601	PMS$GL_CACHE[.J] = .PMS$GL_CACHE[.J] + .D;
;	0602	D =  .PROCESS_HEADER[PHD$L_CPUTIM] - .PMS_FNC_CPU;
;	0603	PMS$GL_CPU[.J] = .PMS$GL_CPU[.J] + .D;
;	0604	D =  .PROCESS_HEADER[PHD$L_PAGEFLTS] - .PMS_FNC_PFA;
;	0605	PMS$GL_PFA[.J] = .PMS$GL_PFA[.J] + .D;
;	0606	
;	0607	END;					! end of routine PMS_END


; Bliss-32 10.1-416	Monday 21-AUG-1978 23:01:40	DBB3:[F11A.SRC]PMS.B32;7					Page 4-2
;


					      00022	    .BLKB   2
		      38  36  35  34  33  32  00024 P.AAA:  .BYTE   50, 51, 52, 53, 54, 56				      ;
					      0002A	    .BLKB   2

						    FUNCTAB=		P.AAA
							    .EXTRN  IO_PACKET

					 001C 0002C 	    .ENTRY  PMS_END, Save R2,R3,R4				      ; 0499
		         54 	0000'  CF  9E 0002E 	    MOVAB   PMS_SUB_NEST, R4					      ;
		         53 00000000G  9F  9E 00033 	    MOVAB   @#PMS$GL_MCNT, R3					      ;
				       64  D5 0003A 	    TSTL    PMS_SUB_NEST					      ; 0559
				       08  13 0003C 	    BEQL    1$							      ;
		         64 	       01  D0 0003E 	    MOVL    #1, PMS_SUB_NEST					      ; 0562
		  0000V  CF	       00  FB 00041 	    CALLS   #0, PMS_END_SUB					      ; 0563
	   51 	  0000G  CF	       20  C1 00046 1$:     ADDL3   #32, IO_PACKET, R1					      ; 0573
				       50  D4 0004C 	    CLRL    I							      ; 0572
		         52 	  D2 AF40  9A 0004E 2$:     MOVZBL  FUNCTAB[I], R2					      ; 0573
	   61 	         06 	       00  ED 00053 	    CMPZV   #0, #6, (R1), R2					      ;
				       52     00057									      ;
				       07  13 00058 	    BEQL    3$							      ;
	   F0 	         50 	       05  F3 0005A 	    AOBLEQ  #5, I, 2$						      ; 0572
		         50 	       01  CE 0005E 	    MNEGL   #1, J						      ; 0571
	      FFFFFFFF   8F	       50  D1 00061 3$:     CMPL    J, #-1						      ; 0577
				       5C  13 00068 	    BEQL    7$							      ;
		         52 00000000G  9F  D0 0006A 	    MOVL    @#CTL$GL_PHD, PROCESS_HEADER			      ; 0586
		         51 	       61  3C 00071 	    MOVZWL  (R1), FUNCTION					      ; 0587
				  D8 A340  D6 00074 	    INCL    PMS$GL_COUNT[J]					      ; 0589
	   03 	         51 	       06  E1 00078 	    BBC     #6, FUNCTION, 4$					      ; 0590
				     6340  D6 0007C 	    INCL    PMS$GL_MCNT[J]					      ; 0591
	   03 	         51 	       07  E1 0007F 4$:     BBC     #7, FUNCTION, 5$					      ; 0592
				     6340  D6 00083 	    INCL    PMS$GL_MCNT[J]					      ; 0593
	   03 	         51 	       08  E1 00086 5$:     BBC     #8, FUNCTION, 6$					      ; 0594
				     6340  D6 0008A 	    INCL    PMS$GL_MCNT[J]					      ; 0595
	   51 	    E0   A4	  EC   A4  C3 0008D 6$:     SUBL3   PMS_FNC_READ, PMS_TOT_READ, D			      ; 0596
		    28 A340	       51  C0 00093 	    ADDL2   D, PMS$GL_READ[J]					      ; 0597
	   51 	    E4   A4	  F0   A4  C3 00098 	    SUBL3   PMS_FNC_WRITE, PMS_TOT_WRITE, D			      ; 0598
		    50 A340	       51  C0 0009E 	    ADDL2   D, PMS$GL_WRITE[J]					      ; 0599
	   51 	    E8   A4	  F4   A4  C3 000A3 	    SUBL3   PMS_FNC_CACHE, PMS_TOT_CACHE, D			      ; 0600
		    78 A340	       51  C0 000A9 	    ADDL2   D, PMS$GL_CACHE[J]					      ; 0601
	   51 	    3C   A2	  F8   A4  C3 000AE 	    SUBL3   PMS_FNC_CPU, 60(PROCESS_HEADER), D			      ; 0602
		  00A0 C340	       51  C0 000B4 	    ADDL2   D, PMS$GL_CPU[J]					      ; 0603
	   51 	    4C   A2	  FC   A4  C3 000BA 	    SUBL3   PMS_FNC_PFA, 76(PROCESS_HEADER), D			      ; 0604
		  00C8 C340	       51  C0 000C0 	    ADDL2   D, PMS$GL_PFA[J]					      ; 0605
					   04 000C6 7$:     RET     							      ; 0499

; Routine Size:  155 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 23:01:40	DBB3:[F11A.SRC]PMS.B32;7					Page 5
;
;	0608	GLOBAL ROUTINE PMS_START_SUB (INDEX) : NOVALUE =
;	0609	
;	0610	!++
;	0611	!
;	0612	! FUNCTIONAL DESCRIPTION:
;	0613	!
;	0614	!	This routine starts metering for the indicated subfunction.
;	0615	!
;	0616	!
;	0617	! CALLING SEQUENCE:
;	0618	!	PMS_START_SUB (ARG1)
;	0619	!
;	0620	! INPUT PARAMETERS:
;	0621	!	ARG1: index of measurement array to use
;	0622	!
;	0623	! IMPLICIT INPUTS:
;	0624	!	NONE
;	0625	!
;	0626	! OUTPUT PARAMETERS:
;	0627	!	NONE
;	0628	!
;	0629	! IMPLICIT OUTPUTS:
;	0630	!	NONE
;	0631	!
;	0632	! ROUTINE VALUE:
;	0633	!	NONE
;	0634	!
;	0635	! SIDE EFFECTS:
;	0636	!	NONE
;	0637	!
;	0638	!--
;	0639	
;	0640	BEGIN
;	0641	
;	0642	LOCAL
;	0643		PROCESS_HEADER	: REF BBLOCK;	! pointer to FCP process header
;	0644	
;	0645	EXTERNAL
;	0646		CTL$GL_PHD	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE);
;	0647						! address of process header in control region
;	0648	
;	0649	! We copy the current running totals into subfunction holding cells to
;	0650	! compute the deltas later. Note that since the extend subfunction can be
;	0651	! reentered, we do nothing if the depth count is already non-zero.
;	0652	!
;	0653	
;	0654	PMS_SUB_NEST = .PMS_SUB_NEST + 1;
;	0655	IF .PMS_SUB_NEST NEQ 1 THEN RETURN;
;	0656	PROCESS_HEADER = .CTL$GL_PHD;
;	0657	
;	0658	PMS_SUB_FUNC = .INDEX;
;	0659	PMS_SUB_READ = .PMS_TOT_READ;
;	0660	PMS_SUB_WRITE = .PMS_TOT_WRITE;
;	0661	PMS_SUB_CACHE = .PMS_TOT_CACHE;
;	0662	PMS_SUB_CPU = .PROCESS_HEADER[PHD$L_CPUTIM];

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:01:40	DBB3:[F11A.SRC]PMS.B32;7					Page 5-1
;
;	0663	PMS_SUB_PFA = .PROCESS_HEADER[PHD$L_PAGEFLTS];
;	0664	
;	0665	END;					! end of routine PMS_START_SUB





					 0004 000C7 	    .ENTRY  PMS_START_SUB, Save R2				      ; 0608
		         52 	0000'  CF  9E 000C9 	    MOVAB   PMS_SUB_NEST, R2					      ;
				       62  D6 000CE 	    INCL    PMS_SUB_NEST					      ; 0654
		         01 	       62  D1 000D0 	    CMPL    PMS_SUB_NEST, #1					      ; 0655
				       20  12 000D3 	    BNEQ    1$							      ;
		         50 00000000G  9F  D0 000D5 	    MOVL    @#CTL$GL_PHD, PROCESS_HEADER			      ; 0656
		    04   A2	  04   AC  D0 000DC 	    MOVL    INDEX, PMS_SUB_FUNC					      ; 0658
		    08   A2	  E0   A2  7D 000E1 	    MOVQ    PMS_TOT_READ, PMS_SUB_READ				      ; 0659
		    10   A2	  E8   A2  D0 000E6 	    MOVL    PMS_TOT_CACHE, PMS_SUB_CACHE			      ; 0661
		    14   A2	  3C   A0  D0 000EB 	    MOVL    60(PROCESS_HEADER), PMS_SUB_CPU			      ; 0662
		    18   A2	  4C   A0  D0 000F0 	    MOVL    76(PROCESS_HEADER), PMS_SUB_PFA			      ; 0663
					   04 000F5 1$:     RET     							      ; 0608

; Routine Size:  47 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 23:01:40	DBB3:[F11A.SRC]PMS.B32;7					Page 6
;
;	0666	GLOBAL ROUTINE PMS_END_SUB : NOVALUE =
;	0667	
;	0668	!++
;	0669	!
;	0670	! FUNCTIONAL DESCRIPTION:
;	0671	!
;	0672	!	This routine ends metering for the currently active subfunction.
;	0673	!
;	0674	!
;	0675	! CALLING SEQUENCE:
;	0676	!	PMS_END_SUB ()
;	0677	!
;	0678	! INPUT PARAMETERS:
;	0679	!	NONE
;	0680	!
;	0681	! IMPLICIT INPUTS:
;	0682	!	NONE
;	0683	!
;	0684	! OUTPUT PARAMETERS:
;	0685	!	NONE
;	0686	!
;	0687	! IMPLICIT OUTPUTS:
;	0688	!	NONE
;	0689	!
;	0690	! ROUTINE VALUE:
;	0691	!	NONE
;	0692	!
;	0693	! SIDE EFFECTS:
;	0694	!	measurement data base updated
;	0695	!
;	0696	!--
;	0697	
;	0698	BEGIN
;	0699	
;	0700	LOCAL
;	0701		J,				! array index
;	0702		D,				! parameter difference
;	0703		PROCESS_HEADER	: REF BBLOCK;	! pointer to FCP process header
;	0704	
;	0705	EXTERNAL
;	0706		CTL$GL_PHD	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE);
;	0707						! address of process header in control region
;	0708	
;	0709	! Decrement the nesting count. If non-zero, we are in a nested extend and
;	0710	! do nothing.
;	0711	!
;	0712	
;	0713	PMS_SUB_NEST = .PMS_SUB_NEST - 1;
;	0714	IF .PMS_SUB_NEST NEQ 0 THEN RETURN;
;	0715	
;	0716	! Now compute the delta for each parameter by subtracting the base from the
;	0717	! running total. Record it by adding into the system array. Also deduct
;	0718	! the delta from the charge for the main function by adding it into the
;	0719	! main function base.
;	0720	!

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:01:40	DBB3:[F11A.SRC]PMS.B32;7					Page 6-1
;
;	0721	
;	0722	PROCESS_HEADER = .CTL$GL_PHD;
;	0723	J = .PMS_SUB_FUNC;			! get array index
;	0724	
;	0725	PMS$GL_COUNT[.J] = .PMS$GL_COUNT[.J] + 1;
;	0726	
;	0727	D = .PMS_TOT_READ - .PMS_SUB_READ;
;	0728	PMS$GL_READ[.J] = .PMS$GL_READ[.J] + .D;
;	0729	PMS_FNC_READ = .PMS_FNC_READ + .D;
;	0730	
;	0731	D = .PMS_TOT_WRITE - .PMS_SUB_WRITE;
;	0732	PMS$GL_WRITE[.J] = .PMS$GL_WRITE[.J] + .D;
;	0733	PMS_FNC_WRITE = .PMS_FNC_WRITE + .D;
;	0734	
;	0735	D = .PMS_TOT_CACHE - .PMS_SUB_CACHE;
;	0736	PMS$GL_CACHE[.J] = .PMS$GL_CACHE[.J] + .D;
;	0737	PMS_FNC_CACHE = .PMS_FNC_CACHE + .D;
;	0738	
;	0739	D = .PROCESS_HEADER[PHD$L_CPUTIM] - .PMS_SUB_CPU;
;	0740	PMS$GL_CPU[.J] = .PMS$GL_CPU[.J] + .D;
;	0741	PMS_FNC_CPU = .PMS_FNC_CPU + .D;
;	0742	
;	0743	D = .PROCESS_HEADER[PHD$L_PAGEFLTS] - .PMS_SUB_PFA;
;	0744	PMS$GL_PFA[.J] = .PMS$GL_PFA[.J] + .D;
;	0745	PMS_FNC_PFA = .PMS_FNC_PFA + .D;
;	0746	
;	0747	END;					! end of routine PMS_END_SUB





					 001C 000F6 	    .ENTRY  PMS_END_SUB, Save R2,R3,R4				      ; 0666
		         54 00000000G  9F  9E 000F8 	    MOVAB   @#PMS$GL_COUNT, R4					      ;
		         53 	0000'  CF  9E 000FF 	    MOVAB   PMS_SUB_NEST, R3					      ;
				       63  D7 00104 	    DECL    PMS_SUB_NEST					      ; 0713
				       5C  12 00106 	    BNEQ    1$							      ; 0714
		         52 00000000G  9F  D0 00108 	    MOVL    @#CTL$GL_PHD, PROCESS_HEADER			      ; 0722
		         50 	  04   A3  D0 0010F 	    MOVL    PMS_SUB_FUNC, J					      ; 0723
				     6440  D6 00113 	    INCL    PMS$GL_COUNT[J]					      ; 0725
	   51 	    E0   A3	  08   A3  C3 00116 	    SUBL3   PMS_SUB_READ, PMS_TOT_READ, D			      ; 0727
		    50 A440	       51  C0 0011C 	    ADDL2   D, PMS$GL_READ[J]					      ; 0728
		    EC   A3	       51  C0 00121 	    ADDL2   D, PMS_FNC_READ					      ; 0729
	   51 	    E4   A3	  0C   A3  C3 00125 	    SUBL3   PMS_SUB_WRITE, PMS_TOT_WRITE, D			      ; 0731
		    78 A440	       51  C0 0012B 	    ADDL2   D, PMS$GL_WRITE[J]					      ; 0732
		    F0   A3	       51  C0 00130 	    ADDL2   D, PMS_FNC_WRITE					      ; 0733
	   51 	    E8   A3	  10   A3  C3 00134 	    SUBL3   PMS_SUB_CACHE, PMS_TOT_CACHE, D			      ; 0735
		  00A0 C440	       51  C0 0013A 	    ADDL2   D, PMS$GL_CACHE[J]					      ; 0736
		    F4   A3	       51  C0 00140 	    ADDL2   D, PMS_FNC_CACHE					      ; 0737
	   51 	    3C   A2	  14   A3  C3 00144 	    SUBL3   PMS_SUB_CPU, 60(PROCESS_HEADER), D			      ; 0739
		  00C8 C440	       51  C0 0014A 	    ADDL2   D, PMS$GL_CPU[J]					      ; 0740
		    F8   A3	       51  C0 00150 	    ADDL2   D, PMS_FNC_CPU					      ; 0741
	   51 	    4C   A2	  18   A3  C3 00154 	    SUBL3   PMS_SUB_PFA, 76(PROCESS_HEADER), D			      ; 0743
		  00F0 C440	       51  C0 0015A 	    ADDL2   D, PMS$GL_PFA[J]					      ; 0744
		    FC   A3	       51  C0 00160 	    ADDL2   D, PMS_FNC_PFA					      ; 0745

; Bliss-32 10.1-416	Monday 21-AUG-1978 23:01:40	DBB3:[F11A.SRC]PMS.B32;7					Page 6-2
;
					   04 00164 1$:     RET     							      ; 0666

; Routine Size:  111 bytes


;	0748	
;	0749	END
;	0750	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $LOCKEDD1$     	    60    WRT,  RD ,NOEXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $CODE$         	   357  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        14         0       226





; Size:		347 code + 70 data bytes
; Run Time:	00:11.0
; Elapsed Time:	00:23.5
; Memory Used:	300 pages
; Compilation Complete
