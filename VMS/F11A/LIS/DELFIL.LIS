
; Bliss-32 10.1-416	Monday 21-AUG-1978 22:53:46	DBB3:[F11A.SRC]DELFIL.B32;7					Page 1
;
;	0001	MODULE DELFIL (
;	0002			LANGUAGE (BLISS32),
;	0003			IDENT = 'A0010'
;	0004			) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1977
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	!
;	0028	! FACILITY:  F11ACP Structure Level 1
;	0029	!
;	0030	! ABSTRACT:
;	0031	!
;	0032	!	This module deletes a file, returning its blocks to the storage map
;	0033	!	and releasing the file header.
;	0034	!
;	0035	! ENVIRONMENT:
;	0036	!
;	0037	!	STARLET operating system, including privileged system services
;	0038	!	and internal exec routines.
;	0039	!
;	0040	!--
;	0041	!
;	0042	!
;	0043	! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  4-Apr-1977  15:50
;	0044	!
;	0045	! REVISION HISTORY:
;	0046	!
;	0047	!   Andrew C. Goldstein, 6-Apr-1977  13:17
;	0048	!   X0002 - Remove logic to delete file header on deletion failure
;	0049	!
;	0050	!   Andrew C. Goldstein, 12-Apr-1977  15:27
;	0051	!   X0003 - Modify for buffer manager
;	0052	!
;	0053	!   Andrew C. Goldstein, 11-May-1977  13:21
;	0054	!   X0004 - Flush file from buffer pool if directory
;	0055	!

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:53:46	DBB3:[F11A.SRC]DELFIL.B32;7					Page 1-1
;
;	0056	!   Andrew C. Goldstein, 18-May-1977  14:52
;	0057	!   X0005 - Clean out global file header address
;	0058	!
;	0059	!   Andrew C. Goldstein, 14-Jul-1977  15:40
;	0060	!   X0006 - New file header checksum logic
;	0061	!
;	0062	!   Andrew C. Goldstein, 2-Aug-1977  14:14
;	0063	!   X0007 - Add multi-header support
;	0064	!
;	0065	!   Andrew C. Goldstein, 3-Oct-1977  9:26
;	0066	!   X0008 - Move UPDATE_IBVBN call to kernel mode
;	0067	!
;	0068	!   Andrew C. Goldstein, 12-Dec-1977  13:30
;	0069	!   X0009 - file ID interface changes
;	0070	!
;	0071	!   Andrew C. Goldstein, 17-Feb-1978  14:10
;	0072	!   X0010 - Use new bug check
;	0073	!
;	0074	!**
;	0075	
;	0076	
;	0077	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0078	REQUIRE 'SRC$:FCPDEF.B32';
;	0397	
;	0398	
;	0399	FORWARD ROUTINE
;	0400		DELETE_FILE	: NOVALUE,	! complete file deletion
;	0401		DELETE_FID	: NOVALUE;	! just release file header

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:53:46	DBB3:[F11A.SRC]DELFIL.B32;7					Page 2
;
;	0402	GLOBAL ROUTINE DELETE_FILE (FIB, FILEHEADER) : NOVALUE =
;	0403	
;	0404	!++
;	0405	!
;	0406	! FUNCTIONAL DESCRIPTION:
;	0407	!
;	0408	!	This routine deletes a file by releasing its blocks to the storage
;	0409	!	bitmap and then releasing the header.
;	0410	!
;	0411	! CALLING SEQUENCE:
;	0412	!	DELETE_FILE (ARG1, ARG2)
;	0413	!
;	0414	! INPUT PARAMETERS:
;	0415	!	ARG1: FIB of operation
;	0416	!	ARG2: address of file header buffer
;	0417	!
;	0418	! IMPLICIT INPUTS:
;	0419	!	NONE
;	0420	!
;	0421	! OUTPUT PARAMETERS:
;	0422	!	NONE
;	0423	!
;	0424	! IMPLICIT OUTPUTS:
;	0425	!	NONE
;	0426	!
;	0427	! ROUTINE VALUE:
;	0428	!	NONE
;	0429	!
;	0430	! SIDE EFFECTS:
;	0431	!	File deleted, storage map and index file bitmap modified, VCB modified
;	0432	!
;	0433	!--
;	0434	
;	0435	BEGIN
;	0436	
;	0437	MAP
;	0438		FIB		: REF BBLOCK,	! address of user FIB
;	0439		FILEHEADER	: REF BBLOCK;	! address of file header
;	0440	
;	0441	LOCAL
;	0442		HEADER		: REF BBLOCK,	! local address of file header
;	0443		FILE_NUMBER,			! file number of header being deleted
;	0444		MAP_AREA	: REF BBLOCK,	! address of file header map area
;	0445		EXT_FID		: BBLOCK [FID$C_LENGTH], ! extension file ID
;	0446		EX_SEGNUM;			! header extension segment number
;	0447	
;	0448	EXTERNAL
;	0449		CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
;	0450		FILE_HEADER	: REF BBLOCK;	! global file header address
;	0451	
;	0452	EXTERNAL ROUTINE
;	0453		FLUSH_FID,			! flush file from buffer pool
;	0454		WRITE_BLOCK,			! write block to disk
;	0455		INVALIDATE,			! invalidate block buffer
;	0456		TRUNCATE_HEADER,		! truncate file header

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:53:46	DBB3:[F11A.SRC]DELFIL.B32;7					Page 2-1
;
;	0457		NEXT_HEADER;			! read next file extension header
;	0458	
;	0459	
;	0460	! If the file looks like a directory file flush it from the buffer pool
;	0461	! to avoid retaining stale directory data.
;	0462	!
;	0463	
;	0464	
;	0465	HEADER = .FILEHEADER;
;	0466	IF .BBLOCK [HEADER[FH1$W_RECATTR], FAT$B_RTYPE] EQL FAT$C_FIXED
;	0467	AND .BBLOCK [HEADER[FH1$W_RECATTR], FAT$W_RSIZE] EQL NMB$C_DIRENTRY
;	0468	THEN FLUSH_FID (HEADER[FH1$W_FID]);
;	0469	
;	0470	! Loop for all headers, releasing the blocks mapped and the headers.
;	0471	! First write out the deleted file header. Thus, if the system bombs during
;	0472	! the delete, we will not have a valid header on the disk mapping blocks
;	0473	! that may have been returned to the storage map.
;	0474	!
;	0475	
;	0476	WHILE 1 DO
;	0477	    BEGIN
;	0478	    FILE_NUMBER = .HEADER[FH1$W_FID_NUM];
;	0479	    HEADER[FH1$W_FID_NUM] = 0;		! deleted header has zero file number
;	0480	    HEADER[FH1$W_CHECKSUM] = 0;		! and zero checksum
;	0481	    FILE_HEADER = 0;
;	0482	    WRITE_BLOCK (.HEADER);
;	0483	    INVALIDATE (.HEADER);
;	0484	
;	0485	! Now return the blocks mapped by the header to the storage map.
;	0486	! Then extract the extension header data.
;	0487	!
;	0488	
;	0489	    TRUNCATE_HEADER (.FIB, .HEADER, DEALLOC_BLOCKS);
;	0490	
;	0491	    MAP_AREA = .HEADER + .HEADER[FH1$B_MPOFFSET]*2;
;	0492	    EX_SEGNUM = .MAP_AREA[FM1$B_EX_SEGNUM] + 1;
;	0493	    EXT_FID[FID$W_NUM] = .MAP_AREA[FM1$W_EX_FILNUM];
;	0494	    EXT_FID[FID$W_SEQ] = .MAP_AREA[FM1$W_EX_FILSEQ];
;	0495	    EXT_FID[FID$W_RVN] = 0;
;	0496	
;	0497	! Now free the header in the index file bitmap. Then chain to the next header,
;	0498	! if any, and repeat.
;	0499	!
;	0500	
;	0501	    DELETE_FID (.FILE_NUMBER);
;	0502	
;	0503	    IF .EXT_FID[FID$W_NUM] EQL 0 THEN EXITLOOP;
;	0504	    HEADER = NEXT_HEADER (0, 0, EXT_FID, .EX_SEGNUM);
;	0505	    END;
;	0506	
;	0507	END;					! end of routine DELETE_FILE


							    .TITLE  DELFIL
							    .IDENT  \A0010\

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:53:46	DBB3:[F11A.SRC]DELFIL.B32;7					Page 2-2
;

							    .EXTRN  CLEANUP_FLAGS, FILE_HEADER, FLUSH_FID, WRITE_BLOCK
							    .EXTRN  INVALIDATE, TRUNCATE_HEADER, NEXT_HEADER

							    .PSECT  $CODE$,NOWRT,2

					 003C 00000 	    .ENTRY  DELETE_FILE, Save R2,R3,R4,R5			      ; 0402
		         5E 	       08  C2 00002 	    SUBL2   #8, SP						      ;
		         52 	  08   AC  D0 00005 	    MOVL    FILEHEADER, HEADER					      ; 0465
		         50 	  0E   A2  9E 00009 	    MOVAB   14(HEADER), R0					      ; 0466
		         01 	       60  91 0000D 	    CMPB    (R0), #1						      ;
				       0E  12 00010 	    BNEQ    1$							      ;
		         10 	  02   A0  B1 00012 	    CMPW    2(R0), #16						      ; 0467
				       08  12 00016 	    BNEQ    1$							      ;
				  02   A2  9F 00018 	    PUSHAB  2(HEADER)						      ; 0468
		  0000G  CF	       01  FB 0001B 	    CALLS   #1, FLUSH_FID					      ;
		         54 	  02   A2  3C 00020 1$:     MOVZWL  2(HEADER), FILE_NUMBER				      ; 0478
				  02   A2  B4 00024 	    CLRW    2(HEADER)						      ; 0479
				01FE   C2  B4 00027 	    CLRW    510(HEADER)						      ; 0480
				0000G  CF  D4 0002B 	    CLRL    FILE_HEADER						      ; 0481
				       52  DD 0002F 	    PUSHL   HEADER						      ; 0482
		  0000G  CF	       01  FB 00031 	    CALLS   #1, WRITE_BLOCK					      ;
				       52  DD 00036 	    PUSHL   HEADER						      ; 0483
		  0000G  CF	       01  FB 00038 	    CALLS   #1, INVALIDATE					      ;
				       01  DD 0003D 	    PUSHL   #1							      ; 0489
				       52  DD 0003F 	    PUSHL   HEADER						      ;
				  04   AC  DD 00041 	    PUSHL   FIB							      ;
		  0000G  CF	       03  FB 00044 	    CALLS   #3, TRUNCATE_HEADER					      ;
		         50 	  01   A2  9A 00049 	    MOVZBL  1(HEADER), R0					      ; 0491
		         53 	     6240  3E 0004D 	    MOVAW   (HEADER)[R0], MAP_AREA				      ;
		         55 	       63  9A 00051 	    MOVZBL  (MAP_AREA), EX_SEGNUM				      ; 0492
				       55  D6 00054 	    INCL    EX_SEGNUM						      ;
		         6E 	  02   A3  D0 00056 	    MOVL    2(MAP_AREA), EXT_FID				      ; 0493
				  04   AE  B4 0005A 	    CLRW    EXT_FID+4						      ; 0495
				       54  DD 0005D 	    PUSHL   FILE_NUMBER						      ; 0501
		  0000V  CF	       01  FB 0005F 	    CALLS   #1, DELETE_FID					      ;
				       6E  B5 00064 	    TSTW    EXT_FID						      ; 0503
				       11  13 00066 	    BEQL    2$							      ;
				       55  DD 00068 	    PUSHL   EX_SEGNUM						      ; 0504
				  04   AE  9F 0006A 	    PUSHAB  EXT_FID						      ;
				       7E  7C 0006D 	    CLRQ    -(SP)						      ;
		  0000G  CF	       04  FB 0006F 	    CALLS   #4, NEXT_HEADER					      ;
		         52 	       50  D0 00074 	    MOVL    R0, HEADER						      ;
				       A7  11 00077 	    BRB     1$							      ; 0476
					   04 00079 2$:     RET     							      ; 0402

; Routine Size:  122 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 22:53:46	DBB3:[F11A.SRC]DELFIL.B32;7					Page 3
;
;	0508	GLOBAL ROUTINE DELETE_FID (FILENUM) : NOVALUE =
;	0509	
;	0510	!++
;	0511	!
;	0512	! FUNCTIONAL DESCRIPTION:
;	0513	!
;	0514	!	This routine marks the indicated file header free in the index
;	0515	!	file bitmap.
;	0516	!
;	0517	! CALLING SEQUENCE:
;	0518	!	DELETE_HEADER (ARG1)
;	0519	!
;	0520	! INPUT PARAMETERS:
;	0521	!	ARG1: file number of header
;	0522	!
;	0523	! IMPLICIT INPUTS:
;	0524	!	CURRENT_VCB: VCB of volume
;	0525	!
;	0526	! OUTPUT PARAMETERS:
;	0527	!	NONE
;	0528	!
;	0529	! IMPLICIT OUTPUTS:
;	0530	!	NONE
;	0531	!
;	0532	! ROUTINE VALUE:
;	0533	!	NONE
;	0534	!
;	0535	! SIDE EFFECTS:
;	0536	!	Header deleted - index file bitmap & VCB altered
;	0537	!
;	0538	!--
;	0539	
;	0540	BEGIN
;	0541	
;	0542	LOCAL
;	0543		FILE_NUMBER,			! file number - 1 of header
;	0544		VBN,				! relative block in bitmap
;	0545		BITPOS,				! bit number in bitmap
;	0546		BUFFER		: REF BITVECTOR; ! bitmap buffer
;	0547	
;	0548	EXTERNAL
;	0549		CURRENT_VCB	: REF BBLOCK;	! VCB of operation
;	0550	
;	0551	EXTERNAL ROUTINE
;	0552		READ_BLOCK,			! read a block from the disk
;	0553		WRITE_BLOCK,			! write it back
;	0554		UPDATE_IBVBN;			! update index file VBN in VCB
;	0555	
;	0556	
;	0557	! Deleting a file header consists of simply reading in the appropriate block
;	0558	! of the index file bitmap, zeroing the bit representing that file number,
;	0559	! and writing the block back out.
;	0560	!
;	0561	
;	0562	FILE_NUMBER = .FILENUM - 1;

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:53:46	DBB3:[F11A.SRC]DELFIL.B32;7					Page 3-1
;
;	0563	VBN = .FILE_NUMBER<12,20>;
;	0564	BITPOS = .FILE_NUMBER<0,12>;
;	0565	
;	0566	IF .VBN GEQU .CURRENT_VCB[VCB$B_IBMAPSIZE]
;	0567	THEN BUG_CHECK (BADFID, FATAL, 'ACP file number out of range for this volume');
;	0568	
;	0569	BUFFER = READ_BLOCK (.VBN + .CURRENT_VCB[VCB$L_IBMAPLBN], 1, INDEX_TYPE);
;	0570	BUFFER[.BITPOS] = 0;
;	0571	WRITE_BLOCK (.BUFFER);
;	0572	
;	0573	! If the bitmap block just written precedes the current start point for
;	0574	! the bitmap scan, update the start point.
;	0575	!
;	0576	
;	0577	IF .VBN LSSU .CURRENT_VCB[VCB$B_IBMAPVBN]
;	0578	THEN KERNEL_CALL (UPDATE_IBVBN, .VBN);
;	0579	
;	0580	END;					! end of routine DELETE_HEADER



							    .PSECT  $LOCKEDC2$,NOWRT,2

				  FEFF  0000  00000 P.AAA:  .WORD   0, -257						      ;
					0000* 00004 	    .WORD   <BUG$_BADFID!4>					      ;
					      00006	    .BLKB   2

							    .EXTRN  CURRENT_VCB, READ_BLOCK, UPDATE_IBVBN, BUG$_BADFID
							    .EXTRN  SYS$CMKRNL

							    .PSECT  $CODE$,NOWRT,2

					 001C 0007A 	    .ENTRY  DELETE_FID, Save R2,R3,R4				      ; 0508
		         54 	0000G  CF  9E 0007C 	    MOVAB   CURRENT_VCB, R4					      ;
	   50 	    04   AC	       01  C3 00081 	    SUBL3   #1, FILENUM, FILE_NUMBER				      ; 0562
	   50 	         14 	       0C  EF 00086 	    EXTZV   #12, #20, FILE_NUMBER, VBN				      ; 0563
				       52     0008A									      ;
	   50 	         0C 	       00  EF 0008B 	    EXTZV   #0, #12, FILE_NUMBER, BITPOS			      ; 0564
				       53     0008F									      ;
		         50 	       64  D0 00090 	    MOVL    CURRENT_VCB, R0					      ; 0566
      38   A0	         08 	       00  ED 00093 	    CMPZV   #0, #8, 56(R0), VBN					      ;
				       52     00098									      ;
				       05  1A 00099 	    BGTRU   1$							      ;
		  0000'  CF	       00  FB 0009B 	    CALLS   #0, P.AAA						      ; 0567
				       03  DD 000A0 1$:     PUSHL   #3							      ; 0569
				       01  DD 000A2 	    PUSHL   #1							      ;
		         50 	       64  D0 000A4 	    MOVL    CURRENT_VCB, R0					      ;
				  30 B042  9F 000A7 	    PUSHAB  @48(R0)[VBN]					      ;
		  0000G  CF	       03  FB 000AB 	    CALLS   #3, READ_BLOCK					      ;
	   00 	         60 	       53  E5 000B0 	    BBCC    BITPOS, (BUFFER), 2$				      ; 0570
				       50  DD 000B4 2$:     PUSHL   BUFFER						      ; 0571
		  0000G  CF	       01  FB 000B6 	    CALLS   #1, WRITE_BLOCK					      ;
		         50 	       64  D0 000BB 	    MOVL    CURRENT_VCB, R0					      ; 0577
      3A   A0	         08 	       00  ED 000BE 	    CMPZV   #0, #8, 58(R0), VBN					      ;
				       52     000C3									      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:53:46	DBB3:[F11A.SRC]DELFIL.B32;7					Page 3-2
;
				       11  1B 000C4 	    BLEQU   3$							      ;
				       52  DD 000C6 	    PUSHL   VBN							      ; 0578
				       01  DD 000C8 	    PUSHL   #1							      ;
				       5E  DD 000CA 	    PUSHL   SP							      ;
				0000G  CF  9F 000CC 	    PUSHAB  UPDATE_IBVBN					      ;
	      00000000G  9F	       04  FB 000D0 	    CALLS   #4, @#SYS$CMKRNL					      ;
					   04 000D7 3$:     RET     							      ; 0508

; Routine Size:  94 bytes


;	0581	
;	0582	END
;	0583	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $CODE$         	   216  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)
;  $LOCKEDC2$     	     8  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        20         0       239





; Size:		216 code + 8 data bytes
; Run Time:	00:06.8
; Elapsed Time:	00:15.1
; Memory Used:	281 pages
; Compilation Complete
