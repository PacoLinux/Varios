
; Bliss-32 10.1-416	Monday 21-AUG-1978 22:48:42	DBB3:[F11A.SRC]ACCESS.B32;14					Page 1
;
;	0001	MODULE ACCESS (
;	0002			LANGUAGE (BLISS32),
;	0003			IDENT = 'A0022'
;	0004			) =
;	0005	BEGIN
;	0006	
;	0007	!
;	0008	! Copyright (c) 1977
;	0009	! Digital Equipment Corporation, Maynard, Massachusetts 01754
;	0010	!
;	0011	! This software is furnished  under a license for use only on a single
;	0012	! computer  system and  may be  copied only with  the inclusion of the
;	0013	! above copyright notice.  This software, or any other copies thereof,
;	0014	! may not be provided or  otherwise made available to any other person
;	0015	! except for use on such system and to one who agrees to these license
;	0016	! terms.  Title to and  ownership of the  software  shall at all times
;	0017	! remain in DEC.
;	0018	!
;	0019	! The information in this software is subject to change without notice
;	0020	! and should  not be construed  as a commitment  by Digital  Equipment
;	0021	! Corporation.
;	0022	!
;	0023	! DEC assumes  no  responsibility  for  the use or  reliability of its
;	0024	! software on equipment which is not supplied by DEC.
;	0025	
;	0026	!++
;	0027	!
;	0028	! FACILITY:  F11ACP Structure Level 1
;	0029	!
;	0030	! ABSTRACT:
;	0031	!
;	0032	!	This is the main processing routine for the ACCESS function.
;	0033	!
;	0034	! ENVIRONMENT:
;	0035	!
;	0036	!	STARLET operating system, including privileged system services
;	0037	!	and internal exec routines.
;	0038	!
;	0039	!--
;	0040	!
;	0041	!
;	0042	! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  20-Dec-1976  15:43
;	0043	!
;	0044	! REVISION HISTORY:
;	0045	!
;	0046	!   Andrew C. Goldstein, 16-Feb-1977  14:48
;	0047	!   X0002 - Modify for condition handling
;	0048	!
;	0049	!   Andrew C. Goldstein, 23-Mar-1977  14:46
;	0050	!   X0003 - Key directory search off DID; reject extend control parameters.
;	0051	!
;	0052	!   Andrew C. Goldstein, 1-Apr-1977  13:38
;	0053	!   X0004 - Change call to FIND
;	0054	!
;	0055	!   Andrew C. Goldstein, 1-Apr-1977  16:57

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:48:42	DBB3:[F11A.SRC]ACCESS.B32;14					Page 1-1
;
;	0056	!   X0005 - Move GET_FIB out of kernel mode
;	0057	!
;	0058	!   Andrew C. Goldstein, 20-Apr-1977  13:38
;	0059	!   X0006 - Add buffer pool interlock
;	0060	!
;	0061	!   Andrew C. Goldstein, 3-May-1977  14:58
;	0062	!   X0007 - Add file protection check
;	0063	!
;	0064	!   Andrew C. Goldstein, 9-May-1977  15:53
;	0065	!   X0008 - Remove check on extend control
;	0066	!
;	0067	!   Andrew C. Goldstein, 23-Jun-1977  11:18
;	0068	!   X0009 - Set CLF_DELWINDOW bit
;	0069	!
;	0070	!   Andrew C. Goldstein, 22-Jul-1977  16:41
;	0071	!   X0010 - Add multi-header support
;	0072	!
;	0073	!   Andrew C. Goldstein, 9-Aug-1977  10:52
;	0074	!   X0011 - Add create subfunction
;	0075	!
;	0076	!   Andrew C. Goldstein, 26-Sep-1977  14:04
;	0077	!   X0012 - Allow multiple writers; add FID check after directory lookup.
;	0078	!
;	0079	!   Andrew C. Goldstein, 2-Nov-1977  13:24
;	0080	!   X0013 - Check window size parameter
;	0081	!
;	0082	!   Andrew C. Goldstein, 12-Nov-1977  13:45
;	0083	!   X0014 - Do final fixup on FCB of multi-header file
;	0084	!
;	0085	!   Andrew C. Goldstein, 12-Dec-1977  13:01
;	0086	!   X0015 - file ID interface changes
;	0087	!
;	0088	!   Andrew C. Goldstein, 6-Jan-1978  21:57
;	0089	!   X0016 - Compute size of multi-header file only on first access
;	0090	!
;	0091	!   Andrew C. Goldstein, 9-Jan-1978  11:25
;	0092	!   X0017 - Allow read attributes if file is open
;	0093	!
;	0094	!   Andrew C. Goldstein, 5-May-78  13:23
;	0095	!   A0018 - Remove window size restriction
;	0096	!
;	0097	!   Andrew C. Goldstein, 22-May-78  17:37
;	0098	!   A0019 - Require write privilege for exclusive access
;	0099	!
;	0100	!   Andrew C. Goldstein, 6-Jun-78  15:29
;	0101	!   A0020 - Allow system to access files marked for delete or close checked
;	0102	!
;	0103	!   Andrew C. Goldstein, 12-Jun-78  20:52
;	0104	!   A0021 - PCB vector name change
;	0105	!
;	0106	!   Andrew C. Goldstein, 10-Jul-78  15:44
;	0107	!   A0022 - Fix conditional create on spool devices
;	0108	!
;	0109	!**
;	0110	

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:48:42	DBB3:[F11A.SRC]ACCESS.B32;14					Page 1-2
;
;	0111	
;	0112	LIBRARY 'SYS$LIBRARY:LIB.L32';
;	0113	REQUIRE 'SRC$:FCPDEF.B32';
;	0432	
;	0433	
;	0434	FORWARD ROUTINE
;	0435		ACCESS,				! main access function processing
;	0436		CHECK_FIND,			! conditional directory search
;	0437		HANDLER;			! conditional handler to catch error exit

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:48:42	DBB3:[F11A.SRC]ACCESS.B32;14					Page 2
;
;	0438	GLOBAL ROUTINE ACCESS =
;	0439	
;	0440	!++
;	0441	!
;	0442	! FUNCTIONAL DESCRIPTION:
;	0443	!
;	0444	!	This is the main processing routine for the ACCESS function.
;	0445	!
;	0446	! CALLING SEQUENCE:
;	0447	!	ACCESS ()
;	0448	!
;	0449	! INPUT PARAMETERS:
;	0450	!	NONE
;	0451	!
;	0452	! IMPLICIT INPUTS:
;	0453	!	CURRENT_VCB: VCB of volume
;	0454	!	IO_PACKET: address of I/O request packet
;	0455	!
;	0456	! OUTPUT PARAMETERS:
;	0457	!	NONE
;	0458	!
;	0459	! IMPLICIT OUTPUTS:
;	0460	!	PRIMARY_FCB: FCB of file
;	0461	!	CURRENT_WINDOW: address of file window
;	0462	!	USER_STATUS: I/O status block to return to user
;	0463	!
;	0464	! ROUTINE VALUE:
;	0465	!	NONE
;	0466	!
;	0467	! SIDE EFFECTS:
;	0468	!	FCB & window created
;	0469	!
;	0470	!--
;	0471	
;	0472	BEGIN
;	0473	
;	0474	LOCAL
;	0475		FCB_CREATED,				! flag indicating new FCB created
;	0476		PCB		: REF BBLOCK,		! caller's PCB
;	0477		PACKET		: REF BBLOCK,		! address of I/O packet
;	0478		ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH],
;	0479							! buffer descriptors
;	0480		FIB		: REF BBLOCK,		! file identification block
;	0481		FCB		: REF BBLOCK,		! FCB address
;	0482		HEADER		: REF BBLOCK,		! address of file header
;	0483		NEW_HEADER	: REF BBLOCK,		! address of extension header
;	0484		FUNCTION	: BLOCK [1];		! function code qualifiers
;	0485	
;	0486	EXTERNAL
;	0487		USER_STATUS	: VECTOR,		! I/O status block for user
;	0488		CURRENT_VCB	: REF BBLOCK,		! VCB of volume
;	0489		PRIMARY_FCB	: REF BBLOCK,		! FCB of file
;	0490		CURRENT_WINDOW	: REF BBLOCK,		! window for file
;	0491		IO_PACKET	: REF BBLOCK,		! I/O request packet
;	0492		CLEANUP_FLAGS	: BITVECTOR,		! cleanup action flags

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:48:42	DBB3:[F11A.SRC]ACCESS.B32;14					Page 2-1
;
;	0493		SCH$GL_PCBVEC	: REF VECTOR ADDRESSING_MODE (ABSOLUTE);
;	0494							! system PCB vector
;	0495	
;	0496	EXTERNAL ROUTINE
;	0497		GET_FIB,				! get FIB for operation
;	0498		FIND,					! find file in directory
;	0499		CREATE,					! create file
;	0500		SEARCH_FCB,				! search FCB list
;	0501		READ_HEADER,				! read file header
;	0502		NEXT_HEADER,				! read extension file header
;	0503		CREATE_FCB,				! create an FCB
;	0504		CHECK_PROTECT,				! check file protection
;	0505		CREATE_WINDOW,				! create a window
;	0506		MAKE_ACCESS,				! complete the access
;	0507		MAKE_EXTFCB,				! create and link extension FCB
;	0508		FLUSH_FID,				! flush a file from the buffer pool
;	0509		UPDATE_FCB,				! update attributes in FCB
;	0510		READ_ATTRIB;				! read file attributes
;	0511	
;	0512	
;	0513	! Enable the deaccess cleanup if an access is taking place.
;	0514	!
;	0515	
;	0516	PACKET = .IO_PACKET;
;	0517	FUNCTION = .PACKET[IRP$W_FUNC];
;	0518	IF .FUNCTION[IO$V_ACCESS]
;	0519	THEN
;	0520	    BEGIN
;	0521	    CLEANUP_FLAGS[CLF_ZCHANNEL] = 1;
;	0522	    CLEANUP_FLAGS[CLF_DELWINDOW] = 1;
;	0523	    END;
;	0524	
;	0525	! Set up pointers to interesting control blocks.
;	0526	!
;	0527	
;	0528						! pointer to buffer descriptors
;	0529	ABD = .BBLOCK [.PACKET[IRP$L_SVAPTE], AIB$L_DESCRIPT];
;	0530	FIB = GET_FIB (.ABD);				! pointer to FIB
;	0531	
;	0532	! Do directory processing, if any. For a normal access, do the directory
;	0533	! lookup if a directory ID is present. If this is a conditional create, do
;	0534	! the lookup and turn the function into a create if the lookup fails
;	0535	! with a file not found. Conditional create on spool devices always become
;	0536	! creates.
;	0537	!
;	0538	
;	0539	IF .FUNCTION[IO$V_CREATE]
;	0540	THEN
;	0541	    BEGIN
;	0542	    IF .CLEANUP_FLAGS[CLF_SPOOLFILE]
;	0543	    OR (
;	0544		IF .FIB[FIB$W_DID_NUM] NEQ 0
;	0545		THEN NOT CHECK_FIND (.ABD, .FIB)
;	0546		ELSE 1
;	0547		)

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:48:42	DBB3:[F11A.SRC]ACCESS.B32;14					Page 2-2
;
;	0548	    THEN
;	0549		BEGIN
;	0550		USER_STATUS[0] = SS$_CREATED;
;	0551		RETURN CREATE ();
;	0552		END;
;	0553	    END
;	0554	
;	0555	ELSE
;	0556	    IF .FIB[FIB$W_DID_NUM] NEQ 0
;	0557	    THEN FIND (.ABD, .FIB, 0);
;	0558	
;	0559	! If there is a file open on the channel, check the file ID returned by the
;	0560	! FIND against the file ID that is open. If they are different, drop the FCB
;	0561	! and window addresses on the floor.
;	0562	!
;	0563	
;	0564	IF .PRIMARY_FCB NEQ 0
;	0565	THEN
;	0566	    IF .PRIMARY_FCB[FCB$W_FID_NUM] NEQ .FIB[FIB$W_FID_NUM]
;	0567	    OR .PRIMARY_FCB[FCB$W_FID_RVN] NEQ .FIB[FIB$W_FID_RVN]
;	0568	    THEN
;	0569		BEGIN
;	0570		PRIMARY_FCB = 0;
;	0571		CURRENT_WINDOW = 0;
;	0572		END;
;	0573	
;	0574	! If this is a find only, exit now to avoid an extraneous read of the
;	0575	! file header.
;	0576	!
;	0577	
;	0578	IF NOT .FUNCTION[IO$V_ACCESS]		! if no access
;	0579	AND .PACKET[IRP$W_BCNT] LEQ ABD$C_ATTRIB ! and no attribute list
;	0580	THEN RETURN 1;				! all done
;	0581	
;	0582	! Find the FCB of the file, if one exists. then read the file
;	0583	! header. If there is no FCB, create one.
;	0584	!
;	0585	
;	0586	FCB = SEARCH_FCB (FIB[FIB$W_FID]);
;	0587	HEADER = READ_HEADER (FIB[FIB$W_FID], .FCB);
;	0588	
;	0589	! If the file is marked for delete and is not accessed by this user, and
;	0590	! the accessor is not the system, deny its existence.
;	0591	!
;	0592	
;	0593	PCB = .SCH$GL_PCBVEC[.(PACKET[IRP$L_PID])<0,16>];
;	0594	IF .CURRENT_WINDOW EQL 0 AND .HEADER[FH1$V_MARKDEL]
;	0595	AND .PCB[PCB$W_GRP] GTRU SYSTEM_UIC
;	0596	AND NOT .PACKET[IRP$V_PRIVIO]
;	0597	THEN ERR_EXIT (SS$_NOSUCHFILE);
;	0598	
;	0599	FCB_CREATED = 0;
;	0600	IF .FCB EQL 0
;	0601	THEN
;	0602	    BEGIN

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:48:42	DBB3:[F11A.SRC]ACCESS.B32;14					Page 2-3
;
;	0603	    FCB_CREATED = 1;
;	0604	    FCB = KERNEL_CALL (CREATE_FCB, .HEADER);
;	0605	    END;
;	0606	PRIMARY_FCB = .FCB;			! record FCB for external use
;	0607	
;	0608	! If access is requested, check for conflicts and file protection.
;	0609	! then create a window and link everything up.
;	0610	!
;	0611	
;	0612	IF .FUNCTION[IO$V_ACCESS]
;	0613	THEN
;	0614	    BEGIN
;	0615	    CHECK_PROTECT (.FIB[FIB$V_WRITE] OR .FIB[FIB$V_NOREAD], .HEADER, .FCB);
;	0616	
;	0617	    IF (.HEADER[FH1$V_LOCKED])
;	0618	    AND .PCB[PCB$W_GRP] GTRU SYSTEM_UIC
;	0619	    AND NOT .PACKET[IRP$V_PRIVIO]
;	0620	    THEN ERR_EXIT (SS$_FILELOCKED);		! file is deaccess locked
;	0621	    IF (.FCB[FCB$V_EXCL])
;	0622	    OR (.FIB[FIB$V_NOREAD] AND .FCB[FCB$W_ACNT] NEQ 0)
;	0623	    OR (.FIB[FIB$V_NOWRITE] AND .FCB[FCB$W_WCNT] NEQ 0)
;	0624	    OR (.FIB[FIB$V_WRITE] AND .FCB[FCB$W_LCNT] NEQ 0)
;	0625	    THEN ERR_EXIT (SS$_ACCONFLICT);		! one of above access conflicts
;	0626	
;	0627	
;	0628	    CURRENT_WINDOW = KERNEL_CALL (CREATE_WINDOW, .FIB[FIB$L_ACCTL],
;     P 0629		.FIB[FIB$B_WSIZE], .HEADER, .PACKET[IRP$L_PID], .FCB);
;	0630	    KERNEL_CALL (MAKE_ACCESS, .FCB, .CURRENT_WINDOW, .ABD);
;	0631	
;	0632	! If the file looks like a directory file and it is being write accessed,
;	0633	! flush it from the buffer pool to avoid retaining stale directory data.
;	0634	!
;	0635	
;	0636	    IF .FIB[FIB$V_WRITE]
;	0637	    AND .BBLOCK [HEADER[FH1$W_RECATTR], FAT$B_RTYPE] EQL FAT$C_FIXED
;	0638	    AND .BBLOCK [HEADER[FH1$W_RECATTR], FAT$W_RSIZE] EQL NMB$C_DIRENTRY
;	0639	    THEN FLUSH_FID (FIB[FIB$W_FID]);
;	0640	
;	0641	    END;					! end of access processing
;	0642	
;	0643	! If the file is multi-header, read the extension headers and create
;	0644	! extension FCB's as necessary. Finally read back the primary header.
;	0645	!
;	0646	
;	0647	IF .FCB_CREATED
;	0648	THEN
;	0649	    BEGIN
;	0650	    WHILE 1 DO
;	0651		BEGIN
;	0652		NEW_HEADER = NEXT_HEADER (.HEADER, .FCB);
;	0653		IF .NEW_HEADER EQL 0 THEN EXITLOOP;
;	0654		HEADER = .NEW_HEADER;
;	0655		FCB = KERNEL_CALL (MAKE_EXTFCB, .HEADER, .FCB, .FUNCTION[IO$V_ACCESS]);
;	0656		END;
;	0657	

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:48:42	DBB3:[F11A.SRC]ACCESS.B32;14					Page 2-4
;
;	0658	    IF .FCB NEQ .PRIMARY_FCB
;	0659	    THEN
;	0660		BEGIN
;	0661		FCB = .PRIMARY_FCB;
;	0662		HEADER = READ_HEADER (0, .FCB);
;	0663		KERNEL_CALL (UPDATE_FCB, .HEADER);
;	0664		END;
;	0665	    END;
;	0666	
;	0667	! Do read attributes if requested.
;	0668	!
;	0669	
;	0670	IF .PACKET[IRP$W_BCNT] GTR ABD$C_ATTRIB
;	0671	THEN
;	0672	    BEGIN
;	0673	    IF .CURRENT_WINDOW EQL 0
;	0674	    THEN CHECK_PROTECT (RDATT_ACCESS, .HEADER, .FCB);
;	0675	    IF NOT KERNEL_CALL (READ_ATTRIB, .HEADER, .ABD) THEN ERR_EXIT ();
;	0676	    END;
;	0677	
;	0678	RETURN 1;
;	0679	
;	0680	END;						! end of routine ACCESS


							    .TITLE  ACCESS
							    .IDENT  \A0022\

							    .EXTRN  USER_STATUS, CURRENT_VCB, PRIMARY_FCB, CURRENT_WINDOW
							    .EXTRN  IO_PACKET, CLEANUP_FLAGS, SCH$GL_PCBVEC, GET_FIB
							    .EXTRN  FIND, CREATE, SEARCH_FCB, READ_HEADER, NEXT_HEADER
							    .EXTRN  CREATE_FCB, CHECK_PROTECT, CREATE_WINDOW, MAKE_ACCESS
							    .EXTRN  MAKE_EXTFCB, FLUSH_FID, UPDATE_FCB, READ_ATTRIB
							    .EXTRN  SYS$CMKRNL

							    .PSECT  $CODE$,NOWRT,2

					 0FFC 00000 	    .ENTRY  ACCESS, Save R2,R3,R4,R5,R6,R7,R8,R9,R10,R11	      ; 0438
		         5B 	0000G  CF  9E 00002 	    MOVAB   PRIMARY_FCB, R11					      ;
		         5A 00000000G  9F  9E 00007 	    MOVAB   @#SYS$CMKRNL, R10					      ;
		         54 	0000G  CF  D0 0000E 	    MOVL    IO_PACKET, PACKET					      ; 0516
		         59 	  20   A4  3C 00013 	    MOVZWL  32(PACKET), FUNCTION				      ; 0517
	   07 	         59 	       06  E1 00017 	    BBC     #6, FUNCTION, 1$					      ; 0518
		  0000G  CF	0402   8F  A8 0001B 	    BISW2   #1026, CLEANUP_FLAGS+2				      ; 0522
		         58 	  2C   B4  D0 00022 1$:     MOVL    @44(PACKET), ABD					      ; 0529
				       58  DD 00026 	    PUSHL   ABD							      ; 0530
		  0000G  CF	       01  FB 00028 	    CALLS   #1, GET_FIB						      ;
		         52 	       50  D0 0002D 	    MOVL    R0, FIB						      ;
	   24 	         59 	       07  E1 00030 	    BBC     #7, FUNCTION, 3$					      ; 0539
	   11 	  0000G  CF	       07  E0 00034 	    BBS     #7, CLEANUP_FLAGS, 2$				      ; 0542
				  0A   A2  B5 0003A 	    TSTW    10(FIB)						      ; 0544
				       0C  13 0003D 	    BEQL    2$							      ;
				       52  DD 0003F 	    PUSHL   FIB							      ; 0545
				       58  DD 00041 	    PUSHL   ABD							      ;
		  0000V  CF	       02  FB 00043 	    CALLS   #2, CHECK_FIND					      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:48:42	DBB3:[F11A.SRC]ACCESS.B32;14					Page 2-5
;
		         1D 	       50  E8 00048 	    BLBS    R0, 4$						      ;
		  0000G  CF	0619   8F  3C 0004B 2$:     MOVZWL  #1561, USER_STATUS					      ; 0550
		  0000G  CF	       00  FB 00052 	    CALLS   #0, CREATE						      ; 0551
					   04 00057 	    RET     							      ;
				  0A   A2  B5 00058 3$:     TSTW    10(FIB)						      ; 0556
				       0B  13 0005B 	    BEQL    4$							      ;
				       7E  D4 0005D 	    CLRL    -(SP)						      ; 0557
				       52  DD 0005F 	    PUSHL   FIB							      ;
				       58  DD 00061 	    PUSHL   ABD							      ;
		  0000G  CF	       03  FB 00063 	    CALLS   #3, FIND						      ;
		         50 	       6B  D0 00068 4$:     MOVL    PRIMARY_FCB, R0					      ; 0564
				       14  13 0006B 	    BEQL    6$							      ;
		    04   A2	  20   A0  B1 0006D 	    CMPW    32(R0), 4(FIB)					      ; 0566
				       07  12 00072 	    BNEQ    5$							      ;
		    08   A2	  24   A0  B1 00074 	    CMPW    36(R0), 8(FIB)					      ; 0567
				       06  13 00079 	    BEQL    6$							      ;
				       6B  D4 0007B 5$:     CLRL    PRIMARY_FCB						      ; 0570
				0000G  CF  D4 0007D 	    CLRL    CURRENT_WINDOW					      ; 0571
	   09 	         59 	       06  E0 00081 6$:     BBS     #6, FUNCTION, 7$					      ; 0578
		         05 	  32   A4  B1 00085 	    CMPW    50(PACKET), #5					      ; 0579
				       03  1A 00089 	    BGTRU   7$							      ;
				     0174  31 0008B 	    BRW     21$							      ;
				  04   A2  9F 0008E 7$:     PUSHAB  4(FIB)						      ; 0586
		  0000G  CF	       01  FB 00091 	    CALLS   #1, SEARCH_FCB					      ;
		         55 	       50  D0 00096 	    MOVL    R0, FCB						      ;
				       55  DD 00099 	    PUSHL   FCB							      ; 0587
				  04   A2  9F 0009B 	    PUSHAB  4(FIB)						      ;
		  0000G  CF	       02  FB 0009E 	    CALLS   #2, READ_HEADER					      ;
		         56 	       50  D0 000A3 	    MOVL    R0, HEADER						      ;
		         51 00000000G  9F  D0 000A6 	    MOVL    @#SCH$GL_PCBVEC, R1					      ; 0593
		         50 	  0C   A4  3C 000AD 	    MOVZWL  12(PACKET), R0					      ;
		         53 	     6140  D0 000B1 	    MOVL    (R1)[R0], PCB					      ;
				0000G  CF  D5 000B5 	    TSTL    CURRENT_WINDOW					      ; 0594
				       14  12 000B9 	    BNEQ    8$							      ;
	   0F 	    0D   A6	       07  E1 000BB 	    BBC     #7, 13(HEADER), 8$					      ;
		         08 	  22   A3  B1 000C0 	    CMPW    34(PCB), #8						      ; 0595
				       09  1B 000C4 	    BLEQU   8$							      ;
	   04 	    2B   A4	       01  E0 000C6 	    BBS     #1, 43(PACKET), 8$					      ; 0596
				0910   8F  BF 000CB 	    CHMU    #2320						      ; 0597
				       57  D4 000CF 8$:     CLRL    FCB_CREATED						      ; 0599
				       55  D5 000D1 	    TSTL    FCB							      ; 0600
				       13  12 000D3 	    BNEQ    9$							      ;
		         57 	       01  D0 000D5 	    MOVL    #1, FCB_CREATED					      ; 0603
				       56  DD 000D8 	    PUSHL   HEADER						      ; 0604
				       01  DD 000DA 	    PUSHL   #1							      ;
				       5E  DD 000DC 	    PUSHL   SP							      ;
				0000G  CF  9F 000DE 	    PUSHAB  CREATE_FCB						      ;
		         6A 	       04  FB 000E2 	    CALLS   #4, SYS$CMKRNL					      ;
		         55 	       50  D0 000E5 	    MOVL    R0, FCB						      ;
		         6B 	       55  D0 000E8 9$:     MOVL    FCB, PRIMARY_FCB					      ; 0606
	   03 	         59 	       06  E0 000EB 	    BBS     #6, FUNCTION, 10$					      ; 0612
				     0097  31 000EF 	    BRW     16$							      ;
				       55  DD 000F2 10$:    PUSHL   FCB							      ; 0615
				       56  DD 000F4 	    PUSHL   HEADER						      ;
      01   A2	         01 	       00  EF 000F6 	    EXTZV   #0, #1, 1(FIB), R0					      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:48:42	DBB3:[F11A.SRC]ACCESS.B32;14					Page 2-6
;
				       50     000FB									      ;
	   62 	         01 	       0A  EF 000FC 	    EXTZV   #10, #1, (FIB), R1					      ;
				       51     00100									      ;
	   7E 	         50 	       51  C9 00101 	    BISL3   R1, R0, -(SP)					      ;
		  0000G  CF	       03  FB 00105 	    CALLS   #3, CHECK_PROTECT					      ;
	   0F 	    0C   A6	       06  E1 0010A 	    BBC     #6, 12(HEADER), 11$					      ; 0617
		         08 	  22   A3  B1 0010F 	    CMPW    34(PCB), #8						      ; 0618
				       09  1B 00113 	    BLEQU   11$							      ;
	   04 	    2B   A4	       01  E0 00115 	    BBS     #1, 43(PACKET), 11$					      ; 0619
				08A8   8F  BF 0011A 	    CHMU    #2216						      ; 0620
	   1A 	    1E   A5	       03  E0 0011E 11$:    BBS     #3, 30(FCB), 14$					      ; 0621
	   05 	         62 	       0A  E1 00123 	    BBC     #10, (FIB), 12$					      ; 0622
				  18   A5  B5 00127 	    TSTW    24(FCB)						      ;
				       11  12 0012A 	    BNEQ    14$							      ;
		         05 	       62  E9 0012C 12$:    BLBC    (FIB), 13$						      ; 0623
				  1C   A5  B5 0012F 	    TSTW    28(FCB)						      ;
				       09  12 00132 	    BNEQ    14$							      ;
		         09 	  01   A2  E9 00134 13$:    BLBC    1(FIB), 15$						      ; 0624
				  1A   A5  B5 00138 	    TSTW    26(FCB)						      ;
				       04  13 0013B 	    BEQL    15$							      ;
				0800   8F  BF 0013D 14$:    CHMU    #2048						      ; 0625
				       55  DD 00141 15$:    PUSHL   FCB							      ; 0629
				  0C   A4  DD 00143 	    PUSHL   12(PACKET)						      ;
				       56  DD 00146 	    PUSHL   HEADER						      ;
		         7E 	  03   A2  98 00148 	    CVTBL   3(FIB), -(SP)					      ;
				       62  DD 0014C 	    PUSHL   (FIB)						      ;
				       05  DD 0014E 	    PUSHL   #5							      ;
				       5E  DD 00150 	    PUSHL   SP							      ;
				0000G  CF  9F 00152 	    PUSHAB  CREATE_WINDOW					      ;
		         6A 	       08  FB 00156 	    CALLS   #8, SYS$CMKRNL					      ;
		  0000G  CF	       50  D0 00159 	    MOVL    R0, CURRENT_WINDOW					      ;
				       58  DD 0015E 	    PUSHL   ABD							      ; 0630
				0000G  CF  DD 00160 	    PUSHL   CURRENT_WINDOW					      ;
				       55  DD 00164 	    PUSHL   FCB							      ;
				       03  DD 00166 	    PUSHL   #3							      ;
				       5E  DD 00168 	    PUSHL   SP							      ;
				0000G  CF  9F 0016A 	    PUSHAB  MAKE_ACCESS						      ;
		         6A 	       06  FB 0016E 	    CALLS   #6, SYS$CMKRNL					      ;
		         14 	  01   A2  E9 00171 	    BLBC    1(FIB), 16$						      ; 0636
		         01 	  0E   A6  91 00175 	    CMPB    14(HEADER), #1					      ; 0637
				       0E  12 00179 	    BNEQ    16$							      ;
		         10 	  10   A6  B1 0017B 	    CMPW    16(HEADER), #16					      ; 0638
				       08  12 0017F 	    BNEQ    16$							      ;
				  04   A2  9F 00181 	    PUSHAB  4(FIB)						      ; 0639
		  0000G  CF	       01  FB 00184 	    CALLS   #1, FLUSH_FID					      ;
		         4B 	       57  E9 00189 16$:    BLBC    FCB_CREATED, 19$					      ; 0647
				       55  DD 0018C 17$:    PUSHL   FCB							      ; 0652
				       56  DD 0018E 	    PUSHL   HEADER						      ;
		  0000G  CF	       02  FB 00190 	    CALLS   #2, NEXT_HEADER					      ;
		         52 	       50  D0 00195 	    MOVL    R0, NEW_HEADER					      ;
				       1C  13 00198 	    BEQL    18$							      ; 0653
		         56 	       52  D0 0019A 	    MOVL    NEW_HEADER, HEADER					      ; 0654
	   59 	         01 	       06  EF 0019D 	    EXTZV   #6, #1, FUNCTION, -(SP)				      ; 0655
				       7E     001A1									      ;
				       55  DD 001A2 	    PUSHL   FCB							      ;

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:48:42	DBB3:[F11A.SRC]ACCESS.B32;14					Page 2-7
;
				       56  DD 001A4 	    PUSHL   HEADER						      ;
				       03  DD 001A6 	    PUSHL   #3							      ;
				       5E  DD 001A8 	    PUSHL   SP							      ;
				0000G  CF  9F 001AA 	    PUSHAB  MAKE_EXTFCB						      ;
		         6A 	       06  FB 001AE 	    CALLS   #6, SYS$CMKRNL					      ;
		         55 	       50  D0 001B1 	    MOVL    R0, FCB						      ;
				       D6  11 001B4 	    BRB     17$							      ; 0650
		         6B 	       55  D1 001B6 18$:    CMPL    FCB, PRIMARY_FCB					      ; 0658
				       1C  13 001B9 	    BEQL    19$							      ;
		         55 	       6B  D0 001BB 	    MOVL    PRIMARY_FCB, FCB					      ; 0661
				       55  DD 001BE 	    PUSHL   FCB							      ; 0662
				       7E  D4 001C0 	    CLRL    -(SP)						      ;
		  0000G  CF	       02  FB 001C2 	    CALLS   #2, READ_HEADER					      ;
		         56 	       50  D0 001C7 	    MOVL    R0, HEADER						      ;
				       56  DD 001CA 	    PUSHL   HEADER						      ; 0663
				       01  DD 001CC 	    PUSHL   #1							      ;
				       5E  DD 001CE 	    PUSHL   SP							      ;
				0000G  CF  9F 001D0 	    PUSHAB  UPDATE_FCB						      ;
		         6A 	       04  FB 001D4 	    CALLS   #4, SYS$CMKRNL					      ;
		         05 	  32   A4  B1 001D7 19$:    CMPW    50(PACKET), #5					      ; 0670
				       25  1B 001DB 	    BLEQU   21$							      ;
				0000G  CF  D5 001DD 	    TSTL    CURRENT_WINDOW					      ; 0673
				       0B  12 001E1 	    BNEQ    20$							      ;
				       55  DD 001E3 	    PUSHL   FCB							      ; 0674
				       56  DD 001E5 	    PUSHL   HEADER						      ;
				       04  DD 001E7 	    PUSHL   #4							      ;
		  0000G  CF	       03  FB 001E9 	    CALLS   #3, CHECK_PROTECT					      ;
				0140   8F  BB 001EE 20$:    PUSHR   #^M<R6,R8>						      ; 0675
				       02  DD 001F2 	    PUSHL   #2							      ;
				       5E  DD 001F4 	    PUSHL   SP							      ;
				0000G  CF  9F 001F6 	    PUSHAB  READ_ATTRIB						      ;
		         6A 	       05  FB 001FA 	    CALLS   #5, SYS$CMKRNL					      ;
		         02 	       50  E8 001FD 	    BLBS    R0, 21$						      ;
				       00  BF 00200 	    CHMU    #0							      ;
		         50 	       01  D0 00202 21$:    MOVL    #1, R0						      ; 0678
					   04 00205 	    RET     							      ; 0438

; Routine Size:  518 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 22:48:42	DBB3:[F11A.SRC]ACCESS.B32;14					Page 3
;
;	0681	ROUTINE CHECK_FIND (ABD, FIB) =
;	0682	
;	0683	!++
;	0684	!
;	0685	! FUNCTIONAL DESCRIPTION:
;	0686	!
;	0687	!	This routine calls the directory search and intercepts any error
;	0688	!	exits to handle the create if non-existent function. If the search
;	0689	!	is successful, the routine returns success; if the search fails with
;	0690	!	no such file and the create subfunction bit is set, it returns failure;
;	0691	!	all other errors are resignaled.
;	0692	!
;	0693	!
;	0694	! CALLING SEQUENCE:
;	0695	!	CHECK_FIND (ARG1, ARG2)
;	0696	!
;	0697	! INPUT PARAMETERS:
;	0698	!	ARG1: address of buffer descriptor packet
;	0699	!	ARG2: address of FIB
;	0700	!
;	0701	! IMPLICIT INPUTS:
;	0702	!	NONE
;	0703	!
;	0704	! OUTPUT PARAMETERS:
;	0705	!	NONE
;	0706	!
;	0707	! IMPLICIT OUTPUTS:
;	0708	!	NONE
;	0709	!
;	0710	! ROUTINE VALUE:
;	0711	!	1 if find is successful
;	0712	!	0 if file is to be created
;	0713	!
;	0714	! SIDE EFFECTS:
;	0715	!	NONE
;	0716	!
;	0717	!--
;	0718	
;	0719	BEGIN
;	0720	
;	0721	MAP
;	0722		ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH],
;	0723		FIB		: REF BBLOCK;
;	0724	
;	0725	BUILTIN
;	0726		FP;
;	0727	
;	0728	EXTERNAL ROUTINE
;	0729		FIND;				! find file in directory
;	0730	
;	0731	
;	0732	! Establish the condition handler and call FIND. If we hear from it we
;	0733	! return true. Any signals cause either unwind or resignal.
;	0734	!
;	0735	

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:48:42	DBB3:[F11A.SRC]ACCESS.B32;14					Page 3-1
;
;	0736	.FP = HANDLER;
;	0737	
;	0738	FIND (.ABD, .FIB, 0);
;	0739	RETURN 1;
;	0740	
;	0741	END;					! end of routine CHECK_FIND





					 0000 00206 CHECK_FIND:
							    .WORD   Save nothing					      ; 0681
		         6D 	0000V  CF  9E 00208 	    MOVAB   HANDLER, (FP)					      ; 0736
				       7E  D4 0020D 	    CLRL    -(SP)						      ; 0738
		         7E 	  04   AC  7D 0020F 	    MOVQ    ABD, -(SP)						      ;
		  0000G  CF	       03  FB 00213 	    CALLS   #3, FIND						      ;
		         50 	       01  D0 00218 	    MOVL    #1, R0						      ; 0739
					   04 0021B 	    RET     							      ; 0681

; Routine Size:  22 bytes



; Bliss-32 10.1-416	Monday 21-AUG-1978 22:48:42	DBB3:[F11A.SRC]ACCESS.B32;14					Page 4
;
;	0742	ROUTINE HANDLER (SIGNAL, MECHANISM) =
;	0743	
;	0744	!++
;	0745	!
;	0746	! FUNCTIONAL DESCRIPTION:
;	0747	!
;	0748	!	This routine is the condition handler for the conditional find call.
;	0749	!	It intercepts the error exit from FIND and unwinds to CHECK_FIND's
;	0750	!	caller when appropriate.
;	0751	!
;	0752	!
;	0753	! CALLING SEQUENCE:
;	0754	!	HANDLER (ARG1, ARG2)
;	0755	!
;	0756	! INPUT PARAMETERS:
;	0757	!	ARG1: address of signal array
;	0758	!	ARG2: address of mechanism array
;	0759	!
;	0760	! IMPLICIT INPUTS:
;	0761	!	NONE
;	0762	!
;	0763	! OUTPUT PARAMETERS:
;	0764	!	NONE
;	0765	!
;	0766	! IMPLICIT OUTPUTS:
;	0767	!	NONE
;	0768	!
;	0769	! ROUTINE VALUE:
;	0770	!	SS$_RESIGNAL or none if unwind
;	0771	!
;	0772	! SIDE EFFECTS:
;	0773	!	NONE
;	0774	!
;	0775	!--
;	0776	
;	0777	
;	0778	BEGIN
;	0779	
;	0780	MAP
;	0781		SIGNAL		: REF BBLOCK,	! signal arg array
;	0782		MECHANISM	: REF BBLOCK;	! mechanism arg array
;	0783	
;	0784	EXTERNAL ROUTINE
;	0785		SYS$UNWIND	: ADDRESSING_MODE (ABSOLUTE);
;	0786						! system unwind service
;	0787	
;	0788	
;	0789	! If the condition is change mode to user (error exit) and the status is
;	0790	! no such file, cause an unwind to return 0 to the access main line.
;	0791	! Otherwise, just resignal the condition.
;	0792	!
;	0793	
;	0794	IF .SIGNAL[CHF$L_SIG_NAME] EQL SS$_CMODUSER
;	0795	AND .SIGNAL[CHF$L_SIG_ARG1] EQL SS$_NOSUCHFILE
;	0796	THEN

; Bliss-32 10.1-416	Monday 21-AUG-1978 22:48:42	DBB3:[F11A.SRC]ACCESS.B32;14					Page 4-1
;
;	0797	    BEGIN
;	0798	    MECHANISM[CHF$L_MCH_SAVR0] = 0;
;	0799	    SYS$UNWIND (0, 0);
;	0800	    END;
;	0801	
;	0802	RETURN SS$_RESIGNAL;			! status is irrelevant if unwinding
;	0803	
;	0804	END;					! end of routine HANDLER



							    .EXTRN  SYS$UNWIND

					 0000 0021C HANDLER:.WORD   Save nothing					      ; 0742
		         50 	  04   AC  D0 0021E 	    MOVL    SIGNAL, R0						      ; 0794
	      00000424   8F	  04   A0  D1 00222 	    CMPL    4(R0), #1060					      ;
				       1A  12 0022A 	    BNEQ    1$							      ;
	      00000910   8F	  08   A0  D1 0022C 	    CMPL    8(R0), #2320					      ; 0795
				       10  12 00234 	    BNEQ    1$							      ;
		         50 	  08   AC  D0 00236 	    MOVL    MECHANISM, R0					      ; 0798
				  0C   A0  D4 0023A 	    CLRL    12(R0)						      ;
				       7E  7C 0023D 	    CLRQ    -(SP)						      ; 0799
	      00000000G  9F	       02  FB 0023F 	    CALLS   #2, @#SYS$UNWIND					      ;
		         50 	0918   8F  3C 00246 1$:     MOVZWL  #2328, R0						      ; 0802
					   04 0024B 	    RET     							      ; 0742

; Routine Size:  48 bytes


;	0805	
;	0806	END
;	0807	ELUDOM






;				       PSECT SUMMARY
;
;	Name		 Bytes			       Attributes
;
;  $CODE$         	   588  NOWRT,  RD ,  EXE,NOSHR,  LCL,  REL,  CON,NOPIC,ALIGN(2)




;				LIBRARY STATISTICS
;
;					     -------- Symbols --------    Blocks
;	File				     Total    Loaded   Percent      Read
;
;  DBA4:[SYSLIB]LIB.L32;1		      5582        43         0       261



; Bliss-32 10.1-416	Monday 21-AUG-1978 22:48:42	DBB3:[F11A.SRC]ACCESS.B32;14					Page 4-2
;



; Size:		588 code + 0 data bytes
; Run Time:	00:14.1
; Elapsed Time:	00:28.7
; Memory Used:	381 pages
; Compilation Complete
